!function(e){function t(t){for(var a,o,c=t[0],s=t[1],l=t[2],b=0,u=[];b<c.length;b++)o=c[b],Object.prototype.hasOwnProperty.call(n,o)&&n[o]&&u.push(n[o][0]),n[o]=0;for(a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a]);for(d&&d(t);u.length;)u.shift()();return i.push.apply(i,l||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],a=!0,c=1;c<r.length;c++){var s=r[c];0!==n[s]&&(a=!1)}a&&(i.splice(t--,1),e=o(o.s=r[0]))}return e}var a={},n={0:0},i=[];function o(t){if(a[t])return a[t].exports;var r=a[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=a,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)o.d(r,a,function(t){return e[t]}.bind(null,a));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var c=window.webpackJsonp=window.webpackJsonp||[],s=c.push.bind(c);c.push=t,c=c.slice();for(var l=0;l<c.length;l++)t(c[l]);var d=s;i.push([62,1]),r()}({101:function(e,t,r){},102:function(e,t,r){},103:function(e,t,r){},108:function(e,t,r){},109:function(e,t,r){},110:function(e,t,r){},111:function(e,t,r){},112:function(e,t,r){"use strict";r.r(t);r(7),r(22),r(9);var a=r(0),n=(r(101),r(1)),i=r(2);function o(e){var t,r,n=e[6].default,i=Object(a.g)(n,e,e[5],null);return{c(){t=Object(a.j)("div"),i&&i.c(),Object(a.c)(t,"class","gl")},m(n,o){Object(a.n)(n,t,o),i&&i.m(t,null),e[7](t),r=!0},p(e,t){var[r]=t;i&&i.p&&32&r&&Object(a.y)(i,n,e,e[5],r,null,null)},i(e){r||(Object(a.w)(i,e),r=!0)},o(e){Object(a.x)(i,e),r=!1},d(r){r&&Object(a.i)(t),i&&i.d(r),e[7](null)}}}function c(e,t,o){var{visible:c=!1}=t,{enabled:s=!1}=t,{createScene:l=null}=t,{createEngine:d=null}=t,b=Object(n.a)("ar"),u=Object(n.a)("marker"),v={scene:null,objects:[]};Object(n.c)("gl",v);var j,m=null;Object(n.b)(()=>{var e=r(36);e("https://cdn.babylonjs.com/babylon.js",()=>{e(["https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js","https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js","https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js","https://cdn.babylonjs.com/gui/babylon.gui.min.js","https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"],"extensions"),e.ready("extensions",()=>new Promise((function(e,t){var r=(null!=d?d:e=>{var t=document.createElement("canvas");return t.addEventListener("touchmove",e=>{e.preventDefault()},!1),e.appendChild(t),new BABYLON.Engine(t,!0)})(j);return(null!=l?l:e=>new Promise((function(t,r){var a=new BABYLON.Scene(e);a.useRightHandedSystem=!0,a.clearColor=new BABYLON.Color4(0,0,0,0);var n=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,a);n.attachControl(e.getRenderingCanvas(),!0);new BABYLON.HemisphericLight("light1",new BABYLON.Vector3(1,1,0),a),new BABYLON.PointLight("light2",new BABYLON.Vector3(0,1,-1),a);var i=BABYLON.MeshBuilder.CreateBox("box",{width:1,height:1,size:1},a),o=new BABYLON.TransformNode("markerRoot");return i.parent=o,t([a,n,o])})))(r).then(e=>{var[t,a,n]=e;for(var l in n.setEnabled(!1),v.objects)v.objects[l].parent=n;o(9,m=e=>{n.setEnabled("true"===s&&e),t.render()}),u.watch(e=>{if(e){var t=i.a.create();"portrait"===b.orientation?i.a.rotateZ(t,e,-1*Math.PI/2):i.a.copy(t,e),n.setPreTransformMatrix(BABYLON.Matrix.FromArray(t)),o(1,c=!0)}else o(1,c=!1)});var d=(e,t,r,a)=>{null!=e&&("portrait"===a?(e.setSize(r,t),e.resize()):(e.setSize(t,r),e.resize()))};d(r,b.size.videoWidth,b.size.videoHeight,b.orientation),b.resized.watch(()=>{d(r,b.size.offsetWidth,b.size.offsetHeight,b.orientation)}),b.render.watch(e=>{if("true"===s&&c&&null!=t){for(var r in v.objects)v.objects[r].custom.animation&&v.objects[r].custom.animation.tick(e);t.render()}}),b.setup.watch(e=>{null!=a&&(a.freezeProjectionMatrix(BABYLON.Matrix.FromArray(e)),console.log("Camera projection set: "+e))}),console.log("Scene created")}),e()})))})});var{$$slots:p={},$$scope:h}=t;return e.$set=e=>{"visible"in e&&o(1,c=e.visible),"enabled"in e&&o(2,s=e.enabled),"createScene"in e&&o(3,l=e.createScene),"createEngine"in e&&o(4,d=e.createEngine),"$$scope"in e&&o(5,h=e.$$scope)},e.$$.update=()=>{514&e.$$.dirty&&null!=m&&m(c)},[j,c,s,l,d,h,p,function(e){a.d[e?"unshift":"push"](()=>{o(0,j=e)})}]}class s extends a.a{constructor(e){super(),Object(a.m)(this,e,c,o,a.r,{visible:1,enabled:2,createScene:3,createEngine:4})}}var l=s,d=r(4);r(102);function b(e){var t,r,n,i,o=e[9].default,c=Object(a.g)(o,e,e[8],null),s=e[1]&&function(e){var t;return{c(){(t=Object(a.j)("div")).textContent="".concat(e[1])},m(e,r){Object(a.n)(e,t,r)},p:a.p,d(e){e&&Object(a.i)(t)}}}(e);return{c(){t=Object(a.j)("div"),c&&c.c(),r=Object(a.u)(),n=Object(a.j)("div"),s&&s.c(),Object(a.c)(t,"class","gl"),Object(a.c)(n,"id","debuginfo"),Object(a.c)(n,"class","svelte-199l4wg")},m(o,l){Object(a.n)(o,t,l),c&&c.m(t,null),e[10](t),Object(a.n)(o,r,l),Object(a.n)(o,n,l),s&&s.m(n,null),i=!0},p(e,t){var[r]=t;c&&c.p&&256&r&&Object(a.y)(c,o,e,e[8],r,null,null),e[1]&&s.p(e,r)},i(e){i||(Object(a.w)(c,e),i=!0)},o(e){Object(a.x)(c,e),i=!1},d(i){i&&Object(a.i)(t),c&&c.d(i),e[10](null),i&&Object(a.i)(r),i&&Object(a.i)(n),s&&s.d()}}}function u(e,t,r){var{enabled:o="true"}=t,{visible:c="true"}=t,{directUpdate:s="false"}=t,{scale:l="1"}=t,{createScene:b=null}=t,{createEngine:u=null}=t,v=Object(n.a)("ar"),j=Object(n.a)("marker"),m={scene:null,objects:[]};Object(n.c)("gl",m);var p,h=null;document.getElementById("glcanvas");Object(n.b)(()=>{var e=(null!=u?u:e=>{var t=document.createElement("canvas");t.addEventListener("touchmove",e=>{e.preventDefault()},!1),e.appendChild(t);var r=new d.WebGLRenderer({canvas:t,alpha:!0});return r.autoClear=!1,r})(p);(null!=b?b:()=>new Promise((function(e,t){var r=new d.Scene,a=new d.Camera;a.matrixAutoUpdate=!1,a.position.set(0,0,0),a.updateMatrix(),r.add(a);var n=new d.PointLight(16777215);n.position.set(400,500,100),r.add(n);var i=new d.PointLight(16777215);i.position.set(-400,-500,-100),r.add(i);var o=new d.Group;o.matrixAutoUpdate=!1;var c=new d.Mesh(new d.BoxGeometry(1,1,1),new d.MeshLambertMaterial({color:16777215,wireframe:!1,opacity:.5,transparent:!0}));return o.add(c),r.add(o),console.log(r),e([r,a,o])})))(e,p).then(t=>{var[a,n,d]=t;for(var b in m.scene=a,r(12,h=t=>{d.visible="true"===o&&"true"===t,e.clear&&e.clear(),e.render(a,n)}),j.watch(e=>{if(e){var t=i.a.create();if("portrait"===m.orientation?i.a.rotateZ(t,e,-1*Math.PI/2):i.a.copy(t,e),"true"===s)d.matrix.fromArray(t);else{var a=i.a.getTranslation(i.c.create(),t),n=i.a.getRotation(i.b.create(),t);d.quaternion.fromArray(n),d.position.fromArray(a),d.scale.set(l,l,l),d.updateMatrix(),d.updateWorldMatrix(!1,!0)}r(2,c="true")}else r(2,c="false")}),m.objects)d.add(m.objects[b]);v.setup.watch(e=>{null!=n&&(n.projectionMatrix.fromArray(e),console.log("Camera projection set: "+e))});var u=(e,t,r,a)=>{null!=e&&("portrait"===a?e.setSize(r,t):e.setSize(t,r))};u(e,v.size.offsetWidth,v.size.offsetHeight,v.orientation),v.resized.watch(()=>{u(e,v.size.offsetWidth,v.size.offsetHeight,v.orientation)}),v.render.watch(t=>{if("true"===o&&a&&"true"===c){for(var r in e.clear&&e.clear(),m.objects)m.objects[r].custom.animation&&m.objects[r].custom.animation.tick(t);e.render(a,n)}}),console.log("Scene created")})});var{$$slots:f={},$$scope:O}=t;return e.$set=e=>{"enabled"in e&&r(3,o=e.enabled),"visible"in e&&r(2,c=e.visible),"directUpdate"in e&&r(4,s=e.directUpdate),"scale"in e&&r(5,l=e.scale),"createScene"in e&&r(6,b=e.createScene),"createEngine"in e&&r(7,u=e.createEngine),"$$scope"in e&&r(8,O=e.$$scope)},e.$$.update=()=>{4100&e.$$.dirty&&null!=h&&h(c)},[p,void 0,c,o,s,l,b,u,O,f,function(e){a.d[e?"unshift":"push"](()=>{r(0,p=e)})}]}class v extends a.a{constructor(e){super(),Object(a.m)(this,e,u,b,a.r,{enabled:3,visible:2,directUpdate:4,scale:5,createScene:6,createEngine:7})}}var j=v;r(103);function m(e){var t,r,n,i,o=e[6].default,c=Object(a.g)(o,e,e[5],null);return{c(){t=Object(a.j)("div"),r=Object(a.j)("canvas"),n=Object(a.u)(),c&&c.c(),Object(a.c)(r,"id",e[0]),Object(a.c)(r,"class","svelte-w5yx4k"),Object(a.c)(t,"class","gl"),Object(a.c)(t,"id","container")},m(o,s){Object(a.n)(o,t,s),Object(a.b)(t,r),Object(a.b)(t,n),c&&c.m(t,null),e[7](t),i=!0},p(e,t){var[n]=t;(!i||1&n)&&Object(a.c)(r,"id",e[0]),c&&c.p&&32&n&&Object(a.y)(c,o,e,e[5],n,null,null)},i(e){i||(Object(a.w)(c,e),i=!0)},o(e){Object(a.x)(c,e),i=!1},d(r){r&&Object(a.i)(t),c&&c.d(r),e[7](null)}}}function p(e,t,o){var c,{visible:s=!1}=t,{enabled:l=!1}=t,{patchRoot:d="/js/cables/Lsystem"}=t,{id:b="cablescanvas"}=t,u=Object(n.a)("ar"),v=Object(n.a)("marker"),j={scene:null,objects:[]};Object(n.c)("gl",j);var m=null;Object(n.b)(()=>{r(36)(d+"/js/patch.js",()=>{CABLES.patch=new CABLES.Patch({patch:CABLES.exportedPatch,prefixAssetPath:"",glCanvasId:b,onError:alert,glCanvasResizeToParent:!0,canvas:{alpha:!0,premultipliedAlpha:!0}}),o(8,m=e=>{}),v.watch(e=>{if(e){var t=i.a.create();"portrait"===j.orientation?i.a.rotateZ(t,e,-1*Math.PI/2):i.a.copy(t,e);var r=i.a.getTranslation(vec3.create(),t),a=i.a.getRotation(quat.create(),t);i.a.getScaling(vec3.create(),t);patch.setVariable("posX",r[0]),patch.setVariable("posY",r[1]),patch.setVariable("posZ",r[2]),patch.setVariable("rotX",a[0]),patch.setVariable("rotY",a[1]),patch.setVariable("rotZ",a[2]),o(2,s="true")}else o(2,s="false")});var e=(e,t,r)=>{o(1,c.style.width=e,c),o(1,c.style.height=t,c)};e(u.size.videoWidth,u.size.videoHeight,u.orientation),u.resized.watch(()=>{e(u.size.offsetWidth,u.size.offsetHeight,u.orientation)})})});var{$$slots:p={},$$scope:h}=t;return e.$set=e=>{"visible"in e&&o(2,s=e.visible),"enabled"in e&&o(3,l=e.enabled),"patchRoot"in e&&o(4,d=e.patchRoot),"id"in e&&o(0,b=e.id),"$$scope"in e&&o(5,h=e.$$scope)},e.$$.update=()=>{260&e.$$.dirty&&null!=m&&m(s)},[b,c,s,l,d,h,p,function(e){a.d[e?"unshift":"push"](()=>{o(1,c=e)})}]}class h extends a.a{constructor(e){super(),Object(a.m)(this,e,p,m,a.r,{visible:2,enabled:3,patchRoot:4,id:0})}}var f=h,O=r(14);a.a;r(108);a.a;r(109);a.a;var g=r(6);r(110);function y(e){var t;return{c(){(t=Object(a.j)("div")).innerHTML='<div class="px-6 py-4"><p class="text-gray-500 text-base">Наведите камеру на маркер</p></div>',Object(a.c)(t,"id","markerWarning"),Object(a.c)(t,"class","max-w-sm rounded overflow-hidden shadow-lg bg-cover svelte-1xatyo3")},m(e,r){Object(a.n)(e,t,r)},d(e){e&&Object(a.i)(t)}}}function w(e){var t,r,n,i,o,c,s,l,d,b,u,v,j,m,p,h,f,O,g,y=e[5].size.videoWidth+"",w=e[5].size.videoHeight+"",$=e[5].size.offsetWidth+"",L=e[5].size.offsetHeight+"",M=e[5].orientation+"",S=""!=e[4]&&x(e),C=""!=k&&{c(){(g=Object(a.j)("div")).textContent="Error: ".concat(k)},m(e,t){Object(a.n)(e,g,t)},p:a.p,d(e){e&&Object(a.i)(g)}};return{c(){t=Object(a.j)("div"),r=Object(a.j)("div"),n=Object(a.v)("Video size: "),i=Object(a.v)(y),o=Object(a.v)(", "),c=Object(a.v)(w),s=Object(a.u)(),l=Object(a.j)("div"),d=Object(a.v)("Video offset: "),b=Object(a.v)($),u=Object(a.v)(", "),v=Object(a.v)(L),j=Object(a.u)(),m=Object(a.j)("div"),p=Object(a.v)("Orientation: "),h=Object(a.v)(M),f=Object(a.u)(),S&&S.c(),O=Object(a.u)(),C&&C.c(),Object(a.c)(t,"id","debuginfo"),Object(a.c)(t,"class","svelte-1xatyo3")},m(e,g){Object(a.n)(e,t,g),Object(a.b)(t,r),Object(a.b)(r,n),Object(a.b)(r,i),Object(a.b)(r,o),Object(a.b)(r,c),Object(a.b)(t,s),Object(a.b)(t,l),Object(a.b)(l,d),Object(a.b)(l,b),Object(a.b)(l,u),Object(a.b)(l,v),Object(a.b)(t,j),Object(a.b)(t,m),Object(a.b)(m,p),Object(a.b)(m,h),Object(a.b)(t,f),S&&S.m(t,null),Object(a.b)(t,O),C&&C.m(t,null)},p(e,r){32&r&&y!==(y=e[5].size.videoWidth+"")&&Object(a.t)(i,y),32&r&&w!==(w=e[5].size.videoHeight+"")&&Object(a.t)(c,w),32&r&&$!==($=e[5].size.offsetWidth+"")&&Object(a.t)(b,$),32&r&&L!==(L=e[5].size.offsetHeight+"")&&Object(a.t)(v,L),32&r&&M!==(M=e[5].orientation+"")&&Object(a.t)(h,M),""!=e[4]?S?S.p(e,r):((S=x(e)).c(),S.m(t,O)):S&&(S.d(1),S=null),""!=k&&C.p(e,r)},d(e){e&&Object(a.i)(t),S&&S.d(),C&&C.d()}}}function x(e){var t,r,n;return{c(){t=Object(a.j)("div"),r=Object(a.v)("Msg: "),n=Object(a.v)(e[4])},m(e,i){Object(a.n)(e,t,i),Object(a.b)(t,r),Object(a.b)(t,n)},p(e,t){16&t&&Object(a.t)(n,e[4])},d(e){e&&Object(a.i)(t)}}}function $(e){var t,r,n,i,o,c,s,l,d=e[17].default,b=Object(a.g)(d,e,e[16],null),u=e[6]&&y(),v=("true"===e[0]||!0===e[0])&&w(e);return{c(){t=Object(a.j)("div"),r=Object(a.j)("video"),n=Object(a.u)(),i=Object(a.j)("div"),b&&b.c(),o=Object(a.u)(),u&&u.c(),c=Object(a.u)(),v&&v.c(),s=Object(a.k)(),Object(a.c)(r,"id","videocanvas"),r.controls="",r.autoplay="true",r.muted="true",r.loop="true",r.playsInline="true",Object(a.c)(r,"class","svelte-1xatyo3"),Object(a.c)(i,"id","markercontainer"),Object(a.c)(i,"class","svelte-1xatyo3"),Object(a.c)(t,"class","videoContainer svelte-1xatyo3")},m(d,j){Object(a.n)(d,t,j),Object(a.b)(t,r),e[18](r),Object(a.b)(t,n),Object(a.b)(t,i),b&&b.m(i,null),e[19](i),e[20](t),Object(a.n)(d,o,j),u&&u.m(d,j),Object(a.n)(d,c,j),v&&v.m(d,j),Object(a.n)(d,s,j),l=!0},p(e,t){var[r]=t;b&&b.p&&65536&r&&Object(a.y)(b,d,e,e[16],r,null,null),e[6]?u||((u=y()).c(),u.m(c.parentNode,c)):u&&(u.d(1),u=null),"true"===e[0]||!0===e[0]?v?v.p(e,r):((v=w(e)).c(),v.m(s.parentNode,s)):v&&(v.d(1),v=null)},i(e){l||(Object(a.w)(b,e),l=!0)},o(e){Object(a.x)(b,e),l=!1},d(r){r&&Object(a.i)(t),e[18](null),b&&b.d(r),e[19](null),e[20](null),r&&Object(a.i)(o),u&&u.d(r),r&&Object(a.i)(c),v&&v.d(r),r&&Object(a.i)(s)}}}var k="";function L(e,t,i){var o,c,s,l,{smoothingEnabled:d=!1}=t,{thresholdMode:b=4}=t,{threshold:u=160}=t,{debug:v=!1}=t,{debug_info:j=!0}=t,{maxARVideoSize:m=640}=t,{markerLossDelay:p=200}=t,{pattRatio:h=.9}=t,f=Object(g.c)(!0);Object(a.e)(e,f,e=>i(6,o=e));var O=Object(g.a)(f,{show:(e,t)=>t}),y=Object(g.c)(0),w=Object(g.a)(y,{inc:e=>(O.show(!1),console.log("Marker count: ",e+1),e+1),dec:e=>(console.log("Marker count: ",e-1),1===e&&O.show(!0),e-1)}),x="",$=[],k={size:{videoWidth:null,videoHeight:null,offsetWidth:320,offsetHeight:240,marginLeft:0,marginTop:0},orientation:null,cameramat:null,marker:{visible:!1,mat:null},setup:Object(g.b)(),resized:Object(g.b)(),render:Object(g.b)(),markerFound:Object(g.b)(),markerLost:Object(g.b)(),loadPattern:(e,t)=>{$.push([e,t])},visibleMarkers:w};Object(n.c)("ar",k);var L=p,M=!1;Object(n.b)(()=>new Promise((function(e,t){var a=r(36);return a(v?["/js/artoolkit/artoolkit.api.js","/js/artoolkit/artoolkit.debug.js"]:["/js/artoolkit/artoolkit_wasm.js"],"bundle"),a.ready("bundle",()=>new Promise((function(e,t){var r=new ARCameraParam;return r.onload=()=>new Promise((function(e,t){if(M)return e();if(M=!0,void 0===navigator.mediaDevices||void 0===navigator.mediaDevices.enumerateDevices||void 0===navigator.mediaDevices.getUserMedia){var a="";void 0===navigator.mediaDevices?a="navigator.mediaDevices":void 0===navigator.mediaDevices.enumerateDevices?a="navigator.mediaDevices.enumerateDevices":void 0===navigator.mediaDevices.getUserMedia?a="navigator.mediaDevices.getUserMedia":console.assert(!1),onError({name:"",message:"WebRTC issue-! "+a+" not present in your browser"})}var n=null;return s.addEventListener("canplay",e=>new Promise((function(t,a){var o=e.target,c=e=>{if(i(3,l.style.top=e.top,l),i(3,l.style.left=e.left,l),i(5,k.size.videoWidth=e.videoWidth,k),i(5,k.size.videoHeight=e.videoHeight,k),i(5,k.size.offsetWidth=e.offsetWidth,k),i(5,k.size.offsetHeight=e.offsetHeight,k),window.innerWidth<window.innerHeight?(i(5,k.orientation="portrait",k),i(3,l.style.width=e.offsetHeight+"px",l),i(3,l.style.height=e.offsetWidth+"px",l),i(3,l.style.transform="rotate(-90deg) translateX(-100%)",l)):(i(5,k.orientation="landscape",k),i(3,l.style.width=e.offsetWidth+"px",l),i(3,l.style.height=e.offsetHeight+"px",l),i(3,l.style.transform="",l)),null!=n){var[t,r]="landscape"===k.orientation?[o.videoWidth,o.videoHeight]:[o.videoHeight,o.videoWidth];n.orientation=k.orientation,n.videoWidth=t,n.videoHeight=r,k.setup(n.getCameraMatrix())}i(4,x="resized"),k.resized()};new ResizeObserver(()=>{null!=k&&null!=o&&(null==n&&(n=function(e,t){var r=e=>new Promise((function(t,r){return"true"===v&&(console.log("Detected marker with ids:",e.data.marker.id,e.data.marker.idPatt,e.data.marker.idMatrix),console.log("Marker data",e.data.marker),console.log("Marker transform matrix:",[].join.call(e.data.matrix,", "))),k.markerFound({canvas:e.target.canvas,data:e.data}),t()})),a=(m||Math.max(e.videoWidth,e.videoHeight))/Math.max(e.videoWidth,e.videoHeight),n=v?e.videoWidth:a*e.videoWidth,o=v?e.videoHeight:a*e.videoHeight;!v&&e.videoWidth<e.videoHeight&&([o,n]=[n,o]);var c=new ARController(n,o,t);return c.onload=()=>new Promise((function(t,a){return!0,console.log("arctrl loaded"),i(4,x="arctrl loaded"),c.setPatternDetectionMode(artoolkit.AR_TEMPLATE_MATCHING_MONO_AND_MATRIX),c.setMatrixCodeType(artoolkit.AR_MATRIX_CODE_4x4_BCH_13_5_5),c.setPattRatio(h),c.setThresholdMode(b),c.setThreshold(u),c.ctx.mozImageSmoothingEnabled=d,c.ctx.webkitImageSmoothingEnabled=d,c.ctx.msImageSmoothingEnabled=d,c.ctx.imageSmoothingEnabled=d,c.image=e,i(4,x="arctrl video assigned"),k.setup(c.getCameraMatrix()),i(4,x="arctrl camera matrix set"),i(5,k.loadPattern=(e,t)=>c.loadMarker(e,e=>new Promise((function(r,a){return console.log("Marker loaded, id:",e),t(e),r()}))),k),$.forEach(e=>{var[t,r]=e;k.loadPattern(t,r)}),i(4,x="arctrl camera markers set"),c.addEventListener("getMarker",r),i(4,x="arctrl loop started"),"true"!==v&&!0!==v||(i(8,v=!1),c.debugSetup()),t()})),c}(o,r)),c(o))}).observe(o),c(o);var s=()=>new Promise((function(e,t){return requestAnimationFrame(s),null==n||(n.process(o),n.getMarkerNum()>0?L=p:(0===L&&k.markerLost(),L--),k.render()),e()}));return s(),o.play(),t()}))),navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"environment"}}).then(e=>{console.log("Got camera object"),i(2,s.srcObject=e,s)},e=>{console.error("Error: "+e),i(2,s.src="/assets/Output_4-1.webm",s)}),console.log("artoolkit loaded"),e()})),r.load("/assets/camera_para.dat"),e()}))),e()})));var{$$slots:S={},$$scope:C}=t;return e.$set=e=>{"smoothingEnabled"in e&&i(9,d=e.smoothingEnabled),"thresholdMode"in e&&i(10,b=e.thresholdMode),"threshold"in e&&i(11,u=e.threshold),"debug"in e&&i(8,v=e.debug),"debug_info"in e&&i(0,j=e.debug_info),"maxARVideoSize"in e&&i(12,m=e.maxARVideoSize),"markerLossDelay"in e&&i(13,p=e.markerLossDelay),"pattRatio"in e&&i(14,h=e.pattRatio),"$$scope"in e&&i(16,C=e.$$scope)},[j,c,s,l,x,k,o,f,v,d,b,u,m,p,h,"/js/artoolkit/artoolkit_wasm.wasm",C,S,function(e){a.d[e?"unshift":"push"](()=>{i(2,s=e)})},function(e){a.d[e?"unshift":"push"](()=>{i(3,l=e)})},function(e){a.d[e?"unshift":"push"](()=>{i(1,c=e)})}]}class M extends a.a{constructor(e){super(),Object(a.m)(this,e,L,$,a.r,{smoothingEnabled:9,thresholdMode:10,threshold:11,debug:8,debug_info:0,maxARVideoSize:12,markerLossDelay:13,pattRatio:14,artoolkit_wasm_url:15})}get artoolkit_wasm_url(){return this.$$.ctx[15]}}var S=M;class C{constructor(e,t,r){this.visible=!1,this.markerLostCountdown=r,this.update=Object(g.b)(),this.marker=Object(g.c)(i.a),this.marker.on(this.update,(t,r)=>(null!==r?this.visible||(e.visibleMarkers.inc(),this.visible=!0):this.visible&&(this.visible=!1,e.visibleMarkers.dec()),r)),void 0===t?e.markerFound.watch(e=>{this.update(e.data.matrixGL_RH)}):e.markerFound.watch(e=>{t(e)?(this.update(e.data.matrixGL_RH),this.markerLostCountdown=r):(0===this.markerLostCountdown&&this.update(null),this.markerLostCountdown--)}),e.markerLost.watch(()=>{this.update(null)})}watch(e){this.marker.watch(e)}}function E(e){var t,r,n=e[3].default,i=Object(a.g)(n,e,e[2],null);return{c(){t=Object(a.j)("div"),i&&i.c(),Object(a.c)(t,"class","marker")},m(e,n){Object(a.n)(e,t,n),i&&i.m(t,null),r=!0},p(e,t){var[r]=t;i&&i.p&&4&r&&Object(a.y)(i,n,e,e[2],r,null,null)},i(e){r||(Object(a.w)(i,e),r=!0)},o(e){Object(a.x)(i,e),r=!1},d(e){e&&Object(a.i)(t),i&&i.d(e)}}}function A(e,t,r){var{pattern:a="assets/hiro.patt"}=t,{markerLossDelay:i=10}=t,o=Object(n.a)("ar"),c=-1;o.loadPattern(a,e=>{c=e});var s=new C(o,e=>c>=0&&e.data.marker.idPatt===c,i);Object(n.c)("marker",s);var{$$slots:l={},$$scope:d}=t;return e.$set=e=>{"pattern"in e&&r(0,a=e.pattern),"markerLossDelay"in e&&r(1,i=e.markerLossDelay),"$$scope"in e&&r(2,d=e.$$scope)},[a,i,d,l]}class P extends a.a{constructor(e){super(),Object(a.m)(this,e,A,E,a.r,{pattern:0,markerLossDelay:1})}}var z=P;r(111);function W(e){var t,r,n,i,o,c,s,d;return t=new j({props:{directUpdate:"false",scale:"0.005",createEngine:e[3],createScene:e[5]}}),n=new l({props:{createScene:e[4],enabled:"true"}}),o=new j({}),s=new f({}),{c(){Object(a.f)(t.$$.fragment),r=Object(a.u)(),Object(a.f)(n.$$.fragment),i=Object(a.u)(),Object(a.f)(o.$$.fragment),c=Object(a.u)(),Object(a.f)(s.$$.fragment)},m(e,l){Object(a.o)(t,e,l),Object(a.n)(e,r,l),Object(a.o)(n,e,l),Object(a.n)(e,i,l),Object(a.o)(o,e,l),Object(a.n)(e,c,l),Object(a.o)(s,e,l),d=!0},p(e,r){var a={};4096&r&&(a.$$scope={dirty:r,ctx:e}),t.$set(a)},i(e){d||(Object(a.w)(t.$$.fragment,e),Object(a.w)(n.$$.fragment,e),Object(a.w)(o.$$.fragment,e),Object(a.w)(s.$$.fragment,e),d=!0)},o(e){Object(a.x)(t.$$.fragment,e),Object(a.x)(n.$$.fragment,e),Object(a.x)(o.$$.fragment,e),Object(a.x)(s.$$.fragment,e),d=!1},d(e){Object(a.h)(t,e),e&&Object(a.i)(r),Object(a.h)(n,e),e&&Object(a.i)(i),Object(a.h)(o,e),e&&Object(a.i)(c),Object(a.h)(s,e)}}}function B(e){var t,r;return t=new z({props:{pattern:"/assets/pattern-qr-marker.patt",$$slots:{default:[W]},$$scope:{ctx:e}}}),{c(){Object(a.f)(t.$$.fragment)},m(e,n){Object(a.o)(t,e,n),r=!0},p(e,r){var a={};4096&r&&(a.$$scope={dirty:r,ctx:e}),t.$set(a)},i(e){r||(Object(a.w)(t.$$.fragment,e),r=!0)},o(e){Object(a.x)(t.$$.fragment,e),r=!1},d(e){Object(a.h)(t,e)}}}function R(e){var t,r,n,i,o,c,s,l,d,b;return r=new S({props:{$$slots:{default:[B]},$$scope:{ctx:e}}}),{c(){t=Object(a.j)("main"),Object(a.f)(r.$$.fragment),n=Object(a.u)(),i=Object(a.j)("div"),(o=Object(a.j)("div")).innerHTML='<div class="h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden" style="background-image: url(&#39;/assets/img/card-left.jpg&#39;)" title="Woman holding a mug"></div> \n        <div class="border-r border-b border-l border-gray-400 lg:border-l-0 lg:border-t lg:border-gray-400 bg-transparent rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal"><div class="mb-8"><p class="text-sm text-gray-600 flex items-center"><svg class="fill-current text-gray-500 w-3 h-3 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M4 8V6a6 6 0 1 1 12 0v2h1a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2h1zm5 6.73V17h2v-2.27a2 2 0 1 0-2 0zM7 6v2h6V6a3 3 0 0 0-6 0z"></path></svg>\n                    Members only\n                </p> \n                <div class="text-gray-900 font-bold text-xl mb-2">Can coffee make you a better developer?</div> \n                <p class="text-gray-700 text-base">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.</p></div> \n            <div class="flex items-center"><img class="w-10 h-10 rounded-full mr-4" src="/assets/img/jonathan.jpg" alt="Avatar of Jonathan Reinink"> \n                <div class="text-sm"><p class="text-gray-900 leading-none">Jonathan Reinink</p> \n                    <p class="text-gray-600">Aug 18</p></div></div></div>',c=Object(a.u)(),s=Object(a.j)("div"),l=Object(a.j)("address"),(d=Object(a.j)("a")).textContent="Позвони мне",Object(a.c)(o,"class","max-w-sm w-full lg:max-w-full lg:flex"),Object(a.c)(d,"href","tel:123-456-7890"),Object(a.c)(s,"id","tel"),Object(a.c)(s,"class","bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"),Object(a.c)(i,"class","card")},m(u,v){Object(a.n)(u,t,v),Object(a.o)(r,t,null),e[7](t),Object(a.n)(u,n,v),Object(a.n)(u,i,v),Object(a.b)(i,o),Object(a.b)(i,c),Object(a.b)(i,s),Object(a.b)(s,l),Object(a.b)(l,d),e[8](d),e[9](i),b=!0},p(e,t){var[a]=t,n={};4096&a&&(n.$$scope={dirty:a,ctx:e}),r.$set(n)},i(e){b||(Object(a.w)(r.$$.fragment,e),b=!0)},o(e){Object(a.x)(r.$$.fragment,e),b=!1},d(o){o&&Object(a.i)(t),Object(a.h)(r),e[7](null),o&&Object(a.i)(n),o&&Object(a.i)(i),e[8](null),e[9](null)}}}function _(e,t,i){var o,c,s,l=document.documentElement;l.classList.add("text-gray-900"),l.classList.add("antialiased"),l.classList.add("leading-tight");var{SCENE_SCALE:d=.1}=t;return Object(n.b)(()=>new Promise((function(e,t){return e()}))),e.$set=e=>{"SCENE_SCALE"in e&&i(6,d=e.SCENE_SCALE)},[o,c,s,e=>{var t=new O.CSS3DRenderer;return e.appendChild(t.domElement),t},e=>new Promise((function(t,r){var a,n,i,o;return Promise.resolve(BABYLON.SceneLoader.LoadAsync("","https://digitalrats.ru/assets/babylonJS_logo_v3.babylon",e)).then((function(c){try{return(a=c).clearColor=new BABYLON.Color4(0,0,0,0),(n=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,a)).attachControl(e.getRenderingCanvas(),!0),i=[a.rootNodes[0],a.rootNodes[1]],o=new BABYLON.TransformNode("markerRoot"),i[0].parent=o,i[1].parent=o,t([a,n,o])}catch(e){return r(e)}}),r)})),e=>new Promise((function(e,t){var a=r(4),n=r(14),i=new a.Scene,o=new a.PerspectiveCamera;o.matrixAutoUpdate=!1,o.position.set(0,0,0),o.updateMatrix(),i.add(o);var s=new a.PointLight(16777215);s.position.set(400,500,100),i.add(s);var l=new a.PointLight(16777215);l.position.set(-400,-500,-100),i.add(l);var b=new n.CSS3DObject(c);return b.matrixAutoUpdate=!1,i.add(b),i.scale.set(d,d,d),e([i,o,b])})),d,function(e){a.d[e?"unshift":"push"](()=>{i(0,o=e)})},function(e){a.d[e?"unshift":"push"](()=>{i(2,s=e)})},function(e){a.d[e?"unshift":"push"](()=>{i(1,c=e)})}]}class H extends a.a{constructor(e){super(),Object(a.m)(this,e,_,R,a.r,{SCENE_SCALE:6})}}var N=new H({target:document.body,props:{name:"world"}});window.app=N;t.default=N},14:function(e,t,r){"use strict";r.r(t),r.d(t,"CSS3DObject",(function(){return n})),r.d(t,"CSS3DSprite",(function(){return i})),r.d(t,"CSS3DRenderer",(function(){return o}));r(7),r(104),r(106),r(9);var a=r(4),n=function(e){a.Object3D.call(this),this.element=e,this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.custom={animation:void 0},this.addEventListener("removed",(function(){this.traverse((function(e){e.element instanceof Element&&null!==e.element.parentNode&&e.element.parentNode.removeChild(e.element)}))}))};n.prototype=Object.create(a.Object3D.prototype),n.prototype.constructor=n;var i=function(e){n.call(this,e)};i.prototype=Object.create(n.prototype),i.prototype.constructor=i;var o=function(){var e,t,r,o,c=this,s=new a.Matrix4,l={camera:{fov:0,style:""},objects:new WeakMap},d=document.createElement("div");d.style.overflow="hidden",this.domElement=d;var b=document.createElement("div");b.style.WebkitTransformStyle="preserve-3d",b.style.transformStyle="preserve-3d",b.style.pointerEvents="none",d.appendChild(b);var u=/Trident/i.test(navigator.userAgent);function v(e){return Math.abs(e)<1e-10?0:e}function j(e){var t=e.elements;return"matrix3d("+v(t[0])+","+v(-t[1])+","+v(t[2])+","+v(t[3])+","+v(t[4])+","+v(-t[5])+","+v(t[6])+","+v(t[7])+","+v(t[8])+","+v(-t[9])+","+v(t[10])+","+v(t[11])+","+v(t[12])+","+v(-t[13])+","+v(t[14])+","+v(t[15])+")"}function m(e,t){var a=e.elements,n="matrix3d("+v(a[0])+","+v(a[1])+","+v(a[2])+","+v(a[3])+","+v(-a[4])+","+v(-a[5])+","+v(-a[6])+","+v(-a[7])+","+v(a[8])+","+v(a[9])+","+v(a[10])+","+v(a[11])+","+v(a[12])+","+v(a[13])+","+v(a[14])+","+v(a[15])+")";return u?"translate(-50%,-50%)translate("+r+"px,"+o+"px)"+t+n:"translate(-50%,-50%)"+n}this.getSize=function(){return{width:e,height:t}},this.setSize=function(a,n){r=(e=a)/2,o=(t=n)/2,d.style.width=a+"px",d.style.height=n+"px",b.style.width=a+"px",b.style.height=n+"px"};var p,h,f=(p=new a.Vector3,h=new a.Vector3,function(e,t){return p.setFromMatrixPosition(e.matrixWorld),h.setFromMatrixPosition(t.matrixWorld),p.distanceToSquared(h)});function O(e){for(var t=function(e){var t=[];return e.traverse((function(e){e instanceof n&&t.push(e)})),t}(e).sort((function(e,t){return l.objects.get(e).distanceToCameraSquared-l.objects.get(t).distanceToCameraSquared})),r=t.length,a=0,i=t.length;a<i;a++)t[a].element.style.zIndex=r-a}this.render=function(e,t){var a=t.projectionMatrix.elements[5]*o;if(l.camera.fov!==a&&(t.isPerspectiveCamera?(d.style.WebkitPerspective=a+"px",d.style.perspective=a+"px"):(d.style.WebkitPerspective="",d.style.perspective=""),l.camera.fov=a),!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),t.isOrthographicCamera)var p=-(t.right+t.left)/2,h=(t.top+t.bottom)/2;var g=t.isOrthographicCamera?"scale("+a+")translate("+v(p)+"px,"+v(h)+"px)"+j(t.matrixWorldInverse):"translateZ("+a+"px)"+j(t.matrixWorldInverse),y=g+"translate("+r+"px,"+o+"px)";l.camera.style===y||u||(b.style.WebkitTransform=y,b.style.transform=y,l.camera.style=y),function e(t,r,a,o){if(t instanceof n){var d;t.onBeforeRender(c,r,a),t instanceof i?(s.copy(a.matrixWorldInverse),s.transpose(),s.copyPosition(t.matrixWorld),s.scale(t.scale),s.elements[3]=0,s.elements[7]=0,s.elements[11]=0,s.elements[15]=1,d=m(s,o)):d=m(t.matrixWorld,o);var v=t.element,j=l.objects.get(t);if(void 0===j||j.style!==d){v.style.WebkitTransform=d,v.style.transform=d;var p={style:d};u&&(p.distanceToCameraSquared=f(a,t)),l.objects.set(t,p)}v.style.display=t.visible?"":"none",v.parentNode!==b&&b.appendChild(v),t.onAfterRender(c,r,a)}for(var h=0,O=t.children.length;h<O;h++)e(t.children[h],r,a,o)}(e,e,t,g),u&&O(e)}}},62:function(e,t,r){e.exports=r(112)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,