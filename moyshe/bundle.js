!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=62)}([function(t,e,n){(function(e){var n=function(t){return t&&t.Math==Math&&t};t.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof e&&e)||Function("return this")()}).call(this,n(23))},function(t,e,n){"use strict";n.r(e),n.d(e,"ACESFilmicToneMapping",(function(){return at})),n.d(e,"AddEquation",(function(){return A})),n.d(e,"AddOperation",(function(){return K})),n.d(e,"AdditiveBlending",(function(){return M})),n.d(e,"AlphaFormat",(function(){return Ut})),n.d(e,"AlwaysDepth",(function(){return V})),n.d(e,"AlwaysStencilFunc",(function(){return En})),n.d(e,"AmbientLight",(function(){return lh})),n.d(e,"AmbientLightProbe",(function(){return Dh})),n.d(e,"AnimationClip",(function(){return gl})),n.d(e,"AnimationLoader",(function(){return El})),n.d(e,"AnimationMixer",(function(){return ud})),n.d(e,"AnimationObjectGroup",(function(){return sd})),n.d(e,"AnimationUtils",(function(){return il})),n.d(e,"ArcCurve",(function(){return Dl})),n.d(e,"ArrayCamera",(function(){return Ls})),n.d(e,"ArrowHelper",(function(){return $d})),n.d(e,"Audio",(function(){return jh})),n.d(e,"AudioAnalyser",(function(){return Zh})),n.d(e,"AudioContext",(function(){return Lh})),n.d(e,"AudioListener",(function(){return kh})),n.d(e,"AudioLoader",(function(){return Rh})),n.d(e,"AxesHelper",(function(){return Qd})),n.d(e,"AxisHelper",(function(){return cf})),n.d(e,"BackSide",(function(){return g})),n.d(e,"BasicDepthPacking",(function(){return on})),n.d(e,"BasicShadowMap",(function(){return d})),n.d(e,"BinaryTextureLoader",(function(){return pf})),n.d(e,"Bone",(function(){return oc})),n.d(e,"BooleanKeyframeTrack",(function(){return ll})),n.d(e,"BoundingBoxHelper",(function(){return uf})),n.d(e,"Box2",(function(){return yd})),n.d(e,"Box3",(function(){return Fr})),n.d(e,"Box3Helper",(function(){return qd})),n.d(e,"BoxBufferGeometry",(function(){return ma})),n.d(e,"BoxGeometry",(function(){return fa})),n.d(e,"BoxHelper",(function(){return Wd})),n.d(e,"BufferAttribute",(function(){return Mi})),n.d(e,"BufferGeometry",(function(){return ki})),n.d(e,"BufferGeometryLoader",(function(){return vh})),n.d(e,"ByteType",(function(){return Lt})),n.d(e,"Cache",(function(){return xl})),n.d(e,"Camera",(function(){return ba})),n.d(e,"CameraHelper",(function(){return kd})),n.d(e,"CanvasRenderer",(function(){return vf})),n.d(e,"CanvasTexture",(function(){return Oc})),n.d(e,"CatmullRomCurve3",(function(){return Ul})),n.d(e,"CineonToneMapping",(function(){return it})),n.d(e,"CircleBufferGeometry",(function(){return Wu})),n.d(e,"CircleGeometry",(function(){return Vu})),n.d(e,"ClampToEdgeWrapping",(function(){return mt})),n.d(e,"Clock",(function(){return zh})),n.d(e,"ClosedSplineCurve3",(function(){return af})),n.d(e,"Color",(function(){return fi})),n.d(e,"ColorKeyframeTrack",(function(){return hl})),n.d(e,"CompressedTexture",(function(){return Cc})),n.d(e,"CompressedTextureLoader",(function(){return Tl})),n.d(e,"ConeBufferGeometry",(function(){return ju})),n.d(e,"ConeGeometry",(function(){return ku})),n.d(e,"CubeCamera",(function(){return wa})),n.d(e,"CubeGeometry",(function(){return fa})),n.d(e,"CubeReflectionMapping",(function(){return st})),n.d(e,"CubeRefractionMapping",(function(){return ct})),n.d(e,"CubeTexture",(function(){return qa})),n.d(e,"CubeTextureLoader",(function(){return Rl})),n.d(e,"CubeUVReflectionMapping",(function(){return dt})),n.d(e,"CubeUVRefractionMapping",(function(){return pt})),n.d(e,"CubicBezierCurve",(function(){return jl})),n.d(e,"CubicBezierCurve3",(function(){return Vl})),n.d(e,"CubicInterpolant",(function(){return ol})),n.d(e,"CullFaceBack",(function(){return s})),n.d(e,"CullFaceFront",(function(){return c})),n.d(e,"CullFaceFrontBack",(function(){return u})),n.d(e,"CullFaceNone",(function(){return o})),n.d(e,"Curve",(function(){return Cl})),n.d(e,"CurvePath",(function(){return $l})),n.d(e,"CustomBlending",(function(){return T})),n.d(e,"CylinderBufferGeometry",(function(){return Hu})),n.d(e,"CylinderGeometry",(function(){return Gu})),n.d(e,"Cylindrical",(function(){return vd})),n.d(e,"DataTexture",(function(){return Sa})),n.d(e,"DataTexture2DArray",(function(){return Xa})),n.d(e,"DataTexture3D",(function(){return Ya})),n.d(e,"DataTextureLoader",(function(){return Al})),n.d(e,"DecrementStencilOp",(function(){return fn})),n.d(e,"DecrementWrapStencilOp",(function(){return vn})),n.d(e,"DefaultLoadingManager",(function(){return _l})),n.d(e,"DepthFormat",(function(){return Wt})),n.d(e,"DepthStencilFormat",(function(){return qt})),n.d(e,"DepthTexture",(function(){return Dc})),n.d(e,"DirectionalLight",(function(){return uh})),n.d(e,"DirectionalLightHelper",(function(){return Ud})),n.d(e,"DirectionalLightShadow",(function(){return ch})),n.d(e,"DiscreteInterpolant",(function(){return cl})),n.d(e,"DodecahedronBufferGeometry",(function(){return qc})),n.d(e,"DodecahedronGeometry",(function(){return Wc})),n.d(e,"DoubleSide",(function(){return y})),n.d(e,"DstAlphaFactor",(function(){return F})),n.d(e,"DstColorFactor",(function(){return G})),n.d(e,"DynamicBufferAttribute",(function(){return Yp})),n.d(e,"DynamicCopyUsage",(function(){return Dn})),n.d(e,"DynamicDrawUsage",(function(){return An})),n.d(e,"DynamicReadUsage",(function(){return Pn})),n.d(e,"EdgesGeometry",(function(){return Uu})),n.d(e,"EdgesHelper",(function(){return lf})),n.d(e,"EllipseCurve",(function(){return Ol})),n.d(e,"EqualDepth",(function(){return X})),n.d(e,"EqualStencilFunc",(function(){return bn})),n.d(e,"EquirectangularReflectionMapping",(function(){return ut})),n.d(e,"EquirectangularRefractionMapping",(function(){return lt})),n.d(e,"Euler",(function(){return cr})),n.d(e,"EventDispatcher",(function(){return Nn})),n.d(e,"ExtrudeBufferGeometry",(function(){return Eu})),n.d(e,"ExtrudeGeometry",(function(){return Su})),n.d(e,"Face3",(function(){return yi})),n.d(e,"Face4",(function(){return Dp})),n.d(e,"FaceColors",(function(){return zp})),n.d(e,"FileLoader",(function(){return Sl})),n.d(e,"FlatShading",(function(){return x})),n.d(e,"Float32Attribute",(function(){return nf})),n.d(e,"Float32BufferAttribute",(function(){return Ci})),n.d(e,"Float64Attribute",(function(){return rf})),n.d(e,"Float64BufferAttribute",(function(){return Oi})),n.d(e,"FloatType",(function(){return Dt})),n.d(e,"Fog",(function(){return Ds})),n.d(e,"FogExp2",(function(){return Os})),n.d(e,"Font",(function(){return Eh})),n.d(e,"FontLoader",(function(){return Ah})),n.d(e,"FrontFaceDirectionCCW",(function(){return h})),n.d(e,"FrontFaceDirectionCW",(function(){return l})),n.d(e,"FrontSide",(function(){return v})),n.d(e,"Frustum",(function(){return Aa})),n.d(e,"GammaEncoding",(function(){return Ke})),n.d(e,"Geometry",(function(){return pa})),n.d(e,"GeometryUtils",(function(){return mf})),n.d(e,"GreaterDepth",(function(){return Z})),n.d(e,"GreaterEqualDepth",(function(){return Y})),n.d(e,"GreaterEqualStencilFunc",(function(){return Sn})),n.d(e,"GreaterStencilFunc",(function(){return wn})),n.d(e,"GridHelper",(function(){return Id})),n.d(e,"Group",(function(){return Rs})),n.d(e,"HalfFloatType",(function(){return It})),n.d(e,"HemisphereLight",(function(){return eh})),n.d(e,"HemisphereLightHelper",(function(){return Dd})),n.d(e,"HemisphereLightProbe",(function(){return Oh})),n.d(e,"IcosahedronBufferGeometry",(function(){return Vc})),n.d(e,"IcosahedronGeometry",(function(){return jc})),n.d(e,"ImageBitmapLoader",(function(){return Mh})),n.d(e,"ImageLoader",(function(){return Ll})),n.d(e,"ImageUtils",(function(){return kn})),n.d(e,"ImmediateRenderObject",(function(){return wd})),n.d(e,"IncrementStencilOp",(function(){return pn})),n.d(e,"IncrementWrapStencilOp",(function(){return mn})),n.d(e,"InstancedBufferAttribute",(function(){return mh})),n.d(e,"InstancedBufferGeometry",(function(){return fh})),n.d(e,"InstancedInterleavedBuffer",(function(){return hd})),n.d(e,"InstancedMesh",(function(){return hc})),n.d(e,"Int16Attribute",(function(){return Qp})),n.d(e,"Int16BufferAttribute",(function(){return Ai})),n.d(e,"Int32Attribute",(function(){return tf})),n.d(e,"Int32BufferAttribute",(function(){return Ri})),n.d(e,"Int8Attribute",(function(){return Zp})),n.d(e,"Int8BufferAttribute",(function(){return Si})),n.d(e,"IntType",(function(){return Ct})),n.d(e,"InterleavedBuffer",(function(){return Is})),n.d(e,"InterleavedBufferAttribute",(function(){return zs})),n.d(e,"Interpolant",(function(){return al})),n.d(e,"InterpolateDiscrete",(function(){return ke})),n.d(e,"InterpolateLinear",(function(){return je})),n.d(e,"InterpolateSmooth",(function(){return Ve})),n.d(e,"InvertStencilOp",(function(){return gn})),n.d(e,"JSONLoader",(function(){return gf})),n.d(e,"KeepStencilOp",(function(){return hn})),n.d(e,"KeyframeTrack",(function(){return ul})),n.d(e,"LOD",(function(){return ec})),n.d(e,"LatheBufferGeometry",(function(){return Nu})),n.d(e,"LatheGeometry",(function(){return Iu})),n.d(e,"Layers",(function(){return ur})),n.d(e,"LensFlare",(function(){return xf})),n.d(e,"LessDepth",(function(){return W})),n.d(e,"LessEqualDepth",(function(){return q})),n.d(e,"LessEqualStencilFunc",(function(){return _n})),n.d(e,"LessStencilFunc",(function(){return xn})),n.d(e,"Light",(function(){return th})),n.d(e,"LightProbe",(function(){return Ch})),n.d(e,"LightShadow",(function(){return nh})),n.d(e,"Line",(function(){return yc})),n.d(e,"Line3",(function(){return _d})),n.d(e,"LineBasicMaterial",(function(){return dc})),n.d(e,"LineCurve",(function(){return Wl})),n.d(e,"LineCurve3",(function(){return ql})),n.d(e,"LineDashedMaterial",(function(){return nl})),n.d(e,"LineLoop",(function(){return wc})),n.d(e,"LinePieces",(function(){return Np})),n.d(e,"LineSegments",(function(){return _c})),n.d(e,"LineStrip",(function(){return Ip})),n.d(e,"LinearEncoding",(function(){return $e})),n.d(e,"LinearFilter",(function(){return wt})),n.d(e,"LinearInterpolant",(function(){return sl})),n.d(e,"LinearMipMapLinearFilter",(function(){return Tt})),n.d(e,"LinearMipMapNearestFilter",(function(){return St})),n.d(e,"LinearMipmapLinearFilter",(function(){return Et})),n.d(e,"LinearMipmapNearestFilter",(function(){return Mt})),n.d(e,"LinearToneMapping",(function(){return et})),n.d(e,"Loader",(function(){return wl})),n.d(e,"LoaderUtils",(function(){return ph})),n.d(e,"LoadingManager",(function(){return bl})),n.d(e,"LogLuvEncoding",(function(){return en})),n.d(e,"LoopOnce",(function(){return Ue})),n.d(e,"LoopPingPong",(function(){return He})),n.d(e,"LoopRepeat",(function(){return Ge})),n.d(e,"LuminanceAlphaFormat",(function(){return jt})),n.d(e,"LuminanceFormat",(function(){return kt})),n.d(e,"MOUSE",(function(){return i})),n.d(e,"Material",(function(){return bi})),n.d(e,"MaterialLoader",(function(){return dh})),n.d(e,"Math",(function(){return Un})),n.d(e,"MathUtils",(function(){return Un})),n.d(e,"Matrix3",(function(){return Hn})),n.d(e,"Matrix4",(function(){return ar})),n.d(e,"MaxEquation",(function(){return C})),n.d(e,"Mesh",(function(){return oa})),n.d(e,"MeshBasicMaterial",(function(){return _i})),n.d(e,"MeshDepthMaterial",(function(){return ws})),n.d(e,"MeshDistanceMaterial",(function(){return Ms})),n.d(e,"MeshFaceMaterial",(function(){return Up})),n.d(e,"MeshLambertMaterial",(function(){return tl})),n.d(e,"MeshMatcapMaterial",(function(){return el})),n.d(e,"MeshNormalMaterial",(function(){return Ku})),n.d(e,"MeshPhongMaterial",(function(){return $u})),n.d(e,"MeshPhysicalMaterial",(function(){return Ju})),n.d(e,"MeshStandardMaterial",(function(){return Zu})),n.d(e,"MeshToonMaterial",(function(){return Qu})),n.d(e,"MinEquation",(function(){return P})),n.d(e,"MirroredRepeatWrapping",(function(){return vt})),n.d(e,"MixOperation",(function(){return Q})),n.d(e,"MultiMaterial",(function(){return Gp})),n.d(e,"MultiplyBlending",(function(){return E})),n.d(e,"MultiplyOperation",(function(){return $})),n.d(e,"NearestFilter",(function(){return gt})),n.d(e,"NearestMipMapLinearFilter",(function(){return _t})),n.d(e,"NearestMipMapNearestFilter",(function(){return xt})),n.d(e,"NearestMipmapLinearFilter",(function(){return bt})),n.d(e,"NearestMipmapNearestFilter",(function(){return yt})),n.d(e,"NeverDepth",(function(){return j})),n.d(e,"NeverStencilFunc",(function(){return yn})),n.d(e,"NoBlending",(function(){return _})),n.d(e,"NoColors",(function(){return Bp})),n.d(e,"NoToneMapping",(function(){return tt})),n.d(e,"NormalBlending",(function(){return w})),n.d(e,"NotEqualDepth",(function(){return J})),n.d(e,"NotEqualStencilFunc",(function(){return Mn})),n.d(e,"NumberKeyframeTrack",(function(){return dl})),n.d(e,"Object3D",(function(){return Mr})),n.d(e,"ObjectLoader",(function(){return yh})),n.d(e,"ObjectSpaceNormalMap",(function(){return un})),n.d(e,"OctahedronBufferGeometry",(function(){return kc})),n.d(e,"OctahedronGeometry",(function(){return Hc})),n.d(e,"OneFactor",(function(){return D})),n.d(e,"OneMinusDstAlphaFactor",(function(){return U})),n.d(e,"OneMinusDstColorFactor",(function(){return H})),n.d(e,"OneMinusSrcAlphaFactor",(function(){return z})),n.d(e,"OneMinusSrcColorFactor",(function(){return N})),n.d(e,"OrthographicCamera",(function(){return sh})),n.d(e,"PCFShadowMap",(function(){return p})),n.d(e,"PCFSoftShadowMap",(function(){return f})),n.d(e,"PMREMGenerator",(function(){return bp})),n.d(e,"ParametricBufferGeometry",(function(){return Bc})),n.d(e,"ParametricGeometry",(function(){return Nc})),n.d(e,"Particle",(function(){return kp})),n.d(e,"ParticleBasicMaterial",(function(){return Wp})),n.d(e,"ParticleSystem",(function(){return jp})),n.d(e,"ParticleSystemMaterial",(function(){return qp})),n.d(e,"Path",(function(){return Ql})),n.d(e,"PerspectiveCamera",(function(){return _a})),n.d(e,"Plane",(function(){return Kr})),n.d(e,"PlaneBufferGeometry",(function(){return Oa})),n.d(e,"PlaneGeometry",(function(){return Ca})),n.d(e,"PlaneHelper",(function(){return Xd})),n.d(e,"PointCloud",(function(){return Hp})),n.d(e,"PointCloudMaterial",(function(){return Vp})),n.d(e,"PointLight",(function(){return oh})),n.d(e,"PointLightHelper",(function(){return Rd})),n.d(e,"Points",(function(){return Lc})),n.d(e,"PointsMaterial",(function(){return Mc})),n.d(e,"PolarGridHelper",(function(){return Nd})),n.d(e,"PolyhedronBufferGeometry",(function(){return Fc})),n.d(e,"PolyhedronGeometry",(function(){return zc})),n.d(e,"PositionalAudio",(function(){return Yh})),n.d(e,"PropertyBinding",(function(){return od})),n.d(e,"PropertyMixer",(function(){return Jh})),n.d(e,"QuadraticBezierCurve",(function(){return Xl})),n.d(e,"QuadraticBezierCurve3",(function(){return Yl})),n.d(e,"Quaternion",(function(){return Yn})),n.d(e,"QuaternionKeyframeTrack",(function(){return fl})),n.d(e,"QuaternionLinearInterpolant",(function(){return pl})),n.d(e,"REVISION",(function(){return r})),n.d(e,"RGBADepthPacking",(function(){return sn})),n.d(e,"RGBAFormat",(function(){return Ht})),n.d(e,"RGBAIntegerFormat",(function(){return Qt})),n.d(e,"RGBA_ASTC_10x10_Format",(function(){return _e})),n.d(e,"RGBA_ASTC_10x5_Format",(function(){return ye})),n.d(e,"RGBA_ASTC_10x6_Format",(function(){return xe})),n.d(e,"RGBA_ASTC_10x8_Format",(function(){return be})),n.d(e,"RGBA_ASTC_12x10_Format",(function(){return we})),n.d(e,"RGBA_ASTC_12x12_Format",(function(){return Me})),n.d(e,"RGBA_ASTC_4x4_Format",(function(){return le})),n.d(e,"RGBA_ASTC_5x4_Format",(function(){return he})),n.d(e,"RGBA_ASTC_5x5_Format",(function(){return de})),n.d(e,"RGBA_ASTC_6x5_Format",(function(){return pe})),n.d(e,"RGBA_ASTC_6x6_Format",(function(){return fe})),n.d(e,"RGBA_ASTC_8x5_Format",(function(){return me})),n.d(e,"RGBA_ASTC_8x6_Format",(function(){return ve})),n.d(e,"RGBA_ASTC_8x8_Format",(function(){return ge})),n.d(e,"RGBA_BPTC_Format",(function(){return Se})),n.d(e,"RGBA_ETC2_EAC_Format",(function(){return ue})),n.d(e,"RGBA_PVRTC_2BPPV1_Format",(function(){return oe})),n.d(e,"RGBA_PVRTC_4BPPV1_Format",(function(){return ae})),n.d(e,"RGBA_S3TC_DXT1_Format",(function(){return te})),n.d(e,"RGBA_S3TC_DXT3_Format",(function(){return ee})),n.d(e,"RGBA_S3TC_DXT5_Format",(function(){return ne})),n.d(e,"RGBDEncoding",(function(){return an})),n.d(e,"RGBEEncoding",(function(){return tn})),n.d(e,"RGBEFormat",(function(){return Vt})),n.d(e,"RGBFormat",(function(){return Gt})),n.d(e,"RGBIntegerFormat",(function(){return $t})),n.d(e,"RGBM16Encoding",(function(){return rn})),n.d(e,"RGBM7Encoding",(function(){return nn})),n.d(e,"RGB_ETC1_Format",(function(){return se})),n.d(e,"RGB_ETC2_Format",(function(){return ce})),n.d(e,"RGB_PVRTC_2BPPV1_Format",(function(){return ie})),n.d(e,"RGB_PVRTC_4BPPV1_Format",(function(){return re})),n.d(e,"RGB_S3TC_DXT1_Format",(function(){return Kt})),n.d(e,"RGFormat",(function(){return Zt})),n.d(e,"RGIntegerFormat",(function(){return Jt})),n.d(e,"RawShaderMaterial",(function(){return Yu})),n.d(e,"Ray",(function(){return Zr})),n.d(e,"Raycaster",(function(){return dd})),n.d(e,"RectAreaLight",(function(){return hh})),n.d(e,"RedFormat",(function(){return Xt})),n.d(e,"RedIntegerFormat",(function(){return Yt})),n.d(e,"ReinhardToneMapping",(function(){return nt})),n.d(e,"RepeatWrapping",(function(){return ft})),n.d(e,"ReplaceStencilOp",(function(){return dn})),n.d(e,"ReverseSubtractEquation",(function(){return R})),n.d(e,"RingBufferGeometry",(function(){return Du})),n.d(e,"RingGeometry",(function(){return Ou})),n.d(e,"SRGB8_ALPHA8_ASTC_10x10_Format",(function(){return Be})),n.d(e,"SRGB8_ALPHA8_ASTC_10x5_Format",(function(){return De})),n.d(e,"SRGB8_ALPHA8_ASTC_10x6_Format",(function(){return Ie})),n.d(e,"SRGB8_ALPHA8_ASTC_10x8_Format",(function(){return Ne})),n.d(e,"SRGB8_ALPHA8_ASTC_12x10_Format",(function(){return ze})),n.d(e,"SRGB8_ALPHA8_ASTC_12x12_Format",(function(){return Fe})),n.d(e,"SRGB8_ALPHA8_ASTC_4x4_Format",(function(){return Ee})),n.d(e,"SRGB8_ALPHA8_ASTC_5x4_Format",(function(){return Te})),n.d(e,"SRGB8_ALPHA8_ASTC_5x5_Format",(function(){return Ae})),n.d(e,"SRGB8_ALPHA8_ASTC_6x5_Format",(function(){return Le})),n.d(e,"SRGB8_ALPHA8_ASTC_6x6_Format",(function(){return Re})),n.d(e,"SRGB8_ALPHA8_ASTC_8x5_Format",(function(){return Pe})),n.d(e,"SRGB8_ALPHA8_ASTC_8x6_Format",(function(){return Ce})),n.d(e,"SRGB8_ALPHA8_ASTC_8x8_Format",(function(){return Oe})),n.d(e,"Scene",(function(){return Sr})),n.d(e,"SceneUtils",(function(){return yf})),n.d(e,"ShaderChunk",(function(){return Da})),n.d(e,"ShaderLib",(function(){return Ia})),n.d(e,"ShaderMaterial",(function(){return xa})),n.d(e,"ShadowMaterial",(function(){return Xu})),n.d(e,"Shape",(function(){return Kl})),n.d(e,"ShapeBufferGeometry",(function(){return zu})),n.d(e,"ShapeGeometry",(function(){return Bu})),n.d(e,"ShapePath",(function(){return Sh})),n.d(e,"ShapeUtils",(function(){return _u})),n.d(e,"ShortType",(function(){return Rt})),n.d(e,"Skeleton",(function(){return ac})),n.d(e,"SkeletonHelper",(function(){return Ld})),n.d(e,"SkinnedMesh",(function(){return nc})),n.d(e,"SmoothShading",(function(){return b})),n.d(e,"Sphere",(function(){return Hr})),n.d(e,"SphereBufferGeometry",(function(){return Cu})),n.d(e,"SphereGeometry",(function(){return Pu})),n.d(e,"Spherical",(function(){return md})),n.d(e,"SphericalHarmonics3",(function(){return Ph})),n.d(e,"SphericalReflectionMapping",(function(){return ht})),n.d(e,"Spline",(function(){return sf})),n.d(e,"SplineCurve",(function(){return Zl})),n.d(e,"SplineCurve3",(function(){return of})),n.d(e,"SpotLight",(function(){return ih})),n.d(e,"SpotLightHelper",(function(){return Sd})),n.d(e,"SpotLightShadow",(function(){return rh})),n.d(e,"Sprite",(function(){return $s})),n.d(e,"SpriteMaterial",(function(){return Fs})),n.d(e,"SrcAlphaFactor",(function(){return B})),n.d(e,"SrcAlphaSaturateFactor",(function(){return k})),n.d(e,"SrcColorFactor",(function(){return I})),n.d(e,"StaticCopyUsage",(function(){return On})),n.d(e,"StaticDrawUsage",(function(){return Tn})),n.d(e,"StaticReadUsage",(function(){return Rn})),n.d(e,"StereoCamera",(function(){return Bh})),n.d(e,"StreamCopyUsage",(function(){return In})),n.d(e,"StreamDrawUsage",(function(){return Ln})),n.d(e,"StreamReadUsage",(function(){return Cn})),n.d(e,"StringKeyframeTrack",(function(){return ml})),n.d(e,"SubtractEquation",(function(){return L})),n.d(e,"SubtractiveBlending",(function(){return S})),n.d(e,"TOUCH",(function(){return a})),n.d(e,"TangentSpaceNormalMap",(function(){return cn})),n.d(e,"TetrahedronBufferGeometry",(function(){return Gc})),n.d(e,"TetrahedronGeometry",(function(){return Uc})),n.d(e,"TextBufferGeometry",(function(){return Ru})),n.d(e,"TextGeometry",(function(){return Lu})),n.d(e,"Texture",(function(){return Vn})),n.d(e,"TextureLoader",(function(){return Pl})),n.d(e,"TorusBufferGeometry",(function(){return Qc})),n.d(e,"TorusGeometry",(function(){return $c})),n.d(e,"TorusKnotBufferGeometry",(function(){return Jc})),n.d(e,"TorusKnotGeometry",(function(){return Zc})),n.d(e,"Triangle",(function(){return li})),n.d(e,"TriangleFanDrawMode",(function(){return Je})),n.d(e,"TriangleStripDrawMode",(function(){return Ze})),n.d(e,"TrianglesDrawMode",(function(){return Ye})),n.d(e,"TubeBufferGeometry",(function(){return Yc})),n.d(e,"TubeGeometry",(function(){return Xc})),n.d(e,"UVMapping",(function(){return ot})),n.d(e,"Uint16Attribute",(function(){return Kp})),n.d(e,"Uint16BufferAttribute",(function(){return Li})),n.d(e,"Uint32Attribute",(function(){return ef})),n.d(e,"Uint32BufferAttribute",(function(){return Pi})),n.d(e,"Uint8Attribute",(function(){return Jp})),n.d(e,"Uint8BufferAttribute",(function(){return Ei})),n.d(e,"Uint8ClampedAttribute",(function(){return $p})),n.d(e,"Uint8ClampedBufferAttribute",(function(){return Ti})),n.d(e,"Uncharted2ToneMapping",(function(){return rt})),n.d(e,"Uniform",(function(){return ld})),n.d(e,"UniformsLib",(function(){return La})),n.d(e,"UniformsUtils",(function(){return ya})),n.d(e,"UnsignedByteType",(function(){return At})),n.d(e,"UnsignedInt248Type",(function(){return Ft})),n.d(e,"UnsignedIntType",(function(){return Ot})),n.d(e,"UnsignedShort4444Type",(function(){return Nt})),n.d(e,"UnsignedShort5551Type",(function(){return Bt})),n.d(e,"UnsignedShort565Type",(function(){return zt})),n.d(e,"UnsignedShortType",(function(){return Pt})),n.d(e,"VSMShadowMap",(function(){return m})),n.d(e,"Vector2",(function(){return Gn})),n.d(e,"Vector3",(function(){return $n})),n.d(e,"Vector4",(function(){return Wn})),n.d(e,"VectorKeyframeTrack",(function(){return vl})),n.d(e,"Vertex",(function(){return Xp})),n.d(e,"VertexColors",(function(){return Fp})),n.d(e,"VideoTexture",(function(){return Pc})),n.d(e,"WebGLCubeRenderTarget",(function(){return Ma})),n.d(e,"WebGLMultisampleRenderTarget",(function(){return Xn})),n.d(e,"WebGLRenderTarget",(function(){return qn})),n.d(e,"WebGLRenderTargetCube",(function(){return ff})),n.d(e,"WebGLRenderer",(function(){return Cs})),n.d(e,"WebGLUtils",(function(){return As})),n.d(e,"WireframeGeometry",(function(){return Ic})),n.d(e,"WireframeHelper",(function(){return hf})),n.d(e,"WrapAroundEnding",(function(){return Xe})),n.d(e,"XHRLoader",(function(){return df})),n.d(e,"ZeroCurvatureEnding",(function(){return We})),n.d(e,"ZeroFactor",(function(){return O})),n.d(e,"ZeroSlopeEnding",(function(){return qe})),n.d(e,"ZeroStencilOp",(function(){return ln})),n.d(e,"sRGBEncoding",(function(){return Qe})),void 0===Number.EPSILON&&(Number.EPSILON=Math.pow(2,-52)),void 0===Number.isInteger&&(Number.isInteger=function(t){return"number"==typeof t&&isFinite(t)&&Math.floor(t)===t}),void 0===Math.sign&&(Math.sign=function(t){return t<0?-1:t>0?1:+t}),"name"in Function.prototype==!1&&Object.defineProperty(Function.prototype,"name",{get:function(){return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]}}),void 0===Object.assign&&(Object.assign=function(t){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),n=1;n<arguments.length;n++){var r=arguments[n];if(null!=r)for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e});var r="115",i={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},a={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},o=0,s=1,c=2,u=3,l=0,h=1,d=0,p=1,f=2,m=3,v=0,g=1,y=2,x=1,b=2,_=0,w=1,M=2,S=3,E=4,T=5,A=100,L=101,R=102,P=103,C=104,O=200,D=201,I=202,N=203,B=204,z=205,F=206,U=207,G=208,H=209,k=210,j=0,V=1,W=2,q=3,X=4,Y=5,Z=6,J=7,$=0,Q=1,K=2,tt=0,et=1,nt=2,rt=3,it=4,at=5,ot=300,st=301,ct=302,ut=303,lt=304,ht=305,dt=306,pt=307,ft=1e3,mt=1001,vt=1002,gt=1003,yt=1004,xt=1004,bt=1005,_t=1005,wt=1006,Mt=1007,St=1007,Et=1008,Tt=1008,At=1009,Lt=1010,Rt=1011,Pt=1012,Ct=1013,Ot=1014,Dt=1015,It=1016,Nt=1017,Bt=1018,zt=1019,Ft=1020,Ut=1021,Gt=1022,Ht=1023,kt=1024,jt=1025,Vt=Ht,Wt=1026,qt=1027,Xt=1028,Yt=1029,Zt=1030,Jt=1031,$t=1032,Qt=1033,Kt=33776,te=33777,ee=33778,ne=33779,re=35840,ie=35841,ae=35842,oe=35843,se=36196,ce=37492,ue=37496,le=37808,he=37809,de=37810,pe=37811,fe=37812,me=37813,ve=37814,ge=37815,ye=37816,xe=37817,be=37818,_e=37819,we=37820,Me=37821,Se=36492,Ee=37840,Te=37841,Ae=37842,Le=37843,Re=37844,Pe=37845,Ce=37846,Oe=37847,De=37848,Ie=37849,Ne=37850,Be=37851,ze=37852,Fe=37853,Ue=2200,Ge=2201,He=2202,ke=2300,je=2301,Ve=2302,We=2400,qe=2401,Xe=2402,Ye=0,Ze=1,Je=2,$e=3e3,Qe=3001,Ke=3007,tn=3002,en=3003,nn=3004,rn=3005,an=3006,on=3200,sn=3201,cn=0,un=1,ln=0,hn=7680,dn=7681,pn=7682,fn=7683,mn=34055,vn=34056,gn=5386,yn=512,xn=513,bn=514,_n=515,wn=516,Mn=517,Sn=518,En=519,Tn=35044,An=35048,Ln=35040,Rn=35045,Pn=35049,Cn=35041,On=35046,Dn=35050,In=35042;function Nn(){}Object.assign(Nn.prototype,{addEventListener:function(t,e){void 0===this._listeners&&(this._listeners={});var n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)},hasEventListener:function(t,e){if(void 0===this._listeners)return!1;var n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)},removeEventListener:function(t,e){if(void 0!==this._listeners){var n=this._listeners[t];if(void 0!==n){var r=n.indexOf(e);-1!==r&&n.splice(r,1)}}},dispatchEvent:function(t){if(void 0!==this._listeners){var e=this._listeners[t.type];if(void 0!==e){t.target=this;for(var n=e.slice(0),r=0,i=n.length;r<i;r++)n[r].call(this,t)}}}});for(var Bn=[],zn=0;zn<256;zn++)Bn[zn]=(zn<16?"0":"")+zn.toString(16);var Fn,Un={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){var t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(Bn[255&t]+Bn[t>>8&255]+Bn[t>>16&255]+Bn[t>>24&255]+"-"+Bn[255&e]+Bn[e>>8&255]+"-"+Bn[e>>16&15|64]+Bn[e>>24&255]+"-"+Bn[63&n|128]+Bn[n>>8&255]+"-"+Bn[n>>16&255]+Bn[n>>24&255]+Bn[255&r]+Bn[r>>8&255]+Bn[r>>16&255]+Bn[r>>24&255]).toUpperCase()},clamp:function(t,e,n){return Math.max(e,Math.min(n,t))},euclideanModulo:function(t,e){return(t%e+e)%e},mapLinear:function(t,e,n,r,i){return r+(t-e)*(i-r)/(n-e)},lerp:function(t,e,n){return(1-n)*t+n*e},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},degToRad:function(t){return t*Un.DEG2RAD},radToDeg:function(t){return t*Un.RAD2DEG},isPowerOfTwo:function(t){return 0==(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(t,e,n,r,i){var a=Math.cos,o=Math.sin,s=a(n/2),c=o(n/2),u=a((e+r)/2),l=o((e+r)/2),h=a((e-r)/2),d=o((e-r)/2),p=a((r-e)/2),f=o((r-e)/2);"XYX"===i?t.set(s*l,c*h,c*d,s*u):"YZY"===i?t.set(c*d,s*l,c*h,s*u):"ZXZ"===i?t.set(c*h,c*d,s*l,s*u):"XZX"===i?t.set(s*l,c*f,c*p,s*u):"YXY"===i?t.set(c*p,s*l,c*f,s*u):"ZYZ"===i?t.set(c*f,c*p,s*l,s*u):console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order.")}};function Gn(t,e){this.x=t||0,this.y=e||0}function Hn(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}Object.defineProperties(Gn.prototype,{width:{get:function(){return this.x},set:function(t){this.x=t}},height:{get:function(){return this.y},set:function(t){this.y=t}}}),Object.assign(Gn.prototype,{isVector2:!0,set:function(t,e){return this.x=t,this.y=e,this},setScalar:function(t){return this.x=t,this.y=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y)},copy:function(t){return this.x=t.x,this.y=t.y,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)},addScalar:function(t){return this.x+=t,this.y+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)},subScalar:function(t){return this.x-=t,this.y-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this},multiply:function(t){return this.x*=t.x,this.y*=t.y,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return this.x/=t.x,this.y/=t.y,this},divideScalar:function(t){return this.multiplyScalar(1/t)},applyMatrix3:function(t){var e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this},negate:function(){return this.x=-this.x,this.y=-this.y,this},dot:function(t){return this.x*t.x+this.y*t.y},cross:function(t){return this.x*t.y-this.y*t.x},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)},normalize:function(){return this.divideScalar(this.length()||1)},angle:function(){return Math.atan2(-this.y,-this.x)+Math.PI},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y;return e*e+n*n},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this},rotateAround:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=this.x-t.x,a=this.y-t.y;return this.x=i*n-a*r+t.x,this.y=i*r+a*n+t.y,this}}),Object.assign(Hn.prototype,{isMatrix3:!0,set:function(t,e,n,r,i,a,o,s,c){var u=this.elements;return u[0]=t,u[1]=r,u[2]=o,u[3]=e,u[4]=i,u[5]=s,u[6]=n,u[7]=a,u[8]=c,this},identity:function(){return this.set(1,0,0,0,1,0,0,0,1),this},clone:function(){return(new this.constructor).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this},extractBasis:function(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this},setFromMatrix4:function(t){var e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this},multiply:function(t){return this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,a=n[0],o=n[3],s=n[6],c=n[1],u=n[4],l=n[7],h=n[2],d=n[5],p=n[8],f=r[0],m=r[3],v=r[6],g=r[1],y=r[4],x=r[7],b=r[2],_=r[5],w=r[8];return i[0]=a*f+o*g+s*b,i[3]=a*m+o*y+s*_,i[6]=a*v+o*x+s*w,i[1]=c*f+u*g+l*b,i[4]=c*m+u*y+l*_,i[7]=c*v+u*x+l*w,i[2]=h*f+d*g+p*b,i[5]=h*m+d*y+p*_,i[8]=h*v+d*x+p*w,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[1],r=t[2],i=t[3],a=t[4],o=t[5],s=t[6],c=t[7],u=t[8];return e*a*u-e*o*c-n*i*u+n*o*s+r*i*c-r*a*s},getInverse:function(t,e){void 0!==e&&console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");var n=t.elements,r=this.elements,i=n[0],a=n[1],o=n[2],s=n[3],c=n[4],u=n[5],l=n[6],h=n[7],d=n[8],p=d*c-u*h,f=u*l-d*s,m=h*s-c*l,v=i*p+a*f+o*m;if(0===v)return this.set(0,0,0,0,0,0,0,0,0);var g=1/v;return r[0]=p*g,r[1]=(o*h-d*a)*g,r[2]=(u*a-o*c)*g,r[3]=f*g,r[4]=(d*i-o*l)*g,r[5]=(o*s-u*i)*g,r[6]=m*g,r[7]=(a*l-h*i)*g,r[8]=(c*i-a*s)*g,this},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this},getNormalMatrix:function(t){return this.setFromMatrix4(t).getInverse(this).transpose()},transposeIntoArray:function(t){var e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this},setUvTransform:function(t,e,n,r,i,a,o){var s=Math.cos(i),c=Math.sin(i);this.set(n*s,n*c,-n*(s*a+c*o)+a+t,-r*c,r*s,-r*(-c*a+s*o)+o+e,0,0,1)},scale:function(t,e){var n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this},rotate:function(t){var e=Math.cos(t),n=Math.sin(t),r=this.elements,i=r[0],a=r[3],o=r[6],s=r[1],c=r[4],u=r[7];return r[0]=e*i+n*s,r[3]=e*a+n*c,r[6]=e*o+n*u,r[1]=-n*i+e*s,r[4]=-n*a+e*c,r[7]=-n*o+e*u,this},translate:function(t,e){var n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<9;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<9;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}});var kn={getDataURL:function(t){var e;if("undefined"==typeof HTMLCanvasElement)return t.src;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Fn&&(Fn=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Fn.width=t.width,Fn.height=t.height;var n=Fn.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Fn}return e.width>2048||e.height>2048?e.toDataURL("image/jpeg",.6):e.toDataURL("image/png")}},jn=0;function Vn(t,e,n,r,i,a,o,s,c,u){Object.defineProperty(this,"id",{value:jn++}),this.uuid=Un.generateUUID(),this.name="",this.image=void 0!==t?t:Vn.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=void 0!==e?e:Vn.DEFAULT_MAPPING,this.wrapS=void 0!==n?n:mt,this.wrapT=void 0!==r?r:mt,this.magFilter=void 0!==i?i:wt,this.minFilter=void 0!==a?a:Et,this.anisotropy=void 0!==c?c:1,this.format=void 0!==o?o:Ht,this.internalFormat=null,this.type=void 0!==s?s:At,this.offset=new Gn(0,0),this.repeat=new Gn(1,1),this.center=new Gn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Hn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=void 0!==u?u:$e,this.version=0,this.onUpdate=null}function Wn(t,e,n,r){this.x=t||0,this.y=e||0,this.z=n||0,this.w=void 0!==r?r:1}function qn(t,e,n){this.width=t,this.height=e,this.scissor=new Wn(0,0,t,e),this.scissorTest=!1,this.viewport=new Wn(0,0,t,e),n=n||{},this.texture=new Vn(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.image={},this.texture.image.width=t,this.texture.image.height=e,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:wt,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0===n.stencilBuffer||n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}function Xn(t,e,n){qn.call(this,t,e,n),this.samples=4}function Yn(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._w=void 0!==r?r:1}Vn.DEFAULT_IMAGE=void 0,Vn.DEFAULT_MAPPING=ot,Vn.prototype=Object.assign(Object.create(Nn.prototype),{constructor:Vn,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this},toJSON:function(t){var e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];var n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){var r=this.image;if(void 0===r.uuid&&(r.uuid=Un.generateUUID()),!e&&void 0===t.images[r.uuid]){var i;if(Array.isArray(r)){i=[];for(var a=0,o=r.length;a<o;a++)i.push(kn.getDataURL(r[a]))}else i=kn.getDataURL(r);t.images[r.uuid]={uuid:r.uuid,url:i}}n.image=r.uuid}return e||(t.textures[this.uuid]=n),n},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(t){if(this.mapping!==ot)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case ft:t.x=t.x-Math.floor(t.x);break;case mt:t.x=t.x<0?0:1;break;case vt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case ft:t.y=t.y-Math.floor(t.y);break;case mt:t.y=t.y<0?0:1;break;case vt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}}),Object.defineProperty(Vn.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.defineProperties(Wn.prototype,{width:{get:function(){return this.z},set:function(t){this.z=t}},height:{get:function(){return this.w},set:function(t){this.w=t}}}),Object.assign(Wn.prototype,{isVector4:!0,set:function(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this.w=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setW:function(t){return this.w=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z,this.w)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=this.w,a=t.elements;return this.x=a[0]*e+a[4]*n+a[8]*r+a[12]*i,this.y=a[1]*e+a[5]*n+a[9]*r+a[13]*i,this.z=a[2]*e+a[6]*n+a[10]*r+a[14]*i,this.w=a[3]*e+a[7]*n+a[11]*r+a[15]*i,this},divideScalar:function(t){return this.multiplyScalar(1/t)},setAxisAngleFromQuaternion:function(t){this.w=2*Math.acos(t.w);var e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this},setAxisAngleFromRotationMatrix:function(t){var e,n,r,i,a=t.elements,o=a[0],s=a[4],c=a[8],u=a[1],l=a[5],h=a[9],d=a[2],p=a[6],f=a[10];if(Math.abs(s-u)<.01&&Math.abs(c-d)<.01&&Math.abs(h-p)<.01){if(Math.abs(s+u)<.1&&Math.abs(c+d)<.1&&Math.abs(h+p)<.1&&Math.abs(o+l+f-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;var m=(o+1)/2,v=(l+1)/2,g=(f+1)/2,y=(s+u)/4,x=(c+d)/4,b=(h+p)/4;return m>v&&m>g?m<.01?(n=0,r=.707106781,i=.707106781):(r=y/(n=Math.sqrt(m)),i=x/n):v>g?v<.01?(n=.707106781,r=0,i=.707106781):(n=y/(r=Math.sqrt(v)),i=b/r):g<.01?(n=.707106781,r=.707106781,i=0):(n=x/(i=Math.sqrt(g)),r=b/i),this.set(n,r,i,e),this}var _=Math.sqrt((p-h)*(p-h)+(c-d)*(c-d)+(u-s)*(u-s));return Math.abs(_)<.001&&(_=1),this.x=(p-h)/_,this.y=(c-d)/_,this.z=(u-s)/_,this.w=Math.acos((o+l+f-1)/2),this},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}}),qn.prototype=Object.assign(Object.create(Nn.prototype),{constructor:qn,isWebGLRenderTarget:!0,setSize:function(t,e){this.width===t&&this.height===e||(this.width=t,this.height=e,this.texture.image.width=t,this.texture.image.height=e,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.width=t.width,this.height=t.height,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Xn.prototype=Object.assign(Object.create(qn.prototype),{constructor:Xn,isWebGLMultisampleRenderTarget:!0,copy:function(t){return qn.prototype.copy.call(this,t),this.samples=t.samples,this}}),Object.assign(Yn,{slerp:function(t,e,n,r){return n.copy(t).slerp(e,r)},slerpFlat:function(t,e,n,r,i,a,o){var s=n[r+0],c=n[r+1],u=n[r+2],l=n[r+3],h=i[a+0],d=i[a+1],p=i[a+2],f=i[a+3];if(l!==f||s!==h||c!==d||u!==p){var m=1-o,v=s*h+c*d+u*p+l*f,g=v>=0?1:-1,y=1-v*v;if(y>Number.EPSILON){var x=Math.sqrt(y),b=Math.atan2(x,v*g);m=Math.sin(m*b)/x,o=Math.sin(o*b)/x}var _=o*g;if(s=s*m+h*_,c=c*m+d*_,u=u*m+p*_,l=l*m+f*_,m===1-o){var w=1/Math.sqrt(s*s+c*c+u*u+l*l);s*=w,c*=w,u*=w,l*=w}}t[e]=s,t[e+1]=c,t[e+2]=u,t[e+3]=l}}),Object.defineProperties(Yn.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},w:{get:function(){return this._w},set:function(t){this._w=t,this._onChangeCallback()}}}),Object.assign(Yn.prototype,{isQuaternion:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._w)},copy:function(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this},setFromEuler:function(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");var n=t._x,r=t._y,i=t._z,a=t.order,o=Math.cos,s=Math.sin,c=o(n/2),u=o(r/2),l=o(i/2),h=s(n/2),d=s(r/2),p=s(i/2);return"XYZ"===a?(this._x=h*u*l+c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l-h*d*p):"YXZ"===a?(this._x=h*u*l+c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l+h*d*p):"ZXY"===a?(this._x=h*u*l-c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l-h*d*p):"ZYX"===a?(this._x=h*u*l-c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l+h*d*p):"YZX"===a?(this._x=h*u*l+c*d*p,this._y=c*d*l+h*u*p,this._z=c*u*p-h*d*l,this._w=c*u*l-h*d*p):"XZY"===a&&(this._x=h*u*l-c*d*p,this._y=c*d*l-h*u*p,this._z=c*u*p+h*d*l,this._w=c*u*l+h*d*p),!1!==e&&this._onChangeCallback(),this},setFromAxisAngle:function(t,e){var n=e/2,r=Math.sin(n);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(n),this._onChangeCallback(),this},setFromRotationMatrix:function(t){var e,n=t.elements,r=n[0],i=n[4],a=n[8],o=n[1],s=n[5],c=n[9],u=n[2],l=n[6],h=n[10],d=r+s+h;return d>0?(e=.5/Math.sqrt(d+1),this._w=.25/e,this._x=(l-c)*e,this._y=(a-u)*e,this._z=(o-i)*e):r>s&&r>h?(e=2*Math.sqrt(1+r-s-h),this._w=(l-c)/e,this._x=.25*e,this._y=(i+o)/e,this._z=(a+u)/e):s>h?(e=2*Math.sqrt(1+s-r-h),this._w=(a-u)/e,this._x=(i+o)/e,this._y=.25*e,this._z=(c+l)/e):(e=2*Math.sqrt(1+h-r-s),this._w=(o-i)/e,this._x=(a+u)/e,this._y=(c+l)/e,this._z=.25*e),this._onChangeCallback(),this},setFromUnitVectors:function(t,e){var n=t.dot(e)+1;return n<1e-6?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()},angleTo:function(t){return 2*Math.acos(Math.abs(Un.clamp(this.dot(t),-1,1)))},rotateTowards:function(t,e){var n=this.angleTo(t);if(0===n)return this;var r=Math.min(1,e/n);return this.slerp(t,r),this},inverse:function(){return this.conjugate()},conjugate:function(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this},dot:function(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w},lengthSq:function(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w},length:function(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)},normalize:function(){var t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)},premultiply:function(t){return this.multiplyQuaternions(t,this)},multiplyQuaternions:function(t,e){var n=t._x,r=t._y,i=t._z,a=t._w,o=e._x,s=e._y,c=e._z,u=e._w;return this._x=n*u+a*o+r*c-i*s,this._y=r*u+a*s+i*o-n*c,this._z=i*u+a*c+n*s-r*o,this._w=a*u-n*o-r*s-i*c,this._onChangeCallback(),this},slerp:function(t,e){if(0===e)return this;if(1===e)return this.copy(t);var n=this._x,r=this._y,i=this._z,a=this._w,o=a*t._w+n*t._x+r*t._y+i*t._z;if(o<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,o=-o):this.copy(t),o>=1)return this._w=a,this._x=n,this._y=r,this._z=i,this;var s=1-o*o;if(s<=Number.EPSILON){var c=1-e;return this._w=c*a+e*this._w,this._x=c*n+e*this._x,this._y=c*r+e*this._y,this._z=c*i+e*this._z,this.normalize(),this._onChangeCallback(),this}var u=Math.sqrt(s),l=Math.atan2(u,o),h=Math.sin((1-e)*l)/u,d=Math.sin(e*l)/u;return this._w=a*h+this._w*d,this._x=n*h+this._x*d,this._y=r*h+this._y*d,this._z=i*h+this._z*d,this._onChangeCallback(),this},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w},fromArray:function(t,e){return void 0===e&&(e=0),this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t},fromBufferAttribute:function(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}});var Zn=new $n,Jn=new Yn;function $n(t,e,n){this.x=t||0,this.y=e||0,this.z=n||0}Object.assign($n.prototype,{isVector3:!0,set:function(t,e,n){return this.x=t,this.y=e,this.z=n,this},setScalar:function(t){return this.x=t,this.y=t,this.z=t,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setZ:function(t){return this.z=t,this},setComponent:function(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this},getComponent:function(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}},clone:function(){return new this.constructor(this.x,this.y,this.z)},copy:function(t){return this.x=t.x,this.y=t.y,this.z=t.z,this},add:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)},addScalar:function(t){return this.x+=t,this.y+=t,this.z+=t,this},addVectors:function(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this},addScaledVector:function(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this},sub:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)},subScalar:function(t){return this.x-=t,this.y-=t,this.z-=t,this},subVectors:function(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)},multiplyScalar:function(t){return this.x*=t,this.y*=t,this.z*=t,this},multiplyVectors:function(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this},applyEuler:function(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Jn.setFromEuler(t))},applyAxisAngle:function(t,e){return this.applyQuaternion(Jn.setFromAxisAngle(t,e))},applyMatrix3:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6]*r,this.y=i[1]*e+i[4]*n+i[7]*r,this.z=i[2]*e+i[5]*n+i[8]*r,this},applyNormalMatrix:function(t){return this.applyMatrix3(t).normalize()},applyMatrix4:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements,a=1/(i[3]*e+i[7]*n+i[11]*r+i[15]);return this.x=(i[0]*e+i[4]*n+i[8]*r+i[12])*a,this.y=(i[1]*e+i[5]*n+i[9]*r+i[13])*a,this.z=(i[2]*e+i[6]*n+i[10]*r+i[14])*a,this},applyQuaternion:function(t){var e=this.x,n=this.y,r=this.z,i=t.x,a=t.y,o=t.z,s=t.w,c=s*e+a*r-o*n,u=s*n+o*e-i*r,l=s*r+i*n-a*e,h=-i*e-a*n-o*r;return this.x=c*s+h*-i+u*-o-l*-a,this.y=u*s+h*-a+l*-i-c*-o,this.z=l*s+h*-o+c*-a-u*-i,this},project:function(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)},unproject:function(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)},transformDirection:function(t){var e=this.x,n=this.y,r=this.z,i=t.elements;return this.x=i[0]*e+i[4]*n+i[8]*r,this.y=i[1]*e+i[5]*n+i[9]*r,this.z=i[2]*e+i[6]*n+i[10]*r,this.normalize()},divide:function(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this},divideScalar:function(t){return this.multiplyScalar(1/t)},min:function(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this},max:function(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this},clamp:function(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this},clampScalar:function(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this},clampLength:function(t,e){var n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))},floor:function(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this},ceil:function(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this},round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this},roundToZero:function(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this},negate:function(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this},dot:function(t){return this.x*t.x+this.y*t.y+this.z*t.z},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},manhattanLength:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length()||1)},setLength:function(t){return this.normalize().multiplyScalar(t)},lerp:function(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this},lerpVectors:function(t,e,n){return this.subVectors(e,t).multiplyScalar(n).add(t)},cross:function(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)},crossVectors:function(t,e){var n=t.x,r=t.y,i=t.z,a=e.x,o=e.y,s=e.z;return this.x=r*s-i*o,this.y=i*a-n*s,this.z=n*o-r*a,this},projectOnVector:function(t){var e=t.lengthSq();if(0===e)return this.set(0,0,0);var n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)},projectOnPlane:function(t){return Zn.copy(this).projectOnVector(t),this.sub(Zn)},reflect:function(t){return this.sub(Zn.copy(t).multiplyScalar(2*this.dot(t)))},angleTo:function(t){var e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;var n=this.dot(t)/e;return Math.acos(Un.clamp(n,-1,1))},distanceTo:function(t){return Math.sqrt(this.distanceToSquared(t))},distanceToSquared:function(t){var e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r},manhattanDistanceTo:function(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)},setFromSpherical:function(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)},setFromSphericalCoords:function(t,e,n){var r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this},setFromCylindrical:function(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)},setFromCylindricalCoords:function(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this},setFromMatrixPosition:function(t){var e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this},setFromMatrixScale:function(t){var e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this},setFromMatrixColumn:function(t,e){return this.fromArray(t.elements,4*e)},setFromMatrix3Column:function(t,e){return this.fromArray(t.elements,3*e)},equals:function(t){return t.x===this.x&&t.y===this.y&&t.z===this.z},fromArray:function(t,e){return void 0===e&&(e=0),this.x=t[e],this.y=t[e+1],this.z=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t},fromBufferAttribute:function(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}});var Qn=new $n,Kn=new ar,tr=new $n(0,0,0),er=new $n(1,1,1),nr=new $n,rr=new $n,ir=new $n;function ar(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}Object.assign(ar.prototype,{isMatrix4:!0,set:function(t,e,n,r,i,a,o,s,c,u,l,h,d,p,f,m){var v=this.elements;return v[0]=t,v[4]=e,v[8]=n,v[12]=r,v[1]=i,v[5]=a,v[9]=o,v[13]=s,v[2]=c,v[6]=u,v[10]=l,v[14]=h,v[3]=d,v[7]=p,v[11]=f,v[15]=m,this},identity:function(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this},clone:function(){return(new ar).fromArray(this.elements)},copy:function(t){var e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this},copyPosition:function(t){var e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this},extractBasis:function(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this},makeBasis:function(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this},extractRotation:function(t){var e=this.elements,n=t.elements,r=1/Qn.setFromMatrixColumn(t,0).length(),i=1/Qn.setFromMatrixColumn(t,1).length(),a=1/Qn.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*i,e[5]=n[5]*i,e[6]=n[6]*i,e[7]=0,e[8]=n[8]*a,e[9]=n[9]*a,e[10]=n[10]*a,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromEuler:function(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");var e=this.elements,n=t.x,r=t.y,i=t.z,a=Math.cos(n),o=Math.sin(n),s=Math.cos(r),c=Math.sin(r),u=Math.cos(i),l=Math.sin(i);if("XYZ"===t.order){var h=a*u,d=a*l,p=o*u,f=o*l;e[0]=s*u,e[4]=-s*l,e[8]=c,e[1]=d+p*c,e[5]=h-f*c,e[9]=-o*s,e[2]=f-h*c,e[6]=p+d*c,e[10]=a*s}else if("YXZ"===t.order){var m=s*u,v=s*l,g=c*u,y=c*l;e[0]=m+y*o,e[4]=g*o-v,e[8]=a*c,e[1]=a*l,e[5]=a*u,e[9]=-o,e[2]=v*o-g,e[6]=y+m*o,e[10]=a*s}else if("ZXY"===t.order){m=s*u,v=s*l,g=c*u,y=c*l;e[0]=m-y*o,e[4]=-a*l,e[8]=g+v*o,e[1]=v+g*o,e[5]=a*u,e[9]=y-m*o,e[2]=-a*c,e[6]=o,e[10]=a*s}else if("ZYX"===t.order){h=a*u,d=a*l,p=o*u,f=o*l;e[0]=s*u,e[4]=p*c-d,e[8]=h*c+f,e[1]=s*l,e[5]=f*c+h,e[9]=d*c-p,e[2]=-c,e[6]=o*s,e[10]=a*s}else if("YZX"===t.order){var x=a*s,b=a*c,_=o*s,w=o*c;e[0]=s*u,e[4]=w-x*l,e[8]=_*l+b,e[1]=l,e[5]=a*u,e[9]=-o*u,e[2]=-c*u,e[6]=b*l+_,e[10]=x-w*l}else if("XZY"===t.order){x=a*s,b=a*c,_=o*s,w=o*c;e[0]=s*u,e[4]=-l,e[8]=c*u,e[1]=x*l+w,e[5]=a*u,e[9]=b*l-_,e[2]=_*l-b,e[6]=o*u,e[10]=w*l+x}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this},makeRotationFromQuaternion:function(t){return this.compose(tr,t,er)},lookAt:function(t,e,n){var r=this.elements;return ir.subVectors(t,e),0===ir.lengthSq()&&(ir.z=1),ir.normalize(),nr.crossVectors(n,ir),0===nr.lengthSq()&&(1===Math.abs(n.z)?ir.x+=1e-4:ir.z+=1e-4,ir.normalize(),nr.crossVectors(n,ir)),nr.normalize(),rr.crossVectors(ir,nr),r[0]=nr.x,r[4]=rr.x,r[8]=ir.x,r[1]=nr.y,r[5]=rr.y,r[9]=ir.y,r[2]=nr.z,r[6]=rr.z,r[10]=ir.z,this},multiply:function(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)},premultiply:function(t){return this.multiplyMatrices(t,this)},multiplyMatrices:function(t,e){var n=t.elements,r=e.elements,i=this.elements,a=n[0],o=n[4],s=n[8],c=n[12],u=n[1],l=n[5],h=n[9],d=n[13],p=n[2],f=n[6],m=n[10],v=n[14],g=n[3],y=n[7],x=n[11],b=n[15],_=r[0],w=r[4],M=r[8],S=r[12],E=r[1],T=r[5],A=r[9],L=r[13],R=r[2],P=r[6],C=r[10],O=r[14],D=r[3],I=r[7],N=r[11],B=r[15];return i[0]=a*_+o*E+s*R+c*D,i[4]=a*w+o*T+s*P+c*I,i[8]=a*M+o*A+s*C+c*N,i[12]=a*S+o*L+s*O+c*B,i[1]=u*_+l*E+h*R+d*D,i[5]=u*w+l*T+h*P+d*I,i[9]=u*M+l*A+h*C+d*N,i[13]=u*S+l*L+h*O+d*B,i[2]=p*_+f*E+m*R+v*D,i[6]=p*w+f*T+m*P+v*I,i[10]=p*M+f*A+m*C+v*N,i[14]=p*S+f*L+m*O+v*B,i[3]=g*_+y*E+x*R+b*D,i[7]=g*w+y*T+x*P+b*I,i[11]=g*M+y*A+x*C+b*N,i[15]=g*S+y*L+x*O+b*B,this},multiplyScalar:function(t){var e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this},determinant:function(){var t=this.elements,e=t[0],n=t[4],r=t[8],i=t[12],a=t[1],o=t[5],s=t[9],c=t[13],u=t[2],l=t[6],h=t[10],d=t[14];return t[3]*(+i*s*l-r*c*l-i*o*h+n*c*h+r*o*d-n*s*d)+t[7]*(+e*s*d-e*c*h+i*a*h-r*a*d+r*c*u-i*s*u)+t[11]*(+e*c*l-e*o*d-i*a*l+n*a*d+i*o*u-n*c*u)+t[15]*(-r*o*u-e*s*l+e*o*h+r*a*l-n*a*h+n*s*u)},transpose:function(){var t,e=this.elements;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this},setPosition:function(t,e,n){var r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=n),this},getInverse:function(t,e){void 0!==e&&console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");var n=this.elements,r=t.elements,i=r[0],a=r[1],o=r[2],s=r[3],c=r[4],u=r[5],l=r[6],h=r[7],d=r[8],p=r[9],f=r[10],m=r[11],v=r[12],g=r[13],y=r[14],x=r[15],b=p*y*h-g*f*h+g*l*m-u*y*m-p*l*x+u*f*x,_=v*f*h-d*y*h-v*l*m+c*y*m+d*l*x-c*f*x,w=d*g*h-v*p*h+v*u*m-c*g*m-d*u*x+c*p*x,M=v*p*l-d*g*l-v*u*f+c*g*f+d*u*y-c*p*y,S=i*b+a*_+o*w+s*M;if(0===S)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);var E=1/S;return n[0]=b*E,n[1]=(g*f*s-p*y*s-g*o*m+a*y*m+p*o*x-a*f*x)*E,n[2]=(u*y*s-g*l*s+g*o*h-a*y*h-u*o*x+a*l*x)*E,n[3]=(p*l*s-u*f*s-p*o*h+a*f*h+u*o*m-a*l*m)*E,n[4]=_*E,n[5]=(d*y*s-v*f*s+v*o*m-i*y*m-d*o*x+i*f*x)*E,n[6]=(v*l*s-c*y*s-v*o*h+i*y*h+c*o*x-i*l*x)*E,n[7]=(c*f*s-d*l*s+d*o*h-i*f*h-c*o*m+i*l*m)*E,n[8]=w*E,n[9]=(v*p*s-d*g*s-v*a*m+i*g*m+d*a*x-i*p*x)*E,n[10]=(c*g*s-v*u*s+v*a*h-i*g*h-c*a*x+i*u*x)*E,n[11]=(d*u*s-c*p*s-d*a*h+i*p*h+c*a*m-i*u*m)*E,n[12]=M*E,n[13]=(d*g*o-v*p*o+v*a*f-i*g*f-d*a*y+i*p*y)*E,n[14]=(v*u*o-c*g*o-v*a*l+i*g*l+c*a*y-i*u*y)*E,n[15]=(c*p*o-d*u*o+d*a*l-i*p*l-c*a*f+i*u*f)*E,this},scale:function(t){var e=this.elements,n=t.x,r=t.y,i=t.z;return e[0]*=n,e[4]*=r,e[8]*=i,e[1]*=n,e[5]*=r,e[9]*=i,e[2]*=n,e[6]*=r,e[10]*=i,e[3]*=n,e[7]*=r,e[11]*=i,this},getMaxScaleOnAxis:function(){var t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))},makeTranslation:function(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this},makeRotationX:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this},makeRotationY:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this},makeRotationZ:function(t){var e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this},makeRotationAxis:function(t,e){var n=Math.cos(e),r=Math.sin(e),i=1-n,a=t.x,o=t.y,s=t.z,c=i*a,u=i*o;return this.set(c*a+n,c*o-r*s,c*s+r*o,0,c*o+r*s,u*o+n,u*s-r*a,0,c*s-r*o,u*s+r*a,i*s*s+n,0,0,0,0,1),this},makeScale:function(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this},makeShear:function(t,e,n){return this.set(1,e,n,0,t,1,n,0,t,e,1,0,0,0,0,1),this},compose:function(t,e,n){var r=this.elements,i=e._x,a=e._y,o=e._z,s=e._w,c=i+i,u=a+a,l=o+o,h=i*c,d=i*u,p=i*l,f=a*u,m=a*l,v=o*l,g=s*c,y=s*u,x=s*l,b=n.x,_=n.y,w=n.z;return r[0]=(1-(f+v))*b,r[1]=(d+x)*b,r[2]=(p-y)*b,r[3]=0,r[4]=(d-x)*_,r[5]=(1-(h+v))*_,r[6]=(m+g)*_,r[7]=0,r[8]=(p+y)*w,r[9]=(m-g)*w,r[10]=(1-(h+f))*w,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this},decompose:function(t,e,n){var r=this.elements,i=Qn.set(r[0],r[1],r[2]).length(),a=Qn.set(r[4],r[5],r[6]).length(),o=Qn.set(r[8],r[9],r[10]).length();this.determinant()<0&&(i=-i),t.x=r[12],t.y=r[13],t.z=r[14],Kn.copy(this);var s=1/i,c=1/a,u=1/o;return Kn.elements[0]*=s,Kn.elements[1]*=s,Kn.elements[2]*=s,Kn.elements[4]*=c,Kn.elements[5]*=c,Kn.elements[6]*=c,Kn.elements[8]*=u,Kn.elements[9]*=u,Kn.elements[10]*=u,e.setFromRotationMatrix(Kn),n.x=i,n.y=a,n.z=o,this},makePerspective:function(t,e,n,r,i,a){void 0===a&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");var o=this.elements,s=2*i/(e-t),c=2*i/(n-r),u=(e+t)/(e-t),l=(n+r)/(n-r),h=-(a+i)/(a-i),d=-2*a*i/(a-i);return o[0]=s,o[4]=0,o[8]=u,o[12]=0,o[1]=0,o[5]=c,o[9]=l,o[13]=0,o[2]=0,o[6]=0,o[10]=h,o[14]=d,o[3]=0,o[7]=0,o[11]=-1,o[15]=0,this},makeOrthographic:function(t,e,n,r,i,a){var o=this.elements,s=1/(e-t),c=1/(n-r),u=1/(a-i),l=(e+t)*s,h=(n+r)*c,d=(a+i)*u;return o[0]=2*s,o[4]=0,o[8]=0,o[12]=-l,o[1]=0,o[5]=2*c,o[9]=0,o[13]=-h,o[2]=0,o[6]=0,o[10]=-2*u,o[14]=-d,o[3]=0,o[7]=0,o[11]=0,o[15]=1,this},equals:function(t){for(var e=this.elements,n=t.elements,r=0;r<16;r++)if(e[r]!==n[r])return!1;return!0},fromArray:function(t,e){void 0===e&&(e=0);for(var n=0;n<16;n++)this.elements[n]=t[n+e];return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);var n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}});var or=new ar,sr=new Yn;function cr(t,e,n,r){this._x=t||0,this._y=e||0,this._z=n||0,this._order=r||cr.DefaultOrder}function ur(){this.mask=1}cr.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"],cr.DefaultOrder="XYZ",Object.defineProperties(cr.prototype,{x:{get:function(){return this._x},set:function(t){this._x=t,this._onChangeCallback()}},y:{get:function(){return this._y},set:function(t){this._y=t,this._onChangeCallback()}},z:{get:function(){return this._z},set:function(t){this._z=t,this._onChangeCallback()}},order:{get:function(){return this._order},set:function(t){this._order=t,this._onChangeCallback()}}}),Object.assign(cr.prototype,{isEuler:!0,set:function(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._order=r||this._order,this._onChangeCallback(),this},clone:function(){return new this.constructor(this._x,this._y,this._z,this._order)},copy:function(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this},setFromRotationMatrix:function(t,e,n){var r=Un.clamp,i=t.elements,a=i[0],o=i[4],s=i[8],c=i[1],u=i[5],l=i[9],h=i[2],d=i[6],p=i[10];return"XYZ"===(e=e||this._order)?(this._y=Math.asin(r(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(-l,p),this._z=Math.atan2(-o,a)):(this._x=Math.atan2(d,u),this._z=0)):"YXZ"===e?(this._x=Math.asin(-r(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(s,p),this._z=Math.atan2(c,u)):(this._y=Math.atan2(-h,a),this._z=0)):"ZXY"===e?(this._x=Math.asin(r(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-h,p),this._z=Math.atan2(-o,u)):(this._y=0,this._z=Math.atan2(c,a))):"ZYX"===e?(this._y=Math.asin(-r(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(d,p),this._z=Math.atan2(c,a)):(this._x=0,this._z=Math.atan2(-o,u))):"YZX"===e?(this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-l,u),this._y=Math.atan2(-h,a)):(this._x=0,this._y=Math.atan2(s,p))):"XZY"===e?(this._z=Math.asin(-r(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,u),this._y=Math.atan2(s,a)):(this._x=Math.atan2(-l,p),this._y=0)):console.warn("THREE.Euler: .setFromRotationMatrix() given unsupported order: "+e),this._order=e,!1!==n&&this._onChangeCallback(),this},setFromQuaternion:function(t,e,n){return or.makeRotationFromQuaternion(t),this.setFromRotationMatrix(or,e,n)},setFromVector3:function(t,e){return this.set(t.x,t.y,t.z,e||this._order)},reorder:function(t){return sr.setFromEuler(this),this.setFromQuaternion(sr,t)},equals:function(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order},fromArray:function(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t},toVector3:function(t){return t?t.set(this._x,this._y,this._z):new $n(this._x,this._y,this._z)},_onChange:function(t){return this._onChangeCallback=t,this},_onChangeCallback:function(){}}),Object.assign(ur.prototype,{set:function(t){this.mask=1<<t|0},enable:function(t){this.mask|=1<<t|0},enableAll:function(){this.mask=-1},toggle:function(t){this.mask^=1<<t|0},disable:function(t){this.mask&=~(1<<t|0)},disableAll:function(){this.mask=0},test:function(t){return 0!=(this.mask&t.mask)}});var lr=0,hr=new $n,dr=new Yn,pr=new ar,fr=new $n,mr=new $n,vr=new $n,gr=new Yn,yr=new $n(1,0,0),xr=new $n(0,1,0),br=new $n(0,0,1),_r={type:"added"},wr={type:"removed"};function Mr(){Object.defineProperty(this,"id",{value:lr++}),this.uuid=Un.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Mr.DefaultUp.clone();var t=new $n,e=new cr,n=new Yn,r=new $n(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new ar},normalMatrix:{value:new Hn}}),this.matrix=new ar,this.matrixWorld=new ar,this.matrixAutoUpdate=Mr.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new ur,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}function Sr(){Mr.call(this),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}Mr.DefaultUp=new $n(0,1,0),Mr.DefaultMatrixAutoUpdate=!0,Mr.prototype=Object.assign(Object.create(Nn.prototype),{constructor:Mr,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(t){return this.quaternion.premultiply(t),this},setRotationFromAxisAngle:function(t,e){this.quaternion.setFromAxisAngle(t,e)},setRotationFromEuler:function(t){this.quaternion.setFromEuler(t,!0)},setRotationFromMatrix:function(t){this.quaternion.setFromRotationMatrix(t)},setRotationFromQuaternion:function(t){this.quaternion.copy(t)},rotateOnAxis:function(t,e){return dr.setFromAxisAngle(t,e),this.quaternion.multiply(dr),this},rotateOnWorldAxis:function(t,e){return dr.setFromAxisAngle(t,e),this.quaternion.premultiply(dr),this},rotateX:function(t){return this.rotateOnAxis(yr,t)},rotateY:function(t){return this.rotateOnAxis(xr,t)},rotateZ:function(t){return this.rotateOnAxis(br,t)},translateOnAxis:function(t,e){return hr.copy(t).applyQuaternion(this.quaternion),this.position.add(hr.multiplyScalar(e)),this},translateX:function(t){return this.translateOnAxis(yr,t)},translateY:function(t){return this.translateOnAxis(xr,t)},translateZ:function(t){return this.translateOnAxis(br,t)},localToWorld:function(t){return t.applyMatrix4(this.matrixWorld)},worldToLocal:function(t){return t.applyMatrix4(pr.getInverse(this.matrixWorld))},lookAt:function(t,e,n){t.isVector3?fr.copy(t):fr.set(t,e,n);var r=this.parent;this.updateWorldMatrix(!0,!1),mr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?pr.lookAt(mr,fr,this.up):pr.lookAt(fr,mr,this.up),this.quaternion.setFromRotationMatrix(pr),r&&(pr.extractRotation(r.matrixWorld),dr.setFromRotationMatrix(pr),this.quaternion.premultiply(dr.inverse()))},add:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(_r)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)},remove:function(t){if(arguments.length>1){for(var e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}var n=this.children.indexOf(t);return-1!==n&&(t.parent=null,this.children.splice(n,1),t.dispatchEvent(wr)),this},attach:function(t){return this.updateWorldMatrix(!0,!1),pr.getInverse(this.matrixWorld),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),pr.multiply(t.parent.matrixWorld)),t.applyMatrix4(pr),t.updateWorldMatrix(!1,!1),this.add(t),this},getObjectById:function(t){return this.getObjectByProperty("id",t)},getObjectByName:function(t){return this.getObjectByProperty("name",t)},getObjectByProperty:function(t,e){if(this[t]===e)return this;for(var n=0,r=this.children.length;n<r;n++){var i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}},getWorldPosition:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),t=new $n),this.updateMatrixWorld(!0),t.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),t=new Yn),this.updateMatrixWorld(!0),this.matrixWorld.decompose(mr,t,vr),t},getWorldScale:function(t){return void 0===t&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),t=new $n),this.updateMatrixWorld(!0),this.matrixWorld.decompose(mr,gr,t),t},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),t=new $n),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()},raycast:function(){},traverse:function(t){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverse(t)},traverseVisible:function(t){if(!1!==this.visible){t(this);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].traverseVisible(t)}},traverseAncestors:function(t){var e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);for(var e=this.children,n=0,r=e.length;n<r;n++)e[n].updateMatrixWorld(t)},updateWorldMatrix:function(t,e){var n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e)for(var r=this.children,i=0,a=r.length;i<a;i++)r[i].updateWorldMatrix(!1,!0)},toJSON:function(t){var e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});var r={};function i(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,""!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),!1===this.frustumCulled&&(r.frustumCulled=!1),0!==this.renderOrder&&(r.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON()),this.isMesh||this.isLine||this.isPoints){r.geometry=i(t.geometries,this.geometry);var a=this.geometry.parameters;if(void 0!==a&&void 0!==a.shapes){var o=a.shapes;if(Array.isArray(o))for(var s=0,c=o.length;s<c;s++){var u=o[s];i(t.shapes,u)}else i(t.shapes,o)}}if(void 0!==this.material)if(Array.isArray(this.material)){var l=[];for(s=0,c=this.material.length;s<c;s++)l.push(i(t.materials,this.material[s]));r.material=l}else r.material=i(t.materials,this.material);if(this.children.length>0){r.children=[];for(s=0;s<this.children.length;s++)r.children.push(this.children[s].toJSON(t).object)}if(e){var h=m(t.geometries),d=m(t.materials),p=m(t.textures),f=m(t.images);o=m(t.shapes);h.length>0&&(n.geometries=h),d.length>0&&(n.materials=d),p.length>0&&(n.textures=p),f.length>0&&(n.images=f),o.length>0&&(n.shapes=o)}return n.object=r,n;function m(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}},clone:function(t){return(new this.constructor).copy(this,t)},copy:function(t,e){if(void 0===e&&(e=!0),this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(var n=0;n<t.children.length;n++){var r=t.children[n];this.add(r.clone())}return this}}),Sr.prototype=Object.assign(Object.create(Mr.prototype),{constructor:Sr,isScene:!0,copy:function(t,e){return Mr.prototype.copy.call(this,t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this},toJSON:function(t){var e=Mr.prototype.toJSON.call(this,t);return null!==this.background&&(e.object.background=this.background.toJSON(t)),null!==this.environment&&(e.object.environment=this.environment.toJSON(t)),null!==this.fog&&(e.object.fog=this.fog.toJSON()),e},dispose:function(){this.dispatchEvent({type:"dispose"})}});var Er=[new $n,new $n,new $n,new $n,new $n,new $n,new $n,new $n],Tr=new $n,Ar=new Fr,Lr=new $n,Rr=new $n,Pr=new $n,Cr=new $n,Or=new $n,Dr=new $n,Ir=new $n,Nr=new $n,Br=new $n,zr=new $n;function Fr(t,e){this.min=void 0!==t?t:new $n(1/0,1/0,1/0),this.max=void 0!==e?e:new $n(-1/0,-1/0,-1/0)}function Ur(t,e,n,r,i){var a,o;for(a=0,o=t.length-3;a<=o;a+=3){zr.fromArray(t,a);var s=i.x*Math.abs(zr.x)+i.y*Math.abs(zr.y)+i.z*Math.abs(zr.z),c=e.dot(zr),u=n.dot(zr),l=r.dot(zr);if(Math.max(-Math.max(c,u,l),Math.min(c,u,l))>s)return!1}return!0}Object.assign(Fr.prototype,{isBox3:!0,set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromArray:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=t.length;s<c;s+=3){var u=t[s],l=t[s+1],h=t[s+2];u<e&&(e=u),l<n&&(n=l),h<r&&(r=h),u>i&&(i=u),l>a&&(a=l),h>o&&(o=h)}return this.min.set(e,n,r),this.max.set(i,a,o),this},setFromBufferAttribute:function(t){for(var e=1/0,n=1/0,r=1/0,i=-1/0,a=-1/0,o=-1/0,s=0,c=t.count;s<c;s++){var u=t.getX(s),l=t.getY(s),h=t.getZ(s);u<e&&(e=u),l<n&&(n=l),h<r&&(r=h),u>i&&(i=u),l>a&&(a=l),h>o&&(o=h)}return this.min.set(e,n,r),this.max.set(i,a,o),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var n=Tr.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this},setFromObject:function(t){return this.makeEmpty(),this.expandByObject(t)},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new $n),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new $n),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},expandByObject:function(t){t.updateWorldMatrix(!1,!1);var e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),Ar.copy(e.boundingBox),Ar.applyMatrix4(t.matrixWorld),this.union(Ar));for(var n=t.children,r=0,i=n.length;r<i;r++)this.expandByObject(n[r]);return this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new $n),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)},intersectsSphere:function(t){return this.clampPoint(t.center,Tr),Tr.distanceToSquared(t.center)<=t.radius*t.radius},intersectsPlane:function(t){var e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant},intersectsTriangle:function(t){if(this.isEmpty())return!1;this.getCenter(Ir),Nr.subVectors(this.max,Ir),Lr.subVectors(t.a,Ir),Rr.subVectors(t.b,Ir),Pr.subVectors(t.c,Ir),Cr.subVectors(Rr,Lr),Or.subVectors(Pr,Rr),Dr.subVectors(Lr,Pr);var e=[0,-Cr.z,Cr.y,0,-Or.z,Or.y,0,-Dr.z,Dr.y,Cr.z,0,-Cr.x,Or.z,0,-Or.x,Dr.z,0,-Dr.x,-Cr.y,Cr.x,0,-Or.y,Or.x,0,-Dr.y,Dr.x,0];return!!Ur(e,Lr,Rr,Pr,Nr)&&(!!Ur(e=[1,0,0,0,1,0,0,0,1],Lr,Rr,Pr,Nr)&&(Br.crossVectors(Cr,Or),Ur(e=[Br.x,Br.y,Br.z],Lr,Rr,Pr,Nr)))},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new $n),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return Tr.copy(t).clamp(this.min,this.max).sub(t).length()},getBoundingSphere:function(t){return void 0===t&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=.5*this.getSize(Tr).length(),t},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},applyMatrix4:function(t){return this.isEmpty()||(Er[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Er[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Er[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Er[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Er[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Er[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Er[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Er[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Er)),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var Gr=new Fr;function Hr(t,e){this.center=void 0!==t?t:new $n,this.radius=void 0!==e?e:0}Object.assign(Hr.prototype,{set:function(t,e){return this.center.copy(t),this.radius=e,this},setFromPoints:function(t,e){var n=this.center;void 0!==e?n.copy(e):Gr.setFromPoints(t).getCenter(n);for(var r=0,i=0,a=t.length;i<a;i++)r=Math.max(r,n.distanceToSquared(t[i]));return this.radius=Math.sqrt(r),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.center.copy(t.center),this.radius=t.radius,this},empty:function(){return this.radius<=0},containsPoint:function(t){return t.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(t){return t.distanceTo(this.center)-this.radius},intersectsSphere:function(t){var e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e},intersectsBox:function(t){return t.intersectsSphere(this)},intersectsPlane:function(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius},clampPoint:function(t,e){var n=this.center.distanceToSquared(t);return void 0===e&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new $n),e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e},getBoundingBox:function(t){return void 0===t&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new Fr),t.set(this.center,this.center),t.expandByScalar(this.radius),t},applyMatrix4:function(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this},translate:function(t){return this.center.add(t),this},equals:function(t){return t.center.equals(this.center)&&t.radius===this.radius}});var kr=new $n,jr=new $n,Vr=new $n,Wr=new $n,qr=new $n,Xr=new $n,Yr=new $n;function Zr(t,e){this.origin=void 0!==t?t:new $n,this.direction=void 0!==e?e:new $n(0,0,-1)}Object.assign(Zr.prototype,{set:function(t,e){return this.origin.copy(t),this.direction.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this},at:function(t,e){return void 0===e&&(console.warn("THREE.Ray: .at() target is now required"),e=new $n),e.copy(this.direction).multiplyScalar(t).add(this.origin)},lookAt:function(t){return this.direction.copy(t).sub(this.origin).normalize(),this},recast:function(t){return this.origin.copy(this.at(t,kr)),this},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new $n),e.subVectors(t,this.origin);var n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)},distanceToPoint:function(t){return Math.sqrt(this.distanceSqToPoint(t))},distanceSqToPoint:function(t){var e=kr.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(kr.copy(this.direction).multiplyScalar(e).add(this.origin),kr.distanceToSquared(t))},distanceSqToSegment:function(t,e,n,r){jr.copy(t).add(e).multiplyScalar(.5),Vr.copy(e).sub(t).normalize(),Wr.copy(this.origin).sub(jr);var i,a,o,s,c=.5*t.distanceTo(e),u=-this.direction.dot(Vr),l=Wr.dot(this.direction),h=-Wr.dot(Vr),d=Wr.lengthSq(),p=Math.abs(1-u*u);if(p>0)if(a=u*l-h,s=c*p,(i=u*h-l)>=0)if(a>=-s)if(a<=s){var f=1/p;o=(i*=f)*(i+u*(a*=f)+2*l)+a*(u*i+a+2*h)+d}else a=c,o=-(i=Math.max(0,-(u*a+l)))*i+a*(a+2*h)+d;else a=-c,o=-(i=Math.max(0,-(u*a+l)))*i+a*(a+2*h)+d;else a<=-s?o=-(i=Math.max(0,-(-u*c+l)))*i+(a=i>0?-c:Math.min(Math.max(-c,-h),c))*(a+2*h)+d:a<=s?(i=0,o=(a=Math.min(Math.max(-c,-h),c))*(a+2*h)+d):o=-(i=Math.max(0,-(u*c+l)))*i+(a=i>0?c:Math.min(Math.max(-c,-h),c))*(a+2*h)+d;else a=u>0?-c:c,o=-(i=Math.max(0,-(u*a+l)))*i+a*(a+2*h)+d;return n&&n.copy(this.direction).multiplyScalar(i).add(this.origin),r&&r.copy(Vr).multiplyScalar(a).add(jr),o},intersectSphere:function(t,e){kr.subVectors(t.center,this.origin);var n=kr.dot(this.direction),r=kr.dot(kr)-n*n,i=t.radius*t.radius;if(r>i)return null;var a=Math.sqrt(i-r),o=n-a,s=n+a;return o<0&&s<0?null:o<0?this.at(s,e):this.at(o,e)},intersectsSphere:function(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius},distanceToPlane:function(t){var e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;var n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null},intersectPlane:function(t,e){var n=this.distanceToPlane(t);return null===n?null:this.at(n,e)},intersectsPlane:function(t){var e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0},intersectBox:function(t,e){var n,r,i,a,o,s,c=1/this.direction.x,u=1/this.direction.y,l=1/this.direction.z,h=this.origin;return c>=0?(n=(t.min.x-h.x)*c,r=(t.max.x-h.x)*c):(n=(t.max.x-h.x)*c,r=(t.min.x-h.x)*c),u>=0?(i=(t.min.y-h.y)*u,a=(t.max.y-h.y)*u):(i=(t.max.y-h.y)*u,a=(t.min.y-h.y)*u),n>a||i>r?null:((i>n||n!=n)&&(n=i),(a<r||r!=r)&&(r=a),l>=0?(o=(t.min.z-h.z)*l,s=(t.max.z-h.z)*l):(o=(t.max.z-h.z)*l,s=(t.min.z-h.z)*l),n>s||o>r?null:((o>n||n!=n)&&(n=o),(s<r||r!=r)&&(r=s),r<0?null:this.at(n>=0?n:r,e)))},intersectsBox:function(t){return null!==this.intersectBox(t,kr)},intersectTriangle:function(t,e,n,r,i){qr.subVectors(e,t),Xr.subVectors(n,t),Yr.crossVectors(qr,Xr);var a,o=this.direction.dot(Yr);if(o>0){if(r)return null;a=1}else{if(!(o<0))return null;a=-1,o=-o}Wr.subVectors(this.origin,t);var s=a*this.direction.dot(Xr.crossVectors(Wr,Xr));if(s<0)return null;var c=a*this.direction.dot(qr.cross(Wr));if(c<0)return null;if(s+c>o)return null;var u=-a*Wr.dot(Yr);return u<0?null:this.at(u/o,i)},applyMatrix4:function(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this},equals:function(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}});var Jr=new $n,$r=new $n,Qr=new Hn;function Kr(t,e){this.normal=void 0!==t?t:new $n(1,0,0),this.constant=void 0!==e?e:0}Object.assign(Kr.prototype,{isPlane:!0,set:function(t,e){return this.normal.copy(t),this.constant=e,this},setComponents:function(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this},setFromNormalAndCoplanarPoint:function(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this},setFromCoplanarPoints:function(t,e,n){var r=Jr.subVectors(n,e).cross($r.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.normal.copy(t.normal),this.constant=t.constant,this},normalize:function(){var t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this},negate:function(){return this.constant*=-1,this.normal.negate(),this},distanceToPoint:function(t){return this.normal.dot(t)+this.constant},distanceToSphere:function(t){return this.distanceToPoint(t.center)-t.radius},projectPoint:function(t,e){return void 0===e&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new $n),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)},intersectLine:function(t,e){void 0===e&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new $n);var n=t.delta(Jr),r=this.normal.dot(n);if(0===r)return 0===this.distanceToPoint(t.start)?e.copy(t.start):void 0;var i=-(t.start.dot(this.normal)+this.constant)/r;return i<0||i>1?void 0:e.copy(n).multiplyScalar(i).add(t.start)},intersectsLine:function(t){var e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0},intersectsBox:function(t){return t.intersectsPlane(this)},intersectsSphere:function(t){return t.intersectsPlane(this)},coplanarPoint:function(t){return void 0===t&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new $n),t.copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(t,e){var n=e||Qr.getNormalMatrix(t),r=this.coplanarPoint(Jr).applyMatrix4(t),i=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(i),this},translate:function(t){return this.constant-=t.dot(this.normal),this},equals:function(t){return t.normal.equals(this.normal)&&t.constant===this.constant}});var ti=new $n,ei=new $n,ni=new $n,ri=new $n,ii=new $n,ai=new $n,oi=new $n,si=new $n,ci=new $n,ui=new $n;function li(t,e,n){this.a=void 0!==t?t:new $n,this.b=void 0!==e?e:new $n,this.c=void 0!==n?n:new $n}Object.assign(li,{getNormal:function(t,e,n,r){void 0===r&&(console.warn("THREE.Triangle: .getNormal() target is now required"),r=new $n),r.subVectors(n,e),ti.subVectors(t,e),r.cross(ti);var i=r.lengthSq();return i>0?r.multiplyScalar(1/Math.sqrt(i)):r.set(0,0,0)},getBarycoord:function(t,e,n,r,i){ti.subVectors(r,e),ei.subVectors(n,e),ni.subVectors(t,e);var a=ti.dot(ti),o=ti.dot(ei),s=ti.dot(ni),c=ei.dot(ei),u=ei.dot(ni),l=a*c-o*o;if(void 0===i&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),i=new $n),0===l)return i.set(-2,-1,-1);var h=1/l,d=(c*s-o*u)*h,p=(a*u-o*s)*h;return i.set(1-d-p,p,d)},containsPoint:function(t,e,n,r){return li.getBarycoord(t,e,n,r,ri),ri.x>=0&&ri.y>=0&&ri.x+ri.y<=1},getUV:function(t,e,n,r,i,a,o,s){return this.getBarycoord(t,e,n,r,ri),s.set(0,0),s.addScaledVector(i,ri.x),s.addScaledVector(a,ri.y),s.addScaledVector(o,ri.z),s},isFrontFacing:function(t,e,n,r){return ti.subVectors(n,e),ei.subVectors(t,e),ti.cross(ei).dot(r)<0}}),Object.assign(li.prototype,{set:function(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this},setFromPointsAndIndices:function(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this},getArea:function(){return ti.subVectors(this.c,this.b),ei.subVectors(this.a,this.b),.5*ti.cross(ei).length()},getMidpoint:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new $n),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},getNormal:function(t){return li.getNormal(this.a,this.b,this.c,t)},getPlane:function(t){return void 0===t&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new Kr),t.setFromCoplanarPoints(this.a,this.b,this.c)},getBarycoord:function(t,e){return li.getBarycoord(t,this.a,this.b,this.c,e)},getUV:function(t,e,n,r,i){return li.getUV(t,this.a,this.b,this.c,e,n,r,i)},containsPoint:function(t){return li.containsPoint(t,this.a,this.b,this.c)},isFrontFacing:function(t){return li.isFrontFacing(this.a,this.b,this.c,t)},intersectsBox:function(t){return t.intersectsTriangle(this)},closestPointToPoint:function(t,e){void 0===e&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new $n);var n,r,i=this.a,a=this.b,o=this.c;ii.subVectors(a,i),ai.subVectors(o,i),si.subVectors(t,i);var s=ii.dot(si),c=ai.dot(si);if(s<=0&&c<=0)return e.copy(i);ci.subVectors(t,a);var u=ii.dot(ci),l=ai.dot(ci);if(u>=0&&l<=u)return e.copy(a);var h=s*l-u*c;if(h<=0&&s>=0&&u<=0)return n=s/(s-u),e.copy(i).addScaledVector(ii,n);ui.subVectors(t,o);var d=ii.dot(ui),p=ai.dot(ui);if(p>=0&&d<=p)return e.copy(o);var f=d*c-s*p;if(f<=0&&c>=0&&p<=0)return r=c/(c-p),e.copy(i).addScaledVector(ai,r);var m=u*p-d*l;if(m<=0&&l-u>=0&&d-p>=0)return oi.subVectors(o,a),r=(l-u)/(l-u+(d-p)),e.copy(a).addScaledVector(oi,r);var v=1/(m+f+h);return n=f*v,r=h*v,e.copy(i).addScaledVector(ii,n).addScaledVector(ai,r)},equals:function(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}});var hi={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},di={h:0,s:0,l:0},pi={h:0,s:0,l:0};function fi(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}function mi(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function vi(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function gi(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}function yi(t,e,n,r,i,a){this.a=t,this.b=e,this.c=n,this.normal=r&&r.isVector3?r:new $n,this.vertexNormals=Array.isArray(r)?r:[],this.color=i&&i.isColor?i:new fi,this.vertexColors=Array.isArray(i)?i:[],this.materialIndex=void 0!==a?a:0}Object.assign(fi.prototype,{isColor:!0,r:1,g:1,b:1,set:function(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this},setScalar:function(t){return this.r=t,this.g=t,this.b=t,this},setHex:function(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this},setRGB:function(t,e,n){return this.r=t,this.g=e,this.b=n,this},setHSL:function(t,e,n){if(t=Un.euclideanModulo(t,1),e=Un.clamp(e,0,1),n=Un.clamp(n,0,1),0===e)this.r=this.g=this.b=n;else{var r=n<=.5?n*(1+e):n+e-n*e,i=2*n-r;this.r=mi(i,r,t+1/3),this.g=mi(i,r,t),this.b=mi(i,r,t-1/3)}return this},setStyle:function(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}var n;if(n=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){var r,i=n[1],a=n[2];switch(i){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,e(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,e(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(a)){var o=parseFloat(r[1])/360,s=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return e(r[5]),this.setHSL(o,s,c)}}}else if(n=/^\#([A-Fa-f0-9]+)$/.exec(t)){var u=n[1],l=u.length;if(3===l)return this.r=parseInt(u.charAt(0)+u.charAt(0),16)/255,this.g=parseInt(u.charAt(1)+u.charAt(1),16)/255,this.b=parseInt(u.charAt(2)+u.charAt(2),16)/255,this;if(6===l)return this.r=parseInt(u.charAt(0)+u.charAt(1),16)/255,this.g=parseInt(u.charAt(2)+u.charAt(3),16)/255,this.b=parseInt(u.charAt(4)+u.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this},setColorName:function(t){var e=hi[t];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this},clone:function(){return new this.constructor(this.r,this.g,this.b)},copy:function(t){return this.r=t.r,this.g=t.g,this.b=t.b,this},copyGammaToLinear:function(t,e){return void 0===e&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this},copyLinearToGamma:function(t,e){void 0===e&&(e=2);var n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this},convertGammaToLinear:function(t){return this.copyGammaToLinear(this,t),this},convertLinearToGamma:function(t){return this.copyLinearToGamma(this,t),this},copySRGBToLinear:function(t){return this.r=vi(t.r),this.g=vi(t.g),this.b=vi(t.b),this},copyLinearToSRGB:function(t){return this.r=gi(t.r),this.g=gi(t.g),this.b=gi(t.b),this},convertSRGBToLinear:function(){return this.copySRGBToLinear(this),this},convertLinearToSRGB:function(){return this.copyLinearToSRGB(this),this},getHex:function(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(t){void 0===t&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});var e,n,r=this.r,i=this.g,a=this.b,o=Math.max(r,i,a),s=Math.min(r,i,a),c=(s+o)/2;if(s===o)e=0,n=0;else{var u=o-s;switch(n=c<=.5?u/(o+s):u/(2-o-s),o){case r:e=(i-a)/u+(i<a?6:0);break;case i:e=(a-r)/u+2;break;case a:e=(r-i)/u+4}e/=6}return t.h=e,t.s=n,t.l=c,t},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},offsetHSL:function(t,e,n){return this.getHSL(di),di.h+=t,di.s+=e,di.l+=n,this.setHSL(di.h,di.s,di.l),this},add:function(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this},addColors:function(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this},addScalar:function(t){return this.r+=t,this.g+=t,this.b+=t,this},sub:function(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this},multiply:function(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this},multiplyScalar:function(t){return this.r*=t,this.g*=t,this.b*=t,this},lerp:function(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this},lerpHSL:function(t,e){this.getHSL(di),t.getHSL(pi);var n=Un.lerp(di.h,pi.h,e),r=Un.lerp(di.s,pi.s,e),i=Un.lerp(di.l,pi.l,e);return this.setHSL(n,r,i),this},equals:function(t){return t.r===this.r&&t.g===this.g&&t.b===this.b},fromArray:function(t,e){return void 0===e&&(e=0),this.r=t[e],this.g=t[e+1],this.b=t[e+2],this},toArray:function(t,e){return void 0===t&&(t=[]),void 0===e&&(e=0),t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t},toJSON:function(){return this.getHex()}}),fi.NAMES=hi,Object.assign(yi.prototype,{clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(var e=0,n=t.vertexNormals.length;e<n;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(e=0,n=t.vertexColors.length;e<n;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}});var xi=0;function bi(){Object.defineProperty(this,"id",{value:xi++}),this.uuid=Un.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=w,this.side=v,this.flatShading=!1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=B,this.blendDst=z,this.blendEquation=A,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=q,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=En,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=hn,this.stencilZFail=hn,this.stencilZPass=hn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}function _i(t){bi.call(this),this.type="MeshBasicMaterial",this.color=new fi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(t)}bi.prototype=Object.assign(Object.create(Nn.prototype),{constructor:bi,isMaterial:!0,onBeforeCompile:function(){},setValues:function(t){if(void 0!==t)for(var e in t){var n=t[e];if(void 0!==n)if("shading"!==e){var r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}else console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===x;else console.warn("THREE.Material: '"+e+"' parameter is undefined.")}},toJSON:function(t){var e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});var n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function r(t){var e=[];for(var n in t){var r=t[n];delete r.metadata,e.push(r)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(n.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,n.reflectivity=this.reflectivity,n.refractionRatio=this.refractionRatio,void 0!==this.combine&&(n.combine=this.combine),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.size&&(n.size=this.size),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==w&&(n.blending=this.blending),!0===this.flatShading&&(n.flatShading=this.flatShading),this.side!==v&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.morphTargets&&(n.morphTargets=!0),!0===this.morphNormals&&(n.morphNormals=!0),!0===this.skinning&&(n.skinning=!0),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){var i=r(t.textures),a=r(t.images);i.length>0&&(n.textures=i),a.length>0&&(n.images=a)}return n},clone:function(){return(new this.constructor).copy(this)},copy:function(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.flatShading=t.flatShading,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;var e=t.clippingPlanes,n=null;if(null!==e){var r=e.length;n=new Array(r);for(var i=0;i!==r;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}}),Object.defineProperty(bi.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),_i.prototype=Object.create(bi.prototype),_i.prototype.constructor=_i,_i.prototype.isMeshBasicMaterial=!0,_i.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this};var wi=new $n;function Mi(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=Tn,this.updateRange={offset:0,count:-1},this.version=0}function Si(t,e,n){Mi.call(this,new Int8Array(t),e,n)}function Ei(t,e,n){Mi.call(this,new Uint8Array(t),e,n)}function Ti(t,e,n){Mi.call(this,new Uint8ClampedArray(t),e,n)}function Ai(t,e,n){Mi.call(this,new Int16Array(t),e,n)}function Li(t,e,n){Mi.call(this,new Uint16Array(t),e,n)}function Ri(t,e,n){Mi.call(this,new Int32Array(t),e,n)}function Pi(t,e,n){Mi.call(this,new Uint32Array(t),e,n)}function Ci(t,e,n){Mi.call(this,new Float32Array(t),e,n)}function Oi(t,e,n){Mi.call(this,new Float64Array(t),e,n)}function Di(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}function Ii(t){if(0===t.length)return-1/0;for(var e=t[0],n=1,r=t.length;n<r;++n)t[n]>e&&(e=t[n]);return e}Object.defineProperty(Mi.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Mi.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this},copyAt:function(t,e,n){t*=this.itemSize,n*=e.itemSize;for(var r=0,i=this.itemSize;r<i;r++)this.array[t+r]=e.array[n+r];return this},copyArray:function(t){return this.array.set(t),this},copyColorsArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var a=t[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),a=new fi),e[n++]=a.r,e[n++]=a.g,e[n++]=a.b}return this},copyVector2sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var a=t[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),a=new Gn),e[n++]=a.x,e[n++]=a.y}return this},copyVector3sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var a=t[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),a=new $n),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z}return this},copyVector4sArray:function(t){for(var e=this.array,n=0,r=0,i=t.length;r<i;r++){var a=t[r];void 0===a&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),a=new Wn),e[n++]=a.x,e[n++]=a.y,e[n++]=a.z,e[n++]=a.w}return this},applyMatrix3:function(t){for(var e=0,n=this.count;e<n;e++)wi.x=this.getX(e),wi.y=this.getY(e),wi.z=this.getZ(e),wi.applyMatrix3(t),this.setXYZ(e,wi.x,wi.y,wi.z);return this},applyMatrix4:function(t){for(var e=0,n=this.count;e<n;e++)wi.x=this.getX(e),wi.y=this.getY(e),wi.z=this.getZ(e),wi.applyMatrix4(t),this.setXYZ(e,wi.x,wi.y,wi.z);return this},applyNormalMatrix:function(t){for(var e=0,n=this.count;e<n;e++)wi.x=this.getX(e),wi.y=this.getY(e),wi.z=this.getZ(e),wi.applyNormalMatrix(t),this.setXYZ(e,wi.x,wi.y,wi.z);return this},transformDirection:function(t){for(var e=0,n=this.count;e<n;e++)wi.x=this.getX(e),wi.y=this.getY(e),wi.z=this.getZ(e),wi.transformDirection(t),this.setXYZ(e,wi.x,wi.y,wi.z);return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},getX:function(t){return this.array[t*this.itemSize]},setX:function(t,e){return this.array[t*this.itemSize]=e,this},getY:function(t){return this.array[t*this.itemSize+1]},setY:function(t,e){return this.array[t*this.itemSize+1]=e,this},getZ:function(t){return this.array[t*this.itemSize+2]},setZ:function(t,e){return this.array[t*this.itemSize+2]=e,this},getW:function(t){return this.array[t*this.itemSize+3]},setW:function(t,e){return this.array[t*this.itemSize+3]=e,this},setXY:function(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=i,this},onUpload:function(t){return this.onUploadCallback=t,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}}),Si.prototype=Object.create(Mi.prototype),Si.prototype.constructor=Si,Ei.prototype=Object.create(Mi.prototype),Ei.prototype.constructor=Ei,Ti.prototype=Object.create(Mi.prototype),Ti.prototype.constructor=Ti,Ai.prototype=Object.create(Mi.prototype),Ai.prototype.constructor=Ai,Li.prototype=Object.create(Mi.prototype),Li.prototype.constructor=Li,Ri.prototype=Object.create(Mi.prototype),Ri.prototype.constructor=Ri,Pi.prototype=Object.create(Mi.prototype),Pi.prototype.constructor=Pi,Ci.prototype=Object.create(Mi.prototype),Ci.prototype.constructor=Ci,Oi.prototype=Object.create(Mi.prototype),Oi.prototype.constructor=Oi,Object.assign(Di.prototype,{computeGroups:function(t){for(var e,n=[],r=void 0,i=t.faces,a=0;a<i.length;a++){var o=i[a];o.materialIndex!==r&&(r=o.materialIndex,void 0!==e&&(e.count=3*a-e.start,n.push(e)),e={start:3*a,materialIndex:r})}void 0!==e&&(e.count=3*a-e.start,n.push(e)),this.groups=n},fromGeometry:function(t){var e,n=t.faces,r=t.vertices,i=t.faceVertexUvs,a=i[0]&&i[0].length>0,o=i[1]&&i[1].length>0,s=t.morphTargets,c=s.length;if(c>0){e=[];for(var u=0;u<c;u++)e[u]={name:s[u].name,data:[]};this.morphTargets.position=e}var l,h=t.morphNormals,d=h.length;if(d>0){l=[];for(u=0;u<d;u++)l[u]={name:h[u].name,data:[]};this.morphTargets.normal=l}var p=t.skinIndices,f=t.skinWeights,m=p.length===r.length,v=f.length===r.length;r.length>0&&0===n.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(u=0;u<n.length;u++){var g=n[u];this.vertices.push(r[g.a],r[g.b],r[g.c]);var y=g.vertexNormals;if(3===y.length)this.normals.push(y[0],y[1],y[2]);else{var x=g.normal;this.normals.push(x,x,x)}var b,_=g.vertexColors;if(3===_.length)this.colors.push(_[0],_[1],_[2]);else{var w=g.color;this.colors.push(w,w,w)}if(!0===a)void 0!==(b=i[0][u])?this.uvs.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",u),this.uvs.push(new Gn,new Gn,new Gn));if(!0===o)void 0!==(b=i[1][u])?this.uvs2.push(b[0],b[1],b[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",u),this.uvs2.push(new Gn,new Gn,new Gn));for(var M=0;M<c;M++){var S=s[M].vertices;e[M].data.push(S[g.a],S[g.b],S[g.c])}for(M=0;M<d;M++){var E=h[M].vertexNormals[u];l[M].data.push(E.a,E.b,E.c)}m&&this.skinIndices.push(p[g.a],p[g.b],p[g.c]),v&&this.skinWeights.push(f[g.a],f[g.b],f[g.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this}});var Ni=1,Bi=new ar,zi=new Mr,Fi=new $n,Ui=new Fr,Gi=new Fr,Hi=new $n;function ki(){Object.defineProperty(this,"id",{value:Ni+=2}),this.uuid=Un.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}ki.prototype=Object.assign(Object.create(Nn.prototype),{constructor:ki,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(t){Array.isArray(t)?this.index=new(Ii(t)>65535?Pi:Li)(t,1):this.index=t},getAttribute:function(t){return this.attributes[t]},setAttribute:function(t,e){return this.attributes[t]=e,this},deleteAttribute:function(t){return delete this.attributes[t],this},addGroup:function(t,e,n){this.groups.push({start:t,count:e,materialIndex:void 0!==n?n:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(t,e){this.drawRange.start=t,this.drawRange.count=e},applyMatrix4:function(t){var e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);var n=this.attributes.normal;if(void 0!==n){var r=(new Hn).getNormalMatrix(t);n.applyNormalMatrix(r),n.needsUpdate=!0}var i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this},rotateX:function(t){return Bi.makeRotationX(t),this.applyMatrix4(Bi),this},rotateY:function(t){return Bi.makeRotationY(t),this.applyMatrix4(Bi),this},rotateZ:function(t){return Bi.makeRotationZ(t),this.applyMatrix4(Bi),this},translate:function(t,e,n){return Bi.makeTranslation(t,e,n),this.applyMatrix4(Bi),this},scale:function(t,e,n){return Bi.makeScale(t,e,n),this.applyMatrix4(Bi),this},lookAt:function(t){return zi.lookAt(t),zi.updateMatrix(),this.applyMatrix4(zi.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Fi).negate(),this.translate(Fi.x,Fi.y,Fi.z),this},setFromObject:function(t){var e=t.geometry;if(t.isPoints||t.isLine){var n=new Ci(3*e.vertices.length,3),r=new Ci(3*e.colors.length,3);if(this.setAttribute("position",n.copyVector3sArray(e.vertices)),this.setAttribute("color",r.copyColorsArray(e.colors)),e.lineDistances&&e.lineDistances.length===e.vertices.length){var i=new Ci(e.lineDistances.length,1);this.setAttribute("lineDistance",i.copyArray(e.lineDistances))}null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone())}else t.isMesh&&e&&e.isGeometry&&this.fromGeometry(e);return this},setFromPoints:function(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new Ci(e,3)),this},updateFromObject:function(t){var e,n=t.geometry;if(t.isMesh){var r=n.__directGeometry;if(!0===n.elementsNeedUpdate&&(r=void 0,n.elementsNeedUpdate=!1),void 0===r)return this.fromGeometry(n);r.verticesNeedUpdate=n.verticesNeedUpdate,r.normalsNeedUpdate=n.normalsNeedUpdate,r.colorsNeedUpdate=n.colorsNeedUpdate,r.uvsNeedUpdate=n.uvsNeedUpdate,r.groupsNeedUpdate=n.groupsNeedUpdate,n.verticesNeedUpdate=!1,n.normalsNeedUpdate=!1,n.colorsNeedUpdate=!1,n.uvsNeedUpdate=!1,n.groupsNeedUpdate=!1,n=r}return!0===n.verticesNeedUpdate&&(void 0!==(e=this.attributes.position)&&(e.copyVector3sArray(n.vertices),e.needsUpdate=!0),n.verticesNeedUpdate=!1),!0===n.normalsNeedUpdate&&(void 0!==(e=this.attributes.normal)&&(e.copyVector3sArray(n.normals),e.needsUpdate=!0),n.normalsNeedUpdate=!1),!0===n.colorsNeedUpdate&&(void 0!==(e=this.attributes.color)&&(e.copyColorsArray(n.colors),e.needsUpdate=!0),n.colorsNeedUpdate=!1),n.uvsNeedUpdate&&(void 0!==(e=this.attributes.uv)&&(e.copyVector2sArray(n.uvs),e.needsUpdate=!0),n.uvsNeedUpdate=!1),n.lineDistancesNeedUpdate&&(void 0!==(e=this.attributes.lineDistance)&&(e.copyArray(n.lineDistances),e.needsUpdate=!0),n.lineDistancesNeedUpdate=!1),n.groupsNeedUpdate&&(n.computeGroups(t.geometry),this.groups=n.groups,n.groupsNeedUpdate=!1),this},fromGeometry:function(t){return t.__directGeometry=(new Di).fromGeometry(t),this.fromDirectGeometry(t.__directGeometry)},fromDirectGeometry:function(t){var e=new Float32Array(3*t.vertices.length);if(this.setAttribute("position",new Mi(e,3).copyVector3sArray(t.vertices)),t.normals.length>0){var n=new Float32Array(3*t.normals.length);this.setAttribute("normal",new Mi(n,3).copyVector3sArray(t.normals))}if(t.colors.length>0){var r=new Float32Array(3*t.colors.length);this.setAttribute("color",new Mi(r,3).copyColorsArray(t.colors))}if(t.uvs.length>0){var i=new Float32Array(2*t.uvs.length);this.setAttribute("uv",new Mi(i,2).copyVector2sArray(t.uvs))}if(t.uvs2.length>0){var a=new Float32Array(2*t.uvs2.length);this.setAttribute("uv2",new Mi(a,2).copyVector2sArray(t.uvs2))}for(var o in this.groups=t.groups,t.morphTargets){for(var s=[],c=t.morphTargets[o],u=0,l=c.length;u<l;u++){var h=c[u],d=new Ci(3*h.data.length,3);d.name=h.name,s.push(d.copyVector3sArray(h.data))}this.morphAttributes[o]=s}if(t.skinIndices.length>0){var p=new Ci(4*t.skinIndices.length,4);this.setAttribute("skinIndex",p.copyVector4sArray(t.skinIndices))}if(t.skinWeights.length>0){var f=new Ci(4*t.skinWeights.length,4);this.setAttribute("skinWeight",f.copyVector4sArray(t.skinWeights))}return null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),this},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Fr);var t=this.attributes.position,e=this.morphAttributes.position;if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(var n=0,r=e.length;n<r;n++){var i=e[n];Ui.setFromBufferAttribute(i),this.morphTargetsRelative?(Hi.addVectors(this.boundingBox.min,Ui.min),this.boundingBox.expandByPoint(Hi),Hi.addVectors(this.boundingBox.max,Ui.max),this.boundingBox.expandByPoint(Hi)):(this.boundingBox.expandByPoint(Ui.min),this.boundingBox.expandByPoint(Ui.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Hr);var t=this.attributes.position,e=this.morphAttributes.position;if(t){var n=this.boundingSphere.center;if(Ui.setFromBufferAttribute(t),e)for(var r=0,i=e.length;r<i;r++){var a=e[r];Gi.setFromBufferAttribute(a),this.morphTargetsRelative?(Hi.addVectors(Ui.min,Gi.min),Ui.expandByPoint(Hi),Hi.addVectors(Ui.max,Gi.max),Ui.expandByPoint(Hi)):(Ui.expandByPoint(Gi.min),Ui.expandByPoint(Gi.max))}Ui.getCenter(n);var o=0;for(r=0,i=t.count;r<i;r++)Hi.fromBufferAttribute(t,r),o=Math.max(o,n.distanceToSquared(Hi));if(e)for(r=0,i=e.length;r<i;r++){a=e[r];for(var s=this.morphTargetsRelative,c=0,u=a.count;c<u;c++)Hi.fromBufferAttribute(a,c),s&&(Fi.fromBufferAttribute(t,c),Hi.add(Fi)),o=Math.max(o,n.distanceToSquared(Hi))}this.boundingSphere.radius=Math.sqrt(o),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){var t=this.index,e=this.attributes;if(e.position){var n=e.position.array;if(void 0===e.normal)this.setAttribute("normal",new Mi(new Float32Array(n.length),3));else for(var r=e.normal.array,i=0,a=r.length;i<a;i++)r[i]=0;var o,s,c,u=e.normal.array,l=new $n,h=new $n,d=new $n,p=new $n,f=new $n;if(t){var m=t.array;for(i=0,a=t.count;i<a;i+=3)o=3*m[i+0],s=3*m[i+1],c=3*m[i+2],l.fromArray(n,o),h.fromArray(n,s),d.fromArray(n,c),p.subVectors(d,h),f.subVectors(l,h),p.cross(f),u[o]+=p.x,u[o+1]+=p.y,u[o+2]+=p.z,u[s]+=p.x,u[s+1]+=p.y,u[s+2]+=p.z,u[c]+=p.x,u[c+1]+=p.y,u[c+2]+=p.z}else for(i=0,a=n.length;i<a;i+=9)l.fromArray(n,i),h.fromArray(n,i+3),d.fromArray(n,i+6),p.subVectors(d,h),f.subVectors(l,h),p.cross(f),u[i]=p.x,u[i+1]=p.y,u[i+2]=p.z,u[i+3]=p.x,u[i+4]=p.y,u[i+5]=p.z,u[i+6]=p.x,u[i+7]=p.y,u[i+8]=p.z;this.normalizeNormals(),e.normal.needsUpdate=!0}},merge:function(t,e){if(t&&t.isBufferGeometry){void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));var n=this.attributes;for(var r in n)if(void 0!==t.attributes[r])for(var i=n[r].array,a=t.attributes[r],o=a.array,s=a.itemSize*e,c=Math.min(o.length,i.length-s),u=0,l=s;u<c;u++,l++)i[l]=o[u];return this}console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t)},normalizeNormals:function(){for(var t=this.attributes.normal,e=0,n=t.count;e<n;e++)Hi.x=t.getX(e),Hi.y=t.getY(e),Hi.z=t.getZ(e),Hi.normalize(),t.setXYZ(e,Hi.x,Hi.y,Hi.z)},toNonIndexed:function(){function t(t,e){for(var n=t.array,r=t.itemSize,i=new n.constructor(e.length*r),a=0,o=0,s=0,c=e.length;s<c;s++){a=e[s]*r;for(var u=0;u<r;u++)i[o++]=n[a++]}return new Mi(i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;var e=new ki,n=this.index.array,r=this.attributes;for(var i in r){var a=t(r[i],n);e.setAttribute(i,a)}var o=this.morphAttributes;for(i in o){for(var s=[],c=o[i],u=0,l=c.length;u<l;u++){a=t(c[u],n);s.push(a)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;for(var h=this.groups,d=(u=0,h.length);u<d;u++){var p=h[u];e.addGroup(p.start,p.count,p.materialIndex)}return e},toJSON:function(){var t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};var r=this.index;null!==r&&(t.data.index={type:r.array.constructor.name,array:Array.prototype.slice.call(r.array)});var i=this.attributes;for(var n in i){var a=(d=i[n]).toJSON();""!==d.name&&(a.name=d.name),t.data.attributes[n]=a}var o={},s=!1;for(var n in this.morphAttributes){for(var c=this.morphAttributes[n],u=[],l=0,h=c.length;l<h;l++){var d;a=(d=c[l]).toJSON();""!==d.name&&(a.name=d.name),u.push(a)}u.length>0&&(o[n]=u,s=!0)}s&&(t.data.morphAttributes=o,t.data.morphTargetsRelative=this.morphTargetsRelative);var p=this.groups;p.length>0&&(t.data.groups=JSON.parse(JSON.stringify(p)));var f=this.boundingSphere;return null!==f&&(t.data.boundingSphere={center:f.center.toArray(),radius:f.radius}),t},clone:function(){return(new ki).copy(this)},copy:function(t){var e,n,r;this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var i=t.index;null!==i&&this.setIndex(i.clone());var a=t.attributes;for(e in a){var o=a[e];this.setAttribute(e,o.clone())}var s=t.morphAttributes;for(e in s){var c=[],u=s[e];for(n=0,r=u.length;n<r;n++)c.push(u[n].clone());this.morphAttributes[e]=c}this.morphTargetsRelative=t.morphTargetsRelative;var l=t.groups;for(n=0,r=l.length;n<r;n++){var h=l[n];this.addGroup(h.start,h.count,h.materialIndex)}var d=t.boundingBox;null!==d&&(this.boundingBox=d.clone());var p=t.boundingSphere;return null!==p&&(this.boundingSphere=p.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});var ji=new ar,Vi=new Zr,Wi=new Hr,qi=new $n,Xi=new $n,Yi=new $n,Zi=new $n,Ji=new $n,$i=new $n,Qi=new $n,Ki=new $n,ta=new $n,ea=new Gn,na=new Gn,ra=new Gn,ia=new $n,aa=new $n;function oa(t,e){Mr.call(this),this.type="Mesh",this.geometry=void 0!==t?t:new ki,this.material=void 0!==e?e:new _i,this.updateMorphTargets()}function sa(t,e,n,r,i,a,o,s){if(null===(e.side===g?r.intersectTriangle(o,a,i,!0,s):r.intersectTriangle(i,a,o,e.side!==y,s)))return null;aa.copy(s),aa.applyMatrix4(t.matrixWorld);var c=n.ray.origin.distanceTo(aa);return c<n.near||c>n.far?null:{distance:c,point:aa.clone(),object:t}}function ca(t,e,n,r,i,a,o,s,c,u,l,h){qi.fromBufferAttribute(i,u),Xi.fromBufferAttribute(i,l),Yi.fromBufferAttribute(i,h);var d=t.morphTargetInfluences;if(e.morphTargets&&a&&d){Qi.set(0,0,0),Ki.set(0,0,0),ta.set(0,0,0);for(var p=0,f=a.length;p<f;p++){var m=d[p],v=a[p];0!==m&&(Zi.fromBufferAttribute(v,u),Ji.fromBufferAttribute(v,l),$i.fromBufferAttribute(v,h),o?(Qi.addScaledVector(Zi,m),Ki.addScaledVector(Ji,m),ta.addScaledVector($i,m)):(Qi.addScaledVector(Zi.sub(qi),m),Ki.addScaledVector(Ji.sub(Xi),m),ta.addScaledVector($i.sub(Yi),m)))}qi.add(Qi),Xi.add(Ki),Yi.add(ta)}var g=sa(t,e,n,r,qi,Xi,Yi,ia);if(g){s&&(ea.fromBufferAttribute(s,u),na.fromBufferAttribute(s,l),ra.fromBufferAttribute(s,h),g.uv=li.getUV(ia,qi,Xi,Yi,ea,na,ra,new Gn)),c&&(ea.fromBufferAttribute(c,u),na.fromBufferAttribute(c,l),ra.fromBufferAttribute(c,h),g.uv2=li.getUV(ia,qi,Xi,Yi,ea,na,ra,new Gn));var y=new yi(u,l,h);li.getNormal(qi,Xi,Yi,y.normal),g.face=y}return g}oa.prototype=Object.assign(Object.create(Mr.prototype),{constructor:oa,isMesh:!0,copy:function(t){return Mr.prototype.copy.call(this,t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this},updateMorphTargets:function(){var t,e,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)n=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=r.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(t,e){var n,r=this.geometry,i=this.material,a=this.matrixWorld;if(void 0!==i&&(null===r.boundingSphere&&r.computeBoundingSphere(),Wi.copy(r.boundingSphere),Wi.applyMatrix4(a),!1!==t.ray.intersectsSphere(Wi)&&(ji.getInverse(a),Vi.copy(t.ray).applyMatrix4(ji),null===r.boundingBox||!1!==Vi.intersectsBox(r.boundingBox))))if(r.isBufferGeometry){var o,s,c,u,l,h,d,p,f,m=r.index,v=r.attributes.position,g=r.morphAttributes.position,y=r.morphTargetsRelative,x=r.attributes.uv,b=r.attributes.uv2,_=r.groups,w=r.drawRange;if(null!==m)if(Array.isArray(i))for(u=0,h=_.length;u<h;u++)for(f=i[(p=_[u]).materialIndex],l=Math.max(p.start,w.start),d=Math.min(p.start+p.count,w.start+w.count);l<d;l+=3)o=m.getX(l),s=m.getX(l+1),c=m.getX(l+2),(n=ca(this,f,t,Vi,v,g,y,x,b,o,s,c))&&(n.faceIndex=Math.floor(l/3),n.face.materialIndex=p.materialIndex,e.push(n));else for(u=Math.max(0,w.start),h=Math.min(m.count,w.start+w.count);u<h;u+=3)o=m.getX(u),s=m.getX(u+1),c=m.getX(u+2),(n=ca(this,i,t,Vi,v,g,y,x,b,o,s,c))&&(n.faceIndex=Math.floor(u/3),e.push(n));else if(void 0!==v)if(Array.isArray(i))for(u=0,h=_.length;u<h;u++)for(f=i[(p=_[u]).materialIndex],l=Math.max(p.start,w.start),d=Math.min(p.start+p.count,w.start+w.count);l<d;l+=3)(n=ca(this,f,t,Vi,v,g,y,x,b,o=l,s=l+1,c=l+2))&&(n.faceIndex=Math.floor(l/3),n.face.materialIndex=p.materialIndex,e.push(n));else for(u=Math.max(0,w.start),h=Math.min(v.count,w.start+w.count);u<h;u+=3)(n=ca(this,i,t,Vi,v,g,y,x,b,o=u,s=u+1,c=u+2))&&(n.faceIndex=Math.floor(u/3),e.push(n))}else if(r.isGeometry){var M,S,E,T,A=Array.isArray(i),L=r.vertices,R=r.faces,P=r.faceVertexUvs[0];P.length>0&&(T=P);for(var C=0,O=R.length;C<O;C++){var D=R[C],I=A?i[D.materialIndex]:i;if(void 0!==I&&(M=L[D.a],S=L[D.b],E=L[D.c],n=sa(this,I,t,Vi,M,S,E,ia))){if(T&&T[C]){var N=T[C];ea.copy(N[0]),na.copy(N[1]),ra.copy(N[2]),n.uv=li.getUV(ia,M,S,E,ea,na,ra,new Gn)}n.face=D,n.faceIndex=C,e.push(n)}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var ua=0,la=new ar,ha=new Mr,da=new $n;function pa(){Object.defineProperty(this,"id",{value:ua+=2}),this.uuid=Un.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}pa.prototype=Object.assign(Object.create(Nn.prototype),{constructor:pa,isGeometry:!0,applyMatrix4:function(t){for(var e=(new Hn).getNormalMatrix(t),n=0,r=this.vertices.length;n<r;n++){this.vertices[n].applyMatrix4(t)}for(n=0,r=this.faces.length;n<r;n++){var i=this.faces[n];i.normal.applyMatrix3(e).normalize();for(var a=0,o=i.vertexNormals.length;a<o;a++)i.vertexNormals[a].applyMatrix3(e).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(t){return la.makeRotationX(t),this.applyMatrix4(la),this},rotateY:function(t){return la.makeRotationY(t),this.applyMatrix4(la),this},rotateZ:function(t){return la.makeRotationZ(t),this.applyMatrix4(la),this},translate:function(t,e,n){return la.makeTranslation(t,e,n),this.applyMatrix4(la),this},scale:function(t,e,n){return la.makeScale(t,e,n),this.applyMatrix4(la),this},lookAt:function(t){return ha.lookAt(t),ha.updateMatrix(),this.applyMatrix4(ha.matrix),this},fromBufferGeometry:function(t){var e=this,n=null!==t.index?t.index.array:void 0,r=t.attributes;if(void 0===r.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var i=r.position.array,a=void 0!==r.normal?r.normal.array:void 0,o=void 0!==r.color?r.color.array:void 0,s=void 0!==r.uv?r.uv.array:void 0,c=void 0!==r.uv2?r.uv2.array:void 0;void 0!==c&&(this.faceVertexUvs[1]=[]);for(var u=0;u<i.length;u+=3)e.vertices.push((new $n).fromArray(i,u)),void 0!==o&&e.colors.push((new fi).fromArray(o,u));function l(t,n,r,i){var u=void 0===o?[]:[e.colors[t].clone(),e.colors[n].clone(),e.colors[r].clone()],l=new yi(t,n,r,void 0===a?[]:[(new $n).fromArray(a,3*t),(new $n).fromArray(a,3*n),(new $n).fromArray(a,3*r)],u,i);e.faces.push(l),void 0!==s&&e.faceVertexUvs[0].push([(new Gn).fromArray(s,2*t),(new Gn).fromArray(s,2*n),(new Gn).fromArray(s,2*r)]),void 0!==c&&e.faceVertexUvs[1].push([(new Gn).fromArray(c,2*t),(new Gn).fromArray(c,2*n),(new Gn).fromArray(c,2*r)])}var h=t.groups;if(h.length>0)for(u=0;u<h.length;u++)for(var d=h[u],p=d.start,f=p,m=p+d.count;f<m;f+=3)void 0!==n?l(n[f],n[f+1],n[f+2],d.materialIndex):l(f,f+1,f+2,d.materialIndex);else if(void 0!==n)for(u=0;u<n.length;u+=3)l(n[u],n[u+1],n[u+2]);else for(u=0;u<i.length/3;u+=3)l(u,u+1,u+2);return this.computeFaceNormals(),null!==t.boundingBox&&(this.boundingBox=t.boundingBox.clone()),null!==t.boundingSphere&&(this.boundingSphere=t.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(da).negate(),this.translate(da.x,da.y,da.z),this},normalize:function(){this.computeBoundingSphere();var t=this.boundingSphere.center,e=this.boundingSphere.radius,n=0===e?1:1/e,r=new ar;return r.set(n,0,0,-n*t.x,0,n,0,-n*t.y,0,0,n,-n*t.z,0,0,0,1),this.applyMatrix4(r),this},computeFaceNormals:function(){for(var t=new $n,e=new $n,n=0,r=this.faces.length;n<r;n++){var i=this.faces[n],a=this.vertices[i.a],o=this.vertices[i.b],s=this.vertices[i.c];t.subVectors(s,o),e.subVectors(a,o),t.cross(e),t.normalize(),i.normal.copy(t)}},computeVertexNormals:function(t){var e,n,r,i,a,o;for(void 0===t&&(t=!0),o=new Array(this.vertices.length),e=0,n=this.vertices.length;e<n;e++)o[e]=new $n;if(t){var s,c,u,l=new $n,h=new $n;for(r=0,i=this.faces.length;r<i;r++)a=this.faces[r],s=this.vertices[a.a],c=this.vertices[a.b],u=this.vertices[a.c],l.subVectors(u,c),h.subVectors(s,c),l.cross(h),o[a.a].add(l),o[a.b].add(l),o[a.c].add(l)}else for(this.computeFaceNormals(),r=0,i=this.faces.length;r<i;r++)o[(a=this.faces[r]).a].add(a.normal),o[a.b].add(a.normal),o[a.c].add(a.normal);for(e=0,n=this.vertices.length;e<n;e++)o[e].normalize();for(r=0,i=this.faces.length;r<i;r++){var d=(a=this.faces[r]).vertexNormals;3===d.length?(d[0].copy(o[a.a]),d[1].copy(o[a.b]),d[2].copy(o[a.c])):(d[0]=o[a.a].clone(),d[1]=o[a.b].clone(),d[2]=o[a.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){var t,e,n;for(this.computeFaceNormals(),t=0,e=this.faces.length;t<e;t++){var r=(n=this.faces[t]).vertexNormals;3===r.length?(r[0].copy(n.normal),r[1].copy(n.normal),r[2].copy(n.normal)):(r[0]=n.normal.clone(),r[1]=n.normal.clone(),r[2]=n.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){var t,e,n,r,i;for(n=0,r=this.faces.length;n<r;n++)for((i=this.faces[n]).__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]),t=0,e=i.vertexNormals.length;t<e;t++)i.__originalVertexNormals[t]?i.__originalVertexNormals[t].copy(i.vertexNormals[t]):i.__originalVertexNormals[t]=i.vertexNormals[t].clone();var a=new pa;for(a.faces=this.faces,t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];var o=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(n=0,r=this.faces.length;n<r;n++)c=new $n,u={a:new $n,b:new $n,c:new $n},o.push(c),s.push(u)}var c,u,l=this.morphNormals[t];for(a.vertices=this.morphTargets[t].vertices,a.computeFaceNormals(),a.computeVertexNormals(),n=0,r=this.faces.length;n<r;n++)i=this.faces[n],c=l.faceNormals[n],u=l.vertexNormals[n],c.copy(i.normal),u.a.copy(i.vertexNormals[0]),u.b.copy(i.vertexNormals[1]),u.c.copy(i.vertexNormals[2])}for(n=0,r=this.faces.length;n<r;n++)(i=this.faces[n]).normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new Fr),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new Hr),this.boundingSphere.setFromPoints(this.vertices)},merge:function(t,e,n){if(t&&t.isGeometry){var r,i=this.vertices.length,a=this.vertices,o=t.vertices,s=this.faces,c=t.faces,u=this.colors,l=t.colors;void 0===n&&(n=0),void 0!==e&&(r=(new Hn).getNormalMatrix(e));for(var h=0,d=o.length;h<d;h++){var p=o[h].clone();void 0!==e&&p.applyMatrix4(e),a.push(p)}for(h=0,d=l.length;h<d;h++)u.push(l[h].clone());for(h=0,d=c.length;h<d;h++){var f,m,v,g=c[h],y=g.vertexNormals,x=g.vertexColors;(f=new yi(g.a+i,g.b+i,g.c+i)).normal.copy(g.normal),void 0!==r&&f.normal.applyMatrix3(r).normalize();for(var b=0,_=y.length;b<_;b++)m=y[b].clone(),void 0!==r&&m.applyMatrix3(r).normalize(),f.vertexNormals.push(m);f.color.copy(g.color);for(b=0,_=x.length;b<_;b++)v=x[b],f.vertexColors.push(v.clone());f.materialIndex=g.materialIndex+n,s.push(f)}for(h=0,d=t.faceVertexUvs.length;h<d;h++){var w=t.faceVertexUvs[h];void 0===this.faceVertexUvs[h]&&(this.faceVertexUvs[h]=[]);for(b=0,_=w.length;b<_;b++){for(var M=w[b],S=[],E=0,T=M.length;E<T;E++)S.push(M[E].clone());this.faceVertexUvs[h].push(S)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",t)},mergeMesh:function(t){t&&t.isMesh?(t.matrixAutoUpdate&&t.updateMatrix(),this.merge(t.geometry,t.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",t)},mergeVertices:function(){var t,e,n,r,i,a,o,s,c={},u=[],l=[],h=Math.pow(10,4);for(n=0,r=this.vertices.length;n<r;n++)t=this.vertices[n],void 0===c[e=Math.round(t.x*h)+"_"+Math.round(t.y*h)+"_"+Math.round(t.z*h)]?(c[e]=n,u.push(this.vertices[n]),l[n]=u.length-1):l[n]=l[c[e]];var d=[];for(n=0,r=this.faces.length;n<r;n++){(i=this.faces[n]).a=l[i.a],i.b=l[i.b],i.c=l[i.c],a=[i.a,i.b,i.c];for(var p=0;p<3;p++)if(a[p]===a[(p+1)%3]){d.push(n);break}}for(n=d.length-1;n>=0;n--){var f=d[n];for(this.faces.splice(f,1),o=0,s=this.faceVertexUvs.length;o<s;o++)this.faceVertexUvs[o].splice(f,1)}var m=this.vertices.length-u.length;return this.vertices=u,m},setFromPoints:function(t){this.vertices=[];for(var e=0,n=t.length;e<n;e++){var r=t[e];this.vertices.push(new $n(r.x,r.y,r.z||0))}return this},sortFacesByMaterialIndex:function(){for(var t=this.faces,e=t.length,n=0;n<e;n++)t[n]._id=n;t.sort((function(t,e){return t.materialIndex-e.materialIndex}));var r,i,a=this.faceVertexUvs[0],o=this.faceVertexUvs[1];a&&a.length===e&&(r=[]),o&&o.length===e&&(i=[]);for(n=0;n<e;n++){var s=t[n]._id;r&&r.push(a[s]),i&&i.push(o[s])}r&&(this.faceVertexUvs[0]=r),i&&(this.faceVertexUvs[1]=i)},toJSON:function(){var t={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),void 0!==this.parameters){var e=this.parameters;for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}for(var r=[],i=0;i<this.vertices.length;i++){var a=this.vertices[i];r.push(a.x,a.y,a.z)}var o=[],s=[],c={},u=[],l={},h=[],d={};for(i=0;i<this.faces.length;i++){var p=this.faces[i],f=void 0!==this.faceVertexUvs[0][i],m=p.normal.length()>0,v=p.vertexNormals.length>0,g=1!==p.color.r||1!==p.color.g||1!==p.color.b,y=p.vertexColors.length>0,x=0;if(x=M(x,0,0),x=M(x,1,!0),x=M(x,2,!1),x=M(x,3,f),x=M(x,4,m),x=M(x,5,v),x=M(x,6,g),x=M(x,7,y),o.push(x),o.push(p.a,p.b,p.c),o.push(p.materialIndex),f){var b=this.faceVertexUvs[0][i];o.push(T(b[0]),T(b[1]),T(b[2]))}if(m&&o.push(S(p.normal)),v){var _=p.vertexNormals;o.push(S(_[0]),S(_[1]),S(_[2]))}if(g&&o.push(E(p.color)),y){var w=p.vertexColors;o.push(E(w[0]),E(w[1]),E(w[2]))}}function M(t,e,n){return n?t|1<<e:t&~(1<<e)}function S(t){var e=t.x.toString()+t.y.toString()+t.z.toString();return void 0!==c[e]||(c[e]=s.length/3,s.push(t.x,t.y,t.z)),c[e]}function E(t){var e=t.r.toString()+t.g.toString()+t.b.toString();return void 0!==l[e]||(l[e]=u.length,u.push(t.getHex())),l[e]}function T(t){var e=t.x.toString()+t.y.toString();return void 0!==d[e]||(d[e]=h.length/2,h.push(t.x,t.y)),d[e]}return t.data={},t.data.vertices=r,t.data.normals=s,u.length>0&&(t.data.colors=u),h.length>0&&(t.data.uvs=[h]),t.data.faces=o,t},clone:function(){return(new pa).copy(this)},copy:function(t){var e,n,r,i,a,o;this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=t.name;var s=t.vertices;for(e=0,n=s.length;e<n;e++)this.vertices.push(s[e].clone());var c=t.colors;for(e=0,n=c.length;e<n;e++)this.colors.push(c[e].clone());var u=t.faces;for(e=0,n=u.length;e<n;e++)this.faces.push(u[e].clone());for(e=0,n=t.faceVertexUvs.length;e<n;e++){var l=t.faceVertexUvs[e];for(void 0===this.faceVertexUvs[e]&&(this.faceVertexUvs[e]=[]),r=0,i=l.length;r<i;r++){var h=l[r],d=[];for(a=0,o=h.length;a<o;a++){var p=h[a];d.push(p.clone())}this.faceVertexUvs[e].push(d)}}var f=t.morphTargets;for(e=0,n=f.length;e<n;e++){var m={};if(m.name=f[e].name,void 0!==f[e].vertices)for(m.vertices=[],r=0,i=f[e].vertices.length;r<i;r++)m.vertices.push(f[e].vertices[r].clone());if(void 0!==f[e].normals)for(m.normals=[],r=0,i=f[e].normals.length;r<i;r++)m.normals.push(f[e].normals[r].clone());this.morphTargets.push(m)}var v=t.morphNormals;for(e=0,n=v.length;e<n;e++){var g={};if(void 0!==v[e].vertexNormals)for(g.vertexNormals=[],r=0,i=v[e].vertexNormals.length;r<i;r++){var y=v[e].vertexNormals[r],x={};x.a=y.a.clone(),x.b=y.b.clone(),x.c=y.c.clone(),g.vertexNormals.push(x)}if(void 0!==v[e].faceNormals)for(g.faceNormals=[],r=0,i=v[e].faceNormals.length;r<i;r++)g.faceNormals.push(v[e].faceNormals[r].clone());this.morphNormals.push(g)}var b=t.skinWeights;for(e=0,n=b.length;e<n;e++)this.skinWeights.push(b[e].clone());var _=t.skinIndices;for(e=0,n=_.length;e<n;e++)this.skinIndices.push(_[e].clone());var w=t.lineDistances;for(e=0,n=w.length;e<n;e++)this.lineDistances.push(w[e]);var M=t.boundingBox;null!==M&&(this.boundingBox=M.clone());var S=t.boundingSphere;return null!==S&&(this.boundingSphere=S.clone()),this.elementsNeedUpdate=t.elementsNeedUpdate,this.verticesNeedUpdate=t.verticesNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.lineDistancesNeedUpdate=t.lineDistancesNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});class fa extends pa{constructor(t,e,n,r,i,a){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:a},this.fromBufferGeometry(new ma(t,e,n,r,i,a)),this.mergeVertices()}}class ma extends ki{constructor(t,e,n,r,i,a){super(),this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:i,depthSegments:a};var o=this;t=t||1,e=e||1,n=n||1,r=Math.floor(r)||1,i=Math.floor(i)||1,a=Math.floor(a)||1;var s=[],c=[],u=[],l=[],h=0,d=0;function p(t,e,n,r,i,a,p,f,m,v,g){var y,x,b=a/m,_=p/v,w=a/2,M=p/2,S=f/2,E=m+1,T=v+1,A=0,L=0,R=new $n;for(x=0;x<T;x++){var P=x*_-M;for(y=0;y<E;y++){var C=y*b-w;R[t]=C*r,R[e]=P*i,R[n]=S,c.push(R.x,R.y,R.z),R[t]=0,R[e]=0,R[n]=f>0?1:-1,u.push(R.x,R.y,R.z),l.push(y/m),l.push(1-x/v),A+=1}}for(x=0;x<v;x++)for(y=0;y<m;y++){var O=h+y+E*x,D=h+y+E*(x+1),I=h+(y+1)+E*(x+1),N=h+(y+1)+E*x;s.push(O,D,N),s.push(D,I,N),L+=6}o.addGroup(d,L,g),d+=L,h+=A}p("z","y","x",-1,-1,n,e,t,a,i,0),p("z","y","x",1,-1,n,e,-t,a,i,1),p("x","z","y",1,1,t,n,e,r,a,2),p("x","z","y",1,-1,t,n,-e,r,a,3),p("x","y","z",1,-1,t,e,n,r,i,4),p("x","y","z",-1,-1,t,e,-n,r,i,5),this.setIndex(s),this.setAttribute("position",new Ci(c,3)),this.setAttribute("normal",new Ci(u,3)),this.setAttribute("uv",new Ci(l,2))}}function va(t){var e={};for(var n in t)for(var r in e[n]={},t[n]){var i=t[n][r];i&&(i.isColor||i.isMatrix3||i.isMatrix4||i.isVector2||i.isVector3||i.isVector4||i.isTexture)?e[n][r]=i.clone():Array.isArray(i)?e[n][r]=i.slice():e[n][r]=i}return e}function ga(t){for(var e={},n=0;n<t.length;n++){var r=va(t[n]);for(var i in r)e[i]=r[i]}return e}var ya={clone:va,merge:ga};function xa(t){bi.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}function ba(){Mr.call(this),this.type="Camera",this.matrixWorldInverse=new ar,this.projectionMatrix=new ar,this.projectionMatrixInverse=new ar}function _a(t,e,n,r){ba.call(this),this.type="PerspectiveCamera",this.fov=void 0!==t?t:50,this.zoom=1,this.near=void 0!==n?n:.1,this.far=void 0!==r?r:2e3,this.focus=10,this.aspect=void 0!==e?e:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}xa.prototype=Object.create(bi.prototype),xa.prototype.constructor=xa,xa.prototype.isShaderMaterial=!0,xa.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=va(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.extensions=t.extensions,this},xa.prototype.toJSON=function(t){var e=bi.prototype.toJSON.call(this,t);for(var n in e.uniforms={},this.uniforms){var r=this.uniforms[n].value;r&&r.isTexture?e.uniforms[n]={type:"t",value:r.toJSON(t).uuid}:r&&r.isColor?e.uniforms[n]={type:"c",value:r.getHex()}:r&&r.isVector2?e.uniforms[n]={type:"v2",value:r.toArray()}:r&&r.isVector3?e.uniforms[n]={type:"v3",value:r.toArray()}:r&&r.isVector4?e.uniforms[n]={type:"v4",value:r.toArray()}:r&&r.isMatrix3?e.uniforms[n]={type:"m3",value:r.toArray()}:r&&r.isMatrix4?e.uniforms[n]={type:"m4",value:r.toArray()}:e.uniforms[n]={value:r}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;var i={};for(var a in this.extensions)!0===this.extensions[a]&&(i[a]=!0);return Object.keys(i).length>0&&(e.extensions=i),e},ba.prototype=Object.assign(Object.create(Mr.prototype),{constructor:ba,isCamera:!0,copy:function(t,e){return Mr.prototype.copy.call(this,t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this},getWorldDirection:function(t){void 0===t&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),t=new $n),this.updateMatrixWorld(!0);var e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()},updateMatrixWorld:function(t){Mr.prototype.updateMatrixWorld.call(this,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(t,e){Mr.prototype.updateWorldMatrix.call(this,t,e),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return(new this.constructor).copy(this)}}),_a.prototype=Object.assign(Object.create(ba.prototype),{constructor:_a,isPerspectiveCamera:!0,copy:function(t,e){return ba.prototype.copy.call(this,t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this},setFocalLength:function(t){var e=.5*this.getFilmHeight()/t;this.fov=2*Un.RAD2DEG*Math.atan(e),this.updateProjectionMatrix()},getFocalLength:function(){var t=Math.tan(.5*Un.DEG2RAD*this.fov);return.5*this.getFilmHeight()/t},getEffectiveFOV:function(){return 2*Un.RAD2DEG*Math.atan(Math.tan(.5*Un.DEG2RAD*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(t,e,n,r,i,a){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=this.near,e=t*Math.tan(.5*Un.DEG2RAD*this.fov)/this.zoom,n=2*e,r=this.aspect*n,i=-.5*r,a=this.view;if(null!==this.view&&this.view.enabled){var o=a.fullWidth,s=a.fullHeight;i+=a.offsetX*r/o,e-=a.offsetY*n/s,r*=a.width/o,n*=a.height/s}var c=this.filmOffset;0!==c&&(i+=t*c/this.getFilmWidth()),this.projectionMatrix.makePerspective(i,i+r,e,e-n,t,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Mr.prototype.toJSON.call(this,t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}});function wa(t,e,n,r){Mr.call(this),this.type="CubeCamera";var i=new _a(90,1,t,e);i.up.set(0,-1,0),i.lookAt(new $n(1,0,0)),this.add(i);var a=new _a(90,1,t,e);a.up.set(0,-1,0),a.lookAt(new $n(-1,0,0)),this.add(a);var o=new _a(90,1,t,e);o.up.set(0,0,1),o.lookAt(new $n(0,1,0)),this.add(o);var s=new _a(90,1,t,e);s.up.set(0,0,-1),s.lookAt(new $n(0,-1,0)),this.add(s);var c=new _a(90,1,t,e);c.up.set(0,-1,0),c.lookAt(new $n(0,0,1)),this.add(c);var u=new _a(90,1,t,e);u.up.set(0,-1,0),u.lookAt(new $n(0,0,-1)),this.add(u),r=r||{format:Gt,magFilter:wt,minFilter:wt},this.renderTarget=new Ma(n,r),this.renderTarget.texture.name="CubeCamera",this.update=function(t,e){null===this.parent&&this.updateMatrixWorld();var n=t.getRenderTarget(),r=this.renderTarget,l=r.texture.generateMipmaps;r.texture.generateMipmaps=!1,t.setRenderTarget(r,0),t.render(e,i),t.setRenderTarget(r,1),t.render(e,a),t.setRenderTarget(r,2),t.render(e,o),t.setRenderTarget(r,3),t.render(e,s),t.setRenderTarget(r,4),t.render(e,c),r.texture.generateMipmaps=l,t.setRenderTarget(r,5),t.render(e,u),t.setRenderTarget(n)},this.clear=function(t,e,n,r){for(var i=t.getRenderTarget(),a=this.renderTarget,o=0;o<6;o++)t.setRenderTarget(a,o),t.clear(e,n,r);t.setRenderTarget(i)}}function Ma(t,e,n){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=n),qn.call(this,t,t,e)}function Sa(t,e,n,r,i,a,o,s,c,u,l,h){Vn.call(this,null,a,o,s,c,u,r,i,l,h),this.image={data:t||null,width:e||1,height:n||1},this.magFilter=void 0!==c?c:gt,this.minFilter=void 0!==u?u:gt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}wa.prototype=Object.create(Mr.prototype),wa.prototype.constructor=wa,Ma.prototype=Object.create(qn.prototype),Ma.prototype.constructor=Ma,Ma.prototype.isWebGLCubeRenderTarget=!0,Ma.prototype.fromEquirectangularTexture=function(t,e){this.texture.type=e.type,this.texture.format=e.format,this.texture.encoding=e.encoding;var n=new Sr,r={uniforms:{tEquirect:{value:null}},vertexShader:["varying vec3 vWorldDirection;","vec3 transformDirection( in vec3 dir, in mat4 matrix ) {","\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );","}","void main() {","\tvWorldDirection = transformDirection( position, modelMatrix );","\t#include <begin_vertex>","\t#include <project_vertex>","}"].join("\n"),fragmentShader:["uniform sampler2D tEquirect;","varying vec3 vWorldDirection;","#define RECIPROCAL_PI 0.31830988618","#define RECIPROCAL_PI2 0.15915494","void main() {","\tvec3 direction = normalize( vWorldDirection );","\tvec2 sampleUV;","\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;","\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;","\tgl_FragColor = texture2D( tEquirect, sampleUV );","}"].join("\n")},i=new xa({type:"CubemapFromEquirect",uniforms:va(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader,side:g,blending:_});i.uniforms.tEquirect.value=e;var a=new oa(new ma(5,5,5),i);n.add(a);var o=new wa(1,10,1);return o.renderTarget=this,o.renderTarget.texture.name="CubeCameraTexture",o.update(t,n),a.geometry.dispose(),a.material.dispose(),this},Sa.prototype=Object.create(Vn.prototype),Sa.prototype.constructor=Sa,Sa.prototype.isDataTexture=!0;var Ea=new Hr,Ta=new $n;function Aa(t,e,n,r,i,a){this.planes=[void 0!==t?t:new Kr,void 0!==e?e:new Kr,void 0!==n?n:new Kr,void 0!==r?r:new Kr,void 0!==i?i:new Kr,void 0!==a?a:new Kr]}Object.assign(Aa.prototype,{set:function(t,e,n,r,i,a){var o=this.planes;return o[0].copy(t),o[1].copy(e),o[2].copy(n),o[3].copy(r),o[4].copy(i),o[5].copy(a),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){for(var e=this.planes,n=0;n<6;n++)e[n].copy(t.planes[n]);return this},setFromProjectionMatrix:function(t){var e=this.planes,n=t.elements,r=n[0],i=n[1],a=n[2],o=n[3],s=n[4],c=n[5],u=n[6],l=n[7],h=n[8],d=n[9],p=n[10],f=n[11],m=n[12],v=n[13],g=n[14],y=n[15];return e[0].setComponents(o-r,l-s,f-h,y-m).normalize(),e[1].setComponents(o+r,l+s,f+h,y+m).normalize(),e[2].setComponents(o+i,l+c,f+d,y+v).normalize(),e[3].setComponents(o-i,l-c,f-d,y-v).normalize(),e[4].setComponents(o-a,l-u,f-p,y-g).normalize(),e[5].setComponents(o+a,l+u,f+p,y+g).normalize(),this},intersectsObject:function(t){var e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Ea.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Ea)},intersectsSprite:function(t){return Ea.center.set(0,0,0),Ea.radius=.7071067811865476,Ea.applyMatrix4(t.matrixWorld),this.intersectsSphere(Ea)},intersectsSphere:function(t){for(var e=this.planes,n=t.center,r=-t.radius,i=0;i<6;i++){if(e[i].distanceToPoint(n)<r)return!1}return!0},intersectsBox:function(t){for(var e=this.planes,n=0;n<6;n++){var r=e[n];if(Ta.x=r.normal.x>0?t.max.x:t.min.x,Ta.y=r.normal.y>0?t.max.y:t.min.y,Ta.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(Ta)<0)return!1}return!0},containsPoint:function(t){for(var e=this.planes,n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}});var La={common:{diffuse:{value:new fi(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new Hn},uv2Transform:{value:new Hn},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Gn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new fi(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}}},points:{diffuse:{value:new fi(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Hn}},sprite:{diffuse:{value:new fi(15658734)},opacity:{value:1},center:{value:new Gn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new Hn}}};function Ra(){var t=null,e=!1,n=null;function r(i,a){!1!==e&&(n(i,a),t.requestAnimationFrame(r))}return{start:function(){!0!==e&&null!==n&&(t.requestAnimationFrame(r),e=!0)},stop:function(){e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Pa(t,e){var n=e.isWebGL2,r=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),r.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);var n=r.get(e);n&&(t.deleteBuffer(n.buffer),r.delete(e))},update:function(e,i){e.isInterleavedBufferAttribute&&(e=e.data);var a=r.get(e);void 0===a?r.set(e,function(e,n){var r=e.array,i=e.usage,a=t.createBuffer();t.bindBuffer(n,a),t.bufferData(n,r,i),e.onUploadCallback();var o=5126;return r instanceof Float32Array?o=5126:r instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):r instanceof Uint16Array?o=5123:r instanceof Int16Array?o=5122:r instanceof Uint32Array?o=5125:r instanceof Int32Array?o=5124:r instanceof Int8Array?o=5120:r instanceof Uint8Array&&(o=5121),{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,i)):a.version<e.version&&(!function(e,r,i){var a=r.array,o=r.updateRange;t.bindBuffer(i,e),-1===o.count?t.bufferSubData(i,0,a):(n?t.bufferSubData(i,o.offset*a.BYTES_PER_ELEMENT,a,o.offset,o.count):t.bufferSubData(i,o.offset*a.BYTES_PER_ELEMENT,a.subarray(o.offset,o.offset+o.count)),o.count=-1)}(a.buffer,e,i),a.version=e.version)}}}function Ca(t,e,n,r){pa.call(this),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r},this.fromBufferGeometry(new Oa(t,e,n,r)),this.mergeVertices()}function Oa(t,e,n,r){ki.call(this),this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};var i,a,o=(t=t||1)/2,s=(e=e||1)/2,c=Math.floor(n)||1,u=Math.floor(r)||1,l=c+1,h=u+1,d=t/c,p=e/u,f=[],m=[],v=[],g=[];for(a=0;a<h;a++){var y=a*p-s;for(i=0;i<l;i++){var x=i*d-o;m.push(x,-y,0),v.push(0,0,1),g.push(i/c),g.push(1-a/u)}}for(a=0;a<u;a++)for(i=0;i<c;i++){var b=i+l*a,_=i+l*(a+1),w=i+1+l*(a+1),M=i+1+l*a;f.push(b,_,M),f.push(_,w,M)}this.setIndex(f),this.setAttribute("position",new Ci(m,3)),this.setAttribute("normal",new Ci(v,3)),this.setAttribute("uv",new Ci(g,2))}Ca.prototype=Object.create(pa.prototype),Ca.prototype.constructor=Ca,Oa.prototype=Object.create(ki.prototype),Oa.prototype.constructor=Oa;var Da={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\n\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf = integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss = F * brdf.x + brdf.y;\n\tfloat Ess = brdf.x + brdf.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha  = 1.0 / roughness;\n\tfloat cos2h = NoH * NoH;\n\tfloat sin2h = max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N = geometry.normal;\n\tvec3 V = geometry.viewDir;\n\tvec3 H = normalize( V + L );\n\tfloat dotNH = saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tfDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif",common:"#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n  return m[ 2 ][ 3 ] == - 1.0;\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_maxMipLevel 8.0\n#define cubeUV_minMipLevel 4.0\n#define cubeUV_maxTileSize 256.0\n#define cubeUV_minTileSize 16.0\nfloat getFace(vec3 direction) {\n    vec3 absDirection = abs(direction);\n    float face = -1.0;\n    if (absDirection.x > absDirection.z) {\n      if (absDirection.x > absDirection.y)\n        face = direction.x > 0.0 ? 0.0 : 3.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    } else {\n      if (absDirection.z > absDirection.y)\n        face = direction.z > 0.0 ? 2.0 : 5.0;\n      else\n        face = direction.y > 0.0 ? 1.0 : 4.0;\n    }\n    return face;\n}\nvec2 getUV(vec3 direction, float face) {\n    vec2 uv;\n    if (face == 0.0) {\n      uv = vec2(-direction.z, direction.y) / abs(direction.x);\n    } else if (face == 1.0) {\n      uv = vec2(direction.x, -direction.z) / abs(direction.y);\n    } else if (face == 2.0) {\n      uv = direction.xy / abs(direction.z);\n    } else if (face == 3.0) {\n      uv = vec2(direction.z, direction.y) / abs(direction.x);\n    } else if (face == 4.0) {\n      uv = direction.xz / abs(direction.y);\n    } else {\n      uv = vec2(-direction.x, direction.y) / abs(direction.z);\n    }\n    return 0.5 * (uv + 1.0);\n}\nvec3 bilinearCubeUV(sampler2D envMap, vec3 direction, float mipInt) {\n  float face = getFace(direction);\n  float filterInt = max(cubeUV_minMipLevel - mipInt, 0.0);\n  mipInt = max(mipInt, cubeUV_minMipLevel);\n  float faceSize = exp2(mipInt);\n  float texelSize = 1.0 / (3.0 * cubeUV_maxTileSize);\n  vec2 uv = getUV(direction, face) * (faceSize - 1.0);\n  vec2 f = fract(uv);\n  uv += 0.5 - f;\n  if (face > 2.0) {\n    uv.y += faceSize;\n    face -= 3.0;\n  }\n  uv.x += face * faceSize;\n  if(mipInt < cubeUV_maxMipLevel){\n    uv.y += 2.0 * cubeUV_maxTileSize;\n  }\n  uv.y += filterInt * 2.0 * cubeUV_minTileSize;\n  uv.x += 3.0 * max(0.0, cubeUV_maxTileSize - 2.0 * faceSize);\n  uv *= texelSize;\n  vec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x += texelSize;\n  vec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.y += texelSize;\n  vec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  uv.x -= texelSize;\n  vec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n  vec3 tm = mix(tl, tr, f.x);\n  vec3 bm = mix(bl, br, f.x);\n  return mix(tm, bm, f.y);\n}\n#define r0 1.0\n#define v0 0.339\n#define m0 -2.0\n#define r1 0.8\n#define v1 0.276\n#define m1 -1.0\n#define r4 0.4\n#define v4 0.046\n#define m4 2.0\n#define r5 0.305\n#define v5 0.016\n#define m5 3.0\n#define r6 0.21\n#define v6 0.0038\n#define m6 4.0\nfloat roughnessToMip(float roughness) {\n  float mip = 0.0;\n  if (roughness >= r1) {\n    mip = (r0 - roughness) * (m1 - m0) / (r0 - r1) + m0;\n  } else if (roughness >= r4) {\n    mip = (r1 - roughness) * (m4 - m1) / (r1 - r4) + m1;\n  } else if (roughness >= r5) {\n    mip = (r4 - roughness) * (m5 - m4) / (r4 - r5) + m4;\n  } else if (roughness >= r6) {\n    mip = (r5 - roughness) * (m6 - m5) / (r5 - r6) + m5;\n  } else {\n    mip = -2.0 * log2(1.16 * roughness);  }\n  return mip;\n}\nvec4 textureCubeUV(sampler2D envMap, vec3 sampleDir, float roughness) {\n  float mip = clamp(roughnessToMip(roughness), m0, cubeUV_maxMipLevel);\n  float mipF = fract(mip);\n  float mipInt = floor(mip);\n  vec3 color0 = bilinearCubeUV(envMap, sampleDir, mipInt);\n  if (mipF == 0.0) {\n    return vec4(color0, 1.0);\n  } else {\n    vec3 color1 = bilinearCubeUV(envMap, sampleDir, mipInt + 1.0);\n    return vec4(mix(color0, color1, mipF), 1.0);\n  }\n}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\t\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t}  else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat sigma = PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t  vec3 reflectVec = reflect( -viewDir, normal );\n\t\t  reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t  vec3 reflectVec = refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) { \n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tfogDepth = -mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;\nmaterial.specularRoughness = min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheen;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *= PI;\n\t\t#endif\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL = ccDotNV;\n\t\tfloat clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR = 0.0;\n\t#endif\n\tfloat clearcoatInv = 1.0 - clearcoatDHR;\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif",normal_fragment_begin:"#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tfloat scale = sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N = normalize( surf_norm );\n\t\tmat3 tsn = mat3( S, T, N );\n\t\tmapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( ( color * ( 2.51 * color + 0.03 ) ) / ( color * ( 2.43 * color + 0.59 ) + 0.14 ) );\n}",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#ifndef FLAT_SHADED\n\t\tvNormal = normalize( transformedNormal );\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSPARENCY\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSPARENCY\n\tuniform float transparency;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSPARENCY\n\t\tdiffuseColor.a *= saturate( 1. - transparency + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",normal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",normal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",shadow_vert:"#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}"},Ia={basic:{uniforms:ga([La.common,La.specularmap,La.envmap,La.aomap,La.lightmap,La.fog]),vertexShader:Da.meshbasic_vert,fragmentShader:Da.meshbasic_frag},lambert:{uniforms:ga([La.common,La.specularmap,La.envmap,La.aomap,La.lightmap,La.emissivemap,La.fog,La.lights,{emissive:{value:new fi(0)}}]),vertexShader:Da.meshlambert_vert,fragmentShader:Da.meshlambert_frag},phong:{uniforms:ga([La.common,La.specularmap,La.envmap,La.aomap,La.lightmap,La.emissivemap,La.bumpmap,La.normalmap,La.displacementmap,La.fog,La.lights,{emissive:{value:new fi(0)},specular:{value:new fi(1118481)},shininess:{value:30}}]),vertexShader:Da.meshphong_vert,fragmentShader:Da.meshphong_frag},standard:{uniforms:ga([La.common,La.envmap,La.aomap,La.lightmap,La.emissivemap,La.bumpmap,La.normalmap,La.displacementmap,La.roughnessmap,La.metalnessmap,La.fog,La.lights,{emissive:{value:new fi(0)},roughness:{value:.5},metalness:{value:.5},envMapIntensity:{value:1}}]),vertexShader:Da.meshphysical_vert,fragmentShader:Da.meshphysical_frag},toon:{uniforms:ga([La.common,La.specularmap,La.aomap,La.lightmap,La.emissivemap,La.bumpmap,La.normalmap,La.displacementmap,La.gradientmap,La.fog,La.lights,{emissive:{value:new fi(0)},specular:{value:new fi(1118481)},shininess:{value:30}}]),vertexShader:Da.meshtoon_vert,fragmentShader:Da.meshtoon_frag},matcap:{uniforms:ga([La.common,La.bumpmap,La.normalmap,La.displacementmap,La.fog,{matcap:{value:null}}]),vertexShader:Da.meshmatcap_vert,fragmentShader:Da.meshmatcap_frag},points:{uniforms:ga([La.points,La.fog]),vertexShader:Da.points_vert,fragmentShader:Da.points_frag},dashed:{uniforms:ga([La.common,La.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Da.linedashed_vert,fragmentShader:Da.linedashed_frag},depth:{uniforms:ga([La.common,La.displacementmap]),vertexShader:Da.depth_vert,fragmentShader:Da.depth_frag},normal:{uniforms:ga([La.common,La.bumpmap,La.normalmap,La.displacementmap,{opacity:{value:1}}]),vertexShader:Da.normal_vert,fragmentShader:Da.normal_frag},sprite:{uniforms:ga([La.sprite,La.fog]),vertexShader:Da.sprite_vert,fragmentShader:Da.sprite_frag},background:{uniforms:{uvTransform:{value:new Hn},t2D:{value:null}},vertexShader:Da.background_vert,fragmentShader:Da.background_frag},cube:{uniforms:ga([La.envmap,{opacity:{value:1}}]),vertexShader:Da.cube_vert,fragmentShader:Da.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Da.equirect_vert,fragmentShader:Da.equirect_frag},distanceRGBA:{uniforms:ga([La.common,La.displacementmap,{referencePosition:{value:new $n},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Da.distanceRGBA_vert,fragmentShader:Da.distanceRGBA_frag},shadow:{uniforms:ga([La.lights,La.fog,{color:{value:new fi(0)},opacity:{value:1}}]),vertexShader:Da.shadow_vert,fragmentShader:Da.shadow_frag}};function Na(t,e,n,r){var i,a,o=new fi(0),s=0,c=null,u=0,l=null;function h(t,n){e.buffers.color.setClear(t.r,t.g,t.b,n,r)}return{getClearColor:function(){return o},setClearColor:function(t,e){o.set(t),h(o,s=void 0!==e?e:1)},getClearAlpha:function(){return s},setClearAlpha:function(t){h(o,s=t)},render:function(e,r,d,p){var f=r.background,m=t.xr,y=m.getSession&&m.getSession();if(y&&"additive"===y.environmentBlendMode&&(f=null),null===f?h(o,s):f&&f.isColor&&(h(f,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),f&&(f.isCubeTexture||f.isWebGLCubeRenderTarget||f.mapping===dt)){void 0===a&&((a=new oa(new ma(1,1,1),new xa({type:"BackgroundCubeMaterial",uniforms:va(Ia.cube.uniforms),vertexShader:Ia.cube.vertexShader,fragmentShader:Ia.cube.fragmentShader,side:g,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),a.geometry.deleteAttribute("uv"),a.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(a.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),n.update(a));var x=f.isWebGLCubeRenderTarget?f.texture:f;a.material.uniforms.envMap.value=x,a.material.uniforms.flipEnvMap.value=x.isCubeTexture?-1:1,c===f&&u===x.version&&l===t.toneMapping||(a.material.needsUpdate=!0,c=f,u=x.version,l=t.toneMapping),e.unshift(a,a.geometry,a.material,0,0,null)}else f&&f.isTexture&&(void 0===i&&((i=new oa(new Oa(2,2),new xa({type:"BackgroundMaterial",uniforms:va(Ia.background.uniforms),vertexShader:Ia.background.vertexShader,fragmentShader:Ia.background.fragmentShader,side:v,depthTest:!1,depthWrite:!1,fog:!1}))).geometry.deleteAttribute("normal"),Object.defineProperty(i.material,"map",{get:function(){return this.uniforms.t2D.value}}),n.update(i)),i.material.uniforms.t2D.value=f,!0===f.matrixAutoUpdate&&f.updateMatrix(),i.material.uniforms.uvTransform.value.copy(f.matrix),c===f&&u===f.version&&l===t.toneMapping||(i.material.needsUpdate=!0,c=f,u=f.version,l=t.toneMapping),e.unshift(i,i.geometry,i.material,0,0,null))}}}function Ba(t,e,n,r){var i,a=r.isWebGL2;this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i)},this.renderInstances=function(r,o,s,c){if(0!==c){var u,l;if(a)u=t,l="drawArraysInstanced";else if(l="drawArraysInstancedANGLE",null===(u=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");u[l](i,o,s,c),n.update(s,i,c)}}}function za(t,e,n){var r;function i(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}var a="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext,o=void 0!==n.precision?n.precision:"highp",s=i(o);s!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",s,"instead."),o=s);var c=!0===n.logarithmicDepthBuffer,u=t.getParameter(34930),l=t.getParameter(35660),h=t.getParameter(3379),d=t.getParameter(34076),p=t.getParameter(34921),f=t.getParameter(36347),m=t.getParameter(36348),v=t.getParameter(36349),g=l>0,y=a||!!e.get("OES_texture_float");return{isWebGL2:a,getMaxAnisotropy:function(){if(void 0!==r)return r;var n=e.get("EXT_texture_filter_anisotropic");return r=null!==n?t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0},getMaxPrecision:i,precision:o,logarithmicDepthBuffer:c,maxTextures:u,maxVertexTextures:l,maxTextureSize:h,maxCubemapSize:d,maxAttributes:p,maxVertexUniforms:f,maxVaryings:m,maxFragmentUniforms:v,vertexTextures:g,floatFragmentTextures:y,floatVertexTextures:g&&y,maxSamples:a?t.getParameter(36183):0}}function Fa(){var t=this,e=null,n=0,r=!1,i=!1,a=new Kr,o=new Hn,s={value:null,needsUpdate:!1};function c(){s.value!==e&&(s.value=e,s.needsUpdate=n>0),t.numPlanes=n,t.numIntersection=0}function u(e,n,r,i){var c=null!==e?e.length:0,u=null;if(0!==c){if(u=s.value,!0!==i||null===u){var l=r+4*c,h=n.matrixWorldInverse;o.getNormalMatrix(h),(null===u||u.length<l)&&(u=new Float32Array(l));for(var d=0,p=r;d!==c;++d,p+=4)a.copy(e[d]).applyMatrix4(h,o),a.normal.toArray(u,p),u[p+3]=a.constant}s.value=u,s.needsUpdate=!0}return t.numPlanes=c,t.numIntersection=0,u}this.uniform=s,this.numPlanes=0,this.numIntersection=0,this.init=function(t,i,a){var o=0!==t.length||i||0!==n||r;return r=i,e=u(t,a,0),n=t.length,o},this.beginShadows=function(){i=!0,u(null)},this.endShadows=function(){i=!1,c()},this.setState=function(t,a,o,l,h,d){if(!r||null===t||0===t.length||i&&!o)i?u(null):c();else{var p=i?0:n,f=4*p,m=h.clippingState||null;s.value=m,m=u(t,l,f,d);for(var v=0;v!==f;++v)m[v]=e[v];h.clippingState=m,this.numIntersection=a?this.numPlanes:0,this.numPlanes+=p}}}function Ua(t){var e={};return{get:function(n){if(void 0!==e[n])return e[n];var r;switch(n){case"WEBGL_depth_texture":r=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=t.getExtension(n)}return null===r&&console.warn("THREE.WebGLRenderer: "+n+" extension not supported."),e[n]=r,r}}}function Ga(t,e,n){var r=new WeakMap,i=new WeakMap;function a(t){var o=t.target,s=r.get(o);for(var c in null!==s.index&&e.remove(s.index),s.attributes)e.remove(s.attributes[c]);o.removeEventListener("dispose",a),r.delete(o);var u=i.get(s);u&&(e.remove(u),i.delete(s)),n.memory.geometries--}function o(t){var n=[],r=t.index,a=t.attributes.position,o=0;if(null!==r){var s=r.array;o=r.version;for(var c=0,u=s.length;c<u;c+=3){var l=s[c+0],h=s[c+1],d=s[c+2];n.push(l,h,h,d,d,l)}}else{s=a.array;o=a.version;for(c=0,u=s.length/3-1;c<u;c+=3){l=c+0,h=c+1,d=c+2;n.push(l,h,h,d,d,l)}}var p=new(Ii(n)>65535?Pi:Li)(n,1);p.version=o,e.update(p,34963);var f=i.get(t);f&&e.remove(f),i.set(t,p)}return{get:function(t,e){var i=r.get(e);return i||(e.addEventListener("dispose",a),e.isBufferGeometry?i=e:e.isGeometry&&(void 0===e._bufferGeometry&&(e._bufferGeometry=(new ki).setFromObject(t)),i=e._bufferGeometry),r.set(e,i),n.memory.geometries++,i)},update:function(t){var n=t.index,r=t.attributes;for(var i in null!==n&&e.update(n,34963),r)e.update(r[i],34962);var a=t.morphAttributes;for(var i in a)for(var o=a[i],s=0,c=o.length;s<c;s++)e.update(o[s],34962)},getWireframeAttribute:function(t){var e=i.get(t);if(e){var n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return i.get(t)}}}function Ha(t,e,n,r){var i,a,o,s=r.isWebGL2;this.setMode=function(t){i=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,r){t.drawElements(i,r,a,e*o),n.update(r,i)},this.renderInstances=function(r,c,u,l){if(0!==l){var h,d;if(s)h=t,d="drawElementsInstanced";else if(d="drawElementsInstancedANGLE",null===(h=e.get("ANGLE_instanced_arrays")))return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[d](i,u,a,c*o,l),n.update(u,i,l)}}}function ka(t){var e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,r){switch(r=r||1,e.calls++,n){case 4:e.triangles+=r*(t/3);break;case 1:e.lines+=r*(t/2);break;case 3:e.lines+=r*(t-1);break;case 2:e.lines+=r*t;break;case 0:e.points+=r*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function ja(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Va(t){var e={},n=new Float32Array(8);return{update:function(r,i,a,o){var s=r.morphTargetInfluences,c=void 0===s?0:s.length,u=e[i.id];if(void 0===u){u=[];for(var l=0;l<c;l++)u[l]=[l,0];e[i.id]=u}var h=a.morphTargets&&i.morphAttributes.position,d=a.morphNormals&&i.morphAttributes.normal;for(l=0;l<c;l++){0!==(f=u[l])[1]&&(h&&i.deleteAttribute("morphTarget"+l),d&&i.deleteAttribute("morphNormal"+l))}for(l=0;l<c;l++){(f=u[l])[0]=l,f[1]=s[l]}u.sort(ja);var p=0;for(l=0;l<8;l++){var f;if(f=u[l]){var m=f[0],v=f[1];if(v){h&&i.setAttribute("morphTarget"+l,h[m]),d&&i.setAttribute("morphNormal"+l,d[m]),n[l]=v,p+=v;continue}}n[l]=0}var g=i.morphTargetsRelative?1:1-p;o.getUniforms().setValue(t,"morphTargetBaseInfluence",g),o.getUniforms().setValue(t,"morphTargetInfluences",n)}}}function Wa(t,e,n,r){var i=new WeakMap;return{update:function(t){var a=r.render.frame,o=t.geometry,s=e.get(t,o);return i.get(s)!==a&&(o.isGeometry&&s.updateFromObject(t),e.update(s),i.set(s,a)),t.isInstancedMesh&&n.update(t.instanceMatrix,34962),s},dispose:function(){i=new WeakMap}}}function qa(t,e,n,r,i,a,o,s,c,u){t=void 0!==t?t:[],e=void 0!==e?e:st,o=void 0!==o?o:Gt,Vn.call(this,t,e,n,r,i,a,o,s,c,u),this.flipY=!1}function Xa(t,e,n,r){Vn.call(this,null),this.image={data:t||null,width:e||1,height:n||1,depth:r||1},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}function Ya(t,e,n,r){Vn.call(this,null),this.image={data:t||null,width:e||1,height:n||1,depth:r||1},this.magFilter=gt,this.minFilter=gt,this.wrapR=mt,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}Ia.physical={uniforms:ga([Ia.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Gn(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new fi(0)},transparency:{value:0}}]),vertexShader:Da.meshphysical_vert,fragmentShader:Da.meshphysical_frag},qa.prototype=Object.create(Vn.prototype),qa.prototype.constructor=qa,qa.prototype.isCubeTexture=!0,Object.defineProperty(qa.prototype,"images",{get:function(){return this.image},set:function(t){this.image=t}}),Xa.prototype=Object.create(Vn.prototype),Xa.prototype.constructor=Xa,Xa.prototype.isDataTexture2DArray=!0,Ya.prototype=Object.create(Vn.prototype),Ya.prototype.constructor=Ya,Ya.prototype.isDataTexture3D=!0;var Za=new Vn,Ja=new Xa,$a=new Ya,Qa=new qa,Ka=[],to=[],eo=new Float32Array(16),no=new Float32Array(9),ro=new Float32Array(4);function io(t,e,n){var r=t[0];if(r<=0||r>0)return t;var i=e*n,a=Ka[i];if(void 0===a&&(a=new Float32Array(i),Ka[i]=a),0!==e){r.toArray(a,0);for(var o=1,s=0;o!==e;++o)s+=n,t[o].toArray(a,s)}return a}function ao(t,e){if(t.length!==e.length)return!1;for(var n=0,r=t.length;n<r;n++)if(t[n]!==e[n])return!1;return!0}function oo(t,e){for(var n=0,r=e.length;n<r;n++)t[n]=e[n]}function so(t,e){var n=to[e];void 0===n&&(n=new Int32Array(e),to[e]=n);for(var r=0;r!==e;++r)n[r]=t.allocateTextureUnit();return n}function co(t,e){var n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function uo(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(ao(n,e))return;t.uniform2fv(this.addr,e),oo(n,e)}}function lo(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(ao(n,e))return;t.uniform3fv(this.addr,e),oo(n,e)}}function ho(t,e){var n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(ao(n,e))return;t.uniform4fv(this.addr,e),oo(n,e)}}function po(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(ao(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),oo(n,e)}else{if(ao(n,r))return;ro.set(r),t.uniformMatrix2fv(this.addr,!1,ro),oo(n,r)}}function fo(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(ao(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),oo(n,e)}else{if(ao(n,r))return;no.set(r),t.uniformMatrix3fv(this.addr,!1,no),oo(n,r)}}function mo(t,e){var n=this.cache,r=e.elements;if(void 0===r){if(ao(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),oo(n,e)}else{if(ao(n,r))return;eo.set(r),t.uniformMatrix4fv(this.addr,!1,eo),oo(n,r)}}function vo(t,e,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.safeSetTexture2D(e||Za,i)}function go(t,e,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTexture2DArray(e||Ja,i)}function yo(t,e,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.setTexture3D(e||$a,i)}function xo(t,e,n){var r=this.cache,i=n.allocateTextureUnit();r[0]!==i&&(t.uniform1i(this.addr,i),r[0]=i),n.safeSetTextureCube(e||Qa,i)}function bo(t,e){var n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function _o(t,e){var n=this.cache;ao(n,e)||(t.uniform2iv(this.addr,e),oo(n,e))}function wo(t,e){var n=this.cache;ao(n,e)||(t.uniform3iv(this.addr,e),oo(n,e))}function Mo(t,e){var n=this.cache;ao(n,e)||(t.uniform4iv(this.addr,e),oo(n,e))}function So(t,e){var n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Eo(t,e){t.uniform1fv(this.addr,e)}function To(t,e){t.uniform1iv(this.addr,e)}function Ao(t,e){t.uniform2iv(this.addr,e)}function Lo(t,e){t.uniform3iv(this.addr,e)}function Ro(t,e){t.uniform4iv(this.addr,e)}function Po(t,e){var n=io(e,this.size,2);t.uniform2fv(this.addr,n)}function Co(t,e){var n=io(e,this.size,3);t.uniform3fv(this.addr,n)}function Oo(t,e){var n=io(e,this.size,4);t.uniform4fv(this.addr,n)}function Do(t,e){var n=io(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Io(t,e){var n=io(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function No(t,e){var n=io(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Bo(t,e,n){var r=e.length,i=so(n,r);t.uniform1iv(this.addr,i);for(var a=0;a!==r;++a)n.safeSetTexture2D(e[a]||Za,i[a])}function zo(t,e,n){var r=e.length,i=so(n,r);t.uniform1iv(this.addr,i);for(var a=0;a!==r;++a)n.safeSetTextureCube(e[a]||Qa,i[a])}function Fo(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return co;case 35664:return uo;case 35665:return lo;case 35666:return ho;case 35674:return po;case 35675:return fo;case 35676:return mo;case 5124:case 35670:return bo;case 35667:case 35671:return _o;case 35668:case 35672:return wo;case 35669:case 35673:return Mo;case 5125:return So;case 35678:case 36198:case 36298:case 36306:case 35682:return vo;case 35679:case 36299:case 36307:return yo;case 35680:case 36300:case 36308:case 36293:return xo;case 36289:case 36303:case 36311:case 36292:return go}}(e.type)}function Uo(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return Eo;case 35664:return Po;case 35665:return Co;case 35666:return Oo;case 35674:return Do;case 35675:return Io;case 35676:return No;case 5124:case 35670:return To;case 35667:case 35671:return Ao;case 35668:case 35672:return Lo;case 35669:case 35673:return Ro;case 35678:case 36198:case 36298:case 36306:case 35682:return Bo;case 35680:case 36300:case 36308:case 36293:return zo}}(e.type)}function Go(t){this.id=t,this.seq=[],this.map={}}Uo.prototype.updateCache=function(t){var e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),oo(e,t)},Go.prototype.setValue=function(t,e,n){for(var r=this.seq,i=0,a=r.length;i!==a;++i){var o=r[i];o.setValue(t,e[o.id],n)}};var Ho=/([\w\d_]+)(\])?(\[|\.)?/g;function ko(t,e){t.seq.push(e),t.map[e.id]=e}function jo(t,e,n){var r=t.name,i=r.length;for(Ho.lastIndex=0;;){var a=Ho.exec(r),o=Ho.lastIndex,s=a[1],c="]"===a[2],u=a[3];if(c&&(s|=0),void 0===u||"["===u&&o+2===i){ko(n,void 0===u?new Fo(s,t,e):new Uo(s,t,e));break}var l=n.map[s];void 0===l&&ko(n,l=new Go(s)),n=l}}function Vo(t,e){this.seq=[],this.map={};for(var n=t.getProgramParameter(e,35718),r=0;r<n;++r){var i=t.getActiveUniform(e,r);jo(i,t.getUniformLocation(e,i.name),this)}}function Wo(t,e,n){var r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),r}Vo.prototype.setValue=function(t,e,n,r){var i=this.map[e];void 0!==i&&i.setValue(t,n,r)},Vo.prototype.setOptional=function(t,e,n){var r=e[n];void 0!==r&&this.setValue(t,n,r)},Vo.upload=function(t,e,n,r){for(var i=0,a=e.length;i!==a;++i){var o=e[i],s=n[o.id];!1!==s.needsUpdate&&o.setValue(t,s.value,r)}},Vo.seqWithValue=function(t,e){for(var n=[],r=0,i=t.length;r!==i;++r){var a=t[r];a.id in e&&n.push(a)}return n};var qo=0;function Xo(t){switch(t){case $e:return["Linear","( value )"];case Qe:return["sRGB","( value )"];case tn:return["RGBE","( value )"];case nn:return["RGBM","( value, 7.0 )"];case rn:return["RGBM","( value, 16.0 )"];case an:return["RGBD","( value, 256.0 )"];case Ke:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case en:return["LogLuv","( value )"];default:throw new Error("unsupported encoding: "+t)}}function Yo(t,e,n){var r=t.getShaderParameter(e,35713),i=t.getShaderInfoLog(e).trim();return r&&""===i?"":"THREE.WebGLShader: gl.getShaderInfoLog() "+n+"\n"+i+function(t){for(var e=t.split("\n"),n=0;n<e.length;n++)e[n]=n+1+": "+e[n];return e.join("\n")}(t.getShaderSource(e))}function Zo(t,e){var n=Xo(e);return"vec4 "+t+"( vec4 value ) { return "+n[0]+"ToLinear"+n[1]+"; }"}function Jo(t,e){var n;switch(e){case et:n="Linear";break;case nt:n="Reinhard";break;case rt:n="Uncharted2";break;case it:n="OptimizedCineon";break;case at:n="ACESFilmic";break;default:throw new Error("unsupported toneMapping: "+e)}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function $o(t){return""!==t}function Qo(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Ko(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}var ts=/^[ \t]*#include +<([\w\d./]+)>/gm;function es(t){return t.replace(ts,ns)}function ns(t,e){var n=Da[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return es(n)}var rs=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,is=/#pragma unroll_loop_start[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}[\s]+?#pragma unroll_loop_end/g;function as(t){return t.replace(is,ss).replace(rs,os)}function os(t,e,n,r){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),ss(t,e,n,r)}function ss(t,e,n,r){for(var i="",a=parseInt(e);a<parseInt(n);a++)i+=r.replace(/\[ i \]/g,"[ "+a+" ]").replace(/UNROLLED_LOOP_INDEX/g,a);return i}function cs(t){var e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function us(t,e,n){var r,i,a,o,s,c=t.getContext(),u=n.defines,l=n.vertexShader,h=n.fragmentShader,d=function(t){var e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===p?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===f?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===m&&(e="SHADOWMAP_TYPE_VSM"),e}(n),v=function(t){var e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case st:case ct:e="ENVMAP_TYPE_CUBE";break;case dt:case pt:e="ENVMAP_TYPE_CUBE_UV";break;case ut:case lt:e="ENVMAP_TYPE_EQUIREC";break;case ht:e="ENVMAP_TYPE_SPHERE"}return e}(n),g=function(t){var e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case ct:case lt:e="ENVMAP_MODE_REFRACTION"}return e}(n),y=function(t){var e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case $:e="ENVMAP_BLENDING_MULTIPLY";break;case Q:e="ENVMAP_BLENDING_MIX";break;case K:e="ENVMAP_BLENDING_ADD"}return e}(n),x=t.gammaFactor>0?t.gammaFactor:1,b=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter($o).join("\n")}(n),_=function(t){var e=[];for(var n in t){var r=t[n];!1!==r&&e.push("#define "+n+" "+r)}return e.join("\n")}(u),w=c.createProgram();if(n.isRawShaderMaterial?((r=[_].filter($o).join("\n")).length>0&&(r+="\n"),(i=[b,_].filter($o).join("\n")).length>0&&(i+="\n")):(r=[cs(n),"#define SHADER_NAME "+n.shaderName,_,n.instancing?"#define USE_INSTANCING":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+x,"#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+g:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING"," attribute mat4 instanceMatrix;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#ifdef USE_COLOR","\tattribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter($o).join("\n"),i=[b,cs(n),"#define SHADER_NAME "+n.shaderName,_,n.alphaTest?"#define ALPHATEST "+n.alphaTest+(n.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+x,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+v:"",n.envMap?"#define "+g:"",n.envMap?"#define "+y:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.sheen?"#define USE_SHEEN":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==tt?"#define TONE_MAPPING":"",n.toneMapping!==tt?Da.tonemapping_pars_fragment:"",n.toneMapping!==tt?Jo("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.outputEncoding||n.mapEncoding||n.matcapEncoding||n.envMapEncoding||n.emissiveMapEncoding||n.lightMapEncoding?Da.encodings_pars_fragment:"",n.mapEncoding?Zo("mapTexelToLinear",n.mapEncoding):"",n.matcapEncoding?Zo("matcapTexelToLinear",n.matcapEncoding):"",n.envMapEncoding?Zo("envMapTexelToLinear",n.envMapEncoding):"",n.emissiveMapEncoding?Zo("emissiveMapTexelToLinear",n.emissiveMapEncoding):"",n.lightMapEncoding?Zo("lightMapTexelToLinear",n.lightMapEncoding):"",n.outputEncoding?(a="linearToOutputTexel",o=n.outputEncoding,s=Xo(o),"vec4 "+a+"( vec4 value ) { return LinearTo"+s[0]+s[1]+"; }"):"",n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter($o).join("\n")),l=Ko(l=Qo(l=es(l),n),n),h=Ko(h=Qo(h=es(h),n),n),l=as(l),h=as(h),n.isWebGL2&&!n.isRawShaderMaterial){var M=!1,S=/^\s*#version\s+300\s+es\s*\n/;n.isShaderMaterial&&null!==l.match(S)&&null!==h.match(S)&&(M=!0,l=l.replace(S,""),h=h.replace(S,"")),r=["#version 300 es\n","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+r,i=["#version 300 es\n","#define varying in",M?"":"out highp vec4 pc_fragColor;",M?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+i}var E,T,A=i+h,L=Wo(c,35633,r+l),R=Wo(c,35632,A);if(c.attachShader(w,L),c.attachShader(w,R),void 0!==n.index0AttributeName?c.bindAttribLocation(w,0,n.index0AttributeName):!0===n.morphTargets&&c.bindAttribLocation(w,0,"position"),c.linkProgram(w),t.debug.checkShaderErrors){var P=c.getProgramInfoLog(w).trim(),C=c.getShaderInfoLog(L).trim(),O=c.getShaderInfoLog(R).trim(),D=!0,I=!0;if(!1===c.getProgramParameter(w,35714)){D=!1;var N=Yo(c,L,"vertex"),B=Yo(c,R,"fragment");console.error("THREE.WebGLProgram: shader error: ",c.getError(),"35715",c.getProgramParameter(w,35715),"gl.getProgramInfoLog",P,N,B)}else""!==P?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",P):""!==C&&""!==O||(I=!1);I&&(this.diagnostics={runnable:D,programLog:P,vertexShader:{log:C,prefix:r},fragmentShader:{log:O,prefix:i}})}return c.detachShader(w,L),c.detachShader(w,R),c.deleteShader(L),c.deleteShader(R),this.getUniforms=function(){return void 0===E&&(E=new Vo(c,w)),E},this.getAttributes=function(){return void 0===T&&(T=function(t,e){for(var n={},r=t.getProgramParameter(e,35721),i=0;i<r;i++){var a=t.getActiveAttrib(e,i).name;n[a]=t.getAttribLocation(e,a)}return n}(c,w)),T},this.destroy=function(){c.deleteProgram(w),this.program=void 0},this.name=n.shaderName,this.id=qo++,this.cacheKey=e,this.usedTimes=1,this.program=w,this.vertexShader=L,this.fragmentShader=R,this}function ls(t,e,n){var r=[],i=n.isWebGL2,a=n.logarithmicDepthBuffer,o=n.floatVertexTextures,s=n.precision,c=n.maxVertexUniforms,u=n.vertexTextures,l={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},h=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen"];function d(t){var e;return t?t.isTexture?e=t.encoding:t.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),e=t.texture.encoding):e=$e,e}this.getParameters=function(r,h,p,f,m,v,x){var b=f.fog,_=r.isMeshStandardMaterial?f.environment:null,w=r.envMap||_,M=l[r.type],S=x.isSkinnedMesh?function(t){var e=t.skeleton.bones;if(o)return 1024;var n=c,r=Math.floor((n-20)/4),i=Math.min(r,e.length);return i<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+i+"."),0):i}(x):0;null!==r.precision&&(s=n.getMaxPrecision(r.precision))!==r.precision&&console.warn("THREE.WebGLProgram.getParameters:",r.precision,"not supported, using",s,"instead.");var E=function(t,e){var n;if(e){var r=Ia[e];n={name:t.type,uniforms:ya.clone(r.uniforms),vertexShader:r.vertexShader,fragmentShader:r.fragmentShader}}else n={name:t.type,uniforms:t.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader};return n}(r,M);r.onBeforeCompile(E,t);var T=t.getRenderTarget();return{isWebGL2:i,shaderID:M,shaderName:E.name,uniforms:E.uniforms,vertexShader:E.vertexShader,fragmentShader:E.fragmentShader,defines:r.defines,isRawShaderMaterial:r.isRawShaderMaterial,isShaderMaterial:r.isShaderMaterial,precision:s,instancing:!0===x.isInstancedMesh,supportsVertexTextures:u,outputEncoding:null!==T?d(T.texture):t.outputEncoding,map:!!r.map,mapEncoding:d(r.map),matcap:!!r.matcap,matcapEncoding:d(r.matcap),envMap:!!w,envMapMode:w&&w.mapping,envMapEncoding:d(w),envMapCubeUV:!!w&&(w.mapping===dt||w.mapping===pt),lightMap:!!r.lightMap,lightMapEncoding:d(r.lightMap),aoMap:!!r.aoMap,emissiveMap:!!r.emissiveMap,emissiveMapEncoding:d(r.emissiveMap),bumpMap:!!r.bumpMap,normalMap:!!r.normalMap,objectSpaceNormalMap:r.normalMapType===un,tangentSpaceNormalMap:r.normalMapType===cn,clearcoatMap:!!r.clearcoatMap,clearcoatRoughnessMap:!!r.clearcoatRoughnessMap,clearcoatNormalMap:!!r.clearcoatNormalMap,displacementMap:!!r.displacementMap,roughnessMap:!!r.roughnessMap,metalnessMap:!!r.metalnessMap,specularMap:!!r.specularMap,alphaMap:!!r.alphaMap,gradientMap:!!r.gradientMap,sheen:!!r.sheen,combine:r.combine,vertexTangents:r.normalMap&&r.vertexTangents,vertexColors:r.vertexColors,vertexUvs:!!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatMap||r.clearcoatRoughnessMap||r.clearcoatNormalMap||r.displacementMap),uvsVertexOnly:!(r.map||r.bumpMap||r.normalMap||r.specularMap||r.alphaMap||r.emissiveMap||r.roughnessMap||r.metalnessMap||r.clearcoatNormalMap||!r.displacementMap),fog:!!b,useFog:r.fog,fogExp2:b&&b.isFogExp2,flatShading:r.flatShading,sizeAttenuation:r.sizeAttenuation,logarithmicDepthBuffer:a,skinning:r.skinning&&S>0,maxBones:S,useVertexTexture:o,morphTargets:r.morphTargets,morphNormals:r.morphNormals,maxMorphTargets:t.maxMorphTargets,maxMorphNormals:t.maxMorphNormals,numDirLights:h.directional.length,numPointLights:h.point.length,numSpotLights:h.spot.length,numRectAreaLights:h.rectArea.length,numHemiLights:h.hemi.length,numDirLightShadows:h.directionalShadowMap.length,numPointLightShadows:h.pointShadowMap.length,numSpotLightShadows:h.spotShadowMap.length,numClippingPlanes:m,numClipIntersection:v,dithering:r.dithering,shadowMapEnabled:t.shadowMap.enabled&&p.length>0,shadowMapType:t.shadowMap.type,toneMapping:r.toneMapped?t.toneMapping:tt,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:r.premultipliedAlpha,alphaTest:r.alphaTest,doubleSided:r.side===y,flipSided:r.side===g,depthPacking:void 0!==r.depthPacking&&r.depthPacking,index0AttributeName:r.index0AttributeName,extensionDerivatives:r.extensions&&r.extensions.derivatives,extensionFragDepth:r.extensions&&r.extensions.fragDepth,extensionDrawBuffers:r.extensions&&r.extensions.drawBuffers,extensionShaderTextureLOD:r.extensions&&r.extensions.shaderTextureLOD,rendererExtensionFragDepth:i||null!==e.get("EXT_frag_depth"),rendererExtensionDrawBuffers:i||null!==e.get("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:i||null!==e.get("EXT_shader_texture_lod"),onBeforeCompile:r.onBeforeCompile}},this.getProgramCacheKey=function(e){var n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(var r in e.defines)n.push(r),n.push(e.defines[r]);if(void 0===e.isRawShaderMaterial){for(var i=0;i<h.length;i++)n.push(e[h[i]]);n.push(t.outputEncoding),n.push(t.gammaFactor)}return n.push(e.onBeforeCompile.toString()),n.join()},this.acquireProgram=function(e,n){for(var i,a=0,o=r.length;a<o;a++){var s=r[a];if(s.cacheKey===n){++(i=s).usedTimes;break}}return void 0===i&&(i=new us(t,n,e),r.push(i)),i},this.releaseProgram=function(t){if(0==--t.usedTimes){var e=r.indexOf(t);r[e]=r[r.length-1],r.pop(),t.destroy()}},this.programs=r}function hs(){var t=new WeakMap;return{get:function(e){var n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,r){t.get(e)[n]=r},dispose:function(){t=new WeakMap}}}function ds(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function ps(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function fs(){var t=[],e=0,n=[],r=[],i={id:-1};function a(n,r,a,o,s,c){var u=t[e];return void 0===u?(u={id:n.id,object:n,geometry:r,material:a,program:a.program||i,groupOrder:o,renderOrder:n.renderOrder,z:s,group:c},t[e]=u):(u.id=n.id,u.object=n,u.geometry=r,u.material=a,u.program=a.program||i,u.groupOrder=o,u.renderOrder=n.renderOrder,u.z=s,u.group=c),e++,u}return{opaque:n,transparent:r,init:function(){e=0,n.length=0,r.length=0},push:function(t,e,i,o,s,c){var u=a(t,e,i,o,s,c);(!0===i.transparent?r:n).push(u)},unshift:function(t,e,i,o,s,c){var u=a(t,e,i,o,s,c);(!0===i.transparent?r:n).unshift(u)},finish:function(){for(var n=e,r=t.length;n<r;n++){var i=t[n];if(null===i.id)break;i.id=null,i.object=null,i.geometry=null,i.material=null,i.program=null,i.group=null}},sort:function(t,e){n.length>1&&n.sort(t||ds),r.length>1&&r.sort(e||ps)}}}function ms(){var t=new WeakMap;function e(n){var r=n.target;r.removeEventListener("dispose",e),t.delete(r)}return{get:function(n,r){var i,a=t.get(n);return void 0===a?(i=new fs,t.set(n,new WeakMap),t.get(n).set(r,i),n.addEventListener("dispose",e)):void 0===(i=a.get(r))&&(i=new fs,a.set(r,i)),i},dispose:function(){t=new WeakMap}}}function vs(){var t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":n={direction:new $n,color:new fi};break;case"SpotLight":n={position:new $n,direction:new $n,color:new fi,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new $n,color:new fi,distance:0,decay:0};break;case"HemisphereLight":n={direction:new $n,skyColor:new fi,groundColor:new fi};break;case"RectAreaLight":n={color:new fi,position:new $n,halfWidth:new $n,halfHeight:new $n}}return t[e.id]=n,n}}}var gs=0;function ys(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function xs(){for(var t,e=new vs,n=(t={},{get:function(e){if(void 0!==t[e.id])return t[e.id];var n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowRadius:1,shadowMapSize:new Gn};break;case"PointLight":n={shadowBias:0,shadowRadius:1,shadowMapSize:new Gn,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]},i=0;i<9;i++)r.probe.push(new $n);var a=new $n,o=new ar,s=new ar;return{setup:function(t,i,c){for(var u=0,l=0,h=0,d=0;d<9;d++)r.probe[d].set(0,0,0);var p=0,f=0,m=0,v=0,g=0,y=0,x=0,b=0,_=c.matrixWorldInverse;t.sort(ys),d=0;for(var w=t.length;d<w;d++){var M=t[d],S=M.color,E=M.intensity,T=M.distance,A=M.shadow&&M.shadow.map?M.shadow.map.texture:null;if(M.isAmbientLight)u+=S.r*E,l+=S.g*E,h+=S.b*E;else if(M.isLightProbe)for(var L=0;L<9;L++)r.probe[L].addScaledVector(M.sh.coefficients[L],E);else if(M.isDirectionalLight){if((C=e.get(M)).color.copy(M.color).multiplyScalar(M.intensity),C.direction.setFromMatrixPosition(M.matrixWorld),a.setFromMatrixPosition(M.target.matrixWorld),C.direction.sub(a),C.direction.transformDirection(_),M.castShadow){var R=M.shadow;(P=n.get(M)).shadowBias=R.bias,P.shadowRadius=R.radius,P.shadowMapSize=R.mapSize,r.directionalShadow[p]=P,r.directionalShadowMap[p]=A,r.directionalShadowMatrix[p]=M.shadow.matrix,y++}r.directional[p]=C,p++}else if(M.isSpotLight){if((C=e.get(M)).position.setFromMatrixPosition(M.matrixWorld),C.position.applyMatrix4(_),C.color.copy(S).multiplyScalar(E),C.distance=T,C.direction.setFromMatrixPosition(M.matrixWorld),a.setFromMatrixPosition(M.target.matrixWorld),C.direction.sub(a),C.direction.transformDirection(_),C.coneCos=Math.cos(M.angle),C.penumbraCos=Math.cos(M.angle*(1-M.penumbra)),C.decay=M.decay,M.castShadow){R=M.shadow;(P=n.get(M)).shadowBias=R.bias,P.shadowRadius=R.radius,P.shadowMapSize=R.mapSize,r.spotShadow[m]=P,r.spotShadowMap[m]=A,r.spotShadowMatrix[m]=M.shadow.matrix,b++}r.spot[m]=C,m++}else if(M.isRectAreaLight){(C=e.get(M)).color.copy(S).multiplyScalar(E),C.position.setFromMatrixPosition(M.matrixWorld),C.position.applyMatrix4(_),s.identity(),o.copy(M.matrixWorld),o.premultiply(_),s.extractRotation(o),C.halfWidth.set(.5*M.width,0,0),C.halfHeight.set(0,.5*M.height,0),C.halfWidth.applyMatrix4(s),C.halfHeight.applyMatrix4(s),r.rectArea[v]=C,v++}else if(M.isPointLight){if((C=e.get(M)).position.setFromMatrixPosition(M.matrixWorld),C.position.applyMatrix4(_),C.color.copy(M.color).multiplyScalar(M.intensity),C.distance=M.distance,C.decay=M.decay,M.castShadow){var P;R=M.shadow;(P=n.get(M)).shadowBias=R.bias,P.shadowRadius=R.radius,P.shadowMapSize=R.mapSize,P.shadowCameraNear=R.camera.near,P.shadowCameraFar=R.camera.far,r.pointShadow[f]=P,r.pointShadowMap[f]=A,r.pointShadowMatrix[f]=M.shadow.matrix,x++}r.point[f]=C,f++}else if(M.isHemisphereLight){var C;(C=e.get(M)).direction.setFromMatrixPosition(M.matrixWorld),C.direction.transformDirection(_),C.direction.normalize(),C.skyColor.copy(M.color).multiplyScalar(E),C.groundColor.copy(M.groundColor).multiplyScalar(E),r.hemi[g]=C,g++}}r.ambient[0]=u,r.ambient[1]=l,r.ambient[2]=h;var O=r.hash;O.directionalLength===p&&O.pointLength===f&&O.spotLength===m&&O.rectAreaLength===v&&O.hemiLength===g&&O.numDirectionalShadows===y&&O.numPointShadows===x&&O.numSpotShadows===b||(r.directional.length=p,r.spot.length=m,r.rectArea.length=v,r.point.length=f,r.hemi.length=g,r.directionalShadow.length=y,r.directionalShadowMap.length=y,r.pointShadow.length=x,r.pointShadowMap.length=x,r.spotShadow.length=b,r.spotShadowMap.length=b,r.directionalShadowMatrix.length=y,r.pointShadowMatrix.length=x,r.spotShadowMatrix.length=b,O.directionalLength=p,O.pointLength=f,O.spotLength=m,O.rectAreaLength=v,O.hemiLength=g,O.numDirectionalShadows=y,O.numPointShadows=x,O.numSpotShadows=b,r.version=gs++)},state:r}}function bs(){var t=new xs,e=[],n=[];return{init:function(){e.length=0,n.length=0},state:{lightsArray:e,shadowsArray:n,lights:t},setupLights:function(r){t.setup(e,n,r)},pushLight:function(t){e.push(t)},pushShadow:function(t){n.push(t)}}}function _s(){var t=new WeakMap;function e(n){var r=n.target;r.removeEventListener("dispose",e),t.delete(r)}return{get:function(n,r){var i;return!1===t.has(n)?(i=new bs,t.set(n,new WeakMap),t.get(n).set(r,i),n.addEventListener("dispose",e)):!1===t.get(n).has(r)?(i=new bs,t.get(n).set(r,i)):i=t.get(n).get(r),i},dispose:function(){t=new WeakMap}}}function ws(t){bi.call(this),this.type="MeshDepthMaterial",this.depthPacking=on,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}function Ms(t){bi.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new $n,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}ws.prototype=Object.create(bi.prototype),ws.prototype.constructor=ws,ws.prototype.isMeshDepthMaterial=!0,ws.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.depthPacking=t.depthPacking,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this},Ms.prototype=Object.create(bi.prototype),Ms.prototype.constructor=Ms,Ms.prototype.isMeshDistanceMaterial=!0,Ms.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this};function Ss(t,e,n){var r=new Aa,i=new Gn,a=new Gn,o=new Wn,s=[],c=[],u={},l={0:g,1:v,2:y},h=new xa({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new Gn},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n  float mean = 0.0;\n  float squared_mean = 0.0;\n\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy  ) / resolution ) );\n  for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {\n    #ifdef HORIZONAL_PASS\n      vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n      mean += distribution.x;\n      squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n    #else\n      float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0,  i )  * radius ) / resolution ) );\n      mean += depth;\n      squared_mean += depth * depth;\n    #endif\n  }\n  mean = mean * HALF_SAMPLE_RATE;\n  squared_mean = squared_mean * HALF_SAMPLE_RATE;\n  float std_dev = sqrt( squared_mean - mean * mean );\n  gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),d=h.clone();d.defines.HORIZONAL_PASS=1;var f=new ki;f.setAttribute("position",new Mi(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));var x=new oa(f,h),b=this;function w(n,r){var i=e.update(x);h.uniforms.shadow_pass.value=n.map.texture,h.uniforms.resolution.value=n.mapSize,h.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(r,null,i,h,x,null),d.uniforms.shadow_pass.value=n.mapPass.texture,d.uniforms.resolution.value=n.mapSize,d.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(r,null,i,d,x,null)}function M(t,e,n){var r=t<<0|e<<1|n<<2,i=s[r];return void 0===i&&(i=new ws({depthPacking:sn,morphTargets:t,skinning:e}),s[r]=i),i}function S(t,e,n){var r=t<<0|e<<1|n<<2,i=c[r];return void 0===i&&(i=new Ms({morphTargets:t,skinning:e}),c[r]=i),i}function E(e,n,r,i,a,o){var s=e.geometry,c=null,h=M,d=e.customDepthMaterial;if(!0===r.isPointLight&&(h=S,d=e.customDistanceMaterial),void 0===d){var p=!1;!0===n.morphTargets&&(!0===s.isBufferGeometry?p=s.morphAttributes&&s.morphAttributes.position&&s.morphAttributes.position.length>0:!0===s.isGeometry&&(p=s.morphTargets&&s.morphTargets.length>0));var f=!1;!0===e.isSkinnedMesh&&(!0===n.skinning?f=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",e)),c=h(p,f,!0===e.isInstancedMesh)}else c=d;if(t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length){var v=c.uuid,g=n.uuid,y=u[v];void 0===y&&(y={},u[v]=y);var x=y[g];void 0===x&&(x=c.clone(),y[g]=x),c=x}return c.visible=n.visible,c.wireframe=n.wireframe,c.side=o===m?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:l[n.side],c.clipShadows=n.clipShadows,c.clippingPlanes=n.clippingPlanes,c.clipIntersection=n.clipIntersection,c.wireframeLinewidth=n.wireframeLinewidth,c.linewidth=n.linewidth,!0===r.isPointLight&&!0===c.isMeshDistanceMaterial&&(c.referencePosition.setFromMatrixPosition(r.matrixWorld),c.nearDistance=i,c.farDistance=a),c}function T(n,i,a,o,s){if(!1!==n.visible){if(n.layers.test(i.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&s===m)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);var c=e.update(n),u=n.material;if(Array.isArray(u))for(var l=c.groups,h=0,d=l.length;h<d;h++){var p=l[h],f=u[p.materialIndex];if(f&&f.visible){var v=E(n,f,o,a.near,a.far,s);t.renderBufferDirect(a,null,c,v,n,p)}}else if(u.visible){v=E(n,u,o,a.near,a.far,s);t.renderBufferDirect(a,null,c,v,n,null)}}for(var g=n.children,y=0,x=g.length;y<x;y++)T(g[y],i,a,o,s)}}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=p,this.render=function(e,s,c){if(!1!==b.enabled&&(!1!==b.autoUpdate||!1!==b.needsUpdate)&&0!==e.length){var u=t.getRenderTarget(),l=t.getActiveCubeFace(),h=t.getActiveMipmapLevel(),d=t.state;d.setBlending(_),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(var p=0,f=e.length;p<f;p++){var v=e[p],g=v.shadow;if(void 0!==g){i.copy(g.mapSize);var y=g.getFrameExtents();if(i.multiply(y),a.copy(g.mapSize),(i.x>n||i.y>n)&&(console.warn("THREE.WebGLShadowMap:",v,"has shadow exceeding max texture size, reducing"),i.x>n&&(a.x=Math.floor(n/y.x),i.x=a.x*y.x,g.mapSize.x=a.x),i.y>n&&(a.y=Math.floor(n/y.y),i.y=a.y*y.y,g.mapSize.y=a.y)),null===g.map&&!g.isPointLightShadow&&this.type===m){var x={minFilter:wt,magFilter:wt,format:Ht};g.map=new qn(i.x,i.y,x),g.map.texture.name=v.name+".shadowMap",g.mapPass=new qn(i.x,i.y,x),g.camera.updateProjectionMatrix()}if(null===g.map){x={minFilter:gt,magFilter:gt,format:Ht};g.map=new qn(i.x,i.y,x),g.map.texture.name=v.name+".shadowMap",g.camera.updateProjectionMatrix()}t.setRenderTarget(g.map),t.clear();for(var M=g.getViewportCount(),S=0;S<M;S++){var E=g.getViewport(S);o.set(a.x*E.x,a.y*E.y,a.x*E.z,a.y*E.w),d.viewport(o),g.updateMatrices(v,S),r=g.getFrustum(),T(s,c,g.camera,v,this.type)}g.isPointLightShadow||this.type!==m||w(g,c)}else console.warn("THREE.WebGLShadowMap:",v,"has no shadow.")}b.needsUpdate=!1,t.setRenderTarget(u,l,h)}}}function Es(t,e,n){var r=n.isWebGL2;var i=new function(){var e=!1,n=new Wn,r=null,i=new Wn(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,r,a,o,s){!0===s&&(e*=o,r*=o,a*=o),n.set(e,r,a,o),!1===i.equals(n)&&(t.clearColor(e,r,a,o),i.copy(n))},reset:function(){e=!1,r=null,i.set(-1,0,0,0)}}},a=new function(){var e=!1,n=null,r=null,i=null;return{setTest:function(t){t?xt(2929):bt(2929)},setMask:function(r){n===r||e||(t.depthMask(r),n=r)},setFunc:function(e){if(r!==e){if(e)switch(e){case j:t.depthFunc(512);break;case V:t.depthFunc(519);break;case W:t.depthFunc(513);break;case q:t.depthFunc(515);break;case X:t.depthFunc(514);break;case Y:t.depthFunc(518);break;case Z:t.depthFunc(516);break;case J:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);r=e}},setLocked:function(t){e=t},setClear:function(e){i!==e&&(t.clearDepth(e),i=e)},reset:function(){e=!1,n=null,r=null,i=null}}},u=new function(){var e=!1,n=null,r=null,i=null,a=null,o=null,s=null,c=null,u=null;return{setTest:function(t){e||(t?xt(2960):bt(2960))},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,o){r===e&&i===n&&a===o||(t.stencilFunc(e,n,o),r=e,i=n,a=o)},setOp:function(e,n,r){o===e&&s===n&&c===r||(t.stencilOp(e,n,r),o=e,s=n,c=r)},setLocked:function(t){e=t},setClear:function(e){u!==e&&(t.clearStencil(e),u=e)},reset:function(){e=!1,n=null,r=null,i=null,a=null,o=null,s=null,c=null,u=null}}},l=t.getParameter(34921),h=new Uint8Array(l),d=new Uint8Array(l),p=new Uint8Array(l),f={},m=null,v=null,x=null,b=null,$=null,Q=null,K=null,tt=null,et=null,nt=!1,rt=null,it=null,at=null,ot=null,st=null,ct=t.getParameter(35661),ut=!1,lt=0,ht=t.getParameter(7938);-1!==ht.indexOf("WebGL")?(lt=parseFloat(/^WebGL\ ([0-9])/.exec(ht)[1]),ut=lt>=1):-1!==ht.indexOf("OpenGL ES")&&(lt=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(ht)[1]),ut=lt>=2);var dt=null,pt={},ft=new Wn,mt=new Wn;function vt(e,n,r){var i=new Uint8Array(4),a=t.createTexture();t.bindTexture(e,a),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(var o=0;o<r;o++)t.texImage2D(n+o,0,6408,1,1,0,6408,5121,i);return a}var gt={};function yt(n,i){(h[n]=1,0===d[n]&&(t.enableVertexAttribArray(n),d[n]=1),p[n]!==i)&&((r?t:e.get("ANGLE_instanced_arrays"))[r?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,i),p[n]=i)}function xt(e){!0!==f[e]&&(t.enable(e),f[e]=!0)}function bt(e){!1!==f[e]&&(t.disable(e),f[e]=!1)}gt[3553]=vt(3553,3553,1),gt[34067]=vt(34067,34069,6),i.setClear(0,0,0,1),a.setClear(1),u.setClear(0),xt(2929),a.setFunc(q),Et(!1),Tt(s),xt(2884),St(_);var _t={[A]:32774,[L]:32778,[R]:32779};if(r)_t[P]=32775,_t[C]=32776;else{var wt=e.get("EXT_blend_minmax");null!==wt&&(_t[P]=wt.MIN_EXT,_t[C]=wt.MAX_EXT)}var Mt={[O]:0,[D]:1,[I]:768,[B]:770,[k]:776,[G]:774,[F]:772,[N]:769,[z]:771,[H]:775,[U]:773};function St(e,n,r,i,a,o,s,c){if(e!==_){if(v||(xt(3042),v=!0),e===T)a=a||n,o=o||r,s=s||i,n===b&&a===K||(t.blendEquationSeparate(_t[n],_t[a]),b=n,K=a),r===$&&i===Q&&o===tt&&s===et||(t.blendFuncSeparate(Mt[r],Mt[i],Mt[o],Mt[s]),$=r,Q=i,tt=o,et=s),x=e,nt=null;else if(e!==x||c!==nt){if(b===A&&K===A||(t.blendEquation(32774),b=A,K=A),c)switch(e){case w:t.blendFuncSeparate(1,771,1,771);break;case M:t.blendFunc(1,1);break;case S:t.blendFuncSeparate(0,0,769,771);break;case E:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case w:t.blendFuncSeparate(770,771,1,771);break;case M:t.blendFunc(770,1);break;case S:t.blendFunc(0,769);break;case E:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}$=null,Q=null,tt=null,et=null,x=e,nt=c}}else v&&(bt(3042),v=!1)}function Et(e){rt!==e&&(e?t.frontFace(2304):t.frontFace(2305),rt=e)}function Tt(e){e!==o?(xt(2884),e!==it&&(e===s?t.cullFace(1029):e===c?t.cullFace(1028):t.cullFace(1032))):bt(2884),it=e}function At(e,n,r){e?(xt(32823),ot===n&&st===r||(t.polygonOffset(n,r),ot=n,st=r)):bt(32823)}function Lt(e){void 0===e&&(e=33984+ct-1),dt!==e&&(t.activeTexture(e),dt=e)}return{buffers:{color:i,depth:a,stencil:u},initAttributes:function(){for(var t=0,e=h.length;t<e;t++)h[t]=0},enableAttribute:function(t){yt(t,0)},enableAttributeAndDivisor:yt,disableUnusedAttributes:function(){for(var e=0,n=d.length;e!==n;++e)d[e]!==h[e]&&(t.disableVertexAttribArray(e),d[e]=0)},enable:xt,disable:bt,useProgram:function(e){return m!==e&&(t.useProgram(e),m=e,!0)},setBlending:St,setMaterial:function(t,e){t.side===y?bt(2884):xt(2884);var n=t.side===g;e&&(n=!n),Et(n),t.blending===w&&!1===t.transparent?St(_):St(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),a.setFunc(t.depthFunc),a.setTest(t.depthTest),a.setMask(t.depthWrite),i.setMask(t.colorWrite);var r=t.stencilWrite;u.setTest(r),r&&(u.setMask(t.stencilWriteMask),u.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),u.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),At(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits)},setFlipSided:Et,setCullFace:Tt,setLineWidth:function(e){e!==at&&(ut&&t.lineWidth(e),at=e)},setPolygonOffset:At,setScissorTest:function(t){t?xt(3089):bt(3089)},activeTexture:Lt,bindTexture:function(e,n){null===dt&&Lt();var r=pt[dt];void 0===r&&(r={type:void 0,texture:void 0},pt[dt]=r),r.type===e&&r.texture===n||(t.bindTexture(e,n||gt[e]),r.type=e,r.texture=n)},unbindTexture:function(){var e=pt[dt];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===ft.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),ft.copy(e))},viewport:function(e){!1===mt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),mt.copy(e))},reset:function(){for(var e=0;e<d.length;e++)1===d[e]&&(t.disableVertexAttribArray(e),d[e]=0);f={},dt=null,pt={},m=null,x=null,rt=null,it=null,i.reset(),a.reset(),u.reset()}}}function Ts(t,e,n,r,i,a,o){var s,c=i.isWebGL2,u=i.maxTextures,l=i.maxCubemapSize,h=i.maxTextureSize,d=i.maxSamples,p=new WeakMap,f=!1;try{f="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function m(t,e){return f?new OffscreenCanvas(t,e):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function v(t,e,n,r){var i=1;if((t.width>r||t.height>r)&&(i=r/Math.max(t.width,t.height)),i<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){var a=e?Un.floorPowerOfTwo:Math.floor,o=a(i*t.width),c=a(i*t.height);void 0===s&&(s=m(o,c));var u=n?m(o,c):s;return u.width=o,u.height=c,u.getContext("2d").drawImage(t,0,0,o,c),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+o+"x"+c+")."),u}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function g(t){return Un.isPowerOfTwo(t.width)&&Un.isPowerOfTwo(t.height)}function y(t,e){return t.generateMipmaps&&e&&t.minFilter!==gt&&t.minFilter!==wt}function x(e,n,i,a){t.generateMipmap(e),r.get(n).__maxMipLevel=Math.log(Math.max(i,a))*Math.LOG2E}function b(n,r,i){if(!1===c)return r;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}var a=r;return 6403===r&&(5126===i&&(a=33326),5131===i&&(a=33325),5121===i&&(a=33321)),6407===r&&(5126===i&&(a=34837),5131===i&&(a=34843),5121===i&&(a=32849)),6408===r&&(5126===i&&(a=34836),5131===i&&(a=34842),5121===i&&(a=32856)),33325!==a&&33326!==a&&34842!==a&&34836!==a||e.get("EXT_color_buffer_float"),a}function _(t){return t===gt||t===yt||t===bt?9728:9729}function w(e){var n=e.target;n.removeEventListener("dispose",w),function(e){var n=r.get(e);if(void 0===n.__webglInit)return;t.deleteTexture(n.__webglTexture),r.remove(e)}(n),n.isVideoTexture&&p.delete(n),o.memory.textures--}function M(e){var n=e.target;n.removeEventListener("dispose",M),function(e){var n=r.get(e),i=r.get(e.texture);if(!e)return;void 0!==i.__webglTexture&&t.deleteTexture(i.__webglTexture);e.depthTexture&&e.depthTexture.dispose();if(e.isWebGLCubeRenderTarget)for(var a=0;a<6;a++)t.deleteFramebuffer(n.__webglFramebuffer[a]),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[a]);else t.deleteFramebuffer(n.__webglFramebuffer),n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&t.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer&&t.deleteRenderbuffer(n.__webglColorRenderbuffer),n.__webglDepthRenderbuffer&&t.deleteRenderbuffer(n.__webglDepthRenderbuffer);r.remove(e.texture),r.remove(e)}(n),o.memory.textures--}var S=0;function E(t,e){var i=r.get(t);if(t.isVideoTexture&&function(t){var e=o.render.frame;p.get(t)!==e&&(p.set(t,e),t.update())}(t),t.version>0&&i.__version!==t.version){var a=t.image;if(void 0===a)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else{if(!1!==a.complete)return void O(i,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,i.__webglTexture)}function T(e,i){if(6===e.image.length){var o=r.get(e);if(e.version>0&&o.__version!==e.version){C(o,e),n.activeTexture(33984+i),n.bindTexture(34067,o.__webglTexture),t.pixelStorei(37440,e.flipY);for(var s=e&&(e.isCompressedTexture||e.image[0].isCompressedTexture),u=e.image[0]&&e.image[0].isDataTexture,h=[],d=0;d<6;d++)h[d]=s||u?u?e.image[d].image:e.image[d]:v(e.image[d],!1,!0,l);var p,f=h[0],m=g(f)||c,_=a.convert(e.format),w=a.convert(e.type),M=b(e.internalFormat,_,w);if(P(34067,e,m),s){for(d=0;d<6;d++){p=h[d].mipmaps;for(var S=0;S<p.length;S++){var E=p[S];e.format!==Ht&&e.format!==Gt?null!==_?n.compressedTexImage2D(34069+d,S,M,E.width,E.height,0,E.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):n.texImage2D(34069+d,S,M,E.width,E.height,0,_,w,E.data)}}o.__maxMipLevel=p.length-1}else{p=e.mipmaps;for(d=0;d<6;d++)if(u){n.texImage2D(34069+d,0,M,h[d].width,h[d].height,0,_,w,h[d].data);for(S=0;S<p.length;S++){var T=(E=p[S]).image[d].image;n.texImage2D(34069+d,S+1,M,T.width,T.height,0,_,w,T.data)}}else{n.texImage2D(34069+d,0,M,_,w,h[d]);for(S=0;S<p.length;S++){E=p[S];n.texImage2D(34069+d,S+1,M,_,w,E.image[d])}}o.__maxMipLevel=p.length}y(e,m)&&x(34067,e,f.width,f.height),o.__version=e.version,e.onUpdate&&e.onUpdate(e)}else n.activeTexture(33984+i),n.bindTexture(34067,o.__webglTexture)}}function A(t,e){n.activeTexture(33984+e),n.bindTexture(34067,r.get(t).__webglTexture)}var L={[ft]:10497,[mt]:33071,[vt]:33648},R={[gt]:9728,[yt]:9984,[bt]:9986,[wt]:9729,[Mt]:9985,[Et]:9987};function P(n,a,o){o?(t.texParameteri(n,10242,L[a.wrapS]),t.texParameteri(n,10243,L[a.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,L[a.wrapR]),t.texParameteri(n,10240,R[a.magFilter]),t.texParameteri(n,10241,R[a.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),a.wrapS===mt&&a.wrapT===mt||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,_(a.magFilter)),t.texParameteri(n,10241,_(a.minFilter)),a.minFilter!==gt&&a.minFilter!==wt&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));var s=e.get("EXT_texture_filter_anisotropic");if(s){if(a.type===Dt&&null===e.get("OES_texture_float_linear"))return;if(a.type===It&&null===(c||e.get("OES_texture_half_float_linear")))return;(a.anisotropy>1||r.get(a).__currentAnisotropy)&&(t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,i.getMaxAnisotropy())),r.get(a).__currentAnisotropy=a.anisotropy)}}function C(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",w),e.__webglTexture=t.createTexture(),o.memory.textures++)}function O(e,r,i){var o=3553;r.isDataTexture2DArray&&(o=35866),r.isDataTexture3D&&(o=32879),C(e,r),n.activeTexture(33984+i),n.bindTexture(o,e.__webglTexture),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment);var s=function(t){return!c&&(t.wrapS!==mt||t.wrapT!==mt||t.minFilter!==gt&&t.minFilter!==wt)}(r)&&!1===g(r.image),u=v(r.image,s,!1,h),l=g(u)||c,d=a.convert(r.format),p=a.convert(r.type),f=b(r.internalFormat,d,p);P(o,r,l);var m,_=r.mipmaps;if(r.isDepthTexture)f=6402,c?f=r.type===Dt?36012:r.type===Ot?33190:r.type===Ft?35056:33189:r.type===Dt&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),r.format===Wt&&6402===f&&r.type!==Pt&&r.type!==Ot&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),r.type=Pt,p=a.convert(r.type)),r.format===qt&&6402===f&&(f=34041,r.type!==Ft&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),r.type=Ft,p=a.convert(r.type))),n.texImage2D(3553,0,f,u.width,u.height,0,d,p,null);else if(r.isDataTexture)if(_.length>0&&l){for(var w=0,M=_.length;w<M;w++)m=_[w],n.texImage2D(3553,w,f,m.width,m.height,0,d,p,m.data);r.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(3553,0,f,u.width,u.height,0,d,p,u.data),e.__maxMipLevel=0;else if(r.isCompressedTexture){for(w=0,M=_.length;w<M;w++)m=_[w],r.format!==Ht&&r.format!==Gt?null!==d?n.compressedTexImage2D(3553,w,f,m.width,m.height,0,m.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):n.texImage2D(3553,w,f,m.width,m.height,0,d,p,m.data);e.__maxMipLevel=_.length-1}else if(r.isDataTexture2DArray)n.texImage3D(35866,0,f,u.width,u.height,u.depth,0,d,p,u.data),e.__maxMipLevel=0;else if(r.isDataTexture3D)n.texImage3D(32879,0,f,u.width,u.height,u.depth,0,d,p,u.data),e.__maxMipLevel=0;else if(_.length>0&&l){for(w=0,M=_.length;w<M;w++)m=_[w],n.texImage2D(3553,w,f,d,p,m);r.generateMipmaps=!1,e.__maxMipLevel=_.length-1}else n.texImage2D(3553,0,f,d,p,u),e.__maxMipLevel=0;y(r,l)&&x(o,r,u.width,u.height),e.__version=r.version,r.onUpdate&&r.onUpdate(r)}function D(e,i,o,s){var c=a.convert(i.texture.format),u=a.convert(i.texture.type),l=b(i.texture.internalFormat,c,u);n.texImage2D(s,0,l,i.width,i.height,0,c,u,null),t.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,s,r.get(i.texture).__webglTexture,0),t.bindFramebuffer(36160,null)}function I(e,n,r){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){var i=33189;if(r){var o=n.depthTexture;o&&o.isDepthTexture&&(o.type===Dt?i=36012:o.type===Ot&&(i=33190));var s=B(n);t.renderbufferStorageMultisample(36161,s,i,n.width,n.height)}else t.renderbufferStorage(36161,i,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(r){s=B(n);t.renderbufferStorageMultisample(36161,s,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{var c=a.convert(n.texture.format),u=a.convert(n.texture.type);i=b(n.texture.internalFormat,c,u);if(r){s=B(n);t.renderbufferStorageMultisample(36161,s,i,n.width,n.height)}else t.renderbufferStorage(36161,i,n.width,n.height)}t.bindRenderbuffer(36161,null)}function N(e){var n=r.get(e),i=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(i)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,n){if(n&&n.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(36160,e),!n.depthTexture||!n.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");r.get(n.depthTexture).__webglTexture&&n.depthTexture.image.width===n.width&&n.depthTexture.image.height===n.height||(n.depthTexture.image.width=n.width,n.depthTexture.image.height=n.height,n.depthTexture.needsUpdate=!0),E(n.depthTexture,0);var i=r.get(n.depthTexture).__webglTexture;if(n.depthTexture.format===Wt)t.framebufferTexture2D(36160,36096,3553,i,0);else{if(n.depthTexture.format!==qt)throw new Error("Unknown depthTexture format");t.framebufferTexture2D(36160,33306,3553,i,0)}}(n.__webglFramebuffer,e)}else if(i){n.__webglDepthbuffer=[];for(var a=0;a<6;a++)t.bindFramebuffer(36160,n.__webglFramebuffer[a]),n.__webglDepthbuffer[a]=t.createRenderbuffer(),I(n.__webglDepthbuffer[a],e,!1)}else t.bindFramebuffer(36160,n.__webglFramebuffer),n.__webglDepthbuffer=t.createRenderbuffer(),I(n.__webglDepthbuffer,e,!1);t.bindFramebuffer(36160,null)}function B(t){return c&&t.isWebGLMultisampleRenderTarget?Math.min(d,t.samples):0}var z=!1,F=!1;this.allocateTextureUnit=function(){var t=S;return t>=u&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+u),S+=1,t},this.resetTextureUnits=function(){S=0},this.setTexture2D=E,this.setTexture2DArray=function(t,e){var i=r.get(t);t.version>0&&i.__version!==t.version?O(i,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,i.__webglTexture))},this.setTexture3D=function(t,e){var i=r.get(t);t.version>0&&i.__version!==t.version?O(i,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,i.__webglTexture))},this.setTextureCube=T,this.setTextureCubeDynamic=A,this.setupRenderTarget=function(e){var i=r.get(e),s=r.get(e.texture);e.addEventListener("dispose",M),s.__webglTexture=t.createTexture(),o.memory.textures++;var u=!0===e.isWebGLCubeRenderTarget,l=!0===e.isWebGLMultisampleRenderTarget,h=g(e)||c;if(!c||e.texture.format!==Gt||e.texture.type!==Dt&&e.texture.type!==It||(e.texture.format=Ht,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),u){i.__webglFramebuffer=[];for(var d=0;d<6;d++)i.__webglFramebuffer[d]=t.createFramebuffer()}else if(i.__webglFramebuffer=t.createFramebuffer(),l)if(c){i.__webglMultisampledFramebuffer=t.createFramebuffer(),i.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,i.__webglColorRenderbuffer);var p=a.convert(e.texture.format),f=a.convert(e.texture.type),m=b(e.texture.internalFormat,p,f),v=B(e);t.renderbufferStorageMultisample(36161,v,m,e.width,e.height),t.bindFramebuffer(36160,i.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,i.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(i.__webglDepthRenderbuffer=t.createRenderbuffer(),I(i.__webglDepthRenderbuffer,e,!0)),t.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(u){n.bindTexture(34067,s.__webglTexture),P(34067,e.texture,h);for(d=0;d<6;d++)D(i.__webglFramebuffer[d],e,36064,34069+d);y(e.texture,h)&&x(34067,e.texture,e.width,e.height),n.bindTexture(34067,null)}else n.bindTexture(3553,s.__webglTexture),P(3553,e.texture,h),D(i.__webglFramebuffer,e,36064,3553),y(e.texture,h)&&x(3553,e.texture,e.width,e.height),n.bindTexture(3553,null);e.depthBuffer&&N(e)},this.updateRenderTargetMipmap=function(t){var e=t.texture;if(y(e,g(t)||c)){var i=t.isWebGLCubeRenderTarget?34067:3553,a=r.get(e).__webglTexture;n.bindTexture(i,a),x(i,e,t.width,t.height),n.bindTexture(i,null)}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(c){var n=r.get(e);t.bindFramebuffer(36008,n.__webglMultisampledFramebuffer),t.bindFramebuffer(36009,n.__webglFramebuffer);var i=e.width,a=e.height,o=16384;e.depthBuffer&&(o|=256),e.stencilBuffer&&(o|=1024),t.blitFramebuffer(0,0,i,a,0,0,i,a,o,9728),t.bindFramebuffer(36160,n.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===z&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),z=!0),t=t.texture),E(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===F&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),F=!0),t=t.texture),t&&t.isCubeTexture||Array.isArray(t.image)&&6===t.image.length?T(t,e):A(t,e)}}function As(t,e,n){var r=n.isWebGL2;return{convert:function(t){var n;if(t===At)return 5121;if(t===Nt)return 32819;if(t===Bt)return 32820;if(t===zt)return 33635;if(t===Lt)return 5120;if(t===Rt)return 5122;if(t===Pt)return 5123;if(t===Ct)return 5124;if(t===Ot)return 5125;if(t===Dt)return 5126;if(t===It)return r?5131:null!==(n=e.get("OES_texture_half_float"))?n.HALF_FLOAT_OES:null;if(t===Ut)return 6406;if(t===Gt)return 6407;if(t===Ht)return 6408;if(t===kt)return 6409;if(t===jt)return 6410;if(t===Wt)return 6402;if(t===qt)return 34041;if(t===Xt)return 6403;if(t===Yt)return 36244;if(t===Zt)return 33319;if(t===Jt)return 33320;if(t===$t)return 36248;if(t===Qt)return 36249;if(t===Kt||t===te||t===ee||t===ne){if(null===(n=e.get("WEBGL_compressed_texture_s3tc")))return null;if(t===Kt)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===te)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===ee)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===ne)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===re||t===ie||t===ae||t===oe){if(null===(n=e.get("WEBGL_compressed_texture_pvrtc")))return null;if(t===re)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ie)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ae)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===oe)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===se)return null!==(n=e.get("WEBGL_compressed_texture_etc1"))?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((t===ce||t===ue)&&null!==(n=e.get("WEBGL_compressed_texture_etc"))){if(t===ce)return n.COMPRESSED_RGB8_ETC2;if(t===ue)return n.COMPRESSED_RGBA8_ETC2_EAC}return t===le||t===he||t===de||t===pe||t===fe||t===me||t===ve||t===ge||t===ye||t===xe||t===be||t===_e||t===we||t===Me||t===Ee||t===Te||t===Ae||t===Le||t===Re||t===Pe||t===Ce||t===Oe||t===De||t===Ie||t===Ne||t===Be||t===ze||t===Fe?null!==(n=e.get("WEBGL_compressed_texture_astc"))?t:null:t===Se?null!==(n=e.get("EXT_texture_compression_bptc"))?t:null:t===Ft?r?34042:null!==(n=e.get("WEBGL_depth_texture"))?n.UNSIGNED_INT_24_8_WEBGL:null:void 0}}}function Ls(t){_a.call(this),this.cameras=t||[]}function Rs(){Mr.call(this),this.type="Group"}function Ps(t,e){var n=this,r=null,i=1,a=null,o="local-floor",s=null,c=[],u=new Map,l=new _a;l.layers.enable(1),l.viewport=new Wn;var h=new _a;h.layers.enable(2),h.viewport=new Wn;var d=new Ls([l,h]);d.layers.enable(1),d.layers.enable(2);var p=null,f=null;function m(t){var e=u.get(t.inputSource);e&&(e.targetRay&&e.targetRay.dispatchEvent({type:t.type}),e.grip&&e.grip.dispatchEvent({type:t.type}))}function v(){u.forEach((function(t,e){t.targetRay&&(t.targetRay.dispatchEvent({type:"disconnected",data:e}),t.targetRay.visible=!1),t.grip&&(t.grip.dispatchEvent({type:"disconnected",data:e}),t.grip.visible=!1)})),u.clear(),t.setFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),M.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function g(t){a=t,M.setContext(r),M.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}function y(t){for(var e=r.inputSources,n=0;n<c.length;n++)u.set(e[n],c[n]);for(n=0;n<t.removed.length;n++){var i=t.removed[n];(a=u.get(i))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"disconnected",data:i}),a.grip&&a.grip.dispatchEvent({type:"disconnected",data:i}),u.delete(i))}for(n=0;n<t.added.length;n++){var a;i=t.added[n];(a=u.get(i))&&(a.targetRay&&a.targetRay.dispatchEvent({type:"connected",data:i}),a.grip&&a.grip.dispatchEvent({type:"connected",data:i}))}}this.enabled=!1,this.isPresenting=!1,this.getController=function(t){var e=c[t];return void 0===e&&(e={},c[t]=e),void 0===e.targetRay&&(e.targetRay=new Rs,e.targetRay.matrixAutoUpdate=!1,e.targetRay.visible=!1),e.targetRay},this.getControllerGrip=function(t){var e=c[t];return void 0===e&&(e={},c[t]=e),void 0===e.grip&&(e.grip=new Rs,e.grip.matrixAutoUpdate=!1,e.grip.visible=!1),e.grip},this.setFramebufferScaleFactor=function(t){i=t,1==n.isPresenting&&console.warn("WebXRManager: Cannot change framebuffer scale while presenting VR content")},this.setReferenceSpaceType=function(t){o=t},this.getReferenceSpace=function(){return a},this.getSession=function(){return r},this.setSession=function(t){if(null!==(r=t)){r.addEventListener("select",m),r.addEventListener("selectstart",m),r.addEventListener("selectend",m),r.addEventListener("squeeze",m),r.addEventListener("squeezestart",m),r.addEventListener("squeezeend",m),r.addEventListener("end",v);var n=e.getContextAttributes(),a={antialias:n.antialias,alpha:n.alpha,depth:n.depth,stencil:n.stencil,framebufferScaleFactor:i},s=new XRWebGLLayer(r,e,a);r.updateRenderState({baseLayer:s}),r.requestReferenceSpace(o).then(g),r.addEventListener("inputsourceschange",y)}};var x=new $n,b=new $n;function _(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.getInverse(t.matrixWorld)}this.getCamera=function(t){d.near=h.near=l.near=t.near,d.far=h.far=l.far=t.far,p===d.near&&f===d.far||(r.updateRenderState({depthNear:d.near,depthFar:d.far}),p=d.near,f=d.far);var e=t.parent,n=d.cameras;_(d,e);for(var i=0;i<n.length;i++)_(n[i],e);t.matrixWorld.copy(d.matrixWorld);for(var a=t.children,o=(i=0,a.length);i<o;i++)a[i].updateMatrixWorld(!0);return function(t,e,n){x.setFromMatrixPosition(e.matrixWorld),b.setFromMatrixPosition(n.matrixWorld);var r=x.distanceTo(b),i=e.projectionMatrix.elements,a=n.projectionMatrix.elements,o=i[14]/(i[10]-1),s=i[14]/(i[10]+1),c=(i[9]+1)/i[5],u=(i[9]-1)/i[5],l=(i[8]-1)/i[0],h=(a[8]+1)/a[0],d=o*l,p=o*h,f=r/(-l+h),m=f*-l;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.getInverse(t.matrixWorld);var v=o+f,g=s+f,y=d-m,_=p+(r-m),w=c*s/g*v,M=u*s/g*v;t.projectionMatrix.makePerspective(y,_,w,M,v,g)}(d,l,h),d};var w=null;var M=new Ra;M.setAnimationLoop((function(e,n){if(null!==(s=n.getViewerPose(a))){var i=s.views,o=r.renderState.baseLayer;t.setFramebuffer(o.framebuffer);for(var u=0;u<i.length;u++){var l=i[u],h=o.getViewport(l),p=d.cameras[u];p.matrix.fromArray(l.transform.matrix),p.projectionMatrix.fromArray(l.projectionMatrix),p.viewport.set(h.x,h.y,h.width,h.height),0===u&&d.matrix.copy(p.matrix)}}var f=r.inputSources;for(u=0;u<c.length;u++){var m=c[u],v=f[u],g=null,y=null;v&&(m.targetRay&&null!==(g=n.getPose(v.targetRaySpace,a))&&(m.targetRay.matrix.fromArray(g.transform.matrix),m.targetRay.matrix.decompose(m.targetRay.position,m.targetRay.rotation,m.targetRay.scale)),m.grip&&v.gripSpace&&null!==(y=n.getPose(v.gripSpace,a))&&(m.grip.matrix.fromArray(y.transform.matrix),m.grip.matrix.decompose(m.grip.position,m.grip.rotation,m.grip.scale))),m.targetRay&&(m.targetRay.visible=null!==g),m.grip&&(m.grip.visible=null!==y)}w&&w(e,n)})),this.setAnimationLoop=function(t){w=t},this.dispose=function(){}}function Cs(t){var e=void 0!==(t=t||{}).canvas?t.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),n=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,i=void 0===t.depth||t.depth,a=void 0===t.stencil||t.stencil,o=void 0!==t.antialias&&t.antialias,s=void 0===t.premultipliedAlpha||t.premultipliedAlpha,c=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,u=void 0!==t.powerPreference?t.powerPreference:"default",l=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat,h=null,d=null;this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=$e,this.physicallyCorrectLights=!1,this.toneMapping=et,this.toneMappingExposure=1,this.toneMappingWhitePoint=1,this.maxMorphTargets=8,this.maxMorphNormals=4;var p,f,m,v,y,x,b,_,w,M,S,E,T,A,L,R,P,C,O=this,D=!1,I=null,N=0,B=0,z=null,F=null,U=-1,G={geometry:null,program:null,wireframe:!1},H=null,k=null,j=new Wn,V=new Wn,W=null,q=e.width,X=e.height,Y=1,Z=null,J=null,$=new Wn(0,0,q,X),Q=new Wn(0,0,q,X),K=!1,tt=new Aa,nt=new Fa,rt=!1,it=!1,at=new ar,ot=new $n;function st(){return null===z?Y:1}try{var ct={alpha:r,depth:i,stencil:a,antialias:o,premultipliedAlpha:s,preserveDrawingBuffer:c,powerPreference:u,failIfMajorPerformanceCaveat:l,xrCompatible:!0};if(e.addEventListener("webglcontextlost",dt,!1),e.addEventListener("webglcontextrestored",pt,!1),null===(p=n||e.getContext("webgl",ct)||e.getContext("experimental-webgl",ct)))throw null!==e.getContext("webgl")?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.");void 0===p.getShaderPrecisionFormat&&(p.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function ut(){f=new Ua(p),!1===(m=new za(p,f,t)).isWebGL2&&(f.get("WEBGL_depth_texture"),f.get("OES_texture_float"),f.get("OES_texture_half_float"),f.get("OES_texture_half_float_linear"),f.get("OES_standard_derivatives"),f.get("OES_element_index_uint"),f.get("ANGLE_instanced_arrays")),f.get("OES_texture_float_linear"),C=new As(p,f,m),(v=new Es(p,f,m)).scissor(V.copy(Q).multiplyScalar(Y).floor()),v.viewport(j.copy($).multiplyScalar(Y).floor()),y=new ka(p),x=new hs,b=new Ts(p,f,v,x,m,C,y),_=new Pa(p,m),w=new Ga(p,_,y),M=new Wa(p,w,_,y),L=new Va(p),S=new ls(O,f,m),E=new ms,T=new _s,A=new Na(O,v,M,s),R=new Ba(p,f,y,m),P=new Ha(p,f,y,m),y.programs=S.programs,O.capabilities=m,O.extensions=f,O.properties=x,O.renderLists=E,O.state=v,O.info=y}ut();var lt=new Ps(O,p);this.xr=lt;var ht=new Ss(O,M,m.maxTextureSize);function dt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),D=!0}function pt(){console.log("THREE.WebGLRenderer: Context Restored."),D=!1,ut()}function ft(t){var e=t.target;e.removeEventListener("dispose",ft),function(t){mt(t),x.remove(t)}(e)}function mt(t){var e=x.get(t).program;t.program=void 0,void 0!==e&&S.releaseProgram(e)}this.shadowMap=ht,this.getContext=function(){return p},this.getContextAttributes=function(){return p.getContextAttributes()},this.forceContextLoss=function(){var t=f.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){var t=f.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return Y},this.setPixelRatio=function(t){void 0!==t&&(Y=t,this.setSize(q,X,!1))},this.getSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),t=new Gn),t.set(q,X)},this.setSize=function(t,n,r){lt.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(q=t,X=n,e.width=Math.floor(t*Y),e.height=Math.floor(n*Y),!1!==r&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),t=new Gn),t.set(q*Y,X*Y).floor()},this.setDrawingBufferSize=function(t,n,r){q=t,X=n,Y=r,e.width=Math.floor(t*r),e.height=Math.floor(n*r),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return void 0===t&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),t=new Wn),t.copy(j)},this.getViewport=function(t){return t.copy($)},this.setViewport=function(t,e,n,r){t.isVector4?$.set(t.x,t.y,t.z,t.w):$.set(t,e,n,r),v.viewport(j.copy($).multiplyScalar(Y).floor())},this.getScissor=function(t){return t.copy(Q)},this.setScissor=function(t,e,n,r){t.isVector4?Q.set(t.x,t.y,t.z,t.w):Q.set(t,e,n,r),v.scissor(V.copy(Q).multiplyScalar(Y).floor())},this.getScissorTest=function(){return K},this.setScissorTest=function(t){v.setScissorTest(K=t)},this.setOpaqueSort=function(t){Z=t},this.setTransparentSort=function(t){J=t},this.getClearColor=function(){return A.getClearColor()},this.setClearColor=function(){A.setClearColor.apply(A,arguments)},this.getClearAlpha=function(){return A.getClearAlpha()},this.setClearAlpha=function(){A.setClearAlpha.apply(A,arguments)},this.clear=function(t,e,n){var r=0;(void 0===t||t)&&(r|=16384),(void 0===e||e)&&(r|=256),(void 0===n||n)&&(r|=1024),p.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",dt,!1),e.removeEventListener("webglcontextrestored",pt,!1),E.dispose(),T.dispose(),x.dispose(),M.dispose(),lt.dispose(),yt.stop(),this.forceContextLoss()},this.renderBufferImmediate=function(t,e){v.initAttributes();var n=x.get(t);t.hasPositions&&!n.position&&(n.position=p.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=p.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=p.createBuffer()),t.hasColors&&!n.color&&(n.color=p.createBuffer());var r=e.getAttributes();t.hasPositions&&(p.bindBuffer(34962,n.position),p.bufferData(34962,t.positionArray,35048),v.enableAttribute(r.position),p.vertexAttribPointer(r.position,3,5126,!1,0,0)),t.hasNormals&&(p.bindBuffer(34962,n.normal),p.bufferData(34962,t.normalArray,35048),v.enableAttribute(r.normal),p.vertexAttribPointer(r.normal,3,5126,!1,0,0)),t.hasUvs&&(p.bindBuffer(34962,n.uv),p.bufferData(34962,t.uvArray,35048),v.enableAttribute(r.uv),p.vertexAttribPointer(r.uv,2,5126,!1,0,0)),t.hasColors&&(p.bindBuffer(34962,n.color),p.bufferData(34962,t.colorArray,35048),v.enableAttribute(r.color),p.vertexAttribPointer(r.color,3,5126,!1,0,0)),v.disableUnusedAttributes(),p.drawArrays(4,0,t.count),t.count=0};var vt=new Sr;this.renderBufferDirect=function(t,e,n,r,i,a){null===e&&(e=vt);var o=i.isMesh&&i.matrixWorld.determinant()<0,s=Mt(t,e,r,i);v.setMaterial(r,o);var c=!1;G.geometry===n.id&&G.program===s.id&&G.wireframe===(!0===r.wireframe)||(G.geometry=n.id,G.program=s.id,G.wireframe=!0===r.wireframe,c=!0),(r.morphTargets||r.morphNormals)&&(L.update(i,n,r,s),c=!0);var u=n.index,l=n.attributes.position;if(null===u){if(void 0===l||0===l.count)return}else if(0===u.count)return;var h,d=1;!0===r.wireframe&&(u=w.getWireframeAttribute(n),d=2);var g=R;null!==u&&(h=_.get(u),(g=P).setIndex(h)),c&&(!function(t,e,n,r){if(!1===m.isWebGL2&&(t.isInstancedMesh||e.isInstancedBufferGeometry)&&null===f.get("ANGLE_instanced_arrays"))return;v.initAttributes();var i=e.attributes,a=r.getAttributes(),o=n.defaultAttributeValues;for(var s in a){var c=a[s];if(c>=0){var u=i[s];if(void 0!==u){var l=u.normalized,h=u.itemSize;if(void 0===(M=_.get(u)))continue;var d=M.buffer,g=M.type,y=M.bytesPerElement;if(u.isInterleavedBufferAttribute){var x=u.data,b=x.stride,w=u.offset;x&&x.isInstancedInterleavedBuffer?(v.enableAttributeAndDivisor(c,x.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=x.meshPerAttribute*x.count)):v.enableAttribute(c),p.bindBuffer(34962,d),p.vertexAttribPointer(c,h,g,l,b*y,w*y)}else u.isInstancedBufferAttribute?(v.enableAttributeAndDivisor(c,u.meshPerAttribute),void 0===e.maxInstancedCount&&(e.maxInstancedCount=u.meshPerAttribute*u.count)):v.enableAttribute(c),p.bindBuffer(34962,d),p.vertexAttribPointer(c,h,g,l,0,0)}else if("instanceMatrix"===s){var M;if(void 0===(M=_.get(t.instanceMatrix)))continue;d=M.buffer,g=M.type;v.enableAttributeAndDivisor(c+0,1),v.enableAttributeAndDivisor(c+1,1),v.enableAttributeAndDivisor(c+2,1),v.enableAttributeAndDivisor(c+3,1),p.bindBuffer(34962,d),p.vertexAttribPointer(c+0,4,g,!1,64,0),p.vertexAttribPointer(c+1,4,g,!1,64,16),p.vertexAttribPointer(c+2,4,g,!1,64,32),p.vertexAttribPointer(c+3,4,g,!1,64,48)}else if(void 0!==o){var S=o[s];if(void 0!==S)switch(S.length){case 2:p.vertexAttrib2fv(c,S);break;case 3:p.vertexAttrib3fv(c,S);break;case 4:p.vertexAttrib4fv(c,S);break;default:p.vertexAttrib1fv(c,S)}}}}v.disableUnusedAttributes()}(i,n,r,s),null!==u&&p.bindBuffer(34963,h.buffer));var y=null!==u?u.count:l.count,x=n.drawRange.start*d,b=n.drawRange.count*d,M=null!==a?a.start*d:0,S=null!==a?a.count*d:1/0,E=Math.max(x,M),T=Math.min(y,x+b,M+S)-1,A=Math.max(0,T-E+1);if(0!==A){if(i.isMesh)!0===r.wireframe?(v.setLineWidth(r.wireframeLinewidth*st()),g.setMode(1)):g.setMode(4);else if(i.isLine){var C=r.linewidth;void 0===C&&(C=1),v.setLineWidth(C*st()),i.isLineSegments?g.setMode(1):i.isLineLoop?g.setMode(2):g.setMode(3)}else i.isPoints?g.setMode(0):i.isSprite&&g.setMode(4);i.isInstancedMesh?g.renderInstances(n,E,A,i.count):n.isInstancedBufferGeometry?g.renderInstances(n,E,A,n.maxInstancedCount):g.render(E,A)}},this.compile=function(t,e){(d=T.get(t,e)).init(),t.traverse((function(t){t.isLight&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(e);var n={};t.traverse((function(e){if(e.material)if(Array.isArray(e.material))for(var r=0;r<e.material.length;r++)e.material[r].uuid in n==!1&&(wt(e.material[r],t,e),n[e.material[r].uuid]=!0);else e.material.uuid in n==!1&&(wt(e.material,t,e),n[e.material.uuid]=!0)}))};var gt=null;var yt=new Ra;function xt(t,e,n,r){if(!1!==t.visible){if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||tt.intersectsSprite(t)){r&&ot.setFromMatrixPosition(t.matrixWorld).applyMatrix4(at);var i=M.update(t);(a=t.material).visible&&h.push(t,i,a,n,ot.z,null)}}else if(t.isImmediateRenderObject)r&&ot.setFromMatrixPosition(t.matrixWorld).applyMatrix4(at),h.push(t,null,t.material,n,ot.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==y.render.frame&&(t.skeleton.update(),t.skeleton.frame=y.render.frame),!t.frustumCulled||tt.intersectsObject(t))){r&&ot.setFromMatrixPosition(t.matrixWorld).applyMatrix4(at);i=M.update(t);var a=t.material;if(Array.isArray(a))for(var o=i.groups,s=0,c=o.length;s<c;s++){var u=o[s],l=a[u.materialIndex];l&&l.visible&&h.push(t,i,l,n,ot.z,u)}else a.visible&&h.push(t,i,a,n,ot.z,null)}var p=t.children;for(s=0,c=p.length;s<c;s++)xt(p[s],e,n,r)}}function bt(t,e,n,r){for(var i=0,a=t.length;i<a;i++){var o=t[i],s=o.object,c=o.geometry,u=void 0===r?o.material:r,l=o.group;if(n.isArrayCamera){k=n;for(var h=n.cameras,p=0,f=h.length;p<f;p++){var m=h[p];s.layers.test(m.layers)&&(v.viewport(j.copy(m.viewport)),d.setupLights(m),_t(s,e,m,c,u,l))}}else k=null,_t(s,e,n,c,u,l)}}function _t(t,e,n,r,i,a){if(t.onBeforeRender(O,e,n,r,i,a),d=T.get(e,k||n),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){var o=Mt(n,e,i,t);v.setMaterial(i),G.geometry=null,G.program=null,G.wireframe=!1,function(t,e){t.render((function(t){O.renderBufferImmediate(t,e)}))}(t,o)}else O.renderBufferDirect(n,e,r,i,t,a);t.onAfterRender(O,e,n,r,i,a),d=T.get(e,k||n)}function wt(t,e,n){var r=x.get(t),i=d.state.lights,a=d.state.shadowsArray,o=i.state.version,s=S.getParameters(t,i.state,a,e,nt.numPlanes,nt.numIntersection,n),c=S.getProgramCacheKey(s),u=r.program,l=!0;if(void 0===u)t.addEventListener("dispose",ft);else if(u.cacheKey!==c)mt(t);else if(r.lightsStateVersion!==o)r.lightsStateVersion=o,l=!1;else{if(void 0!==s.shaderID)return;l=!1}l&&(u=S.acquireProgram(s,c),r.program=u,r.uniforms=s.uniforms,r.environment=t.isMeshStandardMaterial?e.environment:null,r.outputEncoding=O.outputEncoding,t.program=u);var h=u.getAttributes();if(t.morphTargets){t.numSupportedMorphTargets=0;for(var p=0;p<O.maxMorphTargets;p++)h["morphTarget"+p]>=0&&t.numSupportedMorphTargets++}if(t.morphNormals){t.numSupportedMorphNormals=0;for(p=0;p<O.maxMorphNormals;p++)h["morphNormal"+p]>=0&&t.numSupportedMorphNormals++}var f=r.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(r.numClippingPlanes=nt.numPlanes,r.numIntersection=nt.numIntersection,f.clippingPlanes=nt.uniform),r.fog=e.fog,r.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),r.lightsStateVersion=o,r.needsLights&&(f.ambientLightColor.value=i.state.ambient,f.lightProbe.value=i.state.probe,f.directionalLights.value=i.state.directional,f.directionalLightShadows.value=i.state.directionalShadow,f.spotLights.value=i.state.spot,f.spotLightShadows.value=i.state.spotShadow,f.rectAreaLights.value=i.state.rectArea,f.pointLights.value=i.state.point,f.pointLightShadows.value=i.state.pointShadow,f.hemisphereLights.value=i.state.hemi,f.directionalShadowMap.value=i.state.directionalShadowMap,f.directionalShadowMatrix.value=i.state.directionalShadowMatrix,f.spotShadowMap.value=i.state.spotShadowMap,f.spotShadowMatrix.value=i.state.spotShadowMatrix,f.pointShadowMap.value=i.state.pointShadowMap,f.pointShadowMatrix.value=i.state.pointShadowMatrix);var m=r.program.getUniforms(),v=Vo.seqWithValue(m.seq,f);r.uniformsList=v}function Mt(t,e,n,r){b.resetTextureUnits();var i=e.fog,a=n.isMeshStandardMaterial?e.environment:null,o=x.get(n),s=d.state.lights;if(rt&&(it||t!==H)){var c=t===H&&n.id===U;nt.setState(n.clippingPlanes,n.clipIntersection,n.clipShadows,t,o,c)}n.version===o.__version?void 0===o.program||n.fog&&o.fog!==i||o.environment!==a||o.needsLights&&o.lightsStateVersion!==s.state.version?wt(n,e,r):void 0===o.numClippingPlanes||o.numClippingPlanes===nt.numPlanes&&o.numIntersection===nt.numIntersection?o.outputEncoding!==O.outputEncoding&&wt(n,e,r):wt(n,e,r):(wt(n,e,r),o.__version=n.version);var u,l,h=!1,f=!1,y=!1,_=o.program,w=_.getUniforms(),M=o.uniforms;if(v.useProgram(_.program)&&(h=!0,f=!0,y=!0),n.id!==U&&(U=n.id,f=!0),h||H!==t){if(w.setValue(p,"projectionMatrix",t.projectionMatrix),m.logarithmicDepthBuffer&&w.setValue(p,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),H!==t&&(H=t,f=!0,y=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){var S=w.map.cameraPosition;void 0!==S&&S.setValue(p,ot.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&w.setValue(p,"isOrthographic",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.skinning)&&w.setValue(p,"viewMatrix",t.matrixWorldInverse)}if(n.skinning){w.setOptional(p,r,"bindMatrix"),w.setOptional(p,r,"bindMatrixInverse");var E=r.skeleton;if(E){var T=E.bones;if(m.floatVertexTextures){if(void 0===E.boneTexture){var A=Math.sqrt(4*T.length);A=Un.ceilPowerOfTwo(A),A=Math.max(A,4);var L=new Float32Array(A*A*4);L.set(E.boneMatrices);var R=new Sa(L,A,A,Ht,Dt);E.boneMatrices=L,E.boneTexture=R,E.boneTextureSize=A}w.setValue(p,"boneTexture",E.boneTexture,b),w.setValue(p,"boneTextureSize",E.boneTextureSize)}else w.setOptional(p,E,"boneMatrices")}}return(f||o.receiveShadow!==r.receiveShadow)&&(o.receiveShadow=r.receiveShadow,w.setValue(p,"receiveShadow",r.receiveShadow)),f&&(w.setValue(p,"toneMappingExposure",O.toneMappingExposure),w.setValue(p,"toneMappingWhitePoint",O.toneMappingWhitePoint),o.needsLights&&(l=y,(u=M).ambientLightColor.needsUpdate=l,u.lightProbe.needsUpdate=l,u.directionalLights.needsUpdate=l,u.directionalLightShadows.needsUpdate=l,u.pointLights.needsUpdate=l,u.pointLightShadows.needsUpdate=l,u.spotLights.needsUpdate=l,u.spotLightShadows.needsUpdate=l,u.rectAreaLights.needsUpdate=l,u.hemisphereLights.needsUpdate=l),i&&n.fog&&function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)}(M,i),n.isMeshBasicMaterial?St(M,n):n.isMeshLambertMaterial?(St(M,n),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(M,n)):n.isMeshToonMaterial?(St(M,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.gradientMap&&(t.gradientMap.value=e.gradientMap);e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(M,n)):n.isMeshPhongMaterial?(St(M,n),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(M,n)):n.isMeshStandardMaterial?(St(M,n,a),n.isMeshPhysicalMaterial?function(t,e,n){Et(t,e,n),t.reflectivity.value=e.reflectivity,t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.sheen&&t.sheen.value.copy(e.sheen);e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap);e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap);e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===g&&t.clearcoatNormalScale.value.negate());t.transparency.value=e.transparency}(M,n,a):Et(M,n,a)):n.isMeshMatcapMaterial?(St(M,n),function(t,e){e.matcap&&(t.matcap.value=e.matcap);e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(M,n)):n.isMeshDepthMaterial?(St(M,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(M,n)):n.isMeshDistanceMaterial?(St(M,n),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias);t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(M,n)):n.isMeshNormalMaterial?(St(M,n),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===g&&(t.bumpScale.value*=-1));e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===g&&t.normalScale.value.negate());e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(M,n)):n.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(M,n),n.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(M,n)):n.isPointsMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*Y,t.scale.value=.5*X,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(M,n):n.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map);e.alphaMap&&(t.alphaMap.value=e.alphaMap);var n;e.map?n=e.map:e.alphaMap&&(n=e.alphaMap);void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(M,n):n.isShadowMaterial&&(M.color.value.copy(n.color),M.opacity.value=n.opacity),void 0!==M.ltc_1&&(M.ltc_1.value=La.LTC_1),void 0!==M.ltc_2&&(M.ltc_2.value=La.LTC_2),Vo.upload(p,o.uniformsList,M,b),n.isShaderMaterial&&(n.uniformsNeedUpdate=!1)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Vo.upload(p,o.uniformsList,M,b),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&w.setValue(p,"center",r.center),w.setValue(p,"modelViewMatrix",r.modelViewMatrix),w.setValue(p,"normalMatrix",r.normalMatrix),w.setValue(p,"modelMatrix",r.matrixWorld),_}function St(t,e,n){t.opacity.value=e.opacity,e.color&&t.diffuse.value.copy(e.color),e.emissive&&t.emissive.value.copy(e.emissive).multiplyScalar(e.emissiveIntensity),e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.specularMap&&(t.specularMap.value=e.specularMap);var r,i,a=e.envMap||n;a&&(t.envMap.value=a,t.flipEnvMap.value=a.isCubeTexture?-1:1,t.reflectivity.value=e.reflectivity,t.refractionRatio.value=e.refractionRatio,t.maxMipLevel.value=x.get(a).__maxMipLevel),e.lightMap&&(t.lightMap.value=e.lightMap,t.lightMapIntensity.value=e.lightMapIntensity),e.aoMap&&(t.aoMap.value=e.aoMap,t.aoMapIntensity.value=e.aoMapIntensity),e.map?r=e.map:e.specularMap?r=e.specularMap:e.displacementMap?r=e.displacementMap:e.normalMap?r=e.normalMap:e.bumpMap?r=e.bumpMap:e.roughnessMap?r=e.roughnessMap:e.metalnessMap?r=e.metalnessMap:e.alphaMap?r=e.alphaMap:e.emissiveMap&&(r=e.emissiveMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix)),e.aoMap?i=e.aoMap:e.lightMap&&(i=e.lightMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),t.uv2Transform.value.copy(i.matrix))}function Et(t,e,n){t.roughness.value=e.roughness,t.metalness.value=e.metalness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap),e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===g&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===g&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),(e.envMap||n)&&(t.envMapIntensity.value=e.envMapIntensity)}yt.setAnimationLoop((function(t){lt.isPresenting||gt&&gt(t)})),"undefined"!=typeof window&&yt.setContext(window),this.setAnimationLoop=function(t){gt=t,lt.setAnimationLoop(t),yt.start()},this.render=function(t,e){var n,r;if(void 0!==arguments[2]&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),n=arguments[2]),void 0!==arguments[3]&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),r=arguments[3]),e&&e.isCamera){if(!D){G.geometry=null,G.program=null,G.wireframe=!1,U=-1,H=null,!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),lt.enabled&&lt.isPresenting&&(e=lt.getCamera(e)),(d=T.get(t,e)).init(),t.onBeforeRender(O,t,e,n||z),at.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),tt.setFromProjectionMatrix(at),it=this.localClippingEnabled,rt=nt.init(this.clippingPlanes,it,e),(h=E.get(t,e)).init(),xt(t,e,0,O.sortObjects),h.finish(),!0===O.sortObjects&&h.sort(Z,J),rt&&nt.beginShadows();var i=d.state.shadowsArray;ht.render(i,t,e),d.setupLights(e),rt&&nt.endShadows(),this.info.autoReset&&this.info.reset(),void 0!==n&&this.setRenderTarget(n),A.render(h,t,e,r);var a=h.opaque,o=h.transparent;if(t.overrideMaterial){var s=t.overrideMaterial;a.length&&bt(a,t,e,s),o.length&&bt(o,t,e,s)}else a.length&&bt(a,t,e),o.length&&bt(o,t,e);t.onAfterRender(O,t,e),null!==z&&(b.updateRenderTargetMipmap(z),b.updateMultisampleRenderTarget(z)),v.buffers.depth.setTest(!0),v.buffers.depth.setMask(!0),v.buffers.color.setMask(!0),v.setPolygonOffset(!1),h=null,d=null}}else console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.")},this.setFramebuffer=function(t){I!==t&&null===z&&p.bindFramebuffer(36160,t),I=t},this.getActiveCubeFace=function(){return N},this.getActiveMipmapLevel=function(){return B},this.getRenderTarget=function(){return z},this.setRenderTarget=function(t,e,n){z=t,N=e,B=n,t&&void 0===x.get(t).__webglFramebuffer&&b.setupRenderTarget(t);var r=I,i=!1;if(t){var a=x.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=a[e||0],i=!0):r=t.isWebGLMultisampleRenderTarget?x.get(t).__webglMultisampledFramebuffer:a,j.copy(t.viewport),V.copy(t.scissor),W=t.scissorTest}else j.copy($).multiplyScalar(Y).floor(),V.copy(Q).multiplyScalar(Y).floor(),W=K;if(F!==r&&(p.bindFramebuffer(36160,r),F=r),v.viewport(j),v.scissor(V),v.setScissorTest(W),i){var o=x.get(t.texture);p.framebufferTexture2D(36160,36064,34069+(e||0),o.__webglTexture,n||0)}},this.readRenderTargetPixels=function(t,e,n,r,i,a,o){if(t&&t.isWebGLRenderTarget){var s=x.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==o&&(s=s[o]),s){var c=!1;s!==F&&(p.bindFramebuffer(36160,s),c=!0);try{var u=t.texture,l=u.format,h=u.type;if(l!==Ht&&C.convert(l)!==p.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!(h===At||C.convert(h)===p.getParameter(35738)||h===Dt&&(m.isWebGL2||f.get("OES_texture_float")||f.get("WEBGL_color_buffer_float"))||h===It&&(m.isWebGL2?f.get("EXT_color_buffer_float"):f.get("EXT_color_buffer_half_float"))))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===p.checkFramebufferStatus(36160)?e>=0&&e<=t.width-r&&n>=0&&n<=t.height-i&&p.readPixels(e,n,r,i,C.convert(l),C.convert(h),a):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{c&&p.bindFramebuffer(36160,F)}}}else console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.")},this.copyFramebufferToTexture=function(t,e,n){void 0===n&&(n=0);var r=Math.pow(2,-n),i=Math.floor(e.image.width*r),a=Math.floor(e.image.height*r),o=C.convert(e.format);b.setTexture2D(e,0),p.copyTexImage2D(3553,n,o,t.x,t.y,i,a,0),v.unbindTexture()},this.copyTextureToTexture=function(t,e,n,r){var i=e.image.width,a=e.image.height,o=C.convert(n.format),s=C.convert(n.type);b.setTexture2D(n,0),e.isDataTexture?p.texSubImage2D(3553,r||0,t.x,t.y,i,a,o,s,e.image.data):p.texSubImage2D(3553,r||0,t.x,t.y,o,s,e.image),v.unbindTexture()},this.initTexture=function(t){b.setTexture2D(t,0),v.unbindTexture()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function Os(t,e){this.name="",this.color=new fi(t),this.density=void 0!==e?e:25e-5}function Ds(t,e,n){this.name="",this.color=new fi(t),this.near=void 0!==e?e:1,this.far=void 0!==n?n:1e3}function Is(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=Tn,this.updateRange={offset:0,count:-1},this.version=0}Ls.prototype=Object.assign(Object.create(_a.prototype),{constructor:Ls,isArrayCamera:!0}),Rs.prototype=Object.assign(Object.create(Mr.prototype),{constructor:Rs,isGroup:!0}),Object.assign(Ps.prototype,Nn.prototype),Object.assign(Os.prototype,{isFogExp2:!0,clone:function(){return new Os(this.color,this.density)},toJSON:function(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}),Object.assign(Ds.prototype,{isFog:!0,clone:function(){return new Ds(this.color,this.near,this.far)},toJSON:function(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}),Object.defineProperty(Is.prototype,"needsUpdate",{set:function(t){!0===t&&this.version++}}),Object.assign(Is.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(t){return this.usage=t,this},copy:function(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this},copyAt:function(t,e,n){t*=this.stride,n*=e.stride;for(var r=0,i=this.stride;r<i;r++)this.array[t+r]=e.array[n+r];return this},set:function(t,e){return void 0===e&&(e=0),this.array.set(t,e),this},clone:function(){return(new this.constructor).copy(this)},onUpload:function(t){return this.onUploadCallback=t,this}});var Ns,Bs=new $n;function zs(t,e,n,r){this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===r}function Fs(t){bi.call(this),this.type="SpriteMaterial",this.color=new fi(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}Object.defineProperties(zs.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}}}),Object.assign(zs.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(t){for(var e=0,n=this.data.count;e<n;e++)Bs.x=this.getX(e),Bs.y=this.getY(e),Bs.z=this.getZ(e),Bs.applyMatrix4(t),this.setXYZ(e,Bs.x,Bs.y,Bs.z);return this},setX:function(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this},setY:function(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this},setZ:function(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this},setW:function(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this},getX:function(t){return this.data.array[t*this.data.stride+this.offset]},getY:function(t){return this.data.array[t*this.data.stride+this.offset+1]},getZ:function(t){return this.data.array[t*this.data.stride+this.offset+2]},getW:function(t){return this.data.array[t*this.data.stride+this.offset+3]},setXY:function(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this},setXYZ:function(t,e,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this},setXYZW:function(t,e,n,r,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this.data.array[t+3]=i,this}}),Fs.prototype=Object.create(bi.prototype),Fs.prototype.constructor=Fs,Fs.prototype.isSpriteMaterial=!0,Fs.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this};var Us=new $n,Gs=new $n,Hs=new $n,ks=new Gn,js=new Gn,Vs=new ar,Ws=new $n,qs=new $n,Xs=new $n,Ys=new Gn,Zs=new Gn,Js=new Gn;function $s(t){if(Mr.call(this),this.type="Sprite",void 0===Ns){Ns=new ki;var e=new Is(new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),5);Ns.setIndex([0,1,2,0,2,3]),Ns.setAttribute("position",new zs(e,3,0,!1)),Ns.setAttribute("uv",new zs(e,2,3,!1))}this.geometry=Ns,this.material=void 0!==t?t:new Fs,this.center=new Gn(.5,.5)}function Qs(t,e,n,r,i,a){ks.subVectors(t,n).addScalar(.5).multiply(r),void 0!==i?(js.x=a*ks.x-i*ks.y,js.y=i*ks.x+a*ks.y):js.copy(ks),t.copy(e),t.x+=js.x,t.y+=js.y,t.applyMatrix4(Vs)}$s.prototype=Object.assign(Object.create(Mr.prototype),{constructor:$s,isSprite:!0,raycast:function(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Gs.setFromMatrixScale(this.matrixWorld),Vs.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Hs.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Gs.multiplyScalar(-Hs.z);var n,r,i=this.material.rotation;0!==i&&(r=Math.cos(i),n=Math.sin(i));var a=this.center;Qs(Ws.set(-.5,-.5,0),Hs,a,Gs,n,r),Qs(qs.set(.5,-.5,0),Hs,a,Gs,n,r),Qs(Xs.set(.5,.5,0),Hs,a,Gs,n,r),Ys.set(0,0),Zs.set(1,0),Js.set(1,1);var o=t.ray.intersectTriangle(Ws,qs,Xs,!1,Us);if(null!==o||(Qs(qs.set(-.5,.5,0),Hs,a,Gs,n,r),Zs.set(0,1),null!==(o=t.ray.intersectTriangle(Ws,Xs,qs,!1,Us)))){var s=t.ray.origin.distanceTo(Us);s<t.near||s>t.far||e.push({distance:s,point:Us.clone(),uv:li.getUV(Us,Ws,qs,Xs,Ys,Zs,Js,new Gn),face:null,object:this})}},clone:function(){return new this.constructor(this.material).copy(this)},copy:function(t){return Mr.prototype.copy.call(this,t),void 0!==t.center&&this.center.copy(t.center),this}});var Ks=new $n,tc=new $n;function ec(){Mr.call(this),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}function nc(t,e){t&&t.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),oa.call(this,t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new ar,this.bindMatrixInverse=new ar}ec.prototype=Object.assign(Object.create(Mr.prototype),{constructor:ec,isLOD:!0,copy:function(t){Mr.prototype.copy.call(this,t,!1);for(var e=t.levels,n=0,r=e.length;n<r;n++){var i=e[n];this.addLevel(i.object.clone(),i.distance)}return this.autoUpdate=t.autoUpdate,this},addLevel:function(t,e){void 0===e&&(e=0),e=Math.abs(e);for(var n=this.levels,r=0;r<n.length&&!(e<n[r].distance);r++);return n.splice(r,0,{distance:e,object:t}),this.add(t),this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(t){var e=this.levels;if(e.length>0){for(var n=1,r=e.length;n<r&&!(t<e[n].distance);n++);return e[n-1].object}return null},raycast:function(t,e){if(this.levels.length>0){Ks.setFromMatrixPosition(this.matrixWorld);var n=t.ray.origin.distanceTo(Ks);this.getObjectForDistance(n).raycast(t,e)}},update:function(t){var e=this.levels;if(e.length>1){Ks.setFromMatrixPosition(t.matrixWorld),tc.setFromMatrixPosition(this.matrixWorld);var n=Ks.distanceTo(tc)/t.zoom;e[0].object.visible=!0;for(var r=1,i=e.length;r<i&&n>=e[r].distance;r++)e[r-1].object.visible=!1,e[r].object.visible=!0;for(this._currentLevel=r-1;r<i;r++)e[r].object.visible=!1}},toJSON:function(t){var e=Mr.prototype.toJSON.call(this,t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];for(var n=this.levels,r=0,i=n.length;r<i;r++){var a=n[r];e.object.levels.push({object:a.object.uuid,distance:a.distance})}return e}}),nc.prototype=Object.assign(Object.create(oa.prototype),{constructor:nc,isSkinnedMesh:!0,bind:function(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.getInverse(e)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){for(var t=new Wn,e=this.geometry.attributes.skinWeight,n=0,r=e.count;n<r;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);var i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}},updateMatrixWorld:function(t){oa.prototype.updateMatrixWorld.call(this,t),"attached"===this.bindMode?this.bindMatrixInverse.getInverse(this.matrixWorld):"detached"===this.bindMode?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var rc=new ar,ic=new ar;function ac(t,e){if(t=t||[],this.bones=t.slice(0),this.boneMatrices=new Float32Array(16*this.bones.length),this.frame=-1,void 0===e)this.calculateInverses();else if(this.bones.length===e.length)this.boneInverses=e.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(var n=0,r=this.bones.length;n<r;n++)this.boneInverses.push(new ar)}}function oc(){Mr.call(this),this.type="Bone"}Object.assign(ac.prototype,{calculateInverses:function(){this.boneInverses=[];for(var t=0,e=this.bones.length;t<e;t++){var n=new ar;this.bones[t]&&n.getInverse(this.bones[t].matrixWorld),this.boneInverses.push(n)}},pose:function(){var t,e,n;for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&t.matrixWorld.getInverse(this.boneInverses[e]);for(e=0,n=this.bones.length;e<n;e++)(t=this.bones[e])&&(t.parent&&t.parent.isBone?(t.matrix.getInverse(t.parent.matrixWorld),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))},update:function(){for(var t=this.bones,e=this.boneInverses,n=this.boneMatrices,r=this.boneTexture,i=0,a=t.length;i<a;i++){var o=t[i]?t[i].matrixWorld:ic;rc.multiplyMatrices(o,e[i]),rc.toArray(n,16*i)}void 0!==r&&(r.needsUpdate=!0)},clone:function(){return new ac(this.bones,this.boneInverses)},getBoneByName:function(t){for(var e=0,n=this.bones.length;e<n;e++){var r=this.bones[e];if(r.name===t)return r}},dispose:function(){this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=void 0)}}),oc.prototype=Object.assign(Object.create(Mr.prototype),{constructor:oc,isBone:!0});var sc=new ar,cc=new ar,uc=[],lc=new oa;function hc(t,e,n){oa.call(this,t,e),this.instanceMatrix=new Mi(new Float32Array(16*n),16),this.count=n,this.frustumCulled=!1}function dc(t){bi.call(this),this.type="LineBasicMaterial",this.color=new fi(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}hc.prototype=Object.assign(Object.create(oa.prototype),{constructor:hc,isInstancedMesh:!0,getMatrixAt:function(t,e){e.fromArray(this.instanceMatrix.array,16*t)},raycast:function(t,e){var n=this.matrixWorld,r=this.count;if(lc.geometry=this.geometry,lc.material=this.material,void 0!==lc.material)for(var i=0;i<r;i++)this.getMatrixAt(i,sc),cc.multiplyMatrices(n,sc),lc.matrixWorld=cc,lc.raycast(t,uc),uc.length>0&&(uc[0].instanceId=i,uc[0].object=this,e.push(uc[0]),uc.length=0)},setMatrixAt:function(t,e){e.toArray(this.instanceMatrix.array,16*t)},updateMorphTargets:function(){}}),dc.prototype=Object.create(bi.prototype),dc.prototype.constructor=dc,dc.prototype.isLineBasicMaterial=!0,dc.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this};var pc=new $n,fc=new $n,mc=new ar,vc=new Zr,gc=new Hr;function yc(t,e,n){1===n&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Mr.call(this),this.type="Line",this.geometry=void 0!==t?t:new ki,this.material=void 0!==e?e:new dc}yc.prototype=Object.assign(Object.create(Mr.prototype),{constructor:yc,isLine:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[0],r=1,i=e.count;r<i;r++)pc.fromBufferAttribute(e,r-1),fc.fromBufferAttribute(e,r),n[r]=n[r-1],n[r]+=pc.distanceTo(fc);t.setAttribute("lineDistance",new Ci(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;(n=t.lineDistances)[0]=0;for(r=1,i=a.length;r<i;r++)n[r]=n[r-1],n[r]+=a[r-1].distanceTo(a[r])}return this},raycast:function(t,e){var n=this.geometry,r=this.matrixWorld,i=t.params.Line.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),gc.copy(n.boundingSphere),gc.applyMatrix4(r),gc.radius+=i,!1!==t.ray.intersectsSphere(gc)){mc.getInverse(r),vc.copy(t.ray).applyMatrix4(mc);var a=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,s=new $n,c=new $n,u=new $n,l=new $n,h=this&&this.isLineSegments?2:1;if(n.isBufferGeometry){var d=n.index,p=n.attributes.position.array;if(null!==d)for(var f=d.array,m=0,v=f.length-1;m<v;m+=h){var g=f[m],y=f[m+1];if(s.fromArray(p,3*g),c.fromArray(p,3*y),!(vc.distanceSqToSegment(s,c,l,u)>o))l.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(l))<t.near||_>t.far||e.push({distance:_,point:u.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}else for(m=0,v=p.length/3-1;m<v;m+=h){if(s.fromArray(p,3*m),c.fromArray(p,3*m+3),!(vc.distanceSqToSegment(s,c,l,u)>o))l.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(l))<t.near||_>t.far||e.push({distance:_,point:u.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}else if(n.isGeometry){var x=n.vertices,b=x.length;for(m=0;m<b-1;m+=h){var _;if(!(vc.distanceSqToSegment(x[m],x[m+1],l,u)>o))l.applyMatrix4(this.matrixWorld),(_=t.ray.origin.distanceTo(l))<t.near||_>t.far||e.push({distance:_,point:u.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this})}}}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}});var xc=new $n,bc=new $n;function _c(t,e){yc.call(this,t,e),this.type="LineSegments"}function wc(t,e){yc.call(this,t,e),this.type="LineLoop"}function Mc(t){bi.call(this),this.type="PointsMaterial",this.color=new fi(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(t)}_c.prototype=Object.assign(Object.create(yc.prototype),{constructor:_c,isLineSegments:!0,computeLineDistances:function(){var t=this.geometry;if(t.isBufferGeometry)if(null===t.index){for(var e=t.attributes.position,n=[],r=0,i=e.count;r<i;r+=2)xc.fromBufferAttribute(e,r),bc.fromBufferAttribute(e,r+1),n[r]=0===r?0:n[r-1],n[r+1]=n[r]+xc.distanceTo(bc);t.setAttribute("lineDistance",new Ci(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(t.isGeometry){var a=t.vertices;for(n=t.lineDistances,r=0,i=a.length;r<i;r+=2)xc.copy(a[r]),bc.copy(a[r+1]),n[r]=0===r?0:n[r-1],n[r+1]=n[r]+xc.distanceTo(bc)}return this}}),wc.prototype=Object.assign(Object.create(yc.prototype),{constructor:wc,isLineLoop:!0}),Mc.prototype=Object.create(bi.prototype),Mc.prototype.constructor=Mc,Mc.prototype.isPointsMaterial=!0,Mc.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this.morphTargets=t.morphTargets,this};var Sc=new ar,Ec=new Zr,Tc=new Hr,Ac=new $n;function Lc(t,e){Mr.call(this),this.type="Points",this.geometry=void 0!==t?t:new ki,this.material=void 0!==e?e:new Mc,this.updateMorphTargets()}function Rc(t,e,n,r,i,a,o){var s=Ec.distanceSqToPoint(t);if(s<n){var c=new $n;Ec.closestPointToPoint(t,c),c.applyMatrix4(r);var u=i.ray.origin.distanceTo(c);if(u<i.near||u>i.far)return;a.push({distance:u,distanceToRay:Math.sqrt(s),point:c,index:e,face:null,object:o})}}function Pc(t,e,n,r,i,a,o,s,c){Vn.call(this,t,e,n,r,i,a,o,s,c),this.format=void 0!==o?o:Gt,this.minFilter=void 0!==a?a:wt,this.magFilter=void 0!==i?i:wt,this.generateMipmaps=!1}function Cc(t,e,n,r,i,a,o,s,c,u,l,h){Vn.call(this,null,a,o,s,c,u,r,i,l,h),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}function Oc(t,e,n,r,i,a,o,s,c){Vn.call(this,t,e,n,r,i,a,o,s,c),this.needsUpdate=!0}function Dc(t,e,n,r,i,a,o,s,c,u){if((u=void 0!==u?u:Wt)!==Wt&&u!==qt)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&u===Wt&&(n=Pt),void 0===n&&u===qt&&(n=Ft),Vn.call(this,null,r,i,a,o,s,u,n,c),this.image={width:t,height:e},this.magFilter=void 0!==o?o:gt,this.minFilter=void 0!==s?s:gt,this.flipY=!1,this.generateMipmaps=!1}function Ic(t){ki.call(this),this.type="WireframeGeometry";var e,n,r,i,a,o,s,c,u,l,h=[],d=[0,0],p={},f=["a","b","c"];if(t&&t.isGeometry){var m=t.faces;for(e=0,r=m.length;e<r;e++){var v=m[e];for(n=0;n<3;n++)s=v[f[n]],c=v[f[(n+1)%3]],d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]})}for(u in p)o=p[u],l=t.vertices[o.index1],h.push(l.x,l.y,l.z),l=t.vertices[o.index2],h.push(l.x,l.y,l.z)}else if(t&&t.isBufferGeometry){var g,y,x,b,_,w,M;if(l=new $n,null!==t.index){for(g=t.attributes.position,y=t.index,0===(x=t.groups).length&&(x=[{start:0,count:y.count,materialIndex:0}]),i=0,a=x.length;i<a;++i)for(e=_=(b=x[i]).start,r=_+b.count;e<r;e+=3)for(n=0;n<3;n++)s=y.getX(e+n),c=y.getX(e+(n+1)%3),d[0]=Math.min(s,c),d[1]=Math.max(s,c),void 0===p[u=d[0]+","+d[1]]&&(p[u]={index1:d[0],index2:d[1]});for(u in p)o=p[u],l.fromBufferAttribute(g,o.index1),h.push(l.x,l.y,l.z),l.fromBufferAttribute(g,o.index2),h.push(l.x,l.y,l.z)}else for(e=0,r=(g=t.attributes.position).count/3;e<r;e++)for(n=0;n<3;n++)w=3*e+n,l.fromBufferAttribute(g,w),h.push(l.x,l.y,l.z),M=3*e+(n+1)%3,l.fromBufferAttribute(g,M),h.push(l.x,l.y,l.z)}this.setAttribute("position",new Ci(h,3))}function Nc(t,e,n){pa.call(this),this.type="ParametricGeometry",this.parameters={func:t,slices:e,stacks:n},this.fromBufferGeometry(new Bc(t,e,n)),this.mergeVertices()}function Bc(t,e,n){ki.call(this),this.type="ParametricBufferGeometry",this.parameters={func:t,slices:e,stacks:n};var r,i,a=[],o=[],s=[],c=[],u=1e-5,l=new $n,h=new $n,d=new $n,p=new $n,f=new $n;t.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");var m=e+1;for(r=0;r<=n;r++){var v=r/n;for(i=0;i<=e;i++){var g=i/e;t(g,v,h),o.push(h.x,h.y,h.z),g-u>=0?(t(g-u,v,d),p.subVectors(h,d)):(t(g+u,v,d),p.subVectors(d,h)),v-u>=0?(t(g,v-u,d),f.subVectors(h,d)):(t(g,v+u,d),f.subVectors(d,h)),l.crossVectors(p,f).normalize(),s.push(l.x,l.y,l.z),c.push(g,v)}}for(r=0;r<n;r++)for(i=0;i<e;i++){var y=r*m+i,x=r*m+i+1,b=(r+1)*m+i+1,_=(r+1)*m+i;a.push(y,x,_),a.push(x,b,_)}this.setIndex(a),this.setAttribute("position",new Ci(o,3)),this.setAttribute("normal",new Ci(s,3)),this.setAttribute("uv",new Ci(c,2))}function zc(t,e,n,r){pa.call(this),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},this.fromBufferGeometry(new Fc(t,e,n,r)),this.mergeVertices()}function Fc(t,e,n,r){ki.call(this),this.type="PolyhedronBufferGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r},n=n||1;var i=[],a=[];function o(t,e,n,r){var i,a,o=Math.pow(2,r),c=[];for(i=0;i<=o;i++){c[i]=[];var u=t.clone().lerp(n,i/o),l=e.clone().lerp(n,i/o),h=o-i;for(a=0;a<=h;a++)c[i][a]=0===a&&i===o?u:u.clone().lerp(l,a/h)}for(i=0;i<o;i++)for(a=0;a<2*(o-i)-1;a++){var d=Math.floor(a/2);a%2==0?(s(c[i][d+1]),s(c[i+1][d]),s(c[i][d])):(s(c[i][d+1]),s(c[i+1][d+1]),s(c[i+1][d]))}}function s(t){i.push(t.x,t.y,t.z)}function c(e,n){var r=3*e;n.x=t[r+0],n.y=t[r+1],n.z=t[r+2]}function u(t,e,n,r){r<0&&1===t.x&&(a[e]=t.x-1),0===n.x&&0===n.z&&(a[e]=r/2/Math.PI+.5)}function l(t){return Math.atan2(t.z,-t.x)}!function(t){for(var n=new $n,r=new $n,i=new $n,a=0;a<e.length;a+=3)c(e[a+0],n),c(e[a+1],r),c(e[a+2],i),o(n,r,i,t)}(r=r||0),function(t){for(var e=new $n,n=0;n<i.length;n+=3)e.x=i[n+0],e.y=i[n+1],e.z=i[n+2],e.normalize().multiplyScalar(t),i[n+0]=e.x,i[n+1]=e.y,i[n+2]=e.z}(n),function(){for(var t=new $n,e=0;e<i.length;e+=3){t.x=i[e+0],t.y=i[e+1],t.z=i[e+2];var n=l(t)/2/Math.PI+.5,r=(o=t,Math.atan2(-o.y,Math.sqrt(o.x*o.x+o.z*o.z))/Math.PI+.5);a.push(n,1-r)}var o;(function(){for(var t=new $n,e=new $n,n=new $n,r=new $n,o=new Gn,s=new Gn,c=new Gn,h=0,d=0;h<i.length;h+=9,d+=6){t.set(i[h+0],i[h+1],i[h+2]),e.set(i[h+3],i[h+4],i[h+5]),n.set(i[h+6],i[h+7],i[h+8]),o.set(a[d+0],a[d+1]),s.set(a[d+2],a[d+3]),c.set(a[d+4],a[d+5]),r.copy(t).add(e).add(n).divideScalar(3);var p=l(r);u(o,d+0,t,p),u(s,d+2,e,p),u(c,d+4,n,p)}})(),function(){for(var t=0;t<a.length;t+=6){var e=a[t+0],n=a[t+2],r=a[t+4],i=Math.max(e,n,r),o=Math.min(e,n,r);i>.9&&o<.1&&(e<.2&&(a[t+0]+=1),n<.2&&(a[t+2]+=1),r<.2&&(a[t+4]+=1))}}()}(),this.setAttribute("position",new Ci(i,3)),this.setAttribute("normal",new Ci(i.slice(),3)),this.setAttribute("uv",new Ci(a,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}function Uc(t,e){pa.call(this),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Gc(t,e)),this.mergeVertices()}function Gc(t,e){Fc.call(this,[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Hc(t,e){pa.call(this),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new kc(t,e)),this.mergeVertices()}function kc(t,e){Fc.call(this,[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronBufferGeometry",this.parameters={radius:t,detail:e}}function jc(t,e){pa.call(this),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new Vc(t,e)),this.mergeVertices()}function Vc(t,e){var n=(1+Math.sqrt(5))/2,r=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];Fc.call(this,r,[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Wc(t,e){pa.call(this),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e},this.fromBufferGeometry(new qc(t,e)),this.mergeVertices()}function qc(t,e){var n=(1+Math.sqrt(5))/2,r=1/n,i=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r];Fc.call(this,i,[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronBufferGeometry",this.parameters={radius:t,detail:e}}function Xc(t,e,n,r,i,a){pa.call(this),this.type="TubeGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},void 0!==a&&console.warn("THREE.TubeGeometry: taper has been removed.");var o=new Yc(t,e,n,r,i);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals,this.fromBufferGeometry(o),this.mergeVertices()}function Yc(t,e,n,r,i){ki.call(this),this.type="TubeBufferGeometry",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:i},e=e||64,n=n||1,r=r||8,i=i||!1;var a=t.computeFrenetFrames(e,i);this.tangents=a.tangents,this.normals=a.normals,this.binormals=a.binormals;var o,s,c=new $n,u=new $n,l=new Gn,h=new $n,d=[],p=[],f=[],m=[];function v(i){h=t.getPointAt(i/e,h);var o=a.normals[i],l=a.binormals[i];for(s=0;s<=r;s++){var f=s/r*Math.PI*2,m=Math.sin(f),v=-Math.cos(f);u.x=v*o.x+m*l.x,u.y=v*o.y+m*l.y,u.z=v*o.z+m*l.z,u.normalize(),p.push(u.x,u.y,u.z),c.x=h.x+n*u.x,c.y=h.y+n*u.y,c.z=h.z+n*u.z,d.push(c.x,c.y,c.z)}}!function(){for(o=0;o<e;o++)v(o);v(!1===i?e:0),function(){for(o=0;o<=e;o++)for(s=0;s<=r;s++)l.x=o/e,l.y=s/r,f.push(l.x,l.y)}(),function(){for(s=1;s<=e;s++)for(o=1;o<=r;o++){var t=(r+1)*(s-1)+(o-1),n=(r+1)*s+(o-1),i=(r+1)*s+o,a=(r+1)*(s-1)+o;m.push(t,n,a),m.push(n,i,a)}}()}(),this.setIndex(m),this.setAttribute("position",new Ci(d,3)),this.setAttribute("normal",new Ci(p,3)),this.setAttribute("uv",new Ci(f,2))}function Zc(t,e,n,r,i,a,o){pa.call(this),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:a},void 0!==o&&console.warn("THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead."),this.fromBufferGeometry(new Jc(t,e,n,r,i,a)),this.mergeVertices()}function Jc(t,e,n,r,i,a){ki.call(this),this.type="TorusKnotBufferGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:i,q:a},t=t||1,e=e||.4,n=Math.floor(n)||64,r=Math.floor(r)||8,i=i||2,a=a||3;var o,s,c=[],u=[],l=[],h=[],d=new $n,p=new $n,f=new $n,m=new $n,v=new $n,g=new $n,y=new $n;for(o=0;o<=n;++o){var x=o/n*i*Math.PI*2;for(A(x,i,a,t,f),A(x+.01,i,a,t,m),g.subVectors(m,f),y.addVectors(m,f),v.crossVectors(g,y),y.crossVectors(v,g),v.normalize(),y.normalize(),s=0;s<=r;++s){var b=s/r*Math.PI*2,_=-e*Math.cos(b),w=e*Math.sin(b);d.x=f.x+(_*y.x+w*v.x),d.y=f.y+(_*y.y+w*v.y),d.z=f.z+(_*y.z+w*v.z),u.push(d.x,d.y,d.z),p.subVectors(d,f).normalize(),l.push(p.x,p.y,p.z),h.push(o/n),h.push(s/r)}}for(s=1;s<=n;s++)for(o=1;o<=r;o++){var M=(r+1)*(s-1)+(o-1),S=(r+1)*s+(o-1),E=(r+1)*s+o,T=(r+1)*(s-1)+o;c.push(M,S,T),c.push(S,E,T)}function A(t,e,n,r,i){var a=Math.cos(t),o=Math.sin(t),s=n/e*t,c=Math.cos(s);i.x=r*(2+c)*.5*a,i.y=r*(2+c)*o*.5,i.z=r*Math.sin(s)*.5}this.setIndex(c),this.setAttribute("position",new Ci(u,3)),this.setAttribute("normal",new Ci(l,3)),this.setAttribute("uv",new Ci(h,2))}function $c(t,e,n,r,i){pa.call(this),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},this.fromBufferGeometry(new Qc(t,e,n,r,i)),this.mergeVertices()}function Qc(t,e,n,r,i){ki.call(this),this.type="TorusBufferGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:i},t=t||1,e=e||.4,n=Math.floor(n)||8,r=Math.floor(r)||6,i=i||2*Math.PI;var a,o,s=[],c=[],u=[],l=[],h=new $n,d=new $n,p=new $n;for(a=0;a<=n;a++)for(o=0;o<=r;o++){var f=o/r*i,m=a/n*Math.PI*2;d.x=(t+e*Math.cos(m))*Math.cos(f),d.y=(t+e*Math.cos(m))*Math.sin(f),d.z=e*Math.sin(m),c.push(d.x,d.y,d.z),h.x=t*Math.cos(f),h.y=t*Math.sin(f),p.subVectors(d,h).normalize(),u.push(p.x,p.y,p.z),l.push(o/r),l.push(a/n)}for(a=1;a<=n;a++)for(o=1;o<=r;o++){var v=(r+1)*a+o-1,g=(r+1)*(a-1)+o-1,y=(r+1)*(a-1)+o,x=(r+1)*a+o;s.push(v,g,x),s.push(g,y,x)}this.setIndex(s),this.setAttribute("position",new Ci(c,3)),this.setAttribute("normal",new Ci(u,3)),this.setAttribute("uv",new Ci(l,2))}Lc.prototype=Object.assign(Object.create(Mr.prototype),{constructor:Lc,isPoints:!0,raycast:function(t,e){var n=this.geometry,r=this.matrixWorld,i=t.params.Points.threshold;if(null===n.boundingSphere&&n.computeBoundingSphere(),Tc.copy(n.boundingSphere),Tc.applyMatrix4(r),Tc.radius+=i,!1!==t.ray.intersectsSphere(Tc)){Sc.getInverse(r),Ec.copy(t.ray).applyMatrix4(Sc);var a=i/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){var s=n.index,c=n.attributes.position.array;if(null!==s)for(var u=s.array,l=0,h=u.length;l<h;l++){var d=u[l];Ac.fromArray(c,3*d),Rc(Ac,d,o,r,t,e,this)}else{l=0;for(var p=c.length/3;l<p;l++)Ac.fromArray(c,3*l),Rc(Ac,l,o,r,t,e,this)}}else{var f=n.vertices;for(l=0,p=f.length;l<p;l++)Rc(f[l],l,o,r,t,e,this)}}},updateMorphTargets:function(){var t,e,n,r=this.geometry;if(r.isBufferGeometry){var i=r.morphAttributes,a=Object.keys(i);if(a.length>0){var o=i[a[0]];if(void 0!==o)for(this.morphTargetInfluences=[],this.morphTargetDictionary={},t=0,e=o.length;t<e;t++)n=o[t].name||String(t),this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=t}}else{var s=r.morphTargets;void 0!==s&&s.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}},clone:function(){return new this.constructor(this.geometry,this.material).copy(this)}}),Pc.prototype=Object.assign(Object.create(Vn.prototype),{constructor:Pc,isVideoTexture:!0,update:function(){var t=this.image;t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}),Cc.prototype=Object.create(Vn.prototype),Cc.prototype.constructor=Cc,Cc.prototype.isCompressedTexture=!0,Oc.prototype=Object.create(Vn.prototype),Oc.prototype.constructor=Oc,Oc.prototype.isCanvasTexture=!0,Dc.prototype=Object.create(Vn.prototype),Dc.prototype.constructor=Dc,Dc.prototype.isDepthTexture=!0,Ic.prototype=Object.create(ki.prototype),Ic.prototype.constructor=Ic,Nc.prototype=Object.create(pa.prototype),Nc.prototype.constructor=Nc,Bc.prototype=Object.create(ki.prototype),Bc.prototype.constructor=Bc,zc.prototype=Object.create(pa.prototype),zc.prototype.constructor=zc,Fc.prototype=Object.create(ki.prototype),Fc.prototype.constructor=Fc,Uc.prototype=Object.create(pa.prototype),Uc.prototype.constructor=Uc,Gc.prototype=Object.create(Fc.prototype),Gc.prototype.constructor=Gc,Hc.prototype=Object.create(pa.prototype),Hc.prototype.constructor=Hc,kc.prototype=Object.create(Fc.prototype),kc.prototype.constructor=kc,jc.prototype=Object.create(pa.prototype),jc.prototype.constructor=jc,Vc.prototype=Object.create(Fc.prototype),Vc.prototype.constructor=Vc,Wc.prototype=Object.create(pa.prototype),Wc.prototype.constructor=Wc,qc.prototype=Object.create(Fc.prototype),qc.prototype.constructor=qc,Xc.prototype=Object.create(pa.prototype),Xc.prototype.constructor=Xc,Yc.prototype=Object.create(ki.prototype),Yc.prototype.constructor=Yc,Yc.prototype.toJSON=function(){var t=ki.prototype.toJSON.call(this);return t.path=this.parameters.path.toJSON(),t},Zc.prototype=Object.create(pa.prototype),Zc.prototype.constructor=Zc,Jc.prototype=Object.create(ki.prototype),Jc.prototype.constructor=Jc,$c.prototype=Object.create(pa.prototype),$c.prototype.constructor=$c,Qc.prototype=Object.create(ki.prototype),Qc.prototype.constructor=Qc;var Kc=function(t,e,n){n=n||2;var r,i,a,o,s,c,u,l=e&&e.length,h=l?e[0]*n:t.length,d=tu(t,0,h,n,!0),p=[];if(!d||d.next===d.prev)return p;if(l&&(d=function(t,e,n,r){var i,a,o,s,c,u=[];for(i=0,a=e.length;i<a;i++)o=e[i]*r,s=i<a-1?e[i+1]*r:t.length,(c=tu(t,o,s,r,!1))===c.next&&(c.steiner=!0),u.push(lu(c));for(u.sort(su),i=0;i<u.length;i++)cu(u[i],n),n=eu(n,n.next);return n}(t,e,d,n)),t.length>80*n){r=a=t[0],i=o=t[1];for(var f=n;f<h;f+=n)(s=t[f])<r&&(r=s),(c=t[f+1])<i&&(i=c),s>a&&(a=s),c>o&&(o=c);u=0!==(u=Math.max(a-r,o-i))?1/u:0}return nu(d,p,n,r,i,u),p};function tu(t,e,n,r,i){var a,o;if(i===function(t,e,n,r){for(var i=0,a=e,o=n-r;a<n;a+=r)i+=(t[o]-t[a])*(t[a+1]+t[o+1]),o=a;return i}(t,e,n,r)>0)for(a=e;a<n;a+=r)o=yu(a,t[a],t[a+1],o);else for(a=n-r;a>=e;a-=r)o=yu(a,t[a],t[a+1],o);return o&&fu(o,o.next)&&(xu(o),o=o.next),o}function eu(t,e){if(!t)return t;e||(e=t);var n,r=t;do{if(n=!1,r.steiner||!fu(r,r.next)&&0!==pu(r.prev,r,r.next))r=r.next;else{if(xu(r),(r=e=r.prev)===r.next)break;n=!0}}while(n||r!==e);return e}function nu(t,e,n,r,i,a,o){if(t){!o&&a&&function(t,e,n,r){var i=t;do{null===i.z&&(i.z=uu(i.x,i.y,e,n,r)),i.prevZ=i.prev,i.nextZ=i.next,i=i.next}while(i!==t);i.prevZ.nextZ=null,i.prevZ=null,function(t){var e,n,r,i,a,o,s,c,u=1;do{for(n=t,t=null,a=null,o=0;n;){for(o++,r=n,s=0,e=0;e<u&&(s++,r=r.nextZ);e++);for(c=u;s>0||c>0&&r;)0!==s&&(0===c||!r||n.z<=r.z)?(i=n,n=n.nextZ,s--):(i=r,r=r.nextZ,c--),a?a.nextZ=i:t=i,i.prevZ=a,a=i;n=r}a.nextZ=null,u*=2}while(o>1)}(i)}(t,r,i,a);for(var s,c,u=t;t.prev!==t.next;)if(s=t.prev,c=t.next,a?iu(t,r,i,a):ru(t))e.push(s.i/n),e.push(t.i/n),e.push(c.i/n),xu(t),t=c.next,u=c.next;else if((t=c)===u){o?1===o?nu(t=au(t,e,n),e,n,r,i,a,2):2===o&&ou(t,e,n,r,i,a):nu(eu(t),e,n,r,i,a,1);break}}}function ru(t){var e=t.prev,n=t,r=t.next;if(pu(e,n,r)>=0)return!1;for(var i=t.next.next;i!==t.prev;){if(hu(e.x,e.y,n.x,n.y,r.x,r.y,i.x,i.y)&&pu(i.prev,i,i.next)>=0)return!1;i=i.next}return!0}function iu(t,e,n,r){var i=t.prev,a=t,o=t.next;if(pu(i,a,o)>=0)return!1;for(var s=i.x<a.x?i.x<o.x?i.x:o.x:a.x<o.x?a.x:o.x,c=i.y<a.y?i.y<o.y?i.y:o.y:a.y<o.y?a.y:o.y,u=i.x>a.x?i.x>o.x?i.x:o.x:a.x>o.x?a.x:o.x,l=i.y>a.y?i.y>o.y?i.y:o.y:a.y>o.y?a.y:o.y,h=uu(s,c,e,n,r),d=uu(u,l,e,n,r),p=t.prevZ,f=t.nextZ;p&&p.z>=h&&f&&f.z<=d;){if(p!==t.prev&&p!==t.next&&hu(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&pu(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==t.prev&&f!==t.next&&hu(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&pu(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=h;){if(p!==t.prev&&p!==t.next&&hu(i.x,i.y,a.x,a.y,o.x,o.y,p.x,p.y)&&pu(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==t.prev&&f!==t.next&&hu(i.x,i.y,a.x,a.y,o.x,o.y,f.x,f.y)&&pu(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function au(t,e,n){var r=t;do{var i=r.prev,a=r.next.next;!fu(i,a)&&mu(i,r,r.next,a)&&vu(i,a)&&vu(a,i)&&(e.push(i.i/n),e.push(r.i/n),e.push(a.i/n),xu(r),xu(r.next),r=t=a),r=r.next}while(r!==t);return r}function ou(t,e,n,r,i,a){var o=t;do{for(var s=o.next.next;s!==o.prev;){if(o.i!==s.i&&du(o,s)){var c=gu(o,s);return o=eu(o,o.next),c=eu(c,c.next),nu(o,e,n,r,i,a),void nu(c,e,n,r,i,a)}s=s.next}o=o.next}while(o!==t)}function su(t,e){return t.x-e.x}function cu(t,e){if(e=function(t,e){var n,r=e,i=t.x,a=t.y,o=-1/0;do{if(a<=r.y&&a>=r.next.y&&r.next.y!==r.y){var s=r.x+(a-r.y)*(r.next.x-r.x)/(r.next.y-r.y);if(s<=i&&s>o){if(o=s,s===i){if(a===r.y)return r;if(a===r.next.y)return r.next}n=r.x<r.next.x?r:r.next}}r=r.next}while(r!==e);if(!n)return null;if(i===o)return n.prev;var c,u=n,l=n.x,h=n.y,d=1/0;r=n.next;for(;r!==u;)i>=r.x&&r.x>=l&&i!==r.x&&hu(a<h?i:o,a,l,h,a<h?o:i,a,r.x,r.y)&&((c=Math.abs(a-r.y)/(i-r.x))<d||c===d&&r.x>n.x)&&vu(r,t)&&(n=r,d=c),r=r.next;return n}(t,e)){var n=gu(e,t);eu(n,n.next)}}function uu(t,e,n,r,i){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*i)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*i)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function lu(t){var e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function hu(t,e,n,r,i,a,o,s){return(i-o)*(e-s)-(t-o)*(a-s)>=0&&(t-o)*(r-s)-(n-o)*(e-s)>=0&&(n-o)*(a-s)-(i-o)*(r-s)>=0}function du(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){var n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&mu(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&vu(t,e)&&vu(e,t)&&function(t,e){var n=t,r=!1,i=(t.x+e.x)/2,a=(t.y+e.y)/2;do{n.y>a!=n.next.y>a&&n.next.y!==n.y&&i<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)}function pu(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function fu(t,e){return t.x===e.x&&t.y===e.y}function mu(t,e,n,r){return!!(fu(t,n)&&fu(e,r)||fu(t,r)&&fu(n,e))||pu(t,e,n)>0!=pu(t,e,r)>0&&pu(n,r,t)>0!=pu(n,r,e)>0}function vu(t,e){return pu(t.prev,t,t.next)<0?pu(t,e,t.next)>=0&&pu(t,t.prev,e)>=0:pu(t,e,t.prev)<0||pu(t,t.next,e)<0}function gu(t,e){var n=new bu(t.i,t.x,t.y),r=new bu(e.i,e.x,e.y),i=t.next,a=e.prev;return t.next=e,e.prev=t,n.next=i,i.prev=n,r.next=n,n.prev=r,a.next=r,r.prev=a,r}function yu(t,e,n,r){var i=new bu(t,e,n);return r?(i.next=r.next,i.prev=r,r.next.prev=i,r.next=i):(i.prev=i,i.next=i),i}function xu(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function bu(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}var _u={area:function(t){for(var e=t.length,n=0,r=e-1,i=0;i<e;r=i++)n+=t[r].x*t[i].y-t[i].x*t[r].y;return.5*n},isClockWise:function(t){return _u.area(t)<0},triangulateShape:function(t,e){var n=[],r=[],i=[];wu(t),Mu(n,t);var a=t.length;e.forEach(wu);for(var o=0;o<e.length;o++)r.push(a),a+=e[o].length,Mu(n,e[o]);var s=Kc(n,r);for(o=0;o<s.length;o+=3)i.push(s.slice(o,o+3));return i}};function wu(t){var e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function Mu(t,e){for(var n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}function Su(t,e){pa.call(this),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new Eu(t,e)),this.mergeVertices()}function Eu(t,e){ki.call(this),this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];for(var n=this,r=[],i=[],a=0,o=t.length;a<o;a++){s(t[a])}function s(t){var a=[],o=void 0!==e.curveSegments?e.curveSegments:12,s=void 0!==e.steps?e.steps:1,c=void 0!==e.depth?e.depth:100,u=void 0===e.bevelEnabled||e.bevelEnabled,l=void 0!==e.bevelThickness?e.bevelThickness:6,h=void 0!==e.bevelSize?e.bevelSize:l-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3,f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:Tu;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),c=e.amount);var v,g,y,x,b,_,w,M,S=!1;f&&(v=f.getSpacedPoints(s),S=!0,u=!1,g=f.computeFrenetFrames(s,!1),y=new $n,x=new $n,b=new $n),u||(p=0,l=0,h=0,d=0);var E=t.extractPoints(o),T=E.shape,A=E.holes;if(!_u.isClockWise(T))for(T=T.reverse(),w=0,M=A.length;w<M;w++)_=A[w],_u.isClockWise(_)&&(A[w]=_.reverse());var L=_u.triangulateShape(T,A),R=T;for(w=0,M=A.length;w<M;w++)_=A[w],T=T.concat(_);function P(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}var C,O,D,I,N,B,z=T.length,F=L.length;function U(t,e,n){var r,i,a,o=t.x-e.x,s=t.y-e.y,c=n.x-t.x,u=n.y-t.y,l=o*o+s*s,h=o*u-s*c;if(Math.abs(h)>Number.EPSILON){var d=Math.sqrt(l),p=Math.sqrt(c*c+u*u),f=e.x-s/d,m=e.y+o/d,v=((n.x-u/p-f)*u-(n.y+c/p-m)*c)/(o*u-s*c),g=(r=f+o*v-t.x)*r+(i=m+s*v-t.y)*i;if(g<=2)return new Gn(r,i);a=Math.sqrt(g/2)}else{var y=!1;o>Number.EPSILON?c>Number.EPSILON&&(y=!0):o<-Number.EPSILON?c<-Number.EPSILON&&(y=!0):Math.sign(s)===Math.sign(u)&&(y=!0),y?(r=-s,i=o,a=Math.sqrt(l)):(r=o,i=s,a=Math.sqrt(l/2))}return new Gn(r/a,i/a)}for(var G=[],H=0,k=R.length,j=k-1,V=H+1;H<k;H++,j++,V++)j===k&&(j=0),V===k&&(V=0),G[H]=U(R[H],R[j],R[V]);var W,q,X=[],Y=G.concat();for(w=0,M=A.length;w<M;w++){for(_=A[w],W=[],H=0,j=(k=_.length)-1,V=H+1;H<k;H++,j++,V++)j===k&&(j=0),V===k&&(V=0),W[H]=U(_[H],_[j],_[V]);X.push(W),Y=Y.concat(W)}for(C=0;C<p;C++){for(D=C/p,I=l*Math.cos(D*Math.PI/2),O=h*Math.sin(D*Math.PI/2)+d,H=0,k=R.length;H<k;H++)J((N=P(R[H],G[H],O)).x,N.y,-I);for(w=0,M=A.length;w<M;w++)for(_=A[w],W=X[w],H=0,k=_.length;H<k;H++)J((N=P(_[H],W[H],O)).x,N.y,-I)}for(O=h+d,H=0;H<z;H++)N=u?P(T[H],Y[H],O):T[H],S?(x.copy(g.normals[0]).multiplyScalar(N.x),y.copy(g.binormals[0]).multiplyScalar(N.y),b.copy(v[0]).add(x).add(y),J(b.x,b.y,b.z)):J(N.x,N.y,0);for(q=1;q<=s;q++)for(H=0;H<z;H++)N=u?P(T[H],Y[H],O):T[H],S?(x.copy(g.normals[q]).multiplyScalar(N.x),y.copy(g.binormals[q]).multiplyScalar(N.y),b.copy(v[q]).add(x).add(y),J(b.x,b.y,b.z)):J(N.x,N.y,c/s*q);for(C=p-1;C>=0;C--){for(D=C/p,I=l*Math.cos(D*Math.PI/2),O=h*Math.sin(D*Math.PI/2)+d,H=0,k=R.length;H<k;H++)J((N=P(R[H],G[H],O)).x,N.y,c+I);for(w=0,M=A.length;w<M;w++)for(_=A[w],W=X[w],H=0,k=_.length;H<k;H++)N=P(_[H],W[H],O),S?J(N.x,N.y+v[s-1].y,v[s-1].x+I):J(N.x,N.y,c+I)}function Z(t,e){var n,r;for(H=t.length;--H>=0;){n=H,(r=H-1)<0&&(r=t.length-1);var i=0,a=s+2*p;for(i=0;i<a;i++){var o=z*i,c=z*(i+1);Q(e+n+o,e+r+o,e+r+c,e+n+c)}}}function J(t,e,n){a.push(t),a.push(e),a.push(n)}function $(t,e,i){K(t),K(e),K(i);var a=r.length/3,o=m.generateTopUV(n,r,a-3,a-2,a-1);tt(o[0]),tt(o[1]),tt(o[2])}function Q(t,e,i,a){K(t),K(e),K(a),K(e),K(i),K(a);var o=r.length/3,s=m.generateSideWallUV(n,r,o-6,o-3,o-2,o-1);tt(s[0]),tt(s[1]),tt(s[3]),tt(s[1]),tt(s[2]),tt(s[3])}function K(t){r.push(a[3*t+0]),r.push(a[3*t+1]),r.push(a[3*t+2])}function tt(t){i.push(t.x),i.push(t.y)}!function(){var t=r.length/3;if(u){var e=0,i=z*e;for(H=0;H<F;H++)$((B=L[H])[2]+i,B[1]+i,B[0]+i);for(i=z*(e=s+2*p),H=0;H<F;H++)$((B=L[H])[0]+i,B[1]+i,B[2]+i)}else{for(H=0;H<F;H++)$((B=L[H])[2],B[1],B[0]);for(H=0;H<F;H++)$((B=L[H])[0]+z*s,B[1]+z*s,B[2]+z*s)}n.addGroup(t,r.length/3-t,0)}(),function(){var t=r.length/3,e=0;for(Z(R,e),e+=R.length,w=0,M=A.length;w<M;w++)Z(_=A[w],e),e+=_.length;n.addGroup(t,r.length/3-t,1)}()}this.setAttribute("position",new Ci(r,3)),this.setAttribute("uv",new Ci(i,2)),this.computeVertexNormals()}Su.prototype=Object.create(pa.prototype),Su.prototype.constructor=Su,Su.prototype.toJSON=function(){var t=pa.prototype.toJSON.call(this);return Au(this.parameters.shapes,this.parameters.options,t)},Eu.prototype=Object.create(ki.prototype),Eu.prototype.constructor=Eu,Eu.prototype.toJSON=function(){var t=ki.prototype.toJSON.call(this);return Au(this.parameters.shapes,this.parameters.options,t)};var Tu={generateTopUV:function(t,e,n,r,i){var a=e[3*n],o=e[3*n+1],s=e[3*r],c=e[3*r+1],u=e[3*i],l=e[3*i+1];return[new Gn(a,o),new Gn(s,c),new Gn(u,l)]},generateSideWallUV:function(t,e,n,r,i,a){var o=e[3*n],s=e[3*n+1],c=e[3*n+2],u=e[3*r],l=e[3*r+1],h=e[3*r+2],d=e[3*i],p=e[3*i+1],f=e[3*i+2],m=e[3*a],v=e[3*a+1],g=e[3*a+2];return Math.abs(s-l)<.01?[new Gn(o,1-c),new Gn(u,1-h),new Gn(d,1-f),new Gn(m,1-g)]:[new Gn(s,1-c),new Gn(l,1-h),new Gn(p,1-f),new Gn(v,1-g)]}};function Au(t,e,n){if(n.shapes=[],Array.isArray(t))for(var r=0,i=t.length;r<i;r++){var a=t[r];n.shapes.push(a.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}function Lu(t,e){pa.call(this),this.type="TextGeometry",this.parameters={text:t,parameters:e},this.fromBufferGeometry(new Ru(t,e)),this.mergeVertices()}function Ru(t,e){var n=(e=e||{}).font;if(!n||!n.isFont)return console.error("THREE.TextGeometry: font parameter is not an instance of THREE.Font."),new pa;var r=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),Eu.call(this,r,e),this.type="TextBufferGeometry"}function Pu(t,e,n,r,i,a,o){pa.call(this),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o},this.fromBufferGeometry(new Cu(t,e,n,r,i,a,o)),this.mergeVertices()}function Cu(t,e,n,r,i,a,o){ki.call(this),this.type="SphereBufferGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:i,thetaStart:a,thetaLength:o},t=t||1,e=Math.max(3,Math.floor(e)||8),n=Math.max(2,Math.floor(n)||6),r=void 0!==r?r:0,i=void 0!==i?i:2*Math.PI,a=void 0!==a?a:0,o=void 0!==o?o:Math.PI;var s,c,u=Math.min(a+o,Math.PI),l=0,h=[],d=new $n,p=new $n,f=[],m=[],v=[],g=[];for(c=0;c<=n;c++){var y=[],x=c/n,b=0;for(0==c&&0==a?b=.5/e:c==n&&u==Math.PI&&(b=-.5/e),s=0;s<=e;s++){var _=s/e;d.x=-t*Math.cos(r+_*i)*Math.sin(a+x*o),d.y=t*Math.cos(a+x*o),d.z=t*Math.sin(r+_*i)*Math.sin(a+x*o),m.push(d.x,d.y,d.z),p.copy(d).normalize(),v.push(p.x,p.y,p.z),g.push(_+b,1-x),y.push(l++)}h.push(y)}for(c=0;c<n;c++)for(s=0;s<e;s++){var w=h[c][s+1],M=h[c][s],S=h[c+1][s],E=h[c+1][s+1];(0!==c||a>0)&&f.push(w,M,E),(c!==n-1||u<Math.PI)&&f.push(M,S,E)}this.setIndex(f),this.setAttribute("position",new Ci(m,3)),this.setAttribute("normal",new Ci(v,3)),this.setAttribute("uv",new Ci(g,2))}function Ou(t,e,n,r,i,a){pa.call(this),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a},this.fromBufferGeometry(new Du(t,e,n,r,i,a)),this.mergeVertices()}function Du(t,e,n,r,i,a){ki.call(this),this.type="RingBufferGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:i,thetaLength:a},t=t||.5,e=e||1,i=void 0!==i?i:0,a=void 0!==a?a:2*Math.PI,n=void 0!==n?Math.max(3,n):8;var o,s,c,u=[],l=[],h=[],d=[],p=t,f=(e-t)/(r=void 0!==r?Math.max(1,r):1),m=new $n,v=new Gn;for(s=0;s<=r;s++){for(c=0;c<=n;c++)o=i+c/n*a,m.x=p*Math.cos(o),m.y=p*Math.sin(o),l.push(m.x,m.y,m.z),h.push(0,0,1),v.x=(m.x/e+1)/2,v.y=(m.y/e+1)/2,d.push(v.x,v.y);p+=f}for(s=0;s<r;s++){var g=s*(n+1);for(c=0;c<n;c++){var y=o=c+g,x=o+n+1,b=o+n+2,_=o+1;u.push(y,x,_),u.push(x,b,_)}}this.setIndex(u),this.setAttribute("position",new Ci(l,3)),this.setAttribute("normal",new Ci(h,3)),this.setAttribute("uv",new Ci(d,2))}function Iu(t,e,n,r){pa.call(this),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},this.fromBufferGeometry(new Nu(t,e,n,r)),this.mergeVertices()}function Nu(t,e,n,r){ki.call(this),this.type="LatheBufferGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},e=Math.floor(e)||12,n=n||0,r=r||2*Math.PI,r=Un.clamp(r,0,2*Math.PI);var i,a,o,s=[],c=[],u=[],l=1/e,h=new $n,d=new Gn;for(a=0;a<=e;a++){var p=n+a*l*r,f=Math.sin(p),m=Math.cos(p);for(o=0;o<=t.length-1;o++)h.x=t[o].x*f,h.y=t[o].y,h.z=t[o].x*m,c.push(h.x,h.y,h.z),d.x=a/e,d.y=o/(t.length-1),u.push(d.x,d.y)}for(a=0;a<e;a++)for(o=0;o<t.length-1;o++){var v=i=o+a*t.length,g=i+t.length,y=i+t.length+1,x=i+1;s.push(v,g,x),s.push(g,y,x)}if(this.setIndex(s),this.setAttribute("position",new Ci(c,3)),this.setAttribute("uv",new Ci(u,2)),this.computeVertexNormals(),r===2*Math.PI){var b=this.attributes.normal.array,_=new $n,w=new $n,M=new $n;for(i=e*t.length*3,a=0,o=0;a<t.length;a++,o+=3)_.x=b[o+0],_.y=b[o+1],_.z=b[o+2],w.x=b[i+o+0],w.y=b[i+o+1],w.z=b[i+o+2],M.addVectors(_,w).normalize(),b[o+0]=b[i+o+0]=M.x,b[o+1]=b[i+o+1]=M.y,b[o+2]=b[i+o+2]=M.z}}function Bu(t,e){pa.call(this),this.type="ShapeGeometry","object"==typeof e&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new zu(t,e)),this.mergeVertices()}function zu(t,e){ki.call(this),this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;var n=[],r=[],i=[],a=[],o=0,s=0;if(!1===Array.isArray(t))u(t);else for(var c=0;c<t.length;c++)u(t[c]),this.addGroup(o,s,c),o+=s,s=0;function u(t){var o,c,u,l=r.length/3,h=t.extractPoints(e),d=h.shape,p=h.holes;for(!1===_u.isClockWise(d)&&(d=d.reverse()),o=0,c=p.length;o<c;o++)u=p[o],!0===_u.isClockWise(u)&&(p[o]=u.reverse());var f=_u.triangulateShape(d,p);for(o=0,c=p.length;o<c;o++)u=p[o],d=d.concat(u);for(o=0,c=d.length;o<c;o++){var m=d[o];r.push(m.x,m.y,0),i.push(0,0,1),a.push(m.x,m.y)}for(o=0,c=f.length;o<c;o++){var v=f[o],g=v[0]+l,y=v[1]+l,x=v[2]+l;n.push(g,y,x),s+=3}}this.setIndex(n),this.setAttribute("position",new Ci(r,3)),this.setAttribute("normal",new Ci(i,3)),this.setAttribute("uv",new Ci(a,2))}function Fu(t,e){if(e.shapes=[],Array.isArray(t))for(var n=0,r=t.length;n<r;n++){var i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}function Uu(t,e){ki.call(this),this.type="EdgesGeometry",this.parameters={thresholdAngle:e},e=void 0!==e?e:1;var n,r,i,a,o=[],s=Math.cos(Un.DEG2RAD*e),c=[0,0],u={},l=["a","b","c"];t.isBufferGeometry?(a=new pa).fromBufferGeometry(t):a=t.clone(),a.mergeVertices(),a.computeFaceNormals();for(var h=a.vertices,d=a.faces,p=0,f=d.length;p<f;p++)for(var m=d[p],v=0;v<3;v++)n=m[l[v]],r=m[l[(v+1)%3]],c[0]=Math.min(n,r),c[1]=Math.max(n,r),void 0===u[i=c[0]+","+c[1]]?u[i]={index1:c[0],index2:c[1],face1:p,face2:void 0}:u[i].face2=p;for(i in u){var g=u[i];if(void 0===g.face2||d[g.face1].normal.dot(d[g.face2].normal)<=s){var y=h[g.index1];o.push(y.x,y.y,y.z),y=h[g.index2],o.push(y.x,y.y,y.z)}}this.setAttribute("position",new Ci(o,3))}function Gu(t,e,n,r,i,a,o,s){pa.call(this),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s},this.fromBufferGeometry(new Hu(t,e,n,r,i,a,o,s)),this.mergeVertices()}function Hu(t,e,n,r,i,a,o,s){ki.call(this),this.type="CylinderBufferGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:i,openEnded:a,thetaStart:o,thetaLength:s};var c=this;t=void 0!==t?t:1,e=void 0!==e?e:1,n=n||1,r=Math.floor(r)||8,i=Math.floor(i)||1,a=void 0!==a&&a,o=void 0!==o?o:0,s=void 0!==s?s:2*Math.PI;var u=[],l=[],h=[],d=[],p=0,f=[],m=n/2,v=0;function g(n){var i,a,f,g=new Gn,y=new $n,x=0,b=!0===n?t:e,_=!0===n?1:-1;for(a=p,i=1;i<=r;i++)l.push(0,m*_,0),h.push(0,_,0),d.push(.5,.5),p++;for(f=p,i=0;i<=r;i++){var w=i/r*s+o,M=Math.cos(w),S=Math.sin(w);y.x=b*S,y.y=m*_,y.z=b*M,l.push(y.x,y.y,y.z),h.push(0,_,0),g.x=.5*M+.5,g.y=.5*S*_+.5,d.push(g.x,g.y),p++}for(i=0;i<r;i++){var E=a+i,T=f+i;!0===n?u.push(T,T+1,E):u.push(T+1,T,E),x+=3}c.addGroup(v,x,!0===n?1:2),v+=x}!function(){var a,g,y=new $n,x=new $n,b=0,_=(e-t)/n;for(g=0;g<=i;g++){var w=[],M=g/i,S=M*(e-t)+t;for(a=0;a<=r;a++){var E=a/r,T=E*s+o,A=Math.sin(T),L=Math.cos(T);x.x=S*A,x.y=-M*n+m,x.z=S*L,l.push(x.x,x.y,x.z),y.set(A,_,L).normalize(),h.push(y.x,y.y,y.z),d.push(E,1-M),w.push(p++)}f.push(w)}for(a=0;a<r;a++)for(g=0;g<i;g++){var R=f[g][a],P=f[g+1][a],C=f[g+1][a+1],O=f[g][a+1];u.push(R,P,O),u.push(P,C,O),b+=6}c.addGroup(v,b,0),v+=b}(),!1===a&&(t>0&&g(!0),e>0&&g(!1)),this.setIndex(u),this.setAttribute("position",new Ci(l,3)),this.setAttribute("normal",new Ci(h,3)),this.setAttribute("uv",new Ci(d,2))}function ku(t,e,n,r,i,a,o){Gu.call(this,0,t,e,n,r,i,a,o),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}function ju(t,e,n,r,i,a,o){Hu.call(this,0,t,e,n,r,i,a,o),this.type="ConeBufferGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:i,thetaStart:a,thetaLength:o}}function Vu(t,e,n,r){pa.call(this),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},this.fromBufferGeometry(new Wu(t,e,n,r)),this.mergeVertices()}function Wu(t,e,n,r){ki.call(this),this.type="CircleBufferGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},t=t||1,e=void 0!==e?Math.max(3,e):8,n=void 0!==n?n:0,r=void 0!==r?r:2*Math.PI;var i,a,o=[],s=[],c=[],u=[],l=new $n,h=new Gn;for(s.push(0,0,0),c.push(0,0,1),u.push(.5,.5),a=0,i=3;a<=e;a++,i+=3){var d=n+a/e*r;l.x=t*Math.cos(d),l.y=t*Math.sin(d),s.push(l.x,l.y,l.z),c.push(0,0,1),h.x=(s[i]/t+1)/2,h.y=(s[i+1]/t+1)/2,u.push(h.x,h.y)}for(i=1;i<=e;i++)o.push(i,i+1,0);this.setIndex(o),this.setAttribute("position",new Ci(s,3)),this.setAttribute("normal",new Ci(c,3)),this.setAttribute("uv",new Ci(u,2))}Lu.prototype=Object.create(pa.prototype),Lu.prototype.constructor=Lu,Ru.prototype=Object.create(Eu.prototype),Ru.prototype.constructor=Ru,Pu.prototype=Object.create(pa.prototype),Pu.prototype.constructor=Pu,Cu.prototype=Object.create(ki.prototype),Cu.prototype.constructor=Cu,Ou.prototype=Object.create(pa.prototype),Ou.prototype.constructor=Ou,Du.prototype=Object.create(ki.prototype),Du.prototype.constructor=Du,Iu.prototype=Object.create(pa.prototype),Iu.prototype.constructor=Iu,Nu.prototype=Object.create(ki.prototype),Nu.prototype.constructor=Nu,Bu.prototype=Object.create(pa.prototype),Bu.prototype.constructor=Bu,Bu.prototype.toJSON=function(){var t=pa.prototype.toJSON.call(this);return Fu(this.parameters.shapes,t)},zu.prototype=Object.create(ki.prototype),zu.prototype.constructor=zu,zu.prototype.toJSON=function(){var t=ki.prototype.toJSON.call(this);return Fu(this.parameters.shapes,t)},Uu.prototype=Object.create(ki.prototype),Uu.prototype.constructor=Uu,Gu.prototype=Object.create(pa.prototype),Gu.prototype.constructor=Gu,Hu.prototype=Object.create(ki.prototype),Hu.prototype.constructor=Hu,ku.prototype=Object.create(Gu.prototype),ku.prototype.constructor=ku,ju.prototype=Object.create(Hu.prototype),ju.prototype.constructor=ju,Vu.prototype=Object.create(pa.prototype),Vu.prototype.constructor=Vu,Wu.prototype=Object.create(ki.prototype),Wu.prototype.constructor=Wu;var qu=Object.freeze({__proto__:null,WireframeGeometry:Ic,ParametricGeometry:Nc,ParametricBufferGeometry:Bc,TetrahedronGeometry:Uc,TetrahedronBufferGeometry:Gc,OctahedronGeometry:Hc,OctahedronBufferGeometry:kc,IcosahedronGeometry:jc,IcosahedronBufferGeometry:Vc,DodecahedronGeometry:Wc,DodecahedronBufferGeometry:qc,PolyhedronGeometry:zc,PolyhedronBufferGeometry:Fc,TubeGeometry:Xc,TubeBufferGeometry:Yc,TorusKnotGeometry:Zc,TorusKnotBufferGeometry:Jc,TorusGeometry:$c,TorusBufferGeometry:Qc,TextGeometry:Lu,TextBufferGeometry:Ru,SphereGeometry:Pu,SphereBufferGeometry:Cu,RingGeometry:Ou,RingBufferGeometry:Du,PlaneGeometry:Ca,PlaneBufferGeometry:Oa,LatheGeometry:Iu,LatheBufferGeometry:Nu,ShapeGeometry:Bu,ShapeBufferGeometry:zu,ExtrudeGeometry:Su,ExtrudeBufferGeometry:Eu,EdgesGeometry:Uu,ConeGeometry:ku,ConeBufferGeometry:ju,CylinderGeometry:Gu,CylinderBufferGeometry:Hu,CircleGeometry:Vu,CircleBufferGeometry:Wu,BoxGeometry:fa,BoxBufferGeometry:ma});function Xu(t){bi.call(this),this.type="ShadowMaterial",this.color=new fi(0),this.transparent=!0,this.setValues(t)}function Yu(t){xa.call(this,t),this.type="RawShaderMaterial"}function Zu(t){bi.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new fi(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=cn,this.normalScale=new Gn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.vertexTangents=!1,this.setValues(t)}function Ju(t){Zu.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Gn(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,this.sheen=null,this.transparency=0,this.setValues(t)}function $u(t){bi.call(this),this.type="MeshPhongMaterial",this.color=new fi(16777215),this.specular=new fi(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=cn,this.normalScale=new Gn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Qu(t){bi.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new fi(16777215),this.specular=new fi(1118481),this.shininess=30,this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=cn,this.normalScale=new Gn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function Ku(t){bi.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=cn,this.normalScale=new Gn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function tl(t){bi.call(this),this.type="MeshLambertMaterial",this.color=new fi(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fi(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=$,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function el(t){bi.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new fi(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=cn,this.normalScale=new Gn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(t)}function nl(t){dc.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}Xu.prototype=Object.create(bi.prototype),Xu.prototype.constructor=Xu,Xu.prototype.isShadowMaterial=!0,Xu.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this},Yu.prototype=Object.create(xa.prototype),Yu.prototype.constructor=Yu,Yu.prototype.isRawShaderMaterial=!0,Zu.prototype=Object.create(bi.prototype),Zu.prototype.constructor=Zu,Zu.prototype.isMeshStandardMaterial=!0,Zu.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this.vertexTangents=t.vertexTangents,this},Ju.prototype=Object.create(Zu.prototype),Ju.prototype.constructor=Ju,Ju.prototype.isMeshPhysicalMaterial=!0,Ju.prototype.copy=function(t){return Zu.prototype.copy.call(this,t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.reflectivity=t.reflectivity,t.sheen?this.sheen=(this.sheen||new fi).copy(t.sheen):this.sheen=null,this.transparency=t.transparency,this},$u.prototype=Object.create(bi.prototype),$u.prototype.constructor=$u,$u.prototype.isMeshPhongMaterial=!0,$u.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Qu.prototype=Object.create(bi.prototype),Qu.prototype.constructor=Qu,Qu.prototype.isMeshToonMaterial=!0,Qu.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},Ku.prototype=Object.create(bi.prototype),Ku.prototype.constructor=Ku,Ku.prototype.isMeshNormalMaterial=!0,Ku.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},tl.prototype=Object.create(bi.prototype),tl.prototype.constructor=tl,tl.prototype.isMeshLambertMaterial=!0,tl.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},el.prototype=Object.create(bi.prototype),el.prototype.constructor=el,el.prototype.isMeshMatcapMaterial=!0,el.prototype.copy=function(t){return bi.prototype.copy.call(this,t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.skinning=t.skinning,this.morphTargets=t.morphTargets,this.morphNormals=t.morphNormals,this},nl.prototype=Object.create(dc.prototype),nl.prototype.constructor=nl,nl.prototype.isLineDashedMaterial=!0,nl.prototype.copy=function(t){return dc.prototype.copy.call(this,t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this};var rl=Object.freeze({__proto__:null,ShadowMaterial:Xu,SpriteMaterial:Fs,RawShaderMaterial:Yu,ShaderMaterial:xa,PointsMaterial:Mc,MeshPhysicalMaterial:Ju,MeshStandardMaterial:Zu,MeshPhongMaterial:$u,MeshToonMaterial:Qu,MeshNormalMaterial:Ku,MeshLambertMaterial:tl,MeshDepthMaterial:ws,MeshDistanceMaterial:Ms,MeshBasicMaterial:_i,MeshMatcapMaterial:el,LineDashedMaterial:nl,LineBasicMaterial:dc,Material:bi}),il={arraySlice:function(t,e,n){return il.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){for(var e=t.length,n=new Array(e),r=0;r!==e;++r)n[r]=r;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){for(var r=t.length,i=new t.constructor(r),a=0,o=0;o!==r;++a)for(var s=n[a]*e,c=0;c!==e;++c)i[o++]=t[s+c];return i},flattenJSON:function(t,e,n,r){for(var i=1,a=t[0];void 0!==a&&void 0===a[r];)a=t[i++];if(void 0!==a){var o=a[r];if(void 0!==o)if(Array.isArray(o))do{void 0!==(o=a[r])&&(e.push(a.time),n.push.apply(n,o)),a=t[i++]}while(void 0!==a);else if(void 0!==o.toArray)do{void 0!==(o=a[r])&&(e.push(a.time),o.toArray(n,n.length)),a=t[i++]}while(void 0!==a);else do{void 0!==(o=a[r])&&(e.push(a.time),n.push(o)),a=t[i++]}while(void 0!==a)}},subclip:function(t,e,n,r,i){i=i||30;var a=t.clone();a.name=e;for(var o=[],s=0;s<a.tracks.length;++s){for(var c=a.tracks[s],u=c.getValueSize(),l=[],h=[],d=0;d<c.times.length;++d){var p=c.times[d]*i;if(!(p<n||p>=r)){l.push(c.times[d]);for(var f=0;f<u;++f)h.push(c.values[d*u+f])}}0!==l.length&&(c.times=il.convertArray(l,c.times.constructor),c.values=il.convertArray(h,c.values.constructor),o.push(c))}a.tracks=o;var m=1/0;for(s=0;s<a.tracks.length;++s)m>a.tracks[s].times[0]&&(m=a.tracks[s].times[0]);for(s=0;s<a.tracks.length;++s)a.tracks[s].shift(-1*m);return a.resetDuration(),a}};function al(t,e,n,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new e.constructor(n),this.sampleValues=e,this.valueSize=n}function ol(t,e,n,r){al.call(this,t,e,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}function sl(t,e,n,r){al.call(this,t,e,n,r)}function cl(t,e,n,r){al.call(this,t,e,n,r)}function ul(t,e,n,r){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=il.convertArray(e,this.TimeBufferType),this.values=il.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}function ll(t,e,n){ul.call(this,t,e,n)}function hl(t,e,n,r){ul.call(this,t,e,n,r)}function dl(t,e,n,r){ul.call(this,t,e,n,r)}function pl(t,e,n,r){al.call(this,t,e,n,r)}function fl(t,e,n,r){ul.call(this,t,e,n,r)}function ml(t,e,n,r){ul.call(this,t,e,n,r)}function vl(t,e,n,r){ul.call(this,t,e,n,r)}function gl(t,e,n){this.name=t,this.tracks=n,this.duration=void 0!==e?e:-1,this.uuid=Un.generateUUID(),this.duration<0&&this.resetDuration()}function yl(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");var e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return dl;case"vector":case"vector2":case"vector3":case"vector4":return vl;case"color":return hl;case"quaternion":return fl;case"bool":case"boolean":return ll;case"string":return ml}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){var n=[],r=[];il.flattenJSON(t.keys,n,r,"value"),t.times=n,t.values=r}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}Object.assign(al.prototype,{evaluate:function(t){var e=this.parameterPositions,n=this._cachedIndex,r=e[n],i=e[n-1];t:{e:{var a;n:{r:if(!(t<r)){for(var o=n+2;;){if(void 0===r){if(t<i)break r;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,i)}if(n===o)break;if(i=r,t<(r=e[++n]))break e}a=e.length;break n}if(t>=i)break t;var s=e[1];t<s&&(n=2,i=s);for(o=n-2;;){if(void 0===i)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(n===o)break;if(r=i,t>=(i=e[--n-1]))break e}a=n,n=0}for(;n<a;){var c=n+a>>>1;t<e[c]?a=c:n=c+1}if(r=e[n],void 0===(i=e[n-1]))return this._cachedIndex=0,this.beforeStart_(0,t,r);if(void 0===r)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,i,t)}this._cachedIndex=n,this.intervalChanged_(n,i,r)}return this.interpolate_(n,i,t,r)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(t){for(var e=this.resultBuffer,n=this.sampleValues,r=this.valueSize,i=t*r,a=0;a!==r;++a)e[a]=n[i+a];return e},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}}),Object.assign(al.prototype,{beforeStart_:al.prototype.copySampleValue_,afterEnd_:al.prototype.copySampleValue_}),ol.prototype=Object.assign(Object.create(al.prototype),{constructor:ol,DefaultSettings_:{endingStart:We,endingEnd:We},intervalChanged_:function(t,e,n){var r=this.parameterPositions,i=t-2,a=t+1,o=r[i],s=r[a];if(void 0===o)switch(this.getSettings_().endingStart){case qe:i=t,o=2*e-n;break;case Xe:o=e+r[i=r.length-2]-r[i+1];break;default:i=t,o=n}if(void 0===s)switch(this.getSettings_().endingEnd){case qe:a=t,s=2*n-e;break;case Xe:a=1,s=n+r[1]-r[0];break;default:a=t-1,s=e}var c=.5*(n-e),u=this.valueSize;this._weightPrev=c/(e-o),this._weightNext=c/(s-n),this._offsetPrev=i*u,this._offsetNext=a*u},interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=s-o,u=this._offsetPrev,l=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(n-e)/(r-e),f=p*p,m=f*p,v=-h*m+2*h*f-h*p,g=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,y=(-1-d)*m+(1.5+d)*f+.5*p,x=d*m-d*f,b=0;b!==o;++b)i[b]=v*a[u+b]+g*a[c+b]+y*a[s+b]+x*a[l+b];return i}}),sl.prototype=Object.assign(Object.create(al.prototype),{constructor:sl,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=s-o,u=(n-e)/(r-e),l=1-u,h=0;h!==o;++h)i[h]=a[c+h]*l+a[s+h]*u;return i}}),cl.prototype=Object.assign(Object.create(al.prototype),{constructor:cl,interpolate_:function(t){return this.copySampleValue_(t-1)}}),Object.assign(ul,{toJSON:function(t){var e,n=t.constructor;if(void 0!==n.toJSON)e=n.toJSON(t);else{e={name:t.name,times:il.convertArray(t.times,Array),values:il.convertArray(t.values,Array)};var r=t.getInterpolation();r!==t.DefaultInterpolation&&(e.interpolation=r)}return e.type=t.ValueTypeName,e}}),Object.assign(ul.prototype,{constructor:ul,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:je,InterpolantFactoryMethodDiscrete:function(t){return new cl(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodLinear:function(t){return new sl(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:function(t){return new ol(this.times,this.values,this.getValueSize(),t)},setInterpolation:function(t){var e;switch(t){case ke:e=this.InterpolantFactoryMethodDiscrete;break;case je:e=this.InterpolantFactoryMethodLinear;break;case Ve:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){var n="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(n);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",n),this}return this.createInterpolant=e,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ke;case this.InterpolantFactoryMethodLinear:return je;case this.InterpolantFactoryMethodSmooth:return Ve}},getValueSize:function(){return this.values.length/this.times.length},shift:function(t){if(0!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]+=t;return this},scale:function(t){if(1!==t)for(var e=this.times,n=0,r=e.length;n!==r;++n)e[n]*=t;return this},trim:function(t,e){for(var n=this.times,r=n.length,i=0,a=r-1;i!==r&&n[i]<t;)++i;for(;-1!==a&&n[a]>e;)--a;if(++a,0!==i||a!==r){i>=a&&(i=(a=Math.max(a,1))-1);var o=this.getValueSize();this.times=il.arraySlice(n,i,a),this.values=il.arraySlice(this.values,i*o,a*o)}return this},validate:function(){var t=!0,e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);var n=this.times,r=this.values,i=n.length;0===i&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);for(var a=null,o=0;o!==i;o++){var s=n[o];if("number"==typeof s&&isNaN(s)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,s),t=!1;break}if(null!==a&&a>s){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,s,a),t=!1;break}a=s}if(void 0!==r&&il.isTypedArray(r)){o=0;for(var c=r.length;o!==c;++o){var u=r[o];if(isNaN(u)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,u),t=!1;break}}}return t},optimize:function(){for(var t=il.arraySlice(this.times),e=il.arraySlice(this.values),n=this.getValueSize(),r=this.getInterpolation()===Ve,i=1,a=t.length-1,o=1;o<a;++o){var s=!1,c=t[o];if(c!==t[o+1]&&(1!==o||c!==c[0]))if(r)s=!0;else for(var u=o*n,l=u-n,h=u+n,d=0;d!==n;++d){var p=e[u+d];if(p!==e[l+d]||p!==e[h+d]){s=!0;break}}if(s){if(o!==i){t[i]=t[o];var f=o*n,m=i*n;for(d=0;d!==n;++d)e[m+d]=e[f+d]}++i}}if(a>0){t[i]=t[a];for(f=a*n,m=i*n,d=0;d!==n;++d)e[m+d]=e[f+d];++i}return i!==t.length?(this.times=il.arraySlice(t,0,i),this.values=il.arraySlice(e,0,i*n)):(this.times=t,this.values=e),this},clone:function(){var t=il.arraySlice(this.times,0),e=il.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}),ll.prototype=Object.assign(Object.create(ul.prototype),{constructor:ll,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:ke,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),hl.prototype=Object.assign(Object.create(ul.prototype),{constructor:hl,ValueTypeName:"color"}),dl.prototype=Object.assign(Object.create(ul.prototype),{constructor:dl,ValueTypeName:"number"}),pl.prototype=Object.assign(Object.create(al.prototype),{constructor:pl,interpolate_:function(t,e,n,r){for(var i=this.resultBuffer,a=this.sampleValues,o=this.valueSize,s=t*o,c=(n-e)/(r-e),u=s+o;s!==u;s+=4)Yn.slerpFlat(i,0,a,s-o,a,s,c);return i}}),fl.prototype=Object.assign(Object.create(ul.prototype),{constructor:fl,ValueTypeName:"quaternion",DefaultInterpolation:je,InterpolantFactoryMethodLinear:function(t){return new pl(this.times,this.values,this.getValueSize(),t)},InterpolantFactoryMethodSmooth:void 0}),ml.prototype=Object.assign(Object.create(ul.prototype),{constructor:ml,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:ke,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0}),vl.prototype=Object.assign(Object.create(ul.prototype),{constructor:vl,ValueTypeName:"vector"}),Object.assign(gl,{parse:function(t){for(var e=[],n=t.tracks,r=1/(t.fps||1),i=0,a=n.length;i!==a;++i)e.push(yl(n[i]).scale(r));return new gl(t.name,t.duration,e)},toJSON:function(t){for(var e=[],n=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid},i=0,a=n.length;i!==a;++i)e.push(ul.toJSON(n[i]));return r},CreateFromMorphTargetSequence:function(t,e,n,r){for(var i=e.length,a=[],o=0;o<i;o++){var s=[],c=[];s.push((o+i-1)%i,o,(o+1)%i),c.push(0,1,0);var u=il.getKeyframeOrder(s);s=il.sortedArray(s,1,u),c=il.sortedArray(c,1,u),r||0!==s[0]||(s.push(i),c.push(c[0])),a.push(new dl(".morphTargetInfluences["+e[o].name+"]",s,c).scale(1/n))}return new gl(t,-1,a)},findByName:function(t,e){var n=t;if(!Array.isArray(t)){var r=t;n=r.geometry&&r.geometry.animations||r.animations}for(var i=0;i<n.length;i++)if(n[i].name===e)return n[i];return null},CreateClipsFromMorphTargetSequences:function(t,e,n){for(var r={},i=/^([\w-]*?)([\d]+)$/,a=0,o=t.length;a<o;a++){var s=t[a],c=s.name.match(i);if(c&&c.length>1){var u=r[h=c[1]];u||(r[h]=u=[]),u.push(s)}}var l=[];for(var h in r)l.push(gl.CreateFromMorphTargetSequence(h,r[h],e,n));return l},parseAnimation:function(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;for(var n=function(t,e,n,r,i){if(0!==n.length){var a=[],o=[];il.flattenJSON(n,a,o,r),0!==a.length&&i.push(new t(e,a,o))}},r=[],i=t.name||"default",a=t.length||-1,o=t.fps||30,s=t.hierarchy||[],c=0;c<s.length;c++){var u=s[c].keys;if(u&&0!==u.length)if(u[0].morphTargets){for(var l={},h=0;h<u.length;h++)if(u[h].morphTargets)for(var d=0;d<u[h].morphTargets.length;d++)l[u[h].morphTargets[d]]=-1;for(var p in l){var f=[],m=[];for(d=0;d!==u[h].morphTargets.length;++d){var v=u[h];f.push(v.time),m.push(v.morphTarget===p?1:0)}r.push(new dl(".morphTargetInfluence["+p+"]",f,m))}a=l.length*(o||1)}else{var g=".bones["+e[c].name+"]";n(vl,g+".position",u,"pos",r),n(fl,g+".quaternion",u,"rot",r),n(vl,g+".scale",u,"scl",r)}}return 0===r.length?null:new gl(i,a,r)}}),Object.assign(gl.prototype,{resetDuration:function(){for(var t=0,e=0,n=this.tracks.length;e!==n;++e){var r=this.tracks[e];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this},trim:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this},validate:function(){for(var t=!0,e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t},optimize:function(){for(var t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this},clone:function(){for(var t=[],e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new gl(this.name,this.duration,t)}});var xl={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};function bl(t,e,n){var r=this,i=!1,a=0,o=0,s=void 0,c=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===i&&void 0!==r.onStart&&r.onStart(t,a,o),i=!0},this.itemEnd=function(t){a++,void 0!==r.onProgress&&r.onProgress(t,a,o),a===o&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(t){void 0!==r.onError&&r.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this},this.addHandler=function(t,e){return c.push(t,e),this},this.removeHandler=function(t){var e=c.indexOf(t);return-1!==e&&c.splice(e,2),this},this.getHandler=function(t){for(var e=0,n=c.length;e<n;e+=2){var r=c[e],i=c[e+1];if(r.global&&(r.lastIndex=0),r.test(t))return i}return null}}var _l=new bl;function wl(t){this.manager=void 0!==t?t:_l,this.crossOrigin="anonymous",this.path="",this.resourcePath=""}Object.assign(wl.prototype,{load:function(){},parse:function(){},setCrossOrigin:function(t){return this.crossOrigin=t,this},setPath:function(t){return this.path=t,this},setResourcePath:function(t){return this.resourcePath=t,this}});var Ml={};function Sl(t){wl.call(this,t)}function El(t){wl.call(this,t)}function Tl(t){wl.call(this,t)}function Al(t){wl.call(this,t)}function Ll(t){wl.call(this,t)}function Rl(t){wl.call(this,t)}function Pl(t){wl.call(this,t)}function Cl(){this.type="Curve",this.arcLengthDivisions=200}function Ol(t,e,n,r,i,a,o,s){Cl.call(this),this.type="EllipseCurve",this.aX=t||0,this.aY=e||0,this.xRadius=n||1,this.yRadius=r||1,this.aStartAngle=i||0,this.aEndAngle=a||2*Math.PI,this.aClockwise=o||!1,this.aRotation=s||0}function Dl(t,e,n,r,i,a){Ol.call(this,t,e,n,n,r,i,a),this.type="ArcCurve"}function Il(){var t=0,e=0,n=0,r=0;function i(i,a,o,s){t=i,e=o,n=-3*i+3*a-2*o-s,r=2*i-2*a+o+s}return{initCatmullRom:function(t,e,n,r,a){i(e,n,a*(n-t),a*(r-e))},initNonuniformCatmullRom:function(t,e,n,r,a,o,s){var c=(e-t)/a-(n-t)/(a+o)+(n-e)/o,u=(n-e)/o-(r-e)/(o+s)+(r-n)/s;i(e,n,c*=o,u*=o)},calc:function(i){var a=i*i;return t+e*i+n*a+r*(a*i)}}}Sl.prototype=Object.assign(Object.create(wl.prototype),{constructor:Sl,load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,a=xl.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;if(void 0===Ml[t]){var o=t.match(/^data:(.*?)(;base64)?,(.*)$/);if(o){var s=o[1],c=!!o[2],u=o[3];u=decodeURIComponent(u),c&&(u=atob(u));try{var l,h=(this.responseType||"").toLowerCase();switch(h){case"arraybuffer":case"blob":for(var d=new Uint8Array(u.length),p=0;p<u.length;p++)d[p]=u.charCodeAt(p);l="blob"===h?new Blob([d.buffer],{type:s}):d.buffer;break;case"document":var f=new DOMParser;l=f.parseFromString(u,s);break;case"json":l=JSON.parse(u);break;default:l=u}setTimeout((function(){e&&e(l),i.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)}),0)}}else{Ml[t]=[],Ml[t].push({onLoad:e,onProgress:n,onError:r});var m=new XMLHttpRequest;for(var v in m.open("GET",t,!0),m.addEventListener("load",(function(e){var n=this.response,r=Ml[t];if(delete Ml[t],200===this.status||0===this.status){0===this.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),xl.add(t,n);for(var a=0,o=r.length;a<o;a++){(s=r[a]).onLoad&&s.onLoad(n)}i.manager.itemEnd(t)}else{for(a=0,o=r.length;a<o;a++){var s;(s=r[a]).onError&&s.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}}),!1),m.addEventListener("progress",(function(e){for(var n=Ml[t],r=0,i=n.length;r<i;r++){var a=n[r];a.onProgress&&a.onProgress(e)}}),!1),m.addEventListener("error",(function(e){var n=Ml[t];delete Ml[t];for(var r=0,a=n.length;r<a;r++){var o=n[r];o.onError&&o.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),m.addEventListener("abort",(function(e){var n=Ml[t];delete Ml[t];for(var r=0,a=n.length;r<a;r++){var o=n[r];o.onError&&o.onError(e)}i.manager.itemError(t),i.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(m.responseType=this.responseType),void 0!==this.withCredentials&&(m.withCredentials=this.withCredentials),m.overrideMimeType&&m.overrideMimeType(void 0!==this.mimeType?this.mimeType:"text/plain"),this.requestHeader)m.setRequestHeader(v,this.requestHeader[v]);m.send(null)}return i.manager.itemStart(t),m}Ml[t].push({onLoad:e,onProgress:n,onError:r})},setResponseType:function(t){return this.responseType=t,this},setWithCredentials:function(t){return this.withCredentials=t,this},setMimeType:function(t){return this.mimeType=t,this},setRequestHeader:function(t){return this.requestHeader=t,this}}),El.prototype=Object.assign(Object.create(wl.prototype),{constructor:El,load:function(t,e,n,r){var i=this,a=new Sl(i.manager);a.setPath(i.path),a.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t){for(var e=[],n=0;n<t.length;n++){var r=gl.parse(t[n]);e.push(r)}return e}}),Tl.prototype=Object.assign(Object.create(wl.prototype),{constructor:Tl,load:function(t,e,n,r){var i=this,a=[],o=new Cc;o.image=a;var s=new Sl(this.manager);function c(c){s.load(t[c],(function(t){var n=i.parse(t,!0);a[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},6===(u+=1)&&(1===n.mipmapCount&&(o.minFilter=wt),o.format=n.format,o.needsUpdate=!0,e&&e(o))}),n,r)}if(s.setPath(this.path),s.setResponseType("arraybuffer"),Array.isArray(t))for(var u=0,l=0,h=t.length;l<h;++l)c(l);else s.load(t,(function(t){var n=i.parse(t,!0);if(n.isCubemap)for(var r=n.mipmaps.length/n.mipmapCount,s=0;s<r;s++){a[s]={mipmaps:[]};for(var c=0;c<n.mipmapCount;c++)a[s].mipmaps.push(n.mipmaps[s*n.mipmapCount+c]),a[s].format=n.format,a[s].width=n.width,a[s].height=n.height}else o.image.width=n.width,o.image.height=n.height,o.mipmaps=n.mipmaps;1===n.mipmapCount&&(o.minFilter=wt),o.format=n.format,o.needsUpdate=!0,e&&e(o)}),n,r);return o}}),Al.prototype=Object.assign(Object.create(wl.prototype),{constructor:Al,load:function(t,e,n,r){var i=this,a=new Sa,o=new Sl(this.manager);return o.setResponseType("arraybuffer"),o.setPath(this.path),o.load(t,(function(t){var n=i.parse(t);n&&(void 0!==n.image?a.image=n.image:void 0!==n.data&&(a.image.width=n.width,a.image.height=n.height,a.image.data=n.data),a.wrapS=void 0!==n.wrapS?n.wrapS:mt,a.wrapT=void 0!==n.wrapT?n.wrapT:mt,a.magFilter=void 0!==n.magFilter?n.magFilter:wt,a.minFilter=void 0!==n.minFilter?n.minFilter:wt,a.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.format&&(a.format=n.format),void 0!==n.type&&(a.type=n.type),void 0!==n.mipmaps&&(a.mipmaps=n.mipmaps,a.minFilter=Et),1===n.mipmapCount&&(a.minFilter=wt),a.needsUpdate=!0,e&&e(a,n))}),n,r),a}}),Ll.prototype=Object.assign(Object.create(wl.prototype),{constructor:Ll,load:function(t,e,n,r){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,a=xl.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;var o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function s(){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),xl.add(t,this),e&&e(this),i.manager.itemEnd(t)}function c(e){o.removeEventListener("load",s,!1),o.removeEventListener("error",c,!1),r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)}return o.addEventListener("load",s,!1),o.addEventListener("error",c,!1),"data:"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(o.crossOrigin=this.crossOrigin),i.manager.itemStart(t),o.src=t,o}}),Rl.prototype=Object.assign(Object.create(wl.prototype),{constructor:Rl,load:function(t,e,n,r){var i=new qa,a=new Ll(this.manager);a.setCrossOrigin(this.crossOrigin),a.setPath(this.path);var o=0;function s(n){a.load(t[n],(function(t){i.images[n]=t,6===++o&&(i.needsUpdate=!0,e&&e(i))}),void 0,r)}for(var c=0;c<t.length;++c)s(c);return i}}),Pl.prototype=Object.assign(Object.create(wl.prototype),{constructor:Pl,load:function(t,e,n,r){var i=new Vn,a=new Ll(this.manager);return a.setCrossOrigin(this.crossOrigin),a.setPath(this.path),a.load(t,(function(n){i.image=n;var r=t.search(/\.jpe?g($|\?)/i)>0||0===t.search(/^data\:image\/jpeg/);i.format=r?Gt:Ht,i.needsUpdate=!0,void 0!==e&&e(i)}),n,r),i}}),Object.assign(Cl.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(t,e){var n=this.getUtoTmapping(t);return this.getPoint(n,e)},getPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return e},getSpacedPoints:function(t){void 0===t&&(t=5);for(var e=[],n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e},getLength:function(){var t=this.getLengths();return t[t.length-1]},getLengths:function(t){if(void 0===t&&(t=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;var e,n,r=[],i=this.getPoint(0),a=0;for(r.push(0),n=1;n<=t;n++)a+=(e=this.getPoint(n/t)).distanceTo(i),r.push(a),i=e;return this.cacheArcLengths=r,r},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(t,e){var n,r=this.getLengths(),i=0,a=r.length;n=e||t*r[a-1];for(var o,s=0,c=a-1;s<=c;)if((o=r[i=Math.floor(s+(c-s)/2)]-n)<0)s=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(r[i=c]===n)return i/(a-1);var u=r[i];return(i+(n-u)/(r[i+1]-u))/(a-1)},getTangent:function(t){var e=t-1e-4,n=t+1e-4;e<0&&(e=0),n>1&&(n=1);var r=this.getPoint(e);return this.getPoint(n).clone().sub(r).normalize()},getTangentAt:function(t){var e=this.getUtoTmapping(t);return this.getTangent(e)},computeFrenetFrames:function(t,e){var n,r,i,a=new $n,o=[],s=[],c=[],u=new $n,l=new ar;for(n=0;n<=t;n++)r=n/t,o[n]=this.getTangentAt(r),o[n].normalize();s[0]=new $n,c[0]=new $n;var h=Number.MAX_VALUE,d=Math.abs(o[0].x),p=Math.abs(o[0].y),f=Math.abs(o[0].z);for(d<=h&&(h=d,a.set(1,0,0)),p<=h&&(h=p,a.set(0,1,0)),f<=h&&a.set(0,0,1),u.crossVectors(o[0],a).normalize(),s[0].crossVectors(o[0],u),c[0].crossVectors(o[0],s[0]),n=1;n<=t;n++)s[n]=s[n-1].clone(),c[n]=c[n-1].clone(),u.crossVectors(o[n-1],o[n]),u.length()>Number.EPSILON&&(u.normalize(),i=Math.acos(Un.clamp(o[n-1].dot(o[n]),-1,1)),s[n].applyMatrix4(l.makeRotationAxis(u,i))),c[n].crossVectors(o[n],s[n]);if(!0===e)for(i=Math.acos(Un.clamp(s[0].dot(s[t]),-1,1)),i/=t,o[0].dot(u.crossVectors(s[0],s[t]))>0&&(i=-i),n=1;n<=t;n++)s[n].applyMatrix4(l.makeRotationAxis(o[n],i*n)),c[n].crossVectors(o[n],s[n]);return{tangents:o,normals:s,binormals:c}},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this},toJSON:function(){var t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t},fromJSON:function(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}),Ol.prototype=Object.create(Cl.prototype),Ol.prototype.constructor=Ol,Ol.prototype.isEllipseCurve=!0,Ol.prototype.getPoint=function(t,e){for(var n=e||new Gn,r=2*Math.PI,i=this.aEndAngle-this.aStartAngle,a=Math.abs(i)<Number.EPSILON;i<0;)i+=r;for(;i>r;)i-=r;i<Number.EPSILON&&(i=a?0:r),!0!==this.aClockwise||a||(i===r?i=-r:i-=r);var o=this.aStartAngle+t*i,s=this.aX+this.xRadius*Math.cos(o),c=this.aY+this.yRadius*Math.sin(o);if(0!==this.aRotation){var u=Math.cos(this.aRotation),l=Math.sin(this.aRotation),h=s-this.aX,d=c-this.aY;s=h*u-d*l+this.aX,c=h*l+d*u+this.aY}return n.set(s,c)},Ol.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Ol.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t},Ol.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this},Dl.prototype=Object.create(Ol.prototype),Dl.prototype.constructor=Dl,Dl.prototype.isArcCurve=!0;var Nl=new $n,Bl=new Il,zl=new Il,Fl=new Il;function Ul(t,e,n,r){Cl.call(this),this.type="CatmullRomCurve3",this.points=t||[],this.closed=e||!1,this.curveType=n||"centripetal",this.tension=r||.5}function Gl(t,e,n,r,i){var a=.5*(r-e),o=.5*(i-n),s=t*t;return(2*n-2*r+a+o)*(t*s)+(-3*n+3*r-2*a-o)*s+a*t+n}function Hl(t,e,n,r){return function(t,e){var n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,r)}function kl(t,e,n,r,i){return function(t,e){var n=1-t;return n*n*n*e}(t,e)+function(t,e){var n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,r)+function(t,e){return t*t*t*e}(t,i)}function jl(t,e,n,r){Cl.call(this),this.type="CubicBezierCurve",this.v0=t||new Gn,this.v1=e||new Gn,this.v2=n||new Gn,this.v3=r||new Gn}function Vl(t,e,n,r){Cl.call(this),this.type="CubicBezierCurve3",this.v0=t||new $n,this.v1=e||new $n,this.v2=n||new $n,this.v3=r||new $n}function Wl(t,e){Cl.call(this),this.type="LineCurve",this.v1=t||new Gn,this.v2=e||new Gn}function ql(t,e){Cl.call(this),this.type="LineCurve3",this.v1=t||new $n,this.v2=e||new $n}function Xl(t,e,n){Cl.call(this),this.type="QuadraticBezierCurve",this.v0=t||new Gn,this.v1=e||new Gn,this.v2=n||new Gn}function Yl(t,e,n){Cl.call(this),this.type="QuadraticBezierCurve3",this.v0=t||new $n,this.v1=e||new $n,this.v2=n||new $n}function Zl(t){Cl.call(this),this.type="SplineCurve",this.points=t||[]}Ul.prototype=Object.create(Cl.prototype),Ul.prototype.constructor=Ul,Ul.prototype.isCatmullRomCurve3=!0,Ul.prototype.getPoint=function(t,e){var n,r,i,a,o=e||new $n,s=this.points,c=s.length,u=(c-(this.closed?0:1))*t,l=Math.floor(u),h=u-l;if(this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/c)+1)*c:0===h&&l===c-1&&(l=c-2,h=1),this.closed||l>0?n=s[(l-1)%c]:(Nl.subVectors(s[0],s[1]).add(s[0]),n=Nl),r=s[l%c],i=s[(l+1)%c],this.closed||l+2<c?a=s[(l+2)%c]:(Nl.subVectors(s[c-1],s[c-2]).add(s[c-1]),a=Nl),"centripetal"===this.curveType||"chordal"===this.curveType){var d="chordal"===this.curveType?.5:.25,p=Math.pow(n.distanceToSquared(r),d),f=Math.pow(r.distanceToSquared(i),d),m=Math.pow(i.distanceToSquared(a),d);f<1e-4&&(f=1),p<1e-4&&(p=f),m<1e-4&&(m=f),Bl.initNonuniformCatmullRom(n.x,r.x,i.x,a.x,p,f,m),zl.initNonuniformCatmullRom(n.y,r.y,i.y,a.y,p,f,m),Fl.initNonuniformCatmullRom(n.z,r.z,i.z,a.z,p,f,m)}else"catmullrom"===this.curveType&&(Bl.initCatmullRom(n.x,r.x,i.x,a.x,this.tension),zl.initCatmullRom(n.y,r.y,i.y,a.y,this.tension),Fl.initCatmullRom(n.z,r.z,i.z,a.z,this.tension));return o.set(Bl.calc(h),zl.calc(h),Fl.calc(h)),o},Ul.prototype.copy=function(t){Cl.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},Ul.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t},Ul.prototype.fromJSON=function(t){Cl.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new $n).fromArray(r))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this},jl.prototype=Object.create(Cl.prototype),jl.prototype.constructor=jl,jl.prototype.isCubicBezierCurve=!0,jl.prototype.getPoint=function(t,e){var n=e||new Gn,r=this.v0,i=this.v1,a=this.v2,o=this.v3;return n.set(kl(t,r.x,i.x,a.x,o.x),kl(t,r.y,i.y,a.y,o.y)),n},jl.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},jl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},jl.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Vl.prototype=Object.create(Cl.prototype),Vl.prototype.constructor=Vl,Vl.prototype.isCubicBezierCurve3=!0,Vl.prototype.getPoint=function(t,e){var n=e||new $n,r=this.v0,i=this.v1,a=this.v2,o=this.v3;return n.set(kl(t,r.x,i.x,a.x,o.x),kl(t,r.y,i.y,a.y,o.y),kl(t,r.z,i.z,a.z,o.z)),n},Vl.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this},Vl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t},Vl.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this},Wl.prototype=Object.create(Cl.prototype),Wl.prototype.constructor=Wl,Wl.prototype.isLineCurve=!0,Wl.prototype.getPoint=function(t,e){var n=e||new Gn;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},Wl.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},Wl.prototype.getTangent=function(){return this.v2.clone().sub(this.v1).normalize()},Wl.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Wl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Wl.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},ql.prototype=Object.create(Cl.prototype),ql.prototype.constructor=ql,ql.prototype.isLineCurve3=!0,ql.prototype.getPoint=function(t,e){var n=e||new $n;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n},ql.prototype.getPointAt=function(t,e){return this.getPoint(t,e)},ql.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v1.copy(t.v1),this.v2.copy(t.v2),this},ql.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},ql.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Xl.prototype=Object.create(Cl.prototype),Xl.prototype.constructor=Xl,Xl.prototype.isQuadraticBezierCurve=!0,Xl.prototype.getPoint=function(t,e){var n=e||new Gn,r=this.v0,i=this.v1,a=this.v2;return n.set(Hl(t,r.x,i.x,a.x),Hl(t,r.y,i.y,a.y)),n},Xl.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Xl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Xl.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Yl.prototype=Object.create(Cl.prototype),Yl.prototype.constructor=Yl,Yl.prototype.isQuadraticBezierCurve3=!0,Yl.prototype.getPoint=function(t,e){var n=e||new $n,r=this.v0,i=this.v1,a=this.v2;return n.set(Hl(t,r.x,i.x,a.x),Hl(t,r.y,i.y,a.y),Hl(t,r.z,i.z,a.z)),n},Yl.prototype.copy=function(t){return Cl.prototype.copy.call(this,t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this},Yl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t},Yl.prototype.fromJSON=function(t){return Cl.prototype.fromJSON.call(this,t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this},Zl.prototype=Object.create(Cl.prototype),Zl.prototype.constructor=Zl,Zl.prototype.isSplineCurve=!0,Zl.prototype.getPoint=function(t,e){var n=e||new Gn,r=this.points,i=(r.length-1)*t,a=Math.floor(i),o=i-a,s=r[0===a?a:a-1],c=r[a],u=r[a>r.length-2?r.length-1:a+1],l=r[a>r.length-3?r.length-1:a+2];return n.set(Gl(o,s.x,c.x,u.x,l.x),Gl(o,s.y,c.y,u.y,l.y)),n},Zl.prototype.copy=function(t){Cl.prototype.copy.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push(r.clone())}return this},Zl.prototype.toJSON=function(){var t=Cl.prototype.toJSON.call(this);t.points=[];for(var e=0,n=this.points.length;e<n;e++){var r=this.points[e];t.points.push(r.toArray())}return t},Zl.prototype.fromJSON=function(t){Cl.prototype.fromJSON.call(this,t),this.points=[];for(var e=0,n=t.points.length;e<n;e++){var r=t.points[e];this.points.push((new Gn).fromArray(r))}return this};var Jl=Object.freeze({__proto__:null,ArcCurve:Dl,CatmullRomCurve3:Ul,CubicBezierCurve:jl,CubicBezierCurve3:Vl,EllipseCurve:Ol,LineCurve:Wl,LineCurve3:ql,QuadraticBezierCurve:Xl,QuadraticBezierCurve3:Yl,SplineCurve:Zl});function $l(){Cl.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}function Ql(t){$l.call(this),this.type="Path",this.currentPoint=new Gn,t&&this.setFromPoints(t)}function Kl(t){Ql.call(this,t),this.uuid=Un.generateUUID(),this.type="Shape",this.holes=[]}function th(t,e){Mr.call(this),this.type="Light",this.color=new fi(t),this.intensity=void 0!==e?e:1,this.receiveShadow=void 0}function eh(t,e,n){th.call(this,t,n),this.type="HemisphereLight",this.castShadow=void 0,this.position.copy(Mr.DefaultUp),this.updateMatrix(),this.groundColor=new fi(e)}function nh(t){this.camera=t,this.bias=0,this.radius=1,this.mapSize=new Gn(512,512),this.map=null,this.mapPass=null,this.matrix=new ar,this._frustum=new Aa,this._frameExtents=new Gn(1,1),this._viewportCount=1,this._viewports=[new Wn(0,0,1,1)]}function rh(){nh.call(this,new _a(50,1,.5,500))}function ih(t,e,n,r,i,a){th.call(this,t,e),this.type="SpotLight",this.position.copy(Mr.DefaultUp),this.updateMatrix(),this.target=new Mr,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(t){this.intensity=t/Math.PI}}),this.distance=void 0!==n?n:0,this.angle=void 0!==r?r:Math.PI/3,this.penumbra=void 0!==i?i:0,this.decay=void 0!==a?a:1,this.shadow=new rh}function ah(){nh.call(this,new _a(90,1,.5,500)),this._frameExtents=new Gn(4,2),this._viewportCount=6,this._viewports=[new Wn(2,1,1,1),new Wn(0,1,1,1),new Wn(3,1,1,1),new Wn(1,1,1,1),new Wn(3,0,1,1),new Wn(1,0,1,1)],this._cubeDirections=[new $n(1,0,0),new $n(-1,0,0),new $n(0,0,1),new $n(0,0,-1),new $n(0,1,0),new $n(0,-1,0)],this._cubeUps=[new $n(0,1,0),new $n(0,1,0),new $n(0,1,0),new $n(0,1,0),new $n(0,0,1),new $n(0,0,-1)]}function oh(t,e,n,r){th.call(this,t,e),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return 4*this.intensity*Math.PI},set:function(t){this.intensity=t/(4*Math.PI)}}),this.distance=void 0!==n?n:0,this.decay=void 0!==r?r:1,this.shadow=new ah}function sh(t,e,n,r,i,a){ba.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=void 0!==t?t:-1,this.right=void 0!==e?e:1,this.top=void 0!==n?n:1,this.bottom=void 0!==r?r:-1,this.near=void 0!==i?i:.1,this.far=void 0!==a?a:2e3,this.updateProjectionMatrix()}function ch(){nh.call(this,new sh(-5,5,5,-5,.5,500))}function uh(t,e){th.call(this,t,e),this.type="DirectionalLight",this.position.copy(Mr.DefaultUp),this.updateMatrix(),this.target=new Mr,this.shadow=new ch}function lh(t,e){th.call(this,t,e),this.type="AmbientLight",this.castShadow=void 0}function hh(t,e,n,r){th.call(this,t,e),this.type="RectAreaLight",this.width=void 0!==n?n:10,this.height=void 0!==r?r:10}function dh(t){wl.call(this,t),this.textures={}}$l.prototype=Object.assign(Object.create(Cl.prototype),{constructor:$l,add:function(t){this.curves.push(t)},closePath:function(){var t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new Wl(e,t))},getPoint:function(t){for(var e=t*this.getLength(),n=this.getCurveLengths(),r=0;r<n.length;){if(n[r]>=e){var i=n[r]-e,a=this.curves[r],o=a.getLength(),s=0===o?0:1-i/o;return a.getPointAt(s)}r++}return null},getLength:function(){var t=this.getCurveLengths();return t[t.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;for(var t=[],e=0,n=0,r=this.curves.length;n<r;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t},getSpacedPoints:function(t){void 0===t&&(t=40);for(var e=[],n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e},getPoints:function(t){t=t||12;for(var e,n=[],r=0,i=this.curves;r<i.length;r++)for(var a=i[r],o=a&&a.isEllipseCurve?2*t:a&&(a.isLineCurve||a.isLineCurve3)?1:a&&a.isSplineCurve?t*a.points.length:t,s=a.getPoints(o),c=0;c<s.length;c++){var u=s[c];e&&e.equals(u)||(n.push(u),e=u)}return this.autoClose&&n.length>1&&!n[n.length-1].equals(n[0])&&n.push(n[0]),n},copy:function(t){Cl.prototype.copy.call(this,t),this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push(r.clone())}return this.autoClose=t.autoClose,this},toJSON:function(){var t=Cl.prototype.toJSON.call(this);t.autoClose=this.autoClose,t.curves=[];for(var e=0,n=this.curves.length;e<n;e++){var r=this.curves[e];t.curves.push(r.toJSON())}return t},fromJSON:function(t){Cl.prototype.fromJSON.call(this,t),this.autoClose=t.autoClose,this.curves=[];for(var e=0,n=t.curves.length;e<n;e++){var r=t.curves[e];this.curves.push((new Jl[r.type]).fromJSON(r))}return this}}),Ql.prototype=Object.assign(Object.create($l.prototype),{constructor:Ql,setFromPoints:function(t){this.moveTo(t[0].x,t[0].y);for(var e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this},moveTo:function(t,e){return this.currentPoint.set(t,e),this},lineTo:function(t,e){var n=new Wl(this.currentPoint.clone(),new Gn(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this},quadraticCurveTo:function(t,e,n,r){var i=new Xl(this.currentPoint.clone(),new Gn(t,e),new Gn(n,r));return this.curves.push(i),this.currentPoint.set(n,r),this},bezierCurveTo:function(t,e,n,r,i,a){var o=new jl(this.currentPoint.clone(),new Gn(t,e),new Gn(n,r),new Gn(i,a));return this.curves.push(o),this.currentPoint.set(i,a),this},splineThru:function(t){var e=new Zl([this.currentPoint.clone()].concat(t));return this.curves.push(e),this.currentPoint.copy(t[t.length-1]),this},arc:function(t,e,n,r,i,a){var o=this.currentPoint.x,s=this.currentPoint.y;return this.absarc(t+o,e+s,n,r,i,a),this},absarc:function(t,e,n,r,i,a){return this.absellipse(t,e,n,n,r,i,a),this},ellipse:function(t,e,n,r,i,a,o,s){var c=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(t+c,e+u,n,r,i,a,o,s),this},absellipse:function(t,e,n,r,i,a,o,s){var c=new Ol(t,e,n,r,i,a,o,s);if(this.curves.length>0){var u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);var l=c.getPoint(1);return this.currentPoint.copy(l),this},copy:function(t){return $l.prototype.copy.call(this,t),this.currentPoint.copy(t.currentPoint),this},toJSON:function(){var t=$l.prototype.toJSON.call(this);return t.currentPoint=this.currentPoint.toArray(),t},fromJSON:function(t){return $l.prototype.fromJSON.call(this,t),this.currentPoint.fromArray(t.currentPoint),this}}),Kl.prototype=Object.assign(Object.create(Ql.prototype),{constructor:Kl,getPointsHoles:function(t){for(var e=[],n=0,r=this.holes.length;n<r;n++)e[n]=this.holes[n].getPoints(t);return e},extractPoints:function(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}},copy:function(t){Ql.prototype.copy.call(this,t),this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push(r.clone())}return this},toJSON:function(){var t=Ql.prototype.toJSON.call(this);t.uuid=this.uuid,t.holes=[];for(var e=0,n=this.holes.length;e<n;e++){var r=this.holes[e];t.holes.push(r.toJSON())}return t},fromJSON:function(t){Ql.prototype.fromJSON.call(this,t),this.uuid=t.uuid,this.holes=[];for(var e=0,n=t.holes.length;e<n;e++){var r=t.holes[e];this.holes.push((new Ql).fromJSON(r))}return this}}),th.prototype=Object.assign(Object.create(Mr.prototype),{constructor:th,isLight:!0,copy:function(t){return Mr.prototype.copy.call(this,t),this.color.copy(t.color),this.intensity=t.intensity,this},toJSON:function(t){var e=Mr.prototype.toJSON.call(this,t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}),eh.prototype=Object.assign(Object.create(th.prototype),{constructor:eh,isHemisphereLight:!0,copy:function(t){return th.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}),Object.assign(nh.prototype,{_projScreenMatrix:new ar,_lightPositionWorld:new $n,_lookTarget:new $n,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(t){var e=this.camera,n=this.matrix,r=this._projScreenMatrix,i=this._lookTarget,a=this._lightPositionWorld;a.setFromMatrixPosition(t.matrixWorld),e.position.copy(a),i.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(i),e.updateMatrixWorld(),r.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(r),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)},getViewport:function(t){return this._viewports[t]},getFrameExtents:function(){return this._frameExtents},copy:function(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t={};return 0!==this.bias&&(t.bias=this.bias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}),rh.prototype=Object.assign(Object.create(nh.prototype),{constructor:rh,isSpotLightShadow:!0,updateMatrices:function(t){var e=this.camera,n=2*Un.RAD2DEG*t.angle,r=this.mapSize.width/this.mapSize.height,i=t.distance||e.far;n===e.fov&&r===e.aspect&&i===e.far||(e.fov=n,e.aspect=r,e.far=i,e.updateProjectionMatrix()),nh.prototype.updateMatrices.call(this,t)}}),ih.prototype=Object.assign(Object.create(th.prototype),{constructor:ih,isSpotLight:!0,copy:function(t){return th.prototype.copy.call(this,t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),ah.prototype=Object.assign(Object.create(nh.prototype),{constructor:ah,isPointLightShadow:!0,updateMatrices:function(t,e){void 0===e&&(e=0);var n=this.camera,r=this.matrix,i=this._lightPositionWorld,a=this._lookTarget,o=this._projScreenMatrix;i.setFromMatrixPosition(t.matrixWorld),n.position.copy(i),a.copy(n.position),a.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(a),n.updateMatrixWorld(),r.makeTranslation(-i.x,-i.y,-i.z),o.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(o)}}),oh.prototype=Object.assign(Object.create(th.prototype),{constructor:oh,isPointLight:!0,copy:function(t){return th.prototype.copy.call(this,t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}),sh.prototype=Object.assign(Object.create(ba.prototype),{constructor:sh,isOrthographicCamera:!0,copy:function(t,e){return ba.prototype.copy.call(this,t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this},setViewOffset:function(t,e,n,r,i,a){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=i,this.view.height=a,this.updateProjectionMatrix()},clearViewOffset:function(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){var t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2,i=n-t,a=n+t,o=r+e,s=r-e;if(null!==this.view&&this.view.enabled){var c=(this.right-this.left)/this.view.fullWidth/this.zoom,u=(this.top-this.bottom)/this.view.fullHeight/this.zoom;a=(i+=c*this.view.offsetX)+c*this.view.width,s=(o-=u*this.view.offsetY)-u*this.view.height}this.projectionMatrix.makeOrthographic(i,a,o,s,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(t){var e=Mr.prototype.toJSON.call(this,t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}),ch.prototype=Object.assign(Object.create(nh.prototype),{constructor:ch,isDirectionalLightShadow:!0,updateMatrices:function(t){nh.prototype.updateMatrices.call(this,t)}}),uh.prototype=Object.assign(Object.create(th.prototype),{constructor:uh,isDirectionalLight:!0,copy:function(t){return th.prototype.copy.call(this,t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}),lh.prototype=Object.assign(Object.create(th.prototype),{constructor:lh,isAmbientLight:!0}),hh.prototype=Object.assign(Object.create(th.prototype),{constructor:hh,isRectAreaLight:!0,copy:function(t){return th.prototype.copy.call(this,t),this.width=t.width,this.height=t.height,this},toJSON:function(t){var e=th.prototype.toJSON.call(this,t);return e.object.width=this.width,e.object.height=this.height,e}}),dh.prototype=Object.assign(Object.create(wl.prototype),{constructor:dh,load:function(t,e,n,r){var i=this,a=new Sl(i.manager);a.setPath(i.path),a.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t){var e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}var r=new rl[t.type];if(void 0!==t.uuid&&(r.uuid=t.uuid),void 0!==t.name&&(r.name=t.name),void 0!==t.color&&r.color.setHex(t.color),void 0!==t.roughness&&(r.roughness=t.roughness),void 0!==t.metalness&&(r.metalness=t.metalness),void 0!==t.sheen&&(r.sheen=(new fi).setHex(t.sheen)),void 0!==t.emissive&&r.emissive.setHex(t.emissive),void 0!==t.specular&&r.specular.setHex(t.specular),void 0!==t.shininess&&(r.shininess=t.shininess),void 0!==t.clearcoat&&(r.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(r.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.fog&&(r.fog=t.fog),void 0!==t.flatShading&&(r.flatShading=t.flatShading),void 0!==t.blending&&(r.blending=t.blending),void 0!==t.combine&&(r.combine=t.combine),void 0!==t.side&&(r.side=t.side),void 0!==t.opacity&&(r.opacity=t.opacity),void 0!==t.transparent&&(r.transparent=t.transparent),void 0!==t.alphaTest&&(r.alphaTest=t.alphaTest),void 0!==t.depthTest&&(r.depthTest=t.depthTest),void 0!==t.depthWrite&&(r.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(r.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(r.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(r.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(r.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(r.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(r.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(r.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(r.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(r.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(r.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(r.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(r.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(r.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(r.rotation=t.rotation),1!==t.linewidth&&(r.linewidth=t.linewidth),void 0!==t.dashSize&&(r.dashSize=t.dashSize),void 0!==t.gapSize&&(r.gapSize=t.gapSize),void 0!==t.scale&&(r.scale=t.scale),void 0!==t.polygonOffset&&(r.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(r.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(r.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.skinning&&(r.skinning=t.skinning),void 0!==t.morphTargets&&(r.morphTargets=t.morphTargets),void 0!==t.morphNormals&&(r.morphNormals=t.morphNormals),void 0!==t.dithering&&(r.dithering=t.dithering),void 0!==t.vertexTangents&&(r.vertexTangents=t.vertexTangents),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.toneMapped&&(r.toneMapped=t.toneMapped),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?r.vertexColors=t.vertexColors>0:r.vertexColors=t.vertexColors),void 0!==t.uniforms)for(var i in t.uniforms){var a=t.uniforms[i];switch(r.uniforms[i]={},a.type){case"t":r.uniforms[i].value=n(a.value);break;case"c":r.uniforms[i].value=(new fi).setHex(a.value);break;case"v2":r.uniforms[i].value=(new Gn).fromArray(a.value);break;case"v3":r.uniforms[i].value=(new $n).fromArray(a.value);break;case"v4":r.uniforms[i].value=(new Wn).fromArray(a.value);break;case"m3":r.uniforms[i].value=(new Hn).fromArray(a.value);case"m4":r.uniforms[i].value=(new ar).fromArray(a.value);break;default:r.uniforms[i].value=a.value}}if(void 0!==t.defines&&(r.defines=t.defines),void 0!==t.vertexShader&&(r.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(r.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(var o in t.extensions)r.extensions[o]=t.extensions[o];if(void 0!==t.shading&&(r.flatShading=1===t.shading),void 0!==t.size&&(r.size=t.size),void 0!==t.sizeAttenuation&&(r.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(r.map=n(t.map)),void 0!==t.matcap&&(r.matcap=n(t.matcap)),void 0!==t.alphaMap&&(r.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(r.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(r.bumpScale=t.bumpScale),void 0!==t.normalMap&&(r.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(r.normalMapType=t.normalMapType),void 0!==t.normalScale){var s=t.normalScale;!1===Array.isArray(s)&&(s=[s,s]),r.normalScale=(new Gn).fromArray(s)}return void 0!==t.displacementMap&&(r.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(r.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(r.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(r.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(r.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(r.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(r.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(r.specularMap=n(t.specularMap)),void 0!==t.envMap&&(r.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(r.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(r.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(r.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(r.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(r.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(r.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(r.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(r.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(r.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(r.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(r.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(r.clearcoatNormalScale=(new Gn).fromArray(t.clearcoatNormalScale)),r},setTextures:function(t){return this.textures=t,this}});var ph={decodeText:function(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);for(var e="",n=0,r=t.length;n<r;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}},extractUrlBase:function(t){var e=t.lastIndexOf("/");return-1===e?"./":t.substr(0,e+1)}};function fh(){ki.call(this),this.type="InstancedBufferGeometry",this.maxInstancedCount=void 0}function mh(t,e,n,r){"number"==typeof n&&(r=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),Mi.call(this,t,e,n),this.meshPerAttribute=r||1}function vh(t){wl.call(this,t)}fh.prototype=Object.assign(Object.create(ki.prototype),{constructor:fh,isInstancedBufferGeometry:!0,copy:function(t){return ki.prototype.copy.call(this,t),this.maxInstancedCount=t.maxInstancedCount,this},clone:function(){return(new this.constructor).copy(this)},toJSON:function(){var t=ki.prototype.toJSON.call(this);return t.maxInstancedCount=this.maxInstancedCount,t.isInstancedBufferGeometry=!0,t}}),mh.prototype=Object.assign(Object.create(Mi.prototype),{constructor:mh,isInstancedBufferAttribute:!0,copy:function(t){return Mi.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this},toJSON:function(){var t=Mi.prototype.toJSON.call(this);return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}),vh.prototype=Object.assign(Object.create(wl.prototype),{constructor:vh,load:function(t,e,n,r){var i=this,a=new Sl(i.manager);a.setPath(i.path),a.load(t,(function(t){e(i.parse(JSON.parse(t)))}),n,r)},parse:function(t){var e=t.isInstancedBufferGeometry?new fh:new ki,n=t.data.index;if(void 0!==n){var r=new gh[n.type](n.array);e.setIndex(new Mi(r,1))}var i=t.data.attributes;for(var a in i){var o=i[a],s=(r=new gh[o.type](o.array),new(o.isInstancedBufferAttribute?mh:Mi)(r,o.itemSize,o.normalized));void 0!==o.name&&(s.name=o.name),e.setAttribute(a,s)}var c=t.data.morphAttributes;if(c)for(var a in c){for(var u=c[a],l=[],h=0,d=u.length;h<d;h++){o=u[h],s=new Mi(r=new gh[o.type](o.array),o.itemSize,o.normalized);void 0!==o.name&&(s.name=o.name),l.push(s)}e.morphAttributes[a]=l}t.data.morphTargetsRelative&&(e.morphTargetsRelative=!0);var p=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==p){h=0;for(var f=p.length;h!==f;++h){var m=p[h];e.addGroup(m.start,m.count,m.materialIndex)}}var v=t.data.boundingSphere;if(void 0!==v){var g=new $n;void 0!==v.center&&g.fromArray(v.center),e.boundingSphere=new Hr(g,v.radius)}return t.name&&(e.name=t.name),t.userData&&(e.userData=t.userData),e}});var gh={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:"undefined"!=typeof Uint8ClampedArray?Uint8ClampedArray:Uint8Array,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function yh(t){wl.call(this,t)}yh.prototype=Object.assign(Object.create(wl.prototype),{constructor:yh,load:function(t,e,n,r){var i=this,a=""===this.path?ph.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||a;var o=new Sl(i.manager);o.setPath(this.path),o.load(t,(function(n){var a=null;try{a=JSON.parse(n)}catch(e){return void 0!==r&&r(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}var o=a.metadata;void 0!==o&&void 0!==o.type&&"geometry"!==o.type.toLowerCase()?i.parse(a,e):console.error("THREE.ObjectLoader: Can't load "+t)}),n,r)},parse:function(t,e){var n=this.parseShape(t.shapes),r=this.parseGeometries(t.geometries,n),i=this.parseImages(t.images,(function(){void 0!==e&&e(s)})),a=this.parseTextures(t.textures,i),o=this.parseMaterials(t.materials,a),s=this.parseObject(t.object,r,o);return t.animations&&(s.animations=this.parseAnimations(t.animations)),void 0!==t.images&&0!==t.images.length||void 0!==e&&e(s),s},parseShape:function(t){var e={};if(void 0!==t)for(var n=0,r=t.length;n<r;n++){var i=(new Kl).fromJSON(t[n]);e[i.uuid]=i}return e},parseGeometries:function(t,e){var n={};if(void 0!==t)for(var r=new vh,i=0,a=t.length;i<a;i++){var o,s=t[i];switch(s.type){case"PlaneGeometry":case"PlaneBufferGeometry":o=new qu[s.type](s.width,s.height,s.widthSegments,s.heightSegments);break;case"BoxGeometry":case"BoxBufferGeometry":case"CubeGeometry":o=new qu[s.type](s.width,s.height,s.depth,s.widthSegments,s.heightSegments,s.depthSegments);break;case"CircleGeometry":case"CircleBufferGeometry":o=new qu[s.type](s.radius,s.segments,s.thetaStart,s.thetaLength);break;case"CylinderGeometry":case"CylinderBufferGeometry":o=new qu[s.type](s.radiusTop,s.radiusBottom,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"ConeGeometry":case"ConeBufferGeometry":o=new qu[s.type](s.radius,s.height,s.radialSegments,s.heightSegments,s.openEnded,s.thetaStart,s.thetaLength);break;case"SphereGeometry":case"SphereBufferGeometry":o=new qu[s.type](s.radius,s.widthSegments,s.heightSegments,s.phiStart,s.phiLength,s.thetaStart,s.thetaLength);break;case"DodecahedronGeometry":case"DodecahedronBufferGeometry":case"IcosahedronGeometry":case"IcosahedronBufferGeometry":case"OctahedronGeometry":case"OctahedronBufferGeometry":case"TetrahedronGeometry":case"TetrahedronBufferGeometry":o=new qu[s.type](s.radius,s.detail);break;case"RingGeometry":case"RingBufferGeometry":o=new qu[s.type](s.innerRadius,s.outerRadius,s.thetaSegments,s.phiSegments,s.thetaStart,s.thetaLength);break;case"TorusGeometry":case"TorusBufferGeometry":o=new qu[s.type](s.radius,s.tube,s.radialSegments,s.tubularSegments,s.arc);break;case"TorusKnotGeometry":case"TorusKnotBufferGeometry":o=new qu[s.type](s.radius,s.tube,s.tubularSegments,s.radialSegments,s.p,s.q);break;case"TubeGeometry":case"TubeBufferGeometry":o=new qu[s.type]((new Jl[s.path.type]).fromJSON(s.path),s.tubularSegments,s.radius,s.radialSegments,s.closed);break;case"LatheGeometry":case"LatheBufferGeometry":o=new qu[s.type](s.points,s.segments,s.phiStart,s.phiLength);break;case"PolyhedronGeometry":case"PolyhedronBufferGeometry":o=new qu[s.type](s.vertices,s.indices,s.radius,s.details);break;case"ShapeGeometry":case"ShapeBufferGeometry":for(var c=[],u=0,l=s.shapes.length;u<l;u++){var h=e[s.shapes[u]];c.push(h)}o=new qu[s.type](c,s.curveSegments);break;case"ExtrudeGeometry":case"ExtrudeBufferGeometry":for(c=[],u=0,l=s.shapes.length;u<l;u++){h=e[s.shapes[u]];c.push(h)}var d=s.options.extrudePath;void 0!==d&&(s.options.extrudePath=(new Jl[d.type]).fromJSON(d)),o=new qu[s.type](c,s.options);break;case"BufferGeometry":case"InstancedBufferGeometry":o=r.parse(s);break;case"Geometry":console.error('THREE.ObjectLoader: Loading "Geometry" is not supported anymore.');break;default:console.warn('THREE.ObjectLoader: Unsupported geometry type "'+s.type+'"');continue}o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),!0===o.isBufferGeometry&&void 0!==s.userData&&(o.userData=s.userData),n[s.uuid]=o}return n},parseMaterials:function(t,e){var n={},r={};if(void 0!==t){var i=new dh;i.setTextures(e);for(var a=0,o=t.length;a<o;a++){var s=t[a];if("MultiMaterial"===s.type){for(var c=[],u=0;u<s.materials.length;u++){var l=s.materials[u];void 0===n[l.uuid]&&(n[l.uuid]=i.parse(l)),c.push(n[l.uuid])}r[s.uuid]=c}else void 0===n[s.uuid]&&(n[s.uuid]=i.parse(s)),r[s.uuid]=n[s.uuid]}}return r},parseAnimations:function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n],i=gl.parse(r);void 0!==r.uuid&&(i.uuid=r.uuid),e.push(i)}return e},parseImages:function(t,e){var n=this,r={};function i(t){return n.manager.itemStart(t),a.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}if(void 0!==t&&t.length>0){var a=new Ll(new bl(e));a.setCrossOrigin(this.crossOrigin);for(var o=0,s=t.length;o<s;o++){var c=t[o],u=c.url;if(Array.isArray(u)){r[c.uuid]=[];for(var l=0,h=u.length;l<h;l++){var d=u[l],p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(d)?d:n.resourcePath+d;r[c.uuid].push(i(p))}}else{p=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)?c.url:n.resourcePath+c.url;r[c.uuid]=i(p)}}}return r},parseTextures:function(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}var r={};if(void 0!==t)for(var i=0,a=t.length;i<a;i++){var o,s=t[i];void 0===s.image&&console.warn('THREE.ObjectLoader: No "image" specified for',s.uuid),void 0===e[s.image]&&console.warn("THREE.ObjectLoader: Undefined image",s.image),(o=Array.isArray(e[s.image])?new qa(e[s.image]):new Vn(e[s.image])).needsUpdate=!0,o.uuid=s.uuid,void 0!==s.name&&(o.name=s.name),void 0!==s.mapping&&(o.mapping=n(s.mapping,bh)),void 0!==s.offset&&o.offset.fromArray(s.offset),void 0!==s.repeat&&o.repeat.fromArray(s.repeat),void 0!==s.center&&o.center.fromArray(s.center),void 0!==s.rotation&&(o.rotation=s.rotation),void 0!==s.wrap&&(o.wrapS=n(s.wrap[0],_h),o.wrapT=n(s.wrap[1],_h)),void 0!==s.format&&(o.format=s.format),void 0!==s.type&&(o.type=s.type),void 0!==s.encoding&&(o.encoding=s.encoding),void 0!==s.minFilter&&(o.minFilter=n(s.minFilter,wh)),void 0!==s.magFilter&&(o.magFilter=n(s.magFilter,wh)),void 0!==s.anisotropy&&(o.anisotropy=s.anisotropy),void 0!==s.flipY&&(o.flipY=s.flipY),void 0!==s.premultiplyAlpha&&(o.premultiplyAlpha=s.premultiplyAlpha),void 0!==s.unpackAlignment&&(o.unpackAlignment=s.unpackAlignment),r[s.uuid]=o}return r},parseObject:function(t,e,n){var r;function i(t){return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined geometry",t),e[t]}function a(t){if(void 0!==t){if(Array.isArray(t)){for(var e=[],r=0,i=t.length;r<i;r++){var a=t[r];void 0===n[a]&&console.warn("THREE.ObjectLoader: Undefined material",a),e.push(n[a])}return e}return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),n[t]}}switch(t.type){case"Scene":r=new Sr,void 0!==t.background&&Number.isInteger(t.background)&&(r.background=new fi(t.background)),void 0!==t.fog&&("Fog"===t.fog.type?r.fog=new Ds(t.fog.color,t.fog.near,t.fog.far):"FogExp2"===t.fog.type&&(r.fog=new Os(t.fog.color,t.fog.density)));break;case"PerspectiveCamera":r=new _a(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(r.focus=t.focus),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.filmGauge&&(r.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(r.filmOffset=t.filmOffset),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"OrthographicCamera":r=new sh(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(r.zoom=t.zoom),void 0!==t.view&&(r.view=Object.assign({},t.view));break;case"AmbientLight":r=new lh(t.color,t.intensity);break;case"DirectionalLight":r=new uh(t.color,t.intensity);break;case"PointLight":r=new oh(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":r=new hh(t.color,t.intensity,t.width,t.height);break;case"SpotLight":r=new ih(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":r=new eh(t.color,t.groundColor,t.intensity);break;case"SkinnedMesh":console.warn("THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.");case"Mesh":r=new oa(o=i(t.geometry),s=a(t.material));break;case"InstancedMesh":var o=i(t.geometry),s=a(t.material),c=t.count,u=t.instanceMatrix;(r=new hc(o,s,c)).instanceMatrix=new Mi(new Float32Array(u.array),16);break;case"LOD":r=new ec;break;case"Line":r=new yc(i(t.geometry),a(t.material),t.mode);break;case"LineLoop":r=new wc(i(t.geometry),a(t.material));break;case"LineSegments":r=new _c(i(t.geometry),a(t.material));break;case"PointCloud":case"Points":r=new Lc(i(t.geometry),a(t.material));break;case"Sprite":r=new $s(a(t.material));break;case"Group":r=new Rs;break;default:r=new Mr}if(r.uuid=t.uuid,void 0!==t.name&&(r.name=t.name),void 0!==t.matrix?(r.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(r.matrixAutoUpdate=t.matrixAutoUpdate),r.matrixAutoUpdate&&r.matrix.decompose(r.position,r.quaternion,r.scale)):(void 0!==t.position&&r.position.fromArray(t.position),void 0!==t.rotation&&r.rotation.fromArray(t.rotation),void 0!==t.quaternion&&r.quaternion.fromArray(t.quaternion),void 0!==t.scale&&r.scale.fromArray(t.scale)),void 0!==t.castShadow&&(r.castShadow=t.castShadow),void 0!==t.receiveShadow&&(r.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(r.shadow.bias=t.shadow.bias),void 0!==t.shadow.radius&&(r.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&r.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(r.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.frustumCulled&&(r.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(r.renderOrder=t.renderOrder),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.layers&&(r.layers.mask=t.layers),void 0!==t.children)for(var l=t.children,h=0;h<l.length;h++)r.add(this.parseObject(l[h],e,n));if("LOD"===t.type){void 0!==t.autoUpdate&&(r.autoUpdate=t.autoUpdate);for(var d=t.levels,p=0;p<d.length;p++){var f=d[p],m=r.getObjectByProperty("uuid",f.object);void 0!==m&&r.addLevel(m,f.distance)}}return r}});var xh,bh={UVMapping:ot,CubeReflectionMapping:st,CubeRefractionMapping:ct,EquirectangularReflectionMapping:ut,EquirectangularRefractionMapping:lt,SphericalReflectionMapping:ht,CubeUVReflectionMapping:dt,CubeUVRefractionMapping:pt},_h={RepeatWrapping:ft,ClampToEdgeWrapping:mt,MirroredRepeatWrapping:vt},wh={NearestFilter:gt,NearestMipmapNearestFilter:yt,NearestMipmapLinearFilter:bt,LinearFilter:wt,LinearMipmapNearestFilter:Mt,LinearMipmapLinearFilter:Et};function Mh(t){"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),wl.call(this,t),this.options=void 0}function Sh(){this.type="ShapePath",this.color=new fi,this.subPaths=[],this.currentPath=null}function Eh(t){this.type="Font",this.data=t}function Th(t,e,n,r,i){var a=i.glyphs[t]||i.glyphs["?"];if(a){var o,s,c,u,l,h,d,p,f=new Sh;if(a.o)for(var m=a._cachedOutline||(a._cachedOutline=a.o.split(" ")),v=0,g=m.length;v<g;){switch(m[v++]){case"m":o=m[v++]*e+n,s=m[v++]*e+r,f.moveTo(o,s);break;case"l":o=m[v++]*e+n,s=m[v++]*e+r,f.lineTo(o,s);break;case"q":c=m[v++]*e+n,u=m[v++]*e+r,l=m[v++]*e+n,h=m[v++]*e+r,f.quadraticCurveTo(l,h,c,u);break;case"b":c=m[v++]*e+n,u=m[v++]*e+r,l=m[v++]*e+n,h=m[v++]*e+r,d=m[v++]*e+n,p=m[v++]*e+r,f.bezierCurveTo(l,h,d,p,c,u)}}return{offsetX:a.ha*e,path:f}}console.error('THREE.Font: character "'+t+'" does not exists in font family '+i.familyName+".")}function Ah(t){wl.call(this,t)}Mh.prototype=Object.assign(Object.create(wl.prototype),{constructor:Mh,setOptions:function(t){return this.options=t,this},load:function(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);var i=this,a=xl.get(t);if(void 0!==a)return i.manager.itemStart(t),setTimeout((function(){e&&e(a),i.manager.itemEnd(t)}),0),a;fetch(t).then((function(t){return t.blob()})).then((function(t){return void 0===i.options?createImageBitmap(t):createImageBitmap(t,i.options)})).then((function(n){xl.add(t,n),e&&e(n),i.manager.itemEnd(t)})).catch((function(e){r&&r(e),i.manager.itemError(t),i.manager.itemEnd(t)})),i.manager.itemStart(t)}}),Object.assign(Sh.prototype,{moveTo:function(t,e){return this.currentPath=new Ql,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this},lineTo:function(t,e){return this.currentPath.lineTo(t,e),this},quadraticCurveTo:function(t,e,n,r){return this.currentPath.quadraticCurveTo(t,e,n,r),this},bezierCurveTo:function(t,e,n,r,i,a){return this.currentPath.bezierCurveTo(t,e,n,r,i,a),this},splineThru:function(t){return this.currentPath.splineThru(t),this},toShapes:function(t,e){function n(t){for(var e=[],n=0,r=t.length;n<r;n++){var i=t[n],a=new Kl;a.curves=i.curves,e.push(a)}return e}function r(t,e){for(var n=e.length,r=!1,i=n-1,a=0;a<n;i=a++){var o=e[i],s=e[a],c=s.x-o.x,u=s.y-o.y;if(Math.abs(u)>Number.EPSILON){if(u<0&&(o=e[a],c=-c,s=e[i],u=-u),t.y<o.y||t.y>s.y)continue;if(t.y===o.y){if(t.x===o.x)return!0}else{var l=u*(t.x-o.x)-c*(t.y-o.y);if(0===l)return!0;if(l<0)continue;r=!r}}else{if(t.y!==o.y)continue;if(s.x<=t.x&&t.x<=o.x||o.x<=t.x&&t.x<=s.x)return!0}}return r}var i=_u.isClockWise,a=this.subPaths;if(0===a.length)return[];if(!0===e)return n(a);var o,s,c,u=[];if(1===a.length)return s=a[0],(c=new Kl).curves=s.curves,u.push(c),u;var l=!i(a[0].getPoints());l=t?!l:l;var h,d,p=[],f=[],m=[],v=0;f[v]=void 0,m[v]=[];for(var g=0,y=a.length;g<y;g++)o=i(h=(s=a[g]).getPoints()),(o=t?!o:o)?(!l&&f[v]&&v++,f[v]={s:new Kl,p:h},f[v].s.curves=s.curves,l&&v++,m[v]=[]):m[v].push({h:s,p:h[0]});if(!f[0])return n(a);if(f.length>1){for(var x=!1,b=[],_=0,w=f.length;_<w;_++)p[_]=[];for(_=0,w=f.length;_<w;_++)for(var M=m[_],S=0;S<M.length;S++){for(var E=M[S],T=!0,A=0;A<f.length;A++)r(E.p,f[A].p)&&(_!==A&&b.push({froms:_,tos:A,hole:S}),T?(T=!1,p[A].push(E)):x=!0);T&&p[_].push(E)}b.length>0&&(x||(m=p))}g=0;for(var L=f.length;g<L;g++){c=f[g].s,u.push(c);for(var R=0,P=(d=m[g]).length;R<P;R++)c.holes.push(d[R].h)}return u}}),Object.assign(Eh.prototype,{isFont:!0,generateShapes:function(t,e){void 0===e&&(e=100);for(var n=[],r=function(t,e,n){for(var r=Array.from?Array.from(t):String(t).split(""),i=e/n.resolution,a=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*i,o=[],s=0,c=0,u=0;u<r.length;u++){var l=r[u];if("\n"===l)s=0,c-=a;else{var h=Th(l,i,s,c,n);s+=h.offsetX,o.push(h.path)}}return o}(t,e,this.data),i=0,a=r.length;i<a;i++)Array.prototype.push.apply(n,r[i].toShapes());return n}}),Ah.prototype=Object.assign(Object.create(wl.prototype),{constructor:Ah,load:function(t,e,n,r){var i=this,a=new Sl(this.manager);a.setPath(this.path),a.load(t,(function(t){var n;try{n=JSON.parse(t)}catch(e){console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),n=JSON.parse(t.substring(65,t.length-2))}var r=i.parse(n);e&&e(r)}),n,r)},parse:function(t){return new Eh(t)}});var Lh={getContext:function(){return void 0===xh&&(xh=new(window.AudioContext||window.webkitAudioContext)),xh},setContext:function(t){xh=t}};function Rh(t){wl.call(this,t)}function Ph(){this.coefficients=[];for(var t=0;t<9;t++)this.coefficients.push(new $n)}function Ch(t,e){th.call(this,void 0,e),this.sh=void 0!==t?t:new Ph}function Oh(t,e,n){Ch.call(this,void 0,n);var r=(new fi).set(t),i=(new fi).set(e),a=new $n(r.r,r.g,r.b),o=new $n(i.r,i.g,i.b),s=Math.sqrt(Math.PI),c=s*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(o).multiplyScalar(s),this.sh.coefficients[1].copy(a).sub(o).multiplyScalar(c)}function Dh(t,e){Ch.call(this,void 0,e);var n=(new fi).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}Rh.prototype=Object.assign(Object.create(wl.prototype),{constructor:Rh,load:function(t,e,n,r){var i=new Sl(this.manager);i.setResponseType("arraybuffer"),i.setPath(this.path),i.load(t,(function(t){var n=t.slice(0);Lh.getContext().decodeAudioData(n,(function(t){e(t)}))}),n,r)}}),Object.assign(Ph.prototype,{isSphericalHarmonics3:!0,set:function(t){for(var e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this},zero:function(){for(var t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this},getAt:function(t,e){var n=t.x,r=t.y,i=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.282095),e.addScaledVector(a[1],.488603*r),e.addScaledVector(a[2],.488603*i),e.addScaledVector(a[3],.488603*n),e.addScaledVector(a[4],n*r*1.092548),e.addScaledVector(a[5],r*i*1.092548),e.addScaledVector(a[6],.315392*(3*i*i-1)),e.addScaledVector(a[7],n*i*1.092548),e.addScaledVector(a[8],.546274*(n*n-r*r)),e},getIrradianceAt:function(t,e){var n=t.x,r=t.y,i=t.z,a=this.coefficients;return e.copy(a[0]).multiplyScalar(.886227),e.addScaledVector(a[1],1.023328*r),e.addScaledVector(a[2],1.023328*i),e.addScaledVector(a[3],1.023328*n),e.addScaledVector(a[4],.858086*n*r),e.addScaledVector(a[5],.858086*r*i),e.addScaledVector(a[6],.743125*i*i-.247708),e.addScaledVector(a[7],.858086*n*i),e.addScaledVector(a[8],.429043*(n*n-r*r)),e},add:function(t){for(var e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this},addScaledSH:function(t,e){for(var n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this},scale:function(t){for(var e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this},lerp:function(t,e){for(var n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this},equals:function(t){for(var e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0},copy:function(t){return this.set(t.coefficients)},clone:function(){return(new this.constructor).copy(this)},fromArray:function(t,e){void 0===e&&(e=0);for(var n=this.coefficients,r=0;r<9;r++)n[r].fromArray(t,e+3*r);return this},toArray:function(t,e){void 0===t&&(t=[]),void 0===e&&(e=0);for(var n=this.coefficients,r=0;r<9;r++)n[r].toArray(t,e+3*r);return t}}),Object.assign(Ph,{getBasisAt:function(t,e){var n=t.x,r=t.y,i=t.z;e[0]=.282095,e[1]=.488603*r,e[2]=.488603*i,e[3]=.488603*n,e[4]=1.092548*n*r,e[5]=1.092548*r*i,e[6]=.315392*(3*i*i-1),e[7]=1.092548*n*i,e[8]=.546274*(n*n-r*r)}}),Ch.prototype=Object.assign(Object.create(th.prototype),{constructor:Ch,isLightProbe:!0,copy:function(t){return th.prototype.copy.call(this,t),this.sh.copy(t.sh),this.intensity=t.intensity,this},toJSON:function(t){return th.prototype.toJSON.call(this,t)}}),Oh.prototype=Object.assign(Object.create(Ch.prototype),{constructor:Oh,isHemisphereLightProbe:!0,copy:function(t){return Ch.prototype.copy.call(this,t),this},toJSON:function(t){return Ch.prototype.toJSON.call(this,t)}}),Dh.prototype=Object.assign(Object.create(Ch.prototype),{constructor:Dh,isAmbientLightProbe:!0,copy:function(t){return Ch.prototype.copy.call(this,t),this},toJSON:function(t){return Ch.prototype.toJSON.call(this,t)}});var Ih=new ar,Nh=new ar;function Bh(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new _a,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new _a,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}function zh(t){this.autoStart=void 0===t||t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}Object.assign(Bh.prototype,{update:function(t){var e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;var n,r,i=t.projectionMatrix.clone(),a=e.eyeSep/2,o=a*e.near/e.focus,s=e.near*Math.tan(Un.DEG2RAD*e.fov*.5)/e.zoom;Nh.elements[12]=-a,Ih.elements[12]=a,n=-s*e.aspect+o,r=s*e.aspect+o,i.elements[0]=2*e.near/(r-n),i.elements[8]=(r+n)/(r-n),this.cameraL.projectionMatrix.copy(i),n=-s*e.aspect-o,r=s*e.aspect-o,i.elements[0]=2*e.near/(r-n),i.elements[8]=(r+n)/(r-n),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(Nh),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Ih)}}),Object.assign(zh.prototype,{start:function(){this.startTime=("undefined"==typeof performance?Date:performance).now(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0},stop:function(){this.getElapsedTime(),this.running=!1,this.autoStart=!1},getElapsedTime:function(){return this.getDelta(),this.elapsedTime},getDelta:function(){var t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){var e=("undefined"==typeof performance?Date:performance).now();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}});var Fh=new $n,Uh=new Yn,Gh=new $n,Hh=new $n;function kh(){Mr.call(this),this.type="AudioListener",this.context=Lh.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new zh}function jh(t){Mr.call(this),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.sourceType="empty",this._startedAt=0,this._pausedAt=0,this.filters=[]}kh.prototype=Object.assign(Object.create(Mr.prototype),{constructor:kh,getInput:function(){return this.gain},removeFilter:function(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this},getFilter:function(){return this.filter},setFilter:function(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this},getMasterVolume:function(){return this.gain.gain.value},setMasterVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this},updateMatrixWorld:function(t){Mr.prototype.updateMatrixWorld.call(this,t);var e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Fh,Uh,Gh),Hh.set(0,0,-1).applyQuaternion(Uh),e.positionX){var r=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(Fh.x,r),e.positionY.linearRampToValueAtTime(Fh.y,r),e.positionZ.linearRampToValueAtTime(Fh.z,r),e.forwardX.linearRampToValueAtTime(Hh.x,r),e.forwardY.linearRampToValueAtTime(Hh.y,r),e.forwardZ.linearRampToValueAtTime(Hh.z,r),e.upX.linearRampToValueAtTime(n.x,r),e.upY.linearRampToValueAtTime(n.y,r),e.upZ.linearRampToValueAtTime(n.z,r)}else e.setPosition(Fh.x,Fh.y,Fh.z),e.setOrientation(Hh.x,Hh.y,Hh.z,n.x,n.y,n.z)}}),jh.prototype=Object.assign(Object.create(Mr.prototype),{constructor:jh,getOutput:function(){return this.gain},setNodeSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this},setMediaElementSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this},setMediaStreamSource:function(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this},setBuffer:function(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this},play:function(t){if(void 0===t&&(t=0),!0!==this.isPlaying){if(!1!==this.hasPlaybackControl){this._startedAt=this.context.currentTime+t;var e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._pausedAt+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}console.warn("THREE.Audio: this Audio has no playback control.")}else console.warn("THREE.Audio: Audio is already playing.")},pause:function(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._pausedAt+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")},stop:function(){if(!1!==this.hasPlaybackControl)return this._pausedAt=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")},connect:function(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this},disconnect:function(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(var t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this},getFilters:function(){return this.filters},setFilters:function(t){return t||(t=[]),!0===this.isPlaying?(this.disconnect(),this.filters=t,this.connect()):this.filters=t,this},setDetune:function(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this},getDetune:function(){return this.detune},getFilter:function(){return this.getFilters()[0]},setFilter:function(t){return this.setFilters(t?[t]:[])},setPlaybackRate:function(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")},getPlaybackRate:function(){return this.playbackRate},onEnded:function(){this.isPlaying=!1},getLoop:function(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop},setLoop:function(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")},setLoopStart:function(t){return this.loopStart=t,this},setLoopEnd:function(t){return this.loopEnd=t,this},getVolume:function(){return this.gain.gain.value},setVolume:function(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}});var Vh=new $n,Wh=new Yn,qh=new $n,Xh=new $n;function Yh(t){jh.call(this,t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}function Zh(t,e){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=void 0!==e?e:2048,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}function Jh(t,e,n){this.binding=t,this.valueSize=n;var r,i=Float64Array;switch(e){case"quaternion":r=this._slerp;break;case"string":case"bool":i=Array,r=this._select;break;default:r=this._lerp}this.buffer=new i(4*n),this._mixBufferRegion=r,this.cumulativeWeight=0,this.useCount=0,this.referenceCount=0}Yh.prototype=Object.assign(Object.create(jh.prototype),{constructor:Yh,getOutput:function(){return this.panner},getRefDistance:function(){return this.panner.refDistance},setRefDistance:function(t){return this.panner.refDistance=t,this},getRolloffFactor:function(){return this.panner.rolloffFactor},setRolloffFactor:function(t){return this.panner.rolloffFactor=t,this},getDistanceModel:function(){return this.panner.distanceModel},setDistanceModel:function(t){return this.panner.distanceModel=t,this},getMaxDistance:function(){return this.panner.maxDistance},setMaxDistance:function(t){return this.panner.maxDistance=t,this},setDirectionalCone:function(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this},updateMatrixWorld:function(t){if(Mr.prototype.updateMatrixWorld.call(this,t),!0!==this.hasPlaybackControl||!1!==this.isPlaying){this.matrixWorld.decompose(Vh,Wh,qh),Xh.set(0,0,1).applyQuaternion(Wh);var e=this.panner;if(e.positionX){var n=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(Vh.x,n),e.positionY.linearRampToValueAtTime(Vh.y,n),e.positionZ.linearRampToValueAtTime(Vh.z,n),e.orientationX.linearRampToValueAtTime(Xh.x,n),e.orientationY.linearRampToValueAtTime(Xh.y,n),e.orientationZ.linearRampToValueAtTime(Xh.z,n)}else e.setPosition(Vh.x,Vh.y,Vh.z),e.setOrientation(Xh.x,Xh.y,Xh.z)}}}),Object.assign(Zh.prototype,{getFrequencyData:function(){return this.analyser.getByteFrequencyData(this.data),this.data},getAverageFrequency:function(){for(var t=0,e=this.getFrequencyData(),n=0;n<e.length;n++)t+=e[n];return t/e.length}}),Object.assign(Jh.prototype,{accumulate:function(t,e){var n=this.buffer,r=this.valueSize,i=t*r+r,a=this.cumulativeWeight;if(0===a){for(var o=0;o!==r;++o)n[i+o]=n[o];a=e}else{var s=e/(a+=e);this._mixBufferRegion(n,i,0,s,r)}this.cumulativeWeight=a},apply:function(t){var e=this.valueSize,n=this.buffer,r=t*e+e,i=this.cumulativeWeight,a=this.binding;if(this.cumulativeWeight=0,i<1){var o=3*e;this._mixBufferRegion(n,r,o,1-i,e)}for(var s=e,c=e+e;s!==c;++s)if(n[s]!==n[s+e]){a.setValue(n,r);break}},saveOriginalState:function(){var t=this.binding,e=this.buffer,n=this.valueSize,r=3*n;t.getValue(e,r);for(var i=n,a=r;i!==a;++i)e[i]=e[r+i%n];this.cumulativeWeight=0},restoreOriginalState:function(){var t=3*this.valueSize;this.binding.setValue(this.buffer,t)},_select:function(t,e,n,r,i){if(r>=.5)for(var a=0;a!==i;++a)t[e+a]=t[n+a]},_slerp:function(t,e,n,r){Yn.slerpFlat(t,e,t,e,t,n,r)},_lerp:function(t,e,n,r,i){for(var a=1-r,o=0;o!==i;++o){var s=e+o;t[s]=t[s]*a+t[n+o]*r}}});var $h=new RegExp("[\\[\\]\\.:\\/]","g"),Qh="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",Kh=/((?:WC+[\/:])*)/.source.replace("WC","[^\\[\\]\\.:\\/]"),td=/(WCOD+)?/.source.replace("WCOD",Qh),ed=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC","[^\\[\\]\\.:\\/]"),nd=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC","[^\\[\\]\\.:\\/]"),rd=new RegExp("^"+Kh+td+ed+nd+"$"),id=["material","materials","bones"];function ad(t,e,n){var r=n||od.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,r)}function od(t,e,n){this.path=e,this.parsedPath=n||od.parseTrackName(e),this.node=od.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t}function sd(){this.uuid=Un.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;var t={};this._indicesByUUID=t;for(var e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};var r=this;this.stats={objects:{get total(){return r._objects.length},get inUse(){return this.total-r.nCachedObjects_}},get bindingsPerObject(){return r._bindings.length}}}function cd(t,e,n){this._mixer=t,this._clip=e,this._localRoot=n||null;for(var r=e.tracks,i=r.length,a=new Array(i),o={endingStart:We,endingEnd:We},s=0;s!==i;++s){var c=r[s].createInterpolant(null);a[s]=c,c.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Ge,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}function ud(t){this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}function ld(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}function hd(t,e,n){Is.call(this,t,e),this.meshPerAttribute=n||1}function dd(t,e,n,r){this.ray=new Zr(t,e),this.near=n||0,this.far=r||1/0,this.camera=null,this.layers=new ur,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function pd(t,e){return t.distance-e.distance}function fd(t,e,n,r){if(t.layers.test(e.layers)&&t.raycast(e,n),!0===r)for(var i=t.children,a=0,o=i.length;a<o;a++)fd(i[a],e,n,!0)}function md(t,e,n){return this.radius=void 0!==t?t:1,this.phi=void 0!==e?e:0,this.theta=void 0!==n?n:0,this}function vd(t,e,n){return this.radius=void 0!==t?t:1,this.theta=void 0!==e?e:0,this.y=void 0!==n?n:0,this}Object.assign(ad.prototype,{getValue:function(t,e){this.bind();var n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(t,e)},setValue:function(t,e){for(var n=this._bindings,r=this._targetGroup.nCachedObjects_,i=n.length;r!==i;++r)n[r].setValue(t,e)},bind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()},unbind:function(){for(var t=this._bindings,e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}}),Object.assign(od,{Composite:ad,create:function(t,e,n){return t&&t.isAnimationObjectGroup?new od.Composite(t,e,n):new od(t,e,n)},sanitizeNodeName:function(t){return t.replace(/\s/g,"_").replace($h,"")},parseTrackName:function(t){var e=rd.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);var n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){var i=n.nodeName.substring(r+1);-1!==id.indexOf(i)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=i)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n},findNode:function(t,e){if(!e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){var n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){var r=function(t){for(var n=0;n<t.length;n++){var i=t[n];if(i.name===e||i.uuid===e)return i;var a=r(i.children);if(a)return a}return null},i=r(t.children);if(i)return i}return null}}),Object.assign(od.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)t[e++]=n[r]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++]},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){for(var n=this.resolvedProperty,r=0,i=n.length;r!==i;++r)n[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){var t=this.node,e=this.parsedPath,n=e.objectName,r=e.propertyName,i=e.propertyIndex;if(t||(t=od.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,t){if(n){var a=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(var o=0;o<t.length;o++)if(t[o].name===a){a=o;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==a){if(void 0===t[a])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[a]}}var s=t[r];if(void 0!==s){var c=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);var u=this.BindingType.Direct;if(void 0!==i){if("morphTargetInfluences"===r){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);for(o=0;o<this.node.geometry.morphAttributes.position.length;o++)if(t.geometry.morphAttributes.position[o].name===i){i=o;break}}else{if(!t.geometry.morphTargets)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.",this);for(o=0;o<this.node.geometry.morphTargets.length;o++)if(t.geometry.morphTargets[o].name===i){i=o;break}}}u=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=i}else void 0!==s.fromArray&&void 0!==s.toArray?(u=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(u=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=r;this.getValue=this.GetterByBindingType[u],this.setValue=this.SetterByBindingTypeAndVersioning[u][c]}else{var l=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+r+" but it wasn't found.",t)}}else console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.")},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}),Object.assign(od.prototype,{_getValue_unbound:od.prototype.getValue,_setValue_unbound:od.prototype.setValue}),Object.assign(sd.prototype,{isAnimationObjectGroup:!0,add:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._paths,a=this._parsedPaths,o=this._bindings,s=o.length,c=void 0,u=0,l=arguments.length;u!==l;++u){var h=arguments[u],d=h.uuid,p=r[d];if(void 0===p){p=e++,r[d]=p,t.push(h);for(var f=0,m=s;f!==m;++f)o[f].push(new od(h,i[f],a[f]))}else if(p<n){c=t[p];var v=--n,g=t[v];r[g.uuid]=p,t[p]=g,r[d]=v,t[v]=h;for(f=0,m=s;f!==m;++f){var y=o[f],x=y[v],b=y[p];y[p]=x,void 0===b&&(b=new od(h,i[f],a[f])),y[v]=b}}else t[p]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=n},remove:function(){for(var t=this._objects,e=this.nCachedObjects_,n=this._indicesByUUID,r=this._bindings,i=r.length,a=0,o=arguments.length;a!==o;++a){var s=arguments[a],c=s.uuid,u=n[c];if(void 0!==u&&u>=e){var l=e++,h=t[l];n[h.uuid]=u,t[u]=h,n[c]=l,t[l]=s;for(var d=0,p=i;d!==p;++d){var f=r[d],m=f[l],v=f[u];f[u]=m,f[l]=v}}}this.nCachedObjects_=e},uncache:function(){for(var t=this._objects,e=t.length,n=this.nCachedObjects_,r=this._indicesByUUID,i=this._bindings,a=i.length,o=0,s=arguments.length;o!==s;++o){var c=arguments[o],u=c.uuid,l=r[u];if(void 0!==l)if(delete r[u],l<n){var h=--n,d=t[h],p=t[y=--e];r[d.uuid]=l,t[l]=d,r[p.uuid]=h,t[h]=p,t.pop();for(var f=0,m=a;f!==m;++f){var v=(x=i[f])[h],g=x[y];x[l]=v,x[h]=g,x.pop()}}else{var y;r[(p=t[y=--e]).uuid]=l,t[l]=p,t.pop();for(f=0,m=a;f!==m;++f){var x;(x=i[f])[l]=x[y],x.pop()}}}this.nCachedObjects_=n},subscribe_:function(t,e){var n=this._bindingsIndicesByPath,r=n[t],i=this._bindings;if(void 0!==r)return i[r];var a=this._paths,o=this._parsedPaths,s=this._objects,c=s.length,u=this.nCachedObjects_,l=new Array(c);r=i.length,n[t]=r,a.push(t),o.push(e),i.push(l);for(var h=u,d=s.length;h!==d;++h){var p=s[h];l[h]=new od(p,t,e)}return l},unsubscribe_:function(t){var e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){var r=this._paths,i=this._parsedPaths,a=this._bindings,o=a.length-1,s=a[o];e[t[o]]=n,a[n]=s,a.pop(),i[n]=i[o],i.pop(),r[n]=r[o],r.pop()}}}),Object.assign(cd.prototype,{play:function(){return this._mixer._activateAction(this),this},stop:function(){return this._mixer._deactivateAction(this),this.reset()},reset:function(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()},isRunning:function(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)},isScheduled:function(){return this._mixer._isActiveAction(this)},startAt:function(t){return this._startTime=t,this},setLoop:function(t,e){return this.loop=t,this.repetitions=e,this},setEffectiveWeight:function(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()},getEffectiveWeight:function(){return this._effectiveWeight},fadeIn:function(t){return this._scheduleFading(t,0,1)},fadeOut:function(t){return this._scheduleFading(t,1,0)},crossFadeFrom:function(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){var r=this._clip.duration,i=t._clip.duration,a=i/r,o=r/i;t.warp(1,a,e),this.warp(o,1,e)}return this},crossFadeTo:function(t,e,n){return t.crossFadeFrom(this,e,n)},stopFading:function(){var t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},setEffectiveTimeScale:function(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()},getEffectiveTimeScale:function(){return this._effectiveTimeScale},setDuration:function(t){return this.timeScale=this._clip.duration/t,this.stopWarping()},syncWith:function(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()},halt:function(t){return this.warp(this._effectiveTimeScale,0,t)},warp:function(t,e,n){var r=this._mixer,i=r.time,a=this._timeScaleInterpolant,o=this.timeScale;null===a&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);var s=a.parameterPositions,c=a.sampleValues;return s[0]=i,s[1]=i+n,c[0]=t/o,c[1]=e/o,this},stopWarping:function(){var t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this},getMixer:function(){return this._mixer},getClip:function(){return this._clip},getRoot:function(){return this._localRoot||this._mixer._root},_update:function(t,e,n,r){if(this.enabled){var i=this._startTime;if(null!==i){var a=(t-i)*n;if(a<0||0===n)return;this._startTime=null,e=n*a}e*=this._updateTimeScale(t);var o=this._updateTime(e),s=this._updateWeight(t);if(s>0)for(var c=this._interpolants,u=this._propertyBindings,l=0,h=c.length;l!==h;++l)c[l].evaluate(o),u[l].accumulate(r,s)}else this._updateWeight(t)},_updateWeight:function(t){var e=0;if(this.enabled){e=this.weight;var n=this._weightInterpolant;if(null!==n){var r=n.evaluate(t)[0];e*=r,t>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=e,e},_updateTimeScale:function(t){var e=0;if(!this.paused){e=this.timeScale;var n=this._timeScaleInterpolant;if(null!==n)e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e)}return this._effectiveTimeScale=e,e},_updateTime:function(t){var e=this.time+t,n=this._clip.duration,r=this.loop,i=this._loopCount,a=r===He;if(0===t)return-1===i?e:a&&1==(1&i)?n-e:e;if(r===Ue){-1===i&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(e>=n)e=n;else{if(!(e<0)){this.time=e;break t}e=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===i&&(t>=0?(i=0,this._setEndings(!0,0===this.repetitions,a)):this._setEndings(0===this.repetitions,!0,a)),e>=n||e<0){var o=Math.floor(e/n);e-=n*o,i+=Math.abs(o);var s=this.repetitions-i;if(s<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,e=t>0?n:0,this.time=e,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===s){var c=t<0;this._setEndings(c,!c,a)}else this._setEndings(!1,!1,a);this._loopCount=i,this.time=e,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:o})}}else this.time=e;if(a&&1==(1&i))return n-e}return e},_setEndings:function(t,e,n){var r=this._interpolantSettings;n?(r.endingStart=qe,r.endingEnd=qe):(r.endingStart=t?this.zeroSlopeAtStart?qe:We:Xe,r.endingEnd=e?this.zeroSlopeAtEnd?qe:We:Xe)},_scheduleFading:function(t,e,n){var r=this._mixer,i=r.time,a=this._weightInterpolant;null===a&&(a=r._lendControlInterpolant(),this._weightInterpolant=a);var o=a.parameterPositions,s=a.sampleValues;return o[0]=i,s[0]=e,o[1]=i+t,s[1]=n,this}}),ud.prototype=Object.assign(Object.create(Nn.prototype),{constructor:ud,_bindAction:function(t,e){var n=t._localRoot||this._root,r=t._clip.tracks,i=r.length,a=t._propertyBindings,o=t._interpolants,s=n.uuid,c=this._bindingsByRootAndName,u=c[s];void 0===u&&(u={},c[s]=u);for(var l=0;l!==i;++l){var h=r[l],d=h.name,p=u[d];if(void 0!==p)a[l]=p;else{if(void 0!==(p=a[l])){null===p._cacheIndex&&(++p.referenceCount,this._addInactiveBinding(p,s,d));continue}var f=e&&e._propertyBindings[l].binding.parsedPath;++(p=new Jh(od.create(n,d,f),h.ValueTypeName,h.getValueSize())).referenceCount,this._addInactiveBinding(p,s,d),a[l]=p}o[l].resultBuffer=p.buffer}},_activateAction:function(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){var e=(t._localRoot||this._root).uuid,n=t._clip.uuid,r=this._actionsByClip[n];this._bindAction(t,r&&r.knownActions[0]),this._addInactiveAction(t,n,e)}for(var i=t._propertyBindings,a=0,o=i.length;a!==o;++a){var s=i[a];0==s.useCount++&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}},_deactivateAction:function(t){if(this._isActiveAction(t)){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.useCount&&(i.restoreOriginalState(),this._takeBackBinding(i))}this._takeBackAction(t)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;var t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}},_isActiveAction:function(t){var e=t._cacheIndex;return null!==e&&e<this._nActiveActions},_addInactiveAction:function(t,e,n){var r=this._actions,i=this._actionsByClip,a=i[e];if(void 0===a)a={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,i[e]=a;else{var o=a.knownActions;t._byClipCacheIndex=o.length,o.push(t)}t._cacheIndex=r.length,r.push(t),a.actionByRoot[n]=t},_removeInactiveAction:function(t){var e=this._actions,n=e[e.length-1],r=t._cacheIndex;n._cacheIndex=r,e[r]=n,e.pop(),t._cacheIndex=null;var i=t._clip.uuid,a=this._actionsByClip,o=a[i],s=o.knownActions,c=s[s.length-1],u=t._byClipCacheIndex;c._byClipCacheIndex=u,s[u]=c,s.pop(),t._byClipCacheIndex=null,delete o.actionByRoot[(t._localRoot||this._root).uuid],0===s.length&&delete a[i],this._removeInactiveBindingsForAction(t)},_removeInactiveBindingsForAction:function(t){for(var e=t._propertyBindings,n=0,r=e.length;n!==r;++n){var i=e[n];0==--i.referenceCount&&this._removeInactiveBinding(i)}},_lendAction:function(t){var e=this._actions,n=t._cacheIndex,r=this._nActiveActions++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackAction:function(t){var e=this._actions,n=t._cacheIndex,r=--this._nActiveActions,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_addInactiveBinding:function(t,e,n){var r=this._bindingsByRootAndName,i=r[e],a=this._bindings;void 0===i&&(i={},r[e]=i),i[n]=t,t._cacheIndex=a.length,a.push(t)},_removeInactiveBinding:function(t){var e=this._bindings,n=t.binding,r=n.rootNode.uuid,i=n.path,a=this._bindingsByRootAndName,o=a[r],s=e[e.length-1],c=t._cacheIndex;s._cacheIndex=c,e[c]=s,e.pop(),delete o[i],0===Object.keys(o).length&&delete a[r]},_lendBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=this._nActiveBindings++,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_takeBackBinding:function(t){var e=this._bindings,n=t._cacheIndex,r=--this._nActiveBindings,i=e[r];t._cacheIndex=r,e[r]=t,i._cacheIndex=n,e[n]=i},_lendControlInterpolant:function(){var t=this._controlInterpolants,e=this._nActiveControlInterpolants++,n=t[e];return void 0===n&&((n=new sl(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer)).__cacheIndex=e,t[e]=n),n},_takeBackControlInterpolant:function(t){var e=this._controlInterpolants,n=t.__cacheIndex,r=--this._nActiveControlInterpolants,i=e[r];t.__cacheIndex=r,e[r]=t,i.__cacheIndex=n,e[n]=i},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?gl.findByName(n,t):t,a=null!==i?i.uuid:t,o=this._actionsByClip[a],s=null;if(void 0!==o){var c=o.actionByRoot[r];if(void 0!==c)return c;s=o.knownActions[0],null===i&&(i=s._clip)}if(null===i)return null;var u=new cd(this,i,e);return this._bindAction(u,s),this._addInactiveAction(u,a,r),u},existingAction:function(t,e){var n=e||this._root,r=n.uuid,i="string"==typeof t?gl.findByName(n,t):t,a=i?i.uuid:t,o=this._actionsByClip[a];return void 0!==o&&o.actionByRoot[r]||null},stopAllAction:function(){var t=this._actions,e=this._nActiveActions,n=this._bindings,r=this._nActiveBindings;this._nActiveActions=0,this._nActiveBindings=0;for(var i=0;i!==e;++i)t[i].reset();for(i=0;i!==r;++i)n[i].useCount=0;return this},update:function(t){t*=this.timeScale;for(var e=this._actions,n=this._nActiveActions,r=this.time+=t,i=Math.sign(t),a=this._accuIndex^=1,o=0;o!==n;++o){e[o]._update(r,t,i,a)}var s=this._bindings,c=this._nActiveBindings;for(o=0;o!==c;++o)s[o].apply(a);return this},setTime:function(t){this.time=0;for(var e=0;e<this._actions.length;e++)this._actions[e].time=0;return this.update(t)},getRoot:function(){return this._root},uncacheClip:function(t){var e=this._actions,n=t.uuid,r=this._actionsByClip,i=r[n];if(void 0!==i){for(var a=i.knownActions,o=0,s=a.length;o!==s;++o){var c=a[o];this._deactivateAction(c);var u=c._cacheIndex,l=e[e.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,l._cacheIndex=u,e[u]=l,e.pop(),this._removeInactiveBindingsForAction(c)}delete r[n]}},uncacheRoot:function(t){var e=t.uuid,n=this._actionsByClip;for(var r in n){var i=n[r].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}var a=this._bindingsByRootAndName[e];if(void 0!==a)for(var o in a){var s=a[o];s.restoreOriginalState(),this._removeInactiveBinding(s)}},uncacheAction:function(t,e){var n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}),ld.prototype.clone=function(){return new ld(void 0===this.value.clone?this.value:this.value.clone())},hd.prototype=Object.assign(Object.create(Is.prototype),{constructor:hd,isInstancedInterleavedBuffer:!0,copy:function(t){return Is.prototype.copy.call(this,t),this.meshPerAttribute=t.meshPerAttribute,this}}),Object.assign(dd.prototype,{set:function(t,e){this.ray.set(t,e)},setFromCamera:function(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(t,e,n){var r=n||[];return fd(t,this,r,e),r.sort(pd),r},intersectObjects:function(t,e,n){var r=n||[];if(!1===Array.isArray(t))return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),r;for(var i=0,a=t.length;i<a;i++)fd(t[i],this,r,e);return r.sort(pd),r}}),Object.assign(md.prototype,{set:function(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this},makeSafe:function(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(Un.clamp(e/this.radius,-1,1))),this}}),Object.assign(vd.prototype,{set:function(t,e,n){return this.radius=t,this.theta=e,this.y=n,this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this},setFromVector3:function(t){return this.setFromCartesianCoords(t.x,t.y,t.z)},setFromCartesianCoords:function(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}});var gd=new Gn;function yd(t,e){this.min=void 0!==t?t:new Gn(1/0,1/0),this.max=void 0!==e?e:new Gn(-1/0,-1/0)}Object.assign(yd.prototype,{set:function(t,e){return this.min.copy(t),this.max.copy(e),this},setFromPoints:function(t){this.makeEmpty();for(var e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this},setFromCenterAndSize:function(t,e){var n=gd.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.min.copy(t.min),this.max.copy(t.max),this},makeEmpty:function(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this},isEmpty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},getCenter:function(t){return void 0===t&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new Gn),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)},getSize:function(t){return void 0===t&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new Gn),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)},expandByPoint:function(t){return this.min.min(t),this.max.max(t),this},expandByVector:function(t){return this.min.sub(t),this.max.add(t),this},expandByScalar:function(t){return this.min.addScalar(-t),this.max.addScalar(t),this},containsPoint:function(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)},containsBox:function(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y},getParameter:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new Gn),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))},intersectsBox:function(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)},clampPoint:function(t,e){return void 0===e&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new Gn),e.copy(t).clamp(this.min,this.max)},distanceToPoint:function(t){return gd.copy(t).clamp(this.min,this.max).sub(t).length()},intersect:function(t){return this.min.max(t.min),this.max.min(t.max),this},union:function(t){return this.min.min(t.min),this.max.max(t.max),this},translate:function(t){return this.min.add(t),this.max.add(t),this},equals:function(t){return t.min.equals(this.min)&&t.max.equals(this.max)}});var xd=new $n,bd=new $n;function _d(t,e){this.start=void 0!==t?t:new $n,this.end=void 0!==e?e:new $n}function wd(t){Mr.call(this),this.material=t,this.render=function(){}}Object.assign(_d.prototype,{set:function(t,e){return this.start.copy(t),this.end.copy(e),this},clone:function(){return(new this.constructor).copy(this)},copy:function(t){return this.start.copy(t.start),this.end.copy(t.end),this},getCenter:function(t){return void 0===t&&(console.warn("THREE.Line3: .getCenter() target is now required"),t=new $n),t.addVectors(this.start,this.end).multiplyScalar(.5)},delta:function(t){return void 0===t&&(console.warn("THREE.Line3: .delta() target is now required"),t=new $n),t.subVectors(this.end,this.start)},distanceSq:function(){return this.start.distanceToSquared(this.end)},distance:function(){return this.start.distanceTo(this.end)},at:function(t,e){return void 0===e&&(console.warn("THREE.Line3: .at() target is now required"),e=new $n),this.delta(e).multiplyScalar(t).add(this.start)},closestPointToPointParameter:function(t,e){xd.subVectors(t,this.start),bd.subVectors(this.end,this.start);var n=bd.dot(bd),r=bd.dot(xd)/n;return e&&(r=Un.clamp(r,0,1)),r},closestPointToPoint:function(t,e,n){var r=this.closestPointToPointParameter(t,e);return void 0===n&&(console.warn("THREE.Line3: .closestPointToPoint() target is now required"),n=new $n),this.delta(n).multiplyScalar(r).add(this.start)},applyMatrix4:function(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this},equals:function(t){return t.start.equals(this.start)&&t.end.equals(this.end)}}),wd.prototype=Object.create(Mr.prototype),wd.prototype.constructor=wd,wd.prototype.isImmediateRenderObject=!0;var Md=new $n;function Sd(t,e){Mr.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;for(var n=new ki,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1],i=0,a=1;i<32;i++,a++){var o=i/32*Math.PI*2,s=a/32*Math.PI*2;r.push(Math.cos(o),Math.sin(o),1,Math.cos(s),Math.sin(s),1)}n.setAttribute("position",new Ci(r,3));var c=new dc({fog:!1,toneMapped:!1});this.cone=new _c(n,c),this.add(this.cone),this.update()}Sd.prototype=Object.create(Mr.prototype),Sd.prototype.constructor=Sd,Sd.prototype.dispose=function(){this.cone.geometry.dispose(),this.cone.material.dispose()},Sd.prototype.update=function(){this.light.updateMatrixWorld();var t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Md.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Md),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)};var Ed=new $n,Td=new ar,Ad=new ar;function Ld(t){for(var e=function t(e){var n=[];e&&e.isBone&&n.push(e);for(var r=0;r<e.children.length;r++)n.push.apply(n,t(e.children[r]));return n}(t),n=new ki,r=[],i=[],a=new fi(0,0,1),o=new fi(0,1,0),s=0;s<e.length;s++){var c=e[s];c.parent&&c.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),i.push(a.r,a.g,a.b),i.push(o.r,o.g,o.b))}n.setAttribute("position",new Ci(r,3)),n.setAttribute("color",new Ci(i,3));var u=new dc({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});_c.call(this,n,u),this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}function Rd(t,e,n){this.light=t,this.light.updateMatrixWorld(),this.color=n;var r=new Cu(e,4,2),i=new _i({wireframe:!0,fog:!1,toneMapped:!1});oa.call(this,r,i),this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}Ld.prototype=Object.create(_c.prototype),Ld.prototype.constructor=Ld,Ld.prototype.isSkeletonHelper=!0,Ld.prototype.updateMatrixWorld=function(t){var e=this.bones,n=this.geometry,r=n.getAttribute("position");Ad.getInverse(this.root.matrixWorld);for(var i=0,a=0;i<e.length;i++){var o=e[i];o.parent&&o.parent.isBone&&(Td.multiplyMatrices(Ad,o.matrixWorld),Ed.setFromMatrixPosition(Td),r.setXYZ(a,Ed.x,Ed.y,Ed.z),Td.multiplyMatrices(Ad,o.parent.matrixWorld),Ed.setFromMatrixPosition(Td),r.setXYZ(a+1,Ed.x,Ed.y,Ed.z),a+=2)}n.getAttribute("position").needsUpdate=!0,Mr.prototype.updateMatrixWorld.call(this,t)},Rd.prototype=Object.create(oa.prototype),Rd.prototype.constructor=Rd,Rd.prototype.dispose=function(){this.geometry.dispose(),this.material.dispose()},Rd.prototype.update=function(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)};var Pd=new $n,Cd=new fi,Od=new fi;function Dd(t,e,n){Mr.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;var r=new kc(e);r.rotateY(.5*Math.PI),this.material=new _i({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);var i=r.getAttribute("position"),a=new Float32Array(3*i.count);r.setAttribute("color",new Mi(a,3)),this.add(new oa(r,this.material)),this.update()}function Id(t,e,n,r){t=t||10,e=e||10,n=new fi(void 0!==n?n:4473924),r=new fi(void 0!==r?r:8947848);for(var i=e/2,a=t/e,o=t/2,s=[],c=[],u=0,l=0,h=-o;u<=e;u++,h+=a){s.push(-o,0,h,o,0,h),s.push(h,0,-o,h,0,o);var d=u===i?n:r;d.toArray(c,l),l+=3,d.toArray(c,l),l+=3,d.toArray(c,l),l+=3,d.toArray(c,l),l+=3}var p=new ki;p.setAttribute("position",new Ci(s,3)),p.setAttribute("color",new Ci(c,3));var f=new dc({vertexColors:!0,toneMapped:!1});_c.call(this,p,f)}function Nd(t,e,n,r,i,a){t=t||10,e=e||16,n=n||8,r=r||64,i=new fi(void 0!==i?i:4473924),a=new fi(void 0!==a?a:8947848);var o,s,c,u,l,h,d,p=[],f=[];for(u=0;u<=e;u++)c=u/e*(2*Math.PI),o=Math.sin(c)*t,s=Math.cos(c)*t,p.push(0,0,0),p.push(o,0,s),d=1&u?i:a,f.push(d.r,d.g,d.b),f.push(d.r,d.g,d.b);for(u=0;u<=n;u++)for(d=1&u?i:a,h=t-t/n*u,l=0;l<r;l++)c=l/r*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b),c=(l+1)/r*(2*Math.PI),o=Math.sin(c)*h,s=Math.cos(c)*h,p.push(o,0,s),f.push(d.r,d.g,d.b);var m=new ki;m.setAttribute("position",new Ci(p,3)),m.setAttribute("color",new Ci(f,3));var v=new dc({vertexColors:!0,toneMapped:!1});_c.call(this,m,v)}Dd.prototype=Object.create(Mr.prototype),Dd.prototype.constructor=Dd,Dd.prototype.dispose=function(){this.children[0].geometry.dispose(),this.children[0].material.dispose()},Dd.prototype.update=function(){var t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{var e=t.geometry.getAttribute("color");Cd.copy(this.light.color),Od.copy(this.light.groundColor);for(var n=0,r=e.count;n<r;n++){var i=n<r/2?Cd:Od;e.setXYZ(n,i.r,i.g,i.b)}e.needsUpdate=!0}t.lookAt(Pd.setFromMatrixPosition(this.light.matrixWorld).negate())},Id.prototype=Object.assign(Object.create(_c.prototype),{constructor:Id,copy:function(t){return _c.prototype.copy.call(this,t),this.geometry.copy(t.geometry),this.material.copy(t.material),this},clone:function(){return(new this.constructor).copy(this)}}),Nd.prototype=Object.create(_c.prototype),Nd.prototype.constructor=Nd;var Bd=new $n,zd=new $n,Fd=new $n;function Ud(t,e,n){Mr.call(this),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);var r=new ki;r.setAttribute("position",new Ci([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));var i=new dc({fog:!1,toneMapped:!1});this.lightPlane=new yc(r,i),this.add(this.lightPlane),(r=new ki).setAttribute("position",new Ci([0,0,0,0,0,1],3)),this.targetLine=new yc(r,i),this.add(this.targetLine),this.update()}Ud.prototype=Object.create(Mr.prototype),Ud.prototype.constructor=Ud,Ud.prototype.dispose=function(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()},Ud.prototype.update=function(){Bd.setFromMatrixPosition(this.light.matrixWorld),zd.setFromMatrixPosition(this.light.target.matrixWorld),Fd.subVectors(zd,Bd),this.lightPlane.lookAt(zd),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(zd),this.targetLine.scale.z=Fd.length()};var Gd=new $n,Hd=new ba;function kd(t){var e=new ki,n=new dc({color:16777215,vertexColors:!0,toneMapped:!1}),r=[],i=[],a={},o=new fi(16755200),s=new fi(16711680),c=new fi(43775),u=new fi(16777215),l=new fi(3355443);function h(t,e,n){d(t,n),d(e,n)}function d(t,e){r.push(0,0,0),i.push(e.r,e.g,e.b),void 0===a[t]&&(a[t]=[]),a[t].push(r.length/3-1)}h("n1","n2",o),h("n2","n4",o),h("n4","n3",o),h("n3","n1",o),h("f1","f2",o),h("f2","f4",o),h("f4","f3",o),h("f3","f1",o),h("n1","f1",o),h("n2","f2",o),h("n3","f3",o),h("n4","f4",o),h("p","n1",s),h("p","n2",s),h("p","n3",s),h("p","n4",s),h("u1","u2",c),h("u2","u3",c),h("u3","u1",c),h("c","t",u),h("p","c",l),h("cn1","cn2",l),h("cn3","cn4",l),h("cf1","cf2",l),h("cf3","cf4",l),e.setAttribute("position",new Ci(r,3)),e.setAttribute("color",new Ci(i,3)),_c.call(this,e,n),this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=a,this.update()}function jd(t,e,n,r,i,a,o){Gd.set(i,a,o).unproject(r);var s=e[t];if(void 0!==s)for(var c=n.getAttribute("position"),u=0,l=s.length;u<l;u++)c.setXYZ(s[u],Gd.x,Gd.y,Gd.z)}kd.prototype=Object.create(_c.prototype),kd.prototype.constructor=kd,kd.prototype.update=function(){var t=this.geometry,e=this.pointMap;Hd.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),jd("c",e,t,Hd,0,0,-1),jd("t",e,t,Hd,0,0,1),jd("n1",e,t,Hd,-1,-1,-1),jd("n2",e,t,Hd,1,-1,-1),jd("n3",e,t,Hd,-1,1,-1),jd("n4",e,t,Hd,1,1,-1),jd("f1",e,t,Hd,-1,-1,1),jd("f2",e,t,Hd,1,-1,1),jd("f3",e,t,Hd,-1,1,1),jd("f4",e,t,Hd,1,1,1),jd("u1",e,t,Hd,.7,1.1,-1),jd("u2",e,t,Hd,-.7,1.1,-1),jd("u3",e,t,Hd,0,2,-1),jd("cf1",e,t,Hd,-1,0,1),jd("cf2",e,t,Hd,1,0,1),jd("cf3",e,t,Hd,0,-1,1),jd("cf4",e,t,Hd,0,1,1),jd("cn1",e,t,Hd,-1,0,-1),jd("cn2",e,t,Hd,1,0,-1),jd("cn3",e,t,Hd,0,-1,-1),jd("cn4",e,t,Hd,0,1,-1),t.getAttribute("position").needsUpdate=!0};var Vd=new Fr;function Wd(t,e){this.object=t,void 0===e&&(e=16776960);var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),i=new ki;i.setIndex(new Mi(n,1)),i.setAttribute("position",new Mi(r,3)),_c.call(this,i,new dc({color:e,toneMapped:!1})),this.matrixAutoUpdate=!1,this.update()}function qd(t,e){this.type="Box3Helper",this.box=t,e=e||16776960;var n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new ki;r.setIndex(new Mi(n,1)),r.setAttribute("position",new Ci([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),_c.call(this,r,new dc({color:e,toneMapped:!1})),this.geometry.computeBoundingSphere()}function Xd(t,e,n){this.type="PlaneHelper",this.plane=t,this.size=void 0===e?1:e;var r=void 0!==n?n:16776960,i=new ki;i.setAttribute("position",new Ci([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),i.computeBoundingSphere(),yc.call(this,i,new dc({color:r,toneMapped:!1}));var a=new ki;a.setAttribute("position",new Ci([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),a.computeBoundingSphere(),this.add(new oa(a,new _i({color:r,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}Wd.prototype=Object.create(_c.prototype),Wd.prototype.constructor=Wd,Wd.prototype.update=function(t){if(void 0!==t&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&Vd.setFromObject(this.object),!Vd.isEmpty()){var e=Vd.min,n=Vd.max,r=this.geometry.attributes.position,i=r.array;i[0]=n.x,i[1]=n.y,i[2]=n.z,i[3]=e.x,i[4]=n.y,i[5]=n.z,i[6]=e.x,i[7]=e.y,i[8]=n.z,i[9]=n.x,i[10]=e.y,i[11]=n.z,i[12]=n.x,i[13]=n.y,i[14]=e.z,i[15]=e.x,i[16]=n.y,i[17]=e.z,i[18]=e.x,i[19]=e.y,i[20]=e.z,i[21]=n.x,i[22]=e.y,i[23]=e.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}},Wd.prototype.setFromObject=function(t){return this.object=t,this.update(),this},Wd.prototype.copy=function(t){return _c.prototype.copy.call(this,t),this.object=t.object,this},Wd.prototype.clone=function(){return(new this.constructor).copy(this)},qd.prototype=Object.create(_c.prototype),qd.prototype.constructor=qd,qd.prototype.updateMatrixWorld=function(t){var e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),Mr.prototype.updateMatrixWorld.call(this,t))},Xd.prototype=Object.create(yc.prototype),Xd.prototype.constructor=Xd,Xd.prototype.updateMatrixWorld=function(t){var e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?g:v,this.lookAt(this.plane.normal),Mr.prototype.updateMatrixWorld.call(this,t)};var Yd,Zd,Jd=new $n;function $d(t,e,n,r,i,a){Mr.call(this),void 0===t&&(t=new $n(0,0,1)),void 0===e&&(e=new $n(0,0,0)),void 0===n&&(n=1),void 0===r&&(r=16776960),void 0===i&&(i=.2*n),void 0===a&&(a=.2*i),void 0===Yd&&((Yd=new ki).setAttribute("position",new Ci([0,0,0,0,1,0],3)),(Zd=new Hu(0,.5,1,5,1)).translate(0,-.5,0)),this.position.copy(e),this.line=new yc(Yd,new dc({color:r,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new oa(Zd,new _i({color:r,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,i,a)}function Qd(t){var e=[0,0,0,t=t||1,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new ki;n.setAttribute("position",new Ci(e,3)),n.setAttribute("color",new Ci([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));var r=new dc({vertexColors:!0,toneMapped:!1});_c.call(this,n,r)}$d.prototype=Object.create(Mr.prototype),$d.prototype.constructor=$d,$d.prototype.setDirection=function(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Jd.set(t.z,0,-t.x).normalize();var e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Jd,e)}},$d.prototype.setLength=function(t,e,n){void 0===e&&(e=.2*t),void 0===n&&(n=.2*e),this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()},$d.prototype.setColor=function(t){this.line.material.color.set(t),this.cone.material.color.set(t)},$d.prototype.copy=function(t){return Mr.prototype.copy.call(this,t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this},$d.prototype.clone=function(){return(new this.constructor).copy(this)},Qd.prototype=Object.create(_c.prototype),Qd.prototype.constructor=Qd;var Kd,tp,ep,np,rp=Math.pow(2,8),ip=[.125,.215,.35,.446,.526,.582],ap=5+ip.length,op={[$e]:0,[Qe]:1,[tn]:2,[nn]:3,[rn]:4,[an]:5,[Ke]:6},sp=new sh,cp=(Kd=20,tp=new Float32Array(Kd),ep=new $n(0,1,0),(np=new Yu({defines:{n:Kd},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:tp},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:ep},inputEncoding:{value:op[$e]},outputEncoding:{value:op[$e]}},vertexShader:Cp(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform int samples;\nuniform float weights[n];\nuniform bool latitudinal;\nuniform float dTheta;\nuniform float mipInt;\nuniform vec3 poleAxis;\n\n${Op()}\n\n#define ENVMAP_TYPE_CUBE_UV\n#include <cube_uv_reflection_fragment>\n\nvec3 getSample(float theta, vec3 axis) {\n\tfloat cosTheta = cos(theta);\n\t// Rodrigues' axis-angle rotation\n\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t+ cross(axis, vOutputDirection) * sin(theta)\n\t\t+ axis * dot(axis, vOutputDirection) * (1.0 - cosTheta);\n\treturn bilinearCubeUV(envMap, sampleDirection, mipInt);\n}\n\nvoid main() {\n\tvec3 axis = latitudinal ? poleAxis : cross(poleAxis, vOutputDirection);\n\tif (all(equal(axis, vec3(0.0))))\n\t\taxis = vec3(vOutputDirection.z, 0.0, - vOutputDirection.x);\n\taxis = normalize(axis);\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb += weights[0] * getSample(0.0, axis);\n\tfor (int i = 1; i < n; i++) {\n\t\tif (i >= samples)\n\t\t\tbreak;\n\t\tfloat theta = dTheta * float(i);\n\t\tgl_FragColor.rgb += weights[i] * getSample(-1.0 * theta, axis);\n\t\tgl_FragColor.rgb += weights[i] * getSample(theta, axis);\n\t}\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:_,depthTest:!1,depthWrite:!1})).type="SphericalGaussianBlur",np),up=null,lp=null,{_lodPlanes:hp,_sizeLods:dp,_sigmas:pp}=function(){for(var t=[],e=[],n=[],r=8,i=0;i<ap;i++){var a=Math.pow(2,r);e.push(a);var o=1/a;i>4?o=ip[i-8+4-1]:0==i&&(o=0),n.push(o);for(var s=1/(a-1),c=-s/2,u=1+s/2,l=[c,c,u,c,u,u,c,c,u,u,c,u],h=new Float32Array(108),d=new Float32Array(72),p=new Float32Array(36),f=0;f<6;f++){var m=f%3*2/3-1,v=f>2?0:-1,g=[m,v,0,m+2/3,v,0,m+2/3,v+1,0,m,v,0,m+2/3,v+1,0,m,v+1,0];h.set(g,18*f),d.set(l,12*f);var y=[f,f,f,f,f,f];p.set(y,6*f)}var x=new ki;x.setAttribute("position",new Mi(h,3)),x.setAttribute("uv",new Mi(d,2)),x.setAttribute("faceIndex",new Mi(p,1)),t.push(x),r>4&&r--}return{_lodPlanes:t,_sizeLods:e,_sigmas:n}}(),fp=null,mp=null,vp=null,gp=(1+Math.sqrt(5))/2,yp=1/gp,xp=[new $n(1,1,1),new $n(-1,1,1),new $n(1,1,-1),new $n(-1,1,-1),new $n(0,gp,yp),new $n(0,gp,-yp),new $n(yp,0,gp),new $n(-yp,0,gp),new $n(gp,yp,0),new $n(-gp,yp,0)];function bp(t){mp=t,Mp(cp)}function _p(t){var e={magFilter:gt,minFilter:gt,generateMipmaps:!1,type:t?t.type:At,format:t?t.format:Vt,encoding:t?t.encoding:tn,depthBuffer:!1,stencilBuffer:!1},n=Sp(e);return n.depthBuffer=!t,fp=Sp(e),n}function wp(t){fp.dispose(),mp.setRenderTarget(vp),t.scissorTest=!1,t.setSize(t.width,t.height)}function Mp(t){var e=new Sr;e.add(new oa(hp[0],t)),mp.compile(e,sp)}function Sp(t){var e=new qn(3*rp,3*rp,t);return e.texture.mapping=dt,e.texture.name="PMREM.cubeUv",e.scissorTest=!0,e}function Ep(t,e,n,r,i){t.viewport.set(e,n,r,i),t.scissor.set(e,n,r,i)}function Tp(t){var e=mp.autoClear;mp.autoClear=!1;for(var n=1;n<ap;n++){Ap(t,n-1,n,Math.sqrt(pp[n]*pp[n]-pp[n-1]*pp[n-1]),xp[(n-1)%xp.length])}mp.autoClear=e}function Ap(t,e,n,r,i){Lp(t,fp,e,n,r,"latitudinal",i),Lp(fp,t,n,n,r,"longitudinal",i)}function Lp(t,e,n,r,i,a,o){"latitudinal"!==a&&"longitudinal"!==a&&console.error("blur direction must be either latitudinal or longitudinal!");var s=new Sr;s.add(new oa(hp[r],cp));var c=cp.uniforms,u=dp[n]-1,l=isFinite(i)?Math.PI/(2*u):2*Math.PI/39,h=i/l,d=isFinite(i)?1+Math.floor(3*h):20;d>20&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${d} samples when the maximum is set to 20`);for(var p=[],f=0,m=0;m<20;++m){var v=m/h,g=Math.exp(-v*v/2);p.push(g),0==m?f+=g:m<d&&(f+=2*g)}for(m=0;m<p.length;m++)p[m]=p[m]/f;c.envMap.value=t.texture,c.samples.value=d,c.weights.value=p,c.latitudinal.value="latitudinal"===a,o&&(c.poleAxis.value=o),c.dTheta.value=l,c.mipInt.value=8-n,c.inputEncoding.value=op[t.texture.encoding],c.outputEncoding.value=op[t.texture.encoding];var y=dp[r];Ep(e,v=3*Math.max(0,rp-2*y),(0===r?0:2*rp)+2*y*(r>4?r-8+4:0),3*y,2*y),mp.setRenderTarget(e),mp.render(s,sp)}function Rp(){var t=new Yu({uniforms:{envMap:{value:null},texelSize:{value:new Gn(1,1)},inputEncoding:{value:op[$e]},outputEncoding:{value:op[$e]}},vertexShader:Cp(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform sampler2D envMap;\nuniform vec2 texelSize;\n\n${Op()}\n\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tvec3 outputDirection = normalize(vOutputDirection);\n\tvec2 uv;\n\tuv.y = asin(clamp(outputDirection.y, -1.0, 1.0)) * RECIPROCAL_PI + 0.5;\n\tuv.x = atan(outputDirection.z, outputDirection.x) * RECIPROCAL_PI2 + 0.5;\n\tvec2 f = fract(uv / texelSize - 0.5);\n\tuv -= f * texelSize;\n\tvec3 tl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x += texelSize.x;\n\tvec3 tr = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.y += texelSize.y;\n\tvec3 br = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tuv.x -= texelSize.x;\n\tvec3 bl = envMapTexelToLinear(texture2D(envMap, uv)).rgb;\n\tvec3 tm = mix(tl, tr, f.x);\n\tvec3 bm = mix(bl, br, f.x);\n\tgl_FragColor.rgb = mix(tm, bm, f.y);\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:_,depthTest:!1,depthWrite:!1});return t.type="EquirectangularToCubeUV",t}function Pp(){var t=new Yu({uniforms:{envMap:{value:null},inputEncoding:{value:op[$e]},outputEncoding:{value:op[$e]}},vertexShader:Cp(),fragmentShader:`\nprecision mediump float;\nprecision mediump int;\nvarying vec3 vOutputDirection;\nuniform samplerCube envMap;\n\n${Op()}\n\nvoid main() {\n\tgl_FragColor = vec4(0.0);\n\tgl_FragColor.rgb = envMapTexelToLinear(textureCube(envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ))).rgb;\n\tgl_FragColor = linearToOutputTexel(gl_FragColor);\n}\n\t\t`,blending:_,depthTest:!1,depthWrite:!1});return t.type="CubemapToCubeUV",t}function Cp(){return"\nprecision mediump float;\nprecision mediump int;\nattribute vec3 position;\nattribute vec2 uv;\nattribute float faceIndex;\nvarying vec3 vOutputDirection;\nvec3 getDirection(vec2 uv, float face) {\n\tuv = 2.0 * uv - 1.0;\n\tvec3 direction = vec3(uv, 1.0);\n\tif (face == 0.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 1.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.z *= -1.0;\n\t} else if (face == 3.0) {\n\t\tdirection = direction.zyx;\n\t\tdirection.x *= -1.0;\n\t} else if (face == 4.0) {\n\t\tdirection = direction.xzy;\n\t\tdirection.y *= -1.0;\n\t} else if (face == 5.0) {\n\t\tdirection.xz *= -1.0;\n\t}\n\treturn direction;\n}\nvoid main() {\n\tvOutputDirection = getDirection(uv, faceIndex);\n\tgl_Position = vec4( position, 1.0 );\n}\n\t"}function Op(){return"\nuniform int inputEncoding;\nuniform int outputEncoding;\n\n#include <encodings_pars_fragment>\n\nvec4 inputTexelToLinear(vec4 value){\n\tif(inputEncoding == 0){\n\t\treturn value;\n\t}else if(inputEncoding == 1){\n\t\treturn sRGBToLinear(value);\n\t}else if(inputEncoding == 2){\n\t\treturn RGBEToLinear(value);\n\t}else if(inputEncoding == 3){\n\t\treturn RGBMToLinear(value, 7.0);\n\t}else if(inputEncoding == 4){\n\t\treturn RGBMToLinear(value, 16.0);\n\t}else if(inputEncoding == 5){\n\t\treturn RGBDToLinear(value, 256.0);\n\t}else{\n\t\treturn GammaToLinear(value, 2.2);\n\t}\n}\n\nvec4 linearToOutputTexel(vec4 value){\n\tif(outputEncoding == 0){\n\t\treturn value;\n\t}else if(outputEncoding == 1){\n\t\treturn LinearTosRGB(value);\n\t}else if(outputEncoding == 2){\n\t\treturn LinearToRGBE(value);\n\t}else if(outputEncoding == 3){\n\t\treturn LinearToRGBM(value, 7.0);\n\t}else if(outputEncoding == 4){\n\t\treturn LinearToRGBM(value, 16.0);\n\t}else if(outputEncoding == 5){\n\t\treturn LinearToRGBD(value, 256.0);\n\t}else{\n\t\treturn LinearToGamma(value, 2.2);\n\t}\n}\n\nvec4 envMapTexelToLinear(vec4 color) {\n\treturn inputTexelToLinear(color);\n}\n\t"}function Dp(t,e,n,r,i,a,o){return console.warn("THREE.Face4 has been removed. A THREE.Face3 will be created instead."),new yi(t,e,n,i,a,o)}bp.prototype={constructor:bp,fromScene:function(t,e=0,n=.1,r=100){vp=mp.getRenderTarget();var i=_p();return function(t,e,n,r){var i=new _a(90,1,e,n),a=[1,1,1,1,-1,1],o=[1,1,-1,-1,-1,1],s=mp.outputEncoding,c=mp.toneMapping,u=mp.toneMappingExposure,l=mp.getClearColor(),h=mp.getClearAlpha();mp.toneMapping=et,mp.toneMappingExposure=1,mp.outputEncoding=$e,t.scale.z*=-1;var d=t.background;if(d&&d.isColor){d.convertSRGBToLinear();var p=Math.max(d.r,d.g,d.b),f=Math.min(Math.max(Math.ceil(Math.log2(p)),-128),127);d=d.multiplyScalar(Math.pow(2,-f));var m=(f+128)/255;mp.setClearColor(d,m),t.background=null}for(var v=0;v<6;v++){var g=v%3;0==g?(i.up.set(0,a[v],0),i.lookAt(o[v],0,0)):1==g?(i.up.set(0,0,a[v]),i.lookAt(0,o[v],0)):(i.up.set(0,a[v],0),i.lookAt(0,0,o[v])),Ep(r,g*rp,v>2?rp:0,rp,rp),mp.setRenderTarget(r),mp.render(t,i)}mp.toneMapping=c,mp.toneMappingExposure=u,mp.outputEncoding=s,mp.setClearColor(l,h),t.scale.z*=-1}(t,n,r,i),e>0&&Ap(i,0,0,e),Tp(i),wp(i),i},fromEquirectangular:function(t){return t.magFilter=gt,t.minFilter=gt,t.generateMipmaps=!1,this.fromCubemap(t)},fromCubemap:function(t){vp=mp.getRenderTarget();var e=_p(t);return function(t,e){var n=new Sr;t.isCubeTexture?null==lp&&(lp=Pp()):null==up&&(up=Rp());var r=t.isCubeTexture?lp:up;n.add(new oa(hp[0],r));var i=r.uniforms;i.envMap.value=t,t.isCubeTexture||i.texelSize.value.set(1/t.image.width,1/t.image.height);i.inputEncoding.value=op[t.encoding],i.outputEncoding.value=op[t.encoding],Ep(e,0,0,3*rp,2*rp),mp.setRenderTarget(e),mp.render(n,sp)}(t,e),Tp(e),wp(e),e},compileCubemapShader:function(){null==lp&&Mp(lp=Pp())},compileEquirectangularShader:function(){null==up&&Mp(up=Rp())},dispose:function(){cp.dispose(),null!=lp&&lp.dispose(),null!=up&&up.dispose();for(var t=0;t<hp.length;t++)hp[t].dispose()}};var Ip=0,Np=1,Bp=0,zp=1,Fp=2;function Up(t){return console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead."),t}function Gp(t){return void 0===t&&(t=[]),console.warn("THREE.MultiMaterial has been removed. Use an Array instead."),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function Hp(t,e){return console.warn("THREE.PointCloud has been renamed to THREE.Points."),new Lc(t,e)}function kp(t){return console.warn("THREE.Particle has been renamed to THREE.Sprite."),new $s(t)}function jp(t,e){return console.warn("THREE.ParticleSystem has been renamed to THREE.Points."),new Lc(t,e)}function Vp(t){return console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial."),new Mc(t)}function Wp(t){return console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial."),new Mc(t)}function qp(t){return console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial."),new Mc(t)}function Xp(t,e,n){return console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead."),new $n(t,e,n)}function Yp(t,e){return console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead."),new Mi(t,e).setUsage(An)}function Zp(t,e){return console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead."),new Si(t,e)}function Jp(t,e){return console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead."),new Ei(t,e)}function $p(t,e){return console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead."),new Ti(t,e)}function Qp(t,e){return console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead."),new Ai(t,e)}function Kp(t,e){return console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead."),new Li(t,e)}function tf(t,e){return console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead."),new Ri(t,e)}function ef(t,e){return console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead."),new Pi(t,e)}function nf(t,e){return console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead."),new Ci(t,e)}function rf(t,e){return console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead."),new Oi(t,e)}function af(t){console.warn("THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),Ul.call(this,t),this.type="catmullrom",this.closed=!0}function of(t){console.warn("THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead."),Ul.call(this,t),this.type="catmullrom"}function sf(t){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),Ul.call(this,t),this.type="catmullrom"}function cf(t){return console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper."),new Qd(t)}function uf(t,e){return console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead."),new Wd(t,e)}function lf(t,e){return console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead."),new _c(new Uu(t.geometry),new dc({color:void 0!==e?e:16777215}))}function hf(t,e){return console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead."),new _c(new Ic(t.geometry),new dc({color:void 0!==e?e:16777215}))}function df(t){return console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader."),new Sl(t)}function pf(t){return console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader."),new Al(t)}function ff(t,e,n){return console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options )."),new Ma(t,n)}Cl.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(Cl.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Object.assign($l.prototype,{createPointsGeometry:function(t){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getPoints(t);return this.createGeometry(e)},createSpacedPointsGeometry:function(t){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");var e=this.getSpacedPoints(t);return this.createGeometry(e)},createGeometry:function(t){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");for(var e=new pa,n=0,r=t.length;n<r;n++){var i=t[n];e.vertices.push(new $n(i.x,i.y,i.z||0))}return e}}),Object.assign(Ql.prototype,{fromPoints:function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)}}),af.prototype=Object.create(Ul.prototype),of.prototype=Object.create(Ul.prototype),sf.prototype=Object.create(Ul.prototype),Object.assign(sf.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}}),Id.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},Ld.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Object.assign(wl.prototype,{extractUrlBase:function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),ph.extractUrlBase(t)}}),wl.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Object.assign(yh.prototype,{setTexturePath:function(t){return console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath()."),this.setResourcePath(t)}}),Object.assign(yd.prototype,{center:function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},size:function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)}}),Object.assign(Fr.prototype,{center:function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionSphere:function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},size:function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)}}),Aa.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},_d.prototype.center=function(t){return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."),this.getCenter(t)},Object.assign(Un,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(t){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Un.floorPowerOfTwo(t)},nextPowerOfTwo:function(t){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Un.ceilPowerOfTwo(t)}}),Object.assign(Hn.prototype,{flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},multiplyVector3:function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}}),Object.assign(ar.prototype,{extractPosition:function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},flattenToArrayOffset:function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new $n).setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector4:function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},crossVector:function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(t,e,n,r,i,a){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,r,n,i,a)}}),Kr.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},Yn.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},Object.assign(Zr.prototype,{isIntersectionBox:function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},isIntersectionPlane:function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},isIntersectionSphere:function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)}}),Object.assign(li.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},midpoint:function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},normal:function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},plane:function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)}}),Object.assign(li,{barycoordFromPoint:function(t,e,n,r,i){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),li.getBarycoord(t,e,n,r,i)},normal:function(t,e,n,r){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),li.getNormal(t,e,n,r)}}),Object.assign(Kl.prototype,{extractAllPoints:function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},extrude:function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new Su(this,t)},makeGeometry:function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Bu(this,t)}}),Object.assign(Gn.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign($n.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},getScaleFromMatrix:function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},getColumnFromMatrix:function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},applyProjection:function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},fromAttribute:function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},distanceToManhattan:function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(Wn.prototype,{fromAttribute:function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}}),Object.assign(pa.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(t){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.assign(Mr.prototype,{getChildByName:function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.defineProperties(Mr.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),Object.assign(oa.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}),Object.defineProperties(oa.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Ye},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Object.defineProperties(ec.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}}),Object.defineProperty(ac.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}}),nc.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},Object.defineProperty(Cl.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(t){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=t}}),_a.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(th.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Mi.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===An},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(An)}}}),Object.assign(Mi.prototype,{setDynamic:function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?An:Tn),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(ki.prototype,{addIndex:function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},addAttribute:function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new Mi(arguments[1],arguments[2])))},addDrawCall:function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},applyMatrix:function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)}}),Object.defineProperties(ki.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),Object.defineProperties(dd.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(t){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=t}}}),Object.defineProperties(Is.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===An},set:function(t){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(t)}}}),Object.assign(Is.prototype,{setDynamic:function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?An:Tn),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}}),Object.assign(Eu.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}}),Object.defineProperties(ld.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}}),Object.defineProperties(bi.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new fi}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=t===x}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}}}),Object.defineProperties($u.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}}),Object.defineProperties(xa.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),Object.assign(Cs.prototype,{clearTarget:function(t,e,n,r){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,r)},animate:function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}}),Object.defineProperties(Cs.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?Qe:$e}}}),Object.defineProperties(Ss.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(qn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),Object.defineProperties(jh.prototype,{load:{value:function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");var e=this;return(new Rh).load(t,(function(t){e.setBuffer(t)})),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}}),Zh.prototype.getData=function(){return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."),this.getFrequencyData()},wa.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)};var mf={merge:function(t,e,n){var r;console.warn("THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead."),e.isMesh&&(e.matrixAutoUpdate&&e.updateMatrix(),r=e.matrix,e=e.geometry),t.merge(e,r,n)},center:function(t){return console.warn("THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead."),t.center()}};function vf(){console.error("THREE.CanvasRenderer has been removed")}function gf(){console.error("THREE.JSONLoader has been removed.")}kn.crossOrigin=void 0,kn.loadTexture=function(t,e,n,r){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");var i=new Pl;i.setCrossOrigin(this.crossOrigin);var a=i.load(t,n,void 0,r);return e&&(a.mapping=e),a},kn.loadTextureCube=function(t,e,n,r){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");var i=new Rl;i.setCrossOrigin(this.crossOrigin);var a=i.load(t,n,void 0,r);return e&&(a.mapping=e),a},kn.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},kn.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};var yf={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function xf(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:r}}))},function(t,e,n){var r=n(0),i=n(36),a=n(7),o=n(40),s=n(41),c=n(65),u=i("wks"),l=r.Symbol,h=c?l:l&&l.withoutSetter||o;t.exports=function(t){return a(u,t)||(s&&a(l,t)?u[t]=l[t]:u[t]=h("Symbol."+t)),u[t]}},function(t,e,n){"use strict";var r=n(19),i=n(64),a=n(17),o=n(30),s=n(72),c=o.set,u=o.getterFor("Array Iterator");t.exports=s(Array,"Array",(function(t,e){c(this,{type:"Array Iterator",target:r(t),index:0,kind:e})}),(function(){var t=u(this),e=t.target,n=t.kind,r=t.index++;return!e||r>=e.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values"),a.Arguments=a.Array,i("keys"),i("values"),i("entries")},function(t,e,n){var r=n(9);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,n){var r=n(0),i=n(99),a=n(3),o=n(8),s=n(2),c=s("iterator"),u=s("toStringTag"),l=a.values;for(var h in i){var d=r[h],p=d&&d.prototype;if(p){if(p[c]!==l)try{o(p,c,l)}catch(t){p[c]=l}if(p[u]||o(p,u,h),i[h])for(var f in a)if(p[f]!==a[f])try{o(p,f,a[f])}catch(t){p[f]=a[f]}}}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(11),i=n(12),a=n(26);t.exports=r?function(t,e,n){return i.f(t,e,a(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e,n){"use strict";n.r(e),n.d(e,"CSS3DObject",(function(){return i})),n.d(e,"CSS3DSprite",(function(){return a})),n.d(e,"CSS3DRenderer",(function(){return o}));n(3),n(102),n(104),n(5);var r=n(1),i=function(t){r.Object3D.call(this),this.element=t,this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.custom={animation:void 0},this.addEventListener("removed",(function(){this.traverse((function(t){t.element instanceof Element&&null!==t.element.parentNode&&t.element.parentNode.removeChild(t.element)}))}))};i.prototype=Object.create(r.Object3D.prototype),i.prototype.constructor=i;var a=function(t){i.call(this,t)};a.prototype=Object.create(i.prototype),a.prototype.constructor=a;var o=function(){var t,e,n,o,s=this,c=new r.Matrix4,u={camera:{fov:0,style:""},objects:new WeakMap},l=document.createElement("div");l.style.overflow="hidden",this.domElement=l;var h=document.createElement("div");h.style.WebkitTransformStyle="preserve-3d",h.style.transformStyle="preserve-3d",h.style.pointerEvents="none",l.appendChild(h);var d=/Trident/i.test(navigator.userAgent);function p(t){return Math.abs(t)<1e-10?0:t}function f(t){var e=t.elements;return"matrix3d("+p(e[0])+","+p(-e[1])+","+p(e[2])+","+p(e[3])+","+p(e[4])+","+p(-e[5])+","+p(e[6])+","+p(e[7])+","+p(e[8])+","+p(-e[9])+","+p(e[10])+","+p(e[11])+","+p(e[12])+","+p(-e[13])+","+p(e[14])+","+p(e[15])+")"}function m(t,e){var r=t.elements,i="matrix3d("+p(r[0])+","+p(r[1])+","+p(r[2])+","+p(r[3])+","+p(-r[4])+","+p(-r[5])+","+p(-r[6])+","+p(-r[7])+","+p(r[8])+","+p(r[9])+","+p(r[10])+","+p(r[11])+","+p(r[12])+","+p(r[13])+","+p(r[14])+","+p(r[15])+")";return d?"translate(-50%,-50%)translate("+n+"px,"+o+"px)"+e+i:"translate(-50%,-50%)"+i}this.getSize=function(){return{width:t,height:e}},this.setSize=function(r,i){n=(t=r)/2,o=(e=i)/2,l.style.width=r+"px",l.style.height=i+"px",h.style.width=r+"px",h.style.height=i+"px"};var v,g,y=(v=new r.Vector3,g=new r.Vector3,function(t,e){return v.setFromMatrixPosition(t.matrixWorld),g.setFromMatrixPosition(e.matrixWorld),v.distanceToSquared(g)});function x(t){for(var e=function(t){var e=[];return t.traverse((function(t){t instanceof i&&e.push(t)})),e}(t).sort((function(t,e){return u.objects.get(t).distanceToCameraSquared-u.objects.get(e).distanceToCameraSquared})),n=e.length,r=0,a=e.length;r<a;r++)e[r].element.style.zIndex=n-r}this.render=function(t,e){var r=e.projectionMatrix.elements[5]*o;if(u.camera.fov!==r&&(e.isPerspectiveCamera?(l.style.WebkitPerspective=r+"px",l.style.perspective=r+"px"):(l.style.WebkitPerspective="",l.style.perspective=""),u.camera.fov=r),!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),e.isOrthographicCamera)var v=-(e.right+e.left)/2,g=(e.top+e.bottom)/2;var b=e.isOrthographicCamera?"scale("+r+")translate("+p(v)+"px,"+p(g)+"px)"+f(e.matrixWorldInverse):"translateZ("+r+"px)"+f(e.matrixWorldInverse),_=b+"translate("+n+"px,"+o+"px)";u.camera.style===_||d||(h.style.WebkitTransform=_,h.style.transform=_,u.camera.style=_),function t(e,n,r,o){if(e instanceof i){var l;e.onBeforeRender(s,n,r),e instanceof a?(c.copy(r.matrixWorldInverse),c.transpose(),c.copyPosition(e.matrixWorld),c.scale(e.scale),c.elements[3]=0,c.elements[7]=0,c.elements[11]=0,c.elements[15]=1,l=m(c,o)):l=m(e.matrixWorld,o);var p=e.element,f=u.objects.get(e);if(void 0===f||f.style!==l){p.style.WebkitTransform=l,p.style.transform=l;var v={style:l};d&&(v.distanceToCameraSquared=y(r,e)),u.objects.set(e,v)}p.style.display=e.visible?"":"none",p.parentNode!==h&&h.appendChild(p),e.onAfterRender(s,n,r)}for(var g=0,x=e.children.length;g<x;g++)t(e.children[g],n,r,o)}(t,t,e,b),d&&x(t)}}},function(t,e,n){var r=n(6);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(t,e,n){var r=n(11),i=n(38),a=n(4),o=n(39),s=Object.defineProperty;e.f=r?s:function(t,e,n){if(a(t),e=o(e,!0),a(n),i)try{return s(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(t[e]=n.value),t}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e){t.exports=!1},function(t,e,n){var r=n(70),i=n(0),a=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?a(r[t])||a(i[t]):r[t]&&r[t][e]||i[t]&&i[t][e]}},function(t,e){t.exports={}},function(t,e,n){"use strict";var r,i,a,o,s=n(20),c=n(15),u=n(0),l=n(16),h=n(82),d=n(21),p=n(83),f=n(33),m=n(84),v=n(9),g=n(13),y=n(85),x=n(14),b=n(31),_=n(86),w=n(92),M=n(93),S=n(52).set,E=n(94),T=n(95),A=n(96),L=n(55),R=n(97),P=n(30),C=n(47),O=n(2),D=n(98),I=O("species"),N="Promise",B=P.get,z=P.set,F=P.getterFor(N),U=h,G=u.TypeError,H=u.document,k=u.process,j=l("fetch"),V=L.f,W=V,q="process"==x(k),X=!!(H&&H.createEvent&&u.dispatchEvent),Y=C(N,(function(){if(!(b(U)!==String(U))){if(66===D)return!0;if(!q&&"function"!=typeof PromiseRejectionEvent)return!0}if(c&&!U.prototype.finally)return!0;if(D>=51&&/native code/.test(U))return!1;var t=U.resolve(1),e=function(t){t((function(){}),(function(){}))};return(t.constructor={})[I]=e,!(t.then((function(){}))instanceof e)})),Z=Y||!w((function(t){U.all(t).catch((function(){}))})),J=function(t){var e;return!(!v(t)||"function"!=typeof(e=t.then))&&e},$=function(t,e,n){if(!e.notified){e.notified=!0;var r=e.reactions;E((function(){for(var i=e.value,a=1==e.state,o=0;r.length>o;){var s,c,u,l=r[o++],h=a?l.ok:l.fail,d=l.resolve,p=l.reject,f=l.domain;try{h?(a||(2===e.rejection&&et(t,e),e.rejection=1),!0===h?s=i:(f&&f.enter(),s=h(i),f&&(f.exit(),u=!0)),s===l.promise?p(G("Promise-chain cycle")):(c=J(s))?c.call(s,d,p):d(s)):p(i)}catch(t){f&&!u&&f.exit(),p(t)}}e.reactions=[],e.notified=!1,n&&!e.rejection&&K(t,e)}))}},Q=function(t,e,n){var r,i;X?((r=H.createEvent("Event")).promise=e,r.reason=n,r.initEvent(t,!1,!0),u.dispatchEvent(r)):r={promise:e,reason:n},(i=u["on"+t])?i(r):"unhandledrejection"===t&&A("Unhandled promise rejection",n)},K=function(t,e){S.call(u,(function(){var n,r=e.value;if(tt(e)&&(n=R((function(){q?k.emit("unhandledRejection",r,t):Q("unhandledrejection",t,r)})),e.rejection=q||tt(e)?2:1,n.error))throw n.value}))},tt=function(t){return 1!==t.rejection&&!t.parent},et=function(t,e){S.call(u,(function(){q?k.emit("rejectionHandled",t):Q("rejectionhandled",t,e.value)}))},nt=function(t,e,n,r){return function(i){t(e,n,i,r)}},rt=function(t,e,n,r){e.done||(e.done=!0,r&&(e=r),e.value=n,e.state=2,$(t,e,!0))},it=function(t,e,n,r){if(!e.done){e.done=!0,r&&(e=r);try{if(t===n)throw G("Promise can't be resolved itself");var i=J(n);i?E((function(){var r={done:!1};try{i.call(n,nt(it,t,r,e),nt(rt,t,r,e))}catch(n){rt(t,r,n,e)}})):(e.value=n,e.state=1,$(t,e,!1))}catch(n){rt(t,{done:!1},n,e)}}};Y&&(U=function(t){y(this,U,N),g(t),r.call(this);var e=B(this);try{t(nt(it,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(r=function(t){z(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(U.prototype,{then:function(t,e){var n=F(this),r=V(M(this,U));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=q?k.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&$(this,n,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r,e=B(t);this.promise=t,this.resolve=nt(it,t,e),this.reject=nt(rt,t,e)},L.f=V=function(t){return t===U||t===a?new i(t):W(t)},c||"function"!=typeof h||(o=h.prototype.then,d(h.prototype,"then",(function(t,e){var n=this;return new U((function(t,e){o.call(n,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof j&&s({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return T(U,j.apply(u,arguments))}}))),s({global:!0,wrap:!0,forced:Y},{Promise:U}),f(U,N,!1,!0),m(N),a=l(N),s({target:N,stat:!0,forced:Y},{reject:function(t){var e=V(this);return e.reject.call(void 0,t),e.promise}}),s({target:N,stat:!0,forced:c||Y},{resolve:function(t){return T(c&&this===a?U:this,t)}}),s({target:N,stat:!0,forced:Z},{all:function(t){var e=this,n=V(e),r=n.resolve,i=n.reject,a=R((function(){var n=g(e.resolve),a=[],o=0,s=1;_(t,(function(t){var c=o++,u=!1;a.push(void 0),s++,n.call(e,t).then((function(t){u||(u=!0,a[c]=t,--s||r(a))}),i)})),--s||r(a)}));return a.error&&i(a.value),n.promise},race:function(t){var e=this,n=V(e),r=n.reject,i=R((function(){var i=g(e.resolve);_(t,(function(t){i.call(e,t).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},function(t,e,n){var r=n(63),i=n(35);t.exports=function(t){return r(i(t))}},function(t,e,n){var r=n(0),i=n(32).f,a=n(8),o=n(21),s=n(24),c=n(74),u=n(47);t.exports=function(t,e){var n,l,h,d,p,f=t.target,m=t.global,v=t.stat;if(n=m?r:v?r[f]||s(f,{}):(r[f]||{}).prototype)for(l in e){if(d=e[l],h=t.noTargetGet?(p=i(n,l))&&p.value:n[l],!u(m?l:f+(v?".":"#")+l,t.forced)&&void 0!==h){if(typeof d==typeof h)continue;c(d,h)}(t.sham||h&&h.sham)&&a(d,"sham",!0),o(n,l,d,t)}}},function(t,e,n){var r=n(0),i=n(8),a=n(7),o=n(24),s=n(31),c=n(30),u=c.get,l=c.enforce,h=String(String).split("String");(t.exports=function(t,e,n,s){var c=!!s&&!!s.unsafe,u=!!s&&!!s.enumerable,d=!!s&&!!s.noTargetGet;"function"==typeof n&&("string"!=typeof e||a(n,"name")||i(n,"name",e),l(n).source=h.join("string"==typeof e?e:"")),t!==r?(c?!d&&t[e]&&(u=!0):delete t[e],u?t[e]=n:i(t,e,n)):u?t[e]=n:o(e,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&u(this).source||s(this)}))},function(t,e,n){"use strict";(function(t,r){var i,a=n(57);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:r;var o=Object(a.a)(i);e.a=o}).call(this,n(23),n(108)(t))},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(0),i=n(8);t.exports=function(t,e){try{i(r,t,e)}catch(n){r[t]=e}return e}},function(t,e,n){var r=n(0),i=n(9),a=r.document,o=i(a)&&i(a.createElement);t.exports=function(t){return o?a.createElement(t):{}}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports={}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,n){var r=n(36),i=n(40),a=r("keys");t.exports=function(t){return a[t]||(a[t]=i(t))}},function(t,e,n){var r,i,a,o=n(71),s=n(0),c=n(9),u=n(8),l=n(7),h=n(29),d=n(27),p=s.WeakMap;if(o){var f=new p,m=f.get,v=f.has,g=f.set;r=function(t,e){return g.call(f,t,e),e},i=function(t){return m.call(f,t)||{}},a=function(t){return v.call(f,t)}}else{var y=h("state");d[y]=!0,r=function(t,e){return u(t,y,e),e},i=function(t){return l(t,y)?t[y]:{}},a=function(t){return l(t,y)}}t.exports={set:r,get:i,has:a,enforce:function(t){return a(t)?i(t):r(t,{})},getterFor:function(t){return function(e){var n;if(!c(e)||(n=i(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return n}}}},function(t,e,n){var r=n(37),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return i.call(t)}),t.exports=r.inspectSource},function(t,e,n){var r=n(11),i=n(73),a=n(26),o=n(19),s=n(39),c=n(7),u=n(38),l=Object.getOwnPropertyDescriptor;e.f=r?l:function(t,e){if(t=o(t),e=s(e,!0),u)try{return l(t,e)}catch(t){}if(c(t,e))return a(!i.f.call(t,e),t[e])}},function(t,e,n){var r=n(12).f,i=n(7),a=n(2)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,a)&&r(t,a,{configurable:!0,value:e})}},function(t,e,n){var r,i,a;
/*!
  * $script.js JS loader & dependency manager
  * https://github.com/ded/script.js
  * (c) Dustin Diaz 2014 | License MIT
  */a=function(){var t,e,n=document,r=n.getElementsByTagName("head")[0],i={},a={},o={},s={};function c(t,e){for(var n=0,r=t.length;n<r;++n)if(!e(t[n]))return!1;return 1}function u(t,e){c(t,(function(t){return e(t),1}))}function l(e,n,r){e=e.push?e:[e];var d=n&&n.call,p=d?n:r,f=d?e.join(""):n,m=e.length;function v(t){return t.call?t():i[t]}function g(){if(!--m)for(var t in i[f]=1,p&&p(),o)c(t.split("|"),v)&&!u(o[t],v)&&(o[t]=[])}return setTimeout((function(){u(e,(function e(n,r){return null===n?g():(r||/^https?:\/\//.test(n)||!t||(n=-1===n.indexOf(".js")?t+n+".js":t+n),s[n]?(f&&(a[f]=1),2==s[n]?g():setTimeout((function(){e(n,!0)}),0)):(s[n]=1,f&&(a[f]=1),void h(n,g)))}))}),0),l}function h(t,i){var a,o=n.createElement("script");o.onload=o.onerror=o.onreadystatechange=function(){o.readyState&&!/^c|loade/.test(o.readyState)||a||(o.onload=o.onreadystatechange=null,a=1,s[t]=2,i())},o.async=1,o.src=e?t+(-1===t.indexOf("?")?"?":"&")+e:t,r.insertBefore(o,r.lastChild)}return l.get=h,l.order=function(t,e,n){!function r(i){i=t.shift(),t.length?l(i,r):l(i,e,n)}()},l.path=function(e){t=e},l.urlArgs=function(t){e=t},l.ready=function(t,e,n){t=t.push?t:[t];var r,a=[];return!u(t,(function(t){i[t]||a.push(t)}))&&c(t,(function(t){return i[t]}))?e():(r=t.join("|"),o[r]=o[r]||[],o[r].push(e),n&&n(a)),l},l.done=function(t){l([null],t)},l},t.exports?t.exports=a():void 0===(i="function"==typeof(r=a)?r.call(e,n,e,t):r)||(t.exports=i)},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,n){var r=n(15),i=n(37);(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(t,e,n){var r=n(0),i=n(24),a=r["__core-js_shared__"]||i("__core-js_shared__",{});t.exports=a},function(t,e,n){var r=n(11),i=n(6),a=n(25);t.exports=!r&&!i((function(){return 7!=Object.defineProperty(a("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(9);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+r).toString(36)}},function(t,e,n){var r=n(6);t.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(t,e,n){var r,i=n(4),a=n(66),o=n(28),s=n(27),c=n(46),u=n(25),l=n(29),h=l("IE_PROTO"),d=function(){},p=function(t){return"<script>"+t+"<\/script>"},f=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,e;f=r?function(t){t.write(p("")),t.close();var e=t.parentWindow.Object;return t=null,e}(r):((e=u("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(t=e.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var n=o.length;n--;)delete f.prototype[o[n]];return f()};s[h]=!0,t.exports=Object.create||function(t,e){var n;return null!==t?(d.prototype=i(t),n=new d,d.prototype=null,n[h]=t):n=f(),void 0===e?n:a(n,e)}},function(t,e,n){var r=n(7),i=n(19),a=n(68).indexOf,o=n(27);t.exports=function(t,e){var n,s=i(t),c=0,u=[];for(n in s)!r(o,n)&&r(s,n)&&u.push(n);for(;e.length>c;)r(s,n=e[c++])&&(~a(u,n)||u.push(n));return u}},function(t,e,n){var r=n(45),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){var r=n(16);t.exports=r("document","documentElement")},function(t,e,n){var r=n(6),i=/#|\.prototype\./,a=function(t,e){var n=s[o(t)];return n==u||n!=c&&("function"==typeof e?r(e):!!e)},o=a.normalize=function(t){return String(t).replace(i,".").toLowerCase()},s=a.data={},c=a.NATIVE="N",u=a.POLYFILL="P";t.exports=a},function(t,e,n){"use strict";var r,i,a,o=n(49),s=n(8),c=n(7),u=n(2),l=n(15),h=u("iterator"),d=!1;[].keys&&("next"in(a=[].keys())?(i=o(o(a)))!==Object.prototype&&(r=i):d=!0),null==r&&(r={}),l||c(r,h)||s(r,h,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(t,e,n){var r=n(7),i=n(50),a=n(29),o=n(79),s=a("IE_PROTO"),c=Object.prototype;t.exports=o?Object.getPrototypeOf:function(t){return t=i(t),r(t,s)?t[s]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},function(t,e,n){var r=n(35);t.exports=function(t){return Object(r(t))}},function(t,e,n){var r=n(13);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 0:return function(){return t.call(e)};case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r,i,a,o=n(0),s=n(6),c=n(14),u=n(51),l=n(46),h=n(25),d=n(53),p=o.location,f=o.setImmediate,m=o.clearImmediate,v=o.process,g=o.MessageChannel,y=o.Dispatch,x=0,b={},_=function(t){if(b.hasOwnProperty(t)){var e=b[t];delete b[t],e()}},w=function(t){return function(){_(t)}},M=function(t){_(t.data)},S=function(t){o.postMessage(t+"",p.protocol+"//"+p.host)};f&&m||(f=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return b[++x]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},r(x),x},m=function(t){delete b[t]},"process"==c(v)?r=function(t){v.nextTick(w(t))}:y&&y.now?r=function(t){y.now(w(t))}:g&&!d?(a=(i=new g).port2,i.port1.onmessage=M,r=u(a.postMessage,a,1)):!o.addEventListener||"function"!=typeof postMessage||o.importScripts||s(S)||"file:"===p.protocol?r="onreadystatechange"in h("script")?function(t){l.appendChild(h("script")).onreadystatechange=function(){l.removeChild(this),_(t)}}:function(t){setTimeout(w(t),0)}:(r=S,o.addEventListener("message",M,!1))),t.exports={set:f,clear:m}},function(t,e,n){var r=n(54);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(t,e,n){var r=n(16);t.exports=r("navigator","userAgent")||""},function(t,e,n){"use strict";var r=n(13),i=function(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)};t.exports.f=function(t){return new i(t)}},function(t,e,n){"use strict";(function(t){var n=function(){if("undefined"!=typeof Map)return Map;function t(t,e){var n=-1;return t.some((function(t,r){return t[0]===e&&(n=r,!0)})),n}return function(){function e(){this.__entries__=[]}return Object.defineProperty(e.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var n=t(this.__entries__,e),r=this.__entries__[n];return r&&r[1]},e.prototype.set=function(e,n){var r=t(this.__entries__,e);~r?this.__entries__[r][1]=n:this.__entries__.push([e,n])},e.prototype.delete=function(e){var n=this.__entries__,r=t(n,e);~r&&n.splice(r,1)},e.prototype.has=function(e){return!!~t(this.__entries__,e)},e.prototype.clear=function(){this.__entries__.splice(0)},e.prototype.forEach=function(t,e){void 0===e&&(e=null);for(var n=0,r=this.__entries__;n<r.length;n++){var i=r[n];t.call(e,i[1],i[0])}},e}()}(),r="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,i=void 0!==t&&t.Math===Math?t:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),a="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(i):function(t){return setTimeout((function(){return t(Date.now())}),1e3/60)};var o=["top","right","bottom","left","width","height","size","weight"],s="undefined"!=typeof MutationObserver,c=function(){function t(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(t,e){var n=!1,r=!1,i=0;function o(){n&&(n=!1,t()),r&&c()}function s(){a(o)}function c(){var t=Date.now();if(n){if(t-i<2)return;r=!0}else n=!0,r=!1,setTimeout(s,e);i=t}return c}(this.refresh.bind(this),20)}return t.prototype.addObserver=function(t){~this.observers_.indexOf(t)||this.observers_.push(t),this.connected_||this.connect_()},t.prototype.removeObserver=function(t){var e=this.observers_,n=e.indexOf(t);~n&&e.splice(n,1),!e.length&&this.connected_&&this.disconnect_()},t.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},t.prototype.updateObservers_=function(){var t=this.observers_.filter((function(t){return t.gatherActive(),t.hasActive()}));return t.forEach((function(t){return t.broadcastActive()})),t.length>0},t.prototype.connect_=function(){r&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),s?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},t.prototype.disconnect_=function(){r&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},t.prototype.onTransitionEnd_=function(t){var e=t.propertyName,n=void 0===e?"":e;o.some((function(t){return!!~n.indexOf(t)}))&&this.refresh()},t.getInstance=function(){return this.instance_||(this.instance_=new t),this.instance_},t.instance_=null,t}(),u=function(t,e){for(var n=0,r=Object.keys(e);n<r.length;n++){var i=r[n];Object.defineProperty(t,i,{value:e[i],enumerable:!1,writable:!1,configurable:!0})}return t},l=function(t){return t&&t.ownerDocument&&t.ownerDocument.defaultView||i},h=g(0,0,0,0);function d(t){return parseFloat(t)||0}function p(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.reduce((function(e,n){return e+d(t["border-"+n+"-width"])}),0)}function f(t){var e=t.clientWidth,n=t.clientHeight;if(!e&&!n)return h;var r=l(t).getComputedStyle(t),i=function(t){for(var e={},n=0,r=["top","right","bottom","left"];n<r.length;n++){var i=r[n],a=t["padding-"+i];e[i]=d(a)}return e}(r),a=i.left+i.right,o=i.top+i.bottom,s=d(r.width),c=d(r.height);if("border-box"===r.boxSizing&&(Math.round(s+a)!==e&&(s-=p(r,"left","right")+a),Math.round(c+o)!==n&&(c-=p(r,"top","bottom")+o)),!function(t){return t===l(t).document.documentElement}(t)){var u=Math.round(s+a)-e,f=Math.round(c+o)-n;1!==Math.abs(u)&&(s-=u),1!==Math.abs(f)&&(c-=f)}return g(i.left,i.top,s,c)}var m="undefined"!=typeof SVGGraphicsElement?function(t){return t instanceof l(t).SVGGraphicsElement}:function(t){return t instanceof l(t).SVGElement&&"function"==typeof t.getBBox};function v(t){return r?m(t)?function(t){var e=t.getBBox();return g(0,0,e.width,e.height)}(t):f(t):h}function g(t,e,n,r){return{x:t,y:e,width:n,height:r}}var y=function(){function t(t){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=g(0,0,0,0),this.target=t}return t.prototype.isActive=function(){var t=v(this.target);return this.contentRect_=t,t.width!==this.broadcastWidth||t.height!==this.broadcastHeight},t.prototype.broadcastRect=function(){var t=this.contentRect_;return this.broadcastWidth=t.width,this.broadcastHeight=t.height,t},t}(),x=function(t,e){var n,r,i,a,o,s,c,l=(r=(n=e).x,i=n.y,a=n.width,o=n.height,s="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,c=Object.create(s.prototype),u(c,{x:r,y:i,width:a,height:o,top:i,right:r+a,bottom:o+i,left:r}),c);u(this,{target:t,contentRect:l})},b=function(){function t(t,e,r){if(this.activeObservations_=[],this.observations_=new n,"function"!=typeof t)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=t,this.controller_=e,this.callbackCtx_=r}return t.prototype.observe=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof l(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)||(e.set(t,new y(t)),this.controller_.addObserver(this),this.controller_.refresh())}},t.prototype.unobserve=function(t){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(t instanceof l(t).Element))throw new TypeError('parameter 1 is not of type "Element".');var e=this.observations_;e.has(t)&&(e.delete(t),e.size||this.controller_.removeObserver(this))}},t.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},t.prototype.gatherActive=function(){var t=this;this.clearActive(),this.observations_.forEach((function(e){e.isActive()&&t.activeObservations_.push(e)}))},t.prototype.broadcastActive=function(){if(this.hasActive()){var t=this.callbackCtx_,e=this.activeObservations_.map((function(t){return new x(t.target,t.broadcastRect())}));this.callback_.call(t,e,t),this.clearActive()}},t.prototype.clearActive=function(){this.activeObservations_.splice(0)},t.prototype.hasActive=function(){return this.activeObservations_.length>0},t}(),_="undefined"!=typeof WeakMap?new WeakMap:new n,w=function t(e){if(!(this instanceof t))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var n=c.getInstance(),r=new b(e,n,this);_.set(this,r)};["observe","unobserve","disconnect"].forEach((function(t){w.prototype[t]=function(){var e;return(e=_.get(this))[t].apply(e,arguments)}}));var M=void 0!==i.ResizeObserver?i.ResizeObserver:w;e.a=M}).call(this,n(23))},function(t,e,n){"use strict";function r(t){var e,n=t.Symbol;return"function"==typeof n?n.observable?e=n.observable:(e=n("observable"),n.observable=e):e="@@observable",e}n.d(e,"a",(function(){return r}))},,,,,function(t,e,n){t.exports=n(111)},function(t,e,n){var r=n(6),i=n(14),a="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==i(t)?a.call(t,""):Object(t)}:Object},function(t,e,n){var r=n(2),i=n(42),a=n(12),o=r("unscopables"),s=Array.prototype;null==s[o]&&a.f(s,o,{configurable:!0,value:i(null)}),t.exports=function(t){s[o][t]=!0}},function(t,e,n){var r=n(41);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(t,e,n){var r=n(11),i=n(12),a=n(4),o=n(67);t.exports=r?Object.defineProperties:function(t,e){a(t);for(var n,r=o(e),s=r.length,c=0;s>c;)i.f(t,n=r[c++],e[n]);return t}},function(t,e,n){var r=n(43),i=n(28);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){var r=n(19),i=n(44),a=n(69),o=function(t){return function(e,n,o){var s,c=r(e),u=i(c.length),l=a(o,u);if(t&&n!=n){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((t||l in c)&&c[l]===n)return t||l||0;return!t&&-1}};t.exports={includes:o(!0),indexOf:o(!1)}},function(t,e,n){var r=n(45),i=Math.max,a=Math.min;t.exports=function(t,e){var n=r(t);return n<0?i(n+e,0):a(n,e)}},function(t,e,n){var r=n(0);t.exports=r},function(t,e,n){var r=n(0),i=n(31),a=r.WeakMap;t.exports="function"==typeof a&&/native code/.test(i(a))},function(t,e,n){"use strict";var r=n(20),i=n(78),a=n(49),o=n(80),s=n(33),c=n(8),u=n(21),l=n(2),h=n(15),d=n(17),p=n(48),f=p.IteratorPrototype,m=p.BUGGY_SAFARI_ITERATORS,v=l("iterator"),g=function(){return this};t.exports=function(t,e,n,l,p,y,x){i(n,e,l);var b,_,w,M=function(t){if(t===p&&L)return L;if(!m&&t in T)return T[t];switch(t){case"keys":case"values":case"entries":return function(){return new n(this,t)}}return function(){return new n(this)}},S=e+" Iterator",E=!1,T=t.prototype,A=T[v]||T["@@iterator"]||p&&T[p],L=!m&&A||M(p),R="Array"==e&&T.entries||A;if(R&&(b=a(R.call(new t)),f!==Object.prototype&&b.next&&(h||a(b)===f||(o?o(b,f):"function"!=typeof b[v]&&c(b,v,g)),s(b,S,!0,!0),h&&(d[S]=g))),"values"==p&&A&&"values"!==A.name&&(E=!0,L=function(){return A.call(this)}),h&&!x||T[v]===L||c(T,v,L),d[e]=L,p)if(_={values:M("values"),keys:y?L:M("keys"),entries:M("entries")},x)for(w in _)(m||E||!(w in T))&&u(T,w,_[w]);else r({target:e,proto:!0,forced:m||E},_);return _}},function(t,e,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,a=i&&!r.call({1:2},1);e.f=a?function(t){var e=i(this,t);return!!e&&e.enumerable}:r},function(t,e,n){var r=n(7),i=n(75),a=n(32),o=n(12);t.exports=function(t,e){for(var n=i(e),s=o.f,c=a.f,u=0;u<n.length;u++){var l=n[u];r(t,l)||s(t,l,c(e,l))}}},function(t,e,n){var r=n(16),i=n(76),a=n(77),o=n(4);t.exports=r("Reflect","ownKeys")||function(t){var e=i.f(o(t)),n=a.f;return n?e.concat(n(t)):e}},function(t,e,n){var r=n(43),i=n(28).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){"use strict";var r=n(48).IteratorPrototype,i=n(42),a=n(26),o=n(33),s=n(17),c=function(){return this};t.exports=function(t,e,n){var u=e+" Iterator";return t.prototype=i(r,{next:a(1,n)}),o(t,u,!1,!0),s[u]=c,t}},function(t,e,n){var r=n(6);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},function(t,e,n){var r=n(4),i=n(81);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,e=!1,n={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),e=n instanceof Array}catch(t){}return function(n,a){return r(n),i(a),e?t.call(n,a):n.__proto__=a,n}}():void 0)},function(t,e,n){var r=n(9);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},function(t,e,n){var r=n(0);t.exports=r.Promise},function(t,e,n){var r=n(21);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){"use strict";var r=n(16),i=n(12),a=n(2),o=n(11),s=a("species");t.exports=function(t){var e=r(t),n=i.f;o&&e&&!e[s]&&n(e,s,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,n){if(!(t instanceof e))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return t}},function(t,e,n){var r=n(4),i=n(87),a=n(44),o=n(51),s=n(88),c=n(91),u=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,n,l,h){var d,p,f,m,v,g,y,x=o(e,n,l?2:1);if(h)d=t;else{if("function"!=typeof(p=s(t)))throw TypeError("Target is not iterable");if(i(p)){for(f=0,m=a(t.length);m>f;f++)if((v=l?x(r(y=t[f])[0],y[1]):x(t[f]))&&v instanceof u)return v;return new u(!1)}d=p.call(t)}for(g=d.next;!(y=g.call(d)).done;)if("object"==typeof(v=c(d,x,y.value,l))&&v&&v instanceof u)return v;return new u(!1)}).stop=function(t){return new u(!0,t)}},function(t,e,n){var r=n(2),i=n(17),a=r("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(i.Array===t||o[a]===t)}},function(t,e,n){var r=n(89),i=n(17),a=n(2)("iterator");t.exports=function(t){if(null!=t)return t[a]||t["@@iterator"]||i[r(t)]}},function(t,e,n){var r=n(90),i=n(14),a=n(2)("toStringTag"),o="Arguments"==i(function(){return arguments}());t.exports=r?i:function(t){var e,n,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),a))?n:o?i(e):"Object"==(r=i(e))&&"function"==typeof e.callee?"Arguments":r}},function(t,e,n){var r={};r[n(2)("toStringTag")]="z",t.exports="[object z]"===String(r)},function(t,e,n){var r=n(4);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var a=t.return;throw void 0!==a&&r(a.call(t)),e}}},function(t,e,n){var r=n(2)("iterator"),i=!1;try{var a=0,o={next:function(){return{done:!!a++}},return:function(){i=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var a={};a[r]=function(){return{next:function(){return{done:n=!0}}}},t(a)}catch(t){}return n}},function(t,e,n){var r=n(4),i=n(13),a=n(2)("species");t.exports=function(t,e){var n,o=r(t).constructor;return void 0===o||null==(n=r(o)[a])?e:i(n)}},function(t,e,n){var r,i,a,o,s,c,u,l,h=n(0),d=n(32).f,p=n(14),f=n(52).set,m=n(53),v=h.MutationObserver||h.WebKitMutationObserver,g=h.process,y=h.Promise,x="process"==p(g),b=d(h,"queueMicrotask"),_=b&&b.value;_||(r=function(){var t,e;for(x&&(t=g.domain)&&t.exit();i;){e=i.fn,i=i.next;try{e()}catch(t){throw i?o():a=void 0,t}}a=void 0,t&&t.enter()},x?o=function(){g.nextTick(r)}:v&&!m?(s=!0,c=document.createTextNode(""),new v(r).observe(c,{characterData:!0}),o=function(){c.data=s=!s}):y&&y.resolve?(u=y.resolve(void 0),l=u.then,o=function(){l.call(u,r)}):o=function(){f.call(h,r)}),t.exports=_||function(t){var e={fn:t,next:void 0};a&&(a.next=e),i||(i=e,o()),a=e}},function(t,e,n){var r=n(4),i=n(9),a=n(55);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=a.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(0);t.exports=function(t,e){var n=r.console;n&&n.error&&(1===arguments.length?n.error(t):n.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,n){var r,i,a=n(0),o=n(54),s=a.process,c=s&&s.versions,u=c&&c.v8;u?i=(r=u.split("."))[0]+r[1]:o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(i=r[1]),t.exports=i&&+i},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";var r=n(20),i=n(13),a=n(50),o=n(6),s=n(103),c=[],u=c.sort,l=o((function(){c.sort(void 0)})),h=o((function(){c.sort(null)})),d=s("sort");r({target:"Array",proto:!0,forced:l||!h||!d},{sort:function(t){return void 0===t?u.call(a(this)):u.call(a(this),i(t))}})},function(t,e,n){"use strict";var r=n(6);t.exports=function(t,e){var n=[][t];return!!n&&r((function(){n.call(null,e||function(){throw 1},1)}))}},function(t,e,n){"use strict";var r=n(20),i=n(15),a=n(105);r({target:"WeakMap",proto:!0,real:!0,forced:i},{deleteAll:function(){return a.apply(this,arguments)}})},function(t,e,n){"use strict";var r=n(4),i=n(13);t.exports=function(){for(var t,e=r(this),n=i(e.delete),a=!0,o=0,s=arguments.length;o<s;o++)t=n.call(e,arguments[o]),a=a&&t;return!!a}},function(t,e,n){},function(t,e,n){},function(t,e){t.exports=function(t){if(!t.webpackPolyfill){var e=Object.create(t);e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),Object.defineProperty(e,"exports",{enumerable:!0}),e.webpackPolyfill=1}return e}},function(t,e,n){},function(t,e,n){},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",(function(){return et})),n.d(r,"clone",(function(){return nt})),n.d(r,"copy",(function(){return rt})),n.d(r,"fromValues",(function(){return it})),n.d(r,"set",(function(){return at})),n.d(r,"identity",(function(){return ot})),n.d(r,"transpose",(function(){return st})),n.d(r,"invert",(function(){return ct})),n.d(r,"adjoint",(function(){return ut})),n.d(r,"determinant",(function(){return lt})),n.d(r,"multiply",(function(){return ht})),n.d(r,"translate",(function(){return dt})),n.d(r,"scale",(function(){return pt})),n.d(r,"rotate",(function(){return ft})),n.d(r,"rotateX",(function(){return mt})),n.d(r,"rotateY",(function(){return vt})),n.d(r,"rotateZ",(function(){return gt})),n.d(r,"fromTranslation",(function(){return yt})),n.d(r,"fromScaling",(function(){return xt})),n.d(r,"fromRotation",(function(){return bt})),n.d(r,"fromXRotation",(function(){return _t})),n.d(r,"fromYRotation",(function(){return wt})),n.d(r,"fromZRotation",(function(){return Mt})),n.d(r,"fromRotationTranslation",(function(){return St})),n.d(r,"fromQuat2",(function(){return Et})),n.d(r,"getTranslation",(function(){return Tt})),n.d(r,"getScaling",(function(){return At})),n.d(r,"getRotation",(function(){return Lt})),n.d(r,"fromRotationTranslationScale",(function(){return Rt})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return Pt})),n.d(r,"fromQuat",(function(){return Ct})),n.d(r,"frustum",(function(){return Ot})),n.d(r,"perspective",(function(){return Dt})),n.d(r,"perspectiveFromFieldOfView",(function(){return It})),n.d(r,"ortho",(function(){return Nt})),n.d(r,"lookAt",(function(){return Bt})),n.d(r,"targetTo",(function(){return zt})),n.d(r,"str",(function(){return Ft})),n.d(r,"frob",(function(){return Ut})),n.d(r,"add",(function(){return Gt})),n.d(r,"subtract",(function(){return Ht})),n.d(r,"multiplyScalar",(function(){return kt})),n.d(r,"multiplyScalarAndAdd",(function(){return jt})),n.d(r,"exactEquals",(function(){return Vt})),n.d(r,"equals",(function(){return Wt})),n.d(r,"mul",(function(){return qt})),n.d(r,"sub",(function(){return Xt}));var i={};n.r(i),n.d(i,"create",(function(){return Yt})),n.d(i,"clone",(function(){return Zt})),n.d(i,"length",(function(){return Jt})),n.d(i,"fromValues",(function(){return $t})),n.d(i,"copy",(function(){return Qt})),n.d(i,"set",(function(){return Kt})),n.d(i,"add",(function(){return te})),n.d(i,"subtract",(function(){return ee})),n.d(i,"multiply",(function(){return ne})),n.d(i,"divide",(function(){return re})),n.d(i,"ceil",(function(){return ie})),n.d(i,"floor",(function(){return ae})),n.d(i,"min",(function(){return oe})),n.d(i,"max",(function(){return se})),n.d(i,"round",(function(){return ce})),n.d(i,"scale",(function(){return ue})),n.d(i,"scaleAndAdd",(function(){return le})),n.d(i,"distance",(function(){return he})),n.d(i,"squaredDistance",(function(){return de})),n.d(i,"squaredLength",(function(){return pe})),n.d(i,"negate",(function(){return fe})),n.d(i,"inverse",(function(){return me})),n.d(i,"normalize",(function(){return ve})),n.d(i,"dot",(function(){return ge})),n.d(i,"cross",(function(){return ye})),n.d(i,"lerp",(function(){return xe})),n.d(i,"hermite",(function(){return be})),n.d(i,"bezier",(function(){return _e})),n.d(i,"random",(function(){return we})),n.d(i,"transformMat4",(function(){return Me})),n.d(i,"transformMat3",(function(){return Se})),n.d(i,"transformQuat",(function(){return Ee})),n.d(i,"rotateX",(function(){return Te})),n.d(i,"rotateY",(function(){return Ae})),n.d(i,"rotateZ",(function(){return Le})),n.d(i,"angle",(function(){return Re})),n.d(i,"zero",(function(){return Pe})),n.d(i,"str",(function(){return Ce})),n.d(i,"exactEquals",(function(){return Oe})),n.d(i,"equals",(function(){return De})),n.d(i,"sub",(function(){return Ne})),n.d(i,"mul",(function(){return Be})),n.d(i,"div",(function(){return ze})),n.d(i,"dist",(function(){return Fe})),n.d(i,"sqrDist",(function(){return Ue})),n.d(i,"len",(function(){return Ge})),n.d(i,"sqrLen",(function(){return He})),n.d(i,"forEach",(function(){return ke}));var a={};n.r(a),n.d(a,"create",(function(){return We})),n.d(a,"identity",(function(){return qe})),n.d(a,"setAxisAngle",(function(){return Xe})),n.d(a,"getAxisAngle",(function(){return Ye})),n.d(a,"getAngle",(function(){return Ze})),n.d(a,"multiply",(function(){return Je})),n.d(a,"rotateX",(function(){return $e})),n.d(a,"rotateY",(function(){return Qe})),n.d(a,"rotateZ",(function(){return Ke})),n.d(a,"calculateW",(function(){return tn})),n.d(a,"exp",(function(){return en})),n.d(a,"ln",(function(){return nn})),n.d(a,"pow",(function(){return rn})),n.d(a,"slerp",(function(){return an})),n.d(a,"random",(function(){return on})),n.d(a,"invert",(function(){return sn})),n.d(a,"conjugate",(function(){return cn})),n.d(a,"fromMat3",(function(){return un})),n.d(a,"fromEuler",(function(){return ln})),n.d(a,"str",(function(){return hn})),n.d(a,"clone",(function(){return xn})),n.d(a,"fromValues",(function(){return bn})),n.d(a,"copy",(function(){return _n})),n.d(a,"set",(function(){return wn})),n.d(a,"add",(function(){return Mn})),n.d(a,"mul",(function(){return Sn})),n.d(a,"scale",(function(){return En})),n.d(a,"dot",(function(){return Tn})),n.d(a,"lerp",(function(){return An})),n.d(a,"length",(function(){return Ln})),n.d(a,"len",(function(){return Rn})),n.d(a,"squaredLength",(function(){return Pn})),n.d(a,"sqrLen",(function(){return Cn})),n.d(a,"normalize",(function(){return On})),n.d(a,"exactEquals",(function(){return Dn})),n.d(a,"equals",(function(){return In})),n.d(a,"rotationTo",(function(){return Nn})),n.d(a,"sqlerp",(function(){return Bn})),n.d(a,"setAxes",(function(){return zn}));n(3),n(18),n(5);function o(){}function s(t){return t()}function c(){return Object.create(null)}function u(t){t.forEach(s)}function l(t){return"function"==typeof t}function h(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function d(t,...e){if(null==t)return o;const n=t.subscribe(...e);return n.unsubscribe?()=>n.unsubscribe():n}function p(t,e,n,r){if(t){const i=f(t,e,n,r);return t[0](i)}}function f(t,e,n,r){return t[1]&&r?function(t,e){for(const n in e)t[n]=e[n];return t}(n.ctx.slice(),t[1](r(e))):n.ctx}function m(t,e,n,r,i,a,o){const s=function(t,e,n,r){if(t[2]&&r){const i=t[2](r(n));if(void 0===e.dirty)return i;if("object"==typeof i){const t=[],n=Math.max(e.dirty.length,i.length);for(let r=0;r<n;r+=1)t[r]=e.dirty[r]|i[r];return t}return e.dirty|i}return e.dirty}(e,r,i,a);if(s){const i=f(e,n,r,o);t.p(i,s)}}new Set;function v(t,e){t.appendChild(e)}function g(t,e,n){t.insertBefore(e,n||null)}function y(t){t.parentNode.removeChild(t)}function x(t){return document.createElement(t)}function b(t){return document.createTextNode(t)}function _(){return b(" ")}function w(t,e,n){null==n?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function M(t,e){e=""+e,t.data!==e&&(t.data=e)}new Set;let S;function E(t){S=t}function T(){if(!S)throw new Error("Function called outside component initialization");return S}function A(t){T().$$.on_mount.push(t)}function L(t,e){T().$$.context.set(t,e)}function R(t){return T().$$.context.get(t)}const P=[],C=[],O=[],D=[],I=Promise.resolve();let N=!1;function B(){N||(N=!0,I.then(G))}function z(t){O.push(t)}let F=!1;const U=new Set;function G(){if(!F){F=!0;do{for(let t=0;t<P.length;t+=1){const e=P[t];E(e),H(e.$$)}for(P.length=0;C.length;)C.pop()();for(let t=0;t<O.length;t+=1){const e=O[t];U.has(e)||(U.add(e),e())}O.length=0}while(P.length);for(;D.length;)D.pop()();N=!1,F=!1,U.clear()}}function H(t){if(null!==t.fragment){t.update(),u(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(z)}}const k=new Set;let j;function V(t,e){t&&t.i&&(k.delete(t),t.i(e))}function W(t,e,n,r){if(t&&t.o){if(k.has(t))return;k.add(t),j.c.push(()=>{k.delete(t),r&&(n&&t.d(1),r())}),t.o(e)}}"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:global;new Set(["allowfullscreen","allowpaymentrequest","async","autofocus","autoplay","checked","controls","default","defer","disabled","formnovalidate","hidden","ismap","loop","multiple","muted","nomodule","novalidate","open","playsinline","readonly","required","reversed","selected"]);let q;function X(t){t&&t.c()}function Y(t,e,n){const{fragment:r,on_mount:i,on_destroy:a,after_update:o}=t.$$;r&&r.m(e,n),z(()=>{const e=i.map(s).filter(l);a?a.push(...e):u(e),t.$$.on_mount=[]}),o.forEach(z)}function Z(t,e){const n=t.$$;null!==n.fragment&&(u(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function J(t,e,n,r,i,a,s=[-1]){const l=S;E(t);const h=e.props||{},d=t.$$={fragment:null,ctx:null,props:a,update:o,not_equal:i,bound:c(),on_mount:[],on_destroy:[],before_update:[],after_update:[],context:new Map(l?l.$$.context:[]),callbacks:c(),dirty:s};let p=!1;if(d.ctx=n?n(t,h,(e,n,...r)=>{const a=r.length?r[0]:n;return d.ctx&&i(d.ctx[e],d.ctx[e]=a)&&(d.bound[e]&&d.bound[e](a),p&&function(t,e){-1===t.$$.dirty[0]&&(P.push(t),B(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}(t,e)),n}):[],d.update(),p=!0,u(d.before_update),d.fragment=!!r&&r(d.ctx),e.target){if(e.hydrate){const t=(f=e.target,Array.from(f.childNodes));d.fragment&&d.fragment.l(t),t.forEach(y)}else d.fragment&&d.fragment.c();e.intro&&V(t.$$.fragment),Y(t,e.target,e.anchor),G()}var f;E(l)}"function"==typeof HTMLElement&&(q=class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){for(const t in this.$$.slotted)this.appendChild(this.$$.slotted[t])}attributeChangedCallback(t,e,n){this[t]=n}$destroy(){Z(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}});class ${$destroy(){Z(this,1),this.$destroy=o}$on(t,e){const n=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return n.push(e),()=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}$set(){}}n(100);var Q=1e-6,K="undefined"!=typeof Float32Array?Float32Array:Array,tt=Math.random;Math.PI;function et(){var t=new K(16);return K!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function nt(t){var e=new K(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function rt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function it(t,e,n,r,i,a,o,s,c,u,l,h,d,p,f,m){var v=new K(16);return v[0]=t,v[1]=e,v[2]=n,v[3]=r,v[4]=i,v[5]=a,v[6]=o,v[7]=s,v[8]=c,v[9]=u,v[10]=l,v[11]=h,v[12]=d,v[13]=p,v[14]=f,v[15]=m,v}function at(t,e,n,r,i,a,o,s,c,u,l,h,d,p,f,m,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=a,t[5]=o,t[6]=s,t[7]=c,t[8]=u,t[9]=l,t[10]=h,t[11]=d,t[12]=p,t[13]=f,t[14]=m,t[15]=v,t}function ot(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function st(t,e){if(t===e){var n=e[1],r=e[2],i=e[3],a=e[6],o=e[7],s=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=i,t[13]=o,t[14]=s}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function ct(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],s=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],v=e[14],g=e[15],y=n*s-r*o,x=n*c-i*o,b=n*u-a*o,_=r*c-i*s,w=r*u-a*s,M=i*u-a*c,S=l*m-h*f,E=l*v-d*f,T=l*g-p*f,A=h*v-d*m,L=h*g-p*m,R=d*g-p*v,P=y*R-x*L+b*A+_*T-w*E+M*S;return P?(P=1/P,t[0]=(s*R-c*L+u*A)*P,t[1]=(i*L-r*R-a*A)*P,t[2]=(m*M-v*w+g*_)*P,t[3]=(d*w-h*M-p*_)*P,t[4]=(c*T-o*R-u*E)*P,t[5]=(n*R-i*T+a*E)*P,t[6]=(v*b-f*M-g*x)*P,t[7]=(l*M-d*b+p*x)*P,t[8]=(o*L-s*T+u*S)*P,t[9]=(r*T-n*L-a*S)*P,t[10]=(f*w-m*b+g*y)*P,t[11]=(h*b-l*w-p*y)*P,t[12]=(s*E-o*A-c*S)*P,t[13]=(n*A-r*E+i*S)*P,t[14]=(m*x-f*_-v*y)*P,t[15]=(l*_-h*x+d*y)*P,t):null}function ut(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=e[4],s=e[5],c=e[6],u=e[7],l=e[8],h=e[9],d=e[10],p=e[11],f=e[12],m=e[13],v=e[14],g=e[15];return t[0]=s*(d*g-p*v)-h*(c*g-u*v)+m*(c*p-u*d),t[1]=-(r*(d*g-p*v)-h*(i*g-a*v)+m*(i*p-a*d)),t[2]=r*(c*g-u*v)-s*(i*g-a*v)+m*(i*u-a*c),t[3]=-(r*(c*p-u*d)-s*(i*p-a*d)+h*(i*u-a*c)),t[4]=-(o*(d*g-p*v)-l*(c*g-u*v)+f*(c*p-u*d)),t[5]=n*(d*g-p*v)-l*(i*g-a*v)+f*(i*p-a*d),t[6]=-(n*(c*g-u*v)-o*(i*g-a*v)+f*(i*u-a*c)),t[7]=n*(c*p-u*d)-o*(i*p-a*d)+l*(i*u-a*c),t[8]=o*(h*g-p*m)-l*(s*g-u*m)+f*(s*p-u*h),t[9]=-(n*(h*g-p*m)-l*(r*g-a*m)+f*(r*p-a*h)),t[10]=n*(s*g-u*m)-o*(r*g-a*m)+f*(r*u-a*s),t[11]=-(n*(s*p-u*h)-o*(r*p-a*h)+l*(r*u-a*s)),t[12]=-(o*(h*v-d*m)-l*(s*v-c*m)+f*(s*d-c*h)),t[13]=n*(h*v-d*m)-l*(r*v-i*m)+f*(r*d-i*h),t[14]=-(n*(s*v-c*m)-o*(r*v-i*m)+f*(r*c-i*s)),t[15]=n*(s*d-c*h)-o*(r*d-i*h)+l*(r*c-i*s),t}function lt(t){var e=t[0],n=t[1],r=t[2],i=t[3],a=t[4],o=t[5],s=t[6],c=t[7],u=t[8],l=t[9],h=t[10],d=t[11],p=t[12],f=t[13],m=t[14],v=t[15];return(e*o-n*a)*(h*v-d*m)-(e*s-r*a)*(l*v-d*f)+(e*c-i*a)*(l*m-h*f)+(n*s-r*o)*(u*v-d*p)-(n*c-i*o)*(u*m-h*p)+(r*c-i*s)*(u*f-l*p)}function ht(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],s=e[4],c=e[5],u=e[6],l=e[7],h=e[8],d=e[9],p=e[10],f=e[11],m=e[12],v=e[13],g=e[14],y=e[15],x=n[0],b=n[1],_=n[2],w=n[3];return t[0]=x*r+b*s+_*h+w*m,t[1]=x*i+b*c+_*d+w*v,t[2]=x*a+b*u+_*p+w*g,t[3]=x*o+b*l+_*f+w*y,x=n[4],b=n[5],_=n[6],w=n[7],t[4]=x*r+b*s+_*h+w*m,t[5]=x*i+b*c+_*d+w*v,t[6]=x*a+b*u+_*p+w*g,t[7]=x*o+b*l+_*f+w*y,x=n[8],b=n[9],_=n[10],w=n[11],t[8]=x*r+b*s+_*h+w*m,t[9]=x*i+b*c+_*d+w*v,t[10]=x*a+b*u+_*p+w*g,t[11]=x*o+b*l+_*f+w*y,x=n[12],b=n[13],_=n[14],w=n[15],t[12]=x*r+b*s+_*h+w*m,t[13]=x*i+b*c+_*d+w*v,t[14]=x*a+b*u+_*p+w*g,t[15]=x*o+b*l+_*f+w*y,t}function dt(t,e,n){var r,i,a,o,s,c,u,l,h,d,p,f,m=n[0],v=n[1],g=n[2];return e===t?(t[12]=e[0]*m+e[4]*v+e[8]*g+e[12],t[13]=e[1]*m+e[5]*v+e[9]*g+e[13],t[14]=e[2]*m+e[6]*v+e[10]*g+e[14],t[15]=e[3]*m+e[7]*v+e[11]*g+e[15]):(r=e[0],i=e[1],a=e[2],o=e[3],s=e[4],c=e[5],u=e[6],l=e[7],h=e[8],d=e[9],p=e[10],f=e[11],t[0]=r,t[1]=i,t[2]=a,t[3]=o,t[4]=s,t[5]=c,t[6]=u,t[7]=l,t[8]=h,t[9]=d,t[10]=p,t[11]=f,t[12]=r*m+s*v+h*g+e[12],t[13]=i*m+c*v+d*g+e[13],t[14]=a*m+u*v+p*g+e[14],t[15]=o*m+l*v+f*g+e[15]),t}function pt(t,e,n){var r=n[0],i=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function ft(t,e,n,r){var i,a,o,s,c,u,l,h,d,p,f,m,v,g,y,x,b,_,w,M,S,E,T,A,L=r[0],R=r[1],P=r[2],C=Math.hypot(L,R,P);return C<Q?null:(L*=C=1/C,R*=C,P*=C,i=Math.sin(n),o=1-(a=Math.cos(n)),s=e[0],c=e[1],u=e[2],l=e[3],h=e[4],d=e[5],p=e[6],f=e[7],m=e[8],v=e[9],g=e[10],y=e[11],x=L*L*o+a,b=R*L*o+P*i,_=P*L*o-R*i,w=L*R*o-P*i,M=R*R*o+a,S=P*R*o+L*i,E=L*P*o+R*i,T=R*P*o-L*i,A=P*P*o+a,t[0]=s*x+h*b+m*_,t[1]=c*x+d*b+v*_,t[2]=u*x+p*b+g*_,t[3]=l*x+f*b+y*_,t[4]=s*w+h*M+m*S,t[5]=c*w+d*M+v*S,t[6]=u*w+p*M+g*S,t[7]=l*w+f*M+y*S,t[8]=s*E+h*T+m*A,t[9]=c*E+d*T+v*A,t[10]=u*E+p*T+g*A,t[11]=l*E+f*T+y*A,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function mt(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[4],o=e[5],s=e[6],c=e[7],u=e[8],l=e[9],h=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*i+u*r,t[5]=o*i+l*r,t[6]=s*i+h*r,t[7]=c*i+d*r,t[8]=u*i-a*r,t[9]=l*i-o*r,t[10]=h*i-s*r,t[11]=d*i-c*r,t}function vt(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[0],o=e[1],s=e[2],c=e[3],u=e[8],l=e[9],h=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i-u*r,t[1]=o*i-l*r,t[2]=s*i-h*r,t[3]=c*i-d*r,t[8]=a*r+u*i,t[9]=o*r+l*i,t[10]=s*r+h*i,t[11]=c*r+d*i,t}function gt(t,e,n){var r=Math.sin(n),i=Math.cos(n),a=e[0],o=e[1],s=e[2],c=e[3],u=e[4],l=e[5],h=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*i+u*r,t[1]=o*i+l*r,t[2]=s*i+h*r,t[3]=c*i+d*r,t[4]=u*i-a*r,t[5]=l*i-o*r,t[6]=h*i-s*r,t[7]=d*i-c*r,t}function yt(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function xt(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function bt(t,e,n){var r,i,a,o=n[0],s=n[1],c=n[2],u=Math.hypot(o,s,c);return u<Q?null:(o*=u=1/u,s*=u,c*=u,r=Math.sin(e),a=1-(i=Math.cos(e)),t[0]=o*o*a+i,t[1]=s*o*a+c*r,t[2]=c*o*a-s*r,t[3]=0,t[4]=o*s*a-c*r,t[5]=s*s*a+i,t[6]=c*s*a+o*r,t[7]=0,t[8]=o*c*a+s*r,t[9]=s*c*a-o*r,t[10]=c*c*a+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function _t(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function wt(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Mt(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function St(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],s=r+r,c=i+i,u=a+a,l=r*s,h=r*c,d=r*u,p=i*c,f=i*u,m=a*u,v=o*s,g=o*c,y=o*u;return t[0]=1-(p+m),t[1]=h+y,t[2]=d-g,t[3]=0,t[4]=h-y,t[5]=1-(l+m),t[6]=f+v,t[7]=0,t[8]=d+g,t[9]=f-v,t[10]=1-(l+p),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Et(t,e){var n=new K(3),r=-e[0],i=-e[1],a=-e[2],o=e[3],s=e[4],c=e[5],u=e[6],l=e[7],h=r*r+i*i+a*a+o*o;return h>0?(n[0]=2*(s*o+l*r+c*a-u*i)/h,n[1]=2*(c*o+l*i+u*r-s*a)/h,n[2]=2*(u*o+l*a+s*i-c*r)/h):(n[0]=2*(s*o+l*r+c*a-u*i),n[1]=2*(c*o+l*i+u*r-s*a),n[2]=2*(u*o+l*a+s*i-c*r)),St(t,e,n),t}function Tt(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function At(t,e){var n=e[0],r=e[1],i=e[2],a=e[4],o=e[5],s=e[6],c=e[8],u=e[9],l=e[10];return t[0]=Math.hypot(n,r,i),t[1]=Math.hypot(a,o,s),t[2]=Math.hypot(c,u,l),t}function Lt(t,e){var n=new K(3);At(n,e);var r=1/n[0],i=1/n[1],a=1/n[2],o=e[0]*r,s=e[1]*i,c=e[2]*a,u=e[4]*r,l=e[5]*i,h=e[6]*a,d=e[8]*r,p=e[9]*i,f=e[10]*a,m=o+l+f,v=0;return m>0?(v=2*Math.sqrt(m+1),t[3]=.25*v,t[0]=(h-p)/v,t[1]=(d-c)/v,t[2]=(s-u)/v):o>l&&o>f?(v=2*Math.sqrt(1+o-l-f),t[3]=(h-p)/v,t[0]=.25*v,t[1]=(s+u)/v,t[2]=(d+c)/v):l>f?(v=2*Math.sqrt(1+l-o-f),t[3]=(d-c)/v,t[0]=(s+u)/v,t[1]=.25*v,t[2]=(h+p)/v):(v=2*Math.sqrt(1+f-o-l),t[3]=(s-u)/v,t[0]=(d+c)/v,t[1]=(h+p)/v,t[2]=.25*v),t}function Rt(t,e,n,r){var i=e[0],a=e[1],o=e[2],s=e[3],c=i+i,u=a+a,l=o+o,h=i*c,d=i*u,p=i*l,f=a*u,m=a*l,v=o*l,g=s*c,y=s*u,x=s*l,b=r[0],_=r[1],w=r[2];return t[0]=(1-(f+v))*b,t[1]=(d+x)*b,t[2]=(p-y)*b,t[3]=0,t[4]=(d-x)*_,t[5]=(1-(h+v))*_,t[6]=(m+g)*_,t[7]=0,t[8]=(p+y)*w,t[9]=(m-g)*w,t[10]=(1-(h+f))*w,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function Pt(t,e,n,r,i){var a=e[0],o=e[1],s=e[2],c=e[3],u=a+a,l=o+o,h=s+s,d=a*u,p=a*l,f=a*h,m=o*l,v=o*h,g=s*h,y=c*u,x=c*l,b=c*h,_=r[0],w=r[1],M=r[2],S=i[0],E=i[1],T=i[2],A=(1-(m+g))*_,L=(p+b)*_,R=(f-x)*_,P=(p-b)*w,C=(1-(d+g))*w,O=(v+y)*w,D=(f+x)*M,I=(v-y)*M,N=(1-(d+m))*M;return t[0]=A,t[1]=L,t[2]=R,t[3]=0,t[4]=P,t[5]=C,t[6]=O,t[7]=0,t[8]=D,t[9]=I,t[10]=N,t[11]=0,t[12]=n[0]+S-(A*S+P*E+D*T),t[13]=n[1]+E-(L*S+C*E+I*T),t[14]=n[2]+T-(R*S+O*E+N*T),t[15]=1,t}function Ct(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n+n,s=r+r,c=i+i,u=n*o,l=r*o,h=r*s,d=i*o,p=i*s,f=i*c,m=a*o,v=a*s,g=a*c;return t[0]=1-h-f,t[1]=l+g,t[2]=d-v,t[3]=0,t[4]=l-g,t[5]=1-u-f,t[6]=p+m,t[7]=0,t[8]=d+v,t[9]=p-m,t[10]=1-u-h,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function Ot(t,e,n,r,i,a,o){var s=1/(n-e),c=1/(i-r),u=1/(a-o);return t[0]=2*a*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*c,t[6]=0,t[7]=0,t[8]=(n+e)*s,t[9]=(i+r)*c,t[10]=(o+a)*u,t[11]=-1,t[12]=0,t[13]=0,t[14]=o*a*2*u,t[15]=0,t}function Dt(t,e,n,r,i){var a,o=1/Math.tan(e/2);return t[0]=o/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=o,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(a=1/(r-i),t[10]=(i+r)*a,t[14]=2*i*r*a):(t[10]=-1,t[14]=-2*r),t}function It(t,e,n,r){var i=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),o=Math.tan(e.leftDegrees*Math.PI/180),s=Math.tan(e.rightDegrees*Math.PI/180),c=2/(o+s),u=2/(i+a);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=u,t[6]=0,t[7]=0,t[8]=-(o-s)*c*.5,t[9]=(i-a)*u*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function Nt(t,e,n,r,i,a,o){var s=1/(e-n),c=1/(r-i),u=1/(a-o);return t[0]=-2*s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*u,t[11]=0,t[12]=(e+n)*s,t[13]=(i+r)*c,t[14]=(o+a)*u,t[15]=1,t}function Bt(t,e,n,r){var i,a,o,s,c,u,l,h,d,p,f=e[0],m=e[1],v=e[2],g=r[0],y=r[1],x=r[2],b=n[0],_=n[1],w=n[2];return Math.abs(f-b)<Q&&Math.abs(m-_)<Q&&Math.abs(v-w)<Q?ot(t):(l=f-b,h=m-_,d=v-w,i=y*(d*=p=1/Math.hypot(l,h,d))-x*(h*=p),a=x*(l*=p)-g*d,o=g*h-y*l,(p=Math.hypot(i,a,o))?(i*=p=1/p,a*=p,o*=p):(i=0,a=0,o=0),s=h*o-d*a,c=d*i-l*o,u=l*a-h*i,(p=Math.hypot(s,c,u))?(s*=p=1/p,c*=p,u*=p):(s=0,c=0,u=0),t[0]=i,t[1]=s,t[2]=l,t[3]=0,t[4]=a,t[5]=c,t[6]=h,t[7]=0,t[8]=o,t[9]=u,t[10]=d,t[11]=0,t[12]=-(i*f+a*m+o*v),t[13]=-(s*f+c*m+u*v),t[14]=-(l*f+h*m+d*v),t[15]=1,t)}function zt(t,e,n,r){var i=e[0],a=e[1],o=e[2],s=r[0],c=r[1],u=r[2],l=i-n[0],h=a-n[1],d=o-n[2],p=l*l+h*h+d*d;p>0&&(l*=p=1/Math.sqrt(p),h*=p,d*=p);var f=c*d-u*h,m=u*l-s*d,v=s*h-c*l;return(p=f*f+m*m+v*v)>0&&(f*=p=1/Math.sqrt(p),m*=p,v*=p),t[0]=f,t[1]=m,t[2]=v,t[3]=0,t[4]=h*v-d*m,t[5]=d*f-l*v,t[6]=l*m-h*f,t[7]=0,t[8]=l,t[9]=h,t[10]=d,t[11]=0,t[12]=i,t[13]=a,t[14]=o,t[15]=1,t}function Ft(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function Ut(t){return Math.hypot(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function Gt(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function Ht(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function kt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function jt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Vt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function Wt(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=t[4],s=t[5],c=t[6],u=t[7],l=t[8],h=t[9],d=t[10],p=t[11],f=t[12],m=t[13],v=t[14],g=t[15],y=e[0],x=e[1],b=e[2],_=e[3],w=e[4],M=e[5],S=e[6],E=e[7],T=e[8],A=e[9],L=e[10],R=e[11],P=e[12],C=e[13],O=e[14],D=e[15];return Math.abs(n-y)<=Q*Math.max(1,Math.abs(n),Math.abs(y))&&Math.abs(r-x)<=Q*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(i-b)<=Q*Math.max(1,Math.abs(i),Math.abs(b))&&Math.abs(a-_)<=Q*Math.max(1,Math.abs(a),Math.abs(_))&&Math.abs(o-w)<=Q*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(s-M)<=Q*Math.max(1,Math.abs(s),Math.abs(M))&&Math.abs(c-S)<=Q*Math.max(1,Math.abs(c),Math.abs(S))&&Math.abs(u-E)<=Q*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(l-T)<=Q*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(h-A)<=Q*Math.max(1,Math.abs(h),Math.abs(A))&&Math.abs(d-L)<=Q*Math.max(1,Math.abs(d),Math.abs(L))&&Math.abs(p-R)<=Q*Math.max(1,Math.abs(p),Math.abs(R))&&Math.abs(f-P)<=Q*Math.max(1,Math.abs(f),Math.abs(P))&&Math.abs(m-C)<=Q*Math.max(1,Math.abs(m),Math.abs(C))&&Math.abs(v-O)<=Q*Math.max(1,Math.abs(v),Math.abs(O))&&Math.abs(g-D)<=Q*Math.max(1,Math.abs(g),Math.abs(D))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var qt=ht,Xt=Ht;function Yt(){var t=new K(3);return K!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function Zt(t){var e=new K(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function Jt(t){var e=t[0],n=t[1],r=t[2];return Math.hypot(e,n,r)}function $t(t,e,n){var r=new K(3);return r[0]=t,r[1]=e,r[2]=n,r}function Qt(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function Kt(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function te(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function ee(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function ne(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function re(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function ie(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function ae(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function oe(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function se(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function ce(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function ue(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function le(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function he(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.hypot(n,r,i)}function de(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}function pe(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function fe(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function me(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function ve(t,e){var n=e[0],r=e[1],i=e[2],a=n*n+r*r+i*i;return a>0&&(a=1/Math.sqrt(a)),t[0]=e[0]*a,t[1]=e[1]*a,t[2]=e[2]*a,t}function ge(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function ye(t,e,n){var r=e[0],i=e[1],a=e[2],o=n[0],s=n[1],c=n[2];return t[0]=i*c-a*s,t[1]=a*o-r*c,t[2]=r*s-i*o,t}function xe(t,e,n,r){var i=e[0],a=e[1],o=e[2];return t[0]=i+r*(n[0]-i),t[1]=a+r*(n[1]-a),t[2]=o+r*(n[2]-o),t}function be(t,e,n,r,i,a){var o=a*a,s=o*(2*a-3)+1,c=o*(a-2)+a,u=o*(a-1),l=o*(3-2*a);return t[0]=e[0]*s+n[0]*c+r[0]*u+i[0]*l,t[1]=e[1]*s+n[1]*c+r[1]*u+i[1]*l,t[2]=e[2]*s+n[2]*c+r[2]*u+i[2]*l,t}function _e(t,e,n,r,i,a){var o=1-a,s=o*o,c=a*a,u=s*o,l=3*a*s,h=3*c*o,d=c*a;return t[0]=e[0]*u+n[0]*l+r[0]*h+i[0]*d,t[1]=e[1]*u+n[1]*l+r[1]*h+i[1]*d,t[2]=e[2]*u+n[2]*l+r[2]*h+i[2]*d,t}function we(t,e){e=e||1;var n=2*tt()*Math.PI,r=2*tt()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t}function Me(t,e,n){var r=e[0],i=e[1],a=e[2],o=n[3]*r+n[7]*i+n[11]*a+n[15];return o=o||1,t[0]=(n[0]*r+n[4]*i+n[8]*a+n[12])/o,t[1]=(n[1]*r+n[5]*i+n[9]*a+n[13])/o,t[2]=(n[2]*r+n[6]*i+n[10]*a+n[14])/o,t}function Se(t,e,n){var r=e[0],i=e[1],a=e[2];return t[0]=r*n[0]+i*n[3]+a*n[6],t[1]=r*n[1]+i*n[4]+a*n[7],t[2]=r*n[2]+i*n[5]+a*n[8],t}function Ee(t,e,n){var r=n[0],i=n[1],a=n[2],o=n[3],s=e[0],c=e[1],u=e[2],l=i*u-a*c,h=a*s-r*u,d=r*c-i*s,p=i*d-a*h,f=a*l-r*d,m=r*h-i*l,v=2*o;return l*=v,h*=v,d*=v,p*=2,f*=2,m*=2,t[0]=s+l+p,t[1]=c+h+f,t[2]=u+d+m,t}function Te(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[0],a[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),a[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Ae(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),a[1]=i[1],a[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Le(t,e,n,r){var i=[],a=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],a[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),a[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),a[2]=i[2],t[0]=a[0]+n[0],t[1]=a[1]+n[1],t[2]=a[2]+n[2],t}function Re(t,e){var n=t[0],r=t[1],i=t[2],a=e[0],o=e[1],s=e[2],c=Math.sqrt(n*n+r*r+i*i)*Math.sqrt(a*a+o*o+s*s),u=c&&ge(t,e)/c;return Math.acos(Math.min(Math.max(u,-1),1))}function Pe(t){return t[0]=0,t[1]=0,t[2]=0,t}function Ce(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function Oe(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function De(t,e){var n=t[0],r=t[1],i=t[2],a=e[0],o=e[1],s=e[2];return Math.abs(n-a)<=Q*Math.max(1,Math.abs(n),Math.abs(a))&&Math.abs(r-o)<=Q*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(i-s)<=Q*Math.max(1,Math.abs(i),Math.abs(s))}var Ie,Ne=ee,Be=ne,ze=re,Fe=he,Ue=de,Ge=Jt,He=pe,ke=(Ie=Yt(),function(t,e,n,r,i,a){var o,s;for(e||(e=3),n||(n=0),s=r?Math.min(r*e+n,t.length):t.length,o=n;o<s;o+=e)Ie[0]=t[o],Ie[1]=t[o+1],Ie[2]=t[o+2],i(Ie,Ie,a),t[o]=Ie[0],t[o+1]=Ie[1],t[o+2]=Ie[2];return t});function je(t){var e=t[0],n=t[1],r=t[2],i=t[3];return Math.hypot(e,n,r,i)}function Ve(t){var e=t[0],n=t[1],r=t[2],i=t[3];return e*e+n*n+r*r+i*i}!function(){var t,e=(t=new K(4),K!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();function We(){var t=new K(4);return K!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function qe(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function Xe(t,e,n){n*=.5;var r=Math.sin(n);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(n),t}function Ye(t,e){var n=2*Math.acos(e[3]),r=Math.sin(n/2);return r>Q?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),n}function Ze(t,e){var n=Tn(t,e);return Math.acos(2*n*n-1)}function Je(t,e,n){var r=e[0],i=e[1],a=e[2],o=e[3],s=n[0],c=n[1],u=n[2],l=n[3];return t[0]=r*l+o*s+i*u-a*c,t[1]=i*l+o*c+a*s-r*u,t[2]=a*l+o*u+r*c-i*s,t[3]=o*l-r*s-i*c-a*u,t}function $e(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],s=Math.sin(n),c=Math.cos(n);return t[0]=r*c+o*s,t[1]=i*c+a*s,t[2]=a*c-i*s,t[3]=o*c-r*s,t}function Qe(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],s=Math.sin(n),c=Math.cos(n);return t[0]=r*c-a*s,t[1]=i*c+o*s,t[2]=a*c+r*s,t[3]=o*c-i*s,t}function Ke(t,e,n){n*=.5;var r=e[0],i=e[1],a=e[2],o=e[3],s=Math.sin(n),c=Math.cos(n);return t[0]=r*c+i*s,t[1]=i*c-r*s,t[2]=a*c+o*s,t[3]=o*c-a*s,t}function tn(t,e){var n=e[0],r=e[1],i=e[2];return t[0]=n,t[1]=r,t[2]=i,t[3]=Math.sqrt(Math.abs(1-n*n-r*r-i*i)),t}function en(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=Math.sqrt(n*n+r*r+i*i),s=Math.exp(a),c=o>0?s*Math.sin(o)/o:0;return t[0]=n*c,t[1]=r*c,t[2]=i*c,t[3]=s*Math.cos(o),t}function nn(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=Math.sqrt(n*n+r*r+i*i),s=o>0?Math.atan2(o,a)/o:0;return t[0]=n*s,t[1]=r*s,t[2]=i*s,t[3]=.5*Math.log(n*n+r*r+i*i+a*a),t}function rn(t,e,n){return nn(t,e),En(t,t,n),en(t,t),t}function an(t,e,n,r){var i,a,o,s,c,u=e[0],l=e[1],h=e[2],d=e[3],p=n[0],f=n[1],m=n[2],v=n[3];return(a=u*p+l*f+h*m+d*v)<0&&(a=-a,p=-p,f=-f,m=-m,v=-v),1-a>Q?(i=Math.acos(a),o=Math.sin(i),s=Math.sin((1-r)*i)/o,c=Math.sin(r*i)/o):(s=1-r,c=r),t[0]=s*u+c*p,t[1]=s*l+c*f,t[2]=s*h+c*m,t[3]=s*d+c*v,t}function on(t){var e=tt(),n=tt(),r=tt(),i=Math.sqrt(1-e),a=Math.sqrt(e);return t[0]=i*Math.sin(2*Math.PI*n),t[1]=i*Math.cos(2*Math.PI*n),t[2]=a*Math.sin(2*Math.PI*r),t[3]=a*Math.cos(2*Math.PI*r),t}function sn(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n*n+r*r+i*i+a*a,s=o?1/o:0;return t[0]=-n*s,t[1]=-r*s,t[2]=-i*s,t[3]=a*s,t}function cn(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function un(t,e){var n,r=e[0]+e[4]+e[8];if(r>0)n=Math.sqrt(r+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var a=(i+1)%3,o=(i+2)%3;n=Math.sqrt(e[3*i+i]-e[3*a+a]-e[3*o+o]+1),t[i]=.5*n,n=.5/n,t[3]=(e[3*a+o]-e[3*o+a])*n,t[a]=(e[3*a+i]+e[3*i+a])*n,t[o]=(e[3*o+i]+e[3*i+o])*n}return t}function ln(t,e,n,r){var i=.5*Math.PI/180;e*=i,n*=i,r*=i;var a=Math.sin(e),o=Math.cos(e),s=Math.sin(n),c=Math.cos(n),u=Math.sin(r),l=Math.cos(r);return t[0]=a*c*l-o*s*u,t[1]=o*s*l+a*c*u,t[2]=o*c*u-a*s*l,t[3]=o*c*l+a*s*u,t}function hn(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var dn,pn,fn,mn,vn,gn,yn,xn=function(t){var e=new K(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},bn=function(t,e,n,r){var i=new K(4);return i[0]=t,i[1]=e,i[2]=n,i[3]=r,i},_n=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},wn=function(t,e,n,r,i){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t},Mn=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t},Sn=Je,En=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t},Tn=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},An=function(t,e,n,r){var i=e[0],a=e[1],o=e[2],s=e[3];return t[0]=i+r*(n[0]-i),t[1]=a+r*(n[1]-a),t[2]=o+r*(n[2]-o),t[3]=s+r*(n[3]-s),t},Ln=je,Rn=Ln,Pn=Ve,Cn=Pn,On=function(t,e){var n=e[0],r=e[1],i=e[2],a=e[3],o=n*n+r*r+i*i+a*a;return o>0&&(o=1/Math.sqrt(o)),t[0]=n*o,t[1]=r*o,t[2]=i*o,t[3]=a*o,t},Dn=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},In=function(t,e){var n=t[0],r=t[1],i=t[2],a=t[3],o=e[0],s=e[1],c=e[2],u=e[3];return Math.abs(n-o)<=Q*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-s)<=Q*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-c)<=Q*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(a-u)<=Q*Math.max(1,Math.abs(a),Math.abs(u))},Nn=(dn=Yt(),pn=$t(1,0,0),fn=$t(0,1,0),function(t,e,n){var r=ge(e,n);return r<-.999999?(ye(dn,pn,e),Ge(dn)<1e-6&&ye(dn,fn,e),ve(dn,dn),Xe(t,dn,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(ye(dn,e,n),t[0]=dn[0],t[1]=dn[1],t[2]=dn[2],t[3]=1+r,On(t,t))}),Bn=(mn=We(),vn=We(),function(t,e,n,r,i,a){return an(mn,e,i,a),an(vn,n,r,a),an(t,mn,vn,2*a*(1-a)),t}),zn=(gn=new K(9),K!=Float32Array&&(gn[1]=0,gn[2]=0,gn[3]=0,gn[5]=0,gn[6]=0,gn[7]=0),gn[0]=1,gn[4]=1,gn[8]=1,yn=gn,function(t,e,n,r){return yn[0]=n[0],yn[3]=n[1],yn[6]=n[2],yn[1]=r[0],yn[4]=r[1],yn[7]=r[2],yn[2]=-e[0],yn[5]=-e[1],yn[8]=-e[2],On(t,un(t,yn))});function Fn(t){var e,n,r=t[6].default,i=p(r,t,t[5],null);return{c(){e=x("div"),i&&i.c(),w(e,"class","gl")},m(r,a){g(r,e,a),i&&i.m(e,null),t[7](e),n=!0},p(t,e){var[n]=e;i&&i.p&&32&n&&m(i,r,t,t[5],n,null,null)},i(t){n||(V(i,t),n=!0)},o(t){W(i,t),n=!1},d(n){n&&y(e),i&&i.d(n),t[7](null)}}}function Un(t,e,i){var{visible:a=!1}=e,{enabled:o=!1}=e,{createScene:s=null}=e,{createEngine:c=null}=e,u=R("ar"),l=R("marker"),h={scene:null,objects:[]};L("gl",h);var d,p=null;A(()=>{var t=n(34);t("https://cdn.babylonjs.com/babylon.js",()=>{t(["https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js","https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js","https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js","https://cdn.babylonjs.com/gui/babylon.gui.min.js","https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"],"extensions"),t.ready("extensions",()=>new Promise((function(t,e){var n=(null!=c?c:t=>{var e=document.createElement("canvas");return e.addEventListener("touchmove",t=>{t.preventDefault()},!1),t.appendChild(e),new BABYLON.Engine(e,!0)})(d);return(null!=s?s:t=>new Promise((function(e,n){var r=new BABYLON.Scene(t);r.useRightHandedSystem=!0,r.clearColor=new BABYLON.Color4(0,0,0,0);var i=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,r);i.attachControl(t.getRenderingCanvas(),!0);new BABYLON.HemisphericLight("light1",new BABYLON.Vector3(1,1,0),r),new BABYLON.PointLight("light2",new BABYLON.Vector3(0,1,-1),r);var a=BABYLON.MeshBuilder.CreateBox("box",{width:1,height:1,size:1},r),o=new BABYLON.TransformNode("markerRoot");return a.parent=o,e([r,i,o])})))(n).then(t=>{var[e,s,c]=t;for(var d in c.setEnabled(!1),h.objects)h.objects[d].parent=c;i(9,p=t=>{c.setEnabled("true"===o&&t),e.render()}),l.watch(t=>{if(t){var e=r.create();"portrait"===u.orientation?r.rotateZ(e,t,-1*Math.PI/2):r.copy(e,t),c.setPreTransformMatrix(BABYLON.Matrix.FromArray(e)),i(1,a=!0)}else i(1,a=!1)});var f=(t,e,n,r)=>{null!=t&&("portrait"===r?(t.setSize(n,e),t.resize()):(t.setSize(e,n),t.resize()))};f(n,u.size.offsetWidth,u.size.offsetHeight,u.orientation),u.resized.watch(()=>{f(n,u.size.offsetWidth,u.size.offsetHeight,u.orientation)}),u.render.watch(t=>{if("true"===o&&a&&null!=e){for(var n in h.objects)h.objects[n].custom.animation&&h.objects[n].custom.animation.tick(t);e.render()}}),u.setup.watch(t=>{null!=s&&(s.freezeProjectionMatrix(BABYLON.Matrix.FromArray(t)),console.log("Camera projection set: "+t))}),console.log("Scene created")}),t()})))})});var{$$slots:f={},$$scope:m}=e;return t.$set=t=>{"visible"in t&&i(1,a=t.visible),"enabled"in t&&i(2,o=t.enabled),"createScene"in t&&i(3,s=t.createScene),"createEngine"in t&&i(4,c=t.createEngine),"$$scope"in t&&i(5,m=t.$$scope)},t.$$.update=()=>{514&t.$$.dirty&&null!=p&&p(a)},[d,a,o,s,c,m,f,function(t){C[t?"unshift":"push"](()=>{i(0,d=t)})}]}var Gn=class extends ${constructor(t){super(),J(this,t,Un,Fn,h,{visible:1,enabled:2,createScene:3,createEngine:4})}},Hn=n(1);n(101);function kn(t){var e,n,r,i,a=t[9].default,s=p(a,t,t[8],null),c=t[1]&&function(t){var e;return{c(){(e=x("div")).textContent="".concat(t[1])},m(t,n){g(t,e,n)},p:o,d(t){t&&y(e)}}}(t);return{c(){e=x("div"),s&&s.c(),n=_(),r=x("div"),c&&c.c(),w(e,"class","gl"),w(r,"id","debuginfo"),w(r,"class","svelte-199l4wg")},m(a,o){g(a,e,o),s&&s.m(e,null),t[10](e),g(a,n,o),g(a,r,o),c&&c.m(r,null),i=!0},p(t,e){var[n]=e;s&&s.p&&256&n&&m(s,a,t,t[8],n,null,null),t[1]&&c.p(t,n)},i(t){i||(V(s,t),i=!0)},o(t){W(s,t),i=!1},d(i){i&&y(e),s&&s.d(i),t[10](null),i&&y(n),i&&y(r),c&&c.d()}}}function jn(t,e,n){var{enabled:o="true"}=e,{visible:s="true"}=e,{directUpdate:c="false"}=e,{scale:u="1"}=e,{createScene:l=null}=e,{createEngine:h=null}=e,d=R("ar"),p=R("marker"),f={scene:null,objects:[]};L("gl",f);var m,v=null;document.getElementById("glcanvas");A(()=>{var t=(null!=h?h:t=>{var e=document.createElement("canvas");e.addEventListener("touchmove",t=>{t.preventDefault()},!1),t.appendChild(e);var n=new Hn.WebGLRenderer({canvas:e,alpha:!0});return n.autoClear=!1,n})(m);(null!=l?l:()=>new Promise((function(t,e){var n=new Hn.Scene,r=new Hn.Camera;r.matrixAutoUpdate=!1,r.position.set(0,0,0),r.updateMatrix(),n.add(r);var i=new Hn.PointLight(16777215);i.position.set(400,500,100),n.add(i);var a=new Hn.PointLight(16777215);a.position.set(-400,-500,-100),n.add(a);var o=new Hn.Group;o.matrixAutoUpdate=!1;var s=new Hn.Mesh(new Hn.BoxGeometry(1,1,1),new Hn.MeshLambertMaterial({color:16777215,wireframe:!1,opacity:.5,transparent:!0}));return o.add(s),n.add(o),console.log(n),t([n,r,o])})))(t,m).then(e=>{var[l,h,m]=e;for(var g in f.scene=l,n(12,v=e=>{m.visible="true"===o&&"true"===e,t.clear&&t.clear(),t.render(l,h)}),p.watch(t=>{if(t){var e=r.create();if("portrait"===f.orientation?r.rotateZ(e,t,-1*Math.PI/2):r.copy(e,t),"true"===c)m.matrix.fromArray(e);else{var o=r.getTranslation(i.create(),e),l=r.getRotation(a.create(),e);m.quaternion.fromArray(l),m.position.fromArray(o),m.scale.set(u,u,u),m.updateMatrix(),m.updateWorldMatrix(!1,!0)}n(2,s="true")}else n(2,s="false")}),f.objects)m.add(f.objects[g]);d.setup.watch(t=>{null!=h&&(h.projectionMatrix.fromArray(t),console.log("Camera projection set: "+t))});var y=(t,e,n,r)=>{null!=t&&("portrait"===r?t.setSize(n,e):t.setSize(e,n))};y(t,d.size.offsetWidth,d.size.offsetHeight,d.orientation),d.resized.watch(()=>{y(t,d.size.offsetWidth,d.size.offsetHeight,d.orientation)}),d.render.watch(e=>{if("true"===o&&l&&"true"===s){for(var n in t.clear&&t.clear(),f.objects)f.objects[n].custom.animation&&f.objects[n].custom.animation.tick(e);t.render(l,h)}}),console.log("Scene created")})});var{$$slots:g={},$$scope:y}=e;return t.$set=t=>{"enabled"in t&&n(3,o=t.enabled),"visible"in t&&n(2,s=t.visible),"directUpdate"in t&&n(4,c=t.directUpdate),"scale"in t&&n(5,u=t.scale),"createScene"in t&&n(6,l=t.createScene),"createEngine"in t&&n(7,h=t.createEngine),"$$scope"in t&&n(8,y=t.$$scope)},t.$$.update=()=>{4100&t.$$.dirty&&null!=v&&v(s)},[m,void 0,s,o,c,u,l,h,y,g,function(t){C[t?"unshift":"push"](()=>{n(0,m=t)})}]}var Vn=class extends ${constructor(t){super(),J(this,t,jn,kn,h,{enabled:3,visible:2,directUpdate:4,scale:5,createScene:6,createEngine:7})}};var Wn=n(10);n(106);n(107);var qn=n(22);function Xn(t,e){let n,r,i,a=t;return e?(i=e.compositeName,0===t.length?(n=i.path,r=i.fullName):(n=i.path.concat([t]),r=0===i.fullName.length?t:i.fullName+"/"+t)):(n=0===t.length?[]:[t],r=t),{shortName:a,fullName:r,path:n}}function Yn({node:t=[],from:e,source:n,parent:r=e||n,to:i,target:a,child:o=i||a,scope:s={},meta:c={},family:u={type:"regular"}}={}){let l=Br(r),h=Br(u.links),d=Br(u.owners),p=[],f={};for(let e=0;e<t.length;e++){let n=t[e];n&&(p.push(n),zr(n,f))}let m={seq:p,next:Br(o),meta:c,scope:s,family:{type:u.type||"crosslink",links:h,owners:d},reg:f};for(let t=0;t<h.length;t++)cr(h[t]).push(m);for(let t=0;t<d.length;t++)ur(d[t]).push(m);for(let t=0;t<l.length;t++)l[t].next.push(m);return m}function Zn(t,e){let n=(t,...e)=>n.create(t,e,e);n.graphite=Yn({meta:di("event",n,e,t)}),n.create=t=>(Jr(n,t),t),n.watch=_r(ci,n),n.map=t=>{let e,r;ir(t)&&(e=t,r=t.name,t=t.fn);let i=Zn(gr(n,r),e);return fi(n,i,"map",t),i},n.filter=t=>ar(t)?(console.error(".filter(fn) is deprecated, use .filterMap instead"),Jn(n,t)):mi(n,"filter",t.fn,[Ar({fn:Ir})]),n.filterMap=_r(Jn,n),n.prepend=t=>{let e=Zn("* → "+n.shortName,{parent:mr(n)}),r=oi();return r&&sr(e).seq.push(r.upward),fi(e,n,"prepend",t),hi(n,e),e};let r=oi();return r&&(sr(n).meta.nativeTemplate=r),ii(n)}function Jn(t,e){return mi(t,"filterMap",e,[Tr({fn:Ir}),Er.defined()])}function $n(t,e){function n(t,e){s.off(t),fr(s).set(t,ri(vi(t,s,"on",1,e)))}let r=Pr(t),i=Pr(t),a=pi("updates"),o=oi();r.after=[{type:"copy",to:i}],o&&o.plain.push(r);let s={subscribers:new Map,updates:a,defaultState:t,stateRef:r,getState(){let t=Zr();return Cr(t&&t.reg[r.id]?t.reg[r.id]:r)},setState(t){Jr({target:s,params:t,defer:1})},reset(...t){for(let e of t)s.on(e,()=>s.defaultState);return s},on(t,e){if(Array.isArray(t))for(let r of t)n(r,e);else n(t,e);return s},off(t){let e=fr(s).get(t);return e&&(e(),fr(s).delete(t)),s},map(t,e){let n,i,a;ir(t)&&(n=t,i=t.name,e=t.firstState,t=t.fn);let o=s.getState(),c=oi();c?a=null:void 0!==o&&(a=t(o,e));let u=$n(a,{name:gr(s,i),config:n,strict:0}),l=vi(s,u,"map",0,t);return lr(u).before=[{type:"map",fn:t,from:r}],c&&(c.plain.includes(r)||l.seq.includes(c.loader)||l.seq.unshift(c.loader)),u},watch(t,e){if(!e||!Kn(t)){ar(t)||rr("watch requires function handler");let e=oi();return e?e.watch.push({of:r,fn:t}):t(s.getState()),ci(s,t)}return ar(e)||rr("second argument should be a function"),t.watch(t=>e(s.getState(),t))}};return s.graphite=Yn({scope:{state:r},node:[Er.defined(),Rr({store:r}),Er.changed({store:i}),Rr({store:i})],child:a,meta:di("store",s,e)}),li&&void 0===t&&rr("current state can't be undefined, use null instead"),o&&(sr(s).meta.nativeTemplate=o),Nr(s,[a]),ii(s)}function Qn(t,e){let n={};return gi(e,(e,r)=>{let i=n[r]=Zn(r,{parent:mr(t)});t.on(i,e),hi(t,i)}),n}let Kn=t=>(ar(t)||ir(t))&&"kind"in t;const tr=t=>e=>Kn(e)&&e.kind===t;let er=tr("store"),nr=(tr("event"),tr("effect"),tr("domain"));let rr=t=>{throw Error(t)},ir=t=>"object"==typeof t&&null!==t,ar=t=>"function"==typeof t,or=t=>{ir(t)||ar(t)||rr("expect value to be an object")},sr=t=>t.graphite||t,cr=t=>t.family.owners,ur=t=>t.family.links,lr=t=>t.stateRef,hr=t=>t.config,dr=t=>t.ɔ,pr=t=>t.value,fr=t=>t.subscribers,mr=t=>t.parent,vr=(t,e)=>""+t.shortName+e,gr=(t,e)=>null==e?vr(t," → *"):e;const yr=()=>{let t=0;return()=>(++t).toString(36)};let xr=yr(),br=yr(),_r=(t,e)=>t.bind(null,e),wr=(t,e,n)=>t.bind(null,e,n);const Mr=(t,e,n)=>({id:br(),type:t,data:n,hasRef:e});let Sr=({from:t="store",store:e,target:n,to:r=(n?"store":"stack")})=>Mr("mov","store"===t,{from:t,store:e,to:r,target:n}),Er={defined:()=>Mr("check",0,{type:"defined"}),changed:({store:t})=>Mr("check",1,{type:"changed",store:t})},Tr=wr(Mr,"compute",0),Ar=wr(Mr,"filter",0),Lr=wr(Mr,"run",0),Rr=({store:t})=>Sr({from:"stack",target:t});let Pr=t=>({id:br(),current:t}),Cr=({current:t})=>t,Or=(t,{fn:e},{a:n})=>e(t,n),Dr=(t,{fn:e},{a:n})=>e(n,t),Ir=(t,{fn:e})=>e(t),Nr=(t,e)=>{let n=sr(t);for(let t=0;t<e.length;t++){let r=sr(e[t]);"domain"!==n.family.type&&(r.family.type="crosslink"),cr(r).push(n),ur(n).push(r)}};const Br=(t=[])=>{let e=[];if(Array.isArray(t))for(let n=0;n<t.length;n++)Array.isArray(t[n])?e.push(...t[n]):e.push(t[n]);else e.push(t);return e.map(sr)};let zr=({hasRef:t,type:e,data:n},r)=>{let i;t&&(i=n.store,r[i.id]=i),"mov"===e&&"store"===n.to&&(i=n.target,r[i.id]=i)},Fr=null;const Ur=(t,e)=>{if(!t)return e;if(!e)return t;let n,r=t.v.type===e.v.type;return(r&&t.v.id>e.v.id||!r&&"sampler"===t.v.type)&&(n=t,t=e,e=n),n=Ur(t.r,e),t.r=t.l,t.l=n,t},Gr=[];let Hr=0;for(;Hr<5;)Gr.push({first:null,last:null,size:0}),Hr+=1;const kr=()=>{for(let t=0;t<5;t++){let e=Gr[t];if(e.size>0){if(2===t||3===t){e.size-=1;let t=Fr.v;return Fr=Ur(Fr.l,Fr.r),t}1===e.size&&(e.last=null);let n=e.first;return e.first=n.r,e.size-=1,n.v}}},jr=(t,e,n,r,i)=>Vr(0,{a:null,b:null,node:n,parent:r,value:i,page:e},t),Vr=(t,e,n,r=0)=>{let i=Wr(n),a=Gr[i],o={v:{idx:t,stack:e,type:n,id:r},l:0,r:0};2===i||3===i?Fr=Ur(Fr,o):(0===a.size?a.first=o:a.last.r=o,a.last=o),a.size+=1},Wr=t=>{switch(t){case"child":return 0;case"pure":return 1;case"barrier":return 2;case"sampler":return 3;case"effect":return 4;default:return-1}},qr=new Set;let Xr=0,Yr=null,Zr=()=>Yr,Jr=(t,e,n)=>{let r=Yr,i=null;if(t.target&&(e=t.params,n=t.defer,r="page"in t?t.page:r,t.stack&&(i=t.stack),t=t.target),Array.isArray(t))for(let n=0;n<t.length;n++)jr("pure",r,sr(t[n]),i,e[n]);else jr("pure",r,sr(t),i,e);n&&Xr||(()=>{let t,e,n,r,i,a,o={alreadyStarted:Xr,currentPage:Yr};Xr=1;t:for(;r=kr();){let{idx:o,stack:s,type:c}=r;n=s.node,Yr=i=s.page,a=(i||n).reg;let u={fail:0,scope:n.scope};t=e=0;for(let r=o;r<n.seq.length&&!t;r++){let l=n.seq[r],h=l.data;switch(l.type){case"barrier":{let t=h.barrierID;i&&(t=`${i.fullID}_${t}`);let e=h.priority;if(r!==o||c!==e){qr.has(t)||(qr.add(t),Vr(r,s,e,t));continue t}qr.delete(t);break}case"mov":{let t;switch(h.from){case"stack":t=pr(s);break;case"a":t=s.a;break;case"b":t=s.b;break;case"value":t=h.store;break;case"store":a[h.store.id]||(s.page=i=null,a=n.reg),t=Cr(a[h.store.id])}switch(h.to){case"stack":s.value=t;break;case"a":s.a=t;break;case"b":s.b=t;break;case"store":a[h.target.id].current=t}break}case"check":switch(h.type){case"defined":e=void 0===pr(s);break;case"changed":e=pr(s)===Cr(a[h.store.id])}break;case"filter":e=!$r(u,h,s);break;case"run":if(r!==o||"effect"!==c){Vr(r,s,"effect");continue t}case"compute":s.value=$r(u,h,s)}t=u.fail||e}if(!t)for(let t=0;t<n.next.length;t++)jr("child",i,n.next[t],s,pr(s))}Xr=o.alreadyStarted,Yr=o.currentPage})()};const $r=(t,{fn:e},n)=>{try{return e(pr(n),t.scope,n)}catch(e){console.error(e),t.fail=1}};const Qr=(t,e)=>{let n=t.indexOf(e);-1!==n&&t.splice(n,1)},Kr=(t,e)=>{Qr(t.next,e),Qr(cr(t),e),Qr(ur(t),e)},ti=(t,e,n)=>{let r;t.next.length=0,t.seq.length=0,t.scope=null;let i=ur(t);for(;r=i.pop();)Kr(r,t),(e||n&&!t.meta.sample||"crosslink"===r.family.type)&&ti(r,e,n);for(i=cr(t);r=i.pop();)Kr(r,t),n&&"crosslink"===r.family.type&&ti(r,e,n)},ei=t=>t.clear();let ni=(t,{deep:e}={})=>{let n=0;if(t.ownerSet&&t.ownerSet.delete(t),er(t))ei(fr(t));else if(nr(t)){n=1;let e=t.history;ei(e.events),ei(e.effects),ei(e.stores),ei(e.domains)}ti(sr(t),!!e,n)},ri=t=>{let e=wr(ni,t,void 0);return e.unsubscribe=e,e},ii=t=>(ai&&Nr(pr(ai),[t]),t),ai=null,oi=()=>ai&&ai.template,si=(t,e,{node:n,scope:r,meta:i})=>ii(Yn({node:n,parent:t,child:e,scope:r,meta:i,family:{owners:[t,e],links:e}})),ci=(t,e)=>ri(ii(Yn({scope:{fn:e},node:[Lr({fn:Ir})],parent:t,meta:{op:"watch"},family:{owners:t}})));const ui=(t,e)=>(ir(t)&&(ui(hr(t),e),null!=t.name&&(ir(t.name)?ui(t.name,e):e.name=t.name),t.loc&&(e.loc=t.loc),(t.sid||null===t.sid)&&(e.sid=t.sid),t.handler&&(e.handler=t.handler),mr(t)&&(e.parent=mr(t)),"strict"in t&&(e.strict=t.strict),t.named&&(e.named=t.named),ui(dr(t),e)),e);let li,hi=(t,e)=>{mr(t)&&mr(t).hooks.event(e)},di=(t,e,n,r)=>{let i=ui({name:r,config:n},{}),a=xr(),{parent:o=null,sid:s=null,strict:c=1,named:u=null}=i,l=u||i.name||("domain"===t?"":a),h=Xn(l,o);return e.kind=t,e.id=a,e.sid=s,e.shortName=l,e.parent=o,e.compositeName=h,e.defaultConfig=i,e.thru=t=>t(e),e.getType=()=>h.fullName,"domain"!==t&&(e.subscribe=t=>(or(t),e.watch(ar(t)?t:e=>{t.next&&t.next(e)})),e[qn.a]=()=>e),li=c,{unit:t,name:l,sid:s,named:u}},pi=t=>Zn({named:t});const fi=(t,e,n,r)=>si(t,e,{scope:{fn:r},node:[Tr({fn:Ir})],meta:{op:n}}),mi=(t,e,n,r)=>{let i;ir(n)&&(i=n,n=n.fn);let a=Zn(vr(t," →? *"),i);return si(t,a,{scope:{fn:n},node:r,meta:{op:e}}),a},vi=(t,e,n,r,i)=>{let a=lr(e),o=[Sr({store:a,to:"a"}),Tr({fn:r?Dr:Or}),Er.defined(),Er.changed({store:a}),Rr({store:a})],s=oi();if(s&&(o.unshift(s.loader),o.push(s.upward),er(t))){let e=lr(t);s.plain.includes(e)||(s.closure.includes(e)||s.closure.push(e),a.before||(a.before=[]),a.before.push({type:"closure",of:e}))}return si(t,e,{scope:{fn:i},node:o,meta:{op:n}})};let gi=(t,e)=>{for(let n in t)e(t[n],n)};Yn({node:[Lr({fn({fn:t,value:e}){t(e)}})],meta:{op:"fx",fx:"sidechain"}});Ar({fn:(t,{state:e})=>void 0!==t&&t!==Cr(e)}),Tr({fn:t=>t});var yi=n(56);n(109);function xi(t){var e;return{c(){(e=x("div")).innerHTML='<div class="px-6 py-4"><p class="text-gray-500 text-base">Наведите камеру на маркер</p></div>',w(e,"id","markerWarning"),w(e,"class","max-w-sm rounded overflow-hidden shadow-lg bg-cover svelte-fn0nsh")},m(t,n){g(t,e,n)},d(t){t&&y(e)}}}function bi(t){var e,n,r,i,a,s,c,u,l,h,d,p,f,m=t[3].size.videoWidth+"",S=t[3].size.videoHeight+"",E=t[3].orientation+"",T=""!=t[1]&&_i(t),A=""!=Mi&&{c(){(f=x("div")).textContent="Error: ".concat(Mi)},m(t,e){g(t,f,e)},p:o,d(t){t&&y(f)}};return{c(){e=x("div"),n=x("div"),r=b("Video size: "),i=b(m),a=b(", "),s=b(S),c=_(),u=x("div"),l=b("Orientation: "),h=b(E),d=_(),T&&T.c(),p=_(),A&&A.c(),w(e,"id","debuginfo"),w(e,"class","svelte-fn0nsh")},m(t,o){g(t,e,o),v(e,n),v(n,r),v(n,i),v(n,a),v(n,s),v(e,c),v(e,u),v(u,l),v(u,h),v(e,d),T&&T.m(e,null),v(e,p),A&&A.m(e,null)},p(t,n){8&n&&m!==(m=t[3].size.videoWidth+"")&&M(i,m),8&n&&S!==(S=t[3].size.videoHeight+"")&&M(s,S),8&n&&E!==(E=t[3].orientation+"")&&M(h,E),""!=t[1]?T?T.p(t,n):((T=_i(t)).c(),T.m(e,p)):T&&(T.d(1),T=null),""!=Mi&&A.p(t,n)},d(t){t&&y(e),T&&T.d(),A&&A.d()}}}function _i(t){var e,n,r;return{c(){e=x("div"),n=b("Msg: "),r=b(t[1])},m(t,i){g(t,e,i),v(e,n),v(e,r)},p(t,e){2&e&&M(r,t[1])},d(t){t&&y(e)}}}function wi(t){var e,n,r,i,a,o,s,c,u=t[15].default,l=p(u,t,t[14],null),h=t[4]&&xi(),d=("true"===t[0]||!0===t[0])&&bi(t);return{c(){e=x("div"),n=x("video"),r=_(),i=x("div"),l&&l.c(),a=_(),h&&h.c(),o=_(),d&&d.c(),s=b(""),w(n,"id","videocanvas"),n.controls="",n.autoplay="true",n.muted="true",n.loop="true",n.playsInline="true",w(n,"class","svelte-fn0nsh"),w(i,"id","markercontainer"),w(i,"class","svelte-fn0nsh"),w(e,"id","videoContainer"),w(e,"class","svelte-fn0nsh")},m(u,p){g(u,e,p),v(e,n),v(e,r),v(e,i),l&&l.m(i,null),t[16](i),g(u,a,p),h&&h.m(u,p),g(u,o,p),d&&d.m(u,p),g(u,s,p),c=!0},p(t,e){var[n]=e;l&&l.p&&16384&n&&m(l,u,t,t[14],n,null,null),t[4]?h||((h=xi()).c(),h.m(o.parentNode,o)):h&&(h.d(1),h=null),"true"===t[0]||!0===t[0]?d?d.p(t,n):((d=bi(t)).c(),d.m(s.parentNode,s)):d&&(d.d(1),d=null)},i(t){c||(V(l,t),c=!0)},o(t){W(l,t),c=!1},d(n){n&&y(e),l&&l.d(n),t[16](null),n&&y(a),h&&h.d(n),n&&y(o),d&&d.d(n),n&&y(s)}}}var Mi="";function Si(t,e,r){var i,a,o,{smoothingEnabled:s=!1}=e,{thresholdMode:c=2}=e,{threshold:u=160}=e,{debug:l=!1}=e,{debug_info:h=!1}=e,{maxARVideoSize:p=640}=e,{markerLossDelay:f=100}=e,{pattRatio:m=.9}=e,v=$n(!0);a=v,o=t=>r(4,i=t),t.$$.on_destroy.push(d(a,o));var g,y=Qn(v,{show:(t,e)=>e}),x=Qn($n(0),{inc:t=>(y.show(!1),console.log("Marker count: ",t+1),t+1),dec:t=>(console.log("Marker count: ",t-1),1===t&&y.show(!0),t-1)}),b="",_=[],w={size:{videoWidth:null,videoHeight:null,offsetWidth:320,offsetHeight:240,marginLeft:0,marginTop:0},orientation:null,cameramat:null,marker:{visible:!1,mat:null},setup:Zn(),resized:Zn(),render:Zn(),markerFound:Zn(),markerLost:Zn(),loadPattern:(t,e)=>{_.push([t,e])},visibleMarkers:x};L("ar",w);var M=f,S=!1;A(()=>new Promise((function(t,e){var i=n(34);return i(l?["/js/artoolkit/artoolkit.api.js","/js/artoolkit/artoolkit.debug.js"]:["/js/artoolkit/artoolkit_wasm.js"],"bundle"),i.ready("bundle",()=>new Promise((function(t,e){return i("",()=>new Promise((function(t,e){var n=new ARCameraParam;return n.onload=()=>new Promise((function(t,e){if(S)return t();S=!0;var i=document.getElementById("videocanvas");if(void 0===navigator.mediaDevices||void 0===navigator.mediaDevices.enumerateDevices||void 0===navigator.mediaDevices.getUserMedia){var a="";void 0===navigator.mediaDevices?a="navigator.mediaDevices":void 0===navigator.mediaDevices.enumerateDevices?a="navigator.mediaDevices.enumerateDevices":void 0===navigator.mediaDevices.getUserMedia?a="navigator.mediaDevices.getUserMedia":console.assert(!1),onError({name:"",message:"WebRTC issue-! "+a+" not present in your browser"})}var o=null;return i.addEventListener("canplay",t=>new Promise((function(e,i){var a=t.target,h=t=>{if(r(2,g.style.transformOrigin="0 0",g),r(2,g.style.top=t.top,g),r(2,g.style.left=t.left,g),r(3,w.size.videoWidth=t.videoWidth,w),r(3,w.size.videoHeight=t.videoHeight,w),r(3,w.size.offsetWidth=t.offsetWidth,w),r(3,w.size.offsetHeight=t.offsetHeight,w),window.innerWidth<window.innerHeight?(r(3,w.orientation="portrait",w),r(2,g.style.width=t.offsetHeight+"px",g),r(2,g.style.height=t.offsetWidth+"px",g),r(2,g.style.transform="rotate(-90deg) translateX(-100%)",g)):(r(3,w.orientation="landscape",w),r(2,g.style.width=t.offsetWidth+"px",g),r(2,g.style.height=t.offsetHeight+"px",g),r(2,g.style.transform="",g)),null!=o){var[e,n]="landscape"===w.orientation?[a.videoWidth,a.videoHeight]:[a.videoHeight,a.videoWidth];o.orientation=w.orientation,o.videoWidth=e,o.videoHeight=n}r(1,b="resized"),w.resized()};new yi.a(()=>{null!=w&&null!=a&&(null==o&&(o=function(t,e){var n=t=>new Promise((function(e,n){return"true"===l&&(console.log("Detected marker with ids:",t.data.marker.id,t.data.marker.idPatt,t.data.marker.idMatrix),console.log("Marker data",t.data.marker),console.log("Marker transform matrix:",[].join.call(t.data.matrix,", "))),w.markerFound({canvas:t.target.canvas,data:t.data}),e()})),i=(p||Math.max(t.videoWidth,t.videoHeight))/Math.max(t.videoWidth,t.videoHeight),a=l?t.videoWidth:i*t.videoWidth,o=l?t.videoHeight:i*t.videoHeight;!l&&t.videoWidth<t.videoHeight&&([o,a]=[a,o]);var h=new ARController(a,o,e);return h.onload=()=>new Promise((function(e,i){return!0,console.log("arctrl loaded"),r(1,b="arctrl loaded"),h.setPatternDetectionMode(artoolkit.AR_TEMPLATE_MATCHING_MONO_AND_MATRIX),h.setMatrixCodeType(artoolkit.AR_MATRIX_CODE_4x4_BCH_13_5_5),h.setPattRatio(m),h.setThresholdMode(c),h.setThreshold(u),h.ctx.mozImageSmoothingEnabled=s,h.ctx.webkitImageSmoothingEnabled=s,h.ctx.msImageSmoothingEnabled=s,h.ctx.imageSmoothingEnabled=s,h.image=t,r(1,b="arctrl video assigned"),w.setup(h.getCameraMatrix()),r(1,b="arctrl camera matrix set"),r(3,w.loadPattern=(t,e)=>h.loadMarker(t,t=>new Promise((function(n,r){return console.log("Marker loaded, id:",t),e(t),n()}))),w),_.forEach(t=>{var[e,n]=t;w.loadPattern(e,n)}),r(1,b="arctrl camera markers set"),h.addEventListener("getMarker",n),r(1,b="arctrl loop started"),"true"!==l&&!0!==l||(r(6,l=!1),h.debugSetup()),e()})),h}(a,n)),h(a))}).observe(a),h(a);var d=()=>new Promise((function(t,e){return requestAnimationFrame(d),null==o||(o.process(a),o.getMarkerNum()>0?M=f:(0===M&&w.markerLost(),M--),w.render()),t()}));return d(),a.play(),e()}))),navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"environment"}}).then(t=>{console.log("Got camera object"),i.muted=!0,i.playsinline=!0,i.loop=!0,i.srcObject=t},t=>{console.error("Error: "+t),i.src="/assets/Output_4-1.webm"}),console.log("artoolkit loaded"),t()})),n.load("/assets/camera_para.dat"),t()}))),t()}))),t()})));var{$$slots:E={},$$scope:T}=e;return t.$set=t=>{"smoothingEnabled"in t&&r(7,s=t.smoothingEnabled),"thresholdMode"in t&&r(8,c=t.thresholdMode),"threshold"in t&&r(9,u=t.threshold),"debug"in t&&r(6,l=t.debug),"debug_info"in t&&r(0,h=t.debug_info),"maxARVideoSize"in t&&r(10,p=t.maxARVideoSize),"markerLossDelay"in t&&r(11,f=t.markerLossDelay),"pattRatio"in t&&r(12,m=t.pattRatio),"$$scope"in t&&r(14,T=t.$$scope)},[h,b,g,w,i,v,l,s,c,u,p,f,m,"/js/artoolkit/artoolkit_wasm.wasm",T,E,function(t){C[t?"unshift":"push"](()=>{r(2,g=t)})}]}var Ei=class extends ${constructor(t){super(),J(this,t,Si,wi,h,{smoothingEnabled:7,thresholdMode:8,threshold:9,debug:6,debug_info:0,maxARVideoSize:10,markerLossDelay:11,pattRatio:12,artoolkit_wasm_url:13})}get artoolkit_wasm_url(){return this.$$.ctx[13]}};class Ti{constructor(t,e,n){this.visible=!1,this.markerLostCountdown=n,this.update=Zn(),this.marker=$n(r),this.marker.on(this.update,(e,n)=>(null!==n?this.visible||(t.visibleMarkers.inc(),this.visible=!0):this.visible&&(this.visible=!1,t.visibleMarkers.dec()),n)),void 0===e?t.markerFound.watch(t=>{this.update(t.data.matrixGL_RH)}):t.markerFound.watch(t=>{e(t)?(this.update(t.data.matrixGL_RH),this.markerLostCountdown=n):(0===this.markerLostCountdown&&this.update(null),this.markerLostCountdown--)}),t.markerLost.watch(()=>{this.update(null)})}watch(t){this.marker.watch(t)}}function Ai(t){var e,n,r=t[3].default,i=p(r,t,t[2],null);return{c(){e=x("div"),i&&i.c(),w(e,"class","marker")},m(t,r){g(t,e,r),i&&i.m(e,null),n=!0},p(t,e){var[n]=e;i&&i.p&&4&n&&m(i,r,t,t[2],n,null,null)},i(t){n||(V(i,t),n=!0)},o(t){W(i,t),n=!1},d(t){t&&y(e),i&&i.d(t)}}}function Li(t,e,n){var{pattern:r="assets/hiro.patt"}=e,{markerLossDelay:i=10}=e,a=R("ar"),o=-1;a.loadPattern(r,t=>{o=t}),L("marker",new Ti(a,t=>o>=0&&t.data.marker.idPatt===o,i));var{$$slots:s={},$$scope:c}=e;return t.$set=t=>{"pattern"in t&&n(0,r=t.pattern),"markerLossDelay"in t&&n(1,i=t.markerLossDelay),"$$scope"in t&&n(2,c=t.$$scope)},[r,i,c,s]}var Ri=class extends ${constructor(t){super(),J(this,t,Li,Ai,h,{pattern:0,markerLossDelay:1})}};n(110);function Pi(t){var e,n,r,i,a,o;return e=new Vn({props:{directUpdate:"false",scale:"0.005",createEngine:t[2],createScene:t[4]}}),r=new Vn({props:{enabled:"true"}}),a=new Gn({props:{createScene:t[3],enabled:"true"}}),{c(){X(e.$$.fragment),n=_(),X(r.$$.fragment),i=_(),X(a.$$.fragment)},m(t,s){Y(e,t,s),g(t,n,s),Y(r,t,s),g(t,i,s),Y(a,t,s),o=!0},p(t,n){var r={};1024&n&&(r.$$scope={dirty:n,ctx:t}),e.$set(r)},i(t){o||(V(e.$$.fragment,t),V(r.$$.fragment,t),V(a.$$.fragment,t),o=!0)},o(t){W(e.$$.fragment,t),W(r.$$.fragment,t),W(a.$$.fragment,t),o=!1},d(t){Z(e,t),t&&y(n),Z(r,t),t&&y(i),Z(a,t)}}}function Ci(t){var e,n;return e=new Ri({props:{pattern:"/assets/pattern-qr-marker.patt",$$slots:{default:[Pi]},$$scope:{ctx:t}}}),{c(){X(e.$$.fragment)},m(t,r){Y(e,t,r),n=!0},p(t,n){var r={};1024&n&&(r.$$scope={dirty:n,ctx:t}),e.$set(r)},i(t){n||(V(e.$$.fragment,t),n=!0)},o(t){W(e.$$.fragment,t),n=!1},d(t){Z(e,t)}}}function Oi(t){var e,n,r,i,a,o,s,c,u;return n=new Ei({props:{$$slots:{default:[Ci]},$$scope:{ctx:t}}}),{c(){e=x("main"),X(n.$$.fragment),r=_(),i=x("div"),a=x("address"),(o=x("a")).textContent="Позвони мне",s=_(),(c=x("div")).innerHTML='<div class="max-w-sm w-full lg:max-w-full lg:flex"><div class="h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden" style="background-image: url(&#39;/assets/img/card-left.jpg&#39;)" title="Woman holding a mug"></div> \n        <div class="border-r border-b border-l border-gray-400 lg:border-l-0 lg:border-t lg:border-gray-400 bg-transparent rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal"><div class="mb-8"><p class="text-sm text-gray-600 flex items-center"><svg class="fill-current text-gray-500 w-3 h-3 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M4 8V6a6 6 0 1 1 12 0v2h1a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2h1zm5 6.73V17h2v-2.27a2 2 0 1 0-2 0zM7 6v2h6V6a3 3 0 0 0-6 0z"></path></svg>\n                    Members only\n                </p> \n                <div class="text-gray-900 font-bold text-xl mb-2">Can coffee make you a better developer?</div> \n                <p class="text-gray-700 text-base">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.</p></div> \n            <div class="flex items-center"><img class="w-10 h-10 rounded-full mr-4" src="/assets/img/jonathan.jpg" alt="Avatar of Jonathan Reinink"> \n                <div class="text-sm"><p class="text-gray-900 leading-none">Jonathan Reinink</p> \n                    <p class="text-gray-600">Aug 18</p> \n                    <a href="tel:+1234567890">Call me today for free!</a></div></div></div></div>',w(o,"href","tel:123-456-7890"),w(i,"id","tel"),w(i,"class","bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"),w(c,"class","card")},m(l,h){g(l,e,h),Y(n,e,null),v(e,r),v(e,i),v(i,a),v(a,o),t[6](o),g(l,s,h),g(l,c,h),t[7](c),u=!0},p(t,e){var[r]=e,i={};1024&r&&(i.$$scope={dirty:r,ctx:t}),n.$set(i)},i(t){u||(V(n.$$.fragment,t),u=!0)},o(t){W(n.$$.fragment,t),u=!1},d(r){r&&y(e),Z(n),t[6](null),r&&y(s),r&&y(c),t[7](null)}}}function Di(t,e,r){var i,a,o=document.documentElement;o.classList.add("text-gray-900"),o.classList.add("antialiased"),o.classList.add("leading-tight");var{SCENE_SCALE:s=.1}=e;return t.$set=t=>{"SCENE_SCALE"in t&&r(5,s=t.SCENE_SCALE)},[i,a,t=>{var e=new Wn.CSS3DRenderer;return t.appendChild(e.domElement),e},t=>new Promise((function(e,n){var r,i,a;return Promise.resolve(BABYLON.SceneLoader.LoadAsync("","https://digitalrats.ru/assets/babylonJS_logo_v3.babylon",t)).then((function(t){try{return(r=t).useRightHandedSystem=!0,r.clearColor=new BABYLON.Color4(0,0,0,0),i=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,r),a=r.rootNodes[1],e([r,i,a])}catch(t){return n(t)}}),n)})),t=>new Promise((function(t,e){var r=n(1),a=n(10),o=new r.Scene,c=new r.PerspectiveCamera;c.matrixAutoUpdate=!1,c.position.set(0,0,0),c.updateMatrix(),o.add(c);var u=new r.PointLight(16777215);u.position.set(400,500,100),o.add(u);var l=new r.PointLight(16777215);l.position.set(-400,-500,-100),o.add(l);var h=new a.CSS3DObject(i);return h.matrixAutoUpdate=!1,o.add(h),o.scale.set(s,s,s),t([o,c,h])})),s,function(t){C[t?"unshift":"push"](()=>{r(1,a=t)})},function(t){C[t?"unshift":"push"](()=>{r(0,i=t)})}]}var Ii=new class extends ${constructor(t){super(),J(this,t,Di,Oi,h,{SCENE_SCALE:5})}}({target:document.body,props:{name:"world"}});window.app=Ii;e.default=Ii}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGhyZWUvYnVpbGQvdGhyZWUubW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ1NTM0RSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtZnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY3JpcHRqcy9kaXN0L3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNpemUtb2JzZXJ2ZXItcG9seWZpbGwvZGlzdC9SZXNpemVPYnNlcnZlci5lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC53ZWFrLW1hcC5kZWxldGUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLWRlbGV0ZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdmVsdGUvaW50ZXJuYWwvaW5kZXgubWpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9tYXQ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL3ZlYzMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9lc20vdmVjNC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2VzbS9xdWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvZXNtL21hdDMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JhYnlsb25KU1JlbmRlcmVyLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvVGhyZWVKU1JlbmRlcmVyLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWZmZWN0b3IvZWZmZWN0b3IuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FSQ29udGV4dC5zdmVsdGUiLCJ3ZWJwYWNrOi8vLy4vc3JjL21hcmtlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQVJNYXJrZXJQYXR0ZXJuLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnN2ZWx0ZSIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIml0IiwiTWF0aCIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsIndpbmRvdyIsInNlbGYiLCJnbG9iYWwiLCJGdW5jdGlvbiIsInVuZGVmaW5lZCIsIk51bWJlciIsIkVQU0lMT04iLCJwb3ciLCJpc0ludGVnZXIiLCJpc0Zpbml0ZSIsImZsb29yIiwic2lnbiIsIngiLCJ0aGlzIiwidG9TdHJpbmciLCJtYXRjaCIsImFzc2lnbiIsInRhcmdldCIsIlR5cGVFcnJvciIsIm91dHB1dCIsImluZGV4IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwibmV4dEtleSIsIlJFVklTSU9OIiwiTU9VU0UiLCJMRUZUIiwiTUlERExFIiwiUklHSFQiLCJST1RBVEUiLCJET0xMWSIsIlBBTiIsIlRPVUNIIiwiRE9MTFlfUEFOIiwiRE9MTFlfUk9UQVRFIiwiQ3VsbEZhY2VOb25lIiwiQ3VsbEZhY2VCYWNrIiwiQ3VsbEZhY2VGcm9udCIsIkN1bGxGYWNlRnJvbnRCYWNrIiwiRnJvbnRGYWNlRGlyZWN0aW9uQ1ciLCJGcm9udEZhY2VEaXJlY3Rpb25DQ1ciLCJCYXNpY1NoYWRvd01hcCIsIlBDRlNoYWRvd01hcCIsIlBDRlNvZnRTaGFkb3dNYXAiLCJWU01TaGFkb3dNYXAiLCJGcm9udFNpZGUiLCJCYWNrU2lkZSIsIkRvdWJsZVNpZGUiLCJGbGF0U2hhZGluZyIsIlNtb290aFNoYWRpbmciLCJOb0JsZW5kaW5nIiwiTm9ybWFsQmxlbmRpbmciLCJBZGRpdGl2ZUJsZW5kaW5nIiwiU3VidHJhY3RpdmVCbGVuZGluZyIsIk11bHRpcGx5QmxlbmRpbmciLCJDdXN0b21CbGVuZGluZyIsIkFkZEVxdWF0aW9uIiwiU3VidHJhY3RFcXVhdGlvbiIsIlJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIiwiTWluRXF1YXRpb24iLCJNYXhFcXVhdGlvbiIsIlplcm9GYWN0b3IiLCJPbmVGYWN0b3IiLCJTcmNDb2xvckZhY3RvciIsIk9uZU1pbnVzU3JjQ29sb3JGYWN0b3IiLCJTcmNBbHBoYUZhY3RvciIsIk9uZU1pbnVzU3JjQWxwaGFGYWN0b3IiLCJEc3RBbHBoYUZhY3RvciIsIk9uZU1pbnVzRHN0QWxwaGFGYWN0b3IiLCJEc3RDb2xvckZhY3RvciIsIk9uZU1pbnVzRHN0Q29sb3JGYWN0b3IiLCJTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIiwiTmV2ZXJEZXB0aCIsIkFsd2F5c0RlcHRoIiwiTGVzc0RlcHRoIiwiTGVzc0VxdWFsRGVwdGgiLCJFcXVhbERlcHRoIiwiR3JlYXRlckVxdWFsRGVwdGgiLCJHcmVhdGVyRGVwdGgiLCJOb3RFcXVhbERlcHRoIiwiTXVsdGlwbHlPcGVyYXRpb24iLCJNaXhPcGVyYXRpb24iLCJBZGRPcGVyYXRpb24iLCJOb1RvbmVNYXBwaW5nIiwiTGluZWFyVG9uZU1hcHBpbmciLCJSZWluaGFyZFRvbmVNYXBwaW5nIiwiVW5jaGFydGVkMlRvbmVNYXBwaW5nIiwiQ2luZW9uVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJVVk1hcHBpbmciLCJDdWJlUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlUmVmcmFjdGlvbk1hcHBpbmciLCJFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyIsIkVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nIiwiU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmciLCJDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyIsIkN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nIiwiUmVwZWF0V3JhcHBpbmciLCJDbGFtcFRvRWRnZVdyYXBwaW5nIiwiTWlycm9yZWRSZXBlYXRXcmFwcGluZyIsIk5lYXJlc3RGaWx0ZXIiLCJOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciIsIk5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyIiwiTmVhcmVzdE1pcG1hcExpbmVhckZpbHRlciIsIk5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIiwiTGluZWFyTWlwTWFwTmVhcmVzdEZpbHRlciIsIkxpbmVhck1pcG1hcExpbmVhckZpbHRlciIsIkxpbmVhck1pcE1hcExpbmVhckZpbHRlciIsIlVuc2lnbmVkQnl0ZVR5cGUiLCJCeXRlVHlwZSIsIlNob3J0VHlwZSIsIlVuc2lnbmVkU2hvcnRUeXBlIiwiSW50VHlwZSIsIlVuc2lnbmVkSW50VHlwZSIsIkZsb2F0VHlwZSIsIkhhbGZGbG9hdFR5cGUiLCJVbnNpZ25lZFNob3J0NDQ0NFR5cGUiLCJVbnNpZ25lZFNob3J0NTU1MVR5cGUiLCJVbnNpZ25lZFNob3J0NTY1VHlwZSIsIlVuc2lnbmVkSW50MjQ4VHlwZSIsIkFscGhhRm9ybWF0IiwiUkdCRm9ybWF0IiwiUkdCQUZvcm1hdCIsIkx1bWluYW5jZUZvcm1hdCIsIkx1bWluYW5jZUFscGhhRm9ybWF0IiwiUkdCRUZvcm1hdCIsIkRlcHRoRm9ybWF0IiwiRGVwdGhTdGVuY2lsRm9ybWF0IiwiUmVkRm9ybWF0IiwiUmVkSW50ZWdlckZvcm1hdCIsIlJHRm9ybWF0IiwiUkdJbnRlZ2VyRm9ybWF0IiwiUkdCSW50ZWdlckZvcm1hdCIsIlJHQkFJbnRlZ2VyRm9ybWF0IiwiUkdCX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUMV9Gb3JtYXQiLCJSR0JBX1MzVENfRFhUM19Gb3JtYXQiLCJSR0JBX1MzVENfRFhUNV9Gb3JtYXQiLCJSR0JfUFZSVENfNEJQUFYxX0Zvcm1hdCIsIlJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ180QlBQVjFfRm9ybWF0IiwiUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0IiwiUkdCX0VUQzFfRm9ybWF0IiwiUkdCX0VUQzJfRm9ybWF0IiwiUkdCQV9FVEMyX0VBQ19Gb3JtYXQiLCJSR0JBX0FTVENfNHg0X0Zvcm1hdCIsIlJHQkFfQVNUQ181eDRfRm9ybWF0IiwiUkdCQV9BU1RDXzV4NV9Gb3JtYXQiLCJSR0JBX0FTVENfNng1X0Zvcm1hdCIsIlJHQkFfQVNUQ182eDZfRm9ybWF0IiwiUkdCQV9BU1RDXzh4NV9Gb3JtYXQiLCJSR0JBX0FTVENfOHg2X0Zvcm1hdCIsIlJHQkFfQVNUQ184eDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDVfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDZfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDhfRm9ybWF0IiwiUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCIsIlJHQkFfQVNUQ18xMngxMF9Gb3JtYXQiLCJSR0JBX0FTVENfMTJ4MTJfRm9ybWF0IiwiUkdCQV9CUFRDX0Zvcm1hdCIsIlNSR0I4X0FMUEhBOF9BU1RDXzR4NF9Gb3JtYXQiLCJTUkdCOF9BTFBIQThfQVNUQ181eDRfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfNXg1X0Zvcm1hdCIsIlNSR0I4X0FMUEhBOF9BU1RDXzZ4NV9Gb3JtYXQiLCJTUkdCOF9BTFBIQThfQVNUQ182eDZfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfOHg1X0Zvcm1hdCIsIlNSR0I4X0FMUEhBOF9BU1RDXzh4Nl9Gb3JtYXQiLCJTUkdCOF9BTFBIQThfQVNUQ184eDhfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9Gb3JtYXQiLCJTUkdCOF9BTFBIQThfQVNUQ18xMHg2X0Zvcm1hdCIsIlNSR0I4X0FMUEhBOF9BU1RDXzEweDhfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfMTB4MTBfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfRm9ybWF0IiwiU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTJfRm9ybWF0IiwiTG9vcE9uY2UiLCJMb29wUmVwZWF0IiwiTG9vcFBpbmdQb25nIiwiSW50ZXJwb2xhdGVEaXNjcmV0ZSIsIkludGVycG9sYXRlTGluZWFyIiwiSW50ZXJwb2xhdGVTbW9vdGgiLCJaZXJvQ3VydmF0dXJlRW5kaW5nIiwiWmVyb1Nsb3BlRW5kaW5nIiwiV3JhcEFyb3VuZEVuZGluZyIsIlRyaWFuZ2xlc0RyYXdNb2RlIiwiVHJpYW5nbGVTdHJpcERyYXdNb2RlIiwiVHJpYW5nbGVGYW5EcmF3TW9kZSIsIkxpbmVhckVuY29kaW5nIiwic1JHQkVuY29kaW5nIiwiR2FtbWFFbmNvZGluZyIsIlJHQkVFbmNvZGluZyIsIkxvZ0x1dkVuY29kaW5nIiwiUkdCTTdFbmNvZGluZyIsIlJHQk0xNkVuY29kaW5nIiwiUkdCREVuY29kaW5nIiwiQmFzaWNEZXB0aFBhY2tpbmciLCJSR0JBRGVwdGhQYWNraW5nIiwiVGFuZ2VudFNwYWNlTm9ybWFsTWFwIiwiT2JqZWN0U3BhY2VOb3JtYWxNYXAiLCJaZXJvU3RlbmNpbE9wIiwiS2VlcFN0ZW5jaWxPcCIsIlJlcGxhY2VTdGVuY2lsT3AiLCJJbmNyZW1lbnRTdGVuY2lsT3AiLCJEZWNyZW1lbnRTdGVuY2lsT3AiLCJJbmNyZW1lbnRXcmFwU3RlbmNpbE9wIiwiRGVjcmVtZW50V3JhcFN0ZW5jaWxPcCIsIkludmVydFN0ZW5jaWxPcCIsIk5ldmVyU3RlbmNpbEZ1bmMiLCJMZXNzU3RlbmNpbEZ1bmMiLCJFcXVhbFN0ZW5jaWxGdW5jIiwiTGVzc0VxdWFsU3RlbmNpbEZ1bmMiLCJHcmVhdGVyU3RlbmNpbEZ1bmMiLCJOb3RFcXVhbFN0ZW5jaWxGdW5jIiwiR3JlYXRlckVxdWFsU3RlbmNpbEZ1bmMiLCJBbHdheXNTdGVuY2lsRnVuYyIsIlN0YXRpY0RyYXdVc2FnZSIsIkR5bmFtaWNEcmF3VXNhZ2UiLCJTdHJlYW1EcmF3VXNhZ2UiLCJTdGF0aWNSZWFkVXNhZ2UiLCJEeW5hbWljUmVhZFVzYWdlIiwiU3RyZWFtUmVhZFVzYWdlIiwiU3RhdGljQ29weVVzYWdlIiwiRHluYW1pY0NvcHlVc2FnZSIsIlN0cmVhbUNvcHlVc2FnZSIsIkV2ZW50RGlzcGF0Y2hlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0eXBlIiwibGlzdGVuZXIiLCJfbGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiaW5kZXhPZiIsInB1c2giLCJoYXNFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVyQXJyYXkiLCJzcGxpY2UiLCJkaXNwYXRjaEV2ZW50IiwiZXZlbnQiLCJhcnJheSIsInNsaWNlIiwiX2x1dCIsIl9jYW52YXMiLCJNYXRoVXRpbHMiLCJERUcyUkFEIiwiUEkiLCJSQUQyREVHIiwiZ2VuZXJhdGVVVUlEIiwiZDAiLCJyYW5kb20iLCJkMSIsImQyIiwiZDMiLCJ0b1VwcGVyQ2FzZSIsImNsYW1wIiwibWluIiwibWF4IiwiZXVjbGlkZWFuTW9kdWxvIiwibWFwTGluZWFyIiwiYTEiLCJhMiIsImIxIiwiYjIiLCJsZXJwIiwieSIsInNtb290aHN0ZXAiLCJzbW9vdGhlcnN0ZXAiLCJyYW5kSW50IiwibG93IiwiaGlnaCIsInJhbmRGbG9hdCIsInJhbmRGbG9hdFNwcmVhZCIsInJhbmdlIiwiZGVnVG9SYWQiLCJkZWdyZWVzIiwicmFkVG9EZWciLCJyYWRpYW5zIiwiaXNQb3dlck9mVHdvIiwiY2VpbFBvd2VyT2ZUd28iLCJjZWlsIiwibG9nIiwiTE4yIiwiZmxvb3JQb3dlck9mVHdvIiwic2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlciIsInEiLCJhIiwiYiIsIm9yZGVyIiwiY29zIiwic2luIiwiYzIiLCJzMiIsImMxMyIsInMxMyIsImMxXzMiLCJzMV8zIiwiYzNfMSIsInMzXzEiLCJzZXQiLCJjb25zb2xlIiwid2FybiIsIlZlY3RvcjIiLCJNYXRyaXgzIiwiZWxlbWVudHMiLCJlcnJvciIsImRlZmluZVByb3BlcnRpZXMiLCJpc1ZlY3RvcjIiLCJzZXRTY2FsYXIiLCJzY2FsYXIiLCJzZXRYIiwic2V0WSIsInNldENvbXBvbmVudCIsIkVycm9yIiwiZ2V0Q29tcG9uZW50IiwiY2xvbmUiLCJjb25zdHJ1Y3RvciIsImNvcHkiLCJ2IiwiYWRkIiwidyIsImFkZFZlY3RvcnMiLCJhZGRTY2FsYXIiLCJhZGRTY2FsZWRWZWN0b3IiLCJzdWIiLCJzdWJWZWN0b3JzIiwic3ViU2NhbGFyIiwibXVsdGlwbHkiLCJtdWx0aXBseVNjYWxhciIsImRpdmlkZSIsImRpdmlkZVNjYWxhciIsImFwcGx5TWF0cml4MyIsImUiLCJjbGFtcFNjYWxhciIsIm1pblZhbCIsIm1heFZhbCIsImNsYW1wTGVuZ3RoIiwicm91bmQiLCJyb3VuZFRvWmVybyIsIm5lZ2F0ZSIsImRvdCIsImNyb3NzIiwibGVuZ3RoU3EiLCJzcXJ0IiwibWFuaGF0dGFuTGVuZ3RoIiwiYWJzIiwibm9ybWFsaXplIiwiYW5nbGUiLCJhdGFuMiIsImRpc3RhbmNlVG8iLCJkaXN0YW5jZVRvU3F1YXJlZCIsImR4IiwiZHkiLCJtYW5oYXR0YW5EaXN0YW5jZVRvIiwic2V0TGVuZ3RoIiwiYWxwaGEiLCJsZXJwVmVjdG9ycyIsInYxIiwidjIiLCJlcXVhbHMiLCJmcm9tQXJyYXkiLCJvZmZzZXQiLCJ0b0FycmF5IiwiZnJvbUJ1ZmZlckF0dHJpYnV0ZSIsImF0dHJpYnV0ZSIsImdldFgiLCJnZXRZIiwicm90YXRlQXJvdW5kIiwiY2VudGVyIiwiaXNNYXRyaXgzIiwibjExIiwibjEyIiwibjEzIiwibjIxIiwibjIyIiwibjIzIiwibjMxIiwibjMyIiwibjMzIiwidGUiLCJpZGVudGl0eSIsIm1lIiwiZXh0cmFjdEJhc2lzIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwic2V0RnJvbU1hdHJpeDNDb2x1bW4iLCJzZXRGcm9tTWF0cml4NCIsIm11bHRpcGx5TWF0cmljZXMiLCJwcmVtdWx0aXBseSIsImFlIiwiYmUiLCJhMTEiLCJhMTIiLCJhMTMiLCJhMjEiLCJhMjIiLCJhMjMiLCJhMzEiLCJhMzIiLCJhMzMiLCJiMTEiLCJiMTIiLCJiMTMiLCJiMjEiLCJiMjIiLCJiMjMiLCJiMzEiLCJiMzIiLCJiMzMiLCJkZXRlcm1pbmFudCIsImYiLCJnIiwiaCIsImdldEludmVyc2UiLCJtYXRyaXgiLCJ0aHJvd09uRGVnZW5lcmF0ZSIsInQxMSIsInQxMiIsInQxMyIsImRldCIsImRldEludiIsInRyYW5zcG9zZSIsInRtcCIsImdldE5vcm1hbE1hdHJpeCIsIm1hdHJpeDQiLCJ0cmFuc3Bvc2VJbnRvQXJyYXkiLCJzZXRVdlRyYW5zZm9ybSIsInR4IiwidHkiLCJzeCIsInN5Iiwicm90YXRpb24iLCJjeCIsImN5Iiwic2NhbGUiLCJyb3RhdGUiLCJ0aGV0YSIsInRyYW5zbGF0ZSIsIkltYWdlVXRpbHMiLCJnZXREYXRhVVJMIiwiaW1hZ2UiLCJjYW52YXMiLCJIVE1MQ2FudmFzRWxlbWVudCIsInNyYyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwid2lkdGgiLCJoZWlnaHQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsIkltYWdlRGF0YSIsInB1dEltYWdlRGF0YSIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInRleHR1cmVJZCIsIlRleHR1cmUiLCJtYXBwaW5nIiwid3JhcFMiLCJ3cmFwVCIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsImZvcm1hdCIsImFuaXNvdHJvcHkiLCJlbmNvZGluZyIsInV1aWQiLCJERUZBVUxUX0lNQUdFIiwibWlwbWFwcyIsIkRFRkFVTFRfTUFQUElORyIsImludGVybmFsRm9ybWF0IiwicmVwZWF0IiwibWF0cml4QXV0b1VwZGF0ZSIsImdlbmVyYXRlTWlwbWFwcyIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsInVucGFja0FsaWdubWVudCIsInZlcnNpb24iLCJvblVwZGF0ZSIsIlZlY3RvcjQiLCJ6IiwiV2ViR0xSZW5kZXJUYXJnZXQiLCJvcHRpb25zIiwic2Npc3NvciIsInNjaXNzb3JUZXN0Iiwidmlld3BvcnQiLCJ0ZXh0dXJlIiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsQnVmZmVyIiwiZGVwdGhUZXh0dXJlIiwiV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsInNhbXBsZXMiLCJRdWF0ZXJuaW9uIiwiX3giLCJfeSIsIl96IiwiX3ciLCJpc1RleHR1cmUiLCJ1cGRhdGVNYXRyaXgiLCJ0b0pTT04iLCJtZXRhIiwiaXNSb290T2JqZWN0IiwidGV4dHVyZXMiLCJtZXRhZGF0YSIsImdlbmVyYXRvciIsIndyYXAiLCJpbWFnZXMiLCJ1cmwiLCJBcnJheSIsImlzQXJyYXkiLCJkaXNwb3NlIiwidHJhbnNmb3JtVXYiLCJ1diIsImlzVmVjdG9yNCIsInNldFoiLCJzZXRXIiwiYXBwbHlNYXRyaXg0Iiwic2V0QXhpc0FuZ2xlRnJvbVF1YXRlcm5pb24iLCJhY29zIiwic2V0QXhpc0FuZ2xlRnJvbVJvdGF0aW9uTWF0cml4IiwibTExIiwibTEyIiwibTEzIiwibTIxIiwibTIyIiwibTIzIiwibTMxIiwibTMyIiwibTMzIiwieHgiLCJ5eSIsInp6IiwieHkiLCJ4eiIsInl6IiwiZ2V0WiIsImdldFciLCJpc1dlYkdMUmVuZGVyVGFyZ2V0Iiwic2V0U2l6ZSIsImlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCIsInNsZXJwIiwicWEiLCJxYiIsInFtIiwic2xlcnBGbGF0IiwiZHN0IiwiZHN0T2Zmc2V0Iiwic3JjMCIsInNyY09mZnNldDAiLCJzcmMxIiwic3JjT2Zmc2V0MSIsIngwIiwieTAiLCJ6MCIsIncwIiwieDEiLCJ5MSIsInoxIiwidzEiLCJkaXIiLCJzcXJTaW4iLCJsZW4iLCJ0RGlyIiwiX29uQ2hhbmdlQ2FsbGJhY2siLCJpc1F1YXRlcm5pb24iLCJxdWF0ZXJuaW9uIiwic2V0RnJvbUV1bGVyIiwiZXVsZXIiLCJ1cGRhdGUiLCJpc0V1bGVyIiwiYzEiLCJjMyIsInMxIiwiczMiLCJzZXRGcm9tQXhpc0FuZ2xlIiwiYXhpcyIsImhhbGZBbmdsZSIsInNldEZyb21Sb3RhdGlvbk1hdHJpeCIsInRyYWNlIiwic2V0RnJvbVVuaXRWZWN0b3JzIiwidkZyb20iLCJ2VG8iLCJhbmdsZVRvIiwicm90YXRlVG93YXJkcyIsInN0ZXAiLCJpbnZlcnNlIiwiY29uanVnYXRlIiwibXVsdGlwbHlRdWF0ZXJuaW9ucyIsInFheCIsInFheSIsInFheiIsInFhdyIsInFieCIsInFieSIsInFieiIsInFidyIsImNvc0hhbGZUaGV0YSIsInNxclNpbkhhbGZUaGV0YSIsInNpbkhhbGZUaGV0YSIsImhhbGZUaGV0YSIsInJhdGlvQSIsInJhdGlvQiIsIl9vbkNoYW5nZSIsImNhbGxiYWNrIiwiX3ZlY3RvciIsIlZlY3RvcjMiLCJfcXVhdGVybmlvbiIsImlzVmVjdG9yMyIsIm11bHRpcGx5VmVjdG9ycyIsImFwcGx5RXVsZXIiLCJhcHBseVF1YXRlcm5pb24iLCJhcHBseUF4aXNBbmdsZSIsImFwcGx5Tm9ybWFsTWF0cml4IiwicXgiLCJxeSIsInF6IiwicXciLCJpeCIsIml5IiwiaXoiLCJpdyIsInByb2plY3QiLCJjYW1lcmEiLCJtYXRyaXhXb3JsZEludmVyc2UiLCJwcm9qZWN0aW9uTWF0cml4IiwidW5wcm9qZWN0IiwicHJvamVjdGlvbk1hdHJpeEludmVyc2UiLCJtYXRyaXhXb3JsZCIsInRyYW5zZm9ybURpcmVjdGlvbiIsImNyb3NzVmVjdG9ycyIsImF4IiwiYXkiLCJheiIsImJ4IiwiYnkiLCJieiIsInByb2plY3RPblZlY3RvciIsImRlbm9taW5hdG9yIiwicHJvamVjdE9uUGxhbmUiLCJwbGFuZU5vcm1hbCIsInJlZmxlY3QiLCJub3JtYWwiLCJkeiIsInNldEZyb21TcGhlcmljYWwiLCJzZXRGcm9tU3BoZXJpY2FsQ29vcmRzIiwicmFkaXVzIiwicGhpIiwic2luUGhpUmFkaXVzIiwic2V0RnJvbUN5bGluZHJpY2FsIiwic2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzIiwic2V0RnJvbU1hdHJpeFBvc2l0aW9uIiwic2V0RnJvbU1hdHJpeFNjYWxlIiwic2V0RnJvbU1hdHJpeENvbHVtbiIsInN6IiwiX3YxIiwiX20xIiwiTWF0cml4NCIsIl96ZXJvIiwiX29uZSIsImlzTWF0cml4NCIsIm4xNCIsIm4yNCIsIm4zNCIsIm40MSIsIm40MiIsIm40MyIsIm40NCIsImNvcHlQb3NpdGlvbiIsIm1ha2VCYXNpcyIsImV4dHJhY3RSb3RhdGlvbiIsInNjYWxlWCIsInNjYWxlWSIsInNjYWxlWiIsIm1ha2VSb3RhdGlvbkZyb21FdWxlciIsImFmIiwiYmYiLCJjZSIsImNmIiwiZGUiLCJkZiIsImFjIiwiYWQiLCJiYyIsImJkIiwibWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJjb21wb3NlIiwibG9va0F0IiwiZXllIiwidXAiLCJhMTQiLCJhMjQiLCJhMzQiLCJhNDEiLCJhNDIiLCJhNDMiLCJhNDQiLCJiMTQiLCJiMjQiLCJiMzQiLCJiNDEiLCJiNDIiLCJiNDMiLCJiNDQiLCJzZXRQb3NpdGlvbiIsInQxNCIsImdldE1heFNjYWxlT25BeGlzIiwic2NhbGVYU3EiLCJzY2FsZVlTcSIsInNjYWxlWlNxIiwibWFrZVRyYW5zbGF0aW9uIiwibWFrZVJvdGF0aW9uWCIsIm1ha2VSb3RhdGlvblkiLCJtYWtlUm90YXRpb25aIiwibWFrZVJvdGF0aW9uQXhpcyIsIm1ha2VTY2FsZSIsIm1ha2VTaGVhciIsInBvc2l0aW9uIiwieDIiLCJ5MiIsInoyIiwid3giLCJ3eSIsInd6IiwiZGVjb21wb3NlIiwiaW52U1giLCJpbnZTWSIsImludlNaIiwibWFrZVBlcnNwZWN0aXZlIiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwibmVhciIsImZhciIsIm1ha2VPcnRob2dyYXBoaWMiLCJfbWF0cml4IiwiX3F1YXRlcm5pb24kMSIsIkV1bGVyIiwiX29yZGVyIiwiRGVmYXVsdE9yZGVyIiwiTGF5ZXJzIiwibWFzayIsIlJvdGF0aW9uT3JkZXJzIiwiYXNpbiIsInNldEZyb21RdWF0ZXJuaW9uIiwic2V0RnJvbVZlY3RvcjMiLCJyZW9yZGVyIiwibmV3T3JkZXIiLCJ0b1ZlY3RvcjMiLCJvcHRpb25hbFJlc3VsdCIsImNoYW5uZWwiLCJlbmFibGUiLCJlbmFibGVBbGwiLCJ0b2dnbGUiLCJkaXNhYmxlIiwiZGlzYWJsZUFsbCIsInRlc3QiLCJsYXllcnMiLCJfb2JqZWN0M0RJZCIsIl92MSQxIiwiX3ExIiwiX20xJDEiLCJfdGFyZ2V0IiwiX3Bvc2l0aW9uIiwiX3NjYWxlIiwiX3F1YXRlcm5pb24kMiIsIl94QXhpcyIsIl95QXhpcyIsIl96QXhpcyIsIl9hZGRlZEV2ZW50IiwiX3JlbW92ZWRFdmVudCIsIk9iamVjdDNEIiwicGFyZW50IiwiY2hpbGRyZW4iLCJEZWZhdWx0VXAiLCJjb25maWd1cmFibGUiLCJtb2RlbFZpZXdNYXRyaXgiLCJub3JtYWxNYXRyaXgiLCJEZWZhdWx0TWF0cml4QXV0b1VwZGF0ZSIsIm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJ2aXNpYmxlIiwiY2FzdFNoYWRvdyIsInJlY2VpdmVTaGFkb3ciLCJmcnVzdHVtQ3VsbGVkIiwicmVuZGVyT3JkZXIiLCJ1c2VyRGF0YSIsIlNjZW5lIiwiYmFja2dyb3VuZCIsImVudmlyb25tZW50IiwiZm9nIiwib3ZlcnJpZGVNYXRlcmlhbCIsImF1dG9VcGRhdGUiLCJfX1RIUkVFX0RFVlRPT0xTX18iLCJDdXN0b21FdmVudCIsImRldGFpbCIsImlzT2JqZWN0M0QiLCJvbkJlZm9yZVJlbmRlciIsIm9uQWZ0ZXJSZW5kZXIiLCJzZXRSb3RhdGlvbkZyb21BeGlzQW5nbGUiLCJzZXRSb3RhdGlvbkZyb21FdWxlciIsInNldFJvdGF0aW9uRnJvbU1hdHJpeCIsInNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb24iLCJyb3RhdGVPbkF4aXMiLCJyb3RhdGVPbldvcmxkQXhpcyIsInJvdGF0ZVgiLCJyb3RhdGVZIiwicm90YXRlWiIsInRyYW5zbGF0ZU9uQXhpcyIsImRpc3RhbmNlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJ0cmFuc2xhdGVaIiwibG9jYWxUb1dvcmxkIiwidmVjdG9yIiwid29ybGRUb0xvY2FsIiwidXBkYXRlV29ybGRNYXRyaXgiLCJpc0NhbWVyYSIsImlzTGlnaHQiLCJyZW1vdmUiLCJhdHRhY2giLCJnZXRPYmplY3RCeUlkIiwiaWQiLCJnZXRPYmplY3RCeVByb3BlcnR5IiwiZ2V0T2JqZWN0QnlOYW1lIiwiZ2V0V29ybGRQb3NpdGlvbiIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiZ2V0V29ybGRRdWF0ZXJuaW9uIiwiZ2V0V29ybGRTY2FsZSIsImdldFdvcmxkRGlyZWN0aW9uIiwicmF5Y2FzdCIsInRyYXZlcnNlIiwidHJhdmVyc2VWaXNpYmxlIiwidHJhdmVyc2VBbmNlc3RvcnMiLCJmb3JjZSIsInVwZGF0ZVBhcmVudHMiLCJ1cGRhdGVDaGlsZHJlbiIsImdlb21ldHJpZXMiLCJtYXRlcmlhbHMiLCJzaGFwZXMiLCJzZXJpYWxpemUiLCJsaWJyYXJ5IiwiZWxlbWVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0luc3RhbmNlZE1lc2giLCJjb3VudCIsImluc3RhbmNlTWF0cml4IiwiaXNNZXNoIiwiaXNMaW5lIiwiaXNQb2ludHMiLCJnZW9tZXRyeSIsInBhcmFtZXRlcnMiLCJzaGFwZSIsIm1hdGVyaWFsIiwidXVpZHMiLCJleHRyYWN0RnJvbUNhY2hlIiwiY2FjaGUiLCJ2YWx1ZXMiLCJkYXRhIiwicmVjdXJzaXZlIiwicGFyc2UiLCJjaGlsZCIsImlzU2NlbmUiLCJfcG9pbnRzIiwiX3ZlY3RvciQxIiwiX2JveCIsIkJveDMiLCJfdjAiLCJfdjEkMiIsIl92MiIsIl9mMCIsIl9mMSIsIl9mMiIsIl9jZW50ZXIiLCJfZXh0ZW50cyIsIl90cmlhbmdsZU5vcm1hbCIsIl90ZXN0QXhpcyIsIkluZmluaXR5Iiwic2F0Rm9yQXhlcyIsImF4ZXMiLCJ2MCIsImV4dGVudHMiLCJqIiwicDAiLCJwMSIsInAyIiwiaXNCb3gzIiwic2V0RnJvbUFycmF5IiwibWluWCIsIm1pblkiLCJtaW5aIiwibWF4WCIsIm1heFkiLCJtYXhaIiwic2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSIsInNldEZyb21Qb2ludHMiLCJwb2ludHMiLCJtYWtlRW1wdHkiLCJpbCIsImV4cGFuZEJ5UG9pbnQiLCJzZXRGcm9tQ2VudGVyQW5kU2l6ZSIsInNpemUiLCJoYWxmU2l6ZSIsInNldEZyb21PYmplY3QiLCJleHBhbmRCeU9iamVjdCIsImJveCIsImlzRW1wdHkiLCJnZXRDZW50ZXIiLCJnZXRTaXplIiwicG9pbnQiLCJleHBhbmRCeVZlY3RvciIsImV4cGFuZEJ5U2NhbGFyIiwiYm91bmRpbmdCb3giLCJjb21wdXRlQm91bmRpbmdCb3giLCJ1bmlvbiIsImNvbnRhaW5zUG9pbnQiLCJjb250YWluc0JveCIsImdldFBhcmFtZXRlciIsImludGVyc2VjdHNCb3giLCJpbnRlcnNlY3RzU3BoZXJlIiwic3BoZXJlIiwiY2xhbXBQb2ludCIsImludGVyc2VjdHNQbGFuZSIsInBsYW5lIiwiY29uc3RhbnQiLCJpbnRlcnNlY3RzVHJpYW5nbGUiLCJ0cmlhbmdsZSIsImRpc3RhbmNlVG9Qb2ludCIsImdldEJvdW5kaW5nU3BoZXJlIiwiaW50ZXJzZWN0IiwiX2JveCQxIiwiU3BoZXJlIiwib3B0aW9uYWxDZW50ZXIiLCJtYXhSYWRpdXNTcSIsImVtcHR5IiwicmFkaXVzU3VtIiwiZGVsdGFMZW5ndGhTcSIsImdldEJvdW5kaW5nQm94IiwiX3ZlY3RvciQyIiwiX3NlZ0NlbnRlciIsIl9zZWdEaXIiLCJfZGlmZiIsIl9lZGdlMSIsIl9lZGdlMiIsIl9ub3JtYWwiLCJSYXkiLCJvcmlnaW4iLCJkaXJlY3Rpb24iLCJyYXkiLCJhdCIsInJlY2FzdCIsImNsb3Nlc3RQb2ludFRvUG9pbnQiLCJkaXJlY3Rpb25EaXN0YW5jZSIsImRpc3RhbmNlU3FUb1BvaW50IiwiZGlzdGFuY2VTcVRvU2VnbWVudCIsIm9wdGlvbmFsUG9pbnRPblJheSIsIm9wdGlvbmFsUG9pbnRPblNlZ21lbnQiLCJzMCIsInNxckRpc3QiLCJleHREZXQiLCJzZWdFeHRlbnQiLCJhMDEiLCJiMCIsImludkRldCIsImludGVyc2VjdFNwaGVyZSIsInRjYSIsInJhZGl1czIiLCJ0aGMiLCJ0MCIsInQxIiwiZGlzdGFuY2VUb1BsYW5lIiwiaW50ZXJzZWN0UGxhbmUiLCJkaXN0VG9Qb2ludCIsImludGVyc2VjdEJveCIsInRtaW4iLCJ0bWF4IiwidHltaW4iLCJ0eW1heCIsInR6bWluIiwidHptYXgiLCJpbnZkaXJ4IiwiaW52ZGlyeSIsImludmRpcnoiLCJpbnRlcnNlY3RUcmlhbmdsZSIsImJhY2tmYWNlQ3VsbGluZyIsIkRkTiIsIkRkUXhFMiIsIkRkRTF4USIsIlFkTiIsIl92ZWN0b3IxIiwiX3ZlY3RvcjIiLCJfbm9ybWFsTWF0cml4IiwiUGxhbmUiLCJpc1BsYW5lIiwic2V0Q29tcG9uZW50cyIsInNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50Iiwic2V0RnJvbUNvcGxhbmFyUG9pbnRzIiwiaW52ZXJzZU5vcm1hbExlbmd0aCIsImRpc3RhbmNlVG9TcGhlcmUiLCJwcm9qZWN0UG9pbnQiLCJpbnRlcnNlY3RMaW5lIiwibGluZSIsImRlbHRhIiwic3RhcnQiLCJpbnRlcnNlY3RzTGluZSIsInN0YXJ0U2lnbiIsImVuZFNpZ24iLCJlbmQiLCJjb3BsYW5hclBvaW50Iiwib3B0aW9uYWxOb3JtYWxNYXRyaXgiLCJyZWZlcmVuY2VQb2ludCIsIl92MCQxIiwiX3YxJDMiLCJfdjIkMSIsIl92MyIsIl92YWIiLCJfdmFjIiwiX3ZiYyIsIl92YXAiLCJfdmJwIiwiX3ZjcCIsIlRyaWFuZ2xlIiwiZ2V0Tm9ybWFsIiwidGFyZ2V0TGVuZ3RoU3EiLCJnZXRCYXJ5Y29vcmQiLCJkb3QwMCIsImRvdDAxIiwiZG90MDIiLCJkb3QxMSIsImRvdDEyIiwiZGVub20iLCJpbnZEZW5vbSIsInUiLCJnZXRVViIsInAzIiwidXYxIiwidXYyIiwidXYzIiwiaXNGcm9udEZhY2luZyIsInNldEZyb21Qb2ludHNBbmRJbmRpY2VzIiwiaTAiLCJpMSIsImkyIiwiZ2V0QXJlYSIsImdldE1pZHBvaW50IiwiZ2V0UGxhbmUiLCJkNCIsInZjIiwiZDUiLCJkNiIsInZiIiwidmEiLCJfY29sb3JLZXl3b3JkcyIsIl9oc2xBIiwiX2hzbEIiLCJDb2xvciIsInNldFJHQiIsImh1ZTJyZ2IiLCJTUkdCVG9MaW5lYXIiLCJMaW5lYXJUb1NSR0IiLCJGYWNlMyIsImNvbG9yIiwibWF0ZXJpYWxJbmRleCIsInZlcnRleE5vcm1hbHMiLCJpc0NvbG9yIiwidmVydGV4Q29sb3JzIiwic2V0SGV4Iiwic2V0U3R5bGUiLCJoZXgiLCJzZXRIU0wiLCJzdHlsZSIsImhhbmRsZUFscGhhIiwic3RyaW5nIiwicGFyc2VGbG9hdCIsImV4ZWMiLCJjb21wb25lbnRzIiwicGFyc2VJbnQiLCJjaGFyQXQiLCJzZXRDb2xvck5hbWUiLCJjb3B5R2FtbWFUb0xpbmVhciIsImdhbW1hRmFjdG9yIiwiY29weUxpbmVhclRvR2FtbWEiLCJzYWZlSW52ZXJzZSIsImNvbnZlcnRHYW1tYVRvTGluZWFyIiwiY29udmVydExpbmVhclRvR2FtbWEiLCJjb3B5U1JHQlRvTGluZWFyIiwiY29weUxpbmVhclRvU1JHQiIsImNvbnZlcnRTUkdCVG9MaW5lYXIiLCJjb252ZXJ0TGluZWFyVG9TUkdCIiwiZ2V0SGV4IiwiZ2V0SGV4U3RyaW5nIiwiZ2V0SFNMIiwiaHVlIiwic2F0dXJhdGlvbiIsImxpZ2h0bmVzcyIsImdldFN0eWxlIiwib2Zmc2V0SFNMIiwiYWRkQ29sb3JzIiwiY29sb3IxIiwiY29sb3IyIiwibGVycEhTTCIsIk5BTUVTIiwibWF0ZXJpYWxJZCIsIk1hdGVyaWFsIiwiYmxlbmRpbmciLCJzaWRlIiwiZmxhdFNoYWRpbmciLCJvcGFjaXR5IiwidHJhbnNwYXJlbnQiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRFcXVhdGlvbiIsImJsZW5kU3JjQWxwaGEiLCJibGVuZERzdEFscGhhIiwiYmxlbmRFcXVhdGlvbkFscGhhIiwiZGVwdGhGdW5jIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsInN0ZW5jaWxXcml0ZU1hc2siLCJzdGVuY2lsRnVuYyIsInN0ZW5jaWxSZWYiLCJzdGVuY2lsRnVuY01hc2siLCJzdGVuY2lsRmFpbCIsInN0ZW5jaWxaRmFpbCIsInN0ZW5jaWxaUGFzcyIsInN0ZW5jaWxXcml0ZSIsImNsaXBwaW5nUGxhbmVzIiwiY2xpcEludGVyc2VjdGlvbiIsImNsaXBTaGFkb3dzIiwic2hhZG93U2lkZSIsImNvbG9yV3JpdGUiLCJwcmVjaXNpb24iLCJwb2x5Z29uT2Zmc2V0IiwicG9seWdvbk9mZnNldEZhY3RvciIsInBvbHlnb25PZmZzZXRVbml0cyIsImRpdGhlcmluZyIsImFscGhhVGVzdCIsInByZW11bHRpcGxpZWRBbHBoYSIsInRvbmVNYXBwZWQiLCJNZXNoQmFzaWNNYXRlcmlhbCIsIm1hcCIsImxpZ2h0TWFwIiwibGlnaHRNYXBJbnRlbnNpdHkiLCJhb01hcCIsImFvTWFwSW50ZW5zaXR5Iiwic3BlY3VsYXJNYXAiLCJhbHBoYU1hcCIsImVudk1hcCIsImNvbWJpbmUiLCJyZWZsZWN0aXZpdHkiLCJyZWZyYWN0aW9uUmF0aW8iLCJ3aXJlZnJhbWUiLCJ3aXJlZnJhbWVMaW5ld2lkdGgiLCJ3aXJlZnJhbWVMaW5lY2FwIiwid2lyZWZyYW1lTGluZWpvaW4iLCJza2lubmluZyIsIm1vcnBoVGFyZ2V0cyIsInNldFZhbHVlcyIsImlzTWF0ZXJpYWwiLCJvbkJlZm9yZUNvbXBpbGUiLCJuZXdWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsImlzUm9vdCIsInJvdWdobmVzcyIsIm1ldGFsbmVzcyIsInNoZWVuIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZUludGVuc2l0eSIsInNwZWN1bGFyIiwic2hpbmluZXNzIiwiY2xlYXJjb2F0IiwiY2xlYXJjb2F0Um91Z2huZXNzIiwiY2xlYXJjb2F0TWFwIiwiY2xlYXJjb2F0Um91Z2huZXNzTWFwIiwiY2xlYXJjb2F0Tm9ybWFsTWFwIiwiY2xlYXJjb2F0Tm9ybWFsU2NhbGUiLCJtYXRjYXAiLCJidW1wTWFwIiwiYnVtcFNjYWxlIiwibm9ybWFsTWFwIiwibm9ybWFsTWFwVHlwZSIsIm5vcm1hbFNjYWxlIiwiZGlzcGxhY2VtZW50TWFwIiwiZGlzcGxhY2VtZW50U2NhbGUiLCJkaXNwbGFjZW1lbnRCaWFzIiwicm91Z2huZXNzTWFwIiwibWV0YWxuZXNzTWFwIiwiZW1pc3NpdmVNYXAiLCJlbnZNYXBJbnRlbnNpdHkiLCJncmFkaWVudE1hcCIsInNpemVBdHRlbnVhdGlvbiIsImxpbmV3aWR0aCIsImRhc2hTaXplIiwiZ2FwU2l6ZSIsIm1vcnBoTm9ybWFscyIsInNyY1BsYW5lcyIsImRzdFBsYW5lcyIsImlzTWVzaEJhc2ljTWF0ZXJpYWwiLCJfdmVjdG9yJDMiLCJCdWZmZXJBdHRyaWJ1dGUiLCJpdGVtU2l6ZSIsIm5vcm1hbGl6ZWQiLCJ1c2FnZSIsInVwZGF0ZVJhbmdlIiwiSW50OEJ1ZmZlckF0dHJpYnV0ZSIsIkludDhBcnJheSIsIlVpbnQ4QnVmZmVyQXR0cmlidXRlIiwiVWludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZCdWZmZXJBdHRyaWJ1dGUiLCJJbnQxNkFycmF5IiwiVWludDE2QnVmZmVyQXR0cmlidXRlIiwiVWludDE2QXJyYXkiLCJJbnQzMkJ1ZmZlckF0dHJpYnV0ZSIsIkludDMyQXJyYXkiLCJVaW50MzJCdWZmZXJBdHRyaWJ1dGUiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QnVmZmVyQXR0cmlidXRlIiwiRmxvYXQ2NEFycmF5IiwiRGlyZWN0R2VvbWV0cnkiLCJ2ZXJ0aWNlcyIsIm5vcm1hbHMiLCJjb2xvcnMiLCJ1dnMiLCJ1dnMyIiwiZ3JvdXBzIiwic2tpbldlaWdodHMiLCJza2luSW5kaWNlcyIsImJvdW5kaW5nU3BoZXJlIiwidmVydGljZXNOZWVkVXBkYXRlIiwibm9ybWFsc05lZWRVcGRhdGUiLCJjb2xvcnNOZWVkVXBkYXRlIiwidXZzTmVlZFVwZGF0ZSIsImdyb3Vwc05lZWRVcGRhdGUiLCJhcnJheU1heCIsImlzQnVmZmVyQXR0cmlidXRlIiwib25VcGxvYWRDYWxsYmFjayIsInNldFVzYWdlIiwiY29weUF0IiwiaW5kZXgxIiwiaW5kZXgyIiwiY29weUFycmF5IiwiY29weUNvbG9yc0FycmF5IiwiY29weVZlY3RvcjJzQXJyYXkiLCJ2ZWN0b3JzIiwiY29weVZlY3RvcjNzQXJyYXkiLCJjb3B5VmVjdG9yNHNBcnJheSIsInNldFhZWiIsInNldFhZIiwic2V0WFlaVyIsIm9uVXBsb2FkIiwiY29tcHV0ZUdyb3VwcyIsImdyb3VwIiwiZmFjZXMiLCJmYWNlIiwiZnJvbUdlb21ldHJ5IiwibW9ycGhUYXJnZXRzUG9zaXRpb24iLCJmYWNlVmVydGV4VXZzIiwiaGFzRmFjZVZlcnRleFV2IiwiaGFzRmFjZVZlcnRleFV2MiIsIm1vcnBoVGFyZ2V0c0xlbmd0aCIsIm1vcnBoVGFyZ2V0c05vcm1hbCIsIm1vcnBoTm9ybWFsc0xlbmd0aCIsImhhc1NraW5JbmRpY2VzIiwiaGFzU2tpbldlaWdodHMiLCJ2ZXJ0ZXhVdnMiLCJtb3JwaFRhcmdldCIsIm1vcnBoTm9ybWFsIiwiX2J1ZmZlckdlb21ldHJ5SWQiLCJfbTEkMiIsIl9vYmoiLCJfb2Zmc2V0IiwiX2JveCQyIiwiX2JveE1vcnBoVGFyZ2V0cyIsIl92ZWN0b3IkNCIsIkJ1ZmZlckdlb21ldHJ5IiwiYXR0cmlidXRlcyIsIm1vcnBoQXR0cmlidXRlcyIsIm1vcnBoVGFyZ2V0c1JlbGF0aXZlIiwiZHJhd1JhbmdlIiwiaXNCdWZmZXJHZW9tZXRyeSIsImdldEluZGV4Iiwic2V0SW5kZXgiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJkZWxldGVBdHRyaWJ1dGUiLCJhZGRHcm91cCIsImNsZWFyR3JvdXBzIiwic2V0RHJhd1JhbmdlIiwibmVlZHNVcGRhdGUiLCJ0YW5nZW50IiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwicG9zaXRpb25zIiwibGluZURpc3RhbmNlcyIsImlzR2VvbWV0cnkiLCJ1cGRhdGVGcm9tT2JqZWN0IiwiZGlyZWN0IiwiX19kaXJlY3RHZW9tZXRyeSIsImVsZW1lbnRzTmVlZFVwZGF0ZSIsImxpbmVEaXN0YW5jZXNOZWVkVXBkYXRlIiwibGluZURpc3RhbmNlIiwiZnJvbURpcmVjdEdlb21ldHJ5IiwibW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24iLCJtb3JwaEF0dHJpYnV0ZSIsImlzTmFOIiwiamwiLCJjb21wdXRlRmFjZU5vcm1hbHMiLCJjb21wdXRlVmVydGV4Tm9ybWFscyIsInZBIiwidkIiLCJ2QyIsInBBIiwicEIiLCJwQyIsImNiIiwiYWIiLCJpbmRpY2VzIiwibm9ybWFsaXplTm9ybWFscyIsIm1lcmdlIiwiYXR0cmlidXRlQXJyYXkxIiwiYXR0cmlidXRlMiIsImF0dHJpYnV0ZUFycmF5MiIsImF0dHJpYnV0ZU9mZnNldCIsInRvTm9uSW5kZXhlZCIsImNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUiLCJhcnJheTIiLCJnZW9tZXRyeTIiLCJuZXdBdHRyaWJ1dGUiLCJtb3JwaEFycmF5Iiwia2V5cyIsImF0dHJpYnV0ZURhdGEiLCJoYXNNb3JwaEF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVBcnJheSIsIl9pbnZlcnNlTWF0cml4IiwiX3JheSIsIl9zcGhlcmUiLCJfdkEiLCJfdkIiLCJfdkMiLCJfdGVtcEEiLCJfdGVtcEIiLCJfdGVtcEMiLCJfbW9ycGhBIiwiX21vcnBoQiIsIl9tb3JwaEMiLCJfdXZBIiwiX3V2QiIsIl91dkMiLCJfaW50ZXJzZWN0aW9uUG9pbnQiLCJfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZCIsIk1lc2giLCJ1cGRhdGVNb3JwaFRhcmdldHMiLCJjaGVja0ludGVyc2VjdGlvbiIsInJheWNhc3RlciIsImNoZWNrQnVmZmVyR2VvbWV0cnlJbnRlcnNlY3Rpb24iLCJtb3JwaFBvc2l0aW9uIiwibW9ycGhJbmZsdWVuY2VzIiwibW9ycGhUYXJnZXRJbmZsdWVuY2VzIiwiaW5mbHVlbmNlIiwiaW50ZXJzZWN0aW9uIiwibW9ycGhUYXJnZXREaWN0aW9uYXJ5IiwibWwiLCJTdHJpbmciLCJpbnRlcnNlY3RzIiwiZ3JvdXBNYXRlcmlhbCIsImZhY2VJbmRleCIsImZ2QSIsImZ2QiIsImZ2QyIsImlzTXVsdGlNYXRlcmlhbCIsImZsIiwiZmFjZU1hdGVyaWFsIiwidXZzX2YiLCJfZ2VvbWV0cnlJZCIsIl9tMSQzIiwiX29iaiQxIiwiX29mZnNldCQxIiwiR2VvbWV0cnkiLCJmcm9tQnVmZmVyR2VvbWV0cnkiLCJzY29wZSIsImFkZEZhY2UiLCJhcmVhV2VpZ2h0ZWQiLCJ2bCIsImNvbXB1dGVGbGF0VmVydGV4Tm9ybWFscyIsImNvbXB1dGVNb3JwaE5vcm1hbHMiLCJfX29yaWdpbmFsRmFjZU5vcm1hbCIsIl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzIiwidG1wR2VvIiwiZmFjZU5vcm1hbHMiLCJkc3ROb3JtYWxzRmFjZSIsImRzdE5vcm1hbHNWZXJ0ZXgiLCJmYWNlTm9ybWFsIiwibWF0ZXJpYWxJbmRleE9mZnNldCIsInZlcnRleE9mZnNldCIsInZlcnRpY2VzMSIsInZlcnRpY2VzMiIsImZhY2VzMSIsImZhY2VzMiIsImNvbG9yczEiLCJjb2xvcnMyIiwidmVydGV4Q29weSIsImZhY2VDb3B5IiwiZmFjZVZlcnRleE5vcm1hbHMiLCJmYWNlVmVydGV4Q29sb3JzIiwiZmFjZVZlcnRleFV2czIiLCJ1dnNDb3B5IiwiayIsImtsIiwibWVyZ2VNZXNoIiwibWVzaCIsIm1lcmdlVmVydGljZXMiLCJ2ZXJ0aWNlc01hcCIsInVuaXF1ZSIsImNoYW5nZXMiLCJmYWNlSW5kaWNlc1RvUmVtb3ZlIiwiaWR4IiwiZGlmZiIsInNvcnRGYWNlc0J5TWF0ZXJpYWxJbmRleCIsIl9pZCIsInNvcnQiLCJuZXdVdnMxIiwibmV3VXZzMiIsInV2czEiLCJ2ZXJ0ZXgiLCJub3JtYWxzSGFzaCIsImNvbG9yc0hhc2giLCJ1dnNIYXNoIiwiaGFzRmFjZU5vcm1hbCIsImhhc0ZhY2VWZXJ0ZXhOb3JtYWwiLCJoYXNGYWNlQ29sb3IiLCJoYXNGYWNlVmVydGV4Q29sb3IiLCJmYWNlVHlwZSIsInNldEJpdCIsImdldFV2SW5kZXgiLCJnZXROb3JtYWxJbmRleCIsImdldENvbG9ySW5kZXgiLCJlbmFibGVkIiwiaGFzaCIsInNyY1ZlcnRleE5vcm1hbCIsImRlc3RWZXJ0ZXhOb3JtYWwiLCJCb3hHZW9tZXRyeSIsImRlcHRoIiwid2lkdGhTZWdtZW50cyIsImhlaWdodFNlZ21lbnRzIiwiZGVwdGhTZWdtZW50cyIsInN1cGVyIiwiQm94QnVmZmVyR2VvbWV0cnkiLCJudW1iZXJPZlZlcnRpY2VzIiwiZ3JvdXBTdGFydCIsImJ1aWxkUGxhbmUiLCJ1ZGlyIiwidmRpciIsImdyaWRYIiwiZ3JpZFkiLCJzZWdtZW50V2lkdGgiLCJzZWdtZW50SGVpZ2h0Iiwid2lkdGhIYWxmIiwiaGVpZ2h0SGFsZiIsImRlcHRoSGFsZiIsImdyaWRYMSIsImdyaWRZMSIsInZlcnRleENvdW50ZXIiLCJncm91cENvdW50IiwiY2xvbmVVbmlmb3JtcyIsIm1lcmdlVW5pZm9ybXMiLCJ1bmlmb3JtcyIsIm1lcmdlZCIsIlVuaWZvcm1zVXRpbHMiLCJTaGFkZXJNYXRlcmlhbCIsImRlZmluZXMiLCJ2ZXJ0ZXhTaGFkZXIiLCJmcmFnbWVudFNoYWRlciIsImxpZ2h0cyIsImNsaXBwaW5nIiwiZXh0ZW5zaW9ucyIsImRlcml2YXRpdmVzIiwiZnJhZ0RlcHRoIiwiZHJhd0J1ZmZlcnMiLCJzaGFkZXJUZXh0dXJlTE9EIiwiZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyIsImluZGV4MEF0dHJpYnV0ZU5hbWUiLCJ1bmlmb3Jtc05lZWRVcGRhdGUiLCJDYW1lcmEiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImZvdiIsImFzcGVjdCIsInpvb20iLCJmb2N1cyIsInZpZXciLCJmaWxtR2F1Z2UiLCJmaWxtT2Zmc2V0IiwidXBkYXRlUHJvamVjdGlvbk1hdHJpeCIsImlzU2hhZGVyTWF0ZXJpYWwiLCJpc1BlcnNwZWN0aXZlQ2FtZXJhIiwic2V0Rm9jYWxMZW5ndGgiLCJmb2NhbExlbmd0aCIsInZFeHRlbnRTbG9wZSIsImdldEZpbG1IZWlnaHQiLCJhdGFuIiwiZ2V0Rm9jYWxMZW5ndGgiLCJ0YW4iLCJnZXRFZmZlY3RpdmVGT1YiLCJnZXRGaWxtV2lkdGgiLCJzZXRWaWV3T2Zmc2V0IiwiZnVsbFdpZHRoIiwiZnVsbEhlaWdodCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiY2xlYXJWaWV3T2Zmc2V0Iiwic2tldyIsIkN1YmVDYW1lcmEiLCJjdWJlUmVzb2x1dGlvbiIsImNhbWVyYVBYIiwiY2FtZXJhTlgiLCJjYW1lcmFQWSIsImNhbWVyYU5ZIiwiY2FtZXJhUFoiLCJjYW1lcmFOWiIsInJlbmRlclRhcmdldCIsIldlYkdMQ3ViZVJlbmRlclRhcmdldCIsInJlbmRlcmVyIiwic2NlbmUiLCJjdXJyZW50UmVuZGVyVGFyZ2V0IiwiZ2V0UmVuZGVyVGFyZ2V0Iiwic2V0UmVuZGVyVGFyZ2V0IiwicmVuZGVyIiwiY2xlYXIiLCJzdGVuY2lsIiwiZHVtbXkiLCJEYXRhVGV4dHVyZSIsImlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0IiwiZnJvbUVxdWlyZWN0YW5ndWxhclRleHR1cmUiLCJzaGFkZXIiLCJ0RXF1aXJlY3QiLCJqb2luIiwiaXNEYXRhVGV4dHVyZSIsIl9zcGhlcmUkMSIsIl92ZWN0b3IkNSIsIkZydXN0dW0iLCJwNCIsInA1IiwicGxhbmVzIiwiZnJ1c3R1bSIsInNldEZyb21Qcm9qZWN0aW9uTWF0cml4IiwibWUwIiwibWUxIiwibWUyIiwibWUzIiwibWU0IiwibWU1IiwibWU2IiwibWU3IiwibWU4IiwibWU5IiwibWUxMCIsIm1lMTEiLCJtZTEyIiwibWUxMyIsIm1lMTQiLCJtZTE1IiwiaW50ZXJzZWN0c09iamVjdCIsImludGVyc2VjdHNTcHJpdGUiLCJzcHJpdGUiLCJuZWdSYWRpdXMiLCJVbmlmb3Jtc0xpYiIsImNvbW1vbiIsImRpZmZ1c2UiLCJ1dlRyYW5zZm9ybSIsInV2MlRyYW5zZm9ybSIsInNwZWN1bGFybWFwIiwiZW52bWFwIiwiZmxpcEVudk1hcCIsIm1heE1pcExldmVsIiwiYW9tYXAiLCJsaWdodG1hcCIsImVtaXNzaXZlbWFwIiwiYnVtcG1hcCIsIm5vcm1hbG1hcCIsImRpc3BsYWNlbWVudG1hcCIsInJvdWdobmVzc21hcCIsIm1ldGFsbmVzc21hcCIsImdyYWRpZW50bWFwIiwiZm9nRGVuc2l0eSIsImZvZ05lYXIiLCJmb2dGYXIiLCJmb2dDb2xvciIsImFtYmllbnRMaWdodENvbG9yIiwibGlnaHRQcm9iZSIsImRpcmVjdGlvbmFsTGlnaHRzIiwicHJvcGVydGllcyIsImRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzIiwic2hhZG93QmlhcyIsInNoYWRvd1JhZGl1cyIsInNoYWRvd01hcFNpemUiLCJkaXJlY3Rpb25hbFNoYWRvd01hcCIsImRpcmVjdGlvbmFsU2hhZG93TWF0cml4Iiwic3BvdExpZ2h0cyIsImNvbmVDb3MiLCJwZW51bWJyYUNvcyIsImRlY2F5Iiwic3BvdExpZ2h0U2hhZG93cyIsInNwb3RTaGFkb3dNYXAiLCJzcG90U2hhZG93TWF0cml4IiwicG9pbnRMaWdodHMiLCJwb2ludExpZ2h0U2hhZG93cyIsInNoYWRvd0NhbWVyYU5lYXIiLCJzaGFkb3dDYW1lcmFGYXIiLCJwb2ludFNoYWRvd01hcCIsInBvaW50U2hhZG93TWF0cml4IiwiaGVtaXNwaGVyZUxpZ2h0cyIsInNreUNvbG9yIiwiZ3JvdW5kQ29sb3IiLCJyZWN0QXJlYUxpZ2h0cyIsIldlYkdMQW5pbWF0aW9uIiwiaXNBbmltYXRpbmciLCJhbmltYXRpb25Mb29wIiwib25BbmltYXRpb25GcmFtZSIsInRpbWUiLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJzZXRBbmltYXRpb25Mb29wIiwic2V0Q29udGV4dCIsIldlYkdMQXR0cmlidXRlcyIsImdsIiwiY2FwYWJpbGl0aWVzIiwiaXNXZWJHTDIiLCJidWZmZXJzIiwiV2Vha01hcCIsImlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUiLCJkZWxldGVCdWZmZXIiLCJidWZmZXIiLCJkZWxldGUiLCJidWZmZXJUeXBlIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsImJ1ZmZlckRhdGEiLCJieXRlc1BlckVsZW1lbnQiLCJCWVRFU19QRVJfRUxFTUVOVCIsImJ1ZmZlclN1YkRhdGEiLCJzdWJhcnJheSIsInVwZGF0ZUJ1ZmZlciIsIlBsYW5lR2VvbWV0cnkiLCJQbGFuZUJ1ZmZlckdlb21ldHJ5Iiwid2lkdGhfaGFsZiIsImhlaWdodF9oYWxmIiwic2VnbWVudF93aWR0aCIsInNlZ21lbnRfaGVpZ2h0IiwiU2hhZGVyQ2h1bmsiLCJhbHBoYW1hcF9mcmFnbWVudCIsImFscGhhbWFwX3BhcnNfZnJhZ21lbnQiLCJhbHBoYXRlc3RfZnJhZ21lbnQiLCJhb21hcF9mcmFnbWVudCIsImFvbWFwX3BhcnNfZnJhZ21lbnQiLCJiZWdpbl92ZXJ0ZXgiLCJiZWdpbm5vcm1hbF92ZXJ0ZXgiLCJic2RmcyIsImJ1bXBtYXBfcGFyc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCIsImNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50IiwiY2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4IiwiY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCIsImNvbG9yX2ZyYWdtZW50IiwiY29sb3JfcGFyc19mcmFnbWVudCIsImNvbG9yX3BhcnNfdmVydGV4IiwiY29sb3JfdmVydGV4IiwiY3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50IiwiZGVmYXVsdG5vcm1hbF92ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgiLCJkaXNwbGFjZW1lbnRtYXBfdmVydGV4IiwiZW1pc3NpdmVtYXBfZnJhZ21lbnQiLCJlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50IiwiZW5jb2RpbmdzX2ZyYWdtZW50IiwiZW5jb2RpbmdzX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfZnJhZ21lbnQiLCJlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQiLCJlbnZtYXBfcGFyc19mcmFnbWVudCIsImVudm1hcF9wYXJzX3ZlcnRleCIsImVudm1hcF9waHlzaWNhbF9wYXJzX2ZyYWdtZW50IiwiZW52bWFwX3ZlcnRleCIsImZvZ192ZXJ0ZXgiLCJmb2dfcGFyc192ZXJ0ZXgiLCJmb2dfZnJhZ21lbnQiLCJmb2dfcGFyc19mcmFnbWVudCIsImdyYWRpZW50bWFwX3BhcnNfZnJhZ21lbnQiLCJsaWdodG1hcF9mcmFnbWVudCIsImxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfbGFtYmVydF92ZXJ0ZXgiLCJsaWdodHNfcGFyc19iZWdpbiIsImxpZ2h0c190b29uX2ZyYWdtZW50IiwibGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCIsImxpZ2h0c19waG9uZ19mcmFnbWVudCIsImxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50IiwibGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50IiwibGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQiLCJsaWdodHNfZnJhZ21lbnRfYmVnaW4iLCJsaWdodHNfZnJhZ21lbnRfbWFwcyIsImxpZ2h0c19mcmFnbWVudF9lbmQiLCJsb2dkZXB0aGJ1Zl9mcmFnbWVudCIsImxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQiLCJsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleCIsImxvZ2RlcHRoYnVmX3ZlcnRleCIsIm1hcF9mcmFnbWVudCIsIm1hcF9wYXJzX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX2ZyYWdtZW50IiwibWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQiLCJtZXRhbG5lc3NtYXBfZnJhZ21lbnQiLCJtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCIsIm1vcnBobm9ybWFsX3ZlcnRleCIsIm1vcnBodGFyZ2V0X3BhcnNfdmVydGV4IiwibW9ycGh0YXJnZXRfdmVydGV4Iiwibm9ybWFsX2ZyYWdtZW50X2JlZ2luIiwibm9ybWFsX2ZyYWdtZW50X21hcHMiLCJub3JtYWxtYXBfcGFyc19mcmFnbWVudCIsImNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfYmVnaW4iLCJjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMiLCJjbGVhcmNvYXRfcGFyc19mcmFnbWVudCIsInBhY2tpbmciLCJwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50IiwicHJvamVjdF92ZXJ0ZXgiLCJkaXRoZXJpbmdfZnJhZ21lbnQiLCJkaXRoZXJpbmdfcGFyc19mcmFnbWVudCIsInJvdWdobmVzc21hcF9mcmFnbWVudCIsInJvdWdobmVzc21hcF9wYXJzX2ZyYWdtZW50Iiwic2hhZG93bWFwX3BhcnNfZnJhZ21lbnQiLCJzaGFkb3dtYXBfcGFyc192ZXJ0ZXgiLCJzaGFkb3dtYXBfdmVydGV4Iiwic2hhZG93bWFza19wYXJzX2ZyYWdtZW50Iiwic2tpbmJhc2VfdmVydGV4Iiwic2tpbm5pbmdfcGFyc192ZXJ0ZXgiLCJza2lubmluZ192ZXJ0ZXgiLCJza2lubm9ybWFsX3ZlcnRleCIsInNwZWN1bGFybWFwX2ZyYWdtZW50Iiwic3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCIsInRvbmVtYXBwaW5nX2ZyYWdtZW50IiwidG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCIsInV2X3BhcnNfZnJhZ21lbnQiLCJ1dl9wYXJzX3ZlcnRleCIsInV2X3ZlcnRleCIsInV2Ml9wYXJzX2ZyYWdtZW50IiwidXYyX3BhcnNfdmVydGV4IiwidXYyX3ZlcnRleCIsIndvcmxkcG9zX3ZlcnRleCIsImJhY2tncm91bmRfZnJhZyIsImJhY2tncm91bmRfdmVydCIsImN1YmVfZnJhZyIsImN1YmVfdmVydCIsImRlcHRoX2ZyYWciLCJkZXB0aF92ZXJ0IiwiZGlzdGFuY2VSR0JBX2ZyYWciLCJkaXN0YW5jZVJHQkFfdmVydCIsImVxdWlyZWN0X2ZyYWciLCJlcXVpcmVjdF92ZXJ0IiwibGluZWRhc2hlZF9mcmFnIiwibGluZWRhc2hlZF92ZXJ0IiwibWVzaGJhc2ljX2ZyYWciLCJtZXNoYmFzaWNfdmVydCIsIm1lc2hsYW1iZXJ0X2ZyYWciLCJtZXNobGFtYmVydF92ZXJ0IiwibWVzaG1hdGNhcF9mcmFnIiwibWVzaG1hdGNhcF92ZXJ0IiwibWVzaHRvb25fZnJhZyIsIm1lc2h0b29uX3ZlcnQiLCJtZXNocGhvbmdfZnJhZyIsIm1lc2hwaG9uZ192ZXJ0IiwibWVzaHBoeXNpY2FsX2ZyYWciLCJtZXNocGh5c2ljYWxfdmVydCIsIm5vcm1hbF9mcmFnIiwibm9ybWFsX3ZlcnQiLCJwb2ludHNfZnJhZyIsInBvaW50c192ZXJ0Iiwic2hhZG93X2ZyYWciLCJzaGFkb3dfdmVydCIsInNwcml0ZV9mcmFnIiwic3ByaXRlX3ZlcnQiLCJTaGFkZXJMaWIiLCJiYXNpYyIsImxhbWJlcnQiLCJwaG9uZyIsInN0YW5kYXJkIiwidG9vbiIsImRhc2hlZCIsInRvdGFsU2l6ZSIsInQyRCIsImN1YmUiLCJlcXVpcmVjdCIsImRpc3RhbmNlUkdCQSIsInJlZmVyZW5jZVBvc2l0aW9uIiwibmVhckRpc3RhbmNlIiwiZmFyRGlzdGFuY2UiLCJzaGFkb3ciLCJXZWJHTEJhY2tncm91bmQiLCJzdGF0ZSIsIm9iamVjdHMiLCJwbGFuZU1lc2giLCJib3hNZXNoIiwiY2xlYXJDb2xvciIsImNsZWFyQWxwaGEiLCJjdXJyZW50QmFja2dyb3VuZCIsImN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiIsImN1cnJlbnRUb25lbWFwcGluZyIsInNldENsZWFyIiwiZ2V0Q2xlYXJDb2xvciIsInNldENsZWFyQ29sb3IiLCJnZXRDbGVhckFscGhhIiwic2V0Q2xlYXJBbHBoYSIsInJlbmRlckxpc3QiLCJmb3JjZUNsZWFyIiwieHIiLCJzZXNzaW9uIiwiZ2V0U2Vzc2lvbiIsImVudmlyb25tZW50QmxlbmRNb2RlIiwiYXV0b0NsZWFyIiwiYXV0b0NsZWFyQ29sb3IiLCJhdXRvQ2xlYXJEZXB0aCIsImF1dG9DbGVhclN0ZW5jaWwiLCJpc0N1YmVUZXh0dXJlIiwidG9uZU1hcHBpbmciLCJ1bnNoaWZ0IiwiV2ViR0xCdWZmZXJSZW5kZXJlciIsImluZm8iLCJzZXRNb2RlIiwiZHJhd0FycmF5cyIsInJlbmRlckluc3RhbmNlcyIsInByaW1jb3VudCIsImV4dGVuc2lvbiIsIm1ldGhvZE5hbWUiLCJXZWJHTENhcGFiaWxpdGllcyIsIm1heEFuaXNvdHJvcHkiLCJnZXRNYXhQcmVjaXNpb24iLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJXZWJHTDJSZW5kZXJpbmdDb250ZXh0IiwiV2ViR0wyQ29tcHV0ZVJlbmRlcmluZ0NvbnRleHQiLCJtYXhQcmVjaXNpb24iLCJsb2dhcml0aG1pY0RlcHRoQnVmZmVyIiwibWF4VGV4dHVyZXMiLCJtYXhWZXJ0ZXhUZXh0dXJlcyIsIm1heFRleHR1cmVTaXplIiwibWF4Q3ViZW1hcFNpemUiLCJtYXhBdHRyaWJ1dGVzIiwibWF4VmVydGV4VW5pZm9ybXMiLCJtYXhWYXJ5aW5ncyIsIm1heEZyYWdtZW50VW5pZm9ybXMiLCJ2ZXJ0ZXhUZXh0dXJlcyIsImZsb2F0RnJhZ21lbnRUZXh0dXJlcyIsImdldE1heEFuaXNvdHJvcHkiLCJNQVhfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJmbG9hdFZlcnRleFRleHR1cmVzIiwibWF4U2FtcGxlcyIsIldlYkdMQ2xpcHBpbmciLCJnbG9iYWxTdGF0ZSIsIm51bUdsb2JhbFBsYW5lcyIsImxvY2FsQ2xpcHBpbmdFbmFibGVkIiwicmVuZGVyaW5nU2hhZG93cyIsInZpZXdOb3JtYWxNYXRyaXgiLCJ1bmlmb3JtIiwicmVzZXRHbG9iYWxTdGF0ZSIsIm51bVBsYW5lcyIsIm51bUludGVyc2VjdGlvbiIsInByb2plY3RQbGFuZXMiLCJza2lwVHJhbnNmb3JtIiwiblBsYW5lcyIsImRzdEFycmF5IiwiZmxhdFNpemUiLCJ2aWV3TWF0cml4IiwiaTQiLCJpbml0IiwiZW5hYmxlTG9jYWxDbGlwcGluZyIsImJlZ2luU2hhZG93cyIsImVuZFNoYWRvd3MiLCJzZXRTdGF0ZSIsImZyb21DYWNoZSIsIm5HbG9iYWwiLCJsR2xvYmFsIiwiY2xpcHBpbmdTdGF0ZSIsIldlYkdMRXh0ZW5zaW9ucyIsImdldEV4dGVuc2lvbiIsIldlYkdMR2VvbWV0cmllcyIsIndpcmVmcmFtZUF0dHJpYnV0ZXMiLCJvbkdlb21ldHJ5RGlzcG9zZSIsImJ1ZmZlcmdlb21ldHJ5IiwibWVtb3J5IiwidXBkYXRlV2lyZWZyYW1lQXR0cmlidXRlIiwiZ2VvbWV0cnlJbmRleCIsImdlb21ldHJ5UG9zaXRpb24iLCJwcmV2aW91c0F0dHJpYnV0ZSIsIl9idWZmZXJHZW9tZXRyeSIsImdlb21ldHJ5QXR0cmlidXRlcyIsImdldFdpcmVmcmFtZUF0dHJpYnV0ZSIsImN1cnJlbnRBdHRyaWJ1dGUiLCJXZWJHTEluZGV4ZWRCdWZmZXJSZW5kZXJlciIsImRyYXdFbGVtZW50cyIsIldlYkdMSW5mbyIsImNhbGxzIiwidHJpYW5nbGVzIiwibGluZXMiLCJwcm9ncmFtcyIsImF1dG9SZXNldCIsInJlc2V0IiwiaW5zdGFuY2VDb3VudCIsImFic051bWVyaWNhbFNvcnQiLCJXZWJHTE1vcnBodGFyZ2V0cyIsImluZmx1ZW5jZXNMaXN0IiwicHJvZ3JhbSIsIm9iamVjdEluZmx1ZW5jZXMiLCJpbmZsdWVuY2VzIiwibW9ycGhJbmZsdWVuY2VzU3VtIiwibW9ycGhCYXNlSW5mbHVlbmNlIiwiZ2V0VW5pZm9ybXMiLCJzZXRWYWx1ZSIsIldlYkdMT2JqZWN0cyIsInVwZGF0ZU1hcCIsIkN1YmVUZXh0dXJlIiwiRGF0YVRleHR1cmUyREFycmF5Iiwid3JhcFIiLCJEYXRhVGV4dHVyZTNEIiwicGh5c2ljYWwiLCJ0cmFuc3BhcmVuY3kiLCJpc0RhdGFUZXh0dXJlMkRBcnJheSIsImlzRGF0YVRleHR1cmUzRCIsImVtcHR5VGV4dHVyZSIsImVtcHR5VGV4dHVyZTJkQXJyYXkiLCJlbXB0eVRleHR1cmUzZCIsImVtcHR5Q3ViZVRleHR1cmUiLCJhcnJheUNhY2hlRjMyIiwiYXJyYXlDYWNoZUkzMiIsIm1hdDRhcnJheSIsIm1hdDNhcnJheSIsIm1hdDJhcnJheSIsImZsYXR0ZW4iLCJuQmxvY2tzIiwiYmxvY2tTaXplIiwiZmlyc3RFbGVtIiwiYXJyYXlzRXF1YWwiLCJhbGxvY1RleFVuaXRzIiwiYWxsb2NhdGVUZXh0dXJlVW5pdCIsInNldFZhbHVlVjFmIiwidW5pZm9ybTFmIiwiYWRkciIsInNldFZhbHVlVjJmIiwidW5pZm9ybTJmIiwidW5pZm9ybTJmdiIsInNldFZhbHVlVjNmIiwidW5pZm9ybTNmIiwidW5pZm9ybTNmdiIsInNldFZhbHVlVjRmIiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInNldFZhbHVlTTIiLCJ1bmlmb3JtTWF0cml4MmZ2Iiwic2V0VmFsdWVNMyIsInVuaWZvcm1NYXRyaXgzZnYiLCJzZXRWYWx1ZU00IiwidW5pZm9ybU1hdHJpeDRmdiIsInNldFZhbHVlVDEiLCJ1bml0IiwidW5pZm9ybTFpIiwic2FmZVNldFRleHR1cmUyRCIsInNldFZhbHVlVDJEQXJyYXkxIiwic2V0VGV4dHVyZTJEQXJyYXkiLCJzZXRWYWx1ZVQzRDEiLCJzZXRUZXh0dXJlM0QiLCJzZXRWYWx1ZVQ2Iiwic2FmZVNldFRleHR1cmVDdWJlIiwic2V0VmFsdWVWMWkiLCJzZXRWYWx1ZVYyaSIsInVuaWZvcm0yaXYiLCJzZXRWYWx1ZVYzaSIsInVuaWZvcm0zaXYiLCJzZXRWYWx1ZVY0aSIsInVuaWZvcm00aXYiLCJzZXRWYWx1ZVYxdWkiLCJ1bmlmb3JtMXVpIiwic2V0VmFsdWVWMWZBcnJheSIsInVuaWZvcm0xZnYiLCJzZXRWYWx1ZVYxaUFycmF5IiwidW5pZm9ybTFpdiIsInNldFZhbHVlVjJpQXJyYXkiLCJzZXRWYWx1ZVYzaUFycmF5Iiwic2V0VmFsdWVWNGlBcnJheSIsInNldFZhbHVlVjJmQXJyYXkiLCJzZXRWYWx1ZVYzZkFycmF5Iiwic2V0VmFsdWVWNGZBcnJheSIsInNldFZhbHVlTTJBcnJheSIsInNldFZhbHVlTTNBcnJheSIsInNldFZhbHVlTTRBcnJheSIsInNldFZhbHVlVDFBcnJheSIsInVuaXRzIiwic2V0VmFsdWVUNkFycmF5IiwiU2luZ2xlVW5pZm9ybSIsImFjdGl2ZUluZm8iLCJnZXRTaW5ndWxhclNldHRlciIsIlB1cmVBcnJheVVuaWZvcm0iLCJnZXRQdXJlQXJyYXlTZXR0ZXIiLCJTdHJ1Y3R1cmVkVW5pZm9ybSIsInNlcSIsInVwZGF0ZUNhY2hlIiwiUmVQYXRoUGFydCIsImFkZFVuaWZvcm0iLCJjb250YWluZXIiLCJ1bmlmb3JtT2JqZWN0IiwicGFyc2VVbmlmb3JtIiwicGF0aCIsInBhdGhMZW5ndGgiLCJsYXN0SW5kZXgiLCJtYXRjaEVuZCIsImlkSXNJbmRleCIsInN1YnNjcmlwdCIsIm5leHQiLCJXZWJHTFVuaWZvcm1zIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJXZWJHTFNoYWRlciIsImNyZWF0ZVNoYWRlciIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJzZXRPcHRpb25hbCIsInVwbG9hZCIsInNlcVdpdGhWYWx1ZSIsInByb2dyYW1JZENvdW50IiwiZ2V0RW5jb2RpbmdDb21wb25lbnRzIiwiZ2V0U2hhZGVyRXJyb3JzIiwic3RhdHVzIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiZ2V0U2hhZGVySW5mb0xvZyIsInRyaW0iLCJzcGxpdCIsImFkZExpbmVOdW1iZXJzIiwiZ2V0U2hhZGVyU291cmNlIiwiZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uIiwiZnVuY3Rpb25OYW1lIiwiZ2V0VG9uZU1hcHBpbmdGdW5jdGlvbiIsInRvbmVNYXBwaW5nTmFtZSIsImZpbHRlckVtcHR5TGluZSIsInJlcGxhY2VMaWdodE51bXMiLCJyZXBsYWNlIiwibnVtRGlyTGlnaHRzIiwibnVtU3BvdExpZ2h0cyIsIm51bVJlY3RBcmVhTGlnaHRzIiwibnVtUG9pbnRMaWdodHMiLCJudW1IZW1pTGlnaHRzIiwibnVtRGlyTGlnaHRTaGFkb3dzIiwibnVtU3BvdExpZ2h0U2hhZG93cyIsIm51bVBvaW50TGlnaHRTaGFkb3dzIiwicmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zIiwibnVtQ2xpcHBpbmdQbGFuZXMiLCJudW1DbGlwSW50ZXJzZWN0aW9uIiwiaW5jbHVkZVBhdHRlcm4iLCJyZXNvbHZlSW5jbHVkZXMiLCJpbmNsdWRlUmVwbGFjZXIiLCJpbmNsdWRlIiwiZGVwcmVjYXRlZFVucm9sbExvb3BQYXR0ZXJuIiwidW5yb2xsTG9vcFBhdHRlcm4iLCJ1bnJvbGxMb29wcyIsImxvb3BSZXBsYWNlciIsImRlcHJlY2F0ZWRMb29wUmVwbGFjZXIiLCJzbmlwcGV0IiwiZ2VuZXJhdGVQcmVjaXNpb24iLCJwcmVjaXNpb25zdHJpbmciLCJXZWJHTFByb2dyYW0iLCJjYWNoZUtleSIsInByZWZpeFZlcnRleCIsInByZWZpeEZyYWdtZW50Iiwic2hhZG93TWFwVHlwZURlZmluZSIsInNoYWRvd01hcFR5cGUiLCJnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUiLCJlbnZNYXBUeXBlRGVmaW5lIiwiZW52TWFwTW9kZSIsImdlbmVyYXRlRW52TWFwVHlwZURlZmluZSIsImVudk1hcE1vZGVEZWZpbmUiLCJnZW5lcmF0ZUVudk1hcE1vZGVEZWZpbmUiLCJlbnZNYXBCbGVuZGluZ0RlZmluZSIsImdlbmVyYXRlRW52TWFwQmxlbmRpbmdEZWZpbmUiLCJnYW1tYUZhY3RvckRlZmluZSIsImN1c3RvbUV4dGVuc2lvbnMiLCJleHRlbnNpb25EZXJpdmF0aXZlcyIsImVudk1hcEN1YmVVViIsInRhbmdlbnRTcGFjZU5vcm1hbE1hcCIsInNoYWRlcklEIiwiZXh0ZW5zaW9uRnJhZ0RlcHRoIiwicmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGgiLCJleHRlbnNpb25EcmF3QnVmZmVycyIsInJlbmRlcmVyRXh0ZW5zaW9uRHJhd0J1ZmZlcnMiLCJleHRlbnNpb25TaGFkZXJUZXh0dXJlTE9EIiwicmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kIiwiZmlsdGVyIiwiZ2VuZXJhdGVFeHRlbnNpb25zIiwiY3VzdG9tRGVmaW5lcyIsImNodW5rcyIsImdlbmVyYXRlRGVmaW5lcyIsImNyZWF0ZVByb2dyYW0iLCJpc1Jhd1NoYWRlck1hdGVyaWFsIiwic2hhZGVyTmFtZSIsImluc3RhbmNpbmciLCJzdXBwb3J0c1ZlcnRleFRleHR1cmVzIiwibWF4Qm9uZXMiLCJ1c2VGb2ciLCJmb2dFeHAyIiwib2JqZWN0U3BhY2VOb3JtYWxNYXAiLCJ2ZXJ0ZXhUYW5nZW50cyIsInV2c1ZlcnRleE9ubHkiLCJ1c2VWZXJ0ZXhUZXh0dXJlIiwiZG91YmxlU2lkZWQiLCJmbGlwU2lkZWQiLCJzaGFkb3dNYXBFbmFibGVkIiwicGh5c2ljYWxseUNvcnJlY3RMaWdodHMiLCJvdXRwdXRFbmNvZGluZyIsIm1hcEVuY29kaW5nIiwibWF0Y2FwRW5jb2RpbmciLCJlbnZNYXBFbmNvZGluZyIsImVtaXNzaXZlTWFwRW5jb2RpbmciLCJsaWdodE1hcEVuY29kaW5nIiwiZGVwdGhQYWNraW5nIiwiaXNHTFNMM1NoYWRlck1hdGVyaWFsIiwidmVyc2lvblJlZ2V4IiwiY2FjaGVkVW5pZm9ybXMiLCJjYWNoZWRBdHRyaWJ1dGVzIiwiZnJhZ21lbnRHbHNsIiwiZ2xWZXJ0ZXhTaGFkZXIiLCJnbEZyYWdtZW50U2hhZGVyIiwiYXR0YWNoU2hhZGVyIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJkZWJ1ZyIsImNoZWNrU2hhZGVyRXJyb3JzIiwicHJvZ3JhbUxvZyIsImdldFByb2dyYW1JbmZvTG9nIiwidmVydGV4TG9nIiwiZnJhZ21lbnRMb2ciLCJydW5uYWJsZSIsImhhdmVEaWFnbm9zdGljcyIsInZlcnRleEVycm9ycyIsImZyYWdtZW50RXJyb3JzIiwiZ2V0RXJyb3IiLCJkaWFnbm9zdGljcyIsInByZWZpeCIsImRldGFjaFNoYWRlciIsImRlbGV0ZVNoYWRlciIsImdldEF0dHJpYnV0ZXMiLCJnZXRBY3RpdmVBdHRyaWIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImZldGNoQXR0cmlidXRlTG9jYXRpb25zIiwiZGVzdHJveSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VkVGltZXMiLCJXZWJHTFByb2dyYW1zIiwic2hhZGVySURzIiwiTWVzaERlcHRoTWF0ZXJpYWwiLCJNZXNoRGlzdGFuY2VNYXRlcmlhbCIsIk1lc2hOb3JtYWxNYXRlcmlhbCIsIk1lc2hMYW1iZXJ0TWF0ZXJpYWwiLCJNZXNoUGhvbmdNYXRlcmlhbCIsIk1lc2hUb29uTWF0ZXJpYWwiLCJNZXNoU3RhbmRhcmRNYXRlcmlhbCIsIk1lc2hQaHlzaWNhbE1hdGVyaWFsIiwiTWVzaE1hdGNhcE1hdGVyaWFsIiwiTGluZUJhc2ljTWF0ZXJpYWwiLCJMaW5lRGFzaGVkTWF0ZXJpYWwiLCJQb2ludHNNYXRlcmlhbCIsIlNoYWRvd01hdGVyaWFsIiwiU3ByaXRlTWF0ZXJpYWwiLCJwYXJhbWV0ZXJOYW1lcyIsImdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAiLCJnZXRQYXJhbWV0ZXJzIiwic2hhZG93cyIsIm5DbGlwUGxhbmVzIiwibkNsaXBJbnRlcnNlY3Rpb24iLCJpc01lc2hTdGFuZGFyZE1hdGVyaWFsIiwiaXNTa2lubmVkTWVzaCIsImJvbmVzIiwic2tlbGV0b24iLCJuVmVydGV4VW5pZm9ybXMiLCJuVmVydGV4TWF0cmljZXMiLCJhbGxvY2F0ZUJvbmVzIiwic2hhZGVyb2JqZWN0IiwiZ2V0U2hhZGVyT2JqZWN0IiwiaXNGb2dFeHAyIiwibWF4TW9ycGhUYXJnZXRzIiwibWF4TW9ycGhOb3JtYWxzIiwiZGlyZWN0aW9uYWwiLCJzcG90IiwicmVjdEFyZWEiLCJoZW1pIiwic2hhZG93TWFwIiwiZ2V0UHJvZ3JhbUNhY2hlS2V5IiwiYWNxdWlyZVByb2dyYW0iLCJwbCIsInByZWV4aXN0aW5nUHJvZ3JhbSIsInJlbGVhc2VQcm9ncmFtIiwicG9wIiwiV2ViR0xQcm9wZXJ0aWVzIiwicGFpbnRlclNvcnRTdGFibGUiLCJncm91cE9yZGVyIiwicmV2ZXJzZVBhaW50ZXJTb3J0U3RhYmxlIiwiV2ViR0xSZW5kZXJMaXN0IiwicmVuZGVySXRlbXMiLCJyZW5kZXJJdGVtc0luZGV4Iiwib3BhcXVlIiwiZGVmYXVsdFByb2dyYW0iLCJnZXROZXh0UmVuZGVySXRlbSIsInJlbmRlckl0ZW0iLCJmaW5pc2giLCJjdXN0b21PcGFxdWVTb3J0IiwiY3VzdG9tVHJhbnNwYXJlbnRTb3J0IiwiV2ViR0xSZW5kZXJMaXN0cyIsImxpc3RzIiwib25TY2VuZURpc3Bvc2UiLCJsaXN0IiwiY2FtZXJhcyIsIlVuaWZvcm1zQ2FjaGUiLCJsaWdodCIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJuZXh0VmVyc2lvbiIsInNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCIsImxpZ2h0QSIsImxpZ2h0QiIsIldlYkdMTGlnaHRzIiwic2hhZG93Q2FjaGUiLCJkaXJlY3Rpb25hbExlbmd0aCIsInBvaW50TGVuZ3RoIiwic3BvdExlbmd0aCIsInJlY3RBcmVhTGVuZ3RoIiwiaGVtaUxlbmd0aCIsIm51bURpcmVjdGlvbmFsU2hhZG93cyIsIm51bVBvaW50U2hhZG93cyIsIm51bVNwb3RTaGFkb3dzIiwiYW1iaWVudCIsInByb2JlIiwiZGlyZWN0aW9uYWxTaGFkb3ciLCJzcG90U2hhZG93IiwicG9pbnRTaGFkb3ciLCJ2ZWN0b3IzIiwibWF0cml4NDIiLCJzZXR1cCIsImludGVuc2l0eSIsImlzQW1iaWVudExpZ2h0IiwiaXNMaWdodFByb2JlIiwic2giLCJjb2VmZmljaWVudHMiLCJpc0RpcmVjdGlvbmFsTGlnaHQiLCJzaGFkb3dVbmlmb3JtcyIsImJpYXMiLCJtYXBTaXplIiwiaXNTcG90TGlnaHQiLCJwZW51bWJyYSIsImlzUmVjdEFyZWFMaWdodCIsImlzUG9pbnRMaWdodCIsImlzSGVtaXNwaGVyZUxpZ2h0IiwiV2ViR0xSZW5kZXJTdGF0ZSIsImxpZ2h0c0FycmF5Iiwic2hhZG93c0FycmF5Iiwic2V0dXBMaWdodHMiLCJwdXNoTGlnaHQiLCJwdXNoU2hhZG93Iiwic2hhZG93TGlnaHQiLCJXZWJHTFJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlcyIsInJlbmRlclN0YXRlIiwiaGFzIiwiaXNNZXNoRGVwdGhNYXRlcmlhbCIsImlzTWVzaERpc3RhbmNlTWF0ZXJpYWwiLCJXZWJHTFNoYWRvd01hcCIsIl9yZW5kZXJlciIsIl9vYmplY3RzIiwiX2ZydXN0dW0iLCJfc2hhZG93TWFwU2l6ZSIsIl92aWV3cG9ydFNpemUiLCJfdmlld3BvcnQiLCJfZGVwdGhNYXRlcmlhbHMiLCJfZGlzdGFuY2VNYXRlcmlhbHMiLCJfbWF0ZXJpYWxDYWNoZSIsIjAiLCIxIiwiMiIsInNoYWRvd01hdGVyaWFsVmVydGljYWwiLCJTQU1QTEVfUkFURSIsIkhBTEZfU0FNUExFX1JBVEUiLCJzaGFkb3dfcGFzcyIsInJlc29sdXRpb24iLCJzaGFkb3dNYXRlcmlhbEhvcml6b25hbCIsIkhPUklaT05BTF9QQVNTIiwiZnVsbFNjcmVlblRyaSIsImZ1bGxTY3JlZW5NZXNoIiwiVlNNUGFzcyIsIm1hcFBhc3MiLCJyZW5kZXJCdWZmZXJEaXJlY3QiLCJnZXREZXB0aE1hdGVyaWFsVmFyaWFudCIsInVzZU1vcnBoaW5nIiwidXNlU2tpbm5pbmciLCJ1c2VJbnN0YW5jaW5nIiwiZ2V0RGlzdGFuY2VNYXRlcmlhbFZhcmlhbnQiLCJnZXREZXB0aE1hdGVyaWFsIiwicmVzdWx0IiwiZ2V0TWF0ZXJpYWxWYXJpYW50IiwiY3VzdG9tTWF0ZXJpYWwiLCJjdXN0b21EZXB0aE1hdGVyaWFsIiwiY3VzdG9tRGlzdGFuY2VNYXRlcmlhbCIsImtleUEiLCJrZXlCIiwibWF0ZXJpYWxzRm9yVmFyaWFudCIsImNhY2hlZE1hdGVyaWFsIiwicmVuZGVyT2JqZWN0Iiwic2hhZG93Q2FtZXJhIiwiZGVwdGhNYXRlcmlhbCIsImFjdGl2ZUN1YmVGYWNlIiwiZ2V0QWN0aXZlQ3ViZUZhY2UiLCJhY3RpdmVNaXBtYXBMZXZlbCIsImdldEFjdGl2ZU1pcG1hcExldmVsIiwiX3N0YXRlIiwic2V0QmxlbmRpbmciLCJzZXRUZXN0Iiwic2V0U2Npc3NvclRlc3QiLCJzaGFkb3dGcmFtZUV4dGVudHMiLCJnZXRGcmFtZUV4dGVudHMiLCJpc1BvaW50TGlnaHRTaGFkb3ciLCJwYXJzIiwidmlld3BvcnRDb3VudCIsImdldFZpZXdwb3J0Q291bnQiLCJ2cCIsImdldFZpZXdwb3J0IiwidXBkYXRlTWF0cmljZXMiLCJnZXRGcnVzdHVtIiwiV2ViR0xTdGF0ZSIsImNvbG9yQnVmZmVyIiwibG9ja2VkIiwiY3VycmVudENvbG9yTWFzayIsImN1cnJlbnRDb2xvckNsZWFyIiwic2V0TWFzayIsImNvbG9yTWFzayIsInNldExvY2tlZCIsImxvY2siLCJjdXJyZW50RGVwdGhNYXNrIiwiY3VycmVudERlcHRoRnVuYyIsImN1cnJlbnREZXB0aENsZWFyIiwiZGVwdGhNYXNrIiwic2V0RnVuYyIsImNsZWFyRGVwdGgiLCJjdXJyZW50U3RlbmNpbE1hc2siLCJjdXJyZW50U3RlbmNpbEZ1bmMiLCJjdXJyZW50U3RlbmNpbFJlZiIsImN1cnJlbnRTdGVuY2lsRnVuY01hc2siLCJjdXJyZW50U3RlbmNpbEZhaWwiLCJjdXJyZW50U3RlbmNpbFpGYWlsIiwiY3VycmVudFN0ZW5jaWxaUGFzcyIsImN1cnJlbnRTdGVuY2lsQ2xlYXIiLCJzdGVuY2lsVGVzdCIsInN0ZW5jaWxNYXNrIiwic2V0T3AiLCJzdGVuY2lsT3AiLCJjbGVhclN0ZW5jaWwiLCJtYXhWZXJ0ZXhBdHRyaWJ1dGVzIiwibmV3QXR0cmlidXRlcyIsImVuYWJsZWRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlRGl2aXNvcnMiLCJlbmFibGVkQ2FwYWJpbGl0aWVzIiwiY3VycmVudFByb2dyYW0iLCJjdXJyZW50QmxlbmRpbmdFbmFibGVkIiwiY3VycmVudEJsZW5kaW5nIiwiY3VycmVudEJsZW5kRXF1YXRpb24iLCJjdXJyZW50QmxlbmRTcmMiLCJjdXJyZW50QmxlbmREc3QiLCJjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhIiwiY3VycmVudEJsZW5kU3JjQWxwaGEiLCJjdXJyZW50QmxlbmREc3RBbHBoYSIsImN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSIsImN1cnJlbnRGbGlwU2lkZWQiLCJjdXJyZW50Q3VsbEZhY2UiLCJjdXJyZW50TGluZVdpZHRoIiwiY3VycmVudFBvbHlnb25PZmZzZXRGYWN0b3IiLCJjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzIiwibGluZVdpZHRoQXZhaWxhYmxlIiwiZ2xWZXJzaW9uIiwiY3VycmVudFRleHR1cmVTbG90IiwiY3VycmVudEJvdW5kVGV4dHVyZXMiLCJjdXJyZW50U2Npc3NvciIsImN1cnJlbnRWaWV3cG9ydCIsImNyZWF0ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInRleFBhcmFtZXRlcmkiLCJ0ZXhJbWFnZTJEIiwiZW1wdHlUZXh0dXJlcyIsImVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IiLCJtZXNoUGVyQXR0cmlidXRlIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzZXRGbGlwU2lkZWQiLCJzZXRDdWxsRmFjZSIsImVxdWF0aW9uVG9HTCIsIk1JTl9FWFQiLCJNQVhfRVhUIiwiZmFjdG9yVG9HTCIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsImJsZW5kRnVuY1NlcGFyYXRlIiwiYmxlbmRGdW5jIiwiZnJvbnRGYWNlIiwiY3VsbEZhY2UiLCJzZXRQb2x5Z29uT2Zmc2V0IiwiZmFjdG9yIiwiYWN0aXZlVGV4dHVyZSIsIndlYmdsU2xvdCIsImluaXRBdHRyaWJ1dGVzIiwiZW5hYmxlQXR0cmlidXRlIiwiZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ1c2VQcm9ncmFtIiwic2V0TWF0ZXJpYWwiLCJmcm9udEZhY2VDVyIsInNldExpbmVXaWR0aCIsImxpbmVXaWR0aCIsIndlYmdsVHlwZSIsIndlYmdsVGV4dHVyZSIsImJvdW5kVGV4dHVyZSIsInVuYmluZFRleHR1cmUiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsImFwcGx5IiwidGV4SW1hZ2UzRCIsIldlYkdMVGV4dHVyZXMiLCJfZ2wiLCJ1dGlscyIsIl92aWRlb1RleHR1cmVzIiwidXNlT2Zmc2NyZWVuQ2FudmFzIiwiT2Zmc2NyZWVuQ2FudmFzIiwiZXJyIiwiY3JlYXRlQ2FudmFzIiwicmVzaXplSW1hZ2UiLCJuZWVkc1Bvd2VyT2ZUd28iLCJuZWVkc05ld0NhbnZhcyIsIm1heFNpemUiLCJIVE1MSW1hZ2VFbGVtZW50IiwiSW1hZ2VCaXRtYXAiLCJ0ZXh0dXJlTmVlZHNHZW5lcmF0ZU1pcG1hcHMiLCJzdXBwb3J0c01pcHMiLCJnZW5lcmF0ZU1pcG1hcCIsIl9fbWF4TWlwTGV2ZWwiLCJMT0cyRSIsImdldEludGVybmFsRm9ybWF0IiwiaW50ZXJuYWxGb3JtYXROYW1lIiwiZ2xGb3JtYXQiLCJnbFR5cGUiLCJmaWx0ZXJGYWxsYmFjayIsIm9uVGV4dHVyZURpc3Bvc2UiLCJ0ZXh0dXJlUHJvcGVydGllcyIsIl9fd2ViZ2xJbml0IiwiZGVsZXRlVGV4dHVyZSIsIl9fd2ViZ2xUZXh0dXJlIiwiZGVhbGxvY2F0ZVRleHR1cmUiLCJpc1ZpZGVvVGV4dHVyZSIsIm9uUmVuZGVyVGFyZ2V0RGlzcG9zZSIsInJlbmRlclRhcmdldFByb3BlcnRpZXMiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xEZXB0aGJ1ZmZlciIsImRlbGV0ZVJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciIsIl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciIsIl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciIsImRlYWxsb2NhdGVSZW5kZXJUYXJnZXQiLCJ0ZXh0dXJlVW5pdHMiLCJzZXRUZXh0dXJlMkQiLCJzbG90IiwidXBkYXRlVmlkZW9UZXh0dXJlIiwiX192ZXJzaW9uIiwiY29tcGxldGUiLCJ1cGxvYWRUZXh0dXJlIiwic2V0VGV4dHVyZUN1YmUiLCJpbml0VGV4dHVyZSIsInBpeGVsU3RvcmVpIiwiaXNDb21wcmVzc2VkIiwiaXNDb21wcmVzc2VkVGV4dHVyZSIsImN1YmVJbWFnZSIsImNvbnZlcnQiLCJnbEludGVybmFsRm9ybWF0Iiwic2V0VGV4dHVyZVBhcmFtZXRlcnMiLCJtaXBtYXAiLCJtaXBtYXBJbWFnZSIsInNldFRleHR1cmVDdWJlRHluYW1pYyIsIndyYXBwaW5nVG9HTCIsImZpbHRlclRvR0wiLCJ0ZXh0dXJlVHlwZSIsIl9fY3VycmVudEFuaXNvdHJvcHkiLCJ0ZXhQYXJhbWV0ZXJmIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJ0ZXh0dXJlTmVlZHNQb3dlck9mVHdvIiwiaXNEZXB0aFRleHR1cmUiLCJzZXR1cEZyYW1lQnVmZmVyVGV4dHVyZSIsImZyYW1lYnVmZmVyIiwiYXR0YWNobWVudCIsInRleHR1cmVUYXJnZXQiLCJiaW5kRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsInNldHVwUmVuZGVyQnVmZmVyU3RvcmFnZSIsInJlbmRlcmJ1ZmZlciIsImlzTXVsdGlzYW1wbGUiLCJiaW5kUmVuZGVyYnVmZmVyIiwiZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyIsInJlbmRlcmJ1ZmZlclN0b3JhZ2VNdWx0aXNhbXBsZSIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsInNldHVwRGVwdGhSZW5kZXJidWZmZXIiLCJpc0N1YmUiLCJ3ZWJnbERlcHRoVGV4dHVyZSIsInNldHVwRGVwdGhUZXh0dXJlIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwid2FybmVkVGV4dHVyZTJEIiwid2FybmVkVGV4dHVyZUN1YmUiLCJ0ZXh0dXJlVW5pdCIsInJlc2V0VGV4dHVyZVVuaXRzIiwic2V0dXBSZW5kZXJUYXJnZXQiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsInVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCIsInVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0IiwiYmxpdEZyYW1lYnVmZmVyIiwiV2ViR0xVdGlscyIsIkhBTEZfRkxPQVRfT0VTIiwiQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCIsIkNPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUciLCJDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wiLCJDT01QUkVTU0VEX1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfUkdCQThfRVRDMl9FQUMiLCJVTlNJR05FRF9JTlRfMjRfOF9XRUJHTCIsIkFycmF5Q2FtZXJhIiwiR3JvdXAiLCJXZWJYUk1hbmFnZXIiLCJmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIiwicmVmZXJlbmNlU3BhY2UiLCJyZWZlcmVuY2VTcGFjZVR5cGUiLCJwb3NlIiwiY29udHJvbGxlcnMiLCJpbnB1dFNvdXJjZXNNYXAiLCJNYXAiLCJjYW1lcmFMIiwiY2FtZXJhUiIsImNhbWVyYVZSIiwiX2N1cnJlbnREZXB0aE5lYXIiLCJfY3VycmVudERlcHRoRmFyIiwib25TZXNzaW9uRXZlbnQiLCJjb250cm9sbGVyIiwiaW5wdXRTb3VyY2UiLCJ0YXJnZXRSYXkiLCJncmlwIiwib25TZXNzaW9uRW5kIiwiZm9yRWFjaCIsInNldEZyYW1lYnVmZmVyIiwiYW5pbWF0aW9uIiwiaXNQcmVzZW50aW5nIiwib25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UiLCJ1cGRhdGVJbnB1dFNvdXJjZXMiLCJpbnB1dFNvdXJjZXMiLCJyZW1vdmVkIiwiYWRkZWQiLCJnZXRDb250cm9sbGVyIiwiZ2V0Q29udHJvbGxlckdyaXAiLCJzZXRGcmFtZWJ1ZmZlclNjYWxlRmFjdG9yIiwic2V0UmVmZXJlbmNlU3BhY2VUeXBlIiwiZ2V0UmVmZXJlbmNlU3BhY2UiLCJzZXRTZXNzaW9uIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJsYXllckluaXQiLCJhbnRpYWxpYXMiLCJiYXNlTGF5ZXIiLCJYUldlYkdMTGF5ZXIiLCJ1cGRhdGVSZW5kZXJTdGF0ZSIsInJlcXVlc3RSZWZlcmVuY2VTcGFjZSIsInRoZW4iLCJjYW1lcmFMUG9zIiwiY2FtZXJhUlBvcyIsInVwZGF0ZUNhbWVyYSIsImdldENhbWVyYSIsImRlcHRoTmVhciIsImRlcHRoRmFyIiwiaXBkIiwicHJvakwiLCJwcm9qUiIsInRvcEZvdiIsImJvdHRvbUZvdiIsImxlZnRGb3YiLCJyaWdodEZvdiIsInpPZmZzZXQiLCJ4T2Zmc2V0IiwibmVhcjIiLCJmYXIyIiwibGVmdDIiLCJyaWdodDIiLCJ0b3AyIiwiYm90dG9tMiIsInNldFByb2plY3Rpb25Gcm9tVW5pb24iLCJvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2siLCJnZXRWaWV3ZXJQb3NlIiwidmlld3MiLCJ0cmFuc2Zvcm0iLCJpbnB1dFBvc2UiLCJncmlwUG9zZSIsImdldFBvc2UiLCJ0YXJnZXRSYXlTcGFjZSIsImdyaXBTcGFjZSIsIldlYkdMUmVuZGVyZXIiLCJfY29udGV4dCIsIl9hbHBoYSIsIl9kZXB0aCIsIl9zdGVuY2lsIiwiX2FudGlhbGlhcyIsIl9wcmVtdWx0aXBsaWVkQWxwaGEiLCJfcHJlc2VydmVEcmF3aW5nQnVmZmVyIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiX3Bvd2VyUHJlZmVyZW5jZSIsInBvd2VyUHJlZmVyZW5jZSIsIl9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsImN1cnJlbnRSZW5kZXJMaXN0IiwiY3VycmVudFJlbmRlclN0YXRlIiwiZG9tRWxlbWVudCIsInNvcnRPYmplY3RzIiwidG9uZU1hcHBpbmdFeHBvc3VyZSIsInRvbmVNYXBwaW5nV2hpdGVQb2ludCIsInByb2dyYW1DYWNoZSIsInJlbmRlckxpc3RzIiwibW9ycGh0YXJnZXRzIiwiYnVmZmVyUmVuZGVyZXIiLCJpbmRleGVkQnVmZmVyUmVuZGVyZXIiLCJfdGhpcyIsIl9pc0NvbnRleHRMb3N0IiwiX2ZyYW1lYnVmZmVyIiwiX2N1cnJlbnRBY3RpdmVDdWJlRmFjZSIsIl9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWwiLCJfY3VycmVudFJlbmRlclRhcmdldCIsIl9jdXJyZW50RnJhbWVidWZmZXIiLCJfY3VycmVudE1hdGVyaWFsSWQiLCJfY3VycmVudEdlb21ldHJ5UHJvZ3JhbSIsIl9jdXJyZW50Q2FtZXJhIiwiX2N1cnJlbnRBcnJheUNhbWVyYSIsIl9jdXJyZW50Vmlld3BvcnQiLCJfY3VycmVudFNjaXNzb3IiLCJfY3VycmVudFNjaXNzb3JUZXN0IiwiX3dpZHRoIiwiX2hlaWdodCIsIl9waXhlbFJhdGlvIiwiX29wYXF1ZVNvcnQiLCJfdHJhbnNwYXJlbnRTb3J0IiwiX3NjaXNzb3IiLCJfc2Npc3NvclRlc3QiLCJfY2xpcHBpbmciLCJfY2xpcHBpbmdFbmFibGVkIiwiX2xvY2FsQ2xpcHBpbmdFbmFibGVkIiwiX3Byb2pTY3JlZW5NYXRyaXgiLCJfdmVjdG9yMyIsImdldFRhcmdldFBpeGVsUmF0aW8iLCJjb250ZXh0QXR0cmlidXRlcyIsInhyQ29tcGF0aWJsZSIsIm9uQ29udGV4dExvc3QiLCJvbkNvbnRleHRSZXN0b3JlIiwibWVzc2FnZSIsImluaXRHTENvbnRleHQiLCJwcmV2ZW50RGVmYXVsdCIsIm9uTWF0ZXJpYWxEaXNwb3NlIiwicmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSIsImRlYWxsb2NhdGVNYXRlcmlhbCIsInByb2dyYW1JbmZvIiwiZm9yY2VDb250ZXh0TG9zcyIsImxvc2VDb250ZXh0IiwiZm9yY2VDb250ZXh0UmVzdG9yZSIsInJlc3RvcmVDb250ZXh0IiwiZ2V0UGl4ZWxSYXRpbyIsInNldFBpeGVsUmF0aW8iLCJ1cGRhdGVTdHlsZSIsInNldFZpZXdwb3J0IiwiZ2V0RHJhd2luZ0J1ZmZlclNpemUiLCJzZXREcmF3aW5nQnVmZmVyU2l6ZSIsInBpeGVsUmF0aW8iLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRTY2lzc29yIiwic2V0U2Npc3NvciIsImdldFNjaXNzb3JUZXN0IiwiYm9vbGVhbiIsInNldE9wYXF1ZVNvcnQiLCJtZXRob2QiLCJzZXRUcmFuc3BhcmVudFNvcnQiLCJiaXRzIiwicmVuZGVyQnVmZmVySW1tZWRpYXRlIiwiaGFzUG9zaXRpb25zIiwiaGFzTm9ybWFscyIsImhhc1V2cyIsImhhc0NvbG9ycyIsInByb2dyYW1BdHRyaWJ1dGVzIiwicG9zaXRpb25BcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJub3JtYWxBcnJheSIsInV2QXJyYXkiLCJjb2xvckFycmF5IiwidGVtcFNjZW5lIiwic2V0UHJvZ3JhbSIsInVwZGF0ZUJ1ZmZlcnMiLCJyYW5nZUZhY3RvciIsImlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJwcm9ncmFtQXR0cmlidXRlIiwiZ2VvbWV0cnlBdHRyaWJ1dGUiLCJzdHJpZGUiLCJpc0luc3RhbmNlZEludGVybGVhdmVkQnVmZmVyIiwibWF4SW5zdGFuY2VkQ291bnQiLCJpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsInZlcnRleEF0dHJpYjFmdiIsInNldHVwVmVydGV4QXR0cmlidXRlcyIsImRhdGFDb3VudCIsInJhbmdlU3RhcnQiLCJyYW5nZUNvdW50IiwiZHJhd1N0YXJ0IiwiZHJhd0VuZCIsImRyYXdDb3VudCIsImlzTGluZVNlZ21lbnRzIiwiaXNMaW5lTG9vcCIsImlzU3ByaXRlIiwiY29tcGlsZSIsImNvbXBpbGVkIiwiaW5pdE1hdGVyaWFsIiwicHJvamVjdE9iamVjdCIsImlzR3JvdXAiLCJpc0xPRCIsImlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwicmVuZGVyT2JqZWN0cyIsImlzQXJyYXlDYW1lcmEiLCJjYW1lcmEyIiwicmVuZGVyT2JqZWN0SW1tZWRpYXRlIiwibWF0ZXJpYWxQcm9wZXJ0aWVzIiwibGlnaHRzU3RhdGVWZXJzaW9uIiwicHJvZ3JhbUNhY2hlS2V5IiwicHJvZ3JhbUNoYW5nZSIsIm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyIsIm51bVN1cHBvcnRlZE1vcnBoTm9ybWFscyIsIm5lZWRzTGlnaHRzIiwiaXNNZXNoTGFtYmVydE1hdGVyaWFsIiwiaXNNZXNoVG9vbk1hdGVyaWFsIiwiaXNNZXNoUGhvbmdNYXRlcmlhbCIsImlzU2hhZG93TWF0ZXJpYWwiLCJtYXRlcmlhbE5lZWRzTGlnaHRzIiwicHJvZ1VuaWZvcm1zIiwidW5pZm9ybXNMaXN0IiwidXNlQ2FjaGUiLCJyZWZyZXNoUHJvZ3JhbSIsInJlZnJlc2hNYXRlcmlhbCIsInJlZnJlc2hMaWdodHMiLCJwX3VuaWZvcm1zIiwibV91bmlmb3JtcyIsInVDYW1Qb3MiLCJjYW1lcmFQb3NpdGlvbiIsImlzT3J0aG9ncmFwaGljQ2FtZXJhIiwiYm9uZVRleHR1cmUiLCJib25lTWF0cmljZXMiLCJib25lVGV4dHVyZVNpemUiLCJpc0ZvZyIsImRlbnNpdHkiLCJyZWZyZXNoVW5pZm9ybXNGb2ciLCJyZWZyZXNoVW5pZm9ybXNDb21tb24iLCJyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0IiwicmVmcmVzaFVuaWZvcm1zVG9vbiIsInJlZnJlc2hVbmlmb3Jtc1Bob25nIiwiaXNNZXNoUGh5c2ljYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkIiwicmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwiLCJpc01lc2hNYXRjYXBNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc01hdGNhcCIsInJlZnJlc2hVbmlmb3Jtc0RlcHRoIiwicmVmcmVzaFVuaWZvcm1zRGlzdGFuY2UiLCJpc01lc2hOb3JtYWxNYXRlcmlhbCIsInJlZnJlc2hVbmlmb3Jtc05vcm1hbCIsImlzTGluZUJhc2ljTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNMaW5lIiwiaXNMaW5lRGFzaGVkTWF0ZXJpYWwiLCJyZWZyZXNoVW5pZm9ybXNEYXNoIiwiaXNQb2ludHNNYXRlcmlhbCIsInV2U2NhbGVNYXAiLCJyZWZyZXNoVW5pZm9ybXNQb2ludHMiLCJpc1Nwcml0ZU1hdGVyaWFsIiwicmVmcmVzaFVuaWZvcm1zU3ByaXRlcyIsImx0Y18xIiwiTFRDXzEiLCJsdGNfMiIsIkxUQ18yIiwidXYyU2NhbGVNYXAiLCJvcGFxdWVPYmplY3RzIiwidHJhbnNwYXJlbnRPYmplY3RzIiwicmVhZFJlbmRlclRhcmdldFBpeGVscyIsImFjdGl2ZUN1YmVGYWNlSW5kZXgiLCJyZXN0b3JlIiwidGV4dHVyZUZvcm1hdCIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJyZWFkUGl4ZWxzIiwiY29weUZyYW1lYnVmZmVyVG9UZXh0dXJlIiwibGV2ZWwiLCJsZXZlbFNjYWxlIiwiY29weVRleEltYWdlMkQiLCJjb3B5VGV4dHVyZVRvVGV4dHVyZSIsInNyY1RleHR1cmUiLCJkc3RUZXh0dXJlIiwidGV4U3ViSW1hZ2UyRCIsIkZvZ0V4cDIiLCJGb2ciLCJJbnRlcmxlYXZlZEJ1ZmZlciIsImlzSW50ZXJsZWF2ZWRCdWZmZXIiLCJfZ2VvbWV0cnkiLCJfdmVjdG9yJDYiLCJJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSIsImludGVybGVhdmVkQnVmZmVyIiwiX2ludGVyc2VjdFBvaW50IiwiX3dvcmxkU2NhbGUiLCJfbXZQb3NpdGlvbiIsIl9hbGlnbmVkUG9zaXRpb24iLCJfcm90YXRlZFBvc2l0aW9uIiwiX3ZpZXdXb3JsZE1hdHJpeCIsIl92QSQxIiwiX3ZCJDEiLCJfdkMkMSIsIl91dkEkMSIsIl91dkIkMSIsIl91dkMkMSIsIlNwcml0ZSIsInRyYW5zZm9ybVZlcnRleCIsInZlcnRleFBvc2l0aW9uIiwibXZQb3NpdGlvbiIsIl92MSQ0IiwiX3YyJDIiLCJMT0QiLCJfY3VycmVudExldmVsIiwibGV2ZWxzIiwiU2tpbm5lZE1lc2giLCJiaW5kTW9kZSIsImJpbmRNYXRyaXgiLCJiaW5kTWF0cml4SW52ZXJzZSIsImFkZExldmVsIiwiZ2V0Q3VycmVudExldmVsIiwiZ2V0T2JqZWN0Rm9yRGlzdGFuY2UiLCJjYWxjdWxhdGVJbnZlcnNlcyIsIm5vcm1hbGl6ZVNraW5XZWlnaHRzIiwic2tpbldlaWdodCIsIl9vZmZzZXRNYXRyaXgiLCJfaWRlbnRpdHlNYXRyaXgiLCJTa2VsZXRvbiIsImJvbmVJbnZlcnNlcyIsIkJvbmUiLCJib25lIiwiaXNCb25lIiwiZ2V0Qm9uZUJ5TmFtZSIsIl9pbnN0YW5jZUxvY2FsTWF0cml4IiwiX2luc3RhbmNlV29ybGRNYXRyaXgiLCJfaW5zdGFuY2VJbnRlcnNlY3RzIiwiX21lc2giLCJJbnN0YW5jZWRNZXNoIiwibGluZWNhcCIsImxpbmVqb2luIiwiZ2V0TWF0cml4QXQiLCJyYXljYXN0VGltZXMiLCJpbnN0YW5jZUlkIiwic2V0TWF0cml4QXQiLCJfc3RhcnQiLCJfZW5kIiwiX2ludmVyc2VNYXRyaXgkMSIsIl9yYXkkMSIsIl9zcGhlcmUkMiIsIkxpbmUiLCJjb21wdXRlTGluZURpc3RhbmNlcyIsInBvc2l0aW9uQXR0cmlidXRlIiwidGhyZXNob2xkIiwicGFyYW1zIiwibG9jYWxUaHJlc2hvbGQiLCJsb2NhbFRocmVzaG9sZFNxIiwidlN0YXJ0IiwidkVuZCIsImludGVyU2VnbWVudCIsImludGVyUmF5IiwibmJWZXJ0aWNlcyIsIl9zdGFydCQxIiwiX2VuZCQxIiwiTGluZVNlZ21lbnRzIiwiTGluZUxvb3AiLCJfaW52ZXJzZU1hdHJpeCQyIiwiX3JheSQyIiwiX3NwaGVyZSQzIiwiX3Bvc2l0aW9uJDEiLCJQb2ludHMiLCJ0ZXN0UG9pbnQiLCJyYXlQb2ludERpc3RhbmNlU3EiLCJpbnRlcnNlY3RQb2ludCIsImRpc3RhbmNlVG9SYXkiLCJWaWRlb1RleHR1cmUiLCJ2aWRlbyIsIkNvbXByZXNzZWRUZXh0dXJlIiwiQ2FudmFzVGV4dHVyZSIsIkRlcHRoVGV4dHVyZSIsIldpcmVmcmFtZUdlb21ldHJ5Iiwib2wiLCJlZGdlMSIsImVkZ2UyIiwiZWRnZSIsImVkZ2VzIiwiUGFyYW1ldHJpY0dlb21ldHJ5IiwiZnVuYyIsInNsaWNlcyIsInN0YWNrcyIsIlBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSIsIkVQUyIsInB1IiwicHYiLCJzbGljZUNvdW50IiwiUG9seWhlZHJvbkdlb21ldHJ5IiwiUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5IiwidmVydGV4QnVmZmVyIiwidXZCdWZmZXIiLCJzdWJkaXZpZGVGYWNlIiwiY29scyIsImFqIiwiYmoiLCJyb3dzIiwicHVzaFZlcnRleCIsImdldFZlcnRleEJ5SW5kZXgiLCJjb3JyZWN0VVYiLCJhemltdXRoIiwic3ViZGl2aWRlIiwiYXBwbHlSYWRpdXMiLCJjZW50cm9pZCIsInV2QSIsInV2QiIsInV2QyIsImF6aSIsImNvcnJlY3RVVnMiLCJjb3JyZWN0U2VhbSIsImdlbmVyYXRlVVZzIiwiVGV0cmFoZWRyb25HZW9tZXRyeSIsIlRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJPY3RhaGVkcm9uR2VvbWV0cnkiLCJPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJJY29zYWhlZHJvbkdlb21ldHJ5IiwiSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSIsIkRvZGVjYWhlZHJvbkdlb21ldHJ5IiwiRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkiLCJUdWJlR2VvbWV0cnkiLCJ0dWJ1bGFyU2VnbWVudHMiLCJyYWRpYWxTZWdtZW50cyIsImNsb3NlZCIsInRhcGVyIiwiYnVmZmVyR2VvbWV0cnkiLCJUdWJlQnVmZmVyR2VvbWV0cnkiLCJ0YW5nZW50cyIsImJpbm9ybWFscyIsImZyYW1lcyIsImNvbXB1dGVGcmVuZXRGcmFtZXMiLCJQIiwiZ2VuZXJhdGVTZWdtZW50IiwiZ2V0UG9pbnRBdCIsIk4iLCJCIiwiZ2VuZXJhdGVJbmRpY2VzIiwiZ2VuZXJhdGVCdWZmZXJEYXRhIiwiVG9ydXNLbm90R2VvbWV0cnkiLCJ0dWJlIiwiaGVpZ2h0U2NhbGUiLCJUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSIsIlAxIiwiUDIiLCJUIiwiY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlIiwiY3UiLCJzdSIsInF1T3ZlclAiLCJjcyIsIlRvcnVzR2VvbWV0cnkiLCJhcmMiLCJUb3J1c0J1ZmZlckdlb21ldHJ5IiwicmVhZHlTdGF0ZSIsIkhBVkVfQ1VSUkVOVF9EQVRBIiwiaXNDYW52YXNUZXh0dXJlIiwiRWFyY3V0IiwiaG9sZUluZGljZXMiLCJkaW0iLCJpbnZTaXplIiwiaGFzSG9sZXMiLCJvdXRlckxlbiIsIm91dGVyTm9kZSIsImxpbmtlZExpc3QiLCJwcmV2IiwicXVldWUiLCJzdGVpbmVyIiwiZ2V0TGVmdG1vc3QiLCJjb21wYXJlWCIsImVsaW1pbmF0ZUhvbGUiLCJmaWx0ZXJQb2ludHMiLCJlbGltaW5hdGVIb2xlcyIsImVhcmN1dExpbmtlZCIsImNsb2Nrd2lzZSIsImxhc3QiLCJzdW0iLCJzaWduZWRBcmVhIiwiaW5zZXJ0Tm9kZSIsInJlbW92ZU5vZGUiLCJhZ2FpbiIsImFyZWEiLCJlYXIiLCJwYXNzIiwiek9yZGVyIiwicHJldloiLCJuZXh0WiIsInRhaWwiLCJudW1NZXJnZXMiLCJwU2l6ZSIsInFTaXplIiwiaW5TaXplIiwic29ydExpbmtlZCIsImluZGV4Q3VydmUiLCJpc0Vhckhhc2hlZCIsImlzRWFyIiwiY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyIsInNwbGl0RWFyY3V0IiwicG9pbnRJblRyaWFuZ2xlIiwibWluVFgiLCJtaW5UWSIsIm1heFRYIiwibWF4VFkiLCJsb2NhbGx5SW5zaWRlIiwiaXNWYWxpZERpYWdvbmFsIiwic3BsaXRQb2x5Z29uIiwiaG9sZSIsImh4IiwiaHkiLCJteCIsIm15IiwidGFuTWluIiwiZmluZEhvbGVCcmlkZ2UiLCJsZWZ0bW9zdCIsInB4IiwicHkiLCJpbnRlcnNlY3RzUG9seWdvbiIsImluc2lkZSIsIm1pZGRsZUluc2lkZSIsInExIiwicTIiLCJOb2RlIiwiYW4iLCJicCIsIlNoYXBlVXRpbHMiLCJjb250b3VyIiwiaXNDbG9ja1dpc2UiLCJwdHMiLCJ0cmlhbmd1bGF0ZVNoYXBlIiwiaG9sZXMiLCJyZW1vdmVEdXBFbmRQdHMiLCJhZGRDb250b3VyIiwiaG9sZUluZGV4IiwiRXh0cnVkZUdlb21ldHJ5IiwiRXh0cnVkZUJ1ZmZlckdlb21ldHJ5IiwidmVydGljZXNBcnJheSIsImFkZFNoYXBlIiwicGxhY2Vob2xkZXIiLCJjdXJ2ZVNlZ21lbnRzIiwic3RlcHMiLCJiZXZlbEVuYWJsZWQiLCJiZXZlbFRoaWNrbmVzcyIsImJldmVsU2l6ZSIsImJldmVsT2Zmc2V0IiwiYmV2ZWxTZWdtZW50cyIsImV4dHJ1ZGVQYXRoIiwidXZnZW4iLCJVVkdlbmVyYXRvciIsIldvcmxkVVZHZW5lcmF0b3IiLCJhbW91bnQiLCJleHRydWRlUHRzIiwic3BsaW5lVHViZSIsImJpbm9ybWFsIiwicG9zaXRpb24yIiwiYWhvbGUiLCJobCIsImV4dHJ1ZGVCeVBhdGgiLCJnZXRTcGFjZWRQb2ludHMiLCJzaGFwZVBvaW50cyIsImV4dHJhY3RQb2ludHMiLCJyZXZlcnNlIiwiY29uY2F0Iiwic2NhbGVQdDIiLCJwdCIsInZlYyIsImJzIiwidmVydCIsInZsZW4iLCJmbGVuIiwiZ2V0QmV2ZWxWZWMiLCJpblB0IiwiaW5QcmV2IiwiaW5OZXh0Iiwidl90cmFuc194Iiwidl90cmFuc195Iiwic2hyaW5rX2J5Iiwidl9wcmV2X3giLCJ2X3ByZXZfeSIsInZfbmV4dF94Iiwidl9uZXh0X3kiLCJ2X3ByZXZfbGVuc3EiLCJjb2xsaW5lYXIwIiwidl9wcmV2X2xlbiIsInZfbmV4dF9sZW4iLCJwdFByZXZTaGlmdF94IiwicHRQcmV2U2hpZnRfeSIsInNmIiwidl90cmFuc19sZW5zcSIsImRpcmVjdGlvbl9lcSIsImNvbnRvdXJNb3ZlbWVudHMiLCJvbmVIb2xlTW92ZW1lbnRzIiwiaG9sZXNNb3ZlbWVudHMiLCJ2ZXJ0aWNlc01vdmVtZW50cyIsInNpZGV3YWxscyIsImxheWVyb2Zmc2V0Iiwic2wiLCJzbGVuMSIsInNsZW4yIiwiZjQiLCJmMyIsImFkZFZlcnRleCIsIm5leHRJbmRleCIsImdlbmVyYXRlVG9wVVYiLCJhZGRVViIsImdlbmVyYXRlU2lkZVdhbGxVViIsInZlY3RvcjIiLCJsYXllciIsImJ1aWxkTGlkRmFjZXMiLCJidWlsZFNpZGVGYWNlcyIsImluZGV4QSIsImluZGV4QiIsImluZGV4QyIsImFfeCIsImFfeSIsImJfeCIsImJfeSIsImNfeCIsImNfeSIsImluZGV4RCIsImFfeiIsImJfeiIsImNfeiIsImRfeCIsImRfeSIsImRfeiIsIlRleHRHZW9tZXRyeSIsInRleHQiLCJUZXh0QnVmZmVyR2VvbWV0cnkiLCJmb250IiwiaXNGb250IiwiZ2VuZXJhdGVTaGFwZXMiLCJTcGhlcmVHZW9tZXRyeSIsInBoaVN0YXJ0IiwicGhpTGVuZ3RoIiwidGhldGFTdGFydCIsInRoZXRhTGVuZ3RoIiwiU3BoZXJlQnVmZmVyR2VvbWV0cnkiLCJ0aGV0YUVuZCIsImdyaWQiLCJ2ZXJ0aWNlc1JvdyIsInVPZmZzZXQiLCJSaW5nR2VvbWV0cnkiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwidGhldGFTZWdtZW50cyIsInBoaVNlZ21lbnRzIiwiUmluZ0J1ZmZlckdlb21ldHJ5Iiwic2VnbWVudCIsInJhZGl1c1N0ZXAiLCJ0aGV0YVNlZ21lbnRMZXZlbCIsIkxhdGhlR2VvbWV0cnkiLCJzZWdtZW50cyIsIkxhdGhlQnVmZmVyR2VvbWV0cnkiLCJiYXNlIiwiaW52ZXJzZVNlZ21lbnRzIiwibjEiLCJuMiIsIlNoYXBlR2VvbWV0cnkiLCJTaGFwZUJ1ZmZlckdlb21ldHJ5Iiwic2hhcGVIb2xlIiwiaW5kZXhPZmZzZXQiLCJzaGFwZVZlcnRpY2VzIiwic2hhcGVIb2xlcyIsInRvSlNPTiQxIiwiRWRnZXNHZW9tZXRyeSIsInRocmVzaG9sZEFuZ2xlIiwidGhyZXNob2xkRG90Iiwic291cmNlVmVydGljZXMiLCJmYWNlMSIsImZhY2UyIiwiQ3lsaW5kZXJHZW9tZXRyeSIsInJhZGl1c1RvcCIsInJhZGl1c0JvdHRvbSIsIm9wZW5FbmRlZCIsIkN5bGluZGVyQnVmZmVyR2VvbWV0cnkiLCJpbmRleEFycmF5IiwiZ2VuZXJhdGVDYXAiLCJjZW50ZXJJbmRleFN0YXJ0IiwiY2VudGVySW5kZXhFbmQiLCJjb3NUaGV0YSIsInNpblRoZXRhIiwic2xvcGUiLCJpbmRleFJvdyIsImdlbmVyYXRlVG9yc28iLCJDb25lR2VvbWV0cnkiLCJDb25lQnVmZmVyR2VvbWV0cnkiLCJDaXJjbGVHZW9tZXRyeSIsIkNpcmNsZUJ1ZmZlckdlb21ldHJ5IiwiR2VvbWV0cmllcyIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsIlJhd1NoYWRlck1hdGVyaWFsIiwiTWF0ZXJpYWxzIiwiQW5pbWF0aW9uVXRpbHMiLCJhcnJheVNsaWNlIiwiZnJvbSIsInRvIiwiaXNUeXBlZEFycmF5IiwiY29udmVydEFycmF5IiwiZm9yY2VDbG9uZSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiRGF0YVZpZXciLCJnZXRLZXlmcmFtZU9yZGVyIiwidGltZXMiLCJzb3J0ZWRBcnJheSIsIm5WYWx1ZXMiLCJzcmNPZmZzZXQiLCJmbGF0dGVuSlNPTiIsImpzb25LZXlzIiwidmFsdWVQcm9wZXJ0eU5hbWUiLCJzdWJjbGlwIiwic291cmNlQ2xpcCIsInN0YXJ0RnJhbWUiLCJlbmRGcmFtZSIsImZwcyIsImNsaXAiLCJ0cmFja3MiLCJ0cmFjayIsInZhbHVlU2l6ZSIsImdldFZhbHVlU2l6ZSIsIm1pblN0YXJ0VGltZSIsInNoaWZ0IiwicmVzZXREdXJhdGlvbiIsIkludGVycG9sYW50IiwicGFyYW1ldGVyUG9zaXRpb25zIiwic2FtcGxlVmFsdWVzIiwic2FtcGxlU2l6ZSIsInJlc3VsdEJ1ZmZlciIsIl9jYWNoZWRJbmRleCIsIkN1YmljSW50ZXJwb2xhbnQiLCJfd2VpZ2h0UHJldiIsIl9vZmZzZXRQcmV2IiwiX3dlaWdodE5leHQiLCJfb2Zmc2V0TmV4dCIsIkxpbmVhckludGVycG9sYW50IiwiRGlzY3JldGVJbnRlcnBvbGFudCIsIktleWZyYW1lVHJhY2siLCJpbnRlcnBvbGF0aW9uIiwiVGltZUJ1ZmZlclR5cGUiLCJWYWx1ZUJ1ZmZlclR5cGUiLCJzZXRJbnRlcnBvbGF0aW9uIiwiRGVmYXVsdEludGVycG9sYXRpb24iLCJCb29sZWFuS2V5ZnJhbWVUcmFjayIsIkNvbG9yS2V5ZnJhbWVUcmFjayIsIk51bWJlcktleWZyYW1lVHJhY2siLCJRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQiLCJRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayIsIlN0cmluZ0tleWZyYW1lVHJhY2siLCJWZWN0b3JLZXlmcmFtZVRyYWNrIiwiQW5pbWF0aW9uQ2xpcCIsImR1cmF0aW9uIiwicGFyc2VLZXlmcmFtZVRyYWNrIiwianNvbiIsInRyYWNrVHlwZSIsInR5cGVOYW1lIiwidG9Mb3dlckNhc2UiLCJnZXRUcmFja1R5cGVGb3JWYWx1ZVR5cGVOYW1lIiwiZXZhbHVhdGUiLCJwcCIsInZhbGlkYXRlX2ludGVydmFsIiwic2VlayIsImxpbmVhcl9zY2FuIiwiZm9yd2FyZF9zY2FuIiwiZ2l2ZVVwQXQiLCJhZnRlckVuZF8iLCJ0MWdsb2JhbCIsImJlZm9yZVN0YXJ0XyIsIm1pZCIsImludGVydmFsQ2hhbmdlZF8iLCJpbnRlcnBvbGF0ZV8iLCJzZXR0aW5ncyIsIkRlZmF1bHRTZXR0aW5nc18iLCJnZXRTZXR0aW5nc18iLCJjb3B5U2FtcGxlVmFsdWVfIiwiZW5kaW5nU3RhcnQiLCJlbmRpbmdFbmQiLCJpUHJldiIsImlOZXh0IiwidFByZXYiLCJ0TmV4dCIsImhhbGZEdCIsIm8xIiwibzAiLCJvUCIsIm9OIiwid1AiLCJ3TiIsInBwcCIsInNQIiwic04iLCJvZmZzZXQxIiwib2Zmc2V0MCIsIndlaWdodDEiLCJ3ZWlnaHQwIiwiZ2V0SW50ZXJwb2xhdGlvbiIsIlZhbHVlVHlwZU5hbWUiLCJJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZSIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhciIsIkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aCIsImZhY3RvcnlNZXRob2QiLCJjcmVhdGVJbnRlcnBvbGFudCIsInRpbWVPZmZzZXQiLCJ0aW1lU2NhbGUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwibktleXMiLCJ2YWxpZGF0ZSIsInZhbGlkIiwicHJldlRpbWUiLCJjdXJyVGltZSIsIm9wdGltaXplIiwic21vb3RoSW50ZXJwb2xhdGlvbiIsIndyaXRlSW5kZXgiLCJrZWVwIiwib2Zmc2V0UCIsIm9mZnNldE4iLCJyZWFkT2Zmc2V0Iiwid3JpdGVPZmZzZXQiLCJUeXBlZEtleWZyYW1lVHJhY2siLCJqc29uVHJhY2tzIiwiZnJhbWVUaW1lIiwiY2xpcFRyYWNrcyIsIkNyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlIiwibW9ycGhUYXJnZXRTZXF1ZW5jZSIsIm5vTG9vcCIsIm51bU1vcnBoVGFyZ2V0cyIsImZpbmRCeU5hbWUiLCJvYmplY3RPckNsaXBBcnJheSIsImNsaXBBcnJheSIsImFuaW1hdGlvbnMiLCJDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlcyIsImFuaW1hdGlvblRvTW9ycGhUYXJnZXRzIiwicGF0dGVybiIsInBhcnRzIiwiYW5pbWF0aW9uTW9ycGhUYXJnZXRzIiwiY2xpcHMiLCJwYXJzZUFuaW1hdGlvbiIsImFkZE5vbmVtcHR5VHJhY2siLCJ0cmFja05hbWUiLCJhbmltYXRpb25LZXlzIiwicHJvcGVydHlOYW1lIiwiZGVzdFRyYWNrcyIsImNsaXBOYW1lIiwiaGllcmFyY2h5VHJhY2tzIiwiaGllcmFyY2h5IiwibW9ycGhUYXJnZXROYW1lcyIsIm1vcnBoVGFyZ2V0TmFtZSIsImFuaW1hdGlvbktleSIsImJvbmVOYW1lIiwiQ2FjaGUiLCJmaWxlcyIsImZpbGUiLCJMb2FkaW5nTWFuYWdlciIsIm9uTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvbkVycm9yIiwiaXNMb2FkaW5nIiwiaXRlbXNMb2FkZWQiLCJpdGVtc1RvdGFsIiwidXJsTW9kaWZpZXIiLCJoYW5kbGVycyIsIm9uU3RhcnQiLCJpdGVtU3RhcnQiLCJpdGVtRW5kIiwiaXRlbUVycm9yIiwicmVzb2x2ZVVSTCIsInNldFVSTE1vZGlmaWVyIiwiYWRkSGFuZGxlciIsInJlZ2V4IiwibG9hZGVyIiwicmVtb3ZlSGFuZGxlciIsImdldEhhbmRsZXIiLCJEZWZhdWx0TG9hZGluZ01hbmFnZXIiLCJMb2FkZXIiLCJtYW5hZ2VyIiwiY3Jvc3NPcmlnaW4iLCJyZXNvdXJjZVBhdGgiLCJsb2FkIiwic2V0Q3Jvc3NPcmlnaW4iLCJzZXRQYXRoIiwic2V0UmVzb3VyY2VQYXRoIiwibG9hZGluZyIsIkZpbGVMb2FkZXIiLCJBbmltYXRpb25Mb2FkZXIiLCJDb21wcmVzc2VkVGV4dHVyZUxvYWRlciIsIkRhdGFUZXh0dXJlTG9hZGVyIiwiSW1hZ2VMb2FkZXIiLCJDdWJlVGV4dHVyZUxvYWRlciIsIlRleHR1cmVMb2FkZXIiLCJDdXJ2ZSIsImFyY0xlbmd0aERpdmlzaW9ucyIsIkVsbGlwc2VDdXJ2ZSIsImFYIiwiYVkiLCJ4UmFkaXVzIiwieVJhZGl1cyIsImFTdGFydEFuZ2xlIiwiYUVuZEFuZ2xlIiwiYUNsb2Nrd2lzZSIsImFSb3RhdGlvbiIsIkFyY0N1cnZlIiwiYVJhZGl1cyIsIkN1YmljUG9seSIsImMwIiwiaW5pdENhdG11bGxSb20iLCJ4MyIsInRlbnNpb24iLCJpbml0Tm9udW5pZm9ybUNhdG11bGxSb20iLCJkdDAiLCJkdDEiLCJkdDIiLCJ0MiIsImNhbGMiLCJjYWNoZWQiLCJzZXRUaW1lb3V0IiwiZGF0YVVyaVJlZ2V4UmVzdWx0IiwibWltZVR5cGUiLCJpc0Jhc2U2NCIsImRlY29kZVVSSUNvbXBvbmVudCIsImF0b2IiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsImNoYXJDb2RlQXQiLCJCbG9iIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0IiwiaGVhZGVyIiwib3BlbiIsImNhbGxiYWNrcyIsIndpdGhDcmVkZW50aWFscyIsIm92ZXJyaWRlTWltZVR5cGUiLCJyZXF1ZXN0SGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJzZXRSZXNwb25zZVR5cGUiLCJzZXRXaXRoQ3JlZGVudGlhbHMiLCJzZXRNaW1lVHlwZSIsImxvYWRUZXh0dXJlIiwidGV4RGF0YXMiLCJsb2FkZWQiLCJtaXBtYXBDb3VudCIsImlzQ3ViZW1hcCIsInRleERhdGEiLCJvbkltYWdlTG9hZCIsIm9uSW1hZ2VFcnJvciIsInN1YnN0ciIsInVybHMiLCJpc0pQRUciLCJzZWFyY2giLCJnZXRQb2ludCIsIm9wdGlvbmFsVGFyZ2V0IiwiZ2V0VXRvVG1hcHBpbmciLCJnZXRQb2ludHMiLCJkaXZpc2lvbnMiLCJnZXRMZW5ndGgiLCJsZW5ndGhzIiwiZ2V0TGVuZ3RocyIsImNhY2hlQXJjTGVuZ3RocyIsImN1cnJlbnQiLCJ1cGRhdGVBcmNMZW5ndGhzIiwidGFyZ2V0QXJjTGVuZ3RoIiwiYXJjTGVuZ3RocyIsImNvbXBhcmlzb24iLCJsZW5ndGhCZWZvcmUiLCJnZXRUYW5nZW50IiwicHQxIiwiZ2V0VGFuZ2VudEF0IiwibWF0IiwiTUFYX1ZBTFVFIiwidHoiLCJmcm9tSlNPTiIsImlzRWxsaXBzZUN1cnZlIiwidHdvUGkiLCJkZWx0YUFuZ2xlIiwic2FtZVBvaW50cyIsImlzQXJjQ3VydmUiLCJweiIsIkNhdG11bGxSb21DdXJ2ZTMiLCJjdXJ2ZVR5cGUiLCJDYXRtdWxsUm9tIiwiUXVhZHJhdGljQmV6aWVyIiwiUXVhZHJhdGljQmV6aWVyUDAiLCJRdWFkcmF0aWNCZXppZXJQMSIsIlF1YWRyYXRpY0JlemllclAyIiwiQ3ViaWNCZXppZXIiLCJDdWJpY0JlemllclAwIiwiQ3ViaWNCZXppZXJQMSIsIkN1YmljQmV6aWVyUDIiLCJDdWJpY0JlemllclAzIiwiQ3ViaWNCZXppZXJDdXJ2ZSIsInYzIiwiQ3ViaWNCZXppZXJDdXJ2ZTMiLCJMaW5lQ3VydmUiLCJMaW5lQ3VydmUzIiwiUXVhZHJhdGljQmV6aWVyQ3VydmUiLCJRdWFkcmF0aWNCZXppZXJDdXJ2ZTMiLCJTcGxpbmVDdXJ2ZSIsImlzQ2F0bXVsbFJvbUN1cnZlMyIsImludFBvaW50Iiwid2VpZ2h0IiwiaXNDdWJpY0JlemllckN1cnZlIiwiaXNDdWJpY0JlemllckN1cnZlMyIsImlzTGluZUN1cnZlIiwiaXNMaW5lQ3VydmUzIiwiaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZSIsImlzUXVhZHJhdGljQmV6aWVyQ3VydmUzIiwiaXNTcGxpbmVDdXJ2ZSIsIkN1cnZlcyIsIkN1cnZlUGF0aCIsImN1cnZlcyIsImF1dG9DbG9zZSIsIlBhdGgiLCJjdXJyZW50UG9pbnQiLCJTaGFwZSIsIkxpZ2h0IiwiSGVtaXNwaGVyZUxpZ2h0IiwiTGlnaHRTaGFkb3ciLCJfZnJhbWVFeHRlbnRzIiwiX3ZpZXdwb3J0Q291bnQiLCJfdmlld3BvcnRzIiwiU3BvdExpZ2h0U2hhZG93IiwiU3BvdExpZ2h0IiwicG93ZXIiLCJQb2ludExpZ2h0U2hhZG93IiwiX2N1YmVEaXJlY3Rpb25zIiwiX2N1YmVVcHMiLCJQb2ludExpZ2h0IiwiT3J0aG9ncmFwaGljQ2FtZXJhIiwiRGlyZWN0aW9uYWxMaWdodFNoYWRvdyIsIkRpcmVjdGlvbmFsTGlnaHQiLCJBbWJpZW50TGlnaHQiLCJSZWN0QXJlYUxpZ2h0IiwiTWF0ZXJpYWxMb2FkZXIiLCJjdXJ2ZSIsImNsb3NlUGF0aCIsInN0YXJ0UG9pbnQiLCJlbmRQb2ludCIsImN1cnZlTGVuZ3RocyIsImdldEN1cnZlTGVuZ3RocyIsInNlZ21lbnRMZW5ndGgiLCJsZW5zIiwiY2FjaGVMZW5ndGhzIiwic3VtcyIsIm1vdmVUbyIsImxpbmVUbyIsInF1YWRyYXRpY0N1cnZlVG8iLCJhQ1B4IiwiYUNQeSIsImJlemllckN1cnZlVG8iLCJhQ1AxeCIsImFDUDF5IiwiYUNQMngiLCJhQ1AyeSIsInNwbGluZVRocnUiLCJhYnNhcmMiLCJhYnNlbGxpcHNlIiwiZWxsaXBzZSIsImZpcnN0UG9pbnQiLCJsYXN0UG9pbnQiLCJnZXRQb2ludHNIb2xlcyIsImhvbGVzUHRzIiwiX2xpZ2h0UG9zaXRpb25Xb3JsZCIsIl9sb29rVGFyZ2V0Iiwic2hhZG93TWF0cml4IiwicHJvalNjcmVlbk1hdHJpeCIsImxvb2tUYXJnZXQiLCJsaWdodFBvc2l0aW9uV29ybGQiLCJ2aWV3cG9ydEluZGV4IiwiaXNTcG90TGlnaHRTaGFkb3ciLCJzY2FsZVciLCJzY2FsZUgiLCJpc0RpcmVjdGlvbmFsTGlnaHRTaGFkb3ciLCJnZXRUZXh0dXJlIiwic2hhZGluZyIsInNldFRleHR1cmVzIiwiTG9hZGVyVXRpbHMiLCJkZWNvZGVUZXh0IiwiVGV4dERlY29kZXIiLCJkZWNvZGUiLCJmcm9tQ2hhckNvZGUiLCJlc2NhcGUiLCJleHRyYWN0VXJsQmFzZSIsImxhc3RJbmRleE9mIiwiSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkiLCJJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUiLCJCdWZmZXJHZW9tZXRyeUxvYWRlciIsInR5cGVkQXJyYXkiLCJUWVBFRF9BUlJBWVMiLCJidWZmZXJBdHRyaWJ1dGUiLCJkcmF3Y2FsbHMiLCJvZmZzZXRzIiwiT2JqZWN0TG9hZGVyIiwicGFyc2VTaGFwZSIsInBhcnNlR2VvbWV0cmllcyIsInBhcnNlSW1hZ2VzIiwicGFyc2VUZXh0dXJlcyIsInBhcnNlTWF0ZXJpYWxzIiwicGFyc2VPYmplY3QiLCJwYXJzZUFuaW1hdGlvbnMiLCJidWZmZXJHZW9tZXRyeUxvYWRlciIsImRldGFpbHMiLCJnZW9tZXRyeVNoYXBlcyIsImxvYWRJbWFnZSIsImN1cnJlbnRVcmwiLCJwYXJzZUNvbnN0YW50IiwiVEVYVFVSRV9NQVBQSU5HIiwiVEVYVFVSRV9XUkFQUElORyIsIlRFWFRVUkVfRklMVEVSIiwiZ2V0R2VvbWV0cnkiLCJnZXRNYXRlcmlhbCIsIkltYWdlQml0bWFwTG9hZGVyIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJmZXRjaCIsIlNoYXBlUGF0aCIsInN1YlBhdGhzIiwiY3VycmVudFBhdGgiLCJGb250IiwiY3JlYXRlUGF0aCIsImNoYXIiLCJnbHlwaCIsImdseXBocyIsImNweCIsImNweSIsImNweDEiLCJjcHkxIiwiY3B4MiIsImNweTIiLCJvdXRsaW5lIiwiX2NhY2hlZE91dGxpbmUiLCJoYSIsImZhbWlseU5hbWUiLCJGb250TG9hZGVyIiwic2V0T3B0aW9ucyIsInJlcyIsImJsb2IiLCJpbWFnZUJpdG1hcCIsImNhdGNoIiwidG9TaGFwZXMiLCJpc0NDVyIsIm5vSG9sZXMiLCJ0b1NoYXBlc05vSG9sZXMiLCJpblN1YnBhdGhzIiwidG1wUGF0aCIsInRtcFNoYXBlIiwiaXNQb2ludEluc2lkZVBvbHlnb24iLCJpblBvbHlnb24iLCJwb2x5TGVuIiwiZWRnZUxvd1B0IiwiZWRnZUhpZ2hQdCIsImVkZ2VEeCIsImVkZ2VEeSIsInBlcnBFZGdlIiwic29saWQiLCJob2xlc0ZpcnN0IiwidG1wUG9pbnRzIiwidG1wSG9sZXMiLCJiZXR0ZXJTaGFwZUhvbGVzIiwibmV3U2hhcGVzIiwibmV3U2hhcGVIb2xlcyIsIm1haW5JZHgiLCJhbWJpZ3VvdXMiLCJ0b0NoYW5nZSIsInNJZHgiLCJzTGVuIiwic2hvIiwiaElkeCIsImhvIiwiaG9sZV91bmFzc2lnbmVkIiwiczJJZHgiLCJmcm9tcyIsInRvcyIsInBhdGhzIiwiY2hhcnMiLCJsaW5lX2hlaWdodCIsInlNYXgiLCJ5TWluIiwidW5kZXJsaW5lVGhpY2tuZXNzIiwicmV0IiwiY3JlYXRlUGF0aHMiLCJzdWJzdHJpbmciLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJBdWRpb0xvYWRlciIsIlNwaGVyaWNhbEhhcm1vbmljczMiLCJMaWdodFByb2JlIiwiSGVtaXNwaGVyZUxpZ2h0UHJvYmUiLCJza3kiLCJncm91bmQiLCJBbWJpZW50TGlnaHRQcm9iZSIsImJ1ZmZlckNvcHkiLCJkZWNvZGVBdWRpb0RhdGEiLCJhdWRpb0J1ZmZlciIsImlzU3BoZXJpY2FsSGFybW9uaWNzMyIsInplcm8iLCJnZXRBdCIsImNvZWZmIiwiZ2V0SXJyYWRpYW5jZUF0IiwiYWRkU2NhbGVkU0giLCJnZXRCYXNpc0F0Iiwic2hCYXNpcyIsImlzSGVtaXNwaGVyZUxpZ2h0UHJvYmUiLCJpc0FtYmllbnRMaWdodFByb2JlIiwiX2V5ZVJpZ2h0IiwiX2V5ZUxlZnQiLCJTdGVyZW9DYW1lcmEiLCJleWVTZXAiLCJfY2FjaGUiLCJDbG9jayIsImF1dG9TdGFydCIsIm9sZFRpbWUiLCJlbGFwc2VkVGltZSIsInJ1bm5pbmciLCJ4bWluIiwieG1heCIsImV5ZVNlcEhhbGYiLCJleWVTZXBPblByb2plY3Rpb24iLCJ5bWF4IiwicGVyZm9ybWFuY2UiLCJEYXRlIiwibm93IiwiZ2V0RWxhcHNlZFRpbWUiLCJnZXREZWx0YSIsIm5ld1RpbWUiLCJfcG9zaXRpb24kMiIsIl9xdWF0ZXJuaW9uJDMiLCJfc2NhbGUkMSIsIl9vcmllbnRhdGlvbiIsIkF1ZGlvTGlzdGVuZXIiLCJnYWluIiwiY3JlYXRlR2FpbiIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInRpbWVEZWx0YSIsIl9jbG9jayIsIkF1ZGlvIiwiZ2V0SW5wdXQiLCJhdXRvcGxheSIsImRldHVuZSIsImxvb3AiLCJsb29wU3RhcnQiLCJsb29wRW5kIiwicGxheWJhY2tSYXRlIiwiaXNQbGF5aW5nIiwiaGFzUGxheWJhY2tDb250cm9sIiwic291cmNlVHlwZSIsIl9zdGFydGVkQXQiLCJfcGF1c2VkQXQiLCJmaWx0ZXJzIiwicmVtb3ZlRmlsdGVyIiwiZGlzY29ubmVjdCIsImdldEZpbHRlciIsInNldEZpbHRlciIsImdldE1hc3RlclZvbHVtZSIsInNldE1hc3RlclZvbHVtZSIsInNldFRhcmdldEF0VGltZSIsImN1cnJlbnRUaW1lIiwicG9zaXRpb25YIiwibGluZWFyUmFtcFRvVmFsdWVBdFRpbWUiLCJwb3NpdGlvblkiLCJwb3NpdGlvbloiLCJmb3J3YXJkWCIsImZvcndhcmRZIiwiZm9yd2FyZFoiLCJ1cFgiLCJ1cFkiLCJ1cFoiLCJzZXRPcmllbnRhdGlvbiIsImdldE91dHB1dCIsInNldE5vZGVTb3VyY2UiLCJhdWRpb05vZGUiLCJzZXRNZWRpYUVsZW1lbnRTb3VyY2UiLCJtZWRpYUVsZW1lbnQiLCJjcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UiLCJzZXRNZWRpYVN0cmVhbVNvdXJjZSIsIm1lZGlhU3RyZWFtIiwiY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UiLCJzZXRCdWZmZXIiLCJwbGF5IiwiZGVsYXkiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJvbmVuZGVkIiwib25FbmRlZCIsInNldERldHVuZSIsInNldFBsYXliYWNrUmF0ZSIsInBhdXNlIiwiZ2V0RmlsdGVycyIsInNldEZpbHRlcnMiLCJnZXREZXR1bmUiLCJnZXRQbGF5YmFja1JhdGUiLCJnZXRMb29wIiwic2V0TG9vcCIsInNldExvb3BTdGFydCIsInNldExvb3BFbmQiLCJnZXRWb2x1bWUiLCJzZXRWb2x1bWUiLCJfcG9zaXRpb24kMyIsIl9xdWF0ZXJuaW9uJDQiLCJfc2NhbGUkMiIsIl9vcmllbnRhdGlvbiQxIiwiUG9zaXRpb25hbEF1ZGlvIiwicGFubmVyIiwiY3JlYXRlUGFubmVyIiwicGFubmluZ01vZGVsIiwiQXVkaW9BbmFseXNlciIsImF1ZGlvIiwiZmZ0U2l6ZSIsImFuYWx5c2VyIiwiY3JlYXRlQW5hbHlzZXIiLCJmcmVxdWVuY3lCaW5Db3VudCIsIlByb3BlcnR5TWl4ZXIiLCJiaW5kaW5nIiwibWl4RnVuY3Rpb24iLCJfc2xlcnAiLCJfc2VsZWN0IiwiX2xlcnAiLCJfbWl4QnVmZmVyUmVnaW9uIiwiY3VtdWxhdGl2ZVdlaWdodCIsInVzZUNvdW50IiwicmVmZXJlbmNlQ291bnQiLCJnZXRSZWZEaXN0YW5jZSIsInJlZkRpc3RhbmNlIiwic2V0UmVmRGlzdGFuY2UiLCJnZXRSb2xsb2ZmRmFjdG9yIiwicm9sbG9mZkZhY3RvciIsInNldFJvbGxvZmZGYWN0b3IiLCJnZXREaXN0YW5jZU1vZGVsIiwiZGlzdGFuY2VNb2RlbCIsInNldERpc3RhbmNlTW9kZWwiLCJnZXRNYXhEaXN0YW5jZSIsIm1heERpc3RhbmNlIiwic2V0TWF4RGlzdGFuY2UiLCJzZXREaXJlY3Rpb25hbENvbmUiLCJjb25lSW5uZXJBbmdsZSIsImNvbmVPdXRlckFuZ2xlIiwiY29uZU91dGVyR2FpbiIsIm9yaWVudGF0aW9uWCIsIm9yaWVudGF0aW9uWSIsIm9yaWVudGF0aW9uWiIsImdldEZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEF2ZXJhZ2VGcmVxdWVuY3kiLCJhY2N1bXVsYXRlIiwiYWNjdUluZGV4IiwiY3VycmVudFdlaWdodCIsIm1peCIsIm9yaWdpbmFsVmFsdWVPZmZzZXQiLCJzYXZlT3JpZ2luYWxTdGF0ZSIsImdldFZhbHVlIiwicmVzdG9yZU9yaWdpbmFsU3RhdGUiLCJfcmVzZXJ2ZWRSZSIsIlJlZ0V4cCIsIl93b3JkQ2hhck9yRG90IiwiX2RpcmVjdG9yeVJlIiwiX25vZGVSZSIsIl9vYmplY3RSZSIsIl9wcm9wZXJ0eVJlIiwiX3RyYWNrUmUiLCJfc3VwcG9ydGVkT2JqZWN0TmFtZXMiLCJDb21wb3NpdGUiLCJ0YXJnZXRHcm91cCIsIm9wdGlvbmFsUGFyc2VkUGF0aCIsInBhcnNlZFBhdGgiLCJQcm9wZXJ0eUJpbmRpbmciLCJwYXJzZVRyYWNrTmFtZSIsIl90YXJnZXRHcm91cCIsIl9iaW5kaW5ncyIsInN1YnNjcmliZV8iLCJyb290Tm9kZSIsIm5vZGUiLCJmaW5kTm9kZSIsIm5vZGVOYW1lIiwiQW5pbWF0aW9uT2JqZWN0R3JvdXAiLCJuQ2FjaGVkT2JqZWN0c18iLCJfaW5kaWNlc0J5VVVJRCIsIl9wYXRocyIsIl9wYXJzZWRQYXRocyIsIl9iaW5kaW5nc0luZGljZXNCeVBhdGgiLCJzdGF0cyIsInRvdGFsIiwiQW5pbWF0aW9uQWN0aW9uIiwibWl4ZXIiLCJsb2NhbFJvb3QiLCJfbWl4ZXIiLCJfY2xpcCIsIl9sb2NhbFJvb3QiLCJuVHJhY2tzIiwiaW50ZXJwb2xhbnRzIiwiaW50ZXJwb2xhbnRTZXR0aW5ncyIsImludGVycG9sYW50IiwiX2ludGVycG9sYW50U2V0dGluZ3MiLCJfaW50ZXJwb2xhbnRzIiwiX3Byb3BlcnR5QmluZGluZ3MiLCJfY2FjaGVJbmRleCIsIl9ieUNsaXBDYWNoZUluZGV4IiwiX3RpbWVTY2FsZUludGVycG9sYW50IiwiX3dlaWdodEludGVycG9sYW50IiwiX2xvb3BDb3VudCIsIl9zdGFydFRpbWUiLCJfZWZmZWN0aXZlVGltZVNjYWxlIiwiX2VmZmVjdGl2ZVdlaWdodCIsInJlcGV0aXRpb25zIiwicGF1c2VkIiwiY2xhbXBXaGVuRmluaXNoZWQiLCJ6ZXJvU2xvcGVBdFN0YXJ0IiwiemVyb1Nsb3BlQXRFbmQiLCJBbmltYXRpb25NaXhlciIsInJvb3QiLCJfcm9vdCIsIl9pbml0TWVtb3J5TWFuYWdlciIsIl9hY2N1SW5kZXgiLCJVbmlmb3JtIiwiSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIiLCJSYXljYXN0ZXIiLCJQb2ludENsb3VkIiwiYXNjU29ydCIsImludGVyc2VjdE9iamVjdCIsIlNwaGVyaWNhbCIsIkN5bGluZHJpY2FsIiwiZmlyc3RWYWxpZEluZGV4IiwiYmluZGluZ3MiLCJ1bmJpbmQiLCJpc0FuaW1hdGlvbk9iamVjdEdyb3VwIiwic2FuaXRpemVOb2RlTmFtZSIsIm1hdGNoZXMiLCJyZXN1bHRzIiwib2JqZWN0TmFtZSIsIm9iamVjdEluZGV4IiwicHJvcGVydHlJbmRleCIsImxhc3REb3QiLCJzZWFyY2hOb2RlU3VidHJlZSIsImNoaWxkTm9kZSIsInN1YlRyZWVOb2RlIiwiX2dldFZhbHVlX3VuYXZhaWxhYmxlIiwiX3NldFZhbHVlX3VuYXZhaWxhYmxlIiwiQmluZGluZ1R5cGUiLCJEaXJlY3QiLCJFbnRpcmVBcnJheSIsIkFycmF5RWxlbWVudCIsIkhhc0Zyb21Ub0FycmF5IiwiVmVyc2lvbmluZyIsIk5vbmUiLCJOZWVkc1VwZGF0ZSIsIk1hdHJpeFdvcmxkTmVlZHNVcGRhdGUiLCJHZXR0ZXJCeUJpbmRpbmdUeXBlIiwicmVzb2x2ZWRQcm9wZXJ0eSIsIlNldHRlckJ5QmluZGluZ1R5cGVBbmRWZXJzaW9uaW5nIiwidGFyZ2V0T2JqZWN0IiwiZGVzdCIsInRhcmdldEFycmF5Iiwic291cmNlQXJyYXkiLCJub2RlUHJvcGVydHkiLCJ2ZXJzaW9uaW5nIiwiYmluZGluZ1R5cGUiLCJfZ2V0VmFsdWVfdW5ib3VuZCIsIl9zZXRWYWx1ZV91bmJvdW5kIiwibk9iamVjdHMiLCJuQ2FjaGVkT2JqZWN0cyIsImluZGljZXNCeVVVSUQiLCJwYXJzZWRQYXRocyIsIm5CaW5kaW5ncyIsImtub3duT2JqZWN0IiwiZmlyc3RBY3RpdmVJbmRleCIsImxhc3RDYWNoZWRPYmplY3QiLCJiaW5kaW5nc0ZvclBhdGgiLCJsYXN0Q2FjaGVkIiwibGFzdENhY2hlZEluZGV4IiwiZmlyc3RBY3RpdmVPYmplY3QiLCJmaXJzdEFjdGl2ZSIsInVuY2FjaGUiLCJsYXN0T2JqZWN0IiwiaW5kaWNlc0J5UGF0aCIsInVuc3Vic2NyaWJlXyIsImxhc3RCaW5kaW5nc0luZGV4IiwibGFzdEJpbmRpbmdzIiwiX2FjdGl2YXRlQWN0aW9uIiwiX2RlYWN0aXZhdGVBY3Rpb24iLCJzdG9wRmFkaW5nIiwic3RvcFdhcnBpbmciLCJpc1J1bm5pbmciLCJfaXNBY3RpdmVBY3Rpb24iLCJpc1NjaGVkdWxlZCIsInN0YXJ0QXQiLCJzZXRFZmZlY3RpdmVXZWlnaHQiLCJnZXRFZmZlY3RpdmVXZWlnaHQiLCJmYWRlSW4iLCJfc2NoZWR1bGVGYWRpbmciLCJmYWRlT3V0IiwiY3Jvc3NGYWRlRnJvbSIsImZhZGVPdXRBY3Rpb24iLCJ3YXJwIiwiZmFkZUluRHVyYXRpb24iLCJmYWRlT3V0RHVyYXRpb24iLCJzdGFydEVuZFJhdGlvIiwiZW5kU3RhcnRSYXRpbyIsImNyb3NzRmFkZVRvIiwiZmFkZUluQWN0aW9uIiwid2VpZ2h0SW50ZXJwb2xhbnQiLCJfdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQiLCJzZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJnZXRFZmZlY3RpdmVUaW1lU2NhbGUiLCJzZXREdXJhdGlvbiIsInN5bmNXaXRoIiwiYWN0aW9uIiwiaGFsdCIsInN0YXJ0VGltZVNjYWxlIiwiZW5kVGltZVNjYWxlIiwiX2xlbmRDb250cm9sSW50ZXJwb2xhbnQiLCJ0aW1lU2NhbGVJbnRlcnBvbGFudCIsImdldE1peGVyIiwiZ2V0Q2xpcCIsImdldFJvb3QiLCJfdXBkYXRlIiwiZGVsdGFUaW1lIiwidGltZURpcmVjdGlvbiIsInRpbWVSdW5uaW5nIiwiX3VwZGF0ZVRpbWVTY2FsZSIsImNsaXBUaW1lIiwiX3VwZGF0ZVRpbWUiLCJfdXBkYXRlV2VpZ2h0IiwicHJvcGVydHlNaXhlcnMiLCJpbnRlcnBvbGFudFZhbHVlIiwibG9vcENvdW50IiwicGluZ1BvbmciLCJfc2V0RW5kaW5ncyIsImhhbmRsZV9zdG9wIiwibG9vcERlbHRhIiwicGVuZGluZyIsImF0U3RhcnQiLCJhdEVuZCIsIndlaWdodE5vdyIsIndlaWdodFRoZW4iLCJfYmluZEFjdGlvbiIsInByb3RvdHlwZUFjdGlvbiIsInJvb3RVdWlkIiwiYmluZGluZ3NCeVJvb3QiLCJfYmluZGluZ3NCeVJvb3RBbmROYW1lIiwiYmluZGluZ3NCeU5hbWUiLCJfYWRkSW5hY3RpdmVCaW5kaW5nIiwiY2xpcFV1aWQiLCJhY3Rpb25zRm9yQ2xpcCIsIl9hY3Rpb25zQnlDbGlwIiwia25vd25BY3Rpb25zIiwiX2FkZEluYWN0aXZlQWN0aW9uIiwiX2xlbmRCaW5kaW5nIiwiX2xlbmRBY3Rpb24iLCJfdGFrZUJhY2tCaW5kaW5nIiwiX3Rha2VCYWNrQWN0aW9uIiwiX2FjdGlvbnMiLCJfbkFjdGl2ZUFjdGlvbnMiLCJfbkFjdGl2ZUJpbmRpbmdzIiwiX2NvbnRyb2xJbnRlcnBvbGFudHMiLCJfbkFjdGl2ZUNvbnRyb2xJbnRlcnBvbGFudHMiLCJhY3Rpb25zIiwiY29udHJvbEludGVycG9sYW50cyIsImFjdGlvbnNCeUNsaXAiLCJhY3Rpb25CeVJvb3QiLCJfcmVtb3ZlSW5hY3RpdmVBY3Rpb24iLCJsYXN0SW5hY3RpdmVBY3Rpb24iLCJjYWNoZUluZGV4Iiwia25vd25BY3Rpb25zRm9yQ2xpcCIsImxhc3RLbm93bkFjdGlvbiIsImJ5Q2xpcENhY2hlSW5kZXgiLCJfcmVtb3ZlSW5hY3RpdmVCaW5kaW5nc0ZvckFjdGlvbiIsIl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmciLCJwcmV2SW5kZXgiLCJsYXN0QWN0aXZlSW5kZXgiLCJmaXJzdEluYWN0aXZlQWN0aW9uIiwiZmlyc3RJbmFjdGl2ZUluZGV4IiwibGFzdEFjdGl2ZUFjdGlvbiIsImJpbmRpbmdCeU5hbWUiLCJwcm9wQmluZGluZyIsImxhc3RJbmFjdGl2ZUJpbmRpbmciLCJmaXJzdEluYWN0aXZlQmluZGluZyIsImxhc3RBY3RpdmVCaW5kaW5nIiwiX2NvbnRyb2xJbnRlcnBvbGFudHNSZXN1bHRCdWZmZXIiLCJfX2NhY2hlSW5kZXgiLCJsYXN0QWN0aXZlSW50ZXJwb2xhbnQiLCJjbGlwQWN0aW9uIiwib3B0aW9uYWxSb290IiwiY2xpcE9iamVjdCIsImV4aXN0aW5nQWN0aW9uIiwibmV3QWN0aW9uIiwic3RvcEFsbEFjdGlvbiIsIm5BY3Rpb25zIiwic2V0VGltZSIsInRpbWVJblNlY29uZHMiLCJ1bmNhY2hlQ2xpcCIsImFjdGlvbnNUb1JlbW92ZSIsInVuY2FjaGVSb290IiwidW5jYWNoZUFjdGlvbiIsInNldEZyb21DYW1lcmEiLCJjb29yZHMiLCJpbnRlcnNlY3RPYmplY3RzIiwib3RoZXIiLCJtYWtlU2FmZSIsInNldEZyb21DYXJ0ZXNpYW5Db29yZHMiLCJfdmVjdG9yJDciLCJCb3gyIiwiX3N0YXJ0UCIsIl9zdGFydEVuZCIsIkxpbmUzIiwiSW1tZWRpYXRlUmVuZGVyT2JqZWN0IiwiZGlzdGFuY2VTcSIsImNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXIiLCJjbGFtcFRvTGluZSIsInN0YXJ0RW5kMiIsIl92ZWN0b3IkOCIsIlNwb3RMaWdodEhlbHBlciIsImNvbmUiLCJjb25lTGVuZ3RoIiwiY29uZVdpZHRoIiwiX3ZlY3RvciQ5IiwiX2JvbmVNYXRyaXgiLCJfbWF0cml4V29ybGRJbnYiLCJTa2VsZXRvbkhlbHBlciIsImdldEJvbmVMaXN0IiwiYm9uZUxpc3QiLCJQb2ludExpZ2h0SGVscGVyIiwic3BoZXJlU2l6ZSIsImlzU2tlbGV0b25IZWxwZXIiLCJfdmVjdG9yJGEiLCJfY29sb3IxIiwiX2NvbG9yMiIsIkhlbWlzcGhlcmVMaWdodEhlbHBlciIsIkdyaWRIZWxwZXIiLCJQb2xhckdyaWRIZWxwZXIiLCJyYWRpYWxzIiwiY2lyY2xlcyIsIl92MSQ1IiwiX3YyJDMiLCJfdjMkMSIsIkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIiLCJsaWdodFBsYW5lIiwidGFyZ2V0TGluZSIsIl92ZWN0b3IkYiIsIl9jYW1lcmEiLCJDYW1lcmFIZWxwZXIiLCJwb2ludE1hcCIsImNvbG9yRnJ1c3R1bSIsImNvbG9yQ29uZSIsImNvbG9yVXAiLCJjb2xvclRhcmdldCIsImNvbG9yQ3Jvc3MiLCJhZGRMaW5lIiwiYWRkUG9pbnQiLCJzZXRQb2ludCIsIl9ib3gkMyIsIkJveEhlbHBlciIsIkJveDNIZWxwZXIiLCJQbGFuZUhlbHBlciIsIl9saW5lR2VvbWV0cnkiLCJfY29uZUdlb21ldHJ5IiwiX2F4aXMiLCJBcnJvd0hlbHBlciIsImhlYWRMZW5ndGgiLCJoZWFkV2lkdGgiLCJzZXREaXJlY3Rpb24iLCJBeGVzSGVscGVyIiwic2V0Q29sb3IiLCJ3ZWlnaHRzIiwicG9sZUF4aXMiLCJzaGFkZXJNYXRlcmlhbCIsIlNJWkVfTUFYIiwiRVhUUkFfTE9EX1NJR01BIiwiVE9UQUxfTE9EUyIsIkxPRF9NQVgiLCJFTkNPRElOR1MiLCJfZmxhdENhbWVyYSIsIl9ibHVyTWF0ZXJpYWwiLCJfZ2V0Q29tbW9uVmVydGV4U2hhZGVyIiwiX2dldEVuY29kaW5ncyIsIl9lcXVpcmVjdFNoYWRlciIsIl9jdWJlbWFwU2hhZGVyIiwiX2xvZFBsYW5lcyIsIl9zaXplTG9kcyIsIl9zaWdtYXMiLCJsb2QiLCJzaXplTG9kIiwic2lnbWEiLCJ0ZXhlbFNpemUiLCJwb3NpdGlvblNpemUiLCJ1dlNpemUiLCJmYWNlSW5kZXhTaXplIiwiY29vcmRpbmF0ZXMiLCJmaWxsIiwiX2NyZWF0ZVBsYW5lcyIsIl9waW5nUG9uZ1JlbmRlclRhcmdldCIsIl9vbGRUYXJnZXQiLCJQSEkiLCJJTlZfUEhJIiwiX2F4aXNEaXJlY3Rpb25zIiwiUE1SRU1HZW5lcmF0b3IiLCJfY29tcGlsZU1hdGVyaWFsIiwiX2FsbG9jYXRlVGFyZ2V0cyIsImVxdWlyZWN0YW5ndWxhciIsImN1YmVVVlJlbmRlclRhcmdldCIsIl9jcmVhdGVSZW5kZXJUYXJnZXQiLCJfY2xlYW51cCIsIm91dHB1dFRhcmdldCIsInRtcFNjZW5lIiwiX3NldFZpZXdwb3J0IiwiX2FwcGx5UE1SRU0iLCJfYmx1ciIsImxvZEluIiwibG9kT3V0IiwiX2hhbGZCbHVyIiwidGFyZ2V0SW4iLCJ0YXJnZXRPdXQiLCJzaWdtYVJhZGlhbnMiLCJibHVyU2NlbmUiLCJibHVyVW5pZm9ybXMiLCJwaXhlbHMiLCJyYWRpYW5zUGVyUGl4ZWwiLCJzaWdtYVBpeGVscyIsImV4cCIsIm91dHB1dFNpemUiLCJfZ2V0RXF1aXJlY3RTaGFkZXIiLCJfZ2V0Q3ViZW1hcFNoYWRlciIsIkZhY2U0IiwiZnJvbVNjZW5lIiwiY3ViZUNhbWVyYSIsInVwU2lnbiIsImZvcndhcmRTaWduIiwibWF4Q29tcG9uZW50IiwiZkV4cCIsImxvZzIiLCJjb2wiLCJfc2NlbmVUb0N1YmVVViIsImZyb21FcXVpcmVjdGFuZ3VsYXIiLCJmcm9tQ3ViZW1hcCIsImN1YmVtYXAiLCJfdGV4dHVyZVRvQ3ViZVVWIiwiY29tcGlsZUN1YmVtYXBTaGFkZXIiLCJjb21waWxlRXF1aXJlY3Rhbmd1bGFyU2hhZGVyIiwiTGluZVN0cmlwIiwiTGluZVBpZWNlcyIsIk5vQ29sb3JzIiwiRmFjZUNvbG9ycyIsIlZlcnRleENvbG9ycyIsIk1lc2hGYWNlTWF0ZXJpYWwiLCJNdWx0aU1hdGVyaWFsIiwiUGFydGljbGUiLCJQYXJ0aWNsZVN5c3RlbSIsIlBvaW50Q2xvdWRNYXRlcmlhbCIsIlBhcnRpY2xlQmFzaWNNYXRlcmlhbCIsIlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwiLCJWZXJ0ZXgiLCJEeW5hbWljQnVmZmVyQXR0cmlidXRlIiwiSW50OEF0dHJpYnV0ZSIsIlVpbnQ4QXR0cmlidXRlIiwiVWludDhDbGFtcGVkQXR0cmlidXRlIiwiSW50MTZBdHRyaWJ1dGUiLCJVaW50MTZBdHRyaWJ1dGUiLCJJbnQzMkF0dHJpYnV0ZSIsIlVpbnQzMkF0dHJpYnV0ZSIsIkZsb2F0MzJBdHRyaWJ1dGUiLCJGbG9hdDY0QXR0cmlidXRlIiwiQ2xvc2VkU3BsaW5lQ3VydmUzIiwiU3BsaW5lQ3VydmUzIiwiU3BsaW5lIiwiQXhpc0hlbHBlciIsIkJvdW5kaW5nQm94SGVscGVyIiwiRWRnZXNIZWxwZXIiLCJXaXJlZnJhbWVIZWxwZXIiLCJYSFJMb2FkZXIiLCJCaW5hcnlUZXh0dXJlTG9hZGVyIiwiV2ViR0xSZW5kZXJUYXJnZXRDdWJlIiwiY29uc3RydWN0IiwiY3JlYXRlUG9pbnRzR2VvbWV0cnkiLCJjcmVhdGVHZW9tZXRyeSIsImNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5IiwiZnJvbVBvaW50cyIsImluaXRGcm9tQXJyYXkiLCJnZXRDb250cm9sUG9pbnRzQXJyYXkiLCJyZXBhcmFtZXRyaXplQnlBcmNMZW5ndGgiLCJzZXRDb2xvcnMiLCJIYW5kbGVycyIsInNldFRleHR1cmVQYXRoIiwiaXNJbnRlcnNlY3Rpb25Cb3giLCJpc0ludGVyc2VjdGlvblNwaGVyZSIsInNldEZyb21NYXRyaXgiLCJyYW5kb20xNiIsIm5lYXJlc3RQb3dlck9mVHdvIiwibmV4dFBvd2VyT2ZUd28iLCJmbGF0dGVuVG9BcnJheU9mZnNldCIsIm11bHRpcGx5VmVjdG9yMyIsIm11bHRpcGx5VmVjdG9yM0FycmF5IiwiYXBwbHlUb0J1ZmZlckF0dHJpYnV0ZSIsImFwcGx5VG9WZWN0b3IzQXJyYXkiLCJleHRyYWN0UG9zaXRpb24iLCJnZXRQb3NpdGlvbiIsIm11bHRpcGx5VG9BcnJheSIsIm11bHRpcGx5VmVjdG9yNCIsInJvdGF0ZUF4aXMiLCJjcm9zc1ZlY3RvciIsInJvdGF0ZUJ5QXhpcyIsIm1ha2VGcnVzdHVtIiwiaXNJbnRlcnNlY3Rpb25MaW5lIiwiaXNJbnRlcnNlY3Rpb25QbGFuZSIsImJhcnljb29yZEZyb21Qb2ludCIsIm1pZHBvaW50IiwiZXh0cmFjdEFsbFBvaW50cyIsImV4dHJ1ZGUiLCJtYWtlR2VvbWV0cnkiLCJmcm9tQXR0cmlidXRlIiwiZGlzdGFuY2VUb01hbmhhdHRhbiIsImxlbmd0aE1hbmhhdHRhbiIsInNldEV1bGVyRnJvbVJvdGF0aW9uTWF0cml4Iiwic2V0RXVsZXJGcm9tUXVhdGVybmlvbiIsImdldFBvc2l0aW9uRnJvbU1hdHJpeCIsImdldFNjYWxlRnJvbU1hdHJpeCIsImdldENvbHVtbkZyb21NYXRyaXgiLCJhcHBseVByb2plY3Rpb24iLCJjb21wdXRlVGFuZ2VudHMiLCJhcHBseU1hdHJpeCIsImdldENoaWxkQnlOYW1lIiwicmVuZGVyRGVwdGgiLCJnZXRXb3JsZFJvdGF0aW9uIiwiZXVsZXJPcmRlciIsInVzZVF1YXRlcm5pb24iLCJzZXREcmF3TW9kZSIsImRyYXdNb2RlIiwiaW5pdEJvbmVzIiwic2V0TGVucyIsIm9ubHlTaGFkb3ciLCJzaGFkb3dDYW1lcmFGb3YiLCJzaGFkb3dDYW1lcmFMZWZ0Iiwic2hhZG93Q2FtZXJhUmlnaHQiLCJzaGFkb3dDYW1lcmFUb3AiLCJzaGFkb3dDYW1lcmFCb3R0b20iLCJzaGFkb3dDYW1lcmFWaXNpYmxlIiwic2hhZG93RGFya25lc3MiLCJzaGFkb3dNYXBXaWR0aCIsInNoYWRvd01hcEhlaWdodCIsImR5bmFtaWMiLCJzZXREeW5hbWljIiwiY29weUluZGljZXNBcnJheSIsInNldEFycmF5IiwiYWRkSW5kZXgiLCJhZGRBdHRyaWJ1dGUiLCJhZGREcmF3Q2FsbCIsImNsZWFyRHJhd0NhbGxzIiwiY29tcHV0ZU9mZnNldHMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJsaW5lUHJlY2lzaW9uIiwiZ2V0QXJyYXlzIiwiYWRkU2hhcGVMaXN0Iiwid3JhcEFyb3VuZCIsIm92ZXJkcmF3Iiwid3JhcFJHQiIsIm1ldGFsIiwiY2xlYXJUYXJnZXQiLCJhbmltYXRlIiwiZ2V0Q3VycmVudFJlbmRlclRhcmdldCIsImdldFByZWNpc2lvbiIsInJlc2V0R0xTdGF0ZSIsInN1cHBvcnRzRmxvYXRUZXh0dXJlcyIsInN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMiLCJzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMiLCJzdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQyIsInN1cHBvcnRzQ29tcHJlc3NlZFRleHR1cmVQVlJUQyIsInN1cHBvcnRzQmxlbmRNaW5NYXgiLCJzdXBwb3J0c0luc3RhbmNlZEFycmF5cyIsImVuYWJsZVNjaXNzb3JUZXN0IiwiYWRkUHJlUGx1Z2luIiwiYWRkUG9zdFBsdWdpbiIsInVwZGF0ZVNoYWRvd01hcCIsInNldEZhY2VDdWxsaW5nIiwiYWxsb2NUZXh0dXJlVW5pdCIsInNldFRleHR1cmUiLCJnZXRBY3RpdmVNaXBNYXBMZXZlbCIsInNoYWRvd01hcEN1bGxGYWNlIiwidnIiLCJnYW1tYUlucHV0IiwiZ2FtbWFPdXRwdXQiLCJyZW5kZXJSZXZlcnNlU2lkZWQiLCJyZW5kZXJTaW5nbGVTaWRlZCIsImdldERhdGEiLCJ1cGRhdGVDdWJlTWFwIiwiR2VvbWV0cnlVdGlscyIsImdlb21ldHJ5MSIsIkNhbnZhc1JlbmRlcmVyIiwiSlNPTkxvYWRlciIsImxvYWRUZXh0dXJlQ3ViZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZSIsImxvYWRDb21wcmVzc2VkVGV4dHVyZUN1YmUiLCJTY2VuZVV0aWxzIiwiY3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdCIsImRldGFjaCIsIkxlbnNGbGFyZSIsInJldmlzaW9uIiwic2hhcmVkIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsInRvSW5kZXhlZE9iamVjdCIsImFkZFRvVW5zY29wYWJsZXMiLCJJdGVyYXRvcnMiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImdldHRlckZvciIsIml0ZXJhdGVkIiwia2luZCIsImRvbmUiLCJBcmd1bWVudHMiLCJpc09iamVjdCIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5Iiwid2VsbEtub3duU3ltYm9sIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIk1FVEhPRF9OQU1FIiwiREVTQ1JJUFRPUlMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIkNTUzNET2JqZWN0IiwicG9pbnRlckV2ZW50cyIsImN1c3RvbSIsIkVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJDU1MzRFNwcml0ZSIsIkNTUzNEUmVuZGVyZXIiLCJfd2lkdGhIYWxmIiwiX2hlaWdodEhhbGYiLCJjcmVhdGVFbGVtZW50Iiwib3ZlcmZsb3ciLCJjYW1lcmFFbGVtZW50IiwiV2Via2l0VHJhbnNmb3JtU3R5bGUiLCJ0cmFuc2Zvcm1TdHlsZSIsImFwcGVuZENoaWxkIiwiaXNJRSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImVwc2lsb24iLCJnZXRDYW1lcmFDU1NNYXRyaXgiLCJnZXRPYmplY3RDU1NNYXRyaXgiLCJjYW1lcmFDU1NNYXRyaXgiLCJtYXRyaXgzZCIsImdldERpc3RhbmNlVG9TcXVhcmVkIiwib2JqZWN0MSIsIm9iamVjdDIiLCJzb3J0ZWQiLCJmaWx0ZXJBbmRGbGF0dGVuIiwiZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQiLCJ6TWF4IiwiekluZGV4IiwiV2Via2l0UGVyc3BlY3RpdmUiLCJwZXJzcGVjdGl2ZSIsIldlYmtpdFRyYW5zZm9ybSIsImNhY2hlZE9iamVjdCIsIm9iamVjdERhdGEiLCJkaXNwbGF5IiwiZmFpbHMiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIk8iLCJBdHRyaWJ1dGVzIiwiYUZ1bmN0aW9uIiwidmFyaWFibGUiLCJuYW1lc3BhY2UiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwiJCIsIklTX1BVUkUiLCJnZXRCdWlsdEluIiwiTmF0aXZlUHJvbWlzZSIsInJlZGVmaW5lIiwicmVkZWZpbmVBbGwiLCJzZXRUb1N0cmluZ1RhZyIsInNldFNwZWNpZXMiLCJhbkluc3RhbmNlIiwiY2xhc3NvZiIsImluc3BlY3RTb3VyY2UiLCJpdGVyYXRlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsImlzRm9yY2VkIiwiVjhfVkVSU0lPTiIsIlNQRUNJRVMiLCJQUk9NSVNFIiwiZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUiLCJQcm9taXNlQ29uc3RydWN0b3IiLCJwcm9jZXNzIiwiJGZldGNoIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJJU19OT0RFIiwiRElTUEFUQ0hfRVZFTlQiLCJjcmVhdGVFdmVudCIsIkZPUkNFRCIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsInByb21pc2UiLCJyZXNvbHZlIiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXRlcmFibGUiLCJhbGwiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJub3RpZmllZCIsImNoYWluIiwicmVhY3Rpb25zIiwib2siLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0IiwiZG9tYWluIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsInJlYXNvbiIsImluaXRFdmVudCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsImZuIiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJDIiwidGhhdCIsInVuc2FmZSIsImZvcmNlZCIsImlucHV0IiwiUHJvbWlzZSIsInN0YXQiLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwiY291bnRlciIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiSW5kZXhlZE9iamVjdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzZXRHbG9iYWwiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsImRlc2NyaXB0b3IiLCJUQVJHRVQiLCJHTE9CQUwiLCJTVEFUSUMiLCJub1RhcmdldEdldCIsInNoYW0iLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsImVuZm9yY2UiLCJURU1QTEFURSIsInNpbXBsZSIsIkVYSVNUUyIsImJpdG1hcCIsIndyaXRhYmxlIiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwic2hhcmVkS2V5IiwiaGlkZGVuS2V5cyIsInN0b3JlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwiU1RBVEUiLCJUWVBFIiwiZnVuY3Rpb25Ub1N0cmluZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiVEFHIiwiZGVmaW5pdGlvbiIsInNjcmlwdHBhdGgiLCJ1cmxBcmdzIiwiZG9jIiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaWRzIiwic2NyaXB0cyIsImV2ZXJ5IiwiYXIiLCJlYWNoIiwiZWwiLCIkc2NyaXB0IiwiaWRPckRvbmUiLCJvcHREb25lIiwiaWRPckRvbmVJc0RvbmUiLCJsb29wRm4iLCJpdGVtIiwiZHNldCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJhc3luYyIsImluc2VydEJlZm9yZSIsImxhc3RDaGlsZCIsInN0ciIsInJlYWR5IiwiZGVwcyIsInJlcSIsIm1pc3NpbmciLCJkZXAiLCJjb3B5cmlnaHQiLCJQUkVGRVJSRURfU1RSSU5HIiwidmFsIiwidmFsdWVPZiIsInBvc3RmaXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJhY3RpdmVYRG9jdW1lbnQiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJjb250ZW50V2luZG93IiwiRiIsIlByb3BlcnRpZXMiLCJuYW1lcyIsInRvSW50ZWdlciIsImFyZ3VtZW50IiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJJdGVyYXRvclByb3RvdHlwZSIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJnZXRQcm90b3R5cGVPZiIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJ0b09iamVjdCIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsImRlZmVyIiwicG9ydCIsIklTX0lPUyIsImxvY2F0aW9uIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwicnVuIiwicnVubmVyIiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiYXJncyIsIm5leHRUaWNrIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiTWFwU2hpbSIsImFyciIsInNvbWUiLCJlbnRyeSIsImNsYXNzXzEiLCJfX2VudHJpZXNfXyIsImVudHJpZXMiLCJjdHgiLCJfaSIsIl9hIiwiaXNCcm93c2VyIiwiZ2xvYmFsJDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUkMSIsInRyYW5zaXRpb25LZXlzIiwibXV0YXRpb25PYnNlcnZlclN1cHBvcnRlZCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIiLCJjb25uZWN0ZWRfIiwibXV0YXRpb25FdmVudHNBZGRlZF8iLCJtdXRhdGlvbnNPYnNlcnZlcl8iLCJvYnNlcnZlcnNfIiwib25UcmFuc2l0aW9uRW5kXyIsInJlZnJlc2giLCJsZWFkaW5nQ2FsbCIsInRyYWlsaW5nQ2FsbCIsImxhc3RDYWxsVGltZSIsInJlc29sdmVQZW5kaW5nIiwicHJveHkiLCJ0aW1lb3V0Q2FsbGJhY2siLCJ0aW1lU3RhbXAiLCJ0aHJvdHRsZSIsImFkZE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb25uZWN0XyIsInJlbW92ZU9ic2VydmVyIiwib2JzZXJ2ZXJzIiwiZGlzY29ubmVjdF8iLCJ1cGRhdGVPYnNlcnZlcnNfIiwiYWN0aXZlT2JzZXJ2ZXJzIiwiZ2F0aGVyQWN0aXZlIiwiaGFzQWN0aXZlIiwiYnJvYWRjYXN0QWN0aXZlIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiX2IiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlXyIsImRlZmluZUNvbmZpZ3VyYWJsZSIsInByb3BzIiwiZ2V0V2luZG93T2YiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJlbXB0eVJlY3QiLCJjcmVhdGVSZWN0SW5pdCIsInRvRmxvYXQiLCJnZXRCb3JkZXJzU2l6ZSIsInN0eWxlcyIsInJlZHVjZSIsImdldEhUTUxFbGVtZW50Q29udGVudFJlY3QiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbXB1dGVkU3R5bGUiLCJwYWRkaW5ncyIsInBvc2l0aW9uc18xIiwiZ2V0UGFkZGluZ3MiLCJob3JpelBhZCIsInZlcnRQYWQiLCJib3hTaXppbmciLCJkb2N1bWVudEVsZW1lbnQiLCJpc0RvY3VtZW50RWxlbWVudCIsInZlcnRTY3JvbGxiYXIiLCJob3JpelNjcm9sbGJhciIsImlzU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHR3JhcGhpY3NFbGVtZW50IiwiU1ZHRWxlbWVudCIsImdldEJCb3giLCJnZXRDb250ZW50UmVjdCIsImJib3giLCJnZXRTVkdDb250ZW50UmVjdCIsIlJlc2l6ZU9ic2VydmF0aW9uIiwiYnJvYWRjYXN0V2lkdGgiLCJicm9hZGNhc3RIZWlnaHQiLCJjb250ZW50UmVjdF8iLCJpc0FjdGl2ZSIsInJlY3QiLCJicm9hZGNhc3RSZWN0IiwiUmVzaXplT2JzZXJ2ZXJFbnRyeSIsInJlY3RJbml0IiwiQ29uc3RyIiwiY29udGVudFJlY3QiLCJET01SZWN0UmVhZE9ubHkiLCJSZXNpemVPYnNlcnZlclNQSSIsImNhbGxiYWNrQ3R4IiwiYWN0aXZlT2JzZXJ2YXRpb25zXyIsIm9ic2VydmF0aW9uc18iLCJjYWxsYmFja18iLCJjb250cm9sbGVyXyIsImNhbGxiYWNrQ3R4XyIsIm9ic2VydmF0aW9ucyIsInVub2JzZXJ2ZSIsImNsZWFyQWN0aXZlIiwib2JzZXJ2YXRpb24iLCJSZXNpemVPYnNlcnZlciIsInN5bWJvbE9ic2VydmFibGVQb255ZmlsbCIsIm9ic2VydmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJpdGVyYXRvciIsIm9iamVjdEtleXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImludGVnZXIiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJJdGVyYXRvcnNDb3JlIiwicmV0dXJuVGhpcyIsIkl0ZXJhYmxlIiwiTkFNRSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJwcm90byIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCJWIiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImdldE93blByb3BlcnR5TmFtZXNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQ29uc3RydWN0b3IiLCJpc0FycmF5SXRlcmF0b3JNZXRob2QiLCJnZXRJdGVyYXRvck1ldGhvZCIsImNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmciLCJSZXN1bHQiLCJzdG9wcGVkIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlckZuIiwiYm91bmRGdW5jdGlvbiIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRhZyIsInRyeUdldCIsImNhbGxlZSIsIkVOVFJJRVMiLCJyZXR1cm5NZXRob2QiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJmbHVzaCIsIm1hY3JvdGFzayIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJxdWV1ZU1pY3JvdGFzayIsImNyZWF0ZVRleHROb2RlIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJ2ZXJzaW9ucyIsInY4IiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTVFJJQ1RfTUVUSE9EIiwiY29tcGFyZWZuIiwiY29sbGVjdGlvbkRlbGV0ZUFsbCIsInJlYWwiLCJkZWxldGVBbGwiLCJ3YXNEZWxldGVkIiwiY29sbGVjdGlvbiIsInJlbW92ZXIiLCJhbGxEZWxldGVkIiwib3JpZ2luYWxNb2R1bGUiLCJ3ZWJwYWNrUG9seWZpbGwiLCJub29wIiwiYmxhbmtfb2JqZWN0IiwicnVuX2FsbCIsImZucyIsImlzX2Z1bmN0aW9uIiwidGhpbmciLCJzYWZlX25vdF9lcXVhbCIsInN1YnNjcmliZSIsInVuc3ViIiwidW5zdWJzY3JpYmUiLCJjcmVhdGVfc2xvdCIsIiQkc2NvcGUiLCJzbG90X2N0eCIsImdldF9zbG90X2NvbnRleHQiLCJ0YXIiLCJ1cGRhdGVfc2xvdCIsInNsb3RfZGVmaW5pdGlvbiIsImRpcnR5IiwiZ2V0X3Nsb3RfY2hhbmdlc19mbiIsImdldF9zbG90X2NvbnRleHRfZm4iLCJzbG90X2NoYW5nZXMiLCJsZXRzIiwiZ2V0X3Nsb3RfY2hhbmdlcyIsInNsb3RfY29udGV4dCIsIlNldCIsImFwcGVuZCIsImluc2VydCIsImFuY2hvciIsInNwYWNlIiwiYXR0ciIsInNldF9kYXRhIiwiY3VycmVudF9jb21wb25lbnQiLCJzZXRfY3VycmVudF9jb21wb25lbnQiLCJjb21wb25lbnQiLCJnZXRfY3VycmVudF9jb21wb25lbnQiLCJvbk1vdW50IiwiJCQiLCJvbl9tb3VudCIsImRpcnR5X2NvbXBvbmVudHMiLCJiaW5kaW5nX2NhbGxiYWNrcyIsInJlbmRlcl9jYWxsYmFja3MiLCJmbHVzaF9jYWxsYmFja3MiLCJyZXNvbHZlZF9wcm9taXNlIiwidXBkYXRlX3NjaGVkdWxlZCIsInNjaGVkdWxlX3VwZGF0ZSIsImFkZF9yZW5kZXJfY2FsbGJhY2siLCJmbHVzaGluZyIsInNlZW5fY2FsbGJhY2tzIiwiZnJhZ21lbnQiLCJiZWZvcmVfdXBkYXRlIiwiYWZ0ZXJfdXBkYXRlIiwib3V0cm9pbmciLCJvdXRyb3MiLCJ0cmFuc2l0aW9uX2luIiwiYmxvY2siLCJsb2NhbCIsInRyYW5zaXRpb25fb3V0IiwiU3ZlbHRlRWxlbWVudCIsImNyZWF0ZV9jb21wb25lbnQiLCJtb3VudF9jb21wb25lbnQiLCJvbl9kZXN0cm95IiwibmV3X29uX2Rlc3Ryb3kiLCJkZXN0cm95X2NvbXBvbmVudCIsImRldGFjaGluZyIsImluc3RhbmNlIiwiY3JlYXRlX2ZyYWdtZW50Iiwibm90X2VxdWFsIiwicGFyZW50X2NvbXBvbmVudCIsInByb3BfdmFsdWVzIiwiYm91bmQiLCJyZXN0IiwibWFrZV9kaXJ0eSIsImh5ZHJhdGUiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJpbnRybyIsIkhUTUxFbGVtZW50IiwiYXR0YWNoU2hhZG93Iiwic2xvdHRlZCIsIl9vbGRWYWx1ZSIsIiRkZXN0cm95IiwiU3ZlbHRlQ29tcG9uZW50IiwiQVJSQVlfVFlQRSIsIlJBTkRPTSIsIm91dCIsImZyb21WYWx1ZXMiLCJtMDAiLCJtMDEiLCJtMDIiLCJtMDMiLCJtMTAiLCJtMjAiLCJtMzAiLCJhMDIiLCJhMDMiLCJpbnZlcnQiLCJhMDAiLCJhMTAiLCJhMjAiLCJhMzAiLCJiMDAiLCJiMDEiLCJiMDIiLCJiMDMiLCJiMDQiLCJiMDUiLCJiMDYiLCJiMDciLCJiMDgiLCJiMDkiLCJiMTAiLCJhZGpvaW50IiwiYjMiLCJyYWQiLCJiMjAiLCJoeXBvdCIsImZyb21UcmFuc2xhdGlvbiIsImZyb21TY2FsaW5nIiwiZnJvbVJvdGF0aW9uIiwiZnJvbVhSb3RhdGlvbiIsImZyb21ZUm90YXRpb24iLCJmcm9tWlJvdGF0aW9uIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24iLCJmcm9tUXVhdDIiLCJ0cmFuc2xhdGlvbiIsImJ3IiwiYXciLCJtYWduaXR1ZGUiLCJnZXRUcmFuc2xhdGlvbiIsImdldFNjYWxpbmciLCJnZXRSb3RhdGlvbiIsInNjYWxpbmciLCJpczEiLCJpczIiLCJpczMiLCJzbTExIiwic20xMiIsInNtMTMiLCJzbTIxIiwic20yMiIsInNtMjMiLCJzbTMxIiwic20zMiIsInNtMzMiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbiIsIm94Iiwib3kiLCJveiIsIm91dDAiLCJvdXQxIiwib3V0MiIsIm91dDQiLCJvdXQ1Iiwib3V0NiIsIm91dDgiLCJvdXQ5Iiwib3V0MTAiLCJmcm9tUXVhdCIsInl4IiwiengiLCJ6eSIsInJsIiwidGIiLCJuZiIsImZvdnkiLCJwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyIsInVwVGFuIiwidXBEZWdyZWVzIiwiZG93blRhbiIsImRvd25EZWdyZWVzIiwibGVmdFRhbiIsImxlZnREZWdyZWVzIiwicmlnaHRUYW4iLCJyaWdodERlZ3JlZXMiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJvcnRobyIsImxyIiwiYnQiLCJleWV4IiwiZXlleSIsImV5ZXoiLCJ1cHgiLCJ1cHkiLCJ1cHoiLCJjZW50ZXJ4IiwiY2VudGVyeSIsImNlbnRlcnoiLCJ0YXJnZXRUbyIsImZyb2IiLCJzdWJ0cmFjdCIsIm11bHRpcGx5U2NhbGFyQW5kQWRkIiwiZXhhY3RFcXVhbHMiLCJhMCIsImEzIiwiYTQiLCJhNSIsImE2IiwiYTciLCJhOCIsImE5IiwiYTE1IiwiYjQiLCJiNSIsImI2IiwiYjciLCJiOCIsImI5IiwiYjE1IiwibXVsIiwic2NhbGVBbmRBZGQiLCJzcXVhcmVkRGlzdGFuY2UiLCJzcXVhcmVkTGVuZ3RoIiwiaGVybWl0ZSIsImZhY3RvclRpbWVzMiIsImZhY3RvcjEiLCJmYWN0b3IyIiwiZmFjdG9yMyIsImZhY3RvcjQiLCJiZXppZXIiLCJpbnZlcnNlRmFjdG9yIiwiaW52ZXJzZUZhY3RvclRpbWVzVHdvIiwielNjYWxlIiwidHJhbnNmb3JtTWF0NCIsInRyYW5zZm9ybU1hdDMiLCJ0cmFuc2Zvcm1RdWF0IiwidXZ4IiwidXZ5IiwidXZ6IiwidXV2eCIsInV1dnkiLCJ1dXZ6IiwidzIiLCJtYWciLCJjb3NpbmUiLCJkaXN0Iiwic3FyTGVuIiwiYXJnIiwic2V0QXhpc0FuZ2xlIiwiZ2V0QXhpc0FuZ2xlIiwib3V0X2F4aXMiLCJnZXRBbmdsZSIsImRvdHByb2R1Y3QiLCJjYWxjdWxhdGVXIiwiZXQiLCJsbiIsIm9tZWdhIiwiY29zb20iLCJzaW5vbSIsInNjYWxlMCIsInNjYWxlMSIsInUxIiwidTIiLCJ1MyIsInNxcnQxTWludXNVMSIsInNxcnRVMSIsImludkRvdCIsImZyb21NYXQzIiwiZlJvb3QiLCJmVHJhY2UiLCJmcm9tRXVsZXIiLCJoYWxmVG9SYWQiLCJjeiIsInRtcHZlYzMiLCJ4VW5pdFZlYzMiLCJ5VW5pdFZlYzMiLCJ0ZW1wMSIsInRlbXAyIiwibWF0ciIsInJvdGF0aW9uVG8iLCJzcWxlcnAiLCJzZXRBeGVzIiwiY3JlYXRlU2NlbmUiLCJjcmVhdGVFbmdpbmUiLCJtYXJrZXIiLCJtYXJrZXJSb290VmlzaWJsZUFjdGlvbiIsIl9zY3JpcHRfIiwiZW5naW5lIiwiY250IiwiY252IiwiQkFCWUxPTiIsIkVuZ2luZSIsInVzZVJpZ2h0SGFuZGVkU3lzdGVtIiwiQ29sb3I0IiwiWmVybyIsImF0dGFjaENvbnRyb2wiLCJnZXRSZW5kZXJpbmdDYW52YXMiLCJIZW1pc3BoZXJpY0xpZ2h0IiwiTWVzaEJ1aWxkZXIiLCJDcmVhdGVCb3giLCJtYXJrZXJSb290IiwiVHJhbnNmb3JtTm9kZSIsInNldEVuYWJsZWQiLCJ3YXRjaCIsIm1hdF8iLCJvcmllbnRhdGlvbiIsInNldFByZVRyYW5zZm9ybU1hdHJpeCIsIk1hdHJpeCIsIkZyb21BcnJheSIsInJlc2l6ZSIsIm9mZnNldFdpZHRoIiwib2Zmc2V0SGVpZ2h0IiwicmVzaXplZCIsInRpY2siLCJmcmVlemVQcm9qZWN0aW9uTWF0cml4IiwiZGlyZWN0VXBkYXRlIiwiZ2V0RWxlbWVudEJ5SWQiLCJsaWdodDEiLCJsaWdodDIiLCJjb21wb3NpdGVOYW1lIiwiZnVsbE5hbWUiLCJzaG9ydE5hbWUiLCJmYW1pbHkiLCJsaW5rcyIsIm93bmVycyIsInVlIiwicmVnIiwiZ3JhcGhpdGUiLCJLZSIsIk5lIiwiTCIsIkllIiwiRCIsIksiLCJHZSIsIkUiLCJKZSIsImVlIiwiaWUiLCJmaWx0ZXJNYXAiLCJwcmVwZW5kIiwiSCIsIk1lIiwidXB3YXJkIiwiJGUiLCJuYXRpdmVUZW1wbGF0ZSIsIlRlIiwiWiIsIlkiLCJkZWZpbmVkIiwib2ZmIiwiemUiLCJMZSIsIm5lIiwiQmUiLCJhZnRlciIsInBsYWluIiwic3Vic2NyaWJlcnMiLCJ1cGRhdGVzIiwiZGVmYXVsdFN0YXRlIiwic3RhdGVSZWYiLCJxZSIsIm9lIiwib24iLCJmaXJzdFN0YXRlIiwiZ2V0U3RhdGUiLCJjb25maWciLCJzdHJpY3QiLCJNIiwiYmVmb3JlIiwiQSIsIm9mIiwicmUiLCJjaGFuZ2VkIiwiSGUiLCJmZSIsIlFlIiwiXyIsIlIiLCLJlCIsIkkiLCJHIiwiSiIsIlEiLCJVIiwiaGFzUmVmIiwiWCIsImxlIiwic2UiLCJwZSIsImhlIiwiZmlyc3QiLCJnZSIsInllIiwicGFnZSIsImtlIiwic3RhY2siLCJ2ZSIsIndlIiwiU2UiLCJhbHJlYWR5U3RhcnRlZCIsImN1cnJlbnRQYWdlIiwiYmFycmllcklEIiwiZnVsbElEIiwicHJpb3JpdHkiLCJ4ZSIsIkNlIiwiQWUiLCJEZSIsInNhbXBsZSIsIkVlIiwiamUiLCJkZWVwIiwib3duZXJTZXQiLCJoaXN0b3J5IiwiZXZlbnRzIiwiZWZmZWN0cyIsInN0b3JlcyIsImRvbWFpbnMiLCJQZSIsInRlbXBsYXRlIiwiT2UiLCJvcCIsIkZlIiwibG9jIiwic2lkIiwibmFtZWQiLCJob29rcyIsImRlZmF1bHRDb25maWciLCJ0aHJ1IiwiZ2V0VHlwZSIsImNsb3N1cmUiLCJmeCIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsInNtb290aGluZ0VuYWJsZWQiLCJ0aHJlc2hvbGRNb2RlIiwiZGVidWdfaW5mbyIsIm1heEFSVmlkZW9TaXplIiwibWFya2VyTG9zc0RlbGF5IiwicGF0dFJhdGlvIiwid2FybmluZ1Zpc2libGUiLCJtYXJrZXJjb250YWluZXIiLCJtYXJrZXJXYXJuaW5nIiwic2hvdyIsInZpc2libGVNYXJrZXJzQXBpIiwiaW5jIiwiZGVjIiwicGF0dGVybnMiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwiY2FtZXJhbWF0IiwibWFya2VyRm91bmQiLCJtYXJrZXJMb3N0IiwibG9hZFBhdHRlcm4iLCJwYXR0IiwidmlzaWJsZU1hcmtlcnMiLCJtYXJrZXJMb3N0Q291bnRkb3duIiwiYXJDYW1lcmFQYXJhbUxvYWRlZCIsImFyQ2FtZXJhUGFyYW0iLCJBUkNhbWVyYVBhcmFtIiwibWVkaWFEZXZpY2VzIiwiZW51bWVyYXRlRGV2aWNlcyIsImdldFVzZXJNZWRpYSIsImZjdE5hbWUiLCJhc3NlcnQiLCJhcmN0cmwiLCJyZXNpemVCeSIsInRyYW5zZm9ybU9yaWdpbiIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsIm9uR2V0TWFya2VyIiwiZXYiLCJpZFBhdHQiLCJpZE1hdHJpeCIsIkFSQ29udHJvbGxlciIsInNldFBhdHRlcm5EZXRlY3Rpb25Nb2RlIiwiYXJ0b29sa2l0IiwiQVJfVEVNUExBVEVfTUFUQ0hJTkdfTU9OT19BTkRfTUFUUklYIiwic2V0TWF0cml4Q29kZVR5cGUiLCJBUl9NQVRSSVhfQ09ERV80eDRfQkNIXzEzXzVfNSIsInNldFBhdHRSYXRpbyIsInNldFRocmVzaG9sZE1vZGUiLCJzZXRUaHJlc2hvbGQiLCJtb3pJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJ3ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQiLCJtc0ltYWdlU21vb3RoaW5nRW5hYmxlZCIsImltYWdlU21vb3RoaW5nRW5hYmxlZCIsImdldENhbWVyYU1hdHJpeCIsImxvYWRNYXJrZXIiLCJtYXJrZXJJZCIsInBhdHRfcnEiLCJkZWJ1Z1NldHVwIiwiY3JlYXRlY3RybCIsInRpY2tlciIsImdldE1hcmtlck51bSIsImZhY2luZ01vZGUiLCJzdHJlYW0iLCJtdXRlZCIsInBsYXlzaW5saW5lIiwic3JjT2JqZWN0IiwiTWFya2VyIiwicHJlZCIsImNyZWF0ZVN0b3JlIiwibWF0NCIsIm1hdHJpeEdMX1JIIiwiY2FyZCIsInBob25lIiwiY2xhc3NMaXN0IiwiU0NFTkVfU0NBTEUiLCJTY2VuZUxvYWRlciIsIkxvYWRBc3luYyIsInJvb3ROb2RlcyIsIlRIUkVFIiwiQ1NTM0QiLCJhcHAiLCJib2R5Il0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFl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QUNqQ3dzQyxFQUFNcHJDLElBQUk4MEosRyxJQVNKbEIsRUFBYSxJQUFLc04sRUFBTTUrQixZQUFZbytCLEcsT0FDMUM5TSxFQUFXcHFKLGtCQUFtQixFQUU5QjRoQyxFQUFNcHJDLElBQUk0ekosR0FDVnhvSCxFQUFNaGtDLE1BQU14SSxJQUFJaWlLLEVBQVlBLEVBQVlBLEcsR0FFaEN6MUgsRUFBT3Q0QixFQUFROGdKLE8sNkNBeURMK00sRUFBSyxNLDJDQUtmRCxFQUFJLE8sSUN0TGRTLEdBQU0sSSwyRUFBUSxDQUNsQmowSyxPQUFRNGEsU0FBU3M1SixLQUNqQmxyQixNQUFPLENBQ0w5ckosS0FBTSxXQUlWNkIsT0FBT2sxSyxJQUFNQSxHQUVFQSIsImZpbGUiOiJidW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNjIpO1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsIi8vIFBvbHlmaWxsc1xuXG5pZiAoIE51bWJlci5FUFNJTE9OID09PSB1bmRlZmluZWQgKSB7XG5cblx0TnVtYmVyLkVQU0lMT04gPSBNYXRoLnBvdyggMiwgLSA1MiApO1xuXG59XG5cbmlmICggTnVtYmVyLmlzSW50ZWdlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdC8vIE1pc3NpbmcgaW4gSUVcblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTnVtYmVyL2lzSW50ZWdlclxuXG5cdE51bWJlci5pc0ludGVnZXIgPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoIHZhbHVlICkgJiYgTWF0aC5mbG9vciggdmFsdWUgKSA9PT0gdmFsdWU7XG5cblx0fTtcblxufVxuXG4vL1xuXG5pZiAoIE1hdGguc2lnbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvc2lnblxuXG5cdE1hdGguc2lnbiA9IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHJldHVybiAoIHggPCAwICkgPyAtIDEgOiAoIHggPiAwICkgPyAxIDogKyB4O1xuXG5cdH07XG5cbn1cblxuaWYgKCAnbmFtZScgaW4gRnVuY3Rpb24ucHJvdG90eXBlID09PSBmYWxzZSApIHtcblxuXHQvLyBNaXNzaW5nIGluIElFXG5cdC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0Z1bmN0aW9uL25hbWVcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIEZ1bmN0aW9uLnByb3RvdHlwZSwgJ25hbWUnLCB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudG9TdHJpbmcoKS5tYXRjaCggL15cXHMqZnVuY3Rpb25cXHMqKFteXFwoXFxzXSopLyApWyAxIF07XG5cblx0XHR9XG5cblx0fSApO1xuXG59XG5cbmlmICggT2JqZWN0LmFzc2lnbiA9PT0gdW5kZWZpbmVkICkge1xuXG5cdC8vIE1pc3NpbmcgaW4gSUVcblx0Ly8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2Fzc2lnblxuXG5cdE9iamVjdC5hc3NpZ24gPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCAnQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0JyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG91dHB1dCA9IE9iamVjdCggdGFyZ2V0ICk7XG5cblx0XHRmb3IgKCB2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4ICsrICkge1xuXG5cdFx0XHR2YXIgc291cmNlID0gYXJndW1lbnRzWyBpbmRleCBdO1xuXG5cdFx0XHRpZiAoIHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgbmV4dEtleSBpbiBzb3VyY2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCggc291cmNlLCBuZXh0S2V5ICkgKSB7XG5cblx0XHRcdFx0XHRcdG91dHB1dFsgbmV4dEtleSBdID0gc291cmNlWyBuZXh0S2V5IF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH07XG5cbn1cblxudmFyIFJFVklTSU9OID0gJzExNSc7XG52YXIgTU9VU0UgPSB7IExFRlQ6IDAsIE1JRERMRTogMSwgUklHSFQ6IDIsIFJPVEFURTogMCwgRE9MTFk6IDEsIFBBTjogMiB9O1xudmFyIFRPVUNIID0geyBST1RBVEU6IDAsIFBBTjogMSwgRE9MTFlfUEFOOiAyLCBET0xMWV9ST1RBVEU6IDMgfTtcbnZhciBDdWxsRmFjZU5vbmUgPSAwO1xudmFyIEN1bGxGYWNlQmFjayA9IDE7XG52YXIgQ3VsbEZhY2VGcm9udCA9IDI7XG52YXIgQ3VsbEZhY2VGcm9udEJhY2sgPSAzO1xudmFyIEZyb250RmFjZURpcmVjdGlvbkNXID0gMDtcbnZhciBGcm9udEZhY2VEaXJlY3Rpb25DQ1cgPSAxO1xudmFyIEJhc2ljU2hhZG93TWFwID0gMDtcbnZhciBQQ0ZTaGFkb3dNYXAgPSAxO1xudmFyIFBDRlNvZnRTaGFkb3dNYXAgPSAyO1xudmFyIFZTTVNoYWRvd01hcCA9IDM7XG52YXIgRnJvbnRTaWRlID0gMDtcbnZhciBCYWNrU2lkZSA9IDE7XG52YXIgRG91YmxlU2lkZSA9IDI7XG52YXIgRmxhdFNoYWRpbmcgPSAxO1xudmFyIFNtb290aFNoYWRpbmcgPSAyO1xudmFyIE5vQmxlbmRpbmcgPSAwO1xudmFyIE5vcm1hbEJsZW5kaW5nID0gMTtcbnZhciBBZGRpdGl2ZUJsZW5kaW5nID0gMjtcbnZhciBTdWJ0cmFjdGl2ZUJsZW5kaW5nID0gMztcbnZhciBNdWx0aXBseUJsZW5kaW5nID0gNDtcbnZhciBDdXN0b21CbGVuZGluZyA9IDU7XG52YXIgQWRkRXF1YXRpb24gPSAxMDA7XG52YXIgU3VidHJhY3RFcXVhdGlvbiA9IDEwMTtcbnZhciBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiA9IDEwMjtcbnZhciBNaW5FcXVhdGlvbiA9IDEwMztcbnZhciBNYXhFcXVhdGlvbiA9IDEwNDtcbnZhciBaZXJvRmFjdG9yID0gMjAwO1xudmFyIE9uZUZhY3RvciA9IDIwMTtcbnZhciBTcmNDb2xvckZhY3RvciA9IDIwMjtcbnZhciBPbmVNaW51c1NyY0NvbG9yRmFjdG9yID0gMjAzO1xudmFyIFNyY0FscGhhRmFjdG9yID0gMjA0O1xudmFyIE9uZU1pbnVzU3JjQWxwaGFGYWN0b3IgPSAyMDU7XG52YXIgRHN0QWxwaGFGYWN0b3IgPSAyMDY7XG52YXIgT25lTWludXNEc3RBbHBoYUZhY3RvciA9IDIwNztcbnZhciBEc3RDb2xvckZhY3RvciA9IDIwODtcbnZhciBPbmVNaW51c0RzdENvbG9yRmFjdG9yID0gMjA5O1xudmFyIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IgPSAyMTA7XG52YXIgTmV2ZXJEZXB0aCA9IDA7XG52YXIgQWx3YXlzRGVwdGggPSAxO1xudmFyIExlc3NEZXB0aCA9IDI7XG52YXIgTGVzc0VxdWFsRGVwdGggPSAzO1xudmFyIEVxdWFsRGVwdGggPSA0O1xudmFyIEdyZWF0ZXJFcXVhbERlcHRoID0gNTtcbnZhciBHcmVhdGVyRGVwdGggPSA2O1xudmFyIE5vdEVxdWFsRGVwdGggPSA3O1xudmFyIE11bHRpcGx5T3BlcmF0aW9uID0gMDtcbnZhciBNaXhPcGVyYXRpb24gPSAxO1xudmFyIEFkZE9wZXJhdGlvbiA9IDI7XG52YXIgTm9Ub25lTWFwcGluZyA9IDA7XG52YXIgTGluZWFyVG9uZU1hcHBpbmcgPSAxO1xudmFyIFJlaW5oYXJkVG9uZU1hcHBpbmcgPSAyO1xudmFyIFVuY2hhcnRlZDJUb25lTWFwcGluZyA9IDM7XG52YXIgQ2luZW9uVG9uZU1hcHBpbmcgPSA0O1xudmFyIEFDRVNGaWxtaWNUb25lTWFwcGluZyA9IDU7XG5cbnZhciBVVk1hcHBpbmcgPSAzMDA7XG52YXIgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nID0gMzAxO1xudmFyIEN1YmVSZWZyYWN0aW9uTWFwcGluZyA9IDMwMjtcbnZhciBFcXVpcmVjdGFuZ3VsYXJSZWZsZWN0aW9uTWFwcGluZyA9IDMwMztcbnZhciBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZyA9IDMwNDtcbnZhciBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyA9IDMwNTtcbnZhciBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyA9IDMwNjtcbnZhciBDdWJlVVZSZWZyYWN0aW9uTWFwcGluZyA9IDMwNztcbnZhciBSZXBlYXRXcmFwcGluZyA9IDEwMDA7XG52YXIgQ2xhbXBUb0VkZ2VXcmFwcGluZyA9IDEwMDE7XG52YXIgTWlycm9yZWRSZXBlYXRXcmFwcGluZyA9IDEwMDI7XG52YXIgTmVhcmVzdEZpbHRlciA9IDEwMDM7XG52YXIgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA0O1xudmFyIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyID0gMTAwNDtcbnZhciBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbnZhciBOZWFyZXN0TWlwTWFwTGluZWFyRmlsdGVyID0gMTAwNTtcbnZhciBMaW5lYXJGaWx0ZXIgPSAxMDA2O1xudmFyIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xudmFyIExpbmVhck1pcE1hcE5lYXJlc3RGaWx0ZXIgPSAxMDA3O1xudmFyIExpbmVhck1pcG1hcExpbmVhckZpbHRlciA9IDEwMDg7XG52YXIgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyID0gMTAwODtcbnZhciBVbnNpZ25lZEJ5dGVUeXBlID0gMTAwOTtcbnZhciBCeXRlVHlwZSA9IDEwMTA7XG52YXIgU2hvcnRUeXBlID0gMTAxMTtcbnZhciBVbnNpZ25lZFNob3J0VHlwZSA9IDEwMTI7XG52YXIgSW50VHlwZSA9IDEwMTM7XG52YXIgVW5zaWduZWRJbnRUeXBlID0gMTAxNDtcbnZhciBGbG9hdFR5cGUgPSAxMDE1O1xudmFyIEhhbGZGbG9hdFR5cGUgPSAxMDE2O1xudmFyIFVuc2lnbmVkU2hvcnQ0NDQ0VHlwZSA9IDEwMTc7XG52YXIgVW5zaWduZWRTaG9ydDU1NTFUeXBlID0gMTAxODtcbnZhciBVbnNpZ25lZFNob3J0NTY1VHlwZSA9IDEwMTk7XG52YXIgVW5zaWduZWRJbnQyNDhUeXBlID0gMTAyMDtcbnZhciBBbHBoYUZvcm1hdCA9IDEwMjE7XG52YXIgUkdCRm9ybWF0ID0gMTAyMjtcbnZhciBSR0JBRm9ybWF0ID0gMTAyMztcbnZhciBMdW1pbmFuY2VGb3JtYXQgPSAxMDI0O1xudmFyIEx1bWluYW5jZUFscGhhRm9ybWF0ID0gMTAyNTtcbnZhciBSR0JFRm9ybWF0ID0gUkdCQUZvcm1hdDtcbnZhciBEZXB0aEZvcm1hdCA9IDEwMjY7XG52YXIgRGVwdGhTdGVuY2lsRm9ybWF0ID0gMTAyNztcbnZhciBSZWRGb3JtYXQgPSAxMDI4O1xudmFyIFJlZEludGVnZXJGb3JtYXQgPSAxMDI5O1xudmFyIFJHRm9ybWF0ID0gMTAzMDtcbnZhciBSR0ludGVnZXJGb3JtYXQgPSAxMDMxO1xudmFyIFJHQkludGVnZXJGb3JtYXQgPSAxMDMyO1xudmFyIFJHQkFJbnRlZ2VyRm9ybWF0ID0gMTAzMztcblxudmFyIFJHQl9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3NzY7XG52YXIgUkdCQV9TM1RDX0RYVDFfRm9ybWF0ID0gMzM3Nzc7XG52YXIgUkdCQV9TM1RDX0RYVDNfRm9ybWF0ID0gMzM3Nzg7XG52YXIgUkdCQV9TM1RDX0RYVDVfRm9ybWF0ID0gMzM3Nzk7XG52YXIgUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgPSAzNTg0MDtcbnZhciBSR0JfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQxO1xudmFyIFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCA9IDM1ODQyO1xudmFyIFJHQkFfUFZSVENfMkJQUFYxX0Zvcm1hdCA9IDM1ODQzO1xudmFyIFJHQl9FVEMxX0Zvcm1hdCA9IDM2MTk2O1xudmFyIFJHQl9FVEMyX0Zvcm1hdCA9IDM3NDkyO1xudmFyIFJHQkFfRVRDMl9FQUNfRm9ybWF0ID0gMzc0OTY7XG52YXIgUkdCQV9BU1RDXzR4NF9Gb3JtYXQgPSAzNzgwODtcbnZhciBSR0JBX0FTVENfNXg0X0Zvcm1hdCA9IDM3ODA5O1xudmFyIFJHQkFfQVNUQ181eDVfRm9ybWF0ID0gMzc4MTA7XG52YXIgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQgPSAzNzgxMTtcbnZhciBSR0JBX0FTVENfNng2X0Zvcm1hdCA9IDM3ODEyO1xudmFyIFJHQkFfQVNUQ184eDVfRm9ybWF0ID0gMzc4MTM7XG52YXIgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgPSAzNzgxNDtcbnZhciBSR0JBX0FTVENfOHg4X0Zvcm1hdCA9IDM3ODE1O1xudmFyIFJHQkFfQVNUQ18xMHg1X0Zvcm1hdCA9IDM3ODE2O1xudmFyIFJHQkFfQVNUQ18xMHg2X0Zvcm1hdCA9IDM3ODE3O1xudmFyIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODE4O1xudmFyIFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgPSAzNzgxOTtcbnZhciBSR0JBX0FTVENfMTJ4MTBfRm9ybWF0ID0gMzc4MjA7XG52YXIgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODIxO1xudmFyIFJHQkFfQlBUQ19Gb3JtYXQgPSAzNjQ5MjtcbnZhciBTUkdCOF9BTFBIQThfQVNUQ180eDRfRm9ybWF0ID0gMzc4NDA7XG52YXIgU1JHQjhfQUxQSEE4X0FTVENfNXg0X0Zvcm1hdCA9IDM3ODQxO1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzV4NV9Gb3JtYXQgPSAzNzg0MjtcbnZhciBTUkdCOF9BTFBIQThfQVNUQ182eDVfRm9ybWF0ID0gMzc4NDM7XG52YXIgU1JHQjhfQUxQSEE4X0FTVENfNng2X0Zvcm1hdCA9IDM3ODQ0O1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzh4NV9Gb3JtYXQgPSAzNzg0NTtcbnZhciBTUkdCOF9BTFBIQThfQVNUQ184eDZfRm9ybWF0ID0gMzc4NDY7XG52YXIgU1JHQjhfQUxQSEE4X0FTVENfOHg4X0Zvcm1hdCA9IDM3ODQ3O1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzEweDVfRm9ybWF0ID0gMzc4NDg7XG52YXIgU1JHQjhfQUxQSEE4X0FTVENfMTB4Nl9Gb3JtYXQgPSAzNzg0OTtcbnZhciBTUkdCOF9BTFBIQThfQVNUQ18xMHg4X0Zvcm1hdCA9IDM3ODUwO1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzEweDEwX0Zvcm1hdCA9IDM3ODUxO1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzEyeDEwX0Zvcm1hdCA9IDM3ODUyO1xudmFyIFNSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0Zvcm1hdCA9IDM3ODUzO1xudmFyIExvb3BPbmNlID0gMjIwMDtcbnZhciBMb29wUmVwZWF0ID0gMjIwMTtcbnZhciBMb29wUGluZ1BvbmcgPSAyMjAyO1xudmFyIEludGVycG9sYXRlRGlzY3JldGUgPSAyMzAwO1xudmFyIEludGVycG9sYXRlTGluZWFyID0gMjMwMTtcbnZhciBJbnRlcnBvbGF0ZVNtb290aCA9IDIzMDI7XG52YXIgWmVyb0N1cnZhdHVyZUVuZGluZyA9IDI0MDA7XG52YXIgWmVyb1Nsb3BlRW5kaW5nID0gMjQwMTtcbnZhciBXcmFwQXJvdW5kRW5kaW5nID0gMjQwMjtcbnZhciBUcmlhbmdsZXNEcmF3TW9kZSA9IDA7XG52YXIgVHJpYW5nbGVTdHJpcERyYXdNb2RlID0gMTtcbnZhciBUcmlhbmdsZUZhbkRyYXdNb2RlID0gMjtcbnZhciBMaW5lYXJFbmNvZGluZyA9IDMwMDA7XG52YXIgc1JHQkVuY29kaW5nID0gMzAwMTtcbnZhciBHYW1tYUVuY29kaW5nID0gMzAwNztcbnZhciBSR0JFRW5jb2RpbmcgPSAzMDAyO1xudmFyIExvZ0x1dkVuY29kaW5nID0gMzAwMztcbnZhciBSR0JNN0VuY29kaW5nID0gMzAwNDtcbnZhciBSR0JNMTZFbmNvZGluZyA9IDMwMDU7XG52YXIgUkdCREVuY29kaW5nID0gMzAwNjtcbnZhciBCYXNpY0RlcHRoUGFja2luZyA9IDMyMDA7XG52YXIgUkdCQURlcHRoUGFja2luZyA9IDMyMDE7XG52YXIgVGFuZ2VudFNwYWNlTm9ybWFsTWFwID0gMDtcbnZhciBPYmplY3RTcGFjZU5vcm1hbE1hcCA9IDE7XG5cbnZhciBaZXJvU3RlbmNpbE9wID0gMDtcbnZhciBLZWVwU3RlbmNpbE9wID0gNzY4MDtcbnZhciBSZXBsYWNlU3RlbmNpbE9wID0gNzY4MTtcbnZhciBJbmNyZW1lbnRTdGVuY2lsT3AgPSA3NjgyO1xudmFyIERlY3JlbWVudFN0ZW5jaWxPcCA9IDc2ODM7XG52YXIgSW5jcmVtZW50V3JhcFN0ZW5jaWxPcCA9IDM0MDU1O1xudmFyIERlY3JlbWVudFdyYXBTdGVuY2lsT3AgPSAzNDA1NjtcbnZhciBJbnZlcnRTdGVuY2lsT3AgPSA1Mzg2O1xuXG52YXIgTmV2ZXJTdGVuY2lsRnVuYyA9IDUxMjtcbnZhciBMZXNzU3RlbmNpbEZ1bmMgPSA1MTM7XG52YXIgRXF1YWxTdGVuY2lsRnVuYyA9IDUxNDtcbnZhciBMZXNzRXF1YWxTdGVuY2lsRnVuYyA9IDUxNTtcbnZhciBHcmVhdGVyU3RlbmNpbEZ1bmMgPSA1MTY7XG52YXIgTm90RXF1YWxTdGVuY2lsRnVuYyA9IDUxNztcbnZhciBHcmVhdGVyRXF1YWxTdGVuY2lsRnVuYyA9IDUxODtcbnZhciBBbHdheXNTdGVuY2lsRnVuYyA9IDUxOTtcblxudmFyIFN0YXRpY0RyYXdVc2FnZSA9IDM1MDQ0O1xudmFyIER5bmFtaWNEcmF3VXNhZ2UgPSAzNTA0ODtcbnZhciBTdHJlYW1EcmF3VXNhZ2UgPSAzNTA0MDtcbnZhciBTdGF0aWNSZWFkVXNhZ2UgPSAzNTA0NTtcbnZhciBEeW5hbWljUmVhZFVzYWdlID0gMzUwNDk7XG52YXIgU3RyZWFtUmVhZFVzYWdlID0gMzUwNDE7XG52YXIgU3RhdGljQ29weVVzYWdlID0gMzUwNDY7XG52YXIgRHluYW1pY0NvcHlVc2FnZSA9IDM1MDUwO1xudmFyIFN0cmVhbUNvcHlVc2FnZSA9IDM1MDQyO1xuXG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvZXZlbnRkaXNwYXRjaGVyLmpzL1xuICovXG5cbmZ1bmN0aW9uIEV2ZW50RGlzcGF0Y2hlcigpIHt9XG5cbk9iamVjdC5hc3NpZ24oIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUsIHtcblxuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiAoIHR5cGUsIGxpc3RlbmVyICkge1xuXG5cdFx0aWYgKCB0aGlzLl9saXN0ZW5lcnMgPT09IHVuZGVmaW5lZCApIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdGVuZXJzWyB0eXBlIF0gPSBbXTtcblxuXHRcdH1cblxuXHRcdGlmICggbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSA9PT0gLSAxICkge1xuXG5cdFx0XHRsaXN0ZW5lcnNbIHR5cGUgXS5wdXNoKCBsaXN0ZW5lciApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0aGFzRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm4gZmFsc2U7XG5cblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXG5cdFx0cmV0dXJuIGxpc3RlbmVyc1sgdHlwZSBdICE9PSB1bmRlZmluZWQgJiYgbGlzdGVuZXJzWyB0eXBlIF0uaW5kZXhPZiggbGlzdGVuZXIgKSAhPT0gLSAxO1xuXG5cdH0sXG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKCB0eXBlLCBsaXN0ZW5lciApIHtcblxuXHRcdGlmICggdGhpcy5fbGlzdGVuZXJzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHR2YXIgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzO1xuXHRcdHZhciBsaXN0ZW5lckFycmF5ID0gbGlzdGVuZXJzWyB0eXBlIF07XG5cblx0XHRpZiAoIGxpc3RlbmVyQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGluZGV4ID0gbGlzdGVuZXJBcnJheS5pbmRleE9mKCBsaXN0ZW5lciApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdFx0bGlzdGVuZXJBcnJheS5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRpZiAoIHRoaXMuX2xpc3RlbmVycyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0dmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycztcblx0XHR2YXIgbGlzdGVuZXJBcnJheSA9IGxpc3RlbmVyc1sgZXZlbnQudHlwZSBdO1xuXG5cdFx0aWYgKCBsaXN0ZW5lckFycmF5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGV2ZW50LnRhcmdldCA9IHRoaXM7XG5cblx0XHRcdC8vIE1ha2UgYSBjb3B5LCBpbiBjYXNlIGxpc3RlbmVycyBhcmUgcmVtb3ZlZCB3aGlsZSBpdGVyYXRpbmcuXG5cdFx0XHR2YXIgYXJyYXkgPSBsaXN0ZW5lckFycmF5LnNsaWNlKCAwICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXlbIGkgXS5jYWxsKCB0aGlzLCBldmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgdGhlendhcFxuICovXG5cbnZhciBfbHV0ID0gW107XG5cbmZvciAoIHZhciBpID0gMDsgaSA8IDI1NjsgaSArKyApIHtcblxuXHRfbHV0WyBpIF0gPSAoIGkgPCAxNiA/ICcwJyA6ICcnICkgKyAoIGkgKS50b1N0cmluZyggMTYgKTtcblxufVxuXG52YXIgTWF0aFV0aWxzID0ge1xuXG5cdERFRzJSQUQ6IE1hdGguUEkgLyAxODAsXG5cdFJBRDJERUc6IDE4MCAvIE1hdGguUEksXG5cblx0Z2VuZXJhdGVVVUlEOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHQvMjE5NjMxMzYjMjE5NjMxMzZcblxuXHRcdHZhciBkMCA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0XHR2YXIgZDEgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmZmZiB8IDA7XG5cdFx0dmFyIGQyID0gTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmZmYgfCAwO1xuXHRcdHZhciBkMyA9IE1hdGgucmFuZG9tKCkgKiAweGZmZmZmZmZmIHwgMDtcblx0XHR2YXIgdXVpZCA9IF9sdXRbIGQwICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gOCAmIDB4ZmYgXSArIF9sdXRbIGQwID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDAgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDEgJiAweGZmIF0gKyBfbHV0WyBkMSA+PiA4ICYgMHhmZiBdICsgJy0nICsgX2x1dFsgZDEgPj4gMTYgJiAweDBmIHwgMHg0MCBdICsgX2x1dFsgZDEgPj4gMjQgJiAweGZmIF0gKyAnLScgK1xuXHRcdFx0X2x1dFsgZDIgJiAweDNmIHwgMHg4MCBdICsgX2x1dFsgZDIgPj4gOCAmIDB4ZmYgXSArICctJyArIF9sdXRbIGQyID4+IDE2ICYgMHhmZiBdICsgX2x1dFsgZDIgPj4gMjQgJiAweGZmIF0gK1xuXHRcdFx0X2x1dFsgZDMgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiA4ICYgMHhmZiBdICsgX2x1dFsgZDMgPj4gMTYgJiAweGZmIF0gKyBfbHV0WyBkMyA+PiAyNCAmIDB4ZmYgXTtcblxuXHRcdC8vIC50b1VwcGVyQ2FzZSgpIGhlcmUgZmxhdHRlbnMgY29uY2F0ZW5hdGVkIHN0cmluZ3MgdG8gc2F2ZSBoZWFwIG1lbW9yeSBzcGFjZS5cblx0XHRyZXR1cm4gdXVpZC50b1VwcGVyQ2FzZSgpO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggdmFsdWUsIG1pbiwgbWF4ICkge1xuXG5cdFx0cmV0dXJuIE1hdGgubWF4KCBtaW4sIE1hdGgubWluKCBtYXgsIHZhbHVlICkgKTtcblxuXHR9LFxuXG5cdC8vIGNvbXB1dGUgZXVjbGlkaWFuIG1vZHVsbyBvZiBtICUgblxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb2R1bG9fb3BlcmF0aW9uXG5cblx0ZXVjbGlkZWFuTW9kdWxvOiBmdW5jdGlvbiAoIG4sIG0gKSB7XG5cblx0XHRyZXR1cm4gKCAoIG4gJSBtICkgKyBtICkgJSBtO1xuXG5cdH0sXG5cblx0Ly8gTGluZWFyIG1hcHBpbmcgZnJvbSByYW5nZSA8YTEsIGEyPiB0byByYW5nZSA8YjEsIGIyPlxuXG5cdG1hcExpbmVhcjogZnVuY3Rpb24gKCB4LCBhMSwgYTIsIGIxLCBiMiApIHtcblxuXHRcdHJldHVybiBiMSArICggeCAtIGExICkgKiAoIGIyIC0gYjEgKSAvICggYTIgLSBhMSApO1xuXG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGluZWFyX2ludGVycG9sYXRpb25cblxuXHRsZXJwOiBmdW5jdGlvbiAoIHgsIHksIHQgKSB7XG5cblx0XHRyZXR1cm4gKCAxIC0gdCApICogeCArIHQgKiB5O1xuXG5cdH0sXG5cblx0Ly8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbW9vdGhzdGVwXG5cblx0c21vb3Roc3RlcDogZnVuY3Rpb24gKCB4LCBtaW4sIG1heCApIHtcblxuXHRcdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0XHRpZiAoIHggPj0gbWF4ICkgcmV0dXJuIDE7XG5cblx0XHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdFx0cmV0dXJuIHggKiB4ICogKCAzIC0gMiAqIHggKTtcblxuXHR9LFxuXG5cdHNtb290aGVyc3RlcDogZnVuY3Rpb24gKCB4LCBtaW4sIG1heCApIHtcblxuXHRcdGlmICggeCA8PSBtaW4gKSByZXR1cm4gMDtcblx0XHRpZiAoIHggPj0gbWF4ICkgcmV0dXJuIDE7XG5cblx0XHR4ID0gKCB4IC0gbWluICkgLyAoIG1heCAtIG1pbiApO1xuXG5cdFx0cmV0dXJuIHggKiB4ICogeCAqICggeCAqICggeCAqIDYgLSAxNSApICsgMTAgKTtcblxuXHR9LFxuXG5cdC8vIFJhbmRvbSBpbnRlZ2VyIGZyb20gPGxvdywgaGlnaD4gaW50ZXJ2YWxcblxuXHRyYW5kSW50OiBmdW5jdGlvbiAoIGxvdywgaGlnaCApIHtcblxuXHRcdHJldHVybiBsb3cgKyBNYXRoLmZsb29yKCBNYXRoLnJhbmRvbSgpICogKCBoaWdoIC0gbG93ICsgMSApICk7XG5cblx0fSxcblxuXHQvLyBSYW5kb20gZmxvYXQgZnJvbSA8bG93LCBoaWdoPiBpbnRlcnZhbFxuXG5cdHJhbmRGbG9hdDogZnVuY3Rpb24gKCBsb3csIGhpZ2ggKSB7XG5cblx0XHRyZXR1cm4gbG93ICsgTWF0aC5yYW5kb20oKSAqICggaGlnaCAtIGxvdyApO1xuXG5cdH0sXG5cblx0Ly8gUmFuZG9tIGZsb2F0IGZyb20gPC1yYW5nZS8yLCByYW5nZS8yPiBpbnRlcnZhbFxuXG5cdHJhbmRGbG9hdFNwcmVhZDogZnVuY3Rpb24gKCByYW5nZSApIHtcblxuXHRcdHJldHVybiByYW5nZSAqICggMC41IC0gTWF0aC5yYW5kb20oKSApO1xuXG5cdH0sXG5cblx0ZGVnVG9SYWQ6IGZ1bmN0aW9uICggZGVncmVlcyApIHtcblxuXHRcdHJldHVybiBkZWdyZWVzICogTWF0aFV0aWxzLkRFRzJSQUQ7XG5cblx0fSxcblxuXHRyYWRUb0RlZzogZnVuY3Rpb24gKCByYWRpYW5zICkge1xuXG5cdFx0cmV0dXJuIHJhZGlhbnMgKiBNYXRoVXRpbHMuUkFEMkRFRztcblxuXHR9LFxuXG5cdGlzUG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJldHVybiAoIHZhbHVlICYgKCB2YWx1ZSAtIDEgKSApID09PSAwICYmIHZhbHVlICE9PSAwO1xuXG5cdH0sXG5cblx0Y2VpbFBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguY2VpbCggTWF0aC5sb2coIHZhbHVlICkgLyBNYXRoLkxOMiApICk7XG5cblx0fSxcblxuXHRmbG9vclBvd2VyT2ZUd286IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5wb3coIDIsIE1hdGguZmxvb3IoIE1hdGgubG9nKCB2YWx1ZSApIC8gTWF0aC5MTjIgKSApO1xuXG5cdH0sXG5cblx0c2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcjogZnVuY3Rpb24gKCBxLCBhLCBiLCBjLCBvcmRlciApIHtcblxuXHRcdC8vIEludHJpbnNpYyBQcm9wZXIgRXVsZXIgQW5nbGVzIC0gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0V1bGVyX2FuZ2xlc1xuXG5cdFx0Ly8gcm90YXRpb25zIGFyZSBhcHBsaWVkIHRvIHRoZSBheGVzIGluIHRoZSBvcmRlciBzcGVjaWZpZWQgYnkgJ29yZGVyJ1xuXHRcdC8vIHJvdGF0aW9uIGJ5IGFuZ2xlICdhJyBpcyBhcHBsaWVkIGZpcnN0LCB0aGVuIGJ5IGFuZ2xlICdiJywgdGhlbiBieSBhbmdsZSAnYydcblx0XHQvLyBhbmdsZXMgYXJlIGluIHJhZGlhbnNcblxuXHRcdHZhciBjb3MgPSBNYXRoLmNvcztcblx0XHR2YXIgc2luID0gTWF0aC5zaW47XG5cblx0XHR2YXIgYzIgPSBjb3MoIGIgLyAyICk7XG5cdFx0dmFyIHMyID0gc2luKCBiIC8gMiApO1xuXG5cdFx0dmFyIGMxMyA9IGNvcyggKCBhICsgYyApIC8gMiApO1xuXHRcdHZhciBzMTMgPSBzaW4oICggYSArIGMgKSAvIDIgKTtcblxuXHRcdHZhciBjMV8zID0gY29zKCAoIGEgLSBjICkgLyAyICk7XG5cdFx0dmFyIHMxXzMgPSBzaW4oICggYSAtIGMgKSAvIDIgKTtcblxuXHRcdHZhciBjM18xID0gY29zKCAoIGMgLSBhICkgLyAyICk7XG5cdFx0dmFyIHMzXzEgPSBzaW4oICggYyAtIGEgKSAvIDIgKTtcblxuXHRcdGlmICggb3JkZXIgPT09ICdYWVgnICkge1xuXG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogYzFfMywgczIgKiBzMV8zLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWlknICkge1xuXG5cdFx0XHRxLnNldCggczIgKiBzMV8zLCBjMiAqIHMxMywgczIgKiBjMV8zLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFonICkge1xuXG5cdFx0XHRxLnNldCggczIgKiBjMV8zLCBzMiAqIHMxXzMsIGMyICogczEzLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlgnICkge1xuXG5cdFx0XHRxLnNldCggYzIgKiBzMTMsIHMyICogczNfMSwgczIgKiBjM18xLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWFknICkge1xuXG5cdFx0XHRxLnNldCggczIgKiBjM18xLCBjMiAqIHMxMywgczIgKiBzM18xLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVonICkge1xuXG5cdFx0XHRxLnNldCggczIgKiBzM18xLCBzMiAqIGMzXzEsIGMyICogczEzLCBjMiAqIGMxMyApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aFV0aWxzOiAuc2V0UXVhdGVybmlvbkZyb21Qcm9wZXJFdWxlcigpIGVuY291bnRlcmVkIGFuIHVua25vd24gb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBwaGlsb2diIC8gaHR0cDovL2Jsb2cudGhlaml0Lm9yZy9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKi9cblxuZnVuY3Rpb24gVmVjdG9yMiggeCwgeSApIHtcblxuXHR0aGlzLnggPSB4IHx8IDA7XG5cdHRoaXMueSA9IHkgfHwgMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmVjdG9yMi5wcm90b3R5cGUsIHtcblxuXHRcIndpZHRoXCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy54O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy54ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRcImhlaWdodFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMueTtcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMueSA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IyLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCA9IHNjYWxhcjtcblx0XHR0aGlzLnkgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHN3aXRjaCAoIGluZGV4ICkge1xuXG5cdFx0XHRjYXNlIDA6IHJldHVybiB0aGlzLng7XG5cdFx0XHRjYXNlIDE6IHJldHVybiB0aGlzLnk7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy54LCB0aGlzLnkgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IHYueDtcblx0XHR0aGlzLnkgPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5hZGQoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5hZGRWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hZGRWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggKz0gdi54O1xuXHRcdHRoaXMueSArPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFZlY3RvcjogZnVuY3Rpb24gKCB2LCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHYueCAqIHM7XG5cdFx0dGhpcy55ICs9IHYueSAqIHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YjogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5zdWIoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5zdWJWZWN0b3JzKCBhLCBiICkgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggLT0gdi54O1xuXHRcdHRoaXMueSAtPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggKj0gdi54O1xuXHRcdHRoaXMueSAqPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGl2aWRlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggLz0gdi54O1xuXHRcdHRoaXMueSAvPSB2Lnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpdmlkZVNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseVNjYWxhciggMSAvIHNjYWxhciApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXTtcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDcgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWluOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1pbiggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1pbiggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWF4OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggdGhpcy54LCB2LnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggdGhpcy55LCB2LnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXA6IGZ1bmN0aW9uICggbWluLCBtYXggKSB7XG5cblx0XHQvLyBhc3N1bWVzIG1pbiA8IG1heCwgY29tcG9uZW50d2lzZVxuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pbi54LCBNYXRoLm1pbiggbWF4LngsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pbi55LCBNYXRoLm1pbiggbWF4LnksIHRoaXMueSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wU2NhbGFyOiBmdW5jdGlvbiAoIG1pblZhbCwgbWF4VmFsICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGgucm91bmQoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9IE1hdGgucm91bmQoIHRoaXMueSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZFRvWmVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gKCB0aGlzLnggPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueCApIDogTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gKCB0aGlzLnkgPCAwICkgPyBNYXRoLmNlaWwoIHRoaXMueSApIDogTWF0aC5mbG9vciggdGhpcy55ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5lZ2F0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gLSB0aGlzLng7XG5cdFx0dGhpcy55ID0gLSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRvdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHYueCArIHRoaXMueSAqIHYueTtcblxuXHR9LFxuXG5cdGNyb3NzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi55IC0gdGhpcy55ICogdi54O1xuXG5cdH0sXG5cblx0bGVuZ3RoU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnk7XG5cblx0fSxcblxuXHRsZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLnNxcnQoIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuTGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHRoaXMueCApICsgTWF0aC5hYnMoIHRoaXMueSApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5kaXZpZGVTY2FsYXIoIHRoaXMubGVuZ3RoKCkgfHwgMSApO1xuXG5cdH0sXG5cblx0YW5nbGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGNvbXB1dGVzIHRoZSBhbmdsZSBpbiByYWRpYW5zIHdpdGggcmVzcGVjdCB0byB0aGUgcG9zaXRpdmUgeC1heGlzXG5cblx0XHR2YXIgYW5nbGUgPSBNYXRoLmF0YW4yKCAtIHRoaXMueSwgLSB0aGlzLnggKSArIE1hdGguUEk7XG5cblx0XHRyZXR1cm4gYW5nbGU7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlVG9TcXVhcmVkKCB2ICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9TcXVhcmVkOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgZHggPSB0aGlzLnggLSB2LngsIGR5ID0gdGhpcy55IC0gdi55O1xuXHRcdHJldHVybiBkeCAqIGR4ICsgZHkgKiBkeTtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkRpc3RhbmNlVG86IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54IC0gdi54ICkgKyBNYXRoLmFicyggdGhpcy55IC0gdi55ICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycFZlY3RvcnM6IGZ1bmN0aW9uICggdjEsIHYyLCBhbHBoYSApIHtcblxuXHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYyLCB2MSApLm11bHRpcGx5U2NhbGFyKCBhbHBoYSApLmFkZCggdjEgKTtcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuICggKCB2LnggPT09IHRoaXMueCApICYmICggdi55ID09PSB0aGlzLnkgKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGhpcy54O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLnk7XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fSxcblxuXHRmcm9tQnVmZmVyQXR0cmlidXRlOiBmdW5jdGlvbiAoIGF0dHJpYnV0ZSwgaW5kZXgsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IG9mZnNldCBoYXMgYmVlbiByZW1vdmVkIGZyb20gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnggPSBhdHRyaWJ1dGUuZ2V0WCggaW5kZXggKTtcblx0XHR0aGlzLnkgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlQXJvdW5kOiBmdW5jdGlvbiAoIGNlbnRlciwgYW5nbGUgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApLCBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cblx0XHR2YXIgeCA9IHRoaXMueCAtIGNlbnRlci54O1xuXHRcdHZhciB5ID0gdGhpcy55IC0gY2VudGVyLnk7XG5cblx0XHR0aGlzLnggPSB4ICogYyAtIHkgKiBzICsgY2VudGVyLng7XG5cdFx0dGhpcy55ID0geCAqIHMgKyB5ICogYyArIGNlbnRlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIE1hdHJpeDMoKSB7XG5cblx0dGhpcy5lbGVtZW50cyA9IFtcblxuXHRcdDEsIDAsIDAsXG5cdFx0MCwgMSwgMCxcblx0XHQwLCAwLCAxXG5cblx0XTtcblxuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAwICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyApO1xuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBNYXRyaXgzLnByb3RvdHlwZSwge1xuXG5cdGlzTWF0cml4MzogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggbjExLCBuMTIsIG4xMywgbjIxLCBuMjIsIG4yMywgbjMxLCBuMzIsIG4zMyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdID0gbjExOyB0ZVsgMSBdID0gbjIxOyB0ZVsgMiBdID0gbjMxO1xuXHRcdHRlWyAzIF0gPSBuMTI7IHRlWyA0IF0gPSBuMjI7IHRlWyA1IF0gPSBuMzI7XG5cdFx0dGVbIDYgXSA9IG4xMzsgdGVbIDcgXSA9IG4yMzsgdGVbIDggXSA9IG4zMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aWRlbnRpdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLFxuXHRcdFx0MCwgMSwgMCxcblx0XHRcdDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5mcm9tQXJyYXkoIHRoaXMuZWxlbWVudHMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBtZVsgMCBdOyB0ZVsgMSBdID0gbWVbIDEgXTsgdGVbIDIgXSA9IG1lWyAyIF07XG5cdFx0dGVbIDMgXSA9IG1lWyAzIF07IHRlWyA0IF0gPSBtZVsgNCBdOyB0ZVsgNSBdID0gbWVbIDUgXTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07IHRlWyA4IF0gPSBtZVsgOCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHRyYWN0QmFzaXM6IGZ1bmN0aW9uICggeEF4aXMsIHlBeGlzLCB6QXhpcyApIHtcblxuXHRcdHhBeGlzLnNldEZyb21NYXRyaXgzQ29sdW1uKCB0aGlzLCAwICk7XG5cdFx0eUF4aXMuc2V0RnJvbU1hdHJpeDNDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4M0NvbHVtbiggdGhpcywgMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4NDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHRtZVsgMCBdLCBtZVsgNCBdLCBtZVsgOCBdLFxuXHRcdFx0bWVbIDEgXSwgbWVbIDUgXSwgbWVbIDkgXSxcblx0XHRcdG1lWyAyIF0sIG1lWyA2IF0sIG1lWyAxMCBdXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlNYXRyaWNlcyggdGhpcywgbSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5TWF0cmljZXM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHZhciBhZSA9IGEuZWxlbWVudHM7XG5cdFx0dmFyIGJlID0gYi5lbGVtZW50cztcblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIGExMSA9IGFlWyAwIF0sIGExMiA9IGFlWyAzIF0sIGExMyA9IGFlWyA2IF07XG5cdFx0dmFyIGEyMSA9IGFlWyAxIF0sIGEyMiA9IGFlWyA0IF0sIGEyMyA9IGFlWyA3IF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA1IF0sIGEzMyA9IGFlWyA4IF07XG5cblx0XHR2YXIgYjExID0gYmVbIDAgXSwgYjEyID0gYmVbIDMgXSwgYjEzID0gYmVbIDYgXTtcblx0XHR2YXIgYjIxID0gYmVbIDEgXSwgYjIyID0gYmVbIDQgXSwgYjIzID0gYmVbIDcgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDUgXSwgYjMzID0gYmVbIDggXTtcblxuXHRcdHRlWyAwIF0gPSBhMTEgKiBiMTEgKyBhMTIgKiBiMjEgKyBhMTMgKiBiMzE7XG5cdFx0dGVbIDMgXSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMjtcblx0XHR0ZVsgNiBdID0gYTExICogYjEzICsgYTEyICogYjIzICsgYTEzICogYjMzO1xuXG5cdFx0dGVbIDEgXSA9IGEyMSAqIGIxMSArIGEyMiAqIGIyMSArIGEyMyAqIGIzMTtcblx0XHR0ZVsgNCBdID0gYTIxICogYjEyICsgYTIyICogYjIyICsgYTIzICogYjMyO1xuXHRcdHRlWyA3IF0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzM7XG5cblx0XHR0ZVsgMiBdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxO1xuXHRcdHRlWyA1IF0gPSBhMzEgKiBiMTIgKyBhMzIgKiBiMjIgKyBhMzMgKiBiMzI7XG5cdFx0dGVbIDggXSA9IGEzMSAqIGIxMyArIGEzMiAqIGIyMyArIGEzMyAqIGIzMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICo9IHM7IHRlWyAzIF0gKj0gczsgdGVbIDYgXSAqPSBzO1xuXHRcdHRlWyAxIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgNyBdICo9IHM7XG5cdFx0dGVbIDIgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA4IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgYSA9IHRlWyAwIF0sIGIgPSB0ZVsgMSBdLCBjID0gdGVbIDIgXSxcblx0XHRcdGQgPSB0ZVsgMyBdLCBlID0gdGVbIDQgXSwgZiA9IHRlWyA1IF0sXG5cdFx0XHRnID0gdGVbIDYgXSwgaCA9IHRlWyA3IF0sIGkgPSB0ZVsgOCBdO1xuXG5cdFx0cmV0dXJuIGEgKiBlICogaSAtIGEgKiBmICogaCAtIGIgKiBkICogaSArIGIgKiBmICogZyArIGMgKiBkICogaCAtIGMgKiBlICogZztcblxuXHR9LFxuXG5cdGdldEludmVyc2U6IGZ1bmN0aW9uICggbWF0cml4LCB0aHJvd09uRGVnZW5lcmF0ZSApIHtcblxuXHRcdGlmICggdGhyb3dPbkRlZ2VuZXJhdGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdHJpeDM6IC5nZXRJbnZlcnNlKCkgY2FuIG5vIGxvbmdlciBiZSBjb25maWd1cmVkIHRvIHRocm93IG9uIGRlZ2VuZXJhdGUuXCIgKTtcblxuXHRcdH1cblxuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cyxcblx0XHRcdHRlID0gdGhpcy5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSxcblx0XHRcdG4xMiA9IG1lWyAzIF0sIG4yMiA9IG1lWyA0IF0sIG4zMiA9IG1lWyA1IF0sXG5cdFx0XHRuMTMgPSBtZVsgNiBdLCBuMjMgPSBtZVsgNyBdLCBuMzMgPSBtZVsgOCBdLFxuXG5cdFx0XHR0MTEgPSBuMzMgKiBuMjIgLSBuMzIgKiBuMjMsXG5cdFx0XHR0MTIgPSBuMzIgKiBuMTMgLSBuMzMgKiBuMTIsXG5cdFx0XHR0MTMgPSBuMjMgKiBuMTIgLSBuMjIgKiBuMTMsXG5cblx0XHRcdGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMztcblxuXHRcdGlmICggZGV0ID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwICk7XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjMxICogbjIzIC0gbjMzICogbjIxICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjMyICogbjIxIC0gbjMxICogbjIyICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgMyBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA0IF0gPSAoIG4zMyAqIG4xMSAtIG4zMSAqIG4xMyApICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4zMSAqIG4xMiAtIG4zMiAqIG4xMSApICogZGV0SW52O1xuXG5cdFx0dGVbIDYgXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgNyBdID0gKCBuMjEgKiBuMTMgLSBuMjMgKiBuMTEgKSAqIGRldEludjtcblx0XHR0ZVsgOCBdID0gKCBuMjIgKiBuMTEgLSBuMjEgKiBuMTIgKSAqIGRldEludjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdG1wLCBtID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRtcCA9IG1bIDEgXTsgbVsgMSBdID0gbVsgMyBdOyBtWyAzIF0gPSB0bXA7XG5cdFx0dG1wID0gbVsgMiBdOyBtWyAyIF0gPSBtWyA2IF07IG1bIDYgXSA9IHRtcDtcblx0XHR0bXAgPSBtWyA1IF07IG1bIDUgXSA9IG1bIDcgXTsgbVsgNyBdID0gdG1wO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXROb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4NCApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXg0KCBtYXRyaXg0ICkuZ2V0SW52ZXJzZSggdGhpcyApLnRyYW5zcG9zZSgpO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlSW50b0FycmF5OiBmdW5jdGlvbiAoIHIgKSB7XG5cblx0XHR2YXIgbSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHRyWyAwIF0gPSBtWyAwIF07XG5cdFx0clsgMSBdID0gbVsgMyBdO1xuXHRcdHJbIDIgXSA9IG1bIDYgXTtcblx0XHRyWyAzIF0gPSBtWyAxIF07XG5cdFx0clsgNCBdID0gbVsgNCBdO1xuXHRcdHJbIDUgXSA9IG1bIDcgXTtcblx0XHRyWyA2IF0gPSBtWyAyIF07XG5cdFx0clsgNyBdID0gbVsgNSBdO1xuXHRcdHJbIDggXSA9IG1bIDggXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0VXZUcmFuc2Zvcm06IGZ1bmN0aW9uICggdHgsIHR5LCBzeCwgc3ksIHJvdGF0aW9uLCBjeCwgY3kgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCByb3RhdGlvbiApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIHJvdGF0aW9uICk7XG5cblx0XHR0aGlzLnNldChcblx0XHRcdHN4ICogYywgc3ggKiBzLCAtIHN4ICogKCBjICogY3ggKyBzICogY3kgKSArIGN4ICsgdHgsXG5cdFx0XHQtIHN5ICogcywgc3kgKiBjLCAtIHN5ICogKCAtIHMgKiBjeCArIGMgKiBjeSApICsgY3kgKyB0eSxcblx0XHRcdDAsIDAsIDFcblx0XHQpO1xuXG5cdH0sXG5cblx0c2NhbGU6IGZ1bmN0aW9uICggc3gsIHN5ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gc3g7IHRlWyAzIF0gKj0gc3g7IHRlWyA2IF0gKj0gc3g7XG5cdFx0dGVbIDEgXSAqPSBzeTsgdGVbIDQgXSAqPSBzeTsgdGVbIDcgXSAqPSBzeTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKTtcblx0XHR2YXIgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSB0ZVsgMCBdLCBhMTIgPSB0ZVsgMyBdLCBhMTMgPSB0ZVsgNiBdO1xuXHRcdHZhciBhMjEgPSB0ZVsgMSBdLCBhMjIgPSB0ZVsgNCBdLCBhMjMgPSB0ZVsgNyBdO1xuXG5cdFx0dGVbIDAgXSA9IGMgKiBhMTEgKyBzICogYTIxO1xuXHRcdHRlWyAzIF0gPSBjICogYTEyICsgcyAqIGEyMjtcblx0XHR0ZVsgNiBdID0gYyAqIGExMyArIHMgKiBhMjM7XG5cblx0XHR0ZVsgMSBdID0gLSBzICogYTExICsgYyAqIGEyMTtcblx0XHR0ZVsgNCBdID0gLSBzICogYTEyICsgYyAqIGEyMjtcblx0XHR0ZVsgNyBdID0gLSBzICogYTEzICsgYyAqIGEyMztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIHR4LCB0eSApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR0ZVsgMCBdICs9IHR4ICogdGVbIDIgXTsgdGVbIDMgXSArPSB0eCAqIHRlWyA1IF07IHRlWyA2IF0gKz0gdHggKiB0ZVsgOCBdO1xuXHRcdHRlWyAxIF0gKz0gdHkgKiB0ZVsgMiBdOyB0ZVsgNCBdICs9IHR5ICogdGVbIDUgXTsgdGVbIDcgXSArPSB0eSAqIHRlWyA4IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciBtZSA9IG1hdHJpeC5lbGVtZW50cztcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZWxlbWVudHNbIGkgXSA9IGFycmF5WyBpICsgb2Zmc2V0IF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0YXJyYXlbIG9mZnNldCBdID0gdGVbIDAgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGVbIDEgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGVbIDIgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0ZVsgMyBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA0IF0gPSB0ZVsgNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA1IF0gPSB0ZVsgNSBdO1xuXG5cdFx0YXJyYXlbIG9mZnNldCArIDYgXSA9IHRlWyA2IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDcgXSA9IHRlWyA3IF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDggXSA9IHRlWyA4IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIHN6aW1layAvIGh0dHBzOi8vZ2l0aHViLmNvbS9zemltZWsvXG4gKi9cblxudmFyIF9jYW52YXM7XG5cbnZhciBJbWFnZVV0aWxzID0ge1xuXG5cdGdldERhdGFVUkw6IGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHR2YXIgY2FudmFzO1xuXG5cdFx0aWYgKCB0eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQgPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRcdHJldHVybiBpbWFnZS5zcmM7XG5cblx0XHR9IGVsc2UgaWYgKCBpbWFnZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50ICkge1xuXG5cdFx0XHRjYW52YXMgPSBpbWFnZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggX2NhbnZhcyA9PT0gdW5kZWZpbmVkICkgX2NhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnY2FudmFzJyApO1xuXG5cdFx0XHRfY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRfY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSBfY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblxuXHRcdFx0aWYgKCBpbWFnZSBpbnN0YW5jZW9mIEltYWdlRGF0YSApIHtcblxuXHRcdFx0XHRjb250ZXh0LnB1dEltYWdlRGF0YSggaW1hZ2UsIDAsIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb250ZXh0LmRyYXdJbWFnZSggaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYW52YXMgPSBfY2FudmFzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjYW52YXMud2lkdGggPiAyMDQ4IHx8IGNhbnZhcy5oZWlnaHQgPiAyMDQ4ICkge1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzLnRvRGF0YVVSTCggJ2ltYWdlL2pwZWcnLCAwLjYgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBjYW52YXMudG9EYXRhVVJMKCAnaW1hZ2UvcG5nJyApO1xuXG5cdFx0fVxuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqL1xuXG52YXIgdGV4dHVyZUlkID0gMDtcblxuZnVuY3Rpb24gVGV4dHVyZSggaW1hZ2UsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCAnaWQnLCB7IHZhbHVlOiB0ZXh0dXJlSWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmltYWdlID0gaW1hZ2UgIT09IHVuZGVmaW5lZCA/IGltYWdlIDogVGV4dHVyZS5ERUZBVUxUX0lNQUdFO1xuXHR0aGlzLm1pcG1hcHMgPSBbXTtcblxuXHR0aGlzLm1hcHBpbmcgPSBtYXBwaW5nICE9PSB1bmRlZmluZWQgPyBtYXBwaW5nIDogVGV4dHVyZS5ERUZBVUxUX01BUFBJTkc7XG5cblx0dGhpcy53cmFwUyA9IHdyYXBTICE9PSB1bmRlZmluZWQgPyB3cmFwUyA6IENsYW1wVG9FZGdlV3JhcHBpbmc7XG5cdHRoaXMud3JhcFQgPSB3cmFwVCAhPT0gdW5kZWZpbmVkID8gd3JhcFQgOiBDbGFtcFRvRWRnZVdyYXBwaW5nO1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gbWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtaW5GaWx0ZXIgOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXI7XG5cblx0dGhpcy5hbmlzb3Ryb3B5ID0gYW5pc290cm9weSAhPT0gdW5kZWZpbmVkID8gYW5pc290cm9weSA6IDE7XG5cblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkFGb3JtYXQ7XG5cdHRoaXMuaW50ZXJuYWxGb3JtYXQgPSBudWxsO1xuXHR0aGlzLnR5cGUgPSB0eXBlICE9PSB1bmRlZmluZWQgPyB0eXBlIDogVW5zaWduZWRCeXRlVHlwZTtcblxuXHR0aGlzLm9mZnNldCA9IG5ldyBWZWN0b3IyKCAwLCAwICk7XG5cdHRoaXMucmVwZWF0ID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblx0dGhpcy5jZW50ZXIgPSBuZXcgVmVjdG9yMiggMCwgMCApO1xuXHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSB0cnVlO1xuXHR0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcblx0dGhpcy5mbGlwWSA9IHRydWU7XG5cdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gNDtcdC8vIHZhbGlkIHZhbHVlczogMSwgMiwgNCwgOCAoc2VlIGh0dHA6Ly93d3cua2hyb25vcy5vcmcvb3BlbmdsZXMvc2RrL2RvY3MvbWFuL3hodG1sL2dsUGl4ZWxTdG9yZWkueG1sKVxuXG5cdC8vIFZhbHVlcyBvZiBlbmNvZGluZyAhPT0gVEhSRUUuTGluZWFyRW5jb2Rpbmcgb25seSBzdXBwb3J0ZWQgb24gbWFwLCBlbnZNYXAgYW5kIGVtaXNzaXZlTWFwLlxuXHQvL1xuXHQvLyBBbHNvIGNoYW5naW5nIHRoZSBlbmNvZGluZyBhZnRlciBhbHJlYWR5IHVzZWQgYnkgYSBNYXRlcmlhbCB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IG1ha2UgdGhlIE1hdGVyaWFsXG5cdC8vIHVwZGF0ZS4gWW91IG5lZWQgdG8gZXhwbGljaXRseSBjYWxsIE1hdGVyaWFsLm5lZWRzVXBkYXRlIHRvIHRyaWdnZXIgaXQgdG8gcmVjb21waWxlLlxuXHR0aGlzLmVuY29kaW5nID0gZW5jb2RpbmcgIT09IHVuZGVmaW5lZCA/IGVuY29kaW5nIDogTGluZWFyRW5jb2Rpbmc7XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblx0dGhpcy5vblVwZGF0ZSA9IG51bGw7XG5cbn1cblxuVGV4dHVyZS5ERUZBVUxUX0lNQUdFID0gdW5kZWZpbmVkO1xuVGV4dHVyZS5ERUZBVUxUX01BUFBJTkcgPSBVVk1hcHBpbmc7XG5cblRleHR1cmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFRleHR1cmUsXG5cblx0aXNUZXh0dXJlOiB0cnVlLFxuXG5cdHVwZGF0ZU1hdHJpeDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5tYXRyaXguc2V0VXZUcmFuc2Zvcm0oIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnksIHRoaXMucmVwZWF0LngsIHRoaXMucmVwZWF0LnksIHRoaXMucm90YXRpb24sIHRoaXMuY2VudGVyLngsIHRoaXMuY2VudGVyLnkgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0dGhpcy5pbWFnZSA9IHNvdXJjZS5pbWFnZTtcblx0XHR0aGlzLm1pcG1hcHMgPSBzb3VyY2UubWlwbWFwcy5zbGljZSggMCApO1xuXG5cdFx0dGhpcy5tYXBwaW5nID0gc291cmNlLm1hcHBpbmc7XG5cblx0XHR0aGlzLndyYXBTID0gc291cmNlLndyYXBTO1xuXHRcdHRoaXMud3JhcFQgPSBzb3VyY2Uud3JhcFQ7XG5cblx0XHR0aGlzLm1hZ0ZpbHRlciA9IHNvdXJjZS5tYWdGaWx0ZXI7XG5cdFx0dGhpcy5taW5GaWx0ZXIgPSBzb3VyY2UubWluRmlsdGVyO1xuXG5cdFx0dGhpcy5hbmlzb3Ryb3B5ID0gc291cmNlLmFuaXNvdHJvcHk7XG5cblx0XHR0aGlzLmZvcm1hdCA9IHNvdXJjZS5mb3JtYXQ7XG5cdFx0dGhpcy5pbnRlcm5hbEZvcm1hdCA9IHNvdXJjZS5pbnRlcm5hbEZvcm1hdDtcblx0XHR0aGlzLnR5cGUgPSBzb3VyY2UudHlwZTtcblxuXHRcdHRoaXMub2Zmc2V0LmNvcHkoIHNvdXJjZS5vZmZzZXQgKTtcblx0XHR0aGlzLnJlcGVhdC5jb3B5KCBzb3VyY2UucmVwZWF0ICk7XG5cdFx0dGhpcy5jZW50ZXIuY29weSggc291cmNlLmNlbnRlciApO1xuXHRcdHRoaXMucm90YXRpb24gPSBzb3VyY2Uucm90YXRpb247XG5cblx0XHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBzb3VyY2UubWF0cml4QXV0b1VwZGF0ZTtcblx0XHR0aGlzLm1hdHJpeC5jb3B5KCBzb3VyY2UubWF0cml4ICk7XG5cblx0XHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IHNvdXJjZS5nZW5lcmF0ZU1pcG1hcHM7XG5cdFx0dGhpcy5wcmVtdWx0aXBseUFscGhhID0gc291cmNlLnByZW11bHRpcGx5QWxwaGE7XG5cdFx0dGhpcy5mbGlwWSA9IHNvdXJjZS5mbGlwWTtcblx0XHR0aGlzLnVucGFja0FsaWdubWVudCA9IHNvdXJjZS51bnBhY2tBbGlnbm1lbnQ7XG5cdFx0dGhpcy5lbmNvZGluZyA9IHNvdXJjZS5lbmNvZGluZztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0XHR2YXIgaXNSb290T2JqZWN0ID0gKCBtZXRhID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIG1ldGEgPT09ICdzdHJpbmcnICk7XG5cblx0XHRpZiAoICEgaXNSb290T2JqZWN0ICYmIG1ldGEudGV4dHVyZXNbIHRoaXMudXVpZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHJldHVybiBtZXRhLnRleHR1cmVzWyB0aGlzLnV1aWQgXTtcblxuXHRcdH1cblxuXHRcdHZhciBvdXRwdXQgPSB7XG5cblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ1RleHR1cmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdUZXh0dXJlLnRvSlNPTidcblx0XHRcdH0sXG5cblx0XHRcdHV1aWQ6IHRoaXMudXVpZCxcblx0XHRcdG5hbWU6IHRoaXMubmFtZSxcblxuXHRcdFx0bWFwcGluZzogdGhpcy5tYXBwaW5nLFxuXG5cdFx0XHRyZXBlYXQ6IFsgdGhpcy5yZXBlYXQueCwgdGhpcy5yZXBlYXQueSBdLFxuXHRcdFx0b2Zmc2V0OiBbIHRoaXMub2Zmc2V0LngsIHRoaXMub2Zmc2V0LnkgXSxcblx0XHRcdGNlbnRlcjogWyB0aGlzLmNlbnRlci54LCB0aGlzLmNlbnRlci55IF0sXG5cdFx0XHRyb3RhdGlvbjogdGhpcy5yb3RhdGlvbixcblxuXHRcdFx0d3JhcDogWyB0aGlzLndyYXBTLCB0aGlzLndyYXBUIF0sXG5cblx0XHRcdGZvcm1hdDogdGhpcy5mb3JtYXQsXG5cdFx0XHR0eXBlOiB0aGlzLnR5cGUsXG5cdFx0XHRlbmNvZGluZzogdGhpcy5lbmNvZGluZyxcblxuXHRcdFx0bWluRmlsdGVyOiB0aGlzLm1pbkZpbHRlcixcblx0XHRcdG1hZ0ZpbHRlcjogdGhpcy5tYWdGaWx0ZXIsXG5cdFx0XHRhbmlzb3Ryb3B5OiB0aGlzLmFuaXNvdHJvcHksXG5cblx0XHRcdGZsaXBZOiB0aGlzLmZsaXBZLFxuXG5cdFx0XHRwcmVtdWx0aXBseUFscGhhOiB0aGlzLnByZW11bHRpcGx5QWxwaGEsXG5cdFx0XHR1bnBhY2tBbGlnbm1lbnQ6IHRoaXMudW5wYWNrQWxpZ25tZW50XG5cblx0XHR9O1xuXG5cdFx0aWYgKCB0aGlzLmltYWdlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFRPRE86IE1vdmUgdG8gVEhSRUUuSW1hZ2VcblxuXHRcdFx0dmFyIGltYWdlID0gdGhpcy5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZS51dWlkID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aW1hZ2UudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTsgLy8gVUdIXG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhIGlzUm9vdE9iamVjdCAmJiBtZXRhLmltYWdlc1sgaW1hZ2UudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dmFyIHVybDtcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGltYWdlICkgKSB7XG5cblx0XHRcdFx0XHQvLyBwcm9jZXNzIGFycmF5IG9mIGltYWdlcyBlLmcuIEN1YmVUZXh0dXJlXG5cblx0XHRcdFx0XHR1cmwgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGltYWdlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHVybC5wdXNoKCBJbWFnZVV0aWxzLmdldERhdGFVUkwoIGltYWdlWyBpIF0gKSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBwcm9jZXNzIHNpbmdsZSBpbWFnZVxuXG5cdFx0XHRcdFx0dXJsID0gSW1hZ2VVdGlscy5nZXREYXRhVVJMKCBpbWFnZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtZXRhLmltYWdlc1sgaW1hZ2UudXVpZCBdID0ge1xuXHRcdFx0XHRcdHV1aWQ6IGltYWdlLnV1aWQsXG5cdFx0XHRcdFx0dXJsOiB1cmxcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvdXRwdXQuaW1hZ2UgPSBpbWFnZS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAhIGlzUm9vdE9iamVjdCApIHtcblxuXHRcdFx0bWV0YS50ZXh0dXJlc1sgdGhpcy51dWlkIF0gPSBvdXRwdXQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gb3V0cHV0O1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fSxcblxuXHR0cmFuc2Zvcm1VdjogZnVuY3Rpb24gKCB1diApIHtcblxuXHRcdGlmICggdGhpcy5tYXBwaW5nICE9PSBVVk1hcHBpbmcgKSByZXR1cm4gdXY7XG5cblx0XHR1di5hcHBseU1hdHJpeDMoIHRoaXMubWF0cml4ICk7XG5cblx0XHRpZiAoIHV2LnggPCAwIHx8IHV2LnggPiAxICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLndyYXBTICkge1xuXG5cdFx0XHRcdGNhc2UgUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIENsYW1wVG9FZGdlV3JhcHBpbmc6XG5cblx0XHRcdFx0XHR1di54ID0gdXYueCA8IDAgPyAwIDogMTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6XG5cblx0XHRcdFx0XHRpZiAoIE1hdGguYWJzKCBNYXRoLmZsb29yKCB1di54ICkgJSAyICkgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdHV2LnggPSBNYXRoLmNlaWwoIHV2LnggKSAtIHV2Lng7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR1di54ID0gdXYueCAtIE1hdGguZmxvb3IoIHV2LnggKTtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB1di55IDwgMCB8fCB1di55ID4gMSApIHtcblxuXHRcdFx0c3dpdGNoICggdGhpcy53cmFwVCApIHtcblxuXHRcdFx0XHRjYXNlIFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBDbGFtcFRvRWRnZVdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0dXYueSA9IHV2LnkgPCAwID8gMCA6IDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBNaXJyb3JlZFJlcGVhdFdyYXBwaW5nOlxuXG5cdFx0XHRcdFx0aWYgKCBNYXRoLmFicyggTWF0aC5mbG9vciggdXYueSApICUgMiApID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHR1di55ID0gTWF0aC5jZWlsKCB1di55ICkgLSB1di55O1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dXYueSA9IHV2LnkgLSBNYXRoLmZsb29yKCB1di55ICk7XG5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5mbGlwWSApIHtcblxuXHRcdFx0dXYueSA9IDEgLSB1di55O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHV2O1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIFRleHR1cmUucHJvdG90eXBlLCBcIm5lZWRzVXBkYXRlXCIsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgZWdyYWV0aGVyIC8gaHR0cDovL2VncmFldGhlci5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBWZWN0b3I0KCB4LCB5LCB6LCB3ICkge1xuXG5cdHRoaXMueCA9IHggfHwgMDtcblx0dGhpcy55ID0geSB8fCAwO1xuXHR0aGlzLnogPSB6IHx8IDA7XG5cdHRoaXMudyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVmVjdG9yNC5wcm90b3R5cGUsIHtcblxuXHRcIndpZHRoXCI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy56O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy56ID0gdmFsdWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRcImhlaWdodFwiOiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMudztcblxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdHRoaXMudyA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBWZWN0b3I0LnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yNDogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXHRcdHRoaXMudyA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFNjYWxhcjogZnVuY3Rpb24gKCBzY2FsYXIgKSB7XG5cblx0XHR0aGlzLnggPSBzY2FsYXI7XG5cdFx0dGhpcy55ID0gc2NhbGFyO1xuXHRcdHRoaXMueiA9IHNjYWxhcjtcblx0XHR0aGlzLncgPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggdyApIHtcblxuXHRcdHRoaXMudyA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0Y2FzZSAzOiB0aGlzLncgPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoICdpbmRleCBpcyBvdXQgb2YgcmFuZ2U6ICcgKyBpbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRDb21wb25lbnQ6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiByZXR1cm4gdGhpcy54O1xuXHRcdFx0Y2FzZSAxOiByZXR1cm4gdGhpcy55O1xuXHRcdFx0Y2FzZSAyOiByZXR1cm4gdGhpcy56O1xuXHRcdFx0Y2FzZSAzOiByZXR1cm4gdGhpcy53O1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMueCwgdGhpcy55LCB0aGlzLnosIHRoaXMudyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gdi54O1xuXHRcdHRoaXMueSA9IHYueTtcblx0XHR0aGlzLnogPSB2Lno7XG5cdFx0dGhpcy53ID0gKCB2LncgIT09IHVuZGVmaW5lZCApID8gdi53IDogMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXHRcdHRoaXMudyArPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54ICs9IHM7XG5cdFx0dGhpcy55ICs9IHM7XG5cdFx0dGhpcy56ICs9IHM7XG5cdFx0dGhpcy53ICs9IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCArIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKyBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICsgYi56O1xuXHRcdHRoaXMudyA9IGEudyArIGIudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblx0XHR0aGlzLncgKz0gdi53ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXHRcdHRoaXMudyAtPSB2Lnc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dGhpcy54IC09IHM7XG5cdFx0dGhpcy55IC09IHM7XG5cdFx0dGhpcy56IC09IHM7XG5cdFx0dGhpcy53IC09IHM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHN1YlZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAtIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgLSBiLnk7XG5cdFx0dGhpcy56ID0gYS56IC0gYi56O1xuXHRcdHRoaXMudyA9IGEudyAtIGIudztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHlTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ICo9IHNjYWxhcjtcblx0XHR0aGlzLnkgKj0gc2NhbGFyO1xuXHRcdHRoaXMueiAqPSBzY2FsYXI7XG5cdFx0dGhpcy53ICo9IHNjYWxhcjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMueiwgdyA9IHRoaXMudztcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgNCBdICogeSArIGVbIDggXSAqIHogKyBlWyAxMiBdICogdztcblx0XHR0aGlzLnkgPSBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICogdztcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6ICsgZVsgMTQgXSAqIHc7XG5cdFx0dGhpcy53ID0gZVsgMyBdICogeCArIGVbIDcgXSAqIHkgKyBlWyAxMSBdICogeiArIGVbIDE1IF0gKiB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdHNldEF4aXNBbmdsZUZyb21RdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvcXVhdGVybmlvblRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBxIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdFx0dGhpcy53ID0gMiAqIE1hdGguYWNvcyggcS53ICk7XG5cblx0XHR2YXIgcyA9IE1hdGguc3FydCggMSAtIHEudyAqIHEudyApO1xuXG5cdFx0aWYgKCBzIDwgMC4wMDAxICkge1xuXG5cdFx0XHR0aGlzLnggPSAxO1xuXHRcdFx0dGhpcy55ID0gMDtcblx0XHRcdHRoaXMueiA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnggPSBxLnggLyBzO1xuXHRcdFx0dGhpcy55ID0gcS55IC8gcztcblx0XHRcdHRoaXMueiA9IHEueiAvIHM7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEF4aXNBbmdsZUZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvQW5nbGUvaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dmFyIGFuZ2xlLCB4LCB5LCB6LFx0XHQvLyB2YXJpYWJsZXMgZm9yIHJlc3VsdFxuXHRcdFx0ZXBzaWxvbiA9IDAuMDEsXHRcdC8vIG1hcmdpbiB0byBhbGxvdyBmb3Igcm91bmRpbmcgZXJyb3JzXG5cdFx0XHRlcHNpbG9uMiA9IDAuMSxcdFx0Ly8gbWFyZ2luIHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gMCBhbmQgMTgwIGRlZ3JlZXNcblxuXHRcdFx0dGUgPSBtLmVsZW1lbnRzLFxuXG5cdFx0XHRtMTEgPSB0ZVsgMCBdLCBtMTIgPSB0ZVsgNCBdLCBtMTMgPSB0ZVsgOCBdLFxuXHRcdFx0bTIxID0gdGVbIDEgXSwgbTIyID0gdGVbIDUgXSwgbTIzID0gdGVbIDkgXSxcblx0XHRcdG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0aWYgKCAoIE1hdGguYWJzKCBtMTIgLSBtMjEgKSA8IGVwc2lsb24gKSAmJlxuXHRcdCAgICAgKCBNYXRoLmFicyggbTEzIC0gbTMxICkgPCBlcHNpbG9uICkgJiZcblx0XHQgICAgICggTWF0aC5hYnMoIG0yMyAtIG0zMiApIDwgZXBzaWxvbiApICkge1xuXG5cdFx0XHQvLyBzaW5ndWxhcml0eSBmb3VuZFxuXHRcdFx0Ly8gZmlyc3QgY2hlY2sgZm9yIGlkZW50aXR5IG1hdHJpeCB3aGljaCBtdXN0IGhhdmUgKzEgZm9yIGFsbCB0ZXJtc1xuXHRcdFx0Ly8gaW4gbGVhZGluZyBkaWFnb25hbCBhbmQgemVybyBpbiBvdGhlciB0ZXJtc1xuXG5cdFx0XHRpZiAoICggTWF0aC5hYnMoIG0xMiArIG0yMSApIDwgZXBzaWxvbjIgKSAmJlxuXHRcdFx0ICAgICAoIE1hdGguYWJzKCBtMTMgKyBtMzEgKSA8IGVwc2lsb24yICkgJiZcblx0XHRcdCAgICAgKCBNYXRoLmFicyggbTIzICsgbTMyICkgPCBlcHNpbG9uMiApICYmXG5cdFx0XHQgICAgICggTWF0aC5hYnMoIG0xMSArIG0yMiArIG0zMyAtIDMgKSA8IGVwc2lsb24yICkgKSB7XG5cblx0XHRcdFx0Ly8gdGhpcyBzaW5ndWxhcml0eSBpcyBpZGVudGl0eSBtYXRyaXggc28gYW5nbGUgPSAwXG5cblx0XHRcdFx0dGhpcy5zZXQoIDEsIDAsIDAsIDAgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpczsgLy8gemVybyBhbmdsZSwgYXJiaXRyYXJ5IGF4aXNcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UgdGhpcyBzaW5ndWxhcml0eSBpcyBhbmdsZSA9IDE4MFxuXG5cdFx0XHRhbmdsZSA9IE1hdGguUEk7XG5cblx0XHRcdHZhciB4eCA9ICggbTExICsgMSApIC8gMjtcblx0XHRcdHZhciB5eSA9ICggbTIyICsgMSApIC8gMjtcblx0XHRcdHZhciB6eiA9ICggbTMzICsgMSApIC8gMjtcblx0XHRcdHZhciB4eSA9ICggbTEyICsgbTIxICkgLyA0O1xuXHRcdFx0dmFyIHh6ID0gKCBtMTMgKyBtMzEgKSAvIDQ7XG5cdFx0XHR2YXIgeXogPSAoIG0yMyArIG0zMiApIC8gNDtcblxuXHRcdFx0aWYgKCAoIHh4ID4geXkgKSAmJiAoIHh4ID4genogKSApIHtcblxuXHRcdFx0XHQvLyBtMTEgaXMgdGhlIGxhcmdlc3QgZGlhZ29uYWwgdGVybVxuXG5cdFx0XHRcdGlmICggeHggPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdFx0eSA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHogPSAwLjcwNzEwNjc4MTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eCA9IE1hdGguc3FydCggeHggKTtcblx0XHRcdFx0XHR5ID0geHkgLyB4O1xuXHRcdFx0XHRcdHogPSB4eiAvIHg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2UgaWYgKCB5eSA+IHp6ICkge1xuXG5cdFx0XHRcdC8vIG0yMiBpcyB0aGUgbGFyZ2VzdCBkaWFnb25hbCB0ZXJtXG5cblx0XHRcdFx0aWYgKCB5eSA8IGVwc2lsb24gKSB7XG5cblx0XHRcdFx0XHR4ID0gMC43MDcxMDY3ODE7XG5cdFx0XHRcdFx0eSA9IDA7XG5cdFx0XHRcdFx0eiA9IDAuNzA3MTA2NzgxO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHR5ID0gTWF0aC5zcXJ0KCB5eSApO1xuXHRcdFx0XHRcdHggPSB4eSAvIHk7XG5cdFx0XHRcdFx0eiA9IHl6IC8geTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gbTMzIGlzIHRoZSBsYXJnZXN0IGRpYWdvbmFsIHRlcm0gc28gYmFzZSByZXN1bHQgb24gdGhpc1xuXG5cdFx0XHRcdGlmICggenogPCBlcHNpbG9uICkge1xuXG5cdFx0XHRcdFx0eCA9IDAuNzA3MTA2NzgxO1xuXHRcdFx0XHRcdHkgPSAwLjcwNzEwNjc4MTtcblx0XHRcdFx0XHR6ID0gMDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0eiA9IE1hdGguc3FydCggenogKTtcblx0XHRcdFx0XHR4ID0geHogLyB6O1xuXHRcdFx0XHRcdHkgPSB5eiAvIHo7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuc2V0KCB4LCB5LCB6LCBhbmdsZSApO1xuXG5cdFx0XHRyZXR1cm4gdGhpczsgLy8gcmV0dXJuIDE4MCBkZWcgcm90YXRpb25cblxuXHRcdH1cblxuXHRcdC8vIGFzIHdlIGhhdmUgcmVhY2hlZCBoZXJlIHRoZXJlIGFyZSBubyBzaW5ndWxhcml0aWVzIHNvIHdlIGNhbiBoYW5kbGUgbm9ybWFsbHlcblxuXHRcdHZhciBzID0gTWF0aC5zcXJ0KCAoIG0zMiAtIG0yMyApICogKCBtMzIgLSBtMjMgKSArXG5cdFx0ICAgICAgICAgICAgICAgICAgICggbTEzIC0gbTMxICkgKiAoIG0xMyAtIG0zMSApICtcblx0XHQgICAgICAgICAgICAgICAgICAgKCBtMjEgLSBtMTIgKSAqICggbTIxIC0gbTEyICkgKTsgLy8gdXNlZCB0byBub3JtYWxpemVcblxuXHRcdGlmICggTWF0aC5hYnMoIHMgKSA8IDAuMDAxICkgcyA9IDE7XG5cblx0XHQvLyBwcmV2ZW50IGRpdmlkZSBieSB6ZXJvLCBzaG91bGQgbm90IGhhcHBlbiBpZiBtYXRyaXggaXMgb3J0aG9nb25hbCBhbmQgc2hvdWxkIGJlXG5cdFx0Ly8gY2F1Z2h0IGJ5IHNpbmd1bGFyaXR5IHRlc3QgYWJvdmUsIGJ1dCBJJ3ZlIGxlZnQgaXQgaW4ganVzdCBpbiBjYXNlXG5cblx0XHR0aGlzLnggPSAoIG0zMiAtIG0yMyApIC8gcztcblx0XHR0aGlzLnkgPSAoIG0xMyAtIG0zMSApIC8gcztcblx0XHR0aGlzLnogPSAoIG0yMSAtIG0xMiApIC8gcztcblx0XHR0aGlzLncgPSBNYXRoLmFjb3MoICggbTExICsgbTIyICsgbTMzIC0gMSApIC8gMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtaW46IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWluKCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWluKCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWluKCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWluKCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYXg6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCB0aGlzLngsIHYueCApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCB0aGlzLnksIHYueSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCB0aGlzLnosIHYueiApO1xuXHRcdHRoaXMudyA9IE1hdGgubWF4KCB0aGlzLncsIHYudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdC8vIGFzc3VtZXMgbWluIDwgbWF4LCBjb21wb25lbnR3aXNlXG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluLngsIE1hdGgubWluKCBtYXgueCwgdGhpcy54ICkgKTtcblx0XHR0aGlzLnkgPSBNYXRoLm1heCggbWluLnksIE1hdGgubWluKCBtYXgueSwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluLnosIE1hdGgubWluKCBtYXgueiwgdGhpcy56ICkgKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggbWluLncsIE1hdGgubWluKCBtYXgudywgdGhpcy53ICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xhbXBTY2FsYXI6IGZ1bmN0aW9uICggbWluVmFsLCBtYXhWYWwgKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueSApICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy56ICkgKTtcblx0XHR0aGlzLncgPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLncgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cdFx0dGhpcy53ID0gTWF0aC5mbG9vciggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9IE1hdGguY2VpbCggdGhpcy53ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSBNYXRoLnJvdW5kKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSBNYXRoLnJvdW5kKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLnJvdW5kKCB0aGlzLnogKTtcblx0XHR0aGlzLncgPSBNYXRoLnJvdW5kKCB0aGlzLncgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm91bmRUb1plcm86IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9ICggdGhpcy54IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnggKSA6IE1hdGguZmxvb3IoIHRoaXMueCApO1xuXHRcdHRoaXMueSA9ICggdGhpcy55IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnkgKSA6IE1hdGguZmxvb3IoIHRoaXMueSApO1xuXHRcdHRoaXMueiA9ICggdGhpcy56IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLnogKSA6IE1hdGguZmxvb3IoIHRoaXMueiApO1xuXHRcdHRoaXMudyA9ICggdGhpcy53IDwgMCApID8gTWF0aC5jZWlsKCB0aGlzLncgKSA6IE1hdGguZmxvb3IoIHRoaXMudyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IC0gdGhpcy54O1xuXHRcdHRoaXMueSA9IC0gdGhpcy55O1xuXHRcdHRoaXMueiA9IC0gdGhpcy56O1xuXHRcdHRoaXMudyA9IC0gdGhpcy53O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkb3Q6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiB0aGlzLnggKiB2LnggKyB0aGlzLnkgKiB2LnkgKyB0aGlzLnogKiB2LnogKyB0aGlzLncgKiB2Lnc7XG5cblx0fSxcblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueiArIHRoaXMudyAqIHRoaXMudztcblxuXHR9LFxuXG5cdGxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56ICsgdGhpcy53ICogdGhpcy53ICk7XG5cblx0fSxcblxuXHRtYW5oYXR0YW5MZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoLmFicyggdGhpcy54ICkgKyBNYXRoLmFicyggdGhpcy55ICkgKyBNYXRoLmFicyggdGhpcy56ICkgKyBNYXRoLmFicyggdGhpcy53ICk7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmRpdmlkZVNjYWxhciggdGhpcy5sZW5ndGgoKSB8fCAxICk7XG5cblx0fSxcblxuXHRzZXRMZW5ndGg6IGZ1bmN0aW9uICggbGVuZ3RoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCkubXVsdGlwbHlTY2FsYXIoIGxlbmd0aCApO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCB2LCBhbHBoYSApIHtcblxuXHRcdHRoaXMueCArPSAoIHYueCAtIHRoaXMueCApICogYWxwaGE7XG5cdFx0dGhpcy55ICs9ICggdi55IC0gdGhpcy55ICkgKiBhbHBoYTtcblx0XHR0aGlzLnogKz0gKCB2LnogLSB0aGlzLnogKSAqIGFscGhhO1xuXHRcdHRoaXMudyArPSAoIHYudyAtIHRoaXMudyApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHJldHVybiAoICggdi54ID09PSB0aGlzLnggKSAmJiAoIHYueSA9PT0gdGhpcy55ICkgJiYgKCB2LnogPT09IHRoaXMueiApICYmICggdi53ID09PSB0aGlzLncgKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy53ID0gYXJyYXlbIG9mZnNldCArIDMgXTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMueDtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMSBdID0gdGhpcy55O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLno7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMudztcblxuXHRcdHJldHVybiBhcnJheTtcblxuXHR9LFxuXG5cdGZyb21CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yNDogb2Zmc2V0IGhhcyBiZWVuIHJlbW92ZWQgZnJvbSAuZnJvbUJ1ZmZlckF0dHJpYnV0ZSgpLicgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMueSA9IGF0dHJpYnV0ZS5nZXRZKCBpbmRleCApO1xuXHRcdHRoaXMueiA9IGF0dHJpYnV0ZS5nZXRaKCBpbmRleCApO1xuXHRcdHRoaXMudyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBzemltZWsgLyBodHRwczovL2dpdGh1Yi5jb20vc3ppbWVrL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTWFyaXVzIEtpbnRlbCAvIGh0dHBzOi8vZ2l0aHViLmNvbS9raW50ZWxcbiAqL1xuXG4vKlxuIEluIG9wdGlvbnMsIHdlIGNhbiBzcGVjaWZ5OlxuICogVGV4dHVyZSBwYXJhbWV0ZXJzIGZvciBhbiBhdXRvLWdlbmVyYXRlZCB0YXJnZXQgdGV4dHVyZVxuICogZGVwdGhCdWZmZXIvc3RlbmNpbEJ1ZmZlcjogQm9vbGVhbnMgdG8gaW5kaWNhdGUgaWYgd2Ugc2hvdWxkIGdlbmVyYXRlIHRoZXNlIGJ1ZmZlcnNcbiovXG5mdW5jdGlvbiBXZWJHTFJlbmRlclRhcmdldCggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHR0aGlzLndpZHRoID0gd2lkdGg7XG5cdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdHRoaXMuc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cdHRoaXMuc2Npc3NvclRlc3QgPSBmYWxzZTtcblxuXHR0aGlzLnZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHR0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZSggdW5kZWZpbmVkLCBvcHRpb25zLm1hcHBpbmcsIG9wdGlvbnMud3JhcFMsIG9wdGlvbnMud3JhcFQsIG9wdGlvbnMubWFnRmlsdGVyLCBvcHRpb25zLm1pbkZpbHRlciwgb3B0aW9ucy5mb3JtYXQsIG9wdGlvbnMudHlwZSwgb3B0aW9ucy5hbmlzb3Ryb3B5LCBvcHRpb25zLmVuY29kaW5nICk7XG5cblx0dGhpcy50ZXh0dXJlLmltYWdlID0ge307XG5cdHRoaXMudGV4dHVyZS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHR0aGlzLnRleHR1cmUuaW1hZ2UuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBvcHRpb25zLmdlbmVyYXRlTWlwbWFwcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMgOiBmYWxzZTtcblx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IG9wdGlvbnMubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHR0aGlzLmRlcHRoQnVmZmVyID0gb3B0aW9ucy5kZXB0aEJ1ZmZlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aEJ1ZmZlciA6IHRydWU7XG5cdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbEJ1ZmZlciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5zdGVuY2lsQnVmZmVyIDogdHJ1ZTtcblx0dGhpcy5kZXB0aFRleHR1cmUgPSBvcHRpb25zLmRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5kZXB0aFRleHR1cmUgOiBudWxsO1xuXG59XG5cbldlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBXZWJHTFJlbmRlclRhcmdldCxcblxuXHRpc1dlYkdMUmVuZGVyVGFyZ2V0OiB0cnVlLFxuXG5cdHNldFNpemU6IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5oZWlnaHQgIT09IGhlaWdodCApIHtcblxuXHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRcdHRoaXMudGV4dHVyZS5pbWFnZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0dGhpcy50ZXh0dXJlLmltYWdlLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdFx0dGhpcy5kaXNwb3NlKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXdwb3J0LnNldCggMCwgMCwgd2lkdGgsIGhlaWdodCApO1xuXHRcdHRoaXMuc2Npc3Nvci5zZXQoIDAsIDAsIHdpZHRoLCBoZWlnaHQgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0dGhpcy52aWV3cG9ydC5jb3B5KCBzb3VyY2Uudmlld3BvcnQgKTtcblxuXHRcdHRoaXMudGV4dHVyZSA9IHNvdXJjZS50ZXh0dXJlLmNsb25lKCk7XG5cblx0XHR0aGlzLmRlcHRoQnVmZmVyID0gc291cmNlLmRlcHRoQnVmZmVyO1xuXHRcdHRoaXMuc3RlbmNpbEJ1ZmZlciA9IHNvdXJjZS5zdGVuY2lsQnVmZmVyO1xuXHRcdHRoaXMuZGVwdGhUZXh0dXJlID0gc291cmNlLmRlcHRoVGV4dHVyZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqIEBhdXRob3IgTWF0dCBEZXNMYXVyaWVycyAvIEBtYXR0ZGVzbFxuICovXG5cbmZ1bmN0aW9uIFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKSB7XG5cblx0V2ViR0xSZW5kZXJUYXJnZXQuY2FsbCggdGhpcywgd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApO1xuXG5cdHRoaXMuc2FtcGxlcyA9IDQ7XG5cbn1cblxuV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBXZWJHTE11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0LFxuXG5cdGlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdFdlYkdMUmVuZGVyVGFyZ2V0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5zYW1wbGVzID0gc291cmNlLnNhbXBsZXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbmZ1bmN0aW9uIFF1YXRlcm5pb24oIHgsIHksIHosIHcgKSB7XG5cblx0dGhpcy5feCA9IHggfHwgMDtcblx0dGhpcy5feSA9IHkgfHwgMDtcblx0dGhpcy5feiA9IHogfHwgMDtcblx0dGhpcy5fdyA9ICggdyAhPT0gdW5kZWZpbmVkICkgPyB3IDogMTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLCB7XG5cblx0c2xlcnA6IGZ1bmN0aW9uICggcWEsIHFiLCBxbSwgdCApIHtcblxuXHRcdHJldHVybiBxbS5jb3B5KCBxYSApLnNsZXJwKCBxYiwgdCApO1xuXG5cdH0sXG5cblx0c2xlcnBGbGF0OiBmdW5jdGlvbiAoIGRzdCwgZHN0T2Zmc2V0LCBzcmMwLCBzcmNPZmZzZXQwLCBzcmMxLCBzcmNPZmZzZXQxLCB0ICkge1xuXG5cdFx0Ly8gZnV6ei1mcmVlLCBhcnJheS1iYXNlZCBRdWF0ZXJuaW9uIFNMRVJQIG9wZXJhdGlvblxuXG5cdFx0dmFyIHgwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDAgXSxcblx0XHRcdHkwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDEgXSxcblx0XHRcdHowID0gc3JjMFsgc3JjT2Zmc2V0MCArIDIgXSxcblx0XHRcdHcwID0gc3JjMFsgc3JjT2Zmc2V0MCArIDMgXSxcblxuXHRcdFx0eDEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMCBdLFxuXHRcdFx0eTEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMSBdLFxuXHRcdFx0ejEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMiBdLFxuXHRcdFx0dzEgPSBzcmMxWyBzcmNPZmZzZXQxICsgMyBdO1xuXG5cdFx0aWYgKCB3MCAhPT0gdzEgfHwgeDAgIT09IHgxIHx8IHkwICE9PSB5MSB8fCB6MCAhPT0gejEgKSB7XG5cblx0XHRcdHZhciBzID0gMSAtIHQsXG5cblx0XHRcdFx0Y29zID0geDAgKiB4MSArIHkwICogeTEgKyB6MCAqIHoxICsgdzAgKiB3MSxcblxuXHRcdFx0XHRkaXIgPSAoIGNvcyA+PSAwID8gMSA6IC0gMSApLFxuXHRcdFx0XHRzcXJTaW4gPSAxIC0gY29zICogY29zO1xuXG5cdFx0XHQvLyBTa2lwIHRoZSBTbGVycCBmb3IgdGlueSBzdGVwcyB0byBhdm9pZCBudW1lcmljIHByb2JsZW1zOlxuXHRcdFx0aWYgKCBzcXJTaW4gPiBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHR2YXIgc2luID0gTWF0aC5zcXJ0KCBzcXJTaW4gKSxcblx0XHRcdFx0XHRsZW4gPSBNYXRoLmF0YW4yKCBzaW4sIGNvcyAqIGRpciApO1xuXG5cdFx0XHRcdHMgPSBNYXRoLnNpbiggcyAqIGxlbiApIC8gc2luO1xuXHRcdFx0XHR0ID0gTWF0aC5zaW4oIHQgKiBsZW4gKSAvIHNpbjtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdERpciA9IHQgKiBkaXI7XG5cblx0XHRcdHgwID0geDAgKiBzICsgeDEgKiB0RGlyO1xuXHRcdFx0eTAgPSB5MCAqIHMgKyB5MSAqIHREaXI7XG5cdFx0XHR6MCA9IHowICogcyArIHoxICogdERpcjtcblx0XHRcdHcwID0gdzAgKiBzICsgdzEgKiB0RGlyO1xuXG5cdFx0XHQvLyBOb3JtYWxpemUgaW4gY2FzZSB3ZSBqdXN0IGRpZCBhIGxlcnA6XG5cdFx0XHRpZiAoIHMgPT09IDEgLSB0ICkge1xuXG5cdFx0XHRcdHZhciBmID0gMSAvIE1hdGguc3FydCggeDAgKiB4MCArIHkwICogeTAgKyB6MCAqIHowICsgdzAgKiB3MCApO1xuXG5cdFx0XHRcdHgwICo9IGY7XG5cdFx0XHRcdHkwICo9IGY7XG5cdFx0XHRcdHowICo9IGY7XG5cdFx0XHRcdHcwICo9IGY7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGRzdFsgZHN0T2Zmc2V0IF0gPSB4MDtcblx0XHRkc3RbIGRzdE9mZnNldCArIDEgXSA9IHkwO1xuXHRcdGRzdFsgZHN0T2Zmc2V0ICsgMiBdID0gejA7XG5cdFx0ZHN0WyBkc3RPZmZzZXQgKyAzIF0gPSB3MDtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFF1YXRlcm5pb24ucHJvdG90eXBlLCB7XG5cblx0eDoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl94O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feCA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0eToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl95O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dzoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl93O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5fdyA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBRdWF0ZXJuaW9uLnByb3RvdHlwZSwge1xuXG5cdGlzUXVhdGVybmlvbjogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiwgdyApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX3cgPSB3O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96LCB0aGlzLl93ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHF1YXRlcm5pb24gKSB7XG5cblx0XHR0aGlzLl94ID0gcXVhdGVybmlvbi54O1xuXHRcdHRoaXMuX3kgPSBxdWF0ZXJuaW9uLnk7XG5cdFx0dGhpcy5feiA9IHF1YXRlcm5pb24uejtcblx0XHR0aGlzLl93ID0gcXVhdGVybmlvbi53O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tRXVsZXI6IGZ1bmN0aW9uICggZXVsZXIsIHVwZGF0ZSApIHtcblxuXHRcdGlmICggISAoIGV1bGVyICYmIGV1bGVyLmlzRXVsZXIgKSApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVEhSRUUuUXVhdGVybmlvbjogLnNldEZyb21FdWxlcigpIG5vdyBleHBlY3RzIGFuIEV1bGVyIHJvdGF0aW9uIHJhdGhlciB0aGFuIGEgVmVjdG9yMyBhbmQgb3JkZXIuJyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHggPSBldWxlci5feCwgeSA9IGV1bGVyLl95LCB6ID0gZXVsZXIuX3osIG9yZGVyID0gZXVsZXIub3JkZXI7XG5cblx0XHQvLyBodHRwOi8vd3d3Lm1hdGh3b3Jrcy5jb20vbWF0bGFiY2VudHJhbC9maWxlZXhjaGFuZ2UvXG5cdFx0Ly8gXHQyMDY5Ni1mdW5jdGlvbi10by1jb252ZXJ0LWJldHdlZW4tZGNtLWV1bGVyLWFuZ2xlcy1xdWF0ZXJuaW9ucy1hbmQtZXVsZXItdmVjdG9ycy9cblx0XHQvL1x0Y29udGVudC9TcGluQ2FsYy5tXG5cblx0XHR2YXIgY29zID0gTWF0aC5jb3M7XG5cdFx0dmFyIHNpbiA9IE1hdGguc2luO1xuXG5cdFx0dmFyIGMxID0gY29zKCB4IC8gMiApO1xuXHRcdHZhciBjMiA9IGNvcyggeSAvIDIgKTtcblx0XHR2YXIgYzMgPSBjb3MoIHogLyAyICk7XG5cblx0XHR2YXIgczEgPSBzaW4oIHggLyAyICk7XG5cdFx0dmFyIHMyID0gc2luKCB5IC8gMiApO1xuXHRcdHZhciBzMyA9IHNpbiggeiAvIDIgKTtcblxuXHRcdGlmICggb3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzICsgYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyArIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgLSBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzIC0gczEgKiBzMiAqIHMzO1xuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gczEgKiBjMiAqIGMzIC0gYzEgKiBzMiAqIHMzO1xuXHRcdFx0dGhpcy5feSA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcblx0XHRcdHRoaXMuX3ogPSBjMSAqIGMyICogczMgKyBzMSAqIHMyICogYzM7XG5cdFx0XHR0aGlzLl93ID0gYzEgKiBjMiAqIGMzICsgczEgKiBzMiAqIHMzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1cGRhdGUgIT09IGZhbHNlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQXhpc0FuZ2xlOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG5cdFx0Ly8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuXHRcdHZhciBoYWxmQW5nbGUgPSBhbmdsZSAvIDIsIHMgPSBNYXRoLnNpbiggaGFsZkFuZ2xlICk7XG5cblx0XHR0aGlzLl94ID0gYXhpcy54ICogcztcblx0XHR0aGlzLl95ID0gYXhpcy55ICogcztcblx0XHR0aGlzLl96ID0gYXhpcy56ICogcztcblx0XHR0aGlzLl93ID0gTWF0aC5jb3MoIGhhbGZBbmdsZSApO1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdC8vIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2dlb21ldHJ5L3JvdGF0aW9ucy9jb252ZXJzaW9ucy9tYXRyaXhUb1F1YXRlcm5pb24vaW5kZXguaHRtXG5cblx0XHQvLyBhc3N1bWVzIHRoZSB1cHBlciAzeDMgb2YgbSBpcyBhIHB1cmUgcm90YXRpb24gbWF0cml4IChpLmUsIHVuc2NhbGVkKVxuXG5cdFx0dmFyIHRlID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bTExID0gdGVbIDAgXSwgbTEyID0gdGVbIDQgXSwgbTEzID0gdGVbIDggXSxcblx0XHRcdG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF0sXG5cdFx0XHRtMzEgPSB0ZVsgMiBdLCBtMzIgPSB0ZVsgNiBdLCBtMzMgPSB0ZVsgMTAgXSxcblxuXHRcdFx0dHJhY2UgPSBtMTEgKyBtMjIgKyBtMzMsXG5cdFx0XHRzO1xuXG5cdFx0aWYgKCB0cmFjZSA+IDAgKSB7XG5cblx0XHRcdHMgPSAwLjUgLyBNYXRoLnNxcnQoIHRyYWNlICsgMS4wICk7XG5cblx0XHRcdHRoaXMuX3cgPSAwLjI1IC8gcztcblx0XHRcdHRoaXMuX3ggPSAoIG0zMiAtIG0yMyApICogcztcblx0XHRcdHRoaXMuX3kgPSAoIG0xMyAtIG0zMSApICogcztcblx0XHRcdHRoaXMuX3ogPSAoIG0yMSAtIG0xMiApICogcztcblxuXHRcdH0gZWxzZSBpZiAoIG0xMSA+IG0yMiAmJiBtMTEgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0xMSAtIG0yMiAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMzIgLSBtMjMgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl95ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMTMgKyBtMzEgKSAvIHM7XG5cblx0XHR9IGVsc2UgaWYgKCBtMjIgPiBtMzMgKSB7XG5cblx0XHRcdHMgPSAyLjAgKiBNYXRoLnNxcnQoIDEuMCArIG0yMiAtIG0xMSAtIG0zMyApO1xuXG5cdFx0XHR0aGlzLl93ID0gKCBtMTMgLSBtMzEgKSAvIHM7XG5cdFx0XHR0aGlzLl94ID0gKCBtMTIgKyBtMjEgKSAvIHM7XG5cdFx0XHR0aGlzLl95ID0gMC4yNSAqIHM7XG5cdFx0XHR0aGlzLl96ID0gKCBtMjMgKyBtMzIgKSAvIHM7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRzID0gMi4wICogTWF0aC5zcXJ0KCAxLjAgKyBtMzMgLSBtMTEgLSBtMjIgKTtcblxuXHRcdFx0dGhpcy5fdyA9ICggbTIxIC0gbTEyICkgLyBzO1xuXHRcdFx0dGhpcy5feCA9ICggbTEzICsgbTMxICkgLyBzO1xuXHRcdFx0dGhpcy5feSA9ICggbTIzICsgbTMyICkgLyBzO1xuXHRcdFx0dGhpcy5feiA9IDAuMjUgKiBzO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVW5pdFZlY3RvcnM6IGZ1bmN0aW9uICggdkZyb20sIHZUbyApIHtcblxuXHRcdC8vIGFzc3VtZXMgZGlyZWN0aW9uIHZlY3RvcnMgdkZyb20gYW5kIHZUbyBhcmUgbm9ybWFsaXplZFxuXG5cdFx0dmFyIEVQUyA9IDAuMDAwMDAxO1xuXG5cdFx0dmFyIHIgPSB2RnJvbS5kb3QoIHZUbyApICsgMTtcblxuXHRcdGlmICggciA8IEVQUyApIHtcblxuXHRcdFx0ciA9IDA7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHZGcm9tLnggKSA+IE1hdGguYWJzKCB2RnJvbS56ICkgKSB7XG5cblx0XHRcdFx0dGhpcy5feCA9IC0gdkZyb20ueTtcblx0XHRcdFx0dGhpcy5feSA9IHZGcm9tLng7XG5cdFx0XHRcdHRoaXMuX3ogPSAwO1xuXHRcdFx0XHR0aGlzLl93ID0gcjtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0dGhpcy5feSA9IC0gdkZyb20uejtcblx0XHRcdFx0dGhpcy5feiA9IHZGcm9tLnk7XG5cdFx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBjcm9zc1ZlY3RvcnMoIHZGcm9tLCB2VG8gKTsgLy8gaW5saW5lZCB0byBhdm9pZCBjeWNsaWMgZGVwZW5kZW5jeSBvbiBWZWN0b3IzXG5cblx0XHRcdHRoaXMuX3ggPSB2RnJvbS55ICogdlRvLnogLSB2RnJvbS56ICogdlRvLnk7XG5cdFx0XHR0aGlzLl95ID0gdkZyb20ueiAqIHZUby54IC0gdkZyb20ueCAqIHZUby56O1xuXHRcdFx0dGhpcy5feiA9IHZGcm9tLnggKiB2VG8ueSAtIHZGcm9tLnkgKiB2VG8ueDtcblx0XHRcdHRoaXMuX3cgPSByO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHEgKSB7XG5cblx0XHRyZXR1cm4gMiAqIE1hdGguYWNvcyggTWF0aC5hYnMoIE1hdGhVdGlscy5jbGFtcCggdGhpcy5kb3QoIHEgKSwgLSAxLCAxICkgKSApO1xuXG5cdH0sXG5cblx0cm90YXRlVG93YXJkczogZnVuY3Rpb24gKCBxLCBzdGVwICkge1xuXG5cdFx0dmFyIGFuZ2xlID0gdGhpcy5hbmdsZVRvKCBxICk7XG5cblx0XHRpZiAoIGFuZ2xlID09PSAwICkgcmV0dXJuIHRoaXM7XG5cblx0XHR2YXIgdCA9IE1hdGgubWluKCAxLCBzdGVwIC8gYW5nbGUgKTtcblxuXHRcdHRoaXMuc2xlcnAoIHEsIHQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0aW52ZXJzZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Ly8gcXVhdGVybmlvbiBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLmNvbmp1Z2F0ZSgpO1xuXG5cdH0sXG5cblx0Y29uanVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl94ICo9IC0gMTtcblx0XHR0aGlzLl95ICo9IC0gMTtcblx0XHR0aGlzLl96ICo9IC0gMTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZG90OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5feCAqIHYuX3ggKyB0aGlzLl95ICogdi5feSArIHRoaXMuX3ogKiB2Ll96ICsgdGhpcy5fdyAqIHYuX3c7XG5cblx0fSxcblxuXHRsZW5ndGhTcTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ggKiB0aGlzLl94ICsgdGhpcy5feSAqIHRoaXMuX3kgKyB0aGlzLl96ICogdGhpcy5feiArIHRoaXMuX3cgKiB0aGlzLl93O1xuXG5cdH0sXG5cblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLl94ICogdGhpcy5feCArIHRoaXMuX3kgKiB0aGlzLl95ICsgdGhpcy5feiAqIHRoaXMuX3ogKyB0aGlzLl93ICogdGhpcy5fdyApO1xuXG5cdH0sXG5cblx0bm9ybWFsaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbCA9IHRoaXMubGVuZ3RoKCk7XG5cblx0XHRpZiAoIGwgPT09IDAgKSB7XG5cblx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0dGhpcy5feSA9IDA7XG5cdFx0XHR0aGlzLl96ID0gMDtcblx0XHRcdHRoaXMuX3cgPSAxO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bCA9IDEgLyBsO1xuXG5cdFx0XHR0aGlzLl94ID0gdGhpcy5feCAqIGw7XG5cdFx0XHR0aGlzLl95ID0gdGhpcy5feSAqIGw7XG5cdFx0XHR0aGlzLl96ID0gdGhpcy5feiAqIGw7XG5cdFx0XHR0aGlzLl93ID0gdGhpcy5fdyAqIGw7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIHEsIHAgKSB7XG5cblx0XHRpZiAoIHAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUXVhdGVybmlvbjogLm11bHRpcGx5KCkgbm93IG9ubHkgYWNjZXB0cyBvbmUgYXJndW1lbnQuIFVzZSAubXVsdGlwbHlRdWF0ZXJuaW9ucyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggcSwgcCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlRdWF0ZXJuaW9ucyggdGhpcywgcSApO1xuXG5cdH0sXG5cblx0cHJlbXVsdGlwbHk6IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5UXVhdGVybmlvbnMoIHEsIHRoaXMgKTtcblxuXHR9LFxuXG5cdG11bHRpcGx5UXVhdGVybmlvbnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9yZWFsTm9ybWVkQWxnZWJyYS9xdWF0ZXJuaW9ucy9jb2RlL2luZGV4Lmh0bVxuXG5cdFx0dmFyIHFheCA9IGEuX3gsIHFheSA9IGEuX3ksIHFheiA9IGEuX3osIHFhdyA9IGEuX3c7XG5cdFx0dmFyIHFieCA9IGIuX3gsIHFieSA9IGIuX3ksIHFieiA9IGIuX3osIHFidyA9IGIuX3c7XG5cblx0XHR0aGlzLl94ID0gcWF4ICogcWJ3ICsgcWF3ICogcWJ4ICsgcWF5ICogcWJ6IC0gcWF6ICogcWJ5O1xuXHRcdHRoaXMuX3kgPSBxYXkgKiBxYncgKyBxYXcgKiBxYnkgKyBxYXogKiBxYnggLSBxYXggKiBxYno7XG5cdFx0dGhpcy5feiA9IHFheiAqIHFidyArIHFhdyAqIHFieiArIHFheCAqIHFieSAtIHFheSAqIHFieDtcblx0XHR0aGlzLl93ID0gcWF3ICogcWJ3IC0gcWF4ICogcWJ4IC0gcWF5ICogcWJ5IC0gcWF6ICogcWJ6O1xuXG5cdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzbGVycDogZnVuY3Rpb24gKCBxYiwgdCApIHtcblxuXHRcdGlmICggdCA9PT0gMCApIHJldHVybiB0aGlzO1xuXHRcdGlmICggdCA9PT0gMSApIHJldHVybiB0aGlzLmNvcHkoIHFiICk7XG5cblx0XHR2YXIgeCA9IHRoaXMuX3gsIHkgPSB0aGlzLl95LCB6ID0gdGhpcy5feiwgdyA9IHRoaXMuX3c7XG5cblx0XHQvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9hbGdlYnJhL3JlYWxOb3JtZWRBbGdlYnJhL3F1YXRlcm5pb25zL3NsZXJwL1xuXG5cdFx0dmFyIGNvc0hhbGZUaGV0YSA9IHcgKiBxYi5fdyArIHggKiBxYi5feCArIHkgKiBxYi5feSArIHogKiBxYi5fejtcblxuXHRcdGlmICggY29zSGFsZlRoZXRhIDwgMCApIHtcblxuXHRcdFx0dGhpcy5fdyA9IC0gcWIuX3c7XG5cdFx0XHR0aGlzLl94ID0gLSBxYi5feDtcblx0XHRcdHRoaXMuX3kgPSAtIHFiLl95O1xuXHRcdFx0dGhpcy5feiA9IC0gcWIuX3o7XG5cblx0XHRcdGNvc0hhbGZUaGV0YSA9IC0gY29zSGFsZlRoZXRhO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5jb3B5KCBxYiApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjb3NIYWxmVGhldGEgPj0gMS4wICkge1xuXG5cdFx0XHR0aGlzLl93ID0gdztcblx0XHRcdHRoaXMuX3ggPSB4O1xuXHRcdFx0dGhpcy5feSA9IHk7XG5cdFx0XHR0aGlzLl96ID0gejtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgc3FyU2luSGFsZlRoZXRhID0gMS4wIC0gY29zSGFsZlRoZXRhICogY29zSGFsZlRoZXRhO1xuXG5cdFx0aWYgKCBzcXJTaW5IYWxmVGhldGEgPD0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdHZhciBzID0gMSAtIHQ7XG5cdFx0XHR0aGlzLl93ID0gcyAqIHcgKyB0ICogdGhpcy5fdztcblx0XHRcdHRoaXMuX3ggPSBzICogeCArIHQgKiB0aGlzLl94O1xuXHRcdFx0dGhpcy5feSA9IHMgKiB5ICsgdCAqIHRoaXMuX3k7XG5cdFx0XHR0aGlzLl96ID0gcyAqIHogKyB0ICogdGhpcy5fejtcblxuXHRcdFx0dGhpcy5ub3JtYWxpemUoKTtcblx0XHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgc2luSGFsZlRoZXRhID0gTWF0aC5zcXJ0KCBzcXJTaW5IYWxmVGhldGEgKTtcblx0XHR2YXIgaGFsZlRoZXRhID0gTWF0aC5hdGFuMiggc2luSGFsZlRoZXRhLCBjb3NIYWxmVGhldGEgKTtcblx0XHR2YXIgcmF0aW9BID0gTWF0aC5zaW4oICggMSAtIHQgKSAqIGhhbGZUaGV0YSApIC8gc2luSGFsZlRoZXRhLFxuXHRcdFx0cmF0aW9CID0gTWF0aC5zaW4oIHQgKiBoYWxmVGhldGEgKSAvIHNpbkhhbGZUaGV0YTtcblxuXHRcdHRoaXMuX3cgPSAoIHcgKiByYXRpb0EgKyB0aGlzLl93ICogcmF0aW9CICk7XG5cdFx0dGhpcy5feCA9ICggeCAqIHJhdGlvQSArIHRoaXMuX3ggKiByYXRpb0IgKTtcblx0XHR0aGlzLl95ID0gKCB5ICogcmF0aW9BICsgdGhpcy5feSAqIHJhdGlvQiApO1xuXHRcdHRoaXMuX3ogPSAoIHogKiByYXRpb0EgKyB0aGlzLl96ICogcmF0aW9CICk7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBxdWF0ZXJuaW9uICkge1xuXG5cdFx0cmV0dXJuICggcXVhdGVybmlvbi5feCA9PT0gdGhpcy5feCApICYmICggcXVhdGVybmlvbi5feSA9PT0gdGhpcy5feSApICYmICggcXVhdGVybmlvbi5feiA9PT0gdGhpcy5feiApICYmICggcXVhdGVybmlvbi5fdyA9PT0gdGhpcy5fdyApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuX3ggPSBhcnJheVsgb2Zmc2V0IF07XG5cdFx0dGhpcy5feSA9IGFycmF5WyBvZmZzZXQgKyAxIF07XG5cdFx0dGhpcy5feiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cdFx0dGhpcy5fdyA9IGFycmF5WyBvZmZzZXQgKyAzIF07XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLl94O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxIF0gPSB0aGlzLl95O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAyIF0gPSB0aGlzLl96O1xuXHRcdGFycmF5WyBvZmZzZXQgKyAzIF0gPSB0aGlzLl93O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4ICkge1xuXG5cdFx0dGhpcy5feCA9IGF0dHJpYnV0ZS5nZXRYKCBpbmRleCApO1xuXHRcdHRoaXMuX3kgPSBhdHRyaWJ1dGUuZ2V0WSggaW5kZXggKTtcblx0XHR0aGlzLl96ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cdFx0dGhpcy5fdyA9IGF0dHJpYnV0ZS5nZXRXKCBpbmRleCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRfb25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3Iga2lsZSAvIGh0dHA6Ly9raWxlLnN0cmF2YWdhbnphLm9yZy9cbiAqIEBhdXRob3IgcGhpbG9nYiAvIGh0dHA6Ly9ibG9nLnRoZWppdC5vcmcvXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBlZ3JhZXRoZXIgLyBodHRwOi8vZWdyYWV0aGVyLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbnZhciBfdmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cbmZ1bmN0aW9uIFZlY3RvcjMoIHgsIHksIHogKSB7XG5cblx0dGhpcy54ID0geCB8fCAwO1xuXHR0aGlzLnkgPSB5IHx8IDA7XG5cdHRoaXMueiA9IHogfHwgMDtcblxufVxuXG5PYmplY3QuYXNzaWduKCBWZWN0b3IzLnByb3RvdHlwZSwge1xuXG5cdGlzVmVjdG9yMzogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cdFx0dGhpcy55ID0geTtcblx0XHR0aGlzLnogPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0dGhpcy54ID0gc2NhbGFyO1xuXHRcdHRoaXMueSA9IHNjYWxhcjtcblx0XHR0aGlzLnogPSBzY2FsYXI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFg6IGZ1bmN0aW9uICggeCApIHtcblxuXHRcdHRoaXMueCA9IHg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFk6IGZ1bmN0aW9uICggeSApIHtcblxuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFo6IGZ1bmN0aW9uICggeiApIHtcblxuXHRcdHRoaXMueiA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbXBvbmVudDogZnVuY3Rpb24gKCBpbmRleCwgdmFsdWUgKSB7XG5cblx0XHRzd2l0Y2ggKCBpbmRleCApIHtcblxuXHRcdFx0Y2FzZSAwOiB0aGlzLnggPSB2YWx1ZTsgYnJlYWs7XG5cdFx0XHRjYXNlIDE6IHRoaXMueSA9IHZhbHVlOyBicmVhaztcblx0XHRcdGNhc2UgMjogdGhpcy56ID0gdmFsdWU7IGJyZWFrO1xuXHRcdFx0ZGVmYXVsdDogdGhyb3cgbmV3IEVycm9yKCAnaW5kZXggaXMgb3V0IG9mIHJhbmdlOiAnICsgaW5kZXggKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0Q29tcG9uZW50OiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0c3dpdGNoICggaW5kZXggKSB7XG5cblx0XHRcdGNhc2UgMDogcmV0dXJuIHRoaXMueDtcblx0XHRcdGNhc2UgMTogcmV0dXJuIHRoaXMueTtcblx0XHRcdGNhc2UgMjogcmV0dXJuIHRoaXMuejtcblx0XHRcdGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvciggJ2luZGV4IGlzIG91dCBvZiByYW5nZTogJyArIGluZGV4ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLngsIHRoaXMueSwgdGhpcy56ICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR0aGlzLnggPSB2Lng7XG5cdFx0dGhpcy55ID0gdi55O1xuXHRcdHRoaXMueiA9IHYuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFkZCgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmFkZFZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmFkZFZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCArPSB2Lng7XG5cdFx0dGhpcy55ICs9IHYueTtcblx0XHR0aGlzLnogKz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCArPSBzO1xuXHRcdHRoaXMueSArPSBzO1xuXHRcdHRoaXMueiArPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggKyBiLng7XG5cdFx0dGhpcy55ID0gYS55ICsgYi55O1xuXHRcdHRoaXMueiA9IGEueiArIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGVkVmVjdG9yOiBmdW5jdGlvbiAoIHYsIHMgKSB7XG5cblx0XHR0aGlzLnggKz0gdi54ICogcztcblx0XHR0aGlzLnkgKz0gdi55ICogcztcblx0XHR0aGlzLnogKz0gdi56ICogcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIHYsIHcgKSB7XG5cblx0XHRpZiAoIHcgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLnN1YigpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLnN1YlZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnN1YlZlY3RvcnMoIHYsIHcgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMueCAtPSB2Lng7XG5cdFx0dGhpcy55IC09IHYueTtcblx0XHR0aGlzLnogLT0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJTY2FsYXI6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHRoaXMueCAtPSBzO1xuXHRcdHRoaXMueSAtPSBzO1xuXHRcdHRoaXMueiAtPSBzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdWJWZWN0b3JzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR0aGlzLnggPSBhLnggLSBiLng7XG5cdFx0dGhpcy55ID0gYS55IC0gYi55O1xuXHRcdHRoaXMueiA9IGEueiAtIGIuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bXVsdGlwbHk6IGZ1bmN0aW9uICggdiwgdyApIHtcblxuXHRcdGlmICggdyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAubXVsdGlwbHkoKSBub3cgb25seSBhY2NlcHRzIG9uZSBhcmd1bWVudC4gVXNlIC5tdWx0aXBseVZlY3RvcnMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5VmVjdG9ycyggdiwgdyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ICo9IHYueDtcblx0XHR0aGlzLnkgKj0gdi55O1xuXHRcdHRoaXMueiAqPSB2Lno7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMueCAqPSBzY2FsYXI7XG5cdFx0dGhpcy55ICo9IHNjYWxhcjtcblx0XHR0aGlzLnogKj0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVZlY3RvcnM6IGZ1bmN0aW9uICggYSwgYiApIHtcblxuXHRcdHRoaXMueCA9IGEueCAqIGIueDtcblx0XHR0aGlzLnkgPSBhLnkgKiBiLnk7XG5cdFx0dGhpcy56ID0gYS56ICogYi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0aWYgKCAhICggZXVsZXIgJiYgZXVsZXIuaXNFdWxlciApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5RXVsZXIoKSBub3cgZXhwZWN0cyBhbiBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCBldWxlciApICk7XG5cblx0fSxcblxuXHRhcHBseUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKSApO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXgzOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR0aGlzLnggPSBlWyAwIF0gKiB4ICsgZVsgMyBdICogeSArIGVbIDYgXSAqIHo7XG5cdFx0dGhpcy55ID0gZVsgMSBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA3IF0gKiB6O1xuXHRcdHRoaXMueiA9IGVbIDIgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOCBdICogejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlOb3JtYWxNYXRyaXg6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4MyggbSApLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHR2YXIgeCA9IHRoaXMueCwgeSA9IHRoaXMueSwgeiA9IHRoaXMuejtcblx0XHR2YXIgZSA9IG0uZWxlbWVudHM7XG5cblx0XHR2YXIgdyA9IDEgLyAoIGVbIDMgXSAqIHggKyBlWyA3IF0gKiB5ICsgZVsgMTEgXSAqIHogKyBlWyAxNSBdICk7XG5cblx0XHR0aGlzLnggPSAoIGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0gKSAqIHc7XG5cdFx0dGhpcy55ID0gKCBlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdICkgKiB3O1xuXHRcdHRoaXMueiA9ICggZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0gKSAqIHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIHF4ID0gcS54LCBxeSA9IHEueSwgcXogPSBxLnosIHF3ID0gcS53O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHF1YXQgKiB2ZWN0b3JcblxuXHRcdHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcblx0XHR2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XG5cdFx0dmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xuXHRcdHZhciBpdyA9IC0gcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xuXG5cdFx0Ly8gY2FsY3VsYXRlIHJlc3VsdCAqIGludmVyc2UgcXVhdFxuXG5cdFx0dGhpcy54ID0gaXggKiBxdyArIGl3ICogLSBxeCArIGl5ICogLSBxeiAtIGl6ICogLSBxeTtcblx0XHR0aGlzLnkgPSBpeSAqIHF3ICsgaXcgKiAtIHF5ICsgaXogKiAtIHF4IC0gaXggKiAtIHF6O1xuXHRcdHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC0gcXogKyBpeCAqIC0gcXkgLSBpeSAqIC0gcXg7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHByb2plY3Q6IGZ1bmN0aW9uICggY2FtZXJhICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdH0sXG5cblx0dW5wcm9qZWN0OiBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggY2FtZXJhLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlICkuYXBwbHlNYXRyaXg0KCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdHRyYW5zZm9ybURpcmVjdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gaW5wdXQ6IFRIUkVFLk1hdHJpeDQgYWZmaW5lIG1hdHJpeFxuXHRcdC8vIHZlY3RvciBpbnRlcnByZXRlZCBhcyBhIGRpcmVjdGlvblxuXG5cdFx0dmFyIHggPSB0aGlzLngsIHkgPSB0aGlzLnksIHogPSB0aGlzLno7XG5cdFx0dmFyIGUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGhpcy54ID0gZVsgMCBdICogeCArIGVbIDQgXSAqIHkgKyBlWyA4IF0gKiB6O1xuXHRcdHRoaXMueSA9IGVbIDEgXSAqIHggKyBlWyA1IF0gKiB5ICsgZVsgOSBdICogejtcblx0XHR0aGlzLnogPSBlWyAyIF0gKiB4ICsgZVsgNiBdICogeSArIGVbIDEwIF0gKiB6O1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsaXplKCk7XG5cblx0fSxcblxuXHRkaXZpZGU6IGZ1bmN0aW9uICggdiApIHtcblxuXHRcdHRoaXMueCAvPSB2Lng7XG5cdFx0dGhpcy55IC89IHYueTtcblx0XHR0aGlzLnogLz0gdi56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXZpZGVTY2FsYXI6IGZ1bmN0aW9uICggc2NhbGFyICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubXVsdGlwbHlTY2FsYXIoIDEgLyBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdG1pbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5taW4oIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5taW4oIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5taW4oIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1heDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5tYXgoIHRoaXMueCwgdi54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIHRoaXMueSwgdi55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5tYXgoIHRoaXMueiwgdi56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsYW1wOiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0Ly8gYXNzdW1lcyBtaW4gPCBtYXgsIGNvbXBvbmVudHdpc2VcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW4ueCwgTWF0aC5taW4oIG1heC54LCB0aGlzLnggKSApO1xuXHRcdHRoaXMueSA9IE1hdGgubWF4KCBtaW4ueSwgTWF0aC5taW4oIG1heC55LCB0aGlzLnkgKSApO1xuXHRcdHRoaXMueiA9IE1hdGgubWF4KCBtaW4ueiwgTWF0aC5taW4oIG1heC56LCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcFNjYWxhcjogZnVuY3Rpb24gKCBtaW5WYWwsIG1heFZhbCApIHtcblxuXHRcdHRoaXMueCA9IE1hdGgubWF4KCBtaW5WYWwsIE1hdGgubWluKCBtYXhWYWwsIHRoaXMueCApICk7XG5cdFx0dGhpcy55ID0gTWF0aC5tYXgoIG1pblZhbCwgTWF0aC5taW4oIG1heFZhbCwgdGhpcy55ICkgKTtcblx0XHR0aGlzLnogPSBNYXRoLm1heCggbWluVmFsLCBNYXRoLm1pbiggbWF4VmFsLCB0aGlzLnogKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbGFtcExlbmd0aDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCBsZW5ndGggfHwgMSApLm11bHRpcGx5U2NhbGFyKCBNYXRoLm1heCggbWluLCBNYXRoLm1pbiggbWF4LCBsZW5ndGggKSApICk7XG5cblx0fSxcblxuXHRmbG9vcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5mbG9vciggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5mbG9vciggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5mbG9vciggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlaWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMueCA9IE1hdGguY2VpbCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jZWlsKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSBNYXRoLmNlaWwoIHRoaXMueiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3VuZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy54ID0gTWF0aC5yb3VuZCggdGhpcy54ICk7XG5cdFx0dGhpcy55ID0gTWF0aC5yb3VuZCggdGhpcy55ICk7XG5cdFx0dGhpcy56ID0gTWF0aC5yb3VuZCggdGhpcy56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdW5kVG9aZXJvOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAoIHRoaXMueCA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy54ICkgOiBNYXRoLmZsb29yKCB0aGlzLnggKTtcblx0XHR0aGlzLnkgPSAoIHRoaXMueSA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy55ICkgOiBNYXRoLmZsb29yKCB0aGlzLnkgKTtcblx0XHR0aGlzLnogPSAoIHRoaXMueiA8IDAgKSA/IE1hdGguY2VpbCggdGhpcy56ICkgOiBNYXRoLmZsb29yKCB0aGlzLnogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnggPSAtIHRoaXMueDtcblx0XHR0aGlzLnkgPSAtIHRoaXMueTtcblx0XHR0aGlzLnogPSAtIHRoaXMuejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZG90OiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdi54ICsgdGhpcy55ICogdi55ICsgdGhpcy56ICogdi56O1xuXG5cdH0sXG5cblx0Ly8gVE9ETyBsZW5ndGhTcXVhcmVkP1xuXG5cdGxlbmd0aFNxOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56O1xuXG5cdH0sXG5cblx0bGVuZ3RoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnogKTtcblxuXHR9LFxuXG5cdG1hbmhhdHRhbkxlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggKSArIE1hdGguYWJzKCB0aGlzLnkgKSArIE1hdGguYWJzKCB0aGlzLnogKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGl2aWRlU2NhbGFyKCB0aGlzLmxlbmd0aCgpIHx8IDEgKTtcblxuXHR9LFxuXG5cdHNldExlbmd0aDogZnVuY3Rpb24gKCBsZW5ndGggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUoKS5tdWx0aXBseVNjYWxhciggbGVuZ3RoICk7XG5cblx0fSxcblxuXHRsZXJwOiBmdW5jdGlvbiAoIHYsIGFscGhhICkge1xuXG5cdFx0dGhpcy54ICs9ICggdi54IC0gdGhpcy54ICkgKiBhbHBoYTtcblx0XHR0aGlzLnkgKz0gKCB2LnkgLSB0aGlzLnkgKSAqIGFscGhhO1xuXHRcdHRoaXMueiArPSAoIHYueiAtIHRoaXMueiApICogYWxwaGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnBWZWN0b3JzOiBmdW5jdGlvbiAoIHYxLCB2MiwgYWxwaGEgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zdWJWZWN0b3JzKCB2MiwgdjEgKS5tdWx0aXBseVNjYWxhciggYWxwaGEgKS5hZGQoIHYxICk7XG5cblx0fSxcblxuXHRjcm9zczogZnVuY3Rpb24gKCB2LCB3ICkge1xuXG5cdFx0aWYgKCB3ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5jcm9zcygpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLmNyb3NzVmVjdG9ycyggYSwgYiApIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKCB2LCB3ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5jcm9zc1ZlY3RvcnMoIHRoaXMsIHYgKTtcblxuXHR9LFxuXG5cdGNyb3NzVmVjdG9yczogZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0dmFyIGF4ID0gYS54LCBheSA9IGEueSwgYXogPSBhLno7XG5cdFx0dmFyIGJ4ID0gYi54LCBieSA9IGIueSwgYnogPSBiLno7XG5cblx0XHR0aGlzLnggPSBheSAqIGJ6IC0gYXogKiBieTtcblx0XHR0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBiejtcblx0XHR0aGlzLnogPSBheCAqIGJ5IC0gYXkgKiBieDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cHJvamVjdE9uVmVjdG9yOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSB2Lmxlbmd0aFNxKCk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwICk7XG5cblx0XHR2YXIgc2NhbGFyID0gdi5kb3QoIHRoaXMgKSAvIGRlbm9taW5hdG9yO1xuXG5cdFx0cmV0dXJuIHRoaXMuY29weSggdiApLm11bHRpcGx5U2NhbGFyKCBzY2FsYXIgKTtcblxuXHR9LFxuXG5cdHByb2plY3RPblBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lTm9ybWFsICkge1xuXG5cdFx0X3ZlY3Rvci5jb3B5KCB0aGlzICkucHJvamVjdE9uVmVjdG9yKCBwbGFuZU5vcm1hbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc3ViKCBfdmVjdG9yICk7XG5cblx0fSxcblxuXHRyZWZsZWN0OiBmdW5jdGlvbiAoIG5vcm1hbCApIHtcblxuXHRcdC8vIHJlZmxlY3QgaW5jaWRlbnQgdmVjdG9yIG9mZiBwbGFuZSBvcnRob2dvbmFsIHRvIG5vcm1hbFxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGhhdmUgdW5pdCBsZW5ndGhcblxuXHRcdHJldHVybiB0aGlzLnN1YiggX3ZlY3Rvci5jb3B5KCBub3JtYWwgKS5tdWx0aXBseVNjYWxhciggMiAqIHRoaXMuZG90KCBub3JtYWwgKSApICk7XG5cblx0fSxcblxuXHRhbmdsZVRvOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBNYXRoLnNxcnQoIHRoaXMubGVuZ3RoU3EoKSAqIHYubGVuZ3RoU3EoKSApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHJldHVybiBNYXRoLlBJIC8gMjtcblxuXHRcdHZhciB0aGV0YSA9IHRoaXMuZG90KCB2ICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdC8vIGNsYW1wLCB0byBoYW5kbGUgbnVtZXJpY2FsIHByb2JsZW1zXG5cblx0XHRyZXR1cm4gTWF0aC5hY29zKCBNYXRoVXRpbHMuY2xhbXAoIHRoZXRhLCAtIDEsIDEgKSApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguc3FydCggdGhpcy5kaXN0YW5jZVRvU3F1YXJlZCggdiApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvU3F1YXJlZDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dmFyIGR4ID0gdGhpcy54IC0gdi54LCBkeSA9IHRoaXMueSAtIHYueSwgZHogPSB0aGlzLnogLSB2Lno7XG5cblx0XHRyZXR1cm4gZHggKiBkeCArIGR5ICogZHkgKyBkeiAqIGR6O1xuXG5cdH0sXG5cblx0bWFuaGF0dGFuRGlzdGFuY2VUbzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB0aGlzLnggLSB2LnggKSArIE1hdGguYWJzKCB0aGlzLnkgLSB2LnkgKSArIE1hdGguYWJzKCB0aGlzLnogLSB2LnogKTtcblxuXHR9LFxuXG5cdHNldEZyb21TcGhlcmljYWw6IGZ1bmN0aW9uICggcyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21TcGhlcmljYWxDb29yZHMoIHMucmFkaXVzLCBzLnBoaSwgcy50aGV0YSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbVNwaGVyaWNhbENvb3JkczogZnVuY3Rpb24gKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHR2YXIgc2luUGhpUmFkaXVzID0gTWF0aC5zaW4oIHBoaSApICogcmFkaXVzO1xuXG5cdFx0dGhpcy54ID0gc2luUGhpUmFkaXVzICogTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0dGhpcy55ID0gTWF0aC5jb3MoIHBoaSApICogcmFkaXVzO1xuXHRcdHRoaXMueiA9IHNpblBoaVJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQ3lsaW5kcmljYWw6IGZ1bmN0aW9uICggYyApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldEZyb21DeWxpbmRyaWNhbENvb3JkcyggYy5yYWRpdXMsIGMudGhldGEsIGMueSApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUN5bGluZHJpY2FsQ29vcmRzOiBmdW5jdGlvbiAoIHJhZGl1cywgdGhldGEsIHkgKSB7XG5cblx0XHR0aGlzLnggPSByYWRpdXMgKiBNYXRoLnNpbiggdGhldGEgKTtcblx0XHR0aGlzLnkgPSB5O1xuXHRcdHRoaXMueiA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4UG9zaXRpb246IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBlID0gbS5lbGVtZW50cztcblxuXHRcdHRoaXMueCA9IGVbIDEyIF07XG5cdFx0dGhpcy55ID0gZVsgMTMgXTtcblx0XHR0aGlzLnogPSBlWyAxNCBdO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tTWF0cml4U2NhbGU6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdHZhciBzeCA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMCApLmxlbmd0aCgpO1xuXHRcdHZhciBzeSA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMSApLmxlbmd0aCgpO1xuXHRcdHZhciBzeiA9IHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGhpcy54ID0gc3g7XG5cdFx0dGhpcy55ID0gc3k7XG5cdFx0dGhpcy56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21NYXRyaXhDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogNCApO1xuXG5cdH0sXG5cblx0c2V0RnJvbU1hdHJpeDNDb2x1bW46IGZ1bmN0aW9uICggbSwgaW5kZXggKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5mcm9tQXJyYXkoIG0uZWxlbWVudHMsIGluZGV4ICogMyApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRyZXR1cm4gKCAoIHYueCA9PT0gdGhpcy54ICkgJiYgKCB2LnkgPT09IHRoaXMueSApICYmICggdi56ID09PSB0aGlzLnogKSApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMueCA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLnkgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMueiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLng7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMueTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy56O1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiBvZmZzZXQgaGFzIGJlZW4gcmVtb3ZlZCBmcm9tIC5mcm9tQnVmZmVyQXR0cmlidXRlKCkuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy54ID0gYXR0cmlidXRlLmdldFgoIGluZGV4ICk7XG5cdFx0dGhpcy55ID0gYXR0cmlidXRlLmdldFkoIGluZGV4ICk7XG5cdFx0dGhpcy56ID0gYXR0cmlidXRlLmdldFooIGluZGV4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxudmFyIF92MSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX20xID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfemVybyA9IG5ldyBWZWN0b3IzKCAwLCAwLCAwICk7XG52YXIgX29uZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG52YXIgX3ggPSBuZXcgVmVjdG9yMygpO1xudmFyIF95ID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfeiA9IG5ldyBWZWN0b3IzKCk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIHBoaWxvZ2IgLyBodHRwOi8vYmxvZy50aGVqaXQub3JnL1xuICogQGF1dGhvciBqb3JkaV9yb3MgLyBodHRwOi8vcGxhdHRzb2Z0LmNvbVxuICogQGF1dGhvciBEMXBsbzFkIC8gaHR0cDovL2dpdGh1Yi5jb20vRDFwbG8xZFxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIHRpbWtuaXAgLyBodHRwOi8vd3d3LmZsb29ycGxhbm5lci5jb20vXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBNYXRyaXg0KCkge1xuXG5cdHRoaXMuZWxlbWVudHMgPSBbXG5cblx0XHQxLCAwLCAwLCAwLFxuXHRcdDAsIDEsIDAsIDAsXG5cdFx0MCwgMCwgMSwgMCxcblx0XHQwLCAwLCAwLCAxXG5cblx0XTtcblxuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAwICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IHRoZSBjb25zdHJ1Y3RvciBubyBsb25nZXIgcmVhZHMgYXJndW1lbnRzLiB1c2UgLnNldCgpIGluc3RlYWQuJyApO1xuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBNYXRyaXg0LnByb3RvdHlwZSwge1xuXG5cdGlzTWF0cml4NDogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggbjExLCBuMTIsIG4xMywgbjE0LCBuMjEsIG4yMiwgbjIzLCBuMjQsIG4zMSwgbjMyLCBuMzMsIG4zNCwgbjQxLCBuNDIsIG40MywgbjQ0ICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gPSBuMTE7IHRlWyA0IF0gPSBuMTI7IHRlWyA4IF0gPSBuMTM7IHRlWyAxMiBdID0gbjE0O1xuXHRcdHRlWyAxIF0gPSBuMjE7IHRlWyA1IF0gPSBuMjI7IHRlWyA5IF0gPSBuMjM7IHRlWyAxMyBdID0gbjI0O1xuXHRcdHRlWyAyIF0gPSBuMzE7IHRlWyA2IF0gPSBuMzI7IHRlWyAxMCBdID0gbjMzOyB0ZVsgMTQgXSA9IG4zNDtcblx0XHR0ZVsgMyBdID0gbjQxOyB0ZVsgNyBdID0gbjQyOyB0ZVsgMTEgXSA9IG40MzsgdGVbIDE1IF0gPSBuNDQ7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGlkZW50aXR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgMCwgMCwgMCxcblx0XHRcdDAsIDEsIDAsIDAsXG5cdFx0XHQwLCAwLCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgTWF0cml4NCgpLmZyb21BcnJheSggdGhpcy5lbGVtZW50cyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblx0XHR2YXIgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF07IHRlWyAxIF0gPSBtZVsgMSBdOyB0ZVsgMiBdID0gbWVbIDIgXTsgdGVbIDMgXSA9IG1lWyAzIF07XG5cdFx0dGVbIDQgXSA9IG1lWyA0IF07IHRlWyA1IF0gPSBtZVsgNSBdOyB0ZVsgNiBdID0gbWVbIDYgXTsgdGVbIDcgXSA9IG1lWyA3IF07XG5cdFx0dGVbIDggXSA9IG1lWyA4IF07IHRlWyA5IF0gPSBtZVsgOSBdOyB0ZVsgMTAgXSA9IG1lWyAxMCBdOyB0ZVsgMTEgXSA9IG1lWyAxMSBdO1xuXHRcdHRlWyAxMiBdID0gbWVbIDEyIF07IHRlWyAxMyBdID0gbWVbIDEzIF07IHRlWyAxNCBdID0gbWVbIDE0IF07IHRlWyAxNSBdID0gbWVbIDE1IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cywgbWUgPSBtLmVsZW1lbnRzO1xuXG5cdFx0dGVbIDEyIF0gPSBtZVsgMTIgXTtcblx0XHR0ZVsgMTMgXSA9IG1lWyAxMyBdO1xuXHRcdHRlWyAxNCBdID0gbWVbIDE0IF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4dHJhY3RCYXNpczogZnVuY3Rpb24gKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0eEF4aXMuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMCApO1xuXHRcdHlBeGlzLnNldEZyb21NYXRyaXhDb2x1bW4oIHRoaXMsIDEgKTtcblx0XHR6QXhpcy5zZXRGcm9tTWF0cml4Q29sdW1uKCB0aGlzLCAyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VCYXNpczogZnVuY3Rpb24gKCB4QXhpcywgeUF4aXMsIHpBeGlzICkge1xuXG5cdFx0dGhpcy5zZXQoXG5cdFx0XHR4QXhpcy54LCB5QXhpcy54LCB6QXhpcy54LCAwLFxuXHRcdFx0eEF4aXMueSwgeUF4aXMueSwgekF4aXMueSwgMCxcblx0XHRcdHhBeGlzLnosIHlBeGlzLnosIHpBeGlzLnosIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXh0cmFjdFJvdGF0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHQvLyB0aGlzIG1ldGhvZCBkb2VzIG5vdCBzdXBwb3J0IHJlZmxlY3Rpb24gbWF0cmljZXNcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbS5lbGVtZW50cztcblxuXHRcdHZhciBzY2FsZVggPSAxIC8gX3YxLnNldEZyb21NYXRyaXhDb2x1bW4oIG0sIDAgKS5sZW5ndGgoKTtcblx0XHR2YXIgc2NhbGVZID0gMSAvIF92MS5zZXRGcm9tTWF0cml4Q29sdW1uKCBtLCAxICkubGVuZ3RoKCk7XG5cdFx0dmFyIHNjYWxlWiA9IDEgLyBfdjEuc2V0RnJvbU1hdHJpeENvbHVtbiggbSwgMiApLmxlbmd0aCgpO1xuXG5cdFx0dGVbIDAgXSA9IG1lWyAwIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDEgXSA9IG1lWyAxIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDIgXSA9IG1lWyAyIF0gKiBzY2FsZVg7XG5cdFx0dGVbIDMgXSA9IDA7XG5cblx0XHR0ZVsgNCBdID0gbWVbIDQgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNSBdID0gbWVbIDUgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNiBdID0gbWVbIDYgXSAqIHNjYWxlWTtcblx0XHR0ZVsgNyBdID0gMDtcblxuXHRcdHRlWyA4IF0gPSBtZVsgOCBdICogc2NhbGVaO1xuXHRcdHRlWyA5IF0gPSBtZVsgOSBdICogc2NhbGVaO1xuXHRcdHRlWyAxMCBdID0gbWVbIDEwIF0gKiBzY2FsZVo7XG5cdFx0dGVbIDExIF0gPSAwO1xuXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25Gcm9tRXVsZXI6IGZ1bmN0aW9uICggZXVsZXIgKSB7XG5cblx0XHRpZiAoICEgKCBldWxlciAmJiBldWxlci5pc0V1bGVyICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAubWFrZVJvdGF0aW9uRnJvbUV1bGVyKCkgbm93IGV4cGVjdHMgYSBFdWxlciByb3RhdGlvbiByYXRoZXIgdGhhbiBhIFZlY3RvcjMgYW5kIG9yZGVyLicgKTtcblxuXHRcdH1cblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgeCA9IGV1bGVyLngsIHkgPSBldWxlci55LCB6ID0gZXVsZXIuejtcblx0XHR2YXIgYSA9IE1hdGguY29zKCB4ICksIGIgPSBNYXRoLnNpbiggeCApO1xuXHRcdHZhciBjID0gTWF0aC5jb3MoIHkgKSwgZCA9IE1hdGguc2luKCB5ICk7XG5cdFx0dmFyIGUgPSBNYXRoLmNvcyggeiApLCBmID0gTWF0aC5zaW4oIHogKTtcblxuXHRcdGlmICggZXVsZXIub3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHR2YXIgYWUgPSBhICogZSwgYWYgPSBhICogZiwgYmUgPSBiICogZSwgYmYgPSBiICogZjtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gYyAqIGY7XG5cdFx0XHR0ZVsgOCBdID0gZDtcblxuXHRcdFx0dGVbIDEgXSA9IGFmICsgYmUgKiBkO1xuXHRcdFx0dGVbIDUgXSA9IGFlIC0gYmYgKiBkO1xuXHRcdFx0dGVbIDkgXSA9IC0gYiAqIGM7XG5cblx0XHRcdHRlWyAyIF0gPSBiZiAtIGFlICogZDtcblx0XHRcdHRlWyA2IF0gPSBiZSArIGFmICogZDtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1lYWicgKSB7XG5cblx0XHRcdHZhciBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gY2UgKyBkZiAqIGI7XG5cdFx0XHR0ZVsgNCBdID0gZGUgKiBiIC0gY2Y7XG5cdFx0XHR0ZVsgOCBdID0gYSAqIGQ7XG5cblx0XHRcdHRlWyAxIF0gPSBhICogZjtcblx0XHRcdHRlWyA1IF0gPSBhICogZTtcblx0XHRcdHRlWyA5IF0gPSAtIGI7XG5cblx0XHRcdHRlWyAyIF0gPSBjZiAqIGIgLSBkZTtcblx0XHRcdHRlWyA2IF0gPSBkZiArIGNlICogYjtcblx0XHRcdHRlWyAxMCBdID0gYSAqIGM7XG5cblx0XHR9IGVsc2UgaWYgKCBldWxlci5vcmRlciA9PT0gJ1pYWScgKSB7XG5cblx0XHRcdHZhciBjZSA9IGMgKiBlLCBjZiA9IGMgKiBmLCBkZSA9IGQgKiBlLCBkZiA9IGQgKiBmO1xuXG5cdFx0XHR0ZVsgMCBdID0gY2UgLSBkZiAqIGI7XG5cdFx0XHR0ZVsgNCBdID0gLSBhICogZjtcblx0XHRcdHRlWyA4IF0gPSBkZSArIGNmICogYjtcblxuXHRcdFx0dGVbIDEgXSA9IGNmICsgZGUgKiBiO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IGRmIC0gY2UgKiBiO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBhICogZDtcblx0XHRcdHRlWyA2IF0gPSBiO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWllYJyApIHtcblxuXHRcdFx0dmFyIGFlID0gYSAqIGUsIGFmID0gYSAqIGYsIGJlID0gYiAqIGUsIGJmID0gYiAqIGY7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZSAqIGQgLSBhZjtcblx0XHRcdHRlWyA4IF0gPSBhZSAqIGQgKyBiZjtcblxuXHRcdFx0dGVbIDEgXSA9IGMgKiBmO1xuXHRcdFx0dGVbIDUgXSA9IGJmICogZCArIGFlO1xuXHRcdFx0dGVbIDkgXSA9IGFmICogZCAtIGJlO1xuXG5cdFx0XHR0ZVsgMiBdID0gLSBkO1xuXHRcdFx0dGVbIDYgXSA9IGIgKiBjO1xuXHRcdFx0dGVbIDEwIF0gPSBhICogYztcblxuXHRcdH0gZWxzZSBpZiAoIGV1bGVyLm9yZGVyID09PSAnWVpYJyApIHtcblxuXHRcdFx0dmFyIGFjID0gYSAqIGMsIGFkID0gYSAqIGQsIGJjID0gYiAqIGMsIGJkID0gYiAqIGQ7XG5cblx0XHRcdHRlWyAwIF0gPSBjICogZTtcblx0XHRcdHRlWyA0IF0gPSBiZCAtIGFjICogZjtcblx0XHRcdHRlWyA4IF0gPSBiYyAqIGYgKyBhZDtcblxuXHRcdFx0dGVbIDEgXSA9IGY7XG5cdFx0XHR0ZVsgNSBdID0gYSAqIGU7XG5cdFx0XHR0ZVsgOSBdID0gLSBiICogZTtcblxuXHRcdFx0dGVbIDIgXSA9IC0gZCAqIGU7XG5cdFx0XHR0ZVsgNiBdID0gYWQgKiBmICsgYmM7XG5cdFx0XHR0ZVsgMTAgXSA9IGFjIC0gYmQgKiBmO1xuXG5cdFx0fSBlbHNlIGlmICggZXVsZXIub3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR2YXIgYWMgPSBhICogYywgYWQgPSBhICogZCwgYmMgPSBiICogYywgYmQgPSBiICogZDtcblxuXHRcdFx0dGVbIDAgXSA9IGMgKiBlO1xuXHRcdFx0dGVbIDQgXSA9IC0gZjtcblx0XHRcdHRlWyA4IF0gPSBkICogZTtcblxuXHRcdFx0dGVbIDEgXSA9IGFjICogZiArIGJkO1xuXHRcdFx0dGVbIDUgXSA9IGEgKiBlO1xuXHRcdFx0dGVbIDkgXSA9IGFkICogZiAtIGJjO1xuXG5cdFx0XHR0ZVsgMiBdID0gYmMgKiBmIC0gYWQ7XG5cdFx0XHR0ZVsgNiBdID0gYiAqIGU7XG5cdFx0XHR0ZVsgMTAgXSA9IGJkICogZiArIGFjO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm90dG9tIHJvd1xuXHRcdHRlWyAzIF0gPSAwO1xuXHRcdHRlWyA3IF0gPSAwO1xuXHRcdHRlWyAxMSBdID0gMDtcblxuXHRcdC8vIGxhc3QgY29sdW1uXG5cdFx0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMTQgXSA9IDA7XG5cdFx0dGVbIDE1IF0gPSAxO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuY29tcG9zZSggX3plcm8sIHEsIF9vbmUgKTtcblxuXHR9LFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCBleWUsIHRhcmdldCwgdXAgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0X3ouc3ViVmVjdG9ycyggZXllLCB0YXJnZXQgKTtcblxuXHRcdGlmICggX3oubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gZXllIGFuZCB0YXJnZXQgYXJlIGluIHRoZSBzYW1lIHBvc2l0aW9uXG5cblx0XHRcdF96LnogPSAxO1xuXG5cdFx0fVxuXG5cdFx0X3oubm9ybWFsaXplKCk7XG5cdFx0X3guY3Jvc3NWZWN0b3JzKCB1cCwgX3ogKTtcblxuXHRcdGlmICggX3gubGVuZ3RoU3EoKSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gdXAgYW5kIHogYXJlIHBhcmFsbGVsXG5cblx0XHRcdGlmICggTWF0aC5hYnMoIHVwLnogKSA9PT0gMSApIHtcblxuXHRcdFx0XHRfei54ICs9IDAuMDAwMTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfei56ICs9IDAuMDAwMTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfei5ub3JtYWxpemUoKTtcblx0XHRcdF94LmNyb3NzVmVjdG9ycyggdXAsIF96ICk7XG5cblx0XHR9XG5cblx0XHRfeC5ub3JtYWxpemUoKTtcblx0XHRfeS5jcm9zc1ZlY3RvcnMoIF96LCBfeCApO1xuXG5cdFx0dGVbIDAgXSA9IF94Lng7IHRlWyA0IF0gPSBfeS54OyB0ZVsgOCBdID0gX3oueDtcblx0XHR0ZVsgMSBdID0gX3gueTsgdGVbIDUgXSA9IF95Lnk7IHRlWyA5IF0gPSBfei55O1xuXHRcdHRlWyAyIF0gPSBfeC56OyB0ZVsgNiBdID0gX3kuejsgdGVbIDEwIF0gPSBfei56O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseTogZnVuY3Rpb24gKCBtLCBuICkge1xuXG5cdFx0aWYgKCBuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseSgpIG5vdyBvbmx5IGFjY2VwdHMgb25lIGFyZ3VtZW50LiBVc2UgLm11bHRpcGx5TWF0cmljZXMoIGEsIGIgKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIG0sIG4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXMoIHRoaXMsIG0gKTtcblxuXHR9LFxuXG5cdHByZW11bHRpcGx5OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKCBtLCB0aGlzICk7XG5cblx0fSxcblxuXHRtdWx0aXBseU1hdHJpY2VzOiBmdW5jdGlvbiAoIGEsIGIgKSB7XG5cblx0XHR2YXIgYWUgPSBhLmVsZW1lbnRzO1xuXHRcdHZhciBiZSA9IGIuZWxlbWVudHM7XG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBhMTEgPSBhZVsgMCBdLCBhMTIgPSBhZVsgNCBdLCBhMTMgPSBhZVsgOCBdLCBhMTQgPSBhZVsgMTIgXTtcblx0XHR2YXIgYTIxID0gYWVbIDEgXSwgYTIyID0gYWVbIDUgXSwgYTIzID0gYWVbIDkgXSwgYTI0ID0gYWVbIDEzIF07XG5cdFx0dmFyIGEzMSA9IGFlWyAyIF0sIGEzMiA9IGFlWyA2IF0sIGEzMyA9IGFlWyAxMCBdLCBhMzQgPSBhZVsgMTQgXTtcblx0XHR2YXIgYTQxID0gYWVbIDMgXSwgYTQyID0gYWVbIDcgXSwgYTQzID0gYWVbIDExIF0sIGE0NCA9IGFlWyAxNSBdO1xuXG5cdFx0dmFyIGIxMSA9IGJlWyAwIF0sIGIxMiA9IGJlWyA0IF0sIGIxMyA9IGJlWyA4IF0sIGIxNCA9IGJlWyAxMiBdO1xuXHRcdHZhciBiMjEgPSBiZVsgMSBdLCBiMjIgPSBiZVsgNSBdLCBiMjMgPSBiZVsgOSBdLCBiMjQgPSBiZVsgMTMgXTtcblx0XHR2YXIgYjMxID0gYmVbIDIgXSwgYjMyID0gYmVbIDYgXSwgYjMzID0gYmVbIDEwIF0sIGIzNCA9IGJlWyAxNCBdO1xuXHRcdHZhciBiNDEgPSBiZVsgMyBdLCBiNDIgPSBiZVsgNyBdLCBiNDMgPSBiZVsgMTEgXSwgYjQ0ID0gYmVbIDE1IF07XG5cblx0XHR0ZVsgMCBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxO1xuXHRcdHRlWyA0IF0gPSBhMTEgKiBiMTIgKyBhMTIgKiBiMjIgKyBhMTMgKiBiMzIgKyBhMTQgKiBiNDI7XG5cdFx0dGVbIDggXSA9IGExMSAqIGIxMyArIGExMiAqIGIyMyArIGExMyAqIGIzMyArIGExNCAqIGI0Mztcblx0XHR0ZVsgMTIgXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NDtcblxuXHRcdHRlWyAxIF0gPSBhMjEgKiBiMTEgKyBhMjIgKiBiMjEgKyBhMjMgKiBiMzEgKyBhMjQgKiBiNDE7XG5cdFx0dGVbIDUgXSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0Mjtcblx0XHR0ZVsgOSBdID0gYTIxICogYjEzICsgYTIyICogYjIzICsgYTIzICogYjMzICsgYTI0ICogYjQzO1xuXHRcdHRlWyAxMyBdID0gYTIxICogYjE0ICsgYTIyICogYjI0ICsgYTIzICogYjM0ICsgYTI0ICogYjQ0O1xuXG5cdFx0dGVbIDIgXSA9IGEzMSAqIGIxMSArIGEzMiAqIGIyMSArIGEzMyAqIGIzMSArIGEzNCAqIGI0MTtcblx0XHR0ZVsgNiBdID0gYTMxICogYjEyICsgYTMyICogYjIyICsgYTMzICogYjMyICsgYTM0ICogYjQyO1xuXHRcdHRlWyAxMCBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzO1xuXHRcdHRlWyAxNCBdID0gYTMxICogYjE0ICsgYTMyICogYjI0ICsgYTMzICogYjM0ICsgYTM0ICogYjQ0O1xuXG5cdFx0dGVbIDMgXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MTtcblx0XHR0ZVsgNyBdID0gYTQxICogYjEyICsgYTQyICogYjIyICsgYTQzICogYjMyICsgYTQ0ICogYjQyO1xuXHRcdHRlWyAxMSBdID0gYTQxICogYjEzICsgYTQyICogYjIzICsgYTQzICogYjMzICsgYTQ0ICogYjQzO1xuXHRcdHRlWyAxNSBdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtdWx0aXBseVNjYWxhcjogZnVuY3Rpb24gKCBzICkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHRlWyAwIF0gKj0gczsgdGVbIDQgXSAqPSBzOyB0ZVsgOCBdICo9IHM7IHRlWyAxMiBdICo9IHM7XG5cdFx0dGVbIDEgXSAqPSBzOyB0ZVsgNSBdICo9IHM7IHRlWyA5IF0gKj0gczsgdGVbIDEzIF0gKj0gcztcblx0XHR0ZVsgMiBdICo9IHM7IHRlWyA2IF0gKj0gczsgdGVbIDEwIF0gKj0gczsgdGVbIDE0IF0gKj0gcztcblx0XHR0ZVsgMyBdICo9IHM7IHRlWyA3IF0gKj0gczsgdGVbIDExIF0gKj0gczsgdGVbIDE1IF0gKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGV0ZXJtaW5hbnQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cblx0XHR2YXIgbjExID0gdGVbIDAgXSwgbjEyID0gdGVbIDQgXSwgbjEzID0gdGVbIDggXSwgbjE0ID0gdGVbIDEyIF07XG5cdFx0dmFyIG4yMSA9IHRlWyAxIF0sIG4yMiA9IHRlWyA1IF0sIG4yMyA9IHRlWyA5IF0sIG4yNCA9IHRlWyAxMyBdO1xuXHRcdHZhciBuMzEgPSB0ZVsgMiBdLCBuMzIgPSB0ZVsgNiBdLCBuMzMgPSB0ZVsgMTAgXSwgbjM0ID0gdGVbIDE0IF07XG5cdFx0dmFyIG40MSA9IHRlWyAzIF0sIG40MiA9IHRlWyA3IF0sIG40MyA9IHRlWyAxMSBdLCBuNDQgPSB0ZVsgMTUgXTtcblxuXHRcdC8vVE9ETzogbWFrZSB0aGlzIG1vcmUgZWZmaWNpZW50XG5cdFx0Ly8oIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bSApXG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0bjQxICogKFxuXHRcdFx0XHQrIG4xNCAqIG4yMyAqIG4zMlxuXHRcdFx0XHQgLSBuMTMgKiBuMjQgKiBuMzJcblx0XHRcdFx0IC0gbjE0ICogbjIyICogbjMzXG5cdFx0XHRcdCArIG4xMiAqIG4yNCAqIG4zM1xuXHRcdFx0XHQgKyBuMTMgKiBuMjIgKiBuMzRcblx0XHRcdFx0IC0gbjEyICogbjIzICogbjM0XG5cdFx0XHQpICtcblx0XHRcdG40MiAqIChcblx0XHRcdFx0KyBuMTEgKiBuMjMgKiBuMzRcblx0XHRcdFx0IC0gbjExICogbjI0ICogbjMzXG5cdFx0XHRcdCArIG4xNCAqIG4yMSAqIG4zM1xuXHRcdFx0XHQgLSBuMTMgKiBuMjEgKiBuMzRcblx0XHRcdFx0ICsgbjEzICogbjI0ICogbjMxXG5cdFx0XHRcdCAtIG4xNCAqIG4yMyAqIG4zMVxuXHRcdFx0KSArXG5cdFx0XHRuNDMgKiAoXG5cdFx0XHRcdCsgbjExICogbjI0ICogbjMyXG5cdFx0XHRcdCAtIG4xMSAqIG4yMiAqIG4zNFxuXHRcdFx0XHQgLSBuMTQgKiBuMjEgKiBuMzJcblx0XHRcdFx0ICsgbjEyICogbjIxICogbjM0XG5cdFx0XHRcdCArIG4xNCAqIG4yMiAqIG4zMVxuXHRcdFx0XHQgLSBuMTIgKiBuMjQgKiBuMzFcblx0XHRcdCkgK1xuXHRcdFx0bjQ0ICogKFxuXHRcdFx0XHQtIG4xMyAqIG4yMiAqIG4zMVxuXHRcdFx0XHQgLSBuMTEgKiBuMjMgKiBuMzJcblx0XHRcdFx0ICsgbjExICogbjIyICogbjMzXG5cdFx0XHRcdCArIG4xMyAqIG4yMSAqIG4zMlxuXHRcdFx0XHQgLSBuMTIgKiBuMjEgKiBuMzNcblx0XHRcdFx0ICsgbjEyICogbjIzICogbjMxXG5cdFx0XHQpXG5cblx0XHQpO1xuXG5cdH0sXG5cblx0dHJhbnNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB0bXA7XG5cblx0XHR0bXAgPSB0ZVsgMSBdOyB0ZVsgMSBdID0gdGVbIDQgXTsgdGVbIDQgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMiBdOyB0ZVsgMiBdID0gdGVbIDggXTsgdGVbIDggXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgNiBdOyB0ZVsgNiBdID0gdGVbIDkgXTsgdGVbIDkgXSA9IHRtcDtcblxuXHRcdHRtcCA9IHRlWyAzIF07IHRlWyAzIF0gPSB0ZVsgMTIgXTsgdGVbIDEyIF0gPSB0bXA7XG5cdFx0dG1wID0gdGVbIDcgXTsgdGVbIDcgXSA9IHRlWyAxMyBdOyB0ZVsgMTMgXSA9IHRtcDtcblx0XHR0bXAgPSB0ZVsgMTEgXTsgdGVbIDExIF0gPSB0ZVsgMTQgXTsgdGVbIDE0IF0gPSB0bXA7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBvc2l0aW9uOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yMyApIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4Lng7XG5cdFx0XHR0ZVsgMTMgXSA9IHgueTtcblx0XHRcdHRlWyAxNCBdID0geC56O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGVbIDEyIF0gPSB4O1xuXHRcdFx0dGVbIDEzIF0gPSB5O1xuXHRcdFx0dGVbIDE0IF0gPSB6O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRJbnZlcnNlOiBmdW5jdGlvbiAoIG0sIHRocm93T25EZWdlbmVyYXRlICkge1xuXG5cdFx0aWYgKCB0aHJvd09uRGVnZW5lcmF0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuTWF0cml4NDogLmdldEludmVyc2UoKSBjYW4gbm8gbG9uZ2VyIGJlIGNvbmZpZ3VyZWQgdG8gdGhyb3cgb24gZGVnZW5lcmF0ZS5cIiApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYmFzZWQgb24gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvYWxnZWJyYS9tYXRyaXgvZnVuY3Rpb25zL2ludmVyc2UvZm91ckQvaW5kZXguaHRtXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cyxcblx0XHRcdG1lID0gbS5lbGVtZW50cyxcblxuXHRcdFx0bjExID0gbWVbIDAgXSwgbjIxID0gbWVbIDEgXSwgbjMxID0gbWVbIDIgXSwgbjQxID0gbWVbIDMgXSxcblx0XHRcdG4xMiA9IG1lWyA0IF0sIG4yMiA9IG1lWyA1IF0sIG4zMiA9IG1lWyA2IF0sIG40MiA9IG1lWyA3IF0sXG5cdFx0XHRuMTMgPSBtZVsgOCBdLCBuMjMgPSBtZVsgOSBdLCBuMzMgPSBtZVsgMTAgXSwgbjQzID0gbWVbIDExIF0sXG5cdFx0XHRuMTQgPSBtZVsgMTIgXSwgbjI0ID0gbWVbIDEzIF0sIG4zNCA9IG1lWyAxNCBdLCBuNDQgPSBtZVsgMTUgXSxcblxuXHRcdFx0dDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LFxuXHRcdFx0dDEyID0gbjE0ICogbjMzICogbjQyIC0gbjEzICogbjM0ICogbjQyIC0gbjE0ICogbjMyICogbjQzICsgbjEyICogbjM0ICogbjQzICsgbjEzICogbjMyICogbjQ0IC0gbjEyICogbjMzICogbjQ0LFxuXHRcdFx0dDEzID0gbjEzICogbjI0ICogbjQyIC0gbjE0ICogbjIzICogbjQyICsgbjE0ICogbjIyICogbjQzIC0gbjEyICogbjI0ICogbjQzIC0gbjEzICogbjIyICogbjQ0ICsgbjEyICogbjIzICogbjQ0LFxuXHRcdFx0dDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0O1xuXG5cdFx0dmFyIGRldCA9IG4xMSAqIHQxMSArIG4yMSAqIHQxMiArIG4zMSAqIHQxMyArIG40MSAqIHQxNDtcblxuXHRcdGlmICggZGV0ID09PSAwICkgcmV0dXJuIHRoaXMuc2V0KCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwICk7XG5cblx0XHR2YXIgZGV0SW52ID0gMSAvIGRldDtcblxuXHRcdHRlWyAwIF0gPSB0MTEgKiBkZXRJbnY7XG5cdFx0dGVbIDEgXSA9ICggbjI0ICogbjMzICogbjQxIC0gbjIzICogbjM0ICogbjQxIC0gbjI0ICogbjMxICogbjQzICsgbjIxICogbjM0ICogbjQzICsgbjIzICogbjMxICogbjQ0IC0gbjIxICogbjMzICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDIgXSA9ICggbjIyICogbjM0ICogbjQxIC0gbjI0ICogbjMyICogbjQxICsgbjI0ICogbjMxICogbjQyIC0gbjIxICogbjM0ICogbjQyIC0gbjIyICogbjMxICogbjQ0ICsgbjIxICogbjMyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDMgXSA9ICggbjIzICogbjMyICogbjQxIC0gbjIyICogbjMzICogbjQxIC0gbjIzICogbjMxICogbjQyICsgbjIxICogbjMzICogbjQyICsgbjIyICogbjMxICogbjQzIC0gbjIxICogbjMyICogbjQzICkgKiBkZXRJbnY7XG5cblx0XHR0ZVsgNCBdID0gdDEyICogZGV0SW52O1xuXHRcdHRlWyA1IF0gPSAoIG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA2IF0gPSAoIG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCApICogZGV0SW52O1xuXHRcdHRlWyA3IF0gPSAoIG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDggXSA9IHQxMyAqIGRldEludjtcblx0XHR0ZVsgOSBdID0gKCBuMTQgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjQgKiBuNDEgLSBuMTQgKiBuMjEgKiBuNDMgKyBuMTEgKiBuMjQgKiBuNDMgKyBuMTMgKiBuMjEgKiBuNDQgLSBuMTEgKiBuMjMgKiBuNDQgKSAqIGRldEludjtcblx0XHR0ZVsgMTAgXSA9ICggbjEyICogbjI0ICogbjQxIC0gbjE0ICogbjIyICogbjQxICsgbjE0ICogbjIxICogbjQyIC0gbjExICogbjI0ICogbjQyIC0gbjEyICogbjIxICogbjQ0ICsgbjExICogbjIyICogbjQ0ICkgKiBkZXRJbnY7XG5cdFx0dGVbIDExIF0gPSAoIG4xMyAqIG4yMiAqIG40MSAtIG4xMiAqIG4yMyAqIG40MSAtIG4xMyAqIG4yMSAqIG40MiArIG4xMSAqIG4yMyAqIG40MiArIG4xMiAqIG4yMSAqIG40MyAtIG4xMSAqIG4yMiAqIG40MyApICogZGV0SW52O1xuXG5cdFx0dGVbIDEyIF0gPSB0MTQgKiBkZXRJbnY7XG5cdFx0dGVbIDEzIF0gPSAoIG4xMyAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMyAqIG4zMSArIG4xNCAqIG4yMSAqIG4zMyAtIG4xMSAqIG4yNCAqIG4zMyAtIG4xMyAqIG4yMSAqIG4zNCArIG4xMSAqIG4yMyAqIG4zNCApICogZGV0SW52O1xuXHRcdHRlWyAxNCBdID0gKCBuMTQgKiBuMjIgKiBuMzEgLSBuMTIgKiBuMjQgKiBuMzEgLSBuMTQgKiBuMjEgKiBuMzIgKyBuMTEgKiBuMjQgKiBuMzIgKyBuMTIgKiBuMjEgKiBuMzQgLSBuMTEgKiBuMjIgKiBuMzQgKSAqIGRldEludjtcblx0XHR0ZVsgMTUgXSA9ICggbjEyICogbjIzICogbjMxIC0gbjEzICogbjIyICogbjMxICsgbjEzICogbjIxICogbjMyIC0gbjExICogbjIzICogbjMyIC0gbjEyICogbjIxICogbjMzICsgbjExICogbjIyICogbjMzICkgKiBkZXRJbnY7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gdi54LCB5ID0gdi55LCB6ID0gdi56O1xuXG5cdFx0dGVbIDAgXSAqPSB4OyB0ZVsgNCBdICo9IHk7IHRlWyA4IF0gKj0gejtcblx0XHR0ZVsgMSBdICo9IHg7IHRlWyA1IF0gKj0geTsgdGVbIDkgXSAqPSB6O1xuXHRcdHRlWyAyIF0gKj0geDsgdGVbIDYgXSAqPSB5OyB0ZVsgMTAgXSAqPSB6O1xuXHRcdHRlWyAzIF0gKj0geDsgdGVbIDcgXSAqPSB5OyB0ZVsgMTEgXSAqPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRNYXhTY2FsZU9uQXhpczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdHZhciBzY2FsZVhTcSA9IHRlWyAwIF0gKiB0ZVsgMCBdICsgdGVbIDEgXSAqIHRlWyAxIF0gKyB0ZVsgMiBdICogdGVbIDIgXTtcblx0XHR2YXIgc2NhbGVZU3EgPSB0ZVsgNCBdICogdGVbIDQgXSArIHRlWyA1IF0gKiB0ZVsgNSBdICsgdGVbIDYgXSAqIHRlWyA2IF07XG5cdFx0dmFyIHNjYWxlWlNxID0gdGVbIDggXSAqIHRlWyA4IF0gKyB0ZVsgOSBdICogdGVbIDkgXSArIHRlWyAxMCBdICogdGVbIDEwIF07XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLm1heCggc2NhbGVYU3EsIHNjYWxlWVNxLCBzY2FsZVpTcSApICk7XG5cblx0fSxcblxuXHRtYWtlVHJhbnNsYXRpb246IGZ1bmN0aW9uICggeCwgeSwgeiApIHtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQxLCAwLCAwLCB4LFxuXHRcdFx0MCwgMSwgMCwgeSxcblx0XHRcdDAsIDAsIDEsIHosXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25YOiBmdW5jdGlvbiAoIHRoZXRhICkge1xuXG5cdFx0dmFyIGMgPSBNYXRoLmNvcyggdGhldGEgKSwgcyA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0dGhpcy5zZXQoXG5cblx0XHRcdDEsIDAsIDAsIDAsXG5cdFx0XHQwLCBjLCAtIHMsIDAsXG5cdFx0XHQwLCBzLCBjLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVJvdGF0aW9uWTogZnVuY3Rpb24gKCB0aGV0YSApIHtcblxuXHRcdHZhciBjID0gTWF0aC5jb3MoIHRoZXRhICksIHMgPSBNYXRoLnNpbiggdGhldGEgKTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHQgYywgMCwgcywgMCxcblx0XHRcdCAwLCAxLCAwLCAwLFxuXHRcdFx0LSBzLCAwLCBjLCAwLFxuXHRcdFx0IDAsIDAsIDAsIDFcblxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VSb3RhdGlvblo6IGZ1bmN0aW9uICggdGhldGEgKSB7XG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCB0aGV0YSApLCBzID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0YywgLSBzLCAwLCAwLFxuXHRcdFx0cywgYywgMCwgMCxcblx0XHRcdDAsIDAsIDEsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRtYWtlUm90YXRpb25BeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gQmFzZWQgb24gaHR0cDovL3d3dy5nYW1lZGV2Lm5ldC9yZWZlcmVuY2UvYXJ0aWNsZXMvYXJ0aWNsZTExOTkuYXNwXG5cblx0XHR2YXIgYyA9IE1hdGguY29zKCBhbmdsZSApO1xuXHRcdHZhciBzID0gTWF0aC5zaW4oIGFuZ2xlICk7XG5cdFx0dmFyIHQgPSAxIC0gYztcblx0XHR2YXIgeCA9IGF4aXMueCwgeSA9IGF4aXMueSwgeiA9IGF4aXMuejtcblx0XHR2YXIgdHggPSB0ICogeCwgdHkgPSB0ICogeTtcblxuXHRcdHRoaXMuc2V0KFxuXG5cdFx0XHR0eCAqIHggKyBjLCB0eCAqIHkgLSBzICogeiwgdHggKiB6ICsgcyAqIHksIDAsXG5cdFx0XHR0eCAqIHkgKyBzICogeiwgdHkgKiB5ICsgYywgdHkgKiB6IC0gcyAqIHgsIDAsXG5cdFx0XHR0eCAqIHogLSBzICogeSwgdHkgKiB6ICsgcyAqIHgsIHQgKiB6ICogeiArIGMsIDAsXG5cdFx0XHQwLCAwLCAwLCAxXG5cblx0XHQpO1xuXG5cdFx0IHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0eCwgMCwgMCwgMCxcblx0XHRcdDAsIHksIDAsIDAsXG5cdFx0XHQwLCAwLCB6LCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZVNoZWFyOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHR0aGlzLnNldChcblxuXHRcdFx0MSwgeSwgeiwgMCxcblx0XHRcdHgsIDEsIHosIDAsXG5cdFx0XHR4LCB5LCAxLCAwLFxuXHRcdFx0MCwgMCwgMCwgMVxuXG5cdFx0KTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcG9zZTogZnVuY3Rpb24gKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHggPSBxdWF0ZXJuaW9uLl94LCB5ID0gcXVhdGVybmlvbi5feSwgeiA9IHF1YXRlcm5pb24uX3osIHcgPSBxdWF0ZXJuaW9uLl93O1xuXHRcdHZhciB4MiA9IHggKyB4LFx0eTIgPSB5ICsgeSwgejIgPSB6ICsgejtcblx0XHR2YXIgeHggPSB4ICogeDIsIHh5ID0geCAqIHkyLCB4eiA9IHggKiB6Mjtcblx0XHR2YXIgeXkgPSB5ICogeTIsIHl6ID0geSAqIHoyLCB6eiA9IHogKiB6Mjtcblx0XHR2YXIgd3ggPSB3ICogeDIsIHd5ID0gdyAqIHkyLCB3eiA9IHcgKiB6MjtcblxuXHRcdHZhciBzeCA9IHNjYWxlLngsIHN5ID0gc2NhbGUueSwgc3ogPSBzY2FsZS56O1xuXG5cdFx0dGVbIDAgXSA9ICggMSAtICggeXkgKyB6eiApICkgKiBzeDtcblx0XHR0ZVsgMSBdID0gKCB4eSArIHd6ICkgKiBzeDtcblx0XHR0ZVsgMiBdID0gKCB4eiAtIHd5ICkgKiBzeDtcblx0XHR0ZVsgMyBdID0gMDtcblxuXHRcdHRlWyA0IF0gPSAoIHh5IC0gd3ogKSAqIHN5O1xuXHRcdHRlWyA1IF0gPSAoIDEgLSAoIHh4ICsgenogKSApICogc3k7XG5cdFx0dGVbIDYgXSA9ICggeXogKyB3eCApICogc3k7XG5cdFx0dGVbIDcgXSA9IDA7XG5cblx0XHR0ZVsgOCBdID0gKCB4eiArIHd5ICkgKiBzejtcblx0XHR0ZVsgOSBdID0gKCB5eiAtIHd4ICkgKiBzejtcblx0XHR0ZVsgMTAgXSA9ICggMSAtICggeHggKyB5eSApICkgKiBzejtcblx0XHR0ZVsgMTEgXSA9IDA7XG5cblx0XHR0ZVsgMTIgXSA9IHBvc2l0aW9uLng7XG5cdFx0dGVbIDEzIF0gPSBwb3NpdGlvbi55O1xuXHRcdHRlWyAxNCBdID0gcG9zaXRpb24uejtcblx0XHR0ZVsgMTUgXSA9IDE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRlY29tcG9zZTogZnVuY3Rpb24gKCBwb3NpdGlvbiwgcXVhdGVybmlvbiwgc2NhbGUgKSB7XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXG5cdFx0dmFyIHN4ID0gX3YxLnNldCggdGVbIDAgXSwgdGVbIDEgXSwgdGVbIDIgXSApLmxlbmd0aCgpO1xuXHRcdHZhciBzeSA9IF92MS5zZXQoIHRlWyA0IF0sIHRlWyA1IF0sIHRlWyA2IF0gKS5sZW5ndGgoKTtcblx0XHR2YXIgc3ogPSBfdjEuc2V0KCB0ZVsgOCBdLCB0ZVsgOSBdLCB0ZVsgMTAgXSApLmxlbmd0aCgpO1xuXG5cdFx0Ly8gaWYgZGV0ZXJtaW5lIGlzIG5lZ2F0aXZlLCB3ZSBuZWVkIHRvIGludmVydCBvbmUgc2NhbGVcblx0XHR2YXIgZGV0ID0gdGhpcy5kZXRlcm1pbmFudCgpO1xuXHRcdGlmICggZGV0IDwgMCApIHN4ID0gLSBzeDtcblxuXHRcdHBvc2l0aW9uLnggPSB0ZVsgMTIgXTtcblx0XHRwb3NpdGlvbi55ID0gdGVbIDEzIF07XG5cdFx0cG9zaXRpb24ueiA9IHRlWyAxNCBdO1xuXG5cdFx0Ly8gc2NhbGUgdGhlIHJvdGF0aW9uIHBhcnRcblx0XHRfbTEuY29weSggdGhpcyApO1xuXG5cdFx0dmFyIGludlNYID0gMSAvIHN4O1xuXHRcdHZhciBpbnZTWSA9IDEgLyBzeTtcblx0XHR2YXIgaW52U1ogPSAxIC8gc3o7XG5cblx0XHRfbTEuZWxlbWVudHNbIDAgXSAqPSBpbnZTWDtcblx0XHRfbTEuZWxlbWVudHNbIDEgXSAqPSBpbnZTWDtcblx0XHRfbTEuZWxlbWVudHNbIDIgXSAqPSBpbnZTWDtcblxuXHRcdF9tMS5lbGVtZW50c1sgNCBdICo9IGludlNZO1xuXHRcdF9tMS5lbGVtZW50c1sgNSBdICo9IGludlNZO1xuXHRcdF9tMS5lbGVtZW50c1sgNiBdICo9IGludlNZO1xuXG5cdFx0X20xLmVsZW1lbnRzWyA4IF0gKj0gaW52U1o7XG5cdFx0X20xLmVsZW1lbnRzWyA5IF0gKj0gaW52U1o7XG5cdFx0X20xLmVsZW1lbnRzWyAxMCBdICo9IGludlNaO1xuXG5cdFx0cXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSApO1xuXG5cdFx0c2NhbGUueCA9IHN4O1xuXHRcdHNjYWxlLnkgPSBzeTtcblx0XHRzY2FsZS56ID0gc3o7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG1ha2VQZXJzcGVjdGl2ZTogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRcdGlmICggZmFyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tYWtlUGVyc3BlY3RpdmUoKSBoYXMgYmVlbiByZWRlZmluZWQgYW5kIGhhcyBhIG5ldyBzaWduYXR1cmUuIFBsZWFzZSBjaGVjayB0aGUgZG9jcy4nICk7XG5cblx0XHR9XG5cblx0XHR2YXIgdGUgPSB0aGlzLmVsZW1lbnRzO1xuXHRcdHZhciB4ID0gMiAqIG5lYXIgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdHZhciB5ID0gMiAqIG5lYXIgLyAoIHRvcCAtIGJvdHRvbSApO1xuXG5cdFx0dmFyIGEgPSAoIHJpZ2h0ICsgbGVmdCApIC8gKCByaWdodCAtIGxlZnQgKTtcblx0XHR2YXIgYiA9ICggdG9wICsgYm90dG9tICkgLyAoIHRvcCAtIGJvdHRvbSApO1xuXHRcdHZhciBjID0gLSAoIGZhciArIG5lYXIgKSAvICggZmFyIC0gbmVhciApO1xuXHRcdHZhciBkID0gLSAyICogZmFyICogbmVhciAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0dGVbIDAgXSA9IHg7XHR0ZVsgNCBdID0gMDtcdHRlWyA4IF0gPSBhO1x0dGVbIDEyIF0gPSAwO1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IHk7XHR0ZVsgOSBdID0gYjtcdHRlWyAxMyBdID0gMDtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSBjO1x0dGVbIDE0IF0gPSBkO1xuXHRcdHRlWyAzIF0gPSAwO1x0dGVbIDcgXSA9IDA7XHR0ZVsgMTEgXSA9IC0gMTtcdHRlWyAxNSBdID0gMDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZU9ydGhvZ3JhcGhpYzogZnVuY3Rpb24gKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIHcgPSAxLjAgLyAoIHJpZ2h0IC0gbGVmdCApO1xuXHRcdHZhciBoID0gMS4wIC8gKCB0b3AgLSBib3R0b20gKTtcblx0XHR2YXIgcCA9IDEuMCAvICggZmFyIC0gbmVhciApO1xuXG5cdFx0dmFyIHggPSAoIHJpZ2h0ICsgbGVmdCApICogdztcblx0XHR2YXIgeSA9ICggdG9wICsgYm90dG9tICkgKiBoO1xuXHRcdHZhciB6ID0gKCBmYXIgKyBuZWFyICkgKiBwO1xuXG5cdFx0dGVbIDAgXSA9IDIgKiB3O1x0dGVbIDQgXSA9IDA7XHR0ZVsgOCBdID0gMDtcdHRlWyAxMiBdID0gLSB4O1xuXHRcdHRlWyAxIF0gPSAwO1x0dGVbIDUgXSA9IDIgKiBoO1x0dGVbIDkgXSA9IDA7XHR0ZVsgMTMgXSA9IC0geTtcblx0XHR0ZVsgMiBdID0gMDtcdHRlWyA2IF0gPSAwO1x0dGVbIDEwIF0gPSAtIDIgKiBwO1x0dGVbIDE0IF0gPSAtIHo7XG5cdFx0dGVbIDMgXSA9IDA7XHR0ZVsgNyBdID0gMDtcdHRlWyAxMSBdID0gMDtcdHRlWyAxNSBdID0gMTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHZhciB0ZSA9IHRoaXMuZWxlbWVudHM7XG5cdFx0dmFyIG1lID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgMTY7IGkgKysgKSB7XG5cblx0XHRcdGlmICggdGVbIGkgXSAhPT0gbWVbIGkgXSApIHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDE2OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmVsZW1lbnRzWyBpIF0gPSBhcnJheVsgaSArIG9mZnNldCBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0FycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIGFycmF5ID09PSB1bmRlZmluZWQgKSBhcnJheSA9IFtdO1xuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dmFyIHRlID0gdGhpcy5lbGVtZW50cztcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRlWyAwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRlWyAxIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRlWyAyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRlWyAzIF07XG5cblx0XHRhcnJheVsgb2Zmc2V0ICsgNCBdID0gdGVbIDQgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNSBdID0gdGVbIDUgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNiBdID0gdGVbIDYgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgNyBdID0gdGVbIDcgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyA4IF0gPSB0ZVsgOCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyA5IF0gPSB0ZVsgOSBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxMCBdID0gdGVbIDEwIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDExIF0gPSB0ZVsgMTEgXTtcblxuXHRcdGFycmF5WyBvZmZzZXQgKyAxMiBdID0gdGVbIDEyIF07XG5cdFx0YXJyYXlbIG9mZnNldCArIDEzIF0gPSB0ZVsgMTMgXTtcblx0XHRhcnJheVsgb2Zmc2V0ICsgMTQgXSA9IHRlWyAxNCBdO1xuXHRcdGFycmF5WyBvZmZzZXQgKyAxNSBdID0gdGVbIDE1IF07XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbnZhciBfbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfcXVhdGVybmlvbiQxID0gbmV3IFF1YXRlcm5pb24oKTtcblxuZnVuY3Rpb24gRXVsZXIoIHgsIHksIHosIG9yZGVyICkge1xuXG5cdHRoaXMuX3ggPSB4IHx8IDA7XG5cdHRoaXMuX3kgPSB5IHx8IDA7XG5cdHRoaXMuX3ogPSB6IHx8IDA7XG5cdHRoaXMuX29yZGVyID0gb3JkZXIgfHwgRXVsZXIuRGVmYXVsdE9yZGVyO1xuXG59XG5cbkV1bGVyLlJvdGF0aW9uT3JkZXJzID0gWyAnWFlaJywgJ1laWCcsICdaWFknLCAnWFpZJywgJ1lYWicsICdaWVgnIF07XG5cbkV1bGVyLkRlZmF1bHRPcmRlciA9ICdYWVonO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggRXVsZXIucHJvdG90eXBlLCB7XG5cblx0eDoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl94O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feCA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0eToge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl95O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feSA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0ejoge1xuXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLl96O1xuXG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0dGhpcy5feiA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0b3JkZXI6IHtcblxuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fb3JkZXI7XG5cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHR0aGlzLl9vcmRlciA9IHZhbHVlO1xuXHRcdFx0dGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBFdWxlci5wcm90b3R5cGUsIHtcblxuXHRpc0V1bGVyOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCB4LCB5LCB6LCBvcmRlciApIHtcblxuXHRcdHRoaXMuX3ggPSB4O1xuXHRcdHRoaXMuX3kgPSB5O1xuXHRcdHRoaXMuX3ogPSB6O1xuXHRcdHRoaXMuX29yZGVyID0gb3JkZXIgfHwgdGhpcy5fb3JkZXI7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3osIHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5feCA9IGV1bGVyLl94O1xuXHRcdHRoaXMuX3kgPSBldWxlci5feTtcblx0XHR0aGlzLl96ID0gZXVsZXIuX3o7XG5cdFx0dGhpcy5fb3JkZXIgPSBldWxlci5fb3JkZXI7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Sb3RhdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtLCBvcmRlciwgdXBkYXRlICkge1xuXG5cdFx0dmFyIGNsYW1wID0gTWF0aFV0aWxzLmNsYW1wO1xuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHZhciB0ZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG0xMSA9IHRlWyAwIF0sIG0xMiA9IHRlWyA0IF0sIG0xMyA9IHRlWyA4IF07XG5cdFx0dmFyIG0yMSA9IHRlWyAxIF0sIG0yMiA9IHRlWyA1IF0sIG0yMyA9IHRlWyA5IF07XG5cdFx0dmFyIG0zMSA9IHRlWyAyIF0sIG0zMiA9IHRlWyA2IF0sIG0zMyA9IHRlWyAxMCBdO1xuXG5cdFx0b3JkZXIgPSBvcmRlciB8fCB0aGlzLl9vcmRlcjtcblxuXHRcdGlmICggb3JkZXIgPT09ICdYWVonICkge1xuXG5cdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCBjbGFtcCggbTEzLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMTMgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWFonICkge1xuXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMjMsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0yMyApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSBNYXRoLmF0YW4yKCBtMTMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMjIgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXHRcdFx0XHR0aGlzLl96ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWFknICkge1xuXG5cdFx0XHR0aGlzLl94ID0gTWF0aC5hc2luKCBjbGFtcCggbTMyLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMzIgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggLSBtMTIsIG0yMiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3kgPSAwO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdaWVgnICkge1xuXG5cdFx0XHR0aGlzLl95ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMzEsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0zMSApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl96ID0gTWF0aC5hdGFuMiggbTIxLCBtMTEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gMDtcblx0XHRcdFx0dGhpcy5feiA9IE1hdGguYXRhbjIoIC0gbTEyLCBtMjIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdZWlgnICkge1xuXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCBjbGFtcCggbTIxLCAtIDEsIDEgKSApO1xuXG5cdFx0XHRpZiAoIE1hdGguYWJzKCBtMjEgKSA8IDAuOTk5OTk5OSApIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggLSBtMzEsIG0xMSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSAwO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMzMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggb3JkZXIgPT09ICdYWlknICkge1xuXG5cdFx0XHR0aGlzLl96ID0gTWF0aC5hc2luKCAtIGNsYW1wKCBtMTIsIC0gMSwgMSApICk7XG5cblx0XHRcdGlmICggTWF0aC5hYnMoIG0xMiApIDwgMC45OTk5OTk5ICkge1xuXG5cdFx0XHRcdHRoaXMuX3ggPSBNYXRoLmF0YW4yKCBtMzIsIG0yMiApO1xuXHRcdFx0XHR0aGlzLl95ID0gTWF0aC5hdGFuMiggbTEzLCBtMTEgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLl94ID0gTWF0aC5hdGFuMiggLSBtMjMsIG0zMyApO1xuXHRcdFx0XHR0aGlzLl95ID0gMDtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuRXVsZXI6IC5zZXRGcm9tUm90YXRpb25NYXRyaXgoKSBnaXZlbiB1bnN1cHBvcnRlZCBvcmRlcjogJyArIG9yZGVyICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9vcmRlciA9IG9yZGVyO1xuXG5cdFx0aWYgKCB1cGRhdGUgIT09IGZhbHNlICkgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCBxLCBvcmRlciwgdXBkYXRlICkge1xuXG5cdFx0X21hdHJpeC5tYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbiggcSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCBfbWF0cml4LCBvcmRlciwgdXBkYXRlICk7XG5cblx0fSxcblxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2LCBvcmRlciApIHtcblxuXHRcdHJldHVybiB0aGlzLnNldCggdi54LCB2LnksIHYueiwgb3JkZXIgfHwgdGhpcy5fb3JkZXIgKTtcblxuXHR9LFxuXG5cdHJlb3JkZXI6IGZ1bmN0aW9uICggbmV3T3JkZXIgKSB7XG5cblx0XHQvLyBXQVJOSU5HOiB0aGlzIGRpc2NhcmRzIHJldm9sdXRpb24gaW5mb3JtYXRpb24gLWJob3VzdG9uXG5cblx0XHRfcXVhdGVybmlvbiQxLnNldEZyb21FdWxlciggdGhpcyApO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVF1YXRlcm5pb24oIF9xdWF0ZXJuaW9uJDEsIG5ld09yZGVyICk7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggZXVsZXIgKSB7XG5cblx0XHRyZXR1cm4gKCBldWxlci5feCA9PT0gdGhpcy5feCApICYmICggZXVsZXIuX3kgPT09IHRoaXMuX3kgKSAmJiAoIGV1bGVyLl96ID09PSB0aGlzLl96ICkgJiYgKCBldWxlci5fb3JkZXIgPT09IHRoaXMuX29yZGVyICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHR0aGlzLl94ID0gYXJyYXlbIDAgXTtcblx0XHR0aGlzLl95ID0gYXJyYXlbIDEgXTtcblx0XHR0aGlzLl96ID0gYXJyYXlbIDIgXTtcblx0XHRpZiAoIGFycmF5WyAzIF0gIT09IHVuZGVmaW5lZCApIHRoaXMuX29yZGVyID0gYXJyYXlbIDMgXTtcblxuXHRcdHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9BcnJheTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBhcnJheSA9PT0gdW5kZWZpbmVkICkgYXJyYXkgPSBbXTtcblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdGFycmF5WyBvZmZzZXQgXSA9IHRoaXMuX3g7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuX3k7XG5cdFx0YXJyYXlbIG9mZnNldCArIDIgXSA9IHRoaXMuX3o7XG5cdFx0YXJyYXlbIG9mZnNldCArIDMgXSA9IHRoaXMuX29yZGVyO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9WZWN0b3IzOiBmdW5jdGlvbiAoIG9wdGlvbmFsUmVzdWx0ICkge1xuXG5cdFx0aWYgKCBvcHRpb25hbFJlc3VsdCApIHtcblxuXHRcdFx0cmV0dXJuIG9wdGlvbmFsUmVzdWx0LnNldCggdGhpcy5feCwgdGhpcy5feSwgdGhpcy5feiApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCB0aGlzLl94LCB0aGlzLl95LCB0aGlzLl96ICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRfb25DaGFuZ2U6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLl9vbkNoYW5nZUNhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdF9vbkNoYW5nZUNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMYXllcnMoKSB7XG5cblx0dGhpcy5tYXNrID0gMSB8IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGF5ZXJzLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrID0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGVuYWJsZTogZnVuY3Rpb24gKCBjaGFubmVsICkge1xuXG5cdFx0dGhpcy5tYXNrIHw9IDEgPDwgY2hhbm5lbCB8IDA7XG5cblx0fSxcblxuXHRlbmFibGVBbGw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubWFzayA9IDB4ZmZmZmZmZmYgfCAwO1xuXG5cdH0sXG5cblx0dG9nZ2xlOiBmdW5jdGlvbiAoIGNoYW5uZWwgKSB7XG5cblx0XHR0aGlzLm1hc2sgXj0gMSA8PCBjaGFubmVsIHwgMDtcblxuXHR9LFxuXG5cdGRpc2FibGU6IGZ1bmN0aW9uICggY2hhbm5lbCApIHtcblxuXHRcdHRoaXMubWFzayAmPSB+ICggMSA8PCBjaGFubmVsIHwgMCApO1xuXG5cdH0sXG5cblx0ZGlzYWJsZUFsbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5tYXNrID0gMDtcblxuXHR9LFxuXG5cdHRlc3Q6IGZ1bmN0aW9uICggbGF5ZXJzICkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXNrICYgbGF5ZXJzLm1hc2sgKSAhPT0gMDtcblxuXHR9XG5cbn0gKTtcblxudmFyIF9vYmplY3QzRElkID0gMDtcblxudmFyIF92MSQxID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfcTEgPSBuZXcgUXVhdGVybmlvbigpO1xudmFyIF9tMSQxID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfdGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxudmFyIF9wb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3NjYWxlID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfcXVhdGVybmlvbiQyID0gbmV3IFF1YXRlcm5pb24oKTtcblxudmFyIF94QXhpcyA9IG5ldyBWZWN0b3IzKCAxLCAwLCAwICk7XG52YXIgX3lBeGlzID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcbnZhciBfekF4aXMgPSBuZXcgVmVjdG9yMyggMCwgMCwgMSApO1xuXG52YXIgX2FkZGVkRXZlbnQgPSB7IHR5cGU6ICdhZGRlZCcgfTtcbnZhciBfcmVtb3ZlZEV2ZW50ID0geyB0eXBlOiAncmVtb3ZlZCcgfTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgZWxlcGhhbnRhdHdvcmsgLyB3d3cuZWxlcGhhbnRhdHdvcmsuY2hcbiAqL1xuXG5mdW5jdGlvbiBPYmplY3QzRCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9vYmplY3QzRElkICsrIH0gKTtcblxuXHR0aGlzLnV1aWQgPSBNYXRoVXRpbHMuZ2VuZXJhdGVVVUlEKCk7XG5cblx0dGhpcy5uYW1lID0gJyc7XG5cdHRoaXMudHlwZSA9ICdPYmplY3QzRCc7XG5cblx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHR0aGlzLmNoaWxkcmVuID0gW107XG5cblx0dGhpcy51cCA9IE9iamVjdDNELkRlZmF1bHRVcC5jbG9uZSgpO1xuXG5cdHZhciBwb3NpdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciByb3RhdGlvbiA9IG5ldyBFdWxlcigpO1xuXHR2YXIgcXVhdGVybmlvbiA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cdHZhciBzY2FsZSA9IG5ldyBWZWN0b3IzKCAxLCAxLCAxICk7XG5cblx0ZnVuY3Rpb24gb25Sb3RhdGlvbkNoYW5nZSgpIHtcblxuXHRcdHF1YXRlcm5pb24uc2V0RnJvbUV1bGVyKCByb3RhdGlvbiwgZmFsc2UgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25RdWF0ZXJuaW9uQ2hhbmdlKCkge1xuXG5cdFx0cm90YXRpb24uc2V0RnJvbVF1YXRlcm5pb24oIHF1YXRlcm5pb24sIHVuZGVmaW5lZCwgZmFsc2UgKTtcblxuXHR9XG5cblx0cm90YXRpb24uX29uQ2hhbmdlKCBvblJvdGF0aW9uQ2hhbmdlICk7XG5cdHF1YXRlcm5pb24uX29uQ2hhbmdlKCBvblF1YXRlcm5pb25DaGFuZ2UgKTtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggdGhpcywge1xuXHRcdHBvc2l0aW9uOiB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0dmFsdWU6IHBvc2l0aW9uXG5cdFx0fSxcblx0XHRyb3RhdGlvbjoge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiByb3RhdGlvblxuXHRcdH0sXG5cdFx0cXVhdGVybmlvbjoge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBxdWF0ZXJuaW9uXG5cdFx0fSxcblx0XHRzY2FsZToge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdHZhbHVlOiBzY2FsZVxuXHRcdH0sXG5cdFx0bW9kZWxWaWV3TWF0cml4OiB7XG5cdFx0XHR2YWx1ZTogbmV3IE1hdHJpeDQoKVxuXHRcdH0sXG5cdFx0bm9ybWFsTWF0cml4OiB7XG5cdFx0XHR2YWx1ZTogbmV3IE1hdHJpeDMoKVxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0dGhpcy5tYXRyaXhXb3JsZCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gT2JqZWN0M0QuRGVmYXVsdE1hdHJpeEF1dG9VcGRhdGU7XG5cdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMubGF5ZXJzID0gbmV3IExheWVycygpO1xuXHR0aGlzLnZpc2libGUgPSB0cnVlO1xuXG5cdHRoaXMuY2FzdFNoYWRvdyA9IGZhbHNlO1xuXHR0aGlzLnJlY2VpdmVTaGFkb3cgPSBmYWxzZTtcblxuXHR0aGlzLmZydXN0dW1DdWxsZWQgPSB0cnVlO1xuXHR0aGlzLnJlbmRlck9yZGVyID0gMDtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cbn1cblxuT2JqZWN0M0QuRGVmYXVsdFVwID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcbk9iamVjdDNELkRlZmF1bHRNYXRyaXhBdXRvVXBkYXRlID0gdHJ1ZTtcblxuT2JqZWN0M0QucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IE9iamVjdDNELFxuXG5cdGlzT2JqZWN0M0Q6IHRydWUsXG5cblx0b25CZWZvcmVSZW5kZXI6IGZ1bmN0aW9uICgpIHt9LFxuXHRvbkFmdGVyUmVuZGVyOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0aWYgKCB0aGlzLm1hdHJpeEF1dG9VcGRhdGUgKSB0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5tYXRyaXgucHJlbXVsdGlwbHkoIG1hdHJpeCApO1xuXG5cdFx0dGhpcy5tYXRyaXguZGVjb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHR9LFxuXG5cdGFwcGx5UXVhdGVybmlvbjogZnVuY3Rpb24gKCBxICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnByZW11bHRpcGx5KCBxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbUF4aXNBbmdsZTogZnVuY3Rpb24gKCBheGlzLCBhbmdsZSApIHtcblxuXHRcdC8vIGFzc3VtZXMgYXhpcyBpcyBub3JtYWxpemVkXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbUV1bGVyOiBmdW5jdGlvbiAoIGV1bGVyICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldEZyb21FdWxlciggZXVsZXIsIHRydWUgKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Ly8gYXNzdW1lcyB0aGUgdXBwZXIgM3gzIG9mIG0gaXMgYSBwdXJlIHJvdGF0aW9uIG1hdHJpeCAoaS5lLCB1bnNjYWxlZClcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIG0gKTtcblxuXHR9LFxuXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdC8vIGFzc3VtZXMgcSBpcyBub3JtYWxpemVkXG5cblx0XHR0aGlzLnF1YXRlcm5pb24uY29weSggcSApO1xuXG5cdH0sXG5cblx0cm90YXRlT25BeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIG9iamVjdCBzcGFjZVxuXHRcdC8vIGF4aXMgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0XHRfcTEuc2V0RnJvbUF4aXNBbmdsZSggYXhpcywgYW5nbGUgKTtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5tdWx0aXBseSggX3ExICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZU9uV29ybGRBeGlzOiBmdW5jdGlvbiAoIGF4aXMsIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIG9iamVjdCBvbiBheGlzIGluIHdvcmxkIHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblx0XHQvLyBtZXRob2QgYXNzdW1lcyBubyByb3RhdGVkIHBhcmVudFxuXG5cdFx0X3ExLnNldEZyb21BeGlzQW5nbGUoIGF4aXMsIGFuZ2xlICk7XG5cblx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVYOiBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeEF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHRyb3RhdGVZOiBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfeUF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMucm90YXRlT25BeGlzKCBfekF4aXMsIGFuZ2xlICk7XG5cblx0fSxcblxuXHR0cmFuc2xhdGVPbkF4aXM6IGZ1bmN0aW9uICggYXhpcywgZGlzdGFuY2UgKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgb2JqZWN0IGJ5IGRpc3RhbmNlIGFsb25nIGF4aXMgaW4gb2JqZWN0IHNwYWNlXG5cdFx0Ly8gYXhpcyBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRcdF92MSQxLmNvcHkoIGF4aXMgKS5hcHBseVF1YXRlcm5pb24oIHRoaXMucXVhdGVybmlvbiApO1xuXG5cdFx0dGhpcy5wb3NpdGlvbi5hZGQoIF92MSQxLm11bHRpcGx5U2NhbGFyKCBkaXN0YW5jZSApICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZVg6IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIF94QXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZVk6IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIF95QXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZVo6IGZ1bmN0aW9uICggZGlzdGFuY2UgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy50cmFuc2xhdGVPbkF4aXMoIF96QXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXG5cdGxvY2FsVG9Xb3JsZDogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0d29ybGRUb0xvY2FsOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBfbTEkMS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICkgKTtcblxuXHR9LFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0Ly8gVGhpcyBtZXRob2QgZG9lcyBub3Qgc3VwcG9ydCBvYmplY3RzIGhhdmluZyBub24tdW5pZm9ybWx5LXNjYWxlZCBwYXJlbnQocylcblxuXHRcdGlmICggeC5pc1ZlY3RvcjMgKSB7XG5cblx0XHRcdF90YXJnZXQuY29weSggeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X3RhcmdldC5zZXQoIHgsIHksIHogKTtcblxuXHRcdH1cblxuXHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudDtcblxuXHRcdHRoaXMudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHRfcG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHRpZiAoIHRoaXMuaXNDYW1lcmEgfHwgdGhpcy5pc0xpZ2h0ICkge1xuXG5cdFx0XHRfbTEkMS5sb29rQXQoIF9wb3NpdGlvbiwgX3RhcmdldCwgdGhpcy51cCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X20xJDEubG9va0F0KCBfdGFyZ2V0LCBfcG9zaXRpb24sIHRoaXMudXAgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cblx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0X20xJDEuZXh0cmFjdFJvdGF0aW9uKCBwYXJlbnQubWF0cml4V29ybGQgKTtcblx0XHRcdF9xMS5zZXRGcm9tUm90YXRpb25NYXRyaXgoIF9tMSQxICk7XG5cdFx0XHR0aGlzLnF1YXRlcm5pb24ucHJlbXVsdGlwbHkoIF9xMS5pbnZlcnNlKCkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuYWRkKCBhcmd1bWVudHNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QgPT09IHRoaXMgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3QgY2FuJ3QgYmUgYWRkZWQgYXMgYSBjaGlsZCBvZiBpdHNlbGYuXCIsIG9iamVjdCApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHRpZiAoICggb2JqZWN0ICYmIG9iamVjdC5pc09iamVjdDNEICkgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LnBhcmVudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRvYmplY3QucGFyZW50LnJlbW92ZSggb2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0b2JqZWN0LnBhcmVudCA9IHRoaXM7XG5cdFx0XHR0aGlzLmNoaWxkcmVuLnB1c2goIG9iamVjdCApO1xuXG5cdFx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggX2FkZGVkRXZlbnQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuT2JqZWN0M0QuYWRkOiBvYmplY3Qgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk9iamVjdDNELlwiLCBvYmplY3QgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5yZW1vdmUoIGFyZ3VtZW50c1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgaW5kZXggPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoIG9iamVjdCApO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gLSAxICkge1xuXG5cdFx0XHRvYmplY3QucGFyZW50ID0gbnVsbDtcblx0XHRcdHRoaXMuY2hpbGRyZW4uc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRvYmplY3QuZGlzcGF0Y2hFdmVudCggX3JlbW92ZWRFdmVudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhdHRhY2g6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0Ly8gYWRkcyBvYmplY3QgYXMgYSBjaGlsZCBvZiB0aGlzLCB3aGlsZSBtYWludGFpbmluZyB0aGUgb2JqZWN0J3Mgd29ybGQgdHJhbnNmb3JtXG5cblx0XHR0aGlzLnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0X20xJDEuZ2V0SW52ZXJzZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0aWYgKCBvYmplY3QucGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRvYmplY3QucGFyZW50LnVwZGF0ZVdvcmxkTWF0cml4KCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHRfbTEkMS5tdWx0aXBseSggb2JqZWN0LnBhcmVudC5tYXRyaXhXb3JsZCApO1xuXG5cdFx0fVxuXG5cdFx0b2JqZWN0LmFwcGx5TWF0cml4NCggX20xJDEgKTtcblxuXHRcdG9iamVjdC51cGRhdGVXb3JsZE1hdHJpeCggZmFsc2UsIGZhbHNlICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5SWQ6IGZ1bmN0aW9uICggaWQgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnaWQnLCBpZCApO1xuXG5cdH0sXG5cblx0Z2V0T2JqZWN0QnlOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeVByb3BlcnR5KCAnbmFtZScsIG5hbWUgKTtcblxuXHR9LFxuXG5cdGdldE9iamVjdEJ5UHJvcGVydHk6IGZ1bmN0aW9uICggbmFtZSwgdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXNbIG5hbWUgXSA9PT0gdmFsdWUgKSByZXR1cm4gdGhpcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlblsgaSBdO1xuXHRcdFx0dmFyIG9iamVjdCA9IGNoaWxkLmdldE9iamVjdEJ5UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cblx0XHRcdGlmICggb2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG9iamVjdDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9LFxuXG5cdGdldFdvcmxkUG9zaXRpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFBvc2l0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdH0sXG5cblx0Z2V0V29ybGRRdWF0ZXJuaW9uOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdDNEOiAuZ2V0V29ybGRRdWF0ZXJuaW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCB0YXJnZXQsIF9zY2FsZSApO1xuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldFdvcmxkU2NhbGU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFNjYWxlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkLmRlY29tcG9zZSggX3Bvc2l0aW9uLCBfcXVhdGVybmlvbiQyLCB0YXJnZXQgKTtcblxuXHRcdHJldHVybiB0YXJnZXQ7XG5cblx0fSxcblxuXHRnZXRXb3JsZERpcmVjdGlvbjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmdldFdvcmxkRGlyZWN0aW9uKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCB0cnVlICk7XG5cblx0XHR2YXIgZSA9IHRoaXMubWF0cml4V29ybGQuZWxlbWVudHM7XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggZVsgOCBdLCBlWyA5IF0sIGVbIDEwIF0gKS5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdHJheWNhc3Q6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdHRyYXZlcnNlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dHJhdmVyc2VWaXNpYmxlOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0Y2FsbGJhY2soIHRoaXMgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnRyYXZlcnNlVmlzaWJsZSggY2FsbGJhY2sgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHRyYXZlcnNlQW5jZXN0b3JzOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuXG5cdFx0aWYgKCBwYXJlbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdGNhbGxiYWNrKCBwYXJlbnQgKTtcblxuXHRcdFx0cGFyZW50LnRyYXZlcnNlQW5jZXN0b3JzKCBjYWxsYmFjayApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1hdHJpeC5jb21wb3NlKCB0aGlzLnBvc2l0aW9uLCB0aGlzLnF1YXRlcm5pb24sIHRoaXMuc2NhbGUgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0fSxcblxuXHR1cGRhdGVNYXRyaXhXb3JsZDogZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhBdXRvVXBkYXRlICkgdGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHRcdGlmICggdGhpcy5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlIHx8IGZvcmNlICkge1xuXG5cdFx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMubWF0cml4V29ybGQuY29weSggdGhpcy5tYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRmb3JjZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyB1cGRhdGUgY2hpbGRyZW5cblxuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRjaGlsZHJlblsgaSBdLnVwZGF0ZU1hdHJpeFdvcmxkKCBmb3JjZSApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlV29ybGRNYXRyaXg6IGZ1bmN0aW9uICggdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4gKSB7XG5cblx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cblx0XHRpZiAoIHVwZGF0ZVBhcmVudHMgPT09IHRydWUgJiYgcGFyZW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRwYXJlbnQudXBkYXRlV29ybGRNYXRyaXgoIHRydWUsIGZhbHNlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSApIHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0XHRpZiAoIHRoaXMucGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHkoIHRoaXMubWF0cml4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHRoaXMucGFyZW50Lm1hdHJpeFdvcmxkLCB0aGlzLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNoaWxkcmVuXG5cblx0XHRpZiAoIHVwZGF0ZUNoaWxkcmVuID09PSB0cnVlICkge1xuXG5cdFx0XHR2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlV29ybGRNYXRyaXgoIGZhbHNlLCB0cnVlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0Ly8gbWV0YSBpcyBhIHN0cmluZyB3aGVuIGNhbGxlZCBmcm9tIEpTT04uc3RyaW5naWZ5XG5cdFx0dmFyIGlzUm9vdE9iamVjdCA9ICggbWV0YSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBtZXRhID09PSAnc3RyaW5nJyApO1xuXG5cdFx0dmFyIG91dHB1dCA9IHt9O1xuXG5cdFx0Ly8gbWV0YSBpcyBhIGhhc2ggdXNlZCB0byBjb2xsZWN0IGdlb21ldHJpZXMsIG1hdGVyaWFscy5cblx0XHQvLyBub3QgcHJvdmlkaW5nIGl0IGltcGxpZXMgdGhhdCB0aGlzIGlzIHRoZSByb290IG9iamVjdFxuXHRcdC8vIGJlaW5nIHNlcmlhbGl6ZWQuXG5cdFx0aWYgKCBpc1Jvb3RPYmplY3QgKSB7XG5cblx0XHRcdC8vIGluaXRpYWxpemUgbWV0YSBvYmpcblx0XHRcdG1ldGEgPSB7XG5cdFx0XHRcdGdlb21ldHJpZXM6IHt9LFxuXHRcdFx0XHRtYXRlcmlhbHM6IHt9LFxuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge30sXG5cdFx0XHRcdHNoYXBlczoge31cblx0XHRcdH07XG5cblx0XHRcdG91dHB1dC5tZXRhZGF0YSA9IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnT2JqZWN0Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnT2JqZWN0M0QudG9KU09OJ1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdC8vIHN0YW5kYXJkIE9iamVjdDNEIHNlcmlhbGl6YXRpb25cblxuXHRcdHZhciBvYmplY3QgPSB7fTtcblxuXHRcdG9iamVjdC51dWlkID0gdGhpcy51dWlkO1xuXHRcdG9iamVjdC50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0aWYgKCB0aGlzLm5hbWUgIT09ICcnICkgb2JqZWN0Lm5hbWUgPSB0aGlzLm5hbWU7XG5cdFx0aWYgKCB0aGlzLmNhc3RTaGFkb3cgPT09IHRydWUgKSBvYmplY3QuY2FzdFNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnJlY2VpdmVTaGFkb3cgPT09IHRydWUgKSBvYmplY3QucmVjZWl2ZVNoYWRvdyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLnZpc2libGUgPT09IGZhbHNlICkgb2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRpZiAoIHRoaXMuZnJ1c3R1bUN1bGxlZCA9PT0gZmFsc2UgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGZhbHNlO1xuXHRcdGlmICggdGhpcy5yZW5kZXJPcmRlciAhPT0gMCApIG9iamVjdC5yZW5kZXJPcmRlciA9IHRoaXMucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBKU09OLnN0cmluZ2lmeSggdGhpcy51c2VyRGF0YSApICE9PSAne30nICkgb2JqZWN0LnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdG9iamVjdC5sYXllcnMgPSB0aGlzLmxheWVycy5tYXNrO1xuXHRcdG9iamVjdC5tYXRyaXggPSB0aGlzLm1hdHJpeC50b0FycmF5KCk7XG5cblx0XHRpZiAoIHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0Ly8gb2JqZWN0IHNwZWNpZmljIHByb3BlcnRpZXNcblxuXHRcdGlmICggdGhpcy5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdG9iamVjdC50eXBlID0gJ0luc3RhbmNlZE1lc2gnO1xuXHRcdFx0b2JqZWN0LmNvdW50ID0gdGhpcy5jb3VudDtcblx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IHRoaXMuaW5zdGFuY2VNYXRyaXgudG9KU09OKCk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0ZnVuY3Rpb24gc2VyaWFsaXplKCBsaWJyYXJ5LCBlbGVtZW50ICkge1xuXG5cdFx0XHRpZiAoIGxpYnJhcnlbIGVsZW1lbnQudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bGlicmFyeVsgZWxlbWVudC51dWlkIF0gPSBlbGVtZW50LnRvSlNPTiggbWV0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtZW50LnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuaXNNZXNoIHx8IHRoaXMuaXNMaW5lIHx8IHRoaXMuaXNQb2ludHMgKSB7XG5cblx0XHRcdG9iamVjdC5nZW9tZXRyeSA9IHNlcmlhbGl6ZSggbWV0YS5nZW9tZXRyaWVzLCB0aGlzLmdlb21ldHJ5ICk7XG5cblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5nZW9tZXRyeS5wYXJhbWV0ZXJzO1xuXG5cdFx0XHRpZiAoIHBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCAmJiBwYXJhbWV0ZXJzLnNoYXBlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZhciBzaGFwZXMgPSBwYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzZXJpYWxpemUoIG1ldGEuc2hhcGVzLCBzaGFwZXMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHRoaXMubWF0ZXJpYWwgKSApIHtcblxuXHRcdFx0XHR2YXIgdXVpZHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLm1hdGVyaWFsLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR1dWlkcy5wdXNoKCBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsWyBpIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSB1dWlkcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRvYmplY3QubWF0ZXJpYWwgPSBzZXJpYWxpemUoIG1ldGEubWF0ZXJpYWxzLCB0aGlzLm1hdGVyaWFsICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuY2hpbGRyZW4ubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0b2JqZWN0LmNoaWxkcmVuID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG9iamVjdC5jaGlsZHJlbi5wdXNoKCB0aGlzLmNoaWxkcmVuWyBpIF0udG9KU09OKCBtZXRhICkub2JqZWN0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290T2JqZWN0ICkge1xuXG5cdFx0XHR2YXIgZ2VvbWV0cmllcyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEuZ2VvbWV0cmllcyApO1xuXHRcdFx0dmFyIG1hdGVyaWFscyA9IGV4dHJhY3RGcm9tQ2FjaGUoIG1ldGEubWF0ZXJpYWxzICk7XG5cdFx0XHR2YXIgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XG5cdFx0XHR2YXIgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblx0XHRcdHZhciBzaGFwZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnNoYXBlcyApO1xuXG5cdFx0XHRpZiAoIGdlb21ldHJpZXMubGVuZ3RoID4gMCApIG91dHB1dC5nZW9tZXRyaWVzID0gZ2VvbWV0cmllcztcblx0XHRcdGlmICggbWF0ZXJpYWxzLmxlbmd0aCA+IDAgKSBvdXRwdXQubWF0ZXJpYWxzID0gbWF0ZXJpYWxzO1xuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgb3V0cHV0LnRleHR1cmVzID0gdGV4dHVyZXM7XG5cdFx0XHRpZiAoIGltYWdlcy5sZW5ndGggPiAwICkgb3V0cHV0LmltYWdlcyA9IGltYWdlcztcblx0XHRcdGlmICggc2hhcGVzLmxlbmd0aCA+IDAgKSBvdXRwdXQuc2hhcGVzID0gc2hhcGVzO1xuXG5cdFx0fVxuXG5cdFx0b3V0cHV0Lm9iamVjdCA9IG9iamVjdDtcblxuXHRcdHJldHVybiBvdXRwdXQ7XG5cblx0XHQvLyBleHRyYWN0IGRhdGEgZnJvbSB0aGUgY2FjaGUgaGFzaFxuXHRcdC8vIHJlbW92ZSBtZXRhZGF0YSBvbiBlYWNoIGl0ZW1cblx0XHQvLyBhbmQgcmV0dXJuIGFzIGFycmF5XG5cdFx0ZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7XG5cblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblx0XHRcdGZvciAoIHZhciBrZXkgaW4gY2FjaGUgKSB7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSBjYWNoZVsga2V5IF07XG5cdFx0XHRcdGRlbGV0ZSBkYXRhLm1ldGFkYXRhO1xuXHRcdFx0XHR2YWx1ZXMucHVzaCggZGF0YSApO1xuXG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICggcmVjdXJzaXZlICkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcywgcmVjdXJzaXZlICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSwgcmVjdXJzaXZlICkge1xuXG5cdFx0aWYgKCByZWN1cnNpdmUgPT09IHVuZGVmaW5lZCApIHJlY3Vyc2l2ZSA9IHRydWU7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMudXAuY29weSggc291cmNlLnVwICk7XG5cblx0XHR0aGlzLnBvc2l0aW9uLmNvcHkoIHNvdXJjZS5wb3NpdGlvbiApO1xuXHRcdHRoaXMucXVhdGVybmlvbi5jb3B5KCBzb3VyY2UucXVhdGVybmlvbiApO1xuXHRcdHRoaXMuc2NhbGUuY29weSggc291cmNlLnNjYWxlICk7XG5cblx0XHR0aGlzLm1hdHJpeC5jb3B5KCBzb3VyY2UubWF0cml4ICk7XG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5jb3B5KCBzb3VyY2UubWF0cml4V29ybGQgKTtcblxuXHRcdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhBdXRvVXBkYXRlO1xuXHRcdHRoaXMubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHNvdXJjZS5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlO1xuXG5cdFx0dGhpcy5sYXllcnMubWFzayA9IHNvdXJjZS5sYXllcnMubWFzaztcblx0XHR0aGlzLnZpc2libGUgPSBzb3VyY2UudmlzaWJsZTtcblxuXHRcdHRoaXMuY2FzdFNoYWRvdyA9IHNvdXJjZS5jYXN0U2hhZG93O1xuXHRcdHRoaXMucmVjZWl2ZVNoYWRvdyA9IHNvdXJjZS5yZWNlaXZlU2hhZG93O1xuXG5cdFx0dGhpcy5mcnVzdHVtQ3VsbGVkID0gc291cmNlLmZydXN0dW1DdWxsZWQ7XG5cdFx0dGhpcy5yZW5kZXJPcmRlciA9IHNvdXJjZS5yZW5kZXJPcmRlcjtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdGlmICggcmVjdXJzaXZlID09PSB0cnVlICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzb3VyY2UuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBjaGlsZCA9IHNvdXJjZS5jaGlsZHJlblsgaSBdO1xuXHRcdFx0XHR0aGlzLmFkZCggY2hpbGQuY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNjZW5lKCkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2NlbmUnO1xuXG5cdHRoaXMuYmFja2dyb3VuZCA9IG51bGw7XG5cdHRoaXMuZW52aXJvbm1lbnQgPSBudWxsO1xuXHR0aGlzLmZvZyA9IG51bGw7XG5cblx0dGhpcy5vdmVycmlkZU1hdGVyaWFsID0gbnVsbDtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlOyAvLyBjaGVja2VkIGJ5IHRoZSByZW5kZXJlclxuXG5cdGlmICggdHlwZW9mIF9fVEhSRUVfREVWVE9PTFNfXyAhPT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRfX1RIUkVFX0RFVlRPT0xTX18uZGlzcGF0Y2hFdmVudCggbmV3IEN1c3RvbUV2ZW50KCAnb2JzZXJ2ZScsIHsgZGV0YWlsOiB0aGlzIH0gKSApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cblx0fVxuXG59XG5cblNjZW5lLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNjZW5lLFxuXG5cdGlzU2NlbmU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgcmVjdXJzaXZlICk7XG5cblx0XHRpZiAoIHNvdXJjZS5iYWNrZ3JvdW5kICE9PSBudWxsICkgdGhpcy5iYWNrZ3JvdW5kID0gc291cmNlLmJhY2tncm91bmQuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5lbnZpcm9ubWVudCAhPT0gbnVsbCApIHRoaXMuZW52aXJvbm1lbnQgPSBzb3VyY2UuZW52aXJvbm1lbnQuY2xvbmUoKTtcblx0XHRpZiAoIHNvdXJjZS5mb2cgIT09IG51bGwgKSB0aGlzLmZvZyA9IHNvdXJjZS5mb2cuY2xvbmUoKTtcblxuXHRcdGlmICggc291cmNlLm92ZXJyaWRlTWF0ZXJpYWwgIT09IG51bGwgKSB0aGlzLm92ZXJyaWRlTWF0ZXJpYWwgPSBzb3VyY2Uub3ZlcnJpZGVNYXRlcmlhbC5jbG9uZSgpO1xuXG5cdFx0dGhpcy5hdXRvVXBkYXRlID0gc291cmNlLmF1dG9VcGRhdGU7XG5cdFx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gc291cmNlLm1hdHJpeEF1dG9VcGRhdGU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBPYmplY3QzRC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdGlmICggdGhpcy5iYWNrZ3JvdW5kICE9PSBudWxsICkgZGF0YS5vYmplY3QuYmFja2dyb3VuZCA9IHRoaXMuYmFja2dyb3VuZC50b0pTT04oIG1ldGEgKTtcblx0XHRpZiAoIHRoaXMuZW52aXJvbm1lbnQgIT09IG51bGwgKSBkYXRhLm9iamVjdC5lbnZpcm9ubWVudCA9IHRoaXMuZW52aXJvbm1lbnQudG9KU09OKCBtZXRhICk7XG5cdFx0aWYgKCB0aGlzLmZvZyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LmZvZyA9IHRoaXMuZm9nLnRvSlNPTigpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxudmFyIF9wb2ludHMgPSBbXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKCksXG5cdG5ldyBWZWN0b3IzKClcbl07XG5cbnZhciBfdmVjdG9yJDEgPSBuZXcgVmVjdG9yMygpO1xuXG52YXIgX2JveCA9IG5ldyBCb3gzKCk7XG5cbi8vIHRyaWFuZ2xlIGNlbnRlcmVkIHZlcnRpY2VzXG5cbnZhciBfdjAgPSBuZXcgVmVjdG9yMygpO1xudmFyIF92MSQyID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdjIgPSBuZXcgVmVjdG9yMygpO1xuXG4vLyB0cmlhbmdsZSBlZGdlIHZlY3RvcnNcblxudmFyIF9mMCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2YxID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfZjIgPSBuZXcgVmVjdG9yMygpO1xuXG52YXIgX2NlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2V4dGVudHMgPSBuZXcgVmVjdG9yMygpO1xudmFyIF90cmlhbmdsZU5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3Rlc3RBeGlzID0gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBCb3gzKCBtaW4sIG1heCApIHtcblxuXHR0aGlzLm1pbiA9ICggbWluICE9PSB1bmRlZmluZWQgKSA/IG1pbiA6IG5ldyBWZWN0b3IzKCArIEluZmluaXR5LCArIEluZmluaXR5LCArIEluZmluaXR5ICk7XG5cdHRoaXMubWF4ID0gKCBtYXggIT09IHVuZGVmaW5lZCApID8gbWF4IDogbmV3IFZlY3RvcjMoIC0gSW5maW5pdHksIC0gSW5maW5pdHksIC0gSW5maW5pdHkgKTtcblxufVxuXG5cbk9iamVjdC5hc3NpZ24oIEJveDMucHJvdG90eXBlLCB7XG5cblx0aXNCb3gzOiB0cnVlLFxuXG5cdHNldDogZnVuY3Rpb24gKCBtaW4sIG1heCApIHtcblxuXHRcdHRoaXMubWluLmNvcHkoIG1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIG1heCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXkgKSB7XG5cblx0XHR2YXIgbWluWCA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblkgPSArIEluZmluaXR5O1xuXHRcdHZhciBtaW5aID0gKyBJbmZpbml0eTtcblxuXHRcdHZhciBtYXhYID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WSA9IC0gSW5maW5pdHk7XG5cdFx0dmFyIG1heFogPSAtIEluZmluaXR5O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHR2YXIgeCA9IGFycmF5WyBpIF07XG5cdFx0XHR2YXIgeSA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0dmFyIHogPSBhcnJheVsgaSArIDIgXTtcblxuXHRcdFx0aWYgKCB4IDwgbWluWCApIG1pblggPSB4O1xuXHRcdFx0aWYgKCB5IDwgbWluWSApIG1pblkgPSB5O1xuXHRcdFx0aWYgKCB6IDwgbWluWiApIG1pblogPSB6O1xuXG5cdFx0XHRpZiAoIHggPiBtYXhYICkgbWF4WCA9IHg7XG5cdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cdFx0XHRpZiAoIHogPiBtYXhaICkgbWF4WiA9IHo7XG5cblx0XHR9XG5cblx0XHR0aGlzLm1pbi5zZXQoIG1pblgsIG1pblksIG1pblogKTtcblx0XHR0aGlzLm1heC5zZXQoIG1heFgsIG1heFksIG1heFogKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR2YXIgbWluWCA9ICsgSW5maW5pdHk7XG5cdFx0dmFyIG1pblkgPSArIEluZmluaXR5O1xuXHRcdHZhciBtaW5aID0gKyBJbmZpbml0eTtcblxuXHRcdHZhciBtYXhYID0gLSBJbmZpbml0eTtcblx0XHR2YXIgbWF4WSA9IC0gSW5maW5pdHk7XG5cdFx0dmFyIG1heFogPSAtIEluZmluaXR5O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXR0cmlidXRlLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHggPSBhdHRyaWJ1dGUuZ2V0WCggaSApO1xuXHRcdFx0dmFyIHkgPSBhdHRyaWJ1dGUuZ2V0WSggaSApO1xuXHRcdFx0dmFyIHogPSBhdHRyaWJ1dGUuZ2V0WiggaSApO1xuXG5cdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRpZiAoIHkgPCBtaW5ZICkgbWluWSA9IHk7XG5cdFx0XHRpZiAoIHogPCBtaW5aICkgbWluWiA9IHo7XG5cblx0XHRcdGlmICggeCA+IG1heFggKSBtYXhYID0geDtcblx0XHRcdGlmICggeSA+IG1heFkgKSBtYXhZID0geTtcblx0XHRcdGlmICggeiA+IG1heFogKSBtYXhaID0gejtcblxuXHRcdH1cblxuXHRcdHRoaXMubWluLnNldCggbWluWCwgbWluWSwgbWluWiApO1xuXHRcdHRoaXMubWF4LnNldCggbWF4WCwgbWF4WSwgbWF4WiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubWFrZUVtcHR5KCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmV4cGFuZEJ5UG9pbnQoIHBvaW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21DZW50ZXJBbmRTaXplOiBmdW5jdGlvbiAoIGNlbnRlciwgc2l6ZSApIHtcblxuXHRcdHZhciBoYWxmU2l6ZSA9IF92ZWN0b3IkMS5jb3B5KCBzaXplICkubXVsdGlwbHlTY2FsYXIoIDAuNSApO1xuXG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHR0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuZXhwYW5kQnlPYmplY3QoIG9iamVjdCApO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZUVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9IHRoaXMubWluLnogPSArIEluZmluaXR5O1xuXHRcdHRoaXMubWF4LnggPSB0aGlzLm1heC55ID0gdGhpcy5tYXgueiA9IC0gSW5maW5pdHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGlzRW1wdHk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIHRoaXMgaXMgYSBtb3JlIHJvYnVzdCBjaGVjayBmb3IgZW1wdHkgdGhhbiAoIHZvbHVtZSA8PSAwICkgYmVjYXVzZSB2b2x1bWUgY2FuIGdldCBwb3NpdGl2ZSB3aXRoIHR3byBuZWdhdGl2ZSBheGVzXG5cblx0XHRyZXR1cm4gKCB0aGlzLm1heC54IDwgdGhpcy5taW4ueCApIHx8ICggdGhpcy5tYXgueSA8IHRoaXMubWluLnkgKSB8fCAoIHRoaXMubWF4LnogPCB0aGlzLm1pbi56ICk7XG5cblx0fSxcblxuXHRnZXRDZW50ZXI6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9LFxuXG5cdGdldFNpemU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmdldFNpemUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAsIDAgKSA6IHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLm1heCwgdGhpcy5taW4gKTtcblxuXHR9LFxuXG5cdGV4cGFuZEJ5UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIHBvaW50ICk7XG5cdFx0dGhpcy5tYXgubWF4KCBwb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHR0aGlzLm1pbi5zdWIoIHZlY3RvciApO1xuXHRcdHRoaXMubWF4LmFkZCggdmVjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4cGFuZEJ5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTtcblx0XHR0aGlzLm1heC5hZGRTY2FsYXIoIHNjYWxhciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHQvLyBDb21wdXRlcyB0aGUgd29ybGQtYXhpcy1hbGlnbmVkIGJvdW5kaW5nIGJveCBvZiBhbiBvYmplY3QgKGluY2x1ZGluZyBpdHMgY2hpbGRyZW4pLFxuXHRcdC8vIGFjY291bnRpbmcgZm9yIGJvdGggdGhlIG9iamVjdCdzLCBhbmQgY2hpbGRyZW4ncywgd29ybGQgdHJhbnNmb3Jtc1xuXG5cdFx0b2JqZWN0LnVwZGF0ZVdvcmxkTWF0cml4KCBmYWxzZSwgZmFsc2UgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHRnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfYm94LmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICk7XG5cdFx0XHRfYm94LmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdHRoaXMudW5pb24oIF9ib3ggKTtcblxuXHRcdH1cblxuXHRcdHZhciBjaGlsZHJlbiA9IG9iamVjdC5jaGlsZHJlbjtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlPYmplY3QoIGNoaWxkcmVuWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiBwb2ludC54IDwgdGhpcy5taW4ueCB8fCBwb2ludC54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0cG9pbnQueSA8IHRoaXMubWluLnkgfHwgcG9pbnQueSA+IHRoaXMubWF4LnkgfHxcblx0XHRcdHBvaW50LnogPCB0aGlzLm1pbi56IHx8IHBvaW50LnogPiB0aGlzLm1heC56ID8gZmFsc2UgOiB0cnVlO1xuXG5cdH0sXG5cblx0Y29udGFpbnNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubWluLnggPD0gYm94Lm1pbi54ICYmIGJveC5tYXgueCA8PSB0aGlzLm1heC54ICYmXG5cdFx0XHR0aGlzLm1pbi55IDw9IGJveC5taW4ueSAmJiBib3gubWF4LnkgPD0gdGhpcy5tYXgueSAmJlxuXHRcdFx0dGhpcy5taW4ueiA8PSBib3gubWluLnogJiYgYm94Lm1heC56IDw9IHRoaXMubWF4Lno7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApLFxuXHRcdFx0KCBwb2ludC56IC0gdGhpcy5taW4ueiApIC8gKCB0aGlzLm1heC56IC0gdGhpcy5taW4ueiApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNiBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnMuXG5cdFx0cmV0dXJuIGJveC5tYXgueCA8IHRoaXMubWluLnggfHwgYm94Lm1pbi54ID4gdGhpcy5tYXgueCB8fFxuXHRcdFx0Ym94Lm1heC55IDwgdGhpcy5taW4ueSB8fCBib3gubWluLnkgPiB0aGlzLm1heC55IHx8XG5cdFx0XHRib3gubWF4LnogPCB0aGlzLm1pbi56IHx8IGJveC5taW4ueiA+IHRoaXMubWF4LnogPyBmYWxzZSA6IHRydWU7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdC8vIEZpbmQgdGhlIHBvaW50IG9uIHRoZSBBQUJCIGNsb3Nlc3QgdG8gdGhlIHNwaGVyZSBjZW50ZXIuXG5cdFx0dGhpcy5jbGFtcFBvaW50KCBzcGhlcmUuY2VudGVyLCBfdmVjdG9yJDEgKTtcblxuXHRcdC8vIElmIHRoYXQgcG9pbnQgaXMgaW5zaWRlIHRoZSBzcGhlcmUsIHRoZSBBQUJCIGFuZCBzcGhlcmUgaW50ZXJzZWN0LlxuXHRcdHJldHVybiBfdmVjdG9yJDEuZGlzdGFuY2VUb1NxdWFyZWQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHQvLyBXZSBjb21wdXRlIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGRvdCBwcm9kdWN0IHZhbHVlcy4gSWYgdGhvc2UgdmFsdWVzXG5cdFx0Ly8gYXJlIG9uIHRoZSBzYW1lIHNpZGUgKGJhY2sgb3IgZnJvbnQpIG9mIHRoZSBwbGFuZSwgdGhlbiB0aGVyZSBpcyBubyBpbnRlcnNlY3Rpb24uXG5cblx0XHR2YXIgbWluLCBtYXg7XG5cblx0XHRpZiAoIHBsYW5lLm5vcm1hbC54ID4gMCApIHtcblxuXHRcdFx0bWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54O1xuXHRcdFx0bWF4ID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1heC54O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1heC54O1xuXHRcdFx0bWF4ID0gcGxhbmUubm9ybWFsLnggKiB0aGlzLm1pbi54O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwbGFuZS5ub3JtYWwueSA+IDAgKSB7XG5cblx0XHRcdG1pbiArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWluLnk7XG5cdFx0XHRtYXggKz0gcGxhbmUubm9ybWFsLnkgKiB0aGlzLm1heC55O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC55ICogdGhpcy5tYXgueTtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueSAqIHRoaXMubWluLnk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHBsYW5lLm5vcm1hbC56ID4gMCApIHtcblxuXHRcdFx0bWluICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5taW4uejtcblx0XHRcdG1heCArPSBwbGFuZS5ub3JtYWwueiAqIHRoaXMubWF4Lno7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRtaW4gKz0gcGxhbmUubm9ybWFsLnogKiB0aGlzLm1heC56O1xuXHRcdFx0bWF4ICs9IHBsYW5lLm5vcm1hbC56ICogdGhpcy5taW4uejtcblxuXHRcdH1cblxuXHRcdHJldHVybiAoIG1pbiA8PSAtIHBsYW5lLmNvbnN0YW50ICYmIG1heCA+PSAtIHBsYW5lLmNvbnN0YW50ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzVHJpYW5nbGU6IGZ1bmN0aW9uICggdHJpYW5nbGUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaXNFbXB0eSgpICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBjb21wdXRlIGJveCBjZW50ZXIgYW5kIGV4dGVudHNcblx0XHR0aGlzLmdldENlbnRlciggX2NlbnRlciApO1xuXHRcdF9leHRlbnRzLnN1YlZlY3RvcnMoIHRoaXMubWF4LCBfY2VudGVyICk7XG5cblx0XHQvLyB0cmFuc2xhdGUgdHJpYW5nbGUgdG8gYWFiYiBvcmlnaW5cblx0XHRfdjAuc3ViVmVjdG9ycyggdHJpYW5nbGUuYSwgX2NlbnRlciApO1xuXHRcdF92MSQyLnN1YlZlY3RvcnMoIHRyaWFuZ2xlLmIsIF9jZW50ZXIgKTtcblx0XHRfdjIuc3ViVmVjdG9ycyggdHJpYW5nbGUuYywgX2NlbnRlciApO1xuXG5cdFx0Ly8gY29tcHV0ZSBlZGdlIHZlY3RvcnMgZm9yIHRyaWFuZ2xlXG5cdFx0X2YwLnN1YlZlY3RvcnMoIF92MSQyLCBfdjAgKTtcblx0XHRfZjEuc3ViVmVjdG9ycyggX3YyLCBfdjEkMiApO1xuXHRcdF9mMi5zdWJWZWN0b3JzKCBfdjAsIF92MiApO1xuXG5cdFx0Ly8gdGVzdCBhZ2FpbnN0IGF4ZXMgdGhhdCBhcmUgZ2l2ZW4gYnkgY3Jvc3MgcHJvZHVjdCBjb21iaW5hdGlvbnMgb2YgdGhlIGVkZ2VzIG9mIHRoZSB0cmlhbmdsZSBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBhYWJiXG5cdFx0Ly8gbWFrZSBhbiBheGlzIHRlc3Rpbmcgb2YgZWFjaCBvZiB0aGUgMyBzaWRlcyBvZiB0aGUgYWFiYiBhZ2FpbnN0IGVhY2ggb2YgdGhlIDMgc2lkZXMgb2YgdGhlIHRyaWFuZ2xlID0gOSBheGlzIG9mIHNlcGFyYXRpb25cblx0XHQvLyBheGlzX2lqID0gdV9pIHggZl9qICh1MCwgdTEsIHUyID0gZmFjZSBub3JtYWxzIG9mIGFhYmIgPSB4LHkseiBheGVzIHZlY3RvcnMgc2luY2UgYWFiYiBpcyBheGlzIGFsaWduZWQpXG5cdFx0dmFyIGF4ZXMgPSBbXG5cdFx0XHQwLCAtIF9mMC56LCBfZjAueSwgMCwgLSBfZjEueiwgX2YxLnksIDAsIC0gX2YyLnosIF9mMi55LFxuXHRcdFx0X2YwLnosIDAsIC0gX2YwLngsIF9mMS56LCAwLCAtIF9mMS54LCBfZjIueiwgMCwgLSBfZjIueCxcblx0XHRcdC0gX2YwLnksIF9mMC54LCAwLCAtIF9mMS55LCBfZjEueCwgMCwgLSBfZjIueSwgX2YyLngsIDBcblx0XHRdO1xuXHRcdGlmICggISBzYXRGb3JBeGVzKCBheGVzLCBfdjAsIF92MSQyLCBfdjIsIF9leHRlbnRzICkgKSB7XG5cblx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdH1cblxuXHRcdC8vIHRlc3QgMyBmYWNlIG5vcm1hbHMgZnJvbSB0aGUgYWFiYlxuXHRcdGF4ZXMgPSBbIDEsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDEgXTtcblx0XHRpZiAoICEgc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEkMiwgX3YyLCBfZXh0ZW50cyApICkge1xuXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9XG5cblx0XHQvLyBmaW5hbGx5IHRlc3RpbmcgdGhlIGZhY2Ugbm9ybWFsIG9mIHRoZSB0cmlhbmdsZVxuXHRcdC8vIHVzZSBhbHJlYWR5IGV4aXN0aW5nIHRyaWFuZ2xlIGVkZ2UgdmVjdG9ycyBoZXJlXG5cdFx0X3RyaWFuZ2xlTm9ybWFsLmNyb3NzVmVjdG9ycyggX2YwLCBfZjEgKTtcblx0XHRheGVzID0gWyBfdHJpYW5nbGVOb3JtYWwueCwgX3RyaWFuZ2xlTm9ybWFsLnksIF90cmlhbmdsZU5vcm1hbC56IF07XG5cblx0XHRyZXR1cm4gc2F0Rm9yQXhlcyggYXhlcywgX3YwLCBfdjEkMiwgX3YyLCBfZXh0ZW50cyApO1xuXG5cdH0sXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MzogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggcG9pbnQgKS5jbGFtcCggdGhpcy5taW4sIHRoaXMubWF4ICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHR2YXIgY2xhbXBlZFBvaW50ID0gX3ZlY3RvciQxLmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdFx0cmV0dXJuIGNsYW1wZWRQb2ludC5zdWIoIHBvaW50ICkubGVuZ3RoKCk7XG5cblx0fSxcblxuXHRnZXRCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQm94MzogLmdldEJvdW5kaW5nU3BoZXJlKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdC8vdGFyZ2V0ID0gbmV3IFNwaGVyZSgpOyAvLyByZW1vdmVkIHRvIGF2b2lkIGN5Y2xpYyBkZXBlbmRlbmN5XG5cblx0XHR9XG5cblx0XHR0aGlzLmdldENlbnRlciggdGFyZ2V0LmNlbnRlciApO1xuXG5cdFx0dGFyZ2V0LnJhZGl1cyA9IHRoaXMuZ2V0U2l6ZSggX3ZlY3RvciQxICkubGVuZ3RoKCkgKiAwLjU7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHRoaXMubWluLm1heCggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4Lm1pbiggYm94Lm1heCApO1xuXG5cdFx0Ly8gZW5zdXJlIHRoYXQgaWYgdGhlcmUgaXMgbm8gb3ZlcmxhcCwgdGhlIHJlc3VsdCBpcyBmdWxseSBlbXB0eSwgbm90IHNsaWdodGx5IGVtcHR5IHdpdGggbm9uLWluZi8raW5mIHZhbHVlcyB0aGF0IHdpbGwgY2F1c2Ugc3Vic2VxdWVuY2UgaW50ZXJzZWN0cyB0byBlcnJvbmVvdXNseSByZXR1cm4gdmFsaWQgdmFsdWVzLlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSB0aGlzLm1ha2VFbXB0eSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR1bmlvbjogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5tYXgoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdC8vIHRyYW5zZm9ybSBvZiBlbXB0eSBib3ggaXMgYW4gZW1wdHkgYm94LlxuXHRcdGlmICggdGhpcy5pc0VtcHR5KCkgKSByZXR1cm4gdGhpcztcblxuXHRcdC8vIE5PVEU6IEkgYW0gdXNpbmcgYSBiaW5hcnkgcGF0dGVybiB0byBzcGVjaWZ5IGFsbCAyXjMgY29tYmluYXRpb25zIGJlbG93XG5cdFx0X3BvaW50c1sgMCBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAwMFxuXHRcdF9wb2ludHNbIDEgXS5zZXQoIHRoaXMubWluLngsIHRoaXMubWluLnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAwMDFcblx0XHRfcG9pbnRzWyAyIF0uc2V0KCB0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMDEwXG5cdFx0X3BvaW50c1sgMyBdLnNldCggdGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDAxMVxuXHRcdF9wb2ludHNbIDQgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWluLnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMDBcblx0XHRfcG9pbnRzWyA1IF0uc2V0KCB0aGlzLm1heC54LCB0aGlzLm1pbi55LCB0aGlzLm1heC56ICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTsgLy8gMTAxXG5cdFx0X3BvaW50c1sgNiBdLnNldCggdGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueiApLmFwcGx5TWF0cml4NCggbWF0cml4ICk7IC8vIDExMFxuXHRcdF9wb2ludHNbIDcgXS5zZXQoIHRoaXMubWF4LngsIHRoaXMubWF4LnksIHRoaXMubWF4LnogKS5hcHBseU1hdHJpeDQoIG1hdHJpeCApOyAvLyAxMTFcblxuXHRcdHRoaXMuc2V0RnJvbVBvaW50cyggX3BvaW50cyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5taW4uYWRkKCBvZmZzZXQgKTtcblx0XHR0aGlzLm1heC5hZGQoIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRlcXVhbHM6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5taW4uZXF1YWxzKCB0aGlzLm1pbiApICYmIGJveC5tYXguZXF1YWxzKCB0aGlzLm1heCApO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBzYXRGb3JBeGVzKCBheGVzLCB2MCwgdjEsIHYyLCBleHRlbnRzICkge1xuXG5cdHZhciBpLCBqO1xuXG5cdGZvciAoIGkgPSAwLCBqID0gYXhlcy5sZW5ndGggLSAzOyBpIDw9IGo7IGkgKz0gMyApIHtcblxuXHRcdF90ZXN0QXhpcy5mcm9tQXJyYXkoIGF4ZXMsIGkgKTtcblx0XHQvLyBwcm9qZWN0IHRoZSBhYWJiIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdHZhciByID0gZXh0ZW50cy54ICogTWF0aC5hYnMoIF90ZXN0QXhpcy54ICkgKyBleHRlbnRzLnkgKiBNYXRoLmFicyggX3Rlc3RBeGlzLnkgKSArIGV4dGVudHMueiAqIE1hdGguYWJzKCBfdGVzdEF4aXMueiApO1xuXHRcdC8vIHByb2plY3QgYWxsIDMgdmVydGljZXMgb2YgdGhlIHRyaWFuZ2xlIG9udG8gdGhlIHNlcGVyYXRpbmcgYXhpc1xuXHRcdHZhciBwMCA9IHYwLmRvdCggX3Rlc3RBeGlzICk7XG5cdFx0dmFyIHAxID0gdjEuZG90KCBfdGVzdEF4aXMgKTtcblx0XHR2YXIgcDIgPSB2Mi5kb3QoIF90ZXN0QXhpcyApO1xuXHRcdC8vIGFjdHVhbCB0ZXN0LCBiYXNpY2FsbHkgc2VlIGlmIGVpdGhlciBvZiB0aGUgbW9zdCBleHRyZW1lIG9mIHRoZSB0cmlhbmdsZSBwb2ludHMgaW50ZXJzZWN0cyByXG5cdFx0aWYgKCBNYXRoLm1heCggLSBNYXRoLm1heCggcDAsIHAxLCBwMiApLCBNYXRoLm1pbiggcDAsIHAxLCBwMiApICkgPiByICkge1xuXG5cdFx0XHQvLyBwb2ludHMgb2YgdGhlIHByb2plY3RlZCB0cmlhbmdsZSBhcmUgb3V0c2lkZSB0aGUgcHJvamVjdGVkIGhhbGYtbGVuZ3RoIG9mIHRoZSBhYWJiXG5cdFx0XHQvLyB0aGUgYXhpcyBpcyBzZXBlcmF0aW5nIGFuZCB3ZSBjYW4gZXhpdFxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG52YXIgX2JveCQxID0gbmV3IEJveDMoKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFNwaGVyZSggY2VudGVyLCByYWRpdXMgKSB7XG5cblx0dGhpcy5jZW50ZXIgPSAoIGNlbnRlciAhPT0gdW5kZWZpbmVkICkgPyBjZW50ZXIgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnJhZGl1cyA9ICggcmFkaXVzICE9PSB1bmRlZmluZWQgKSA/IHJhZGl1cyA6IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3BoZXJlLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCBjZW50ZXIsIHJhZGl1cyApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIGNlbnRlciApO1xuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cywgb3B0aW9uYWxDZW50ZXIgKSB7XG5cblx0XHR2YXIgY2VudGVyID0gdGhpcy5jZW50ZXI7XG5cblx0XHRpZiAoIG9wdGlvbmFsQ2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNlbnRlci5jb3B5KCBvcHRpb25hbENlbnRlciApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0X2JveCQxLnNldEZyb21Qb2ludHMoIHBvaW50cyApLmdldENlbnRlciggY2VudGVyICk7XG5cblx0XHR9XG5cblx0XHR2YXIgbWF4UmFkaXVzU3EgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnRzWyBpIF0gKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHRoaXMuY2VudGVyLmNvcHkoIHNwaGVyZS5jZW50ZXIgKTtcblx0XHR0aGlzLnJhZGl1cyA9IHNwaGVyZS5yYWRpdXM7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gKCB0aGlzLnJhZGl1cyA8PSAwICk7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuICggcG9pbnQuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHJldHVybiAoIHBvaW50LmRpc3RhbmNlVG8oIHRoaXMuY2VudGVyICkgLSB0aGlzLnJhZGl1cyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHR2YXIgcmFkaXVzU3VtID0gdGhpcy5yYWRpdXMgKyBzcGhlcmUucmFkaXVzO1xuXG5cdFx0cmV0dXJuIHNwaGVyZS5jZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIHRoaXMuY2VudGVyICkgPD0gKCByYWRpdXNTdW0gKiByYWRpdXNTdW0gKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIGJveC5pbnRlcnNlY3RzU3BoZXJlKCB0aGlzICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hYnMoIHBsYW5lLmRpc3RhbmNlVG9Qb2ludCggdGhpcy5jZW50ZXIgKSApIDw9IHRoaXMucmFkaXVzO1xuXG5cdH0sXG5cblx0Y2xhbXBQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0dmFyIGRlbHRhTGVuZ3RoU3EgPSB0aGlzLmNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmNsYW1wUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHRhcmdldC5jb3B5KCBwb2ludCApO1xuXG5cdFx0aWYgKCBkZWx0YUxlbmd0aFNxID4gKCB0aGlzLnJhZGl1cyAqIHRoaXMucmFkaXVzICkgKSB7XG5cblx0XHRcdHRhcmdldC5zdWIoIHRoaXMuY2VudGVyICkubm9ybWFsaXplKCk7XG5cdFx0XHR0YXJnZXQubXVsdGlwbHlTY2FsYXIoIHRoaXMucmFkaXVzICkuYWRkKCB0aGlzLmNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblxuXHR9LFxuXG5cdGdldEJvdW5kaW5nQm94OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNwaGVyZTogLmdldEJvdW5kaW5nQm94KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBCb3gzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc2V0KCB0aGlzLmNlbnRlciwgdGhpcy5jZW50ZXIgKTtcblx0XHR0YXJnZXQuZXhwYW5kQnlTY2FsYXIoIHRoaXMucmFkaXVzICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG1hdHJpeCApIHtcblxuXHRcdHRoaXMuY2VudGVyLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cdFx0dGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIG1hdHJpeC5nZXRNYXhTY2FsZU9uQXhpcygpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5jZW50ZXIuYWRkKCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiBzcGhlcmUuY2VudGVyLmVxdWFscyggdGhpcy5jZW50ZXIgKSAmJiAoIHNwaGVyZS5yYWRpdXMgPT09IHRoaXMucmFkaXVzICk7XG5cblx0fVxuXG59ICk7XG5cbnZhciBfdmVjdG9yJDIgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9zZWdDZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9zZWdEaXIgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9kaWZmID0gbmV3IFZlY3RvcjMoKTtcblxudmFyIF9lZGdlMSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2VkZ2UyID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxuZnVuY3Rpb24gUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApIHtcblxuXHR0aGlzLm9yaWdpbiA9ICggb3JpZ2luICE9PSB1bmRlZmluZWQgKSA/IG9yaWdpbiA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuZGlyZWN0aW9uID0gKCBkaXJlY3Rpb24gIT09IHVuZGVmaW5lZCApID8gZGlyZWN0aW9uIDogbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIFJheS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggb3JpZ2luLCBkaXJlY3Rpb24gKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCBvcmlnaW4gKTtcblx0XHR0aGlzLmRpcmVjdGlvbi5jb3B5KCBkaXJlY3Rpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggcmF5ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uY29weSggcmF5Lm9yaWdpbiApO1xuXHRcdHRoaXMuZGlyZWN0aW9uLmNvcHkoIHJheS5kaXJlY3Rpb24gKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXQ6IGZ1bmN0aW9uICggdCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuYXQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHR9LFxuXG5cdGxvb2tBdDogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0dGhpcy5kaXJlY3Rpb24uY29weSggdiApLnN1YiggdGhpcy5vcmlnaW4gKS5ub3JtYWxpemUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cmVjYXN0OiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR0aGlzLm9yaWdpbi5jb3B5KCB0aGlzLmF0KCB0LCBfdmVjdG9yJDIgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9zZXN0UG9pbnRUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXk6IC5jbG9zZXN0UG9pbnRUb1BvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuc3ViVmVjdG9ycyggcG9pbnQsIHRoaXMub3JpZ2luICk7XG5cblx0XHR2YXIgZGlyZWN0aW9uRGlzdGFuY2UgPSB0YXJnZXQuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5vcmlnaW4gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggZGlyZWN0aW9uRGlzdGFuY2UgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCB0aGlzLmRpc3RhbmNlU3FUb1BvaW50KCBwb2ludCApICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVNxVG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCApIHtcblxuXHRcdHZhciBkaXJlY3Rpb25EaXN0YW5jZSA9IF92ZWN0b3IkMi5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5vcmlnaW4gKS5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0XHQvLyBwb2ludCBiZWhpbmQgdGhlIHJheVxuXG5cdFx0aWYgKCBkaXJlY3Rpb25EaXN0YW5jZSA8IDAgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLm9yaWdpbi5kaXN0YW5jZVRvU3F1YXJlZCggcG9pbnQgKTtcblxuXHRcdH1cblxuXHRcdF92ZWN0b3IkMi5jb3B5KCB0aGlzLmRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCBkaXJlY3Rpb25EaXN0YW5jZSApLmFkZCggdGhpcy5vcmlnaW4gKTtcblxuXHRcdHJldHVybiBfdmVjdG9yJDIuZGlzdGFuY2VUb1NxdWFyZWQoIHBvaW50ICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVNxVG9TZWdtZW50OiBmdW5jdGlvbiAoIHYwLCB2MSwgb3B0aW9uYWxQb2ludE9uUmF5LCBvcHRpb25hbFBvaW50T25TZWdtZW50ICkge1xuXG5cdFx0Ly8gZnJvbSBodHRwOi8vd3d3Lmdlb21ldHJpY3Rvb2xzLmNvbS9HVEVuZ2luZS9JbmNsdWRlL01hdGhlbWF0aWNzL0d0ZURpc3RSYXlTZWdtZW50Lmhcblx0XHQvLyBJdCByZXR1cm5zIHRoZSBtaW4gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcmF5IGFuZCB0aGUgc2VnbWVudFxuXHRcdC8vIGRlZmluZWQgYnkgdjAgYW5kIHYxXG5cdFx0Ly8gSXQgY2FuIGFsc28gc2V0IHR3byBvcHRpb25hbCB0YXJnZXRzIDpcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSByYXlcblx0XHQvLyAtIFRoZSBjbG9zZXN0IHBvaW50IG9uIHRoZSBzZWdtZW50XG5cblx0XHRfc2VnQ2VudGVyLmNvcHkoIHYwICkuYWRkKCB2MSApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblx0XHRfc2VnRGlyLmNvcHkoIHYxICkuc3ViKCB2MCApLm5vcm1hbGl6ZSgpO1xuXHRcdF9kaWZmLmNvcHkoIHRoaXMub3JpZ2luICkuc3ViKCBfc2VnQ2VudGVyICk7XG5cblx0XHR2YXIgc2VnRXh0ZW50ID0gdjAuZGlzdGFuY2VUbyggdjEgKSAqIDAuNTtcblx0XHR2YXIgYTAxID0gLSB0aGlzLmRpcmVjdGlvbi5kb3QoIF9zZWdEaXIgKTtcblx0XHR2YXIgYjAgPSBfZGlmZi5kb3QoIHRoaXMuZGlyZWN0aW9uICk7XG5cdFx0dmFyIGIxID0gLSBfZGlmZi5kb3QoIF9zZWdEaXIgKTtcblx0XHR2YXIgYyA9IF9kaWZmLmxlbmd0aFNxKCk7XG5cdFx0dmFyIGRldCA9IE1hdGguYWJzKCAxIC0gYTAxICogYTAxICk7XG5cdFx0dmFyIHMwLCBzMSwgc3FyRGlzdCwgZXh0RGV0O1xuXG5cdFx0aWYgKCBkZXQgPiAwICkge1xuXG5cdFx0XHQvLyBUaGUgcmF5IGFuZCBzZWdtZW50IGFyZSBub3QgcGFyYWxsZWwuXG5cblx0XHRcdHMwID0gYTAxICogYjEgLSBiMDtcblx0XHRcdHMxID0gYTAxICogYjAgLSBiMTtcblx0XHRcdGV4dERldCA9IHNlZ0V4dGVudCAqIGRldDtcblxuXHRcdFx0aWYgKCBzMCA+PSAwICkge1xuXG5cdFx0XHRcdGlmICggczEgPj0gLSBleHREZXQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHMxIDw9IGV4dERldCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDBcblx0XHRcdFx0XHRcdC8vIE1pbmltdW0gYXQgaW50ZXJpb3IgcG9pbnRzIG9mIHJheSBhbmQgc2VnbWVudC5cblxuXHRcdFx0XHRcdFx0dmFyIGludkRldCA9IDEgLyBkZXQ7XG5cdFx0XHRcdFx0XHRzMCAqPSBpbnZEZXQ7XG5cdFx0XHRcdFx0XHRzMSAqPSBpbnZEZXQ7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gczAgKiAoIHMwICsgYTAxICogczEgKyAyICogYjAgKSArIHMxICogKCBhMDEgKiBzMCArIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gcmVnaW9uIDFcblxuXHRcdFx0XHRcdFx0czEgPSBzZWdFeHRlbnQ7XG5cdFx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyByZWdpb24gNVxuXG5cdFx0XHRcdFx0czEgPSAtIHNlZ0V4dGVudDtcblx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggYTAxICogczEgKyBiMCApICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0aWYgKCBzMSA8PSAtIGV4dERldCApIHtcblxuXHRcdFx0XHRcdC8vIHJlZ2lvbiA0XG5cblx0XHRcdFx0XHRzMCA9IE1hdGgubWF4KCAwLCAtICggLSBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XG5cdFx0XHRcdFx0czEgPSAoIHMwID4gMCApID8gLSBzZWdFeHRlbnQgOiBNYXRoLm1pbiggTWF0aC5tYXgoIC0gc2VnRXh0ZW50LCAtIGIxICksIHNlZ0V4dGVudCApO1xuXHRcdFx0XHRcdHNxckRpc3QgPSAtIHMwICogczAgKyBzMSAqICggczEgKyAyICogYjEgKSArIGM7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggczEgPD0gZXh0RGV0ICkge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDNcblxuXHRcdFx0XHRcdHMwID0gMDtcblx0XHRcdFx0XHRzMSA9IE1hdGgubWluKCBNYXRoLm1heCggLSBzZWdFeHRlbnQsIC0gYjEgKSwgc2VnRXh0ZW50ICk7XG5cdFx0XHRcdFx0c3FyRGlzdCA9IHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gcmVnaW9uIDJcblxuXHRcdFx0XHRcdHMwID0gTWF0aC5tYXgoIDAsIC0gKCBhMDEgKiBzZWdFeHRlbnQgKyBiMCApICk7XG5cdFx0XHRcdFx0czEgPSAoIHMwID4gMCApID8gc2VnRXh0ZW50IDogTWF0aC5taW4oIE1hdGgubWF4KCAtIHNlZ0V4dGVudCwgLSBiMSApLCBzZWdFeHRlbnQgKTtcblx0XHRcdFx0XHRzcXJEaXN0ID0gLSBzMCAqIHMwICsgczEgKiAoIHMxICsgMiAqIGIxICkgKyBjO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gUmF5IGFuZCBzZWdtZW50IGFyZSBwYXJhbGxlbC5cblxuXHRcdFx0czEgPSAoIGEwMSA+IDAgKSA/IC0gc2VnRXh0ZW50IDogc2VnRXh0ZW50O1xuXHRcdFx0czAgPSBNYXRoLm1heCggMCwgLSAoIGEwMSAqIHMxICsgYjAgKSApO1xuXHRcdFx0c3FyRGlzdCA9IC0gczAgKiBzMCArIHMxICogKCBzMSArIDIgKiBiMSApICsgYztcblxuXHRcdH1cblxuXHRcdGlmICggb3B0aW9uYWxQb2ludE9uUmF5ICkge1xuXG5cdFx0XHRvcHRpb25hbFBvaW50T25SYXkuY29weSggdGhpcy5kaXJlY3Rpb24gKS5tdWx0aXBseVNjYWxhciggczAgKS5hZGQoIHRoaXMub3JpZ2luICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbmFsUG9pbnRPblNlZ21lbnQgKSB7XG5cblx0XHRcdG9wdGlvbmFsUG9pbnRPblNlZ21lbnQuY29weSggX3NlZ0RpciApLm11bHRpcGx5U2NhbGFyKCBzMSApLmFkZCggX3NlZ0NlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNxckRpc3Q7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlLCB0YXJnZXQgKSB7XG5cblx0XHRfdmVjdG9yJDIuc3ViVmVjdG9ycyggc3BoZXJlLmNlbnRlciwgdGhpcy5vcmlnaW4gKTtcblx0XHR2YXIgdGNhID0gX3ZlY3RvciQyLmRvdCggdGhpcy5kaXJlY3Rpb24gKTtcblx0XHR2YXIgZDIgPSBfdmVjdG9yJDIuZG90KCBfdmVjdG9yJDIgKSAtIHRjYSAqIHRjYTtcblx0XHR2YXIgcmFkaXVzMiA9IHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzO1xuXG5cdFx0aWYgKCBkMiA+IHJhZGl1czIgKSByZXR1cm4gbnVsbDtcblxuXHRcdHZhciB0aGMgPSBNYXRoLnNxcnQoIHJhZGl1czIgLSBkMiApO1xuXG5cdFx0Ly8gdDAgPSBmaXJzdCBpbnRlcnNlY3QgcG9pbnQgLSBlbnRyYW5jZSBvbiBmcm9udCBvZiBzcGhlcmVcblx0XHR2YXIgdDAgPSB0Y2EgLSB0aGM7XG5cblx0XHQvLyB0MSA9IHNlY29uZCBpbnRlcnNlY3QgcG9pbnQgLSBleGl0IHBvaW50IG9uIGJhY2sgb2Ygc3BoZXJlXG5cdFx0dmFyIHQxID0gdGNhICsgdGhjO1xuXG5cdFx0Ly8gdGVzdCB0byBzZWUgaWYgYm90aCB0MCBhbmQgdDEgYXJlIGJlaGluZCB0aGUgcmF5IC0gaWYgc28sIHJldHVybiBudWxsXG5cdFx0aWYgKCB0MCA8IDAgJiYgdDEgPCAwICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyB0ZXN0IHRvIHNlZSBpZiB0MCBpcyBiZWhpbmQgdGhlIHJheTpcblx0XHQvLyBpZiBpdCBpcywgdGhlIHJheSBpcyBpbnNpZGUgdGhlIHNwaGVyZSwgc28gcmV0dXJuIHRoZSBzZWNvbmQgZXhpdCBwb2ludCBzY2FsZWQgYnkgdDEsXG5cdFx0Ly8gaW4gb3JkZXIgdG8gYWx3YXlzIHJldHVybiBhbiBpbnRlcnNlY3QgcG9pbnQgdGhhdCBpcyBpbiBmcm9udCBvZiB0aGUgcmF5LlxuXHRcdGlmICggdDAgPCAwICkgcmV0dXJuIHRoaXMuYXQoIHQxLCB0YXJnZXQgKTtcblxuXHRcdC8vIGVsc2UgdDAgaXMgaW4gZnJvbnQgb2YgdGhlIHJheSwgc28gcmV0dXJuIHRoZSBmaXJzdCBjb2xsaXNpb24gcG9pbnQgc2NhbGVkIGJ5IHQwXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQwLCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGlzdGFuY2VTcVRvUG9pbnQoIHNwaGVyZS5jZW50ZXIgKSA8PSAoIHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzICk7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvUGxhbmU6IGZ1bmN0aW9uICggcGxhbmUgKSB7XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciA9PT0gMCApIHtcblxuXHRcdFx0Ly8gbGluZSBpcyBjb3BsYW5hciwgcmV0dXJuIG9yaWdpblxuXHRcdFx0aWYgKCBwbGFuZS5kaXN0YW5jZVRvUG9pbnQoIHRoaXMub3JpZ2luICkgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gTnVsbCBpcyBwcmVmZXJhYmxlIHRvIHVuZGVmaW5lZCBzaW5jZSB1bmRlZmluZWQgbWVhbnMuLi4uIGl0IGlzIHVuZGVmaW5lZFxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdHZhciB0ID0gLSAoIHRoaXMub3JpZ2luLmRvdCggcGxhbmUubm9ybWFsICkgKyBwbGFuZS5jb25zdGFudCApIC8gZGVub21pbmF0b3I7XG5cblx0XHQvLyBSZXR1cm4gaWYgdGhlIHJheSBuZXZlciBpbnRlcnNlY3RzIHRoZSBwbGFuZVxuXG5cdFx0cmV0dXJuIHQgPj0gMCA/IHQgOiBudWxsO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0UGxhbmU6IGZ1bmN0aW9uICggcGxhbmUsIHRhcmdldCApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5kaXN0YW5jZVRvUGxhbmUoIHBsYW5lICk7XG5cblx0XHRpZiAoIHQgPT09IG51bGwgKSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHQsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1BsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Ly8gY2hlY2sgaWYgdGhlIHJheSBsaWVzIG9uIHRoZSBwbGFuZSBmaXJzdFxuXG5cdFx0dmFyIGRpc3RUb1BvaW50ID0gcGxhbmUuZGlzdGFuY2VUb1BvaW50KCB0aGlzLm9yaWdpbiApO1xuXG5cdFx0aWYgKCBkaXN0VG9Qb2ludCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHR2YXIgZGVub21pbmF0b3IgPSBwbGFuZS5ub3JtYWwuZG90KCB0aGlzLmRpcmVjdGlvbiApO1xuXG5cdFx0aWYgKCBkZW5vbWluYXRvciAqIGRpc3RUb1BvaW50IDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cblx0XHR9XG5cblx0XHQvLyByYXkgb3JpZ2luIGlzIGJlaGluZCB0aGUgcGxhbmUgKGFuZCBpcyBwb2ludGluZyBiZWhpbmQgaXQpXG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RCb3g6IGZ1bmN0aW9uICggYm94LCB0YXJnZXQgKSB7XG5cblx0XHR2YXIgdG1pbiwgdG1heCwgdHltaW4sIHR5bWF4LCB0em1pbiwgdHptYXg7XG5cblx0XHR2YXIgaW52ZGlyeCA9IDEgLyB0aGlzLmRpcmVjdGlvbi54LFxuXHRcdFx0aW52ZGlyeSA9IDEgLyB0aGlzLmRpcmVjdGlvbi55LFxuXHRcdFx0aW52ZGlyeiA9IDEgLyB0aGlzLmRpcmVjdGlvbi56O1xuXG5cdFx0dmFyIG9yaWdpbiA9IHRoaXMub3JpZ2luO1xuXG5cdFx0aWYgKCBpbnZkaXJ4ID49IDAgKSB7XG5cblx0XHRcdHRtaW4gPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXHRcdFx0dG1heCA9ICggYm94Lm1heC54IC0gb3JpZ2luLnggKSAqIGludmRpcng7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0bWluID0gKCBib3gubWF4LnggLSBvcmlnaW4ueCApICogaW52ZGlyeDtcblx0XHRcdHRtYXggPSAoIGJveC5taW4ueCAtIG9yaWdpbi54ICkgKiBpbnZkaXJ4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpbnZkaXJ5ID49IDAgKSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHR5bWluID0gKCBib3gubWF4LnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblx0XHRcdHR5bWF4ID0gKCBib3gubWluLnkgLSBvcmlnaW4ueSApICogaW52ZGlyeTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB0bWluID4gdHltYXggKSB8fCAoIHR5bWluID4gdG1heCApICkgcmV0dXJuIG51bGw7XG5cblx0XHQvLyBUaGVzZSBsaW5lcyBhbHNvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0bWluIG9yIHRtYXggaXMgTmFOXG5cdFx0Ly8gKHJlc3VsdCBvZiAwICogSW5maW5pdHkpLiB4ICE9PSB4IHJldHVybnMgdHJ1ZSBpZiB4IGlzIE5hTlxuXG5cdFx0aWYgKCB0eW1pbiA+IHRtaW4gfHwgdG1pbiAhPT0gdG1pbiApIHRtaW4gPSB0eW1pbjtcblxuXHRcdGlmICggdHltYXggPCB0bWF4IHx8IHRtYXggIT09IHRtYXggKSB0bWF4ID0gdHltYXg7XG5cblx0XHRpZiAoIGludmRpcnogPj0gMCApIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dHptaW4gPSAoIGJveC5tYXgueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXHRcdFx0dHptYXggPSAoIGJveC5taW4ueiAtIG9yaWdpbi56ICkgKiBpbnZkaXJ6O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCAoIHRtaW4gPiB0em1heCApIHx8ICggdHptaW4gPiB0bWF4ICkgKSByZXR1cm4gbnVsbDtcblxuXHRcdGlmICggdHptaW4gPiB0bWluIHx8IHRtaW4gIT09IHRtaW4gKSB0bWluID0gdHptaW47XG5cblx0XHRpZiAoIHR6bWF4IDwgdG1heCB8fCB0bWF4ICE9PSB0bWF4ICkgdG1heCA9IHR6bWF4O1xuXG5cdFx0Ly9yZXR1cm4gcG9pbnQgY2xvc2VzdCB0byB0aGUgcmF5IChwb3NpdGl2ZSBzaWRlKVxuXG5cdFx0aWYgKCB0bWF4IDwgMCApIHJldHVybiBudWxsO1xuXG5cdFx0cmV0dXJuIHRoaXMuYXQoIHRtaW4gPj0gMCA/IHRtaW4gOiB0bWF4LCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0Qm94KCBib3gsIF92ZWN0b3IkMiApICE9PSBudWxsO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0VHJpYW5nbGU6IGZ1bmN0aW9uICggYSwgYiwgYywgYmFja2ZhY2VDdWxsaW5nLCB0YXJnZXQgKSB7XG5cblx0XHQvLyBDb21wdXRlIHRoZSBvZmZzZXQgb3JpZ2luLCBlZGdlcywgYW5kIG5vcm1hbC5cblxuXHRcdC8vIGZyb20gaHR0cDovL3d3dy5nZW9tZXRyaWN0b29scy5jb20vR1RFbmdpbmUvSW5jbHVkZS9NYXRoZW1hdGljcy9HdGVJbnRyUmF5M1RyaWFuZ2xlMy5oXG5cblx0XHRfZWRnZTEuc3ViVmVjdG9ycyggYiwgYSApO1xuXHRcdF9lZGdlMi5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X25vcm1hbC5jcm9zc1ZlY3RvcnMoIF9lZGdlMSwgX2VkZ2UyICk7XG5cblx0XHQvLyBTb2x2ZSBRICsgdCpEID0gYjEqRTEgKyBiMipFMiAoUSA9IGtEaWZmLCBEID0gcmF5IGRpcmVjdGlvbixcblx0XHQvLyBFMSA9IGtFZGdlMSwgRTIgPSBrRWRnZTIsIE4gPSBDcm9zcyhFMSxFMikpIGJ5XG5cdFx0Ly8gICB8RG90KEQsTil8KmIxID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoUSxFMikpXG5cdFx0Ly8gICB8RG90KEQsTil8KmIyID0gc2lnbihEb3QoRCxOKSkqRG90KEQsQ3Jvc3MoRTEsUSkpXG5cdFx0Ly8gICB8RG90KEQsTil8KnQgPSAtc2lnbihEb3QoRCxOKSkqRG90KFEsTilcblx0XHR2YXIgRGROID0gdGhpcy5kaXJlY3Rpb24uZG90KCBfbm9ybWFsICk7XG5cdFx0dmFyIHNpZ247XG5cblx0XHRpZiAoIERkTiA+IDAgKSB7XG5cblx0XHRcdGlmICggYmFja2ZhY2VDdWxsaW5nICkgcmV0dXJuIG51bGw7XG5cdFx0XHRzaWduID0gMTtcblxuXHRcdH0gZWxzZSBpZiAoIERkTiA8IDAgKSB7XG5cblx0XHRcdHNpZ24gPSAtIDE7XG5cdFx0XHREZE4gPSAtIERkTjtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBudWxsO1xuXG5cdFx0fVxuXG5cdFx0X2RpZmYuc3ViVmVjdG9ycyggdGhpcy5vcmlnaW4sIGEgKTtcblx0XHR2YXIgRGRReEUyID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UyLmNyb3NzVmVjdG9ycyggX2RpZmYsIF9lZGdlMiApICk7XG5cblx0XHQvLyBiMSA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRReEUyIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgRGRFMXhRID0gc2lnbiAqIHRoaXMuZGlyZWN0aW9uLmRvdCggX2VkZ2UxLmNyb3NzKCBfZGlmZiApICk7XG5cblx0XHQvLyBiMiA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRFMXhRIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBiMStiMiA+IDEsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggRGRReEUyICsgRGRFMXhRID4gRGROICkge1xuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdH1cblxuXHRcdC8vIExpbmUgaW50ZXJzZWN0cyB0cmlhbmdsZSwgY2hlY2sgaWYgcmF5IGRvZXMuXG5cdFx0dmFyIFFkTiA9IC0gc2lnbiAqIF9kaWZmLmRvdCggX25vcm1hbCApO1xuXG5cdFx0Ly8gdCA8IDAsIG5vIGludGVyc2VjdGlvblxuXHRcdGlmICggUWROIDwgMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHQvLyBSYXkgaW50ZXJzZWN0cyB0cmlhbmdsZS5cblx0XHRyZXR1cm4gdGhpcy5hdCggUWROIC8gRGROLCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXg0ICkge1xuXG5cdFx0dGhpcy5vcmlnaW4uYXBwbHlNYXRyaXg0KCBtYXRyaXg0ICk7XG5cdFx0dGhpcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCBtYXRyaXg0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCByYXkgKSB7XG5cblx0XHRyZXR1cm4gcmF5Lm9yaWdpbi5lcXVhbHMoIHRoaXMub3JpZ2luICkgJiYgcmF5LmRpcmVjdGlvbi5lcXVhbHMoIHRoaXMuZGlyZWN0aW9uICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbnZhciBfdmVjdG9yMSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3ZlY3RvcjIgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9ub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpO1xuXG5mdW5jdGlvbiBQbGFuZSggbm9ybWFsLCBjb25zdGFudCApIHtcblxuXHQvLyBub3JtYWwgaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkXG5cblx0dGhpcy5ub3JtYWwgPSAoIG5vcm1hbCAhPT0gdW5kZWZpbmVkICkgPyBub3JtYWwgOiBuZXcgVmVjdG9yMyggMSwgMCwgMCApO1xuXHR0aGlzLmNvbnN0YW50ID0gKCBjb25zdGFudCAhPT0gdW5kZWZpbmVkICkgPyBjb25zdGFudCA6IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUGxhbmUucHJvdG90eXBlLCB7XG5cblx0aXNQbGFuZTogdHJ1ZSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggbm9ybWFsLCBjb25zdGFudCApIHtcblxuXHRcdHRoaXMubm9ybWFsLmNvcHkoIG5vcm1hbCApO1xuXHRcdHRoaXMuY29uc3RhbnQgPSBjb25zdGFudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0Q29tcG9uZW50czogZnVuY3Rpb24gKCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuc2V0KCB4LCB5LCB6ICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IHc7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Ob3JtYWxBbmRDb3BsYW5hclBvaW50OiBmdW5jdGlvbiAoIG5vcm1hbCwgcG9pbnQgKSB7XG5cblx0XHR0aGlzLm5vcm1hbC5jb3B5KCBub3JtYWwgKTtcblx0XHR0aGlzLmNvbnN0YW50ID0gLSBwb2ludC5kb3QoIHRoaXMubm9ybWFsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Db3BsYW5hclBvaW50czogZnVuY3Rpb24gKCBhLCBiLCBjICkge1xuXG5cdFx0dmFyIG5vcm1hbCA9IF92ZWN0b3IxLnN1YlZlY3RvcnMoIGMsIGIgKS5jcm9zcyggX3ZlY3RvcjIuc3ViVmVjdG9ycyggYSwgYiApICkubm9ybWFsaXplKCk7XG5cblx0XHQvLyBROiBzaG91bGQgYW4gZXJyb3IgYmUgdGhyb3duIGlmIG5vcm1hbCBpcyB6ZXJvIChlLmcuIGRlZ2VuZXJhdGUgcGxhbmUpP1xuXG5cdFx0dGhpcy5zZXRGcm9tTm9ybWFsQW5kQ29wbGFuYXJQb2ludCggbm9ybWFsLCBhICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggcGxhbmUubm9ybWFsICk7XG5cdFx0dGhpcy5jb25zdGFudCA9IHBsYW5lLmNvbnN0YW50O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRub3JtYWxpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIE5vdGU6IHdpbGwgbGVhZCB0byBhIGRpdmlkZSBieSB6ZXJvIGlmIHRoZSBwbGFuZSBpcyBpbnZhbGlkLlxuXG5cdFx0dmFyIGludmVyc2VOb3JtYWxMZW5ndGggPSAxLjAgLyB0aGlzLm5vcm1hbC5sZW5ndGgoKTtcblx0XHR0aGlzLm5vcm1hbC5tdWx0aXBseVNjYWxhciggaW52ZXJzZU5vcm1hbExlbmd0aCApO1xuXHRcdHRoaXMuY29uc3RhbnQgKj0gaW52ZXJzZU5vcm1hbExlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bmVnYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNvbnN0YW50ICo9IC0gMTtcblx0XHR0aGlzLm5vcm1hbC5uZWdhdGUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMubm9ybWFsLmRvdCggcG9pbnQgKSArIHRoaXMuY29uc3RhbnQ7XG5cblx0fSxcblxuXHRkaXN0YW5jZVRvU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmRpc3RhbmNlVG9Qb2ludCggc3BoZXJlLmNlbnRlciApIC0gc3BoZXJlLnJhZGl1cztcblxuXHR9LFxuXG5cdHByb2plY3RQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5wcm9qZWN0UG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSApLmFkZCggcG9pbnQgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdExpbmU6IGZ1bmN0aW9uICggbGluZSwgdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGxhbmU6IC5pbnRlcnNlY3RMaW5lKCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHR2YXIgZGlyZWN0aW9uID0gbGluZS5kZWx0YSggX3ZlY3RvcjEgKTtcblxuXHRcdHZhciBkZW5vbWluYXRvciA9IHRoaXMubm9ybWFsLmRvdCggZGlyZWN0aW9uICk7XG5cblx0XHRpZiAoIGRlbm9taW5hdG9yID09PSAwICkge1xuXG5cdFx0XHQvLyBsaW5lIGlzIGNvcGxhbmFyLCByZXR1cm4gb3JpZ2luXG5cdFx0XHRpZiAoIHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLnN0YXJ0ICkgPT09IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBsaW5lLnN0YXJ0ICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gVW5zdXJlIGlmIHRoaXMgaXMgdGhlIGNvcnJlY3QgbWV0aG9kIHRvIGhhbmRsZSB0aGlzIGNhc2UuXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHQgPSAtICggbGluZS5zdGFydC5kb3QoIHRoaXMubm9ybWFsICkgKyB0aGlzLmNvbnN0YW50ICkgLyBkZW5vbWluYXRvcjtcblxuXHRcdGlmICggdCA8IDAgfHwgdCA+IDEgKSB7XG5cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGRpcmVjdGlvbiApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCBsaW5lLnN0YXJ0ICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzTGluZTogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0Ly8gTm90ZTogdGhpcyB0ZXN0cyBpZiBhIGxpbmUgaW50ZXJzZWN0cyB0aGUgcGxhbmUsIG5vdCB3aGV0aGVyIGl0IChvciBpdHMgZW5kLXBvaW50cykgYXJlIGNvcGxhbmFyIHdpdGggaXQuXG5cblx0XHR2YXIgc3RhcnRTaWduID0gdGhpcy5kaXN0YW5jZVRvUG9pbnQoIGxpbmUuc3RhcnQgKTtcblx0XHR2YXIgZW5kU2lnbiA9IHRoaXMuZGlzdGFuY2VUb1BvaW50KCBsaW5lLmVuZCApO1xuXG5cdFx0cmV0dXJuICggc3RhcnRTaWduIDwgMCAmJiBlbmRTaWduID4gMCApIHx8ICggZW5kU2lnbiA8IDAgJiYgc3RhcnRTaWduID4gMCApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c1NwaGVyZTogZnVuY3Rpb24gKCBzcGhlcmUgKSB7XG5cblx0XHRyZXR1cm4gc3BoZXJlLmludGVyc2VjdHNQbGFuZSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29wbGFuYXJQb2ludDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QbGFuZTogLmNvcGxhbmFyUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggdGhpcy5ub3JtYWwgKS5tdWx0aXBseVNjYWxhciggLSB0aGlzLmNvbnN0YW50ICk7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4LCBvcHRpb25hbE5vcm1hbE1hdHJpeCApIHtcblxuXHRcdHZhciBub3JtYWxNYXRyaXggPSBvcHRpb25hbE5vcm1hbE1hdHJpeCB8fCBfbm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHR2YXIgcmVmZXJlbmNlUG9pbnQgPSB0aGlzLmNvcGxhbmFyUG9pbnQoIF92ZWN0b3IxICkuYXBwbHlNYXRyaXg0KCBtYXRyaXggKTtcblxuXHRcdHZhciBub3JtYWwgPSB0aGlzLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0dGhpcy5jb25zdGFudCA9IC0gcmVmZXJlbmNlUG9pbnQuZG90KCBub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIG9mZnNldCApIHtcblxuXHRcdHRoaXMuY29uc3RhbnQgLT0gb2Zmc2V0LmRvdCggdGhpcy5ub3JtYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0cmV0dXJuIHBsYW5lLm5vcm1hbC5lcXVhbHMoIHRoaXMubm9ybWFsICkgJiYgKCBwbGFuZS5jb25zdGFudCA9PT0gdGhpcy5jb25zdGFudCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF92MCQxID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdjEkMyA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3YyJDEgPSBuZXcgVmVjdG9yMygpO1xudmFyIF92MyA9IG5ldyBWZWN0b3IzKCk7XG5cbnZhciBfdmFiID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdmFjID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdmJjID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdmFwID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdmJwID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdmNwID0gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gVHJpYW5nbGUoIGEsIGIsIGMgKSB7XG5cblx0dGhpcy5hID0gKCBhICE9PSB1bmRlZmluZWQgKSA/IGEgOiBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLmIgPSAoIGIgIT09IHVuZGVmaW5lZCApID8gYiA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuYyA9ICggYyAhPT0gdW5kZWZpbmVkICkgPyBjIDogbmV3IFZlY3RvcjMoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBUcmlhbmdsZSwge1xuXG5cdGdldE5vcm1hbDogZnVuY3Rpb24gKCBhLCBiLCBjLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldE5vcm1hbCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0dGFyZ2V0LnN1YlZlY3RvcnMoIGMsIGIgKTtcblx0XHRfdjAkMS5zdWJWZWN0b3JzKCBhLCBiICk7XG5cdFx0dGFyZ2V0LmNyb3NzKCBfdjAkMSApO1xuXG5cdFx0dmFyIHRhcmdldExlbmd0aFNxID0gdGFyZ2V0Lmxlbmd0aFNxKCk7XG5cdFx0aWYgKCB0YXJnZXRMZW5ndGhTcSA+IDAgKSB7XG5cblx0XHRcdHJldHVybiB0YXJnZXQubXVsdGlwbHlTY2FsYXIoIDEgLyBNYXRoLnNxcnQoIHRhcmdldExlbmd0aFNxICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAwLCAwLCAwICk7XG5cblx0fSxcblxuXHQvLyBzdGF0aWMvaW5zdGFuY2UgbWV0aG9kIHRvIGNhbGN1bGF0ZSBiYXJ5Y2VudHJpYyBjb29yZGluYXRlc1xuXHQvLyBiYXNlZCBvbjogaHR0cDovL3d3dy5ibGFja3Bhd24uY29tL3RleHRzL3BvaW50aW5wb2x5L2RlZmF1bHQuaHRtbFxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uICggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIGMsIGEgKTtcblx0XHRfdjEkMy5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3YyJDEuc3ViVmVjdG9ycyggcG9pbnQsIGEgKTtcblxuXHRcdHZhciBkb3QwMCA9IF92MCQxLmRvdCggX3YwJDEgKTtcblx0XHR2YXIgZG90MDEgPSBfdjAkMS5kb3QoIF92MSQzICk7XG5cdFx0dmFyIGRvdDAyID0gX3YwJDEuZG90KCBfdjIkMSApO1xuXHRcdHZhciBkb3QxMSA9IF92MSQzLmRvdCggX3YxJDMgKTtcblx0XHR2YXIgZG90MTIgPSBfdjEkMy5kb3QoIF92MiQxICk7XG5cblx0XHR2YXIgZGVub20gPSAoIGRvdDAwICogZG90MTEgLSBkb3QwMSAqIGRvdDAxICk7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmdldEJhcnljb29yZCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sbGluZWFyIG9yIHNpbmd1bGFyIHRyaWFuZ2xlXG5cdFx0aWYgKCBkZW5vbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYXJiaXRyYXJ5IGxvY2F0aW9uIG91dHNpZGUgb2YgdHJpYW5nbGU/XG5cdFx0XHQvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIHRoZSBiZXN0IGlkZWEsIG1heWJlIHNob3VsZCBiZSByZXR1cm5pbmcgdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LnNldCggLSAyLCAtIDEsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGludkRlbm9tID0gMSAvIGRlbm9tO1xuXHRcdHZhciB1ID0gKCBkb3QxMSAqIGRvdDAyIC0gZG90MDEgKiBkb3QxMiApICogaW52RGVub207XG5cdFx0dmFyIHYgPSAoIGRvdDAwICogZG90MTIgLSBkb3QwMSAqIGRvdDAyICkgKiBpbnZEZW5vbTtcblxuXHRcdC8vIGJhcnljZW50cmljIGNvb3JkaW5hdGVzIG11c3QgYWx3YXlzIHN1bSB0byAxXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIDEgLSB1IC0gdiwgdiwgdSApO1xuXG5cdH0sXG5cblx0Y29udGFpbnNQb2ludDogZnVuY3Rpb24gKCBwb2ludCwgYSwgYiwgYyApIHtcblxuXHRcdFRyaWFuZ2xlLmdldEJhcnljb29yZCggcG9pbnQsIGEsIGIsIGMsIF92MyApO1xuXG5cdFx0cmV0dXJuICggX3YzLnggPj0gMCApICYmICggX3YzLnkgPj0gMCApICYmICggKCBfdjMueCArIF92My55ICkgPD0gMSApO1xuXG5cdH0sXG5cblx0Z2V0VVY6IGZ1bmN0aW9uICggcG9pbnQsIHAxLCBwMiwgcDMsIHV2MSwgdXYyLCB1djMsIHRhcmdldCApIHtcblxuXHRcdHRoaXMuZ2V0QmFyeWNvb3JkKCBwb2ludCwgcDEsIHAyLCBwMywgX3YzICk7XG5cblx0XHR0YXJnZXQuc2V0KCAwLCAwICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggdXYxLCBfdjMueCApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIHV2MiwgX3YzLnkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCB1djMsIF92My56ICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0aXNGcm9udEZhY2luZzogZnVuY3Rpb24gKCBhLCBiLCBjLCBkaXJlY3Rpb24gKSB7XG5cblx0XHRfdjAkMS5zdWJWZWN0b3JzKCBjLCBiICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggYSwgYiApO1xuXG5cdFx0Ly8gc3RyaWN0bHkgZnJvbnQgZmFjaW5nXG5cdFx0cmV0dXJuICggX3YwJDEuY3Jvc3MoIF92MSQzICkuZG90KCBkaXJlY3Rpb24gKSA8IDAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIGEsIGIsIGMgKSB7XG5cblx0XHR0aGlzLmEuY29weSggYSApO1xuXHRcdHRoaXMuYi5jb3B5KCBiICk7XG5cdFx0dGhpcy5jLmNvcHkoIGMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50c0FuZEluZGljZXM6IGZ1bmN0aW9uICggcG9pbnRzLCBpMCwgaTEsIGkyICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHBvaW50c1sgaTAgXSApO1xuXHRcdHRoaXMuYi5jb3B5KCBwb2ludHNbIGkxIF0gKTtcblx0XHR0aGlzLmMuY29weSggcG9pbnRzWyBpMiBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0dGhpcy5hLmNvcHkoIHRyaWFuZ2xlLmEgKTtcblx0XHR0aGlzLmIuY29weSggdHJpYW5nbGUuYiApO1xuXHRcdHRoaXMuYy5jb3B5KCB0cmlhbmdsZS5jICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEFyZWE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdF92MCQxLnN1YlZlY3RvcnMoIHRoaXMuYywgdGhpcy5iICk7XG5cdFx0X3YxJDMuc3ViVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKTtcblxuXHRcdHJldHVybiBfdjAkMS5jcm9zcyggX3YxJDMgKS5sZW5ndGgoKSAqIDAuNTtcblxuXHR9LFxuXG5cdGdldE1pZHBvaW50OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuZ2V0TWlkcG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuYWRkVmVjdG9ycyggdGhpcy5hLCB0aGlzLmIgKS5hZGQoIHRoaXMuYyApLm11bHRpcGx5U2NhbGFyKCAxIC8gMyApO1xuXG5cdH0sXG5cblx0Z2V0Tm9ybWFsOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXROb3JtYWwoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIHRhcmdldCApO1xuXG5cdH0sXG5cblx0Z2V0UGxhbmU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5nZXRQbGFuZSgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgUGxhbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0RnJvbUNvcGxhbmFyUG9pbnRzKCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jICk7XG5cblx0fSxcblxuXHRnZXRCYXJ5Y29vcmQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGdldFVWOiBmdW5jdGlvbiAoIHBvaW50LCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuZ2V0VVYoIHBvaW50LCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5jLCB1djEsIHV2MiwgdXYzLCB0YXJnZXQgKTtcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHRyZXR1cm4gVHJpYW5nbGUuY29udGFpbnNQb2ludCggcG9pbnQsIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMgKTtcblxuXHR9LFxuXG5cdGlzRnJvbnRGYWNpbmc6IGZ1bmN0aW9uICggZGlyZWN0aW9uICkge1xuXG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmlzRnJvbnRGYWNpbmcoIHRoaXMuYSwgdGhpcy5iLCB0aGlzLmMsIGRpcmVjdGlvbiApO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94LmludGVyc2VjdHNUcmlhbmdsZSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludDogZnVuY3Rpb24gKCBwLCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmNsb3Nlc3RQb2ludFRvUG9pbnQoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHZhciBhID0gdGhpcy5hLCBiID0gdGhpcy5iLCBjID0gdGhpcy5jO1xuXHRcdHZhciB2LCB3O1xuXG5cdFx0Ly8gYWxnb3JpdGhtIHRoYW5rcyB0byBSZWFsLVRpbWUgQ29sbGlzaW9uIERldGVjdGlvbiBieSBDaHJpc3RlciBFcmljc29uLFxuXHRcdC8vIHB1Ymxpc2hlZCBieSBNb3JnYW4gS2F1Zm1hbm4gUHVibGlzaGVycywgKGMpIDIwMDUgRWxzZXZpZXIgSW5jLixcblx0XHQvLyB1bmRlciB0aGUgYWNjb21wYW55aW5nIGxpY2Vuc2U7IHNlZSBjaGFwdGVyIDUuMS41IGZvciBkZXRhaWxlZCBleHBsYW5hdGlvbi5cblx0XHQvLyBiYXNpY2FsbHksIHdlJ3JlIGRpc3Rpbmd1aXNoaW5nIHdoaWNoIG9mIHRoZSB2b3Jvbm9pIHJlZ2lvbnMgb2YgdGhlIHRyaWFuZ2xlXG5cdFx0Ly8gdGhlIHBvaW50IGxpZXMgaW4gd2l0aCB0aGUgbWluaW11bSBhbW91bnQgb2YgcmVkdW5kYW50IGNvbXB1dGF0aW9uLlxuXG5cdFx0X3ZhYi5zdWJWZWN0b3JzKCBiLCBhICk7XG5cdFx0X3ZhYy5zdWJWZWN0b3JzKCBjLCBhICk7XG5cdFx0X3ZhcC5zdWJWZWN0b3JzKCBwLCBhICk7XG5cdFx0dmFyIGQxID0gX3ZhYi5kb3QoIF92YXAgKTtcblx0XHR2YXIgZDIgPSBfdmFjLmRvdCggX3ZhcCApO1xuXHRcdGlmICggZDEgPD0gMCAmJiBkMiA8PSAwICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEE7IGJhcnljZW50cmljIGNvb3JkcyAoMSwgMCwgMClcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYSApO1xuXG5cdFx0fVxuXG5cdFx0X3ZicC5zdWJWZWN0b3JzKCBwLCBiICk7XG5cdFx0dmFyIGQzID0gX3ZhYi5kb3QoIF92YnAgKTtcblx0XHR2YXIgZDQgPSBfdmFjLmRvdCggX3ZicCApO1xuXHRcdGlmICggZDMgPj0gMCAmJiBkNCA8PSBkMyApIHtcblxuXHRcdFx0Ly8gdmVydGV4IHJlZ2lvbiBvZiBCOyBiYXJ5Y2VudHJpYyBjb29yZHMgKDAsIDEsIDApXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKTtcblxuXHRcdH1cblxuXHRcdHZhciB2YyA9IGQxICogZDQgLSBkMyAqIGQyO1xuXHRcdGlmICggdmMgPD0gMCAmJiBkMSA+PSAwICYmIGQzIDw9IDAgKSB7XG5cblx0XHRcdHYgPSBkMSAvICggZDEgLSBkMyApO1xuXHRcdFx0Ly8gZWRnZSByZWdpb24gb2YgQUI7IGJhcnljZW50cmljIGNvb3JkcyAoMS12LCB2LCAwKVxuXHRcdFx0cmV0dXJuIHRhcmdldC5jb3B5KCBhICkuYWRkU2NhbGVkVmVjdG9yKCBfdmFiLCB2ICk7XG5cblx0XHR9XG5cblx0XHRfdmNwLnN1YlZlY3RvcnMoIHAsIGMgKTtcblx0XHR2YXIgZDUgPSBfdmFiLmRvdCggX3ZjcCApO1xuXHRcdHZhciBkNiA9IF92YWMuZG90KCBfdmNwICk7XG5cdFx0aWYgKCBkNiA+PSAwICYmIGQ1IDw9IGQ2ICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggcmVnaW9uIG9mIEM7IGJhcnljZW50cmljIGNvb3JkcyAoMCwgMCwgMSlcblx0XHRcdHJldHVybiB0YXJnZXQuY29weSggYyApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHZiID0gZDUgKiBkMiAtIGQxICogZDY7XG5cdFx0aWYgKCB2YiA8PSAwICYmIGQyID49IDAgJiYgZDYgPD0gMCApIHtcblxuXHRcdFx0dyA9IGQyIC8gKCBkMiAtIGQ2ICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBBQzsgYmFyeWNlbnRyaWMgY29vcmRzICgxLXcsIDAsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGEgKS5hZGRTY2FsZWRWZWN0b3IoIF92YWMsIHcgKTtcblxuXHRcdH1cblxuXHRcdHZhciB2YSA9IGQzICogZDYgLSBkNSAqIGQ0O1xuXHRcdGlmICggdmEgPD0gMCAmJiAoIGQ0IC0gZDMgKSA+PSAwICYmICggZDUgLSBkNiApID49IDAgKSB7XG5cblx0XHRcdF92YmMuc3ViVmVjdG9ycyggYywgYiApO1xuXHRcdFx0dyA9ICggZDQgLSBkMyApIC8gKCAoIGQ0IC0gZDMgKSArICggZDUgLSBkNiApICk7XG5cdFx0XHQvLyBlZGdlIHJlZ2lvbiBvZiBCQzsgYmFyeWNlbnRyaWMgY29vcmRzICgwLCAxLXcsIHcpXG5cdFx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIGIgKS5hZGRTY2FsZWRWZWN0b3IoIF92YmMsIHcgKTsgLy8gZWRnZSByZWdpb24gb2YgQkNcblxuXHRcdH1cblxuXHRcdC8vIGZhY2UgcmVnaW9uXG5cdFx0dmFyIGRlbm9tID0gMSAvICggdmEgKyB2YiArIHZjICk7XG5cdFx0Ly8gdSA9IHZhICogZGVub21cblx0XHR2ID0gdmIgKiBkZW5vbTtcblx0XHR3ID0gdmMgKiBkZW5vbTtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggYSApLmFkZFNjYWxlZFZlY3RvciggX3ZhYiwgdiApLmFkZFNjYWxlZFZlY3RvciggX3ZhYywgdyApO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHRyaWFuZ2xlICkge1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlLmEuZXF1YWxzKCB0aGlzLmEgKSAmJiB0cmlhbmdsZS5iLmVxdWFscyggdGhpcy5iICkgJiYgdHJpYW5nbGUuYy5lcXVhbHMoIHRoaXMuYyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF9jb2xvcktleXdvcmRzID0geyAnYWxpY2VibHVlJzogMHhGMEY4RkYsICdhbnRpcXVld2hpdGUnOiAweEZBRUJENywgJ2FxdWEnOiAweDAwRkZGRiwgJ2FxdWFtYXJpbmUnOiAweDdGRkZENCwgJ2F6dXJlJzogMHhGMEZGRkYsXG5cdCdiZWlnZSc6IDB4RjVGNURDLCAnYmlzcXVlJzogMHhGRkU0QzQsICdibGFjayc6IDB4MDAwMDAwLCAnYmxhbmNoZWRhbG1vbmQnOiAweEZGRUJDRCwgJ2JsdWUnOiAweDAwMDBGRiwgJ2JsdWV2aW9sZXQnOiAweDhBMkJFMixcblx0J2Jyb3duJzogMHhBNTJBMkEsICdidXJseXdvb2QnOiAweERFQjg4NywgJ2NhZGV0Ymx1ZSc6IDB4NUY5RUEwLCAnY2hhcnRyZXVzZSc6IDB4N0ZGRjAwLCAnY2hvY29sYXRlJzogMHhEMjY5MUUsICdjb3JhbCc6IDB4RkY3RjUwLFxuXHQnY29ybmZsb3dlcmJsdWUnOiAweDY0OTVFRCwgJ2Nvcm5zaWxrJzogMHhGRkY4REMsICdjcmltc29uJzogMHhEQzE0M0MsICdjeWFuJzogMHgwMEZGRkYsICdkYXJrYmx1ZSc6IDB4MDAwMDhCLCAnZGFya2N5YW4nOiAweDAwOEI4Qixcblx0J2Rhcmtnb2xkZW5yb2QnOiAweEI4ODYwQiwgJ2RhcmtncmF5JzogMHhBOUE5QTksICdkYXJrZ3JlZW4nOiAweDAwNjQwMCwgJ2RhcmtncmV5JzogMHhBOUE5QTksICdkYXJra2hha2knOiAweEJEQjc2QiwgJ2RhcmttYWdlbnRhJzogMHg4QjAwOEIsXG5cdCdkYXJrb2xpdmVncmVlbic6IDB4NTU2QjJGLCAnZGFya29yYW5nZSc6IDB4RkY4QzAwLCAnZGFya29yY2hpZCc6IDB4OTkzMkNDLCAnZGFya3JlZCc6IDB4OEIwMDAwLCAnZGFya3NhbG1vbic6IDB4RTk5NjdBLCAnZGFya3NlYWdyZWVuJzogMHg4RkJDOEYsXG5cdCdkYXJrc2xhdGVibHVlJzogMHg0ODNEOEIsICdkYXJrc2xhdGVncmF5JzogMHgyRjRGNEYsICdkYXJrc2xhdGVncmV5JzogMHgyRjRGNEYsICdkYXJrdHVycXVvaXNlJzogMHgwMENFRDEsICdkYXJrdmlvbGV0JzogMHg5NDAwRDMsXG5cdCdkZWVwcGluayc6IDB4RkYxNDkzLCAnZGVlcHNreWJsdWUnOiAweDAwQkZGRiwgJ2RpbWdyYXknOiAweDY5Njk2OSwgJ2RpbWdyZXknOiAweDY5Njk2OSwgJ2RvZGdlcmJsdWUnOiAweDFFOTBGRiwgJ2ZpcmVicmljayc6IDB4QjIyMjIyLFxuXHQnZmxvcmFsd2hpdGUnOiAweEZGRkFGMCwgJ2ZvcmVzdGdyZWVuJzogMHgyMjhCMjIsICdmdWNoc2lhJzogMHhGRjAwRkYsICdnYWluc2Jvcm8nOiAweERDRENEQywgJ2dob3N0d2hpdGUnOiAweEY4RjhGRiwgJ2dvbGQnOiAweEZGRDcwMCxcblx0J2dvbGRlbnJvZCc6IDB4REFBNTIwLCAnZ3JheSc6IDB4ODA4MDgwLCAnZ3JlZW4nOiAweDAwODAwMCwgJ2dyZWVueWVsbG93JzogMHhBREZGMkYsICdncmV5JzogMHg4MDgwODAsICdob25leWRldyc6IDB4RjBGRkYwLCAnaG90cGluayc6IDB4RkY2OUI0LFxuXHQnaW5kaWFucmVkJzogMHhDRDVDNUMsICdpbmRpZ28nOiAweDRCMDA4MiwgJ2l2b3J5JzogMHhGRkZGRjAsICdraGFraSc6IDB4RjBFNjhDLCAnbGF2ZW5kZXInOiAweEU2RTZGQSwgJ2xhdmVuZGVyYmx1c2gnOiAweEZGRjBGNSwgJ2xhd25ncmVlbic6IDB4N0NGQzAwLFxuXHQnbGVtb25jaGlmZm9uJzogMHhGRkZBQ0QsICdsaWdodGJsdWUnOiAweEFERDhFNiwgJ2xpZ2h0Y29yYWwnOiAweEYwODA4MCwgJ2xpZ2h0Y3lhbic6IDB4RTBGRkZGLCAnbGlnaHRnb2xkZW5yb2R5ZWxsb3cnOiAweEZBRkFEMiwgJ2xpZ2h0Z3JheSc6IDB4RDNEM0QzLFxuXHQnbGlnaHRncmVlbic6IDB4OTBFRTkwLCAnbGlnaHRncmV5JzogMHhEM0QzRDMsICdsaWdodHBpbmsnOiAweEZGQjZDMSwgJ2xpZ2h0c2FsbW9uJzogMHhGRkEwN0EsICdsaWdodHNlYWdyZWVuJzogMHgyMEIyQUEsICdsaWdodHNreWJsdWUnOiAweDg3Q0VGQSxcblx0J2xpZ2h0c2xhdGVncmF5JzogMHg3Nzg4OTksICdsaWdodHNsYXRlZ3JleSc6IDB4Nzc4ODk5LCAnbGlnaHRzdGVlbGJsdWUnOiAweEIwQzRERSwgJ2xpZ2h0eWVsbG93JzogMHhGRkZGRTAsICdsaW1lJzogMHgwMEZGMDAsICdsaW1lZ3JlZW4nOiAweDMyQ0QzMixcblx0J2xpbmVuJzogMHhGQUYwRTYsICdtYWdlbnRhJzogMHhGRjAwRkYsICdtYXJvb24nOiAweDgwMDAwMCwgJ21lZGl1bWFxdWFtYXJpbmUnOiAweDY2Q0RBQSwgJ21lZGl1bWJsdWUnOiAweDAwMDBDRCwgJ21lZGl1bW9yY2hpZCc6IDB4QkE1NUQzLFxuXHQnbWVkaXVtcHVycGxlJzogMHg5MzcwREIsICdtZWRpdW1zZWFncmVlbic6IDB4M0NCMzcxLCAnbWVkaXVtc2xhdGVibHVlJzogMHg3QjY4RUUsICdtZWRpdW1zcHJpbmdncmVlbic6IDB4MDBGQTlBLCAnbWVkaXVtdHVycXVvaXNlJzogMHg0OEQxQ0MsXG5cdCdtZWRpdW12aW9sZXRyZWQnOiAweEM3MTU4NSwgJ21pZG5pZ2h0Ymx1ZSc6IDB4MTkxOTcwLCAnbWludGNyZWFtJzogMHhGNUZGRkEsICdtaXN0eXJvc2UnOiAweEZGRTRFMSwgJ21vY2Nhc2luJzogMHhGRkU0QjUsICduYXZham93aGl0ZSc6IDB4RkZERUFELFxuXHQnbmF2eSc6IDB4MDAwMDgwLCAnb2xkbGFjZSc6IDB4RkRGNUU2LCAnb2xpdmUnOiAweDgwODAwMCwgJ29saXZlZHJhYic6IDB4NkI4RTIzLCAnb3JhbmdlJzogMHhGRkE1MDAsICdvcmFuZ2VyZWQnOiAweEZGNDUwMCwgJ29yY2hpZCc6IDB4REE3MEQ2LFxuXHQncGFsZWdvbGRlbnJvZCc6IDB4RUVFOEFBLCAncGFsZWdyZWVuJzogMHg5OEZCOTgsICdwYWxldHVycXVvaXNlJzogMHhBRkVFRUUsICdwYWxldmlvbGV0cmVkJzogMHhEQjcwOTMsICdwYXBheWF3aGlwJzogMHhGRkVGRDUsICdwZWFjaHB1ZmYnOiAweEZGREFCOSxcblx0J3BlcnUnOiAweENEODUzRiwgJ3BpbmsnOiAweEZGQzBDQiwgJ3BsdW0nOiAweEREQTBERCwgJ3Bvd2RlcmJsdWUnOiAweEIwRTBFNiwgJ3B1cnBsZSc6IDB4ODAwMDgwLCAncmViZWNjYXB1cnBsZSc6IDB4NjYzMzk5LCAncmVkJzogMHhGRjAwMDAsICdyb3N5YnJvd24nOiAweEJDOEY4Rixcblx0J3JveWFsYmx1ZSc6IDB4NDE2OUUxLCAnc2FkZGxlYnJvd24nOiAweDhCNDUxMywgJ3NhbG1vbic6IDB4RkE4MDcyLCAnc2FuZHlicm93bic6IDB4RjRBNDYwLCAnc2VhZ3JlZW4nOiAweDJFOEI1NywgJ3NlYXNoZWxsJzogMHhGRkY1RUUsXG5cdCdzaWVubmEnOiAweEEwNTIyRCwgJ3NpbHZlcic6IDB4QzBDMEMwLCAnc2t5Ymx1ZSc6IDB4ODdDRUVCLCAnc2xhdGVibHVlJzogMHg2QTVBQ0QsICdzbGF0ZWdyYXknOiAweDcwODA5MCwgJ3NsYXRlZ3JleSc6IDB4NzA4MDkwLCAnc25vdyc6IDB4RkZGQUZBLFxuXHQnc3ByaW5nZ3JlZW4nOiAweDAwRkY3RiwgJ3N0ZWVsYmx1ZSc6IDB4NDY4MkI0LCAndGFuJzogMHhEMkI0OEMsICd0ZWFsJzogMHgwMDgwODAsICd0aGlzdGxlJzogMHhEOEJGRDgsICd0b21hdG8nOiAweEZGNjM0NywgJ3R1cnF1b2lzZSc6IDB4NDBFMEQwLFxuXHQndmlvbGV0JzogMHhFRTgyRUUsICd3aGVhdCc6IDB4RjVERUIzLCAnd2hpdGUnOiAweEZGRkZGRiwgJ3doaXRlc21va2UnOiAweEY1RjVGNSwgJ3llbGxvdyc6IDB4RkZGRjAwLCAneWVsbG93Z3JlZW4nOiAweDlBQ0QzMiB9O1xuXG52YXIgX2hzbEEgPSB7IGg6IDAsIHM6IDAsIGw6IDAgfTtcbnZhciBfaHNsQiA9IHsgaDogMCwgczogMCwgbDogMCB9O1xuXG5mdW5jdGlvbiBDb2xvciggciwgZywgYiApIHtcblxuXHRpZiAoIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHQvLyByIGlzIFRIUkVFLkNvbG9yLCBoZXggb3Igc3RyaW5nXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCByICk7XG5cblx0fVxuXG5cdHJldHVybiB0aGlzLnNldFJHQiggciwgZywgYiApO1xuXG59XG5cbmZ1bmN0aW9uIGh1ZTJyZ2IoIHAsIHEsIHQgKSB7XG5cblx0aWYgKCB0IDwgMCApIHQgKz0gMTtcblx0aWYgKCB0ID4gMSApIHQgLT0gMTtcblx0aWYgKCB0IDwgMSAvIDYgKSByZXR1cm4gcCArICggcSAtIHAgKSAqIDYgKiB0O1xuXHRpZiAoIHQgPCAxIC8gMiApIHJldHVybiBxO1xuXHRpZiAoIHQgPCAyIC8gMyApIHJldHVybiBwICsgKCBxIC0gcCApICogNiAqICggMiAvIDMgLSB0ICk7XG5cdHJldHVybiBwO1xuXG59XG5cbmZ1bmN0aW9uIFNSR0JUb0xpbmVhciggYyApIHtcblxuXHRyZXR1cm4gKCBjIDwgMC4wNDA0NSApID8gYyAqIDAuMDc3Mzk5MzgwOCA6IE1hdGgucG93KCBjICogMC45NDc4NjcyOTg2ICsgMC4wNTIxMzI3MDE0LCAyLjQgKTtcblxufVxuXG5mdW5jdGlvbiBMaW5lYXJUb1NSR0IoIGMgKSB7XG5cblx0cmV0dXJuICggYyA8IDAuMDAzMTMwOCApID8gYyAqIDEyLjkyIDogMS4wNTUgKiAoIE1hdGgucG93KCBjLCAwLjQxNjY2ICkgKSAtIDAuMDU1O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbG9yLnByb3RvdHlwZSwge1xuXG5cdGlzQ29sb3I6IHRydWUsXG5cblx0cjogMSwgZzogMSwgYjogMSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzQ29sb3IgKSB7XG5cblx0XHRcdHRoaXMuY29weSggdmFsdWUgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdHRoaXMuc2V0SGV4KCB2YWx1ZSApO1xuXG5cdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdFx0dGhpcy5zZXRTdHlsZSggdmFsdWUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMuciA9IHNjYWxhcjtcblx0XHR0aGlzLmcgPSBzY2FsYXI7XG5cdFx0dGhpcy5iID0gc2NhbGFyO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIZXg6IGZ1bmN0aW9uICggaGV4ICkge1xuXG5cdFx0aGV4ID0gTWF0aC5mbG9vciggaGV4ICk7XG5cblx0XHR0aGlzLnIgPSAoIGhleCA+PiAxNiAmIDI1NSApIC8gMjU1O1xuXHRcdHRoaXMuZyA9ICggaGV4ID4+IDggJiAyNTUgKSAvIDI1NTtcblx0XHR0aGlzLmIgPSAoIGhleCAmIDI1NSApIC8gMjU1O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSR0I6IGZ1bmN0aW9uICggciwgZywgYiApIHtcblxuXHRcdHRoaXMuciA9IHI7XG5cdFx0dGhpcy5nID0gZztcblx0XHR0aGlzLmIgPSBiO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRIU0w6IGZ1bmN0aW9uICggaCwgcywgbCApIHtcblxuXHRcdC8vIGgscyxsIHJhbmdlcyBhcmUgaW4gMC4wIC0gMS4wXG5cdFx0aCA9IE1hdGhVdGlscy5ldWNsaWRlYW5Nb2R1bG8oIGgsIDEgKTtcblx0XHRzID0gTWF0aFV0aWxzLmNsYW1wKCBzLCAwLCAxICk7XG5cdFx0bCA9IE1hdGhVdGlscy5jbGFtcCggbCwgMCwgMSApO1xuXG5cdFx0aWYgKCBzID09PSAwICkge1xuXG5cdFx0XHR0aGlzLnIgPSB0aGlzLmcgPSB0aGlzLmIgPSBsO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIHAgPSBsIDw9IDAuNSA/IGwgKiAoIDEgKyBzICkgOiBsICsgcyAtICggbCAqIHMgKTtcblx0XHRcdHZhciBxID0gKCAyICogbCApIC0gcDtcblxuXHRcdFx0dGhpcy5yID0gaHVlMnJnYiggcSwgcCwgaCArIDEgLyAzICk7XG5cdFx0XHR0aGlzLmcgPSBodWUycmdiKCBxLCBwLCBoICk7XG5cdFx0XHR0aGlzLmIgPSBodWUycmdiKCBxLCBwLCBoIC0gMSAvIDMgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0U3R5bGU6IGZ1bmN0aW9uICggc3R5bGUgKSB7XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVBbHBoYSggc3RyaW5nICkge1xuXG5cdFx0XHRpZiAoIHN0cmluZyA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIHBhcnNlRmxvYXQoIHN0cmluZyApIDwgMSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogQWxwaGEgY29tcG9uZW50IG9mICcgKyBzdHlsZSArICcgd2lsbCBiZSBpZ25vcmVkLicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHR2YXIgbTtcblxuXHRcdGlmICggbSA9IC9eKCg/OnJnYnxoc2wpYT8pXFwoXFxzKihbXlxcKV0qKVxcKS8uZXhlYyggc3R5bGUgKSApIHtcblxuXHRcdFx0Ly8gcmdiIC8gaHNsXG5cblx0XHRcdHZhciBjb2xvcjtcblx0XHRcdHZhciBuYW1lID0gbVsgMSBdO1xuXHRcdFx0dmFyIGNvbXBvbmVudHMgPSBtWyAyIF07XG5cblx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAncmdiJzpcblx0XHRcdFx0Y2FzZSAncmdiYSc6XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oXFxkKylcXHMqLFxccyooXFxkKylcXHMqLFxccyooXFxkKylcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMjU1LDAsMCkgcmdiYSgyNTUsMCwwLDAuNSlcblx0XHRcdFx0XHRcdHRoaXMuciA9IE1hdGgubWluKCAyNTUsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAyNTU7XG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbiggMjU1LCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMjU1O1xuXHRcdFx0XHRcdFx0dGhpcy5iID0gTWF0aC5taW4oIDI1NSwgcGFyc2VJbnQoIGNvbG9yWyAzIF0sIDEwICkgKSAvIDI1NTtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIGNvbG9yID0gL14oXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqLFxccyooXFxkKylcXCVcXHMqKCxcXHMqKFswLTldKlxcLj9bMC05XSspXFxzKik/JC8uZXhlYyggY29tcG9uZW50cyApICkge1xuXG5cdFx0XHRcdFx0XHQvLyByZ2IoMTAwJSwwJSwwJSkgcmdiYSgxMDAlLDAlLDAlLDAuNSlcblx0XHRcdFx0XHRcdHRoaXMuciA9IE1hdGgubWluKCAxMDAsIHBhcnNlSW50KCBjb2xvclsgMSBdLCAxMCApICkgLyAxMDA7XG5cdFx0XHRcdFx0XHR0aGlzLmcgPSBNYXRoLm1pbiggMTAwLCBwYXJzZUludCggY29sb3JbIDIgXSwgMTAgKSApIC8gMTAwO1xuXHRcdFx0XHRcdFx0dGhpcy5iID0gTWF0aC5taW4oIDEwMCwgcGFyc2VJbnQoIGNvbG9yWyAzIF0sIDEwICkgKSAvIDEwMDtcblxuXHRcdFx0XHRcdFx0aGFuZGxlQWxwaGEoIGNvbG9yWyA1IF0gKTtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdoc2wnOlxuXHRcdFx0XHRjYXNlICdoc2xhJzpcblxuXHRcdFx0XHRcdGlmICggY29sb3IgPSAvXihbMC05XSpcXC4/WzAtOV0rKVxccyosXFxzKihcXGQrKVxcJVxccyosXFxzKihcXGQrKVxcJVxccyooLFxccyooWzAtOV0qXFwuP1swLTldKylcXHMqKT8kLy5leGVjKCBjb21wb25lbnRzICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGhzbCgxMjAsNTAlLDUwJSkgaHNsYSgxMjAsNTAlLDUwJSwwLjUpXG5cdFx0XHRcdFx0XHR2YXIgaCA9IHBhcnNlRmxvYXQoIGNvbG9yWyAxIF0gKSAvIDM2MDtcblx0XHRcdFx0XHRcdHZhciBzID0gcGFyc2VJbnQoIGNvbG9yWyAyIF0sIDEwICkgLyAxMDA7XG5cdFx0XHRcdFx0XHR2YXIgbCA9IHBhcnNlSW50KCBjb2xvclsgMyBdLCAxMCApIC8gMTAwO1xuXG5cdFx0XHRcdFx0XHRoYW5kbGVBbHBoYSggY29sb3JbIDUgXSApO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zZXRIU0woIGgsIHMsIGwgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBtID0gL15cXCMoW0EtRmEtZjAtOV0rKSQvLmV4ZWMoIHN0eWxlICkgKSB7XG5cblx0XHRcdC8vIGhleCBjb2xvclxuXG5cdFx0XHR2YXIgaGV4ID0gbVsgMSBdO1xuXHRcdFx0dmFyIHNpemUgPSBoZXgubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHNpemUgPT09IDMgKSB7XG5cblx0XHRcdFx0Ly8gI2ZmMFxuXHRcdFx0XHR0aGlzLnIgPSBwYXJzZUludCggaGV4LmNoYXJBdCggMCApICsgaGV4LmNoYXJBdCggMCApLCAxNiApIC8gMjU1O1xuXHRcdFx0XHR0aGlzLmcgPSBwYXJzZUludCggaGV4LmNoYXJBdCggMSApICsgaGV4LmNoYXJBdCggMSApLCAxNiApIC8gMjU1O1xuXHRcdFx0XHR0aGlzLmIgPSBwYXJzZUludCggaGV4LmNoYXJBdCggMiApICsgaGV4LmNoYXJBdCggMiApLCAxNiApIC8gMjU1O1xuXG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzaXplID09PSA2ICkge1xuXG5cdFx0XHRcdC8vICNmZjAwMDBcblx0XHRcdFx0dGhpcy5yID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDAgKSArIGhleC5jaGFyQXQoIDEgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5nID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDIgKSArIGhleC5jaGFyQXQoIDMgKSwgMTYgKSAvIDI1NTtcblx0XHRcdFx0dGhpcy5iID0gcGFyc2VJbnQoIGhleC5jaGFyQXQoIDQgKSArIGhleC5jaGFyQXQoIDUgKSwgMTYgKSAvIDI1NTtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBzdHlsZSAmJiBzdHlsZS5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRDb2xvck5hbWUoIHN0eWxlICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldENvbG9yTmFtZTogZnVuY3Rpb24gKCBzdHlsZSApIHtcblxuXHRcdC8vIGNvbG9yIGtleXdvcmRzXG5cdFx0dmFyIGhleCA9IF9jb2xvcktleXdvcmRzWyBzdHlsZSBdO1xuXG5cdFx0aWYgKCBoZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gcmVkXG5cdFx0XHR0aGlzLnNldEhleCggaGV4ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyB1bmtub3duIGNvbG9yXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Db2xvcjogVW5rbm93biBjb2xvciAnICsgc3R5bGUgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5yLCB0aGlzLmcsIHRoaXMuYiApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IGNvbG9yLnI7XG5cdFx0dGhpcy5nID0gY29sb3IuZztcblx0XHR0aGlzLmIgPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5R2FtbWFUb0xpbmVhcjogZnVuY3Rpb24gKCBjb2xvciwgZ2FtbWFGYWN0b3IgKSB7XG5cblx0XHRpZiAoIGdhbW1hRmFjdG9yID09PSB1bmRlZmluZWQgKSBnYW1tYUZhY3RvciA9IDIuMDtcblxuXHRcdHRoaXMuciA9IE1hdGgucG93KCBjb2xvci5yLCBnYW1tYUZhY3RvciApO1xuXHRcdHRoaXMuZyA9IE1hdGgucG93KCBjb2xvci5nLCBnYW1tYUZhY3RvciApO1xuXHRcdHRoaXMuYiA9IE1hdGgucG93KCBjb2xvci5iLCBnYW1tYUZhY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5TGluZWFyVG9HYW1tYTogZnVuY3Rpb24gKCBjb2xvciwgZ2FtbWFGYWN0b3IgKSB7XG5cblx0XHRpZiAoIGdhbW1hRmFjdG9yID09PSB1bmRlZmluZWQgKSBnYW1tYUZhY3RvciA9IDIuMDtcblxuXHRcdHZhciBzYWZlSW52ZXJzZSA9ICggZ2FtbWFGYWN0b3IgPiAwICkgPyAoIDEuMCAvIGdhbW1hRmFjdG9yICkgOiAxLjA7XG5cblx0XHR0aGlzLnIgPSBNYXRoLnBvdyggY29sb3Iuciwgc2FmZUludmVyc2UgKTtcblx0XHR0aGlzLmcgPSBNYXRoLnBvdyggY29sb3IuZywgc2FmZUludmVyc2UgKTtcblx0XHR0aGlzLmIgPSBNYXRoLnBvdyggY29sb3IuYiwgc2FmZUludmVyc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29udmVydEdhbW1hVG9MaW5lYXI6IGZ1bmN0aW9uICggZ2FtbWFGYWN0b3IgKSB7XG5cblx0XHR0aGlzLmNvcHlHYW1tYVRvTGluZWFyKCB0aGlzLCBnYW1tYUZhY3RvciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0TGluZWFyVG9HYW1tYTogZnVuY3Rpb24gKCBnYW1tYUZhY3RvciApIHtcblxuXHRcdHRoaXMuY29weUxpbmVhclRvR2FtbWEoIHRoaXMsIGdhbW1hRmFjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlTUkdCVG9MaW5lYXI6IGZ1bmN0aW9uICggY29sb3IgKSB7XG5cblx0XHR0aGlzLnIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmcgKTtcblx0XHR0aGlzLmIgPSBTUkdCVG9MaW5lYXIoIGNvbG9yLmIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUxpbmVhclRvU1JHQjogZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciA9IExpbmVhclRvU1JHQiggY29sb3IuciApO1xuXHRcdHRoaXMuZyA9IExpbmVhclRvU1JHQiggY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IExpbmVhclRvU1JHQiggY29sb3IuYiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb252ZXJ0U1JHQlRvTGluZWFyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNvcHlTUkdCVG9MaW5lYXIoIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29udmVydExpbmVhclRvU1JHQjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb3B5TGluZWFyVG9TUkdCKCB0aGlzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEhleDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuICggdGhpcy5yICogMjU1ICkgPDwgMTYgXiAoIHRoaXMuZyAqIDI1NSApIDw8IDggXiAoIHRoaXMuYiAqIDI1NSApIDw8IDA7XG5cblx0fSxcblxuXHRnZXRIZXhTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAoICcwMDAwMDAnICsgdGhpcy5nZXRIZXgoKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtIDYgKTtcblxuXHR9LFxuXG5cdGdldEhTTDogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHQvLyBoLHMsbCByYW5nZXMgYXJlIGluIDAuMCAtIDEuMFxuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ29sb3I6IC5nZXRIU0woKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0geyBoOiAwLCBzOiAwLCBsOiAwIH07XG5cblx0XHR9XG5cblx0XHR2YXIgciA9IHRoaXMuciwgZyA9IHRoaXMuZywgYiA9IHRoaXMuYjtcblxuXHRcdHZhciBtYXggPSBNYXRoLm1heCggciwgZywgYiApO1xuXHRcdHZhciBtaW4gPSBNYXRoLm1pbiggciwgZywgYiApO1xuXG5cdFx0dmFyIGh1ZSwgc2F0dXJhdGlvbjtcblx0XHR2YXIgbGlnaHRuZXNzID0gKCBtaW4gKyBtYXggKSAvIDIuMDtcblxuXHRcdGlmICggbWluID09PSBtYXggKSB7XG5cblx0XHRcdGh1ZSA9IDA7XG5cdFx0XHRzYXR1cmF0aW9uID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBkZWx0YSA9IG1heCAtIG1pbjtcblxuXHRcdFx0c2F0dXJhdGlvbiA9IGxpZ2h0bmVzcyA8PSAwLjUgPyBkZWx0YSAvICggbWF4ICsgbWluICkgOiBkZWx0YSAvICggMiAtIG1heCAtIG1pbiApO1xuXG5cdFx0XHRzd2l0Y2ggKCBtYXggKSB7XG5cblx0XHRcdFx0Y2FzZSByOiBodWUgPSAoIGcgLSBiICkgLyBkZWx0YSArICggZyA8IGIgPyA2IDogMCApOyBicmVhaztcblx0XHRcdFx0Y2FzZSBnOiBodWUgPSAoIGIgLSByICkgLyBkZWx0YSArIDI7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGI6IGh1ZSA9ICggciAtIGcgKSAvIGRlbHRhICsgNDsgYnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aHVlIC89IDY7XG5cblx0XHR9XG5cblx0XHR0YXJnZXQuaCA9IGh1ZTtcblx0XHR0YXJnZXQucyA9IHNhdHVyYXRpb247XG5cdFx0dGFyZ2V0LmwgPSBsaWdodG5lc3M7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0Z2V0U3R5bGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiAncmdiKCcgKyAoICggdGhpcy5yICogMjU1ICkgfCAwICkgKyAnLCcgKyAoICggdGhpcy5nICogMjU1ICkgfCAwICkgKyAnLCcgKyAoICggdGhpcy5iICogMjU1ICkgfCAwICkgKyAnKSc7XG5cblx0fSxcblxuXHRvZmZzZXRIU0w6IGZ1bmN0aW9uICggaCwgcywgbCApIHtcblxuXHRcdHRoaXMuZ2V0SFNMKCBfaHNsQSApO1xuXG5cdFx0X2hzbEEuaCArPSBoOyBfaHNsQS5zICs9IHM7IF9oc2xBLmwgKz0gbDtcblxuXHRcdHRoaXMuc2V0SFNMKCBfaHNsQS5oLCBfaHNsQS5zLCBfaHNsQS5sICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHRcdHRoaXMuciArPSBjb2xvci5yO1xuXHRcdHRoaXMuZyArPSBjb2xvci5nO1xuXHRcdHRoaXMuYiArPSBjb2xvci5iO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhZGRDb2xvcnM6IGZ1bmN0aW9uICggY29sb3IxLCBjb2xvcjIgKSB7XG5cblx0XHR0aGlzLnIgPSBjb2xvcjEuciArIGNvbG9yMi5yO1xuXHRcdHRoaXMuZyA9IGNvbG9yMS5nICsgY29sb3IyLmc7XG5cdFx0dGhpcy5iID0gY29sb3IxLmIgKyBjb2xvcjIuYjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkU2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnIgKz0gcztcblx0XHR0aGlzLmcgKz0gcztcblx0XHR0aGlzLmIgKz0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3ViOiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yID0gTWF0aC5tYXgoIDAsIHRoaXMuciAtIGNvbG9yLnIgKTtcblx0XHR0aGlzLmcgPSBNYXRoLm1heCggMCwgdGhpcy5nIC0gY29sb3IuZyApO1xuXHRcdHRoaXMuYiA9IE1hdGgubWF4KCAwLCB0aGlzLmIgLSBjb2xvci5iICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5OiBmdW5jdGlvbiAoIGNvbG9yICkge1xuXG5cdFx0dGhpcy5yICo9IGNvbG9yLnI7XG5cdFx0dGhpcy5nICo9IGNvbG9yLmc7XG5cdFx0dGhpcy5iICo9IGNvbG9yLmI7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG11bHRpcGx5U2NhbGFyOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHR0aGlzLnIgKj0gcztcblx0XHR0aGlzLmcgKj0gcztcblx0XHR0aGlzLmIgKj0gcztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycDogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLnIgKz0gKCBjb2xvci5yIC0gdGhpcy5yICkgKiBhbHBoYTtcblx0XHR0aGlzLmcgKz0gKCBjb2xvci5nIC0gdGhpcy5nICkgKiBhbHBoYTtcblx0XHR0aGlzLmIgKz0gKCBjb2xvci5iIC0gdGhpcy5iICkgKiBhbHBoYTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGVycEhTTDogZnVuY3Rpb24gKCBjb2xvciwgYWxwaGEgKSB7XG5cblx0XHR0aGlzLmdldEhTTCggX2hzbEEgKTtcblx0XHRjb2xvci5nZXRIU0woIF9oc2xCICk7XG5cblx0XHR2YXIgaCA9IE1hdGhVdGlscy5sZXJwKCBfaHNsQS5oLCBfaHNsQi5oLCBhbHBoYSApO1xuXHRcdHZhciBzID0gTWF0aFV0aWxzLmxlcnAoIF9oc2xBLnMsIF9oc2xCLnMsIGFscGhhICk7XG5cdFx0dmFyIGwgPSBNYXRoVXRpbHMubGVycCggX2hzbEEubCwgX2hzbEIubCwgYWxwaGEgKTtcblxuXHRcdHRoaXMuc2V0SFNMKCBoLCBzLCBsICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBjICkge1xuXG5cdFx0cmV0dXJuICggYy5yID09PSB0aGlzLnIgKSAmJiAoIGMuZyA9PT0gdGhpcy5nICkgJiYgKCBjLmIgPT09IHRoaXMuYiApO1xuXG5cdH0sXG5cblx0ZnJvbUFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoIG9mZnNldCA9PT0gdW5kZWZpbmVkICkgb2Zmc2V0ID0gMDtcblxuXHRcdHRoaXMuciA9IGFycmF5WyBvZmZzZXQgXTtcblx0XHR0aGlzLmcgPSBhcnJheVsgb2Zmc2V0ICsgMSBdO1xuXHRcdHRoaXMuYiA9IGFycmF5WyBvZmZzZXQgKyAyIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHRhcnJheVsgb2Zmc2V0IF0gPSB0aGlzLnI7XG5cdFx0YXJyYXlbIG9mZnNldCArIDEgXSA9IHRoaXMuZztcblx0XHRhcnJheVsgb2Zmc2V0ICsgMiBdID0gdGhpcy5iO1xuXG5cdFx0cmV0dXJuIGFycmF5O1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRIZXgoKTtcblxuXHR9XG5cbn0gKTtcblxuQ29sb3IuTkFNRVMgPSBfY29sb3JLZXl3b3JkcztcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGYWNlMyggYSwgYiwgYywgbm9ybWFsLCBjb2xvciwgbWF0ZXJpYWxJbmRleCApIHtcblxuXHR0aGlzLmEgPSBhO1xuXHR0aGlzLmIgPSBiO1xuXHR0aGlzLmMgPSBjO1xuXG5cdHRoaXMubm9ybWFsID0gKCBub3JtYWwgJiYgbm9ybWFsLmlzVmVjdG9yMyApID8gbm9ybWFsIDogbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52ZXJ0ZXhOb3JtYWxzID0gQXJyYXkuaXNBcnJheSggbm9ybWFsICkgPyBub3JtYWwgOiBbXTtcblxuXHR0aGlzLmNvbG9yID0gKCBjb2xvciAmJiBjb2xvci5pc0NvbG9yICkgPyBjb2xvciA6IG5ldyBDb2xvcigpO1xuXHR0aGlzLnZlcnRleENvbG9ycyA9IEFycmF5LmlzQXJyYXkoIGNvbG9yICkgPyBjb2xvciA6IFtdO1xuXG5cdHRoaXMubWF0ZXJpYWxJbmRleCA9IG1hdGVyaWFsSW5kZXggIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsSW5kZXggOiAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEZhY2UzLnByb3RvdHlwZSwge1xuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHRoaXMuYSA9IHNvdXJjZS5hO1xuXHRcdHRoaXMuYiA9IHNvdXJjZS5iO1xuXHRcdHRoaXMuYyA9IHNvdXJjZS5jO1xuXG5cdFx0dGhpcy5ub3JtYWwuY29weSggc291cmNlLm5vcm1hbCApO1xuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0XHR0aGlzLm1hdGVyaWFsSW5kZXggPSBzb3VyY2UubWF0ZXJpYWxJbmRleDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBzb3VyY2UudmVydGV4Tm9ybWFscy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy52ZXJ0ZXhOb3JtYWxzWyBpIF0gPSBzb3VyY2UudmVydGV4Tm9ybWFsc1sgaSBdLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gc291cmNlLnZlcnRleENvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy52ZXJ0ZXhDb2xvcnNbIGkgXSA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnNbIGkgXS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxudmFyIG1hdGVyaWFsSWQgPSAwO1xuXG5mdW5jdGlvbiBNYXRlcmlhbCgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IG1hdGVyaWFsSWQgKysgfSApO1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblx0dGhpcy50eXBlID0gJ01hdGVyaWFsJztcblxuXHR0aGlzLmZvZyA9IHRydWU7XG5cblx0dGhpcy5ibGVuZGluZyA9IE5vcm1hbEJsZW5kaW5nO1xuXHR0aGlzLnNpZGUgPSBGcm9udFNpZGU7XG5cdHRoaXMuZmxhdFNoYWRpbmcgPSBmYWxzZTtcblx0dGhpcy52ZXJ0ZXhDb2xvcnMgPSBmYWxzZTtcblxuXHR0aGlzLm9wYWNpdHkgPSAxO1xuXHR0aGlzLnRyYW5zcGFyZW50ID0gZmFsc2U7XG5cblx0dGhpcy5ibGVuZFNyYyA9IFNyY0FscGhhRmFjdG9yO1xuXHR0aGlzLmJsZW5kRHN0ID0gT25lTWludXNTcmNBbHBoYUZhY3Rvcjtcblx0dGhpcy5ibGVuZEVxdWF0aW9uID0gQWRkRXF1YXRpb247XG5cdHRoaXMuYmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdHRoaXMuYmxlbmREc3RBbHBoYSA9IG51bGw7XG5cdHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gbnVsbDtcblxuXHR0aGlzLmRlcHRoRnVuYyA9IExlc3NFcXVhbERlcHRoO1xuXHR0aGlzLmRlcHRoVGVzdCA9IHRydWU7XG5cdHRoaXMuZGVwdGhXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5zdGVuY2lsV3JpdGVNYXNrID0gMHhmZjtcblx0dGhpcy5zdGVuY2lsRnVuYyA9IEFsd2F5c1N0ZW5jaWxGdW5jO1xuXHR0aGlzLnN0ZW5jaWxSZWYgPSAwO1xuXHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IDB4ZmY7XG5cdHRoaXMuc3RlbmNpbEZhaWwgPSBLZWVwU3RlbmNpbE9wO1xuXHR0aGlzLnN0ZW5jaWxaRmFpbCA9IEtlZXBTdGVuY2lsT3A7XG5cdHRoaXMuc3RlbmNpbFpQYXNzID0gS2VlcFN0ZW5jaWxPcDtcblx0dGhpcy5zdGVuY2lsV3JpdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gbnVsbDtcblx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gZmFsc2U7XG5cdHRoaXMuY2xpcFNoYWRvd3MgPSBmYWxzZTtcblxuXHR0aGlzLnNoYWRvd1NpZGUgPSBudWxsO1xuXG5cdHRoaXMuY29sb3JXcml0ZSA9IHRydWU7XG5cblx0dGhpcy5wcmVjaXNpb24gPSBudWxsOyAvLyBvdmVycmlkZSB0aGUgcmVuZGVyZXIncyBkZWZhdWx0IHByZWNpc2lvbiBmb3IgdGhpcyBtYXRlcmlhbFxuXG5cdHRoaXMucG9seWdvbk9mZnNldCA9IGZhbHNlO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSAwO1xuXHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IDA7XG5cblx0dGhpcy5kaXRoZXJpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmFscGhhVGVzdCA9IDA7XG5cdHRoaXMucHJlbXVsdGlwbGllZEFscGhhID0gZmFsc2U7XG5cblx0dGhpcy52aXNpYmxlID0gdHJ1ZTtcblxuXHR0aGlzLnRvbmVNYXBwZWQgPSB0cnVlO1xuXG5cdHRoaXMudXNlckRhdGEgPSB7fTtcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXG59XG5cbk1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNYXRlcmlhbCxcblxuXHRpc01hdGVyaWFsOiB0cnVlLFxuXG5cdG9uQmVmb3JlQ29tcGlsZTogZnVuY3Rpb24gKCkge30sXG5cblx0c2V0VmFsdWVzOiBmdW5jdGlvbiAoIHZhbHVlcyApIHtcblxuXHRcdGlmICggdmFsdWVzID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIHZhbHVlcyApIHtcblxuXHRcdFx0dmFyIG5ld1ZhbHVlID0gdmFsdWVzWyBrZXkgXTtcblxuXHRcdFx0aWYgKCBuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5NYXRlcmlhbDogJ1wiICsga2V5ICsgXCInIHBhcmFtZXRlciBpcyB1bmRlZmluZWQuXCIgKTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gZm9yIGJhY2t3YXJkIGNvbXBhdGFiaWxpdHkgaWYgc2hhZGluZyBpcyBzZXQgaW4gdGhlIGNvbnN0cnVjdG9yXG5cdFx0XHRpZiAoIGtleSA9PT0gJ3NoYWRpbmcnICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc2hhZGluZyBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdGhlIGJvb2xlYW4gLmZsYXRTaGFkaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKCBuZXdWYWx1ZSA9PT0gRmxhdFNoYWRpbmcgKSA/IHRydWUgOiBmYWxzZTtcblx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXNbIGtleSBdO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJUSFJFRS5cIiArIHRoaXMudHlwZSArIFwiOiAnXCIgKyBrZXkgKyBcIicgaXMgbm90IGEgcHJvcGVydHkgb2YgdGhpcyBtYXRlcmlhbC5cIiApO1xuXHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNDb2xvciApIHtcblxuXHRcdFx0XHRjdXJyZW50VmFsdWUuc2V0KCBuZXdWYWx1ZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCAoIGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUuaXNWZWN0b3IzICkgJiYgKCBuZXdWYWx1ZSAmJiBuZXdWYWx1ZS5pc1ZlY3RvcjMgKSApIHtcblxuXHRcdFx0XHRjdXJyZW50VmFsdWUuY29weSggbmV3VmFsdWUgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR0aGlzWyBrZXkgXSA9IG5ld1ZhbHVlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBpc1Jvb3QgPSAoIG1ldGEgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgbWV0YSA9PT0gJ3N0cmluZycgKTtcblxuXHRcdGlmICggaXNSb290ICkge1xuXG5cdFx0XHRtZXRhID0ge1xuXHRcdFx0XHR0ZXh0dXJlczoge30sXG5cdFx0XHRcdGltYWdlczoge31cblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ01hdGVyaWFsJyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnTWF0ZXJpYWwudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBNYXRlcmlhbCBzZXJpYWxpemF0aW9uXG5cdFx0ZGF0YS51dWlkID0gdGhpcy51dWlkO1xuXHRcdGRhdGEudHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblxuXHRcdGlmICggdGhpcy5jb2xvciAmJiB0aGlzLmNvbG9yLmlzQ29sb3IgKSBkYXRhLmNvbG9yID0gdGhpcy5jb2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5yb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIGRhdGEucm91Z2huZXNzID0gdGhpcy5yb3VnaG5lc3M7XG5cdFx0aWYgKCB0aGlzLm1ldGFsbmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5tZXRhbG5lc3MgPSB0aGlzLm1ldGFsbmVzcztcblxuXHRcdGlmICggdGhpcy5zaGVlbiAmJiB0aGlzLnNoZWVuLmlzQ29sb3IgKSBkYXRhLnNoZWVuID0gdGhpcy5zaGVlbi5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuZW1pc3NpdmUgJiYgdGhpcy5lbWlzc2l2ZS5pc0NvbG9yICkgZGF0YS5lbWlzc2l2ZSA9IHRoaXMuZW1pc3NpdmUuZ2V0SGV4KCk7XG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ICYmIHRoaXMuZW1pc3NpdmVJbnRlbnNpdHkgIT09IDEgKSBkYXRhLmVtaXNzaXZlSW50ZW5zaXR5ID0gdGhpcy5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdGlmICggdGhpcy5zcGVjdWxhciAmJiB0aGlzLnNwZWN1bGFyLmlzQ29sb3IgKSBkYXRhLnNwZWN1bGFyID0gdGhpcy5zcGVjdWxhci5nZXRIZXgoKTtcblx0XHRpZiAoIHRoaXMuc2hpbmluZXNzICE9PSB1bmRlZmluZWQgKSBkYXRhLnNoaW5pbmVzcyA9IHRoaXMuc2hpbmluZXNzO1xuXHRcdGlmICggdGhpcy5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIGRhdGEuY2xlYXJjb2F0ID0gdGhpcy5jbGVhcmNvYXQ7XG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdFJvdWdobmVzcyAhPT0gdW5kZWZpbmVkICkgZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3MgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzcztcblxuXHRcdGlmICggdGhpcy5jbGVhcmNvYXRNYXAgJiYgdGhpcy5jbGVhcmNvYXRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmNsZWFyY29hdE1hcCA9IHRoaXMuY2xlYXJjb2F0TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwICYmIHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPSB0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcCAmJiB0aGlzLmNsZWFyY29hdE5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsTWFwID0gdGhpcy5jbGVhcmNvYXROb3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgPSB0aGlzLmNsZWFyY29hdE5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5tYXAgJiYgdGhpcy5tYXAuaXNUZXh0dXJlICkgZGF0YS5tYXAgPSB0aGlzLm1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5tYXRjYXAgJiYgdGhpcy5tYXRjYXAuaXNUZXh0dXJlICkgZGF0YS5tYXRjYXAgPSB0aGlzLm1hdGNhcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5hbHBoYU1hcCAmJiB0aGlzLmFscGhhTWFwLmlzVGV4dHVyZSApIGRhdGEuYWxwaGFNYXAgPSB0aGlzLmFscGhhTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0aWYgKCB0aGlzLmxpZ2h0TWFwICYmIHRoaXMubGlnaHRNYXAuaXNUZXh0dXJlICkgZGF0YS5saWdodE1hcCA9IHRoaXMubGlnaHRNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblxuXHRcdGlmICggdGhpcy5hb01hcCAmJiB0aGlzLmFvTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5hb01hcCA9IHRoaXMuYW9NYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEuYW9NYXBJbnRlbnNpdHkgPSB0aGlzLmFvTWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmJ1bXBNYXAgJiYgdGhpcy5idW1wTWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS5idW1wTWFwID0gdGhpcy5idW1wTWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmJ1bXBTY2FsZSA9IHRoaXMuYnVtcFNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLm5vcm1hbE1hcCAmJiB0aGlzLm5vcm1hbE1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEubm9ybWFsTWFwID0gdGhpcy5ub3JtYWxNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEubm9ybWFsTWFwVHlwZSA9IHRoaXMubm9ybWFsTWFwVHlwZTtcblx0XHRcdGRhdGEubm9ybWFsU2NhbGUgPSB0aGlzLm5vcm1hbFNjYWxlLnRvQXJyYXkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5kaXNwbGFjZW1lbnRNYXAgJiYgdGhpcy5kaXNwbGFjZW1lbnRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudE1hcCA9IHRoaXMuZGlzcGxhY2VtZW50TWFwLnRvSlNPTiggbWV0YSApLnV1aWQ7XG5cdFx0XHRkYXRhLmRpc3BsYWNlbWVudFNjYWxlID0gdGhpcy5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdGRhdGEuZGlzcGxhY2VtZW50QmlhcyA9IHRoaXMuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5yb3VnaG5lc3NNYXAgJiYgdGhpcy5yb3VnaG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5yb3VnaG5lc3NNYXAgPSB0aGlzLnJvdWdobmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXHRcdGlmICggdGhpcy5tZXRhbG5lc3NNYXAgJiYgdGhpcy5tZXRhbG5lc3NNYXAuaXNUZXh0dXJlICkgZGF0YS5tZXRhbG5lc3NNYXAgPSB0aGlzLm1ldGFsbmVzc01hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmVtaXNzaXZlTWFwICYmIHRoaXMuZW1pc3NpdmVNYXAuaXNUZXh0dXJlICkgZGF0YS5lbWlzc2l2ZU1hcCA9IHRoaXMuZW1pc3NpdmVNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRpZiAoIHRoaXMuc3BlY3VsYXJNYXAgJiYgdGhpcy5zcGVjdWxhck1hcC5pc1RleHR1cmUgKSBkYXRhLnNwZWN1bGFyTWFwID0gdGhpcy5zcGVjdWxhck1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0aWYgKCB0aGlzLmVudk1hcCAmJiB0aGlzLmVudk1hcC5pc1RleHR1cmUgKSB7XG5cblx0XHRcdGRhdGEuZW52TWFwID0gdGhpcy5lbnZNYXAudG9KU09OKCBtZXRhICkudXVpZDtcblx0XHRcdGRhdGEucmVmbGVjdGl2aXR5ID0gdGhpcy5yZWZsZWN0aXZpdHk7IC8vIFNjYWxlIGJlaGluZCBlbnZNYXBcblx0XHRcdGRhdGEucmVmcmFjdGlvblJhdGlvID0gdGhpcy5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRcdGlmICggdGhpcy5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBkYXRhLmNvbWJpbmUgPSB0aGlzLmNvbWJpbmU7XG5cdFx0XHRpZiAoIHRoaXMuZW52TWFwSW50ZW5zaXR5ICE9PSB1bmRlZmluZWQgKSBkYXRhLmVudk1hcEludGVuc2l0eSA9IHRoaXMuZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmdyYWRpZW50TWFwICYmIHRoaXMuZ3JhZGllbnRNYXAuaXNUZXh0dXJlICkge1xuXG5cdFx0XHRkYXRhLmdyYWRpZW50TWFwID0gdGhpcy5ncmFkaWVudE1hcC50b0pTT04oIG1ldGEgKS51dWlkO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2l6ZSA9IHRoaXMuc2l6ZTtcblx0XHRpZiAoIHRoaXMuc2l6ZUF0dGVudWF0aW9uICE9PSB1bmRlZmluZWQgKSBkYXRhLnNpemVBdHRlbnVhdGlvbiA9IHRoaXMuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdFx0aWYgKCB0aGlzLmJsZW5kaW5nICE9PSBOb3JtYWxCbGVuZGluZyApIGRhdGEuYmxlbmRpbmcgPSB0aGlzLmJsZW5kaW5nO1xuXHRcdGlmICggdGhpcy5mbGF0U2hhZGluZyA9PT0gdHJ1ZSApIGRhdGEuZmxhdFNoYWRpbmcgPSB0aGlzLmZsYXRTaGFkaW5nO1xuXHRcdGlmICggdGhpcy5zaWRlICE9PSBGcm9udFNpZGUgKSBkYXRhLnNpZGUgPSB0aGlzLnNpZGU7XG5cdFx0aWYgKCB0aGlzLnZlcnRleENvbG9ycyApIGRhdGEudmVydGV4Q29sb3JzID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5vcGFjaXR5IDwgMSApIGRhdGEub3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcblx0XHRpZiAoIHRoaXMudHJhbnNwYXJlbnQgPT09IHRydWUgKSBkYXRhLnRyYW5zcGFyZW50ID0gdGhpcy50cmFuc3BhcmVudDtcblxuXHRcdGRhdGEuZGVwdGhGdW5jID0gdGhpcy5kZXB0aEZ1bmM7XG5cdFx0ZGF0YS5kZXB0aFRlc3QgPSB0aGlzLmRlcHRoVGVzdDtcblx0XHRkYXRhLmRlcHRoV3JpdGUgPSB0aGlzLmRlcHRoV3JpdGU7XG5cblx0XHRkYXRhLnN0ZW5jaWxXcml0ZSA9IHRoaXMuc3RlbmNpbFdyaXRlO1xuXHRcdGRhdGEuc3RlbmNpbFdyaXRlTWFzayA9IHRoaXMuc3RlbmNpbFdyaXRlTWFzaztcblx0XHRkYXRhLnN0ZW5jaWxGdW5jID0gdGhpcy5zdGVuY2lsRnVuYztcblx0XHRkYXRhLnN0ZW5jaWxSZWYgPSB0aGlzLnN0ZW5jaWxSZWY7XG5cdFx0ZGF0YS5zdGVuY2lsRnVuY01hc2sgPSB0aGlzLnN0ZW5jaWxGdW5jTWFzaztcblx0XHRkYXRhLnN0ZW5jaWxGYWlsID0gdGhpcy5zdGVuY2lsRmFpbDtcblx0XHRkYXRhLnN0ZW5jaWxaRmFpbCA9IHRoaXMuc3RlbmNpbFpGYWlsO1xuXHRcdGRhdGEuc3RlbmNpbFpQYXNzID0gdGhpcy5zdGVuY2lsWlBhc3M7XG5cblx0XHQvLyByb3RhdGlvbiAoU3ByaXRlTWF0ZXJpYWwpXG5cdFx0aWYgKCB0aGlzLnJvdGF0aW9uICYmIHRoaXMucm90YXRpb24gIT09IDAgKSBkYXRhLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvbjtcblxuXHRcdGlmICggdGhpcy5wb2x5Z29uT2Zmc2V0ID09PSB0cnVlICkgZGF0YS5wb2x5Z29uT2Zmc2V0ID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldEZhY3RvciAhPT0gMCApIGRhdGEucG9seWdvbk9mZnNldEZhY3RvciA9IHRoaXMucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHRpZiAoIHRoaXMucG9seWdvbk9mZnNldFVuaXRzICE9PSAwICkgZGF0YS5wb2x5Z29uT2Zmc2V0VW5pdHMgPSB0aGlzLnBvbHlnb25PZmZzZXRVbml0cztcblxuXHRcdGlmICggdGhpcy5saW5ld2lkdGggJiYgdGhpcy5saW5ld2lkdGggIT09IDEgKSBkYXRhLmxpbmV3aWR0aCA9IHRoaXMubGluZXdpZHRoO1xuXHRcdGlmICggdGhpcy5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5kYXNoU2l6ZSA9IHRoaXMuZGFzaFNpemU7XG5cdFx0aWYgKCB0aGlzLmdhcFNpemUgIT09IHVuZGVmaW5lZCApIGRhdGEuZ2FwU2l6ZSA9IHRoaXMuZ2FwU2l6ZTtcblx0XHRpZiAoIHRoaXMuc2NhbGUgIT09IHVuZGVmaW5lZCApIGRhdGEuc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG5cdFx0aWYgKCB0aGlzLmRpdGhlcmluZyA9PT0gdHJ1ZSApIGRhdGEuZGl0aGVyaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy5hbHBoYVRlc3QgPiAwICkgZGF0YS5hbHBoYVRlc3QgPSB0aGlzLmFscGhhVGVzdDtcblx0XHRpZiAoIHRoaXMucHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkgZGF0YS5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0aGlzLnByZW11bHRpcGxpZWRBbHBoYTtcblxuXHRcdGlmICggdGhpcy53aXJlZnJhbWUgPT09IHRydWUgKSBkYXRhLndpcmVmcmFtZSA9IHRoaXMud2lyZWZyYW1lO1xuXHRcdGlmICggdGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPiAxICkgZGF0YS53aXJlZnJhbWVMaW5ld2lkdGggPSB0aGlzLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWNhcCAhPT0gJ3JvdW5kJyApIGRhdGEud2lyZWZyYW1lTGluZWNhcCA9IHRoaXMud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIHRoaXMud2lyZWZyYW1lTGluZWpvaW4gIT09ICdyb3VuZCcgKSBkYXRhLndpcmVmcmFtZUxpbmVqb2luID0gdGhpcy53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSBkYXRhLm1vcnBoVGFyZ2V0cyA9IHRydWU7XG5cdFx0aWYgKCB0aGlzLm1vcnBoTm9ybWFscyA9PT0gdHJ1ZSApIGRhdGEubW9ycGhOb3JtYWxzID0gdHJ1ZTtcblx0XHRpZiAoIHRoaXMuc2tpbm5pbmcgPT09IHRydWUgKSBkYXRhLnNraW5uaW5nID0gdHJ1ZTtcblxuXHRcdGlmICggdGhpcy52aXNpYmxlID09PSBmYWxzZSApIGRhdGEudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0aWYgKCB0aGlzLnRvbmVNYXBwZWQgPT09IGZhbHNlICkgZGF0YS50b25lTWFwcGVkID0gZmFsc2U7XG5cblx0XHRpZiAoIEpTT04uc3RyaW5naWZ5KCB0aGlzLnVzZXJEYXRhICkgIT09ICd7fScgKSBkYXRhLnVzZXJEYXRhID0gdGhpcy51c2VyRGF0YTtcblxuXHRcdC8vIFRPRE86IENvcGllZCBmcm9tIE9iamVjdDNELnRvSlNPTlxuXG5cdFx0ZnVuY3Rpb24gZXh0cmFjdEZyb21DYWNoZSggY2FjaGUgKSB7XG5cblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGtleSBpbiBjYWNoZSApIHtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IGNhY2hlWyBrZXkgXTtcblx0XHRcdFx0ZGVsZXRlIGRhdGEubWV0YWRhdGE7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCBkYXRhICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlcztcblxuXHRcdH1cblxuXHRcdGlmICggaXNSb290ICkge1xuXG5cdFx0XHR2YXIgdGV4dHVyZXMgPSBleHRyYWN0RnJvbUNhY2hlKCBtZXRhLnRleHR1cmVzICk7XG5cdFx0XHR2YXIgaW1hZ2VzID0gZXh0cmFjdEZyb21DYWNoZSggbWV0YS5pbWFnZXMgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlcy5sZW5ndGggPiAwICkgZGF0YS50ZXh0dXJlcyA9IHRleHR1cmVzO1xuXHRcdFx0aWYgKCBpbWFnZXMubGVuZ3RoID4gMCApIGRhdGEuaW1hZ2VzID0gaW1hZ2VzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLm5hbWUgPSBzb3VyY2UubmFtZTtcblxuXHRcdHRoaXMuZm9nID0gc291cmNlLmZvZztcblxuXHRcdHRoaXMuYmxlbmRpbmcgPSBzb3VyY2UuYmxlbmRpbmc7XG5cdFx0dGhpcy5zaWRlID0gc291cmNlLnNpZGU7XG5cdFx0dGhpcy5mbGF0U2hhZGluZyA9IHNvdXJjZS5mbGF0U2hhZGluZztcblx0XHR0aGlzLnZlcnRleENvbG9ycyA9IHNvdXJjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHR0aGlzLm9wYWNpdHkgPSBzb3VyY2Uub3BhY2l0eTtcblx0XHR0aGlzLnRyYW5zcGFyZW50ID0gc291cmNlLnRyYW5zcGFyZW50O1xuXG5cdFx0dGhpcy5ibGVuZFNyYyA9IHNvdXJjZS5ibGVuZFNyYztcblx0XHR0aGlzLmJsZW5kRHN0ID0gc291cmNlLmJsZW5kRHN0O1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbiA9IHNvdXJjZS5ibGVuZEVxdWF0aW9uO1xuXHRcdHRoaXMuYmxlbmRTcmNBbHBoYSA9IHNvdXJjZS5ibGVuZFNyY0FscGhhO1xuXHRcdHRoaXMuYmxlbmREc3RBbHBoYSA9IHNvdXJjZS5ibGVuZERzdEFscGhhO1xuXHRcdHRoaXMuYmxlbmRFcXVhdGlvbkFscGhhID0gc291cmNlLmJsZW5kRXF1YXRpb25BbHBoYTtcblxuXHRcdHRoaXMuZGVwdGhGdW5jID0gc291cmNlLmRlcHRoRnVuYztcblx0XHR0aGlzLmRlcHRoVGVzdCA9IHNvdXJjZS5kZXB0aFRlc3Q7XG5cdFx0dGhpcy5kZXB0aFdyaXRlID0gc291cmNlLmRlcHRoV3JpdGU7XG5cblx0XHR0aGlzLnN0ZW5jaWxXcml0ZU1hc2sgPSBzb3VyY2Uuc3RlbmNpbFdyaXRlTWFzaztcblx0XHR0aGlzLnN0ZW5jaWxGdW5jID0gc291cmNlLnN0ZW5jaWxGdW5jO1xuXHRcdHRoaXMuc3RlbmNpbFJlZiA9IHNvdXJjZS5zdGVuY2lsUmVmO1xuXHRcdHRoaXMuc3RlbmNpbEZ1bmNNYXNrID0gc291cmNlLnN0ZW5jaWxGdW5jTWFzaztcblx0XHR0aGlzLnN0ZW5jaWxGYWlsID0gc291cmNlLnN0ZW5jaWxGYWlsO1xuXHRcdHRoaXMuc3RlbmNpbFpGYWlsID0gc291cmNlLnN0ZW5jaWxaRmFpbDtcblx0XHR0aGlzLnN0ZW5jaWxaUGFzcyA9IHNvdXJjZS5zdGVuY2lsWlBhc3M7XG5cdFx0dGhpcy5zdGVuY2lsV3JpdGUgPSBzb3VyY2Uuc3RlbmNpbFdyaXRlO1xuXG5cdFx0dmFyIHNyY1BsYW5lcyA9IHNvdXJjZS5jbGlwcGluZ1BsYW5lcyxcblx0XHRcdGRzdFBsYW5lcyA9IG51bGw7XG5cblx0XHRpZiAoIHNyY1BsYW5lcyAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIG4gPSBzcmNQbGFuZXMubGVuZ3RoO1xuXHRcdFx0ZHN0UGxhbmVzID0gbmV3IEFycmF5KCBuICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApXG5cdFx0XHRcdGRzdFBsYW5lc1sgaSBdID0gc3JjUGxhbmVzWyBpIF0uY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2xpcHBpbmdQbGFuZXMgPSBkc3RQbGFuZXM7XG5cdFx0dGhpcy5jbGlwSW50ZXJzZWN0aW9uID0gc291cmNlLmNsaXBJbnRlcnNlY3Rpb247XG5cdFx0dGhpcy5jbGlwU2hhZG93cyA9IHNvdXJjZS5jbGlwU2hhZG93cztcblxuXHRcdHRoaXMuc2hhZG93U2lkZSA9IHNvdXJjZS5zaGFkb3dTaWRlO1xuXG5cdFx0dGhpcy5jb2xvcldyaXRlID0gc291cmNlLmNvbG9yV3JpdGU7XG5cblx0XHR0aGlzLnByZWNpc2lvbiA9IHNvdXJjZS5wcmVjaXNpb247XG5cblx0XHR0aGlzLnBvbHlnb25PZmZzZXQgPSBzb3VyY2UucG9seWdvbk9mZnNldDtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBzb3VyY2UucG9seWdvbk9mZnNldEZhY3Rvcjtcblx0XHR0aGlzLnBvbHlnb25PZmZzZXRVbml0cyA9IHNvdXJjZS5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHR0aGlzLmRpdGhlcmluZyA9IHNvdXJjZS5kaXRoZXJpbmc7XG5cblx0XHR0aGlzLmFscGhhVGVzdCA9IHNvdXJjZS5hbHBoYVRlc3Q7XG5cdFx0dGhpcy5wcmVtdWx0aXBsaWVkQWxwaGEgPSBzb3VyY2UucHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0dGhpcy52aXNpYmxlID0gc291cmNlLnZpc2libGU7XG5cblx0XHR0aGlzLnRvbmVNYXBwZWQgPSBzb3VyY2UudG9uZU1hcHBlZDtcblxuXHRcdHRoaXMudXNlckRhdGEgPSBKU09OLnBhcnNlKCBKU09OLnN0cmluZ2lmeSggc291cmNlLnVzZXJEYXRhICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggTWF0ZXJpYWwucHJvdG90eXBlLCAnbmVlZHNVcGRhdGUnLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbGlnaHRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbGlnaHRNYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgYW9NYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYW9NYXBJbnRlbnNpdHk6IDxmbG9hdD5cbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHksXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgZGVwdGhUZXN0OiA8Ym9vbD4sXG4gKiAgZGVwdGhXcml0ZTogPGJvb2w+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hCYXNpY01hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApOyAvLyBlbWlzc2l2ZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaEJhc2ljTWF0ZXJpYWw7XG5cbk1lc2hCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaEJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IHNvdXJjZS5zcGVjdWxhck1hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZW52TWFwID0gc291cmNlLmVudk1hcDtcblx0dGhpcy5jb21iaW5lID0gc291cmNlLmNvbWJpbmU7XG5cdHRoaXMucmVmbGVjdGl2aXR5ID0gc291cmNlLnJlZmxlY3Rpdml0eTtcblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgX3ZlY3RvciQzID0gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhcnJheSApICkge1xuXG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogYXJyYXkgc2hvdWxkIGJlIGEgVHlwZWQgQXJyYXkuJyApO1xuXG5cdH1cblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmFycmF5ID0gYXJyYXk7XG5cdHRoaXMuaXRlbVNpemUgPSBpdGVtU2l6ZTtcblx0dGhpcy5jb3VudCA9IGFycmF5ICE9PSB1bmRlZmluZWQgPyBhcnJheS5sZW5ndGggLyBpdGVtU2l6ZSA6IDA7XG5cdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7XG5cblx0dGhpcy51c2FnZSA9IFN0YXRpY0RyYXdVc2FnZTtcblx0dGhpcy51cGRhdGVSYW5nZSA9IHsgb2Zmc2V0OiAwLCBjb3VudDogLSAxIH07XG5cblx0dGhpcy52ZXJzaW9uID0gMDtcblxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsICduZWVkc1VwZGF0ZScsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHZhbHVlID09PSB0cnVlICkgdGhpcy52ZXJzaW9uICsrO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0aXNCdWZmZXJBdHRyaWJ1dGU6IHRydWUsXG5cblx0b25VcGxvYWRDYWxsYmFjazogZnVuY3Rpb24gKCkge30sXG5cblx0c2V0VXNhZ2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnVzYWdlID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5uYW1lID0gc291cmNlLm5hbWU7XG5cdFx0dGhpcy5hcnJheSA9IG5ldyBzb3VyY2UuYXJyYXkuY29uc3RydWN0b3IoIHNvdXJjZS5hcnJheSApO1xuXHRcdHRoaXMuaXRlbVNpemUgPSBzb3VyY2UuaXRlbVNpemU7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLm5vcm1hbGl6ZWQgPSBzb3VyY2Uubm9ybWFsaXplZDtcblxuXHRcdHRoaXMudXNhZ2UgPSBzb3VyY2UudXNhZ2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlBdDogZnVuY3Rpb24gKCBpbmRleDEsIGF0dHJpYnV0ZSwgaW5kZXgyICkge1xuXG5cdFx0aW5kZXgxICo9IHRoaXMuaXRlbVNpemU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuaXRlbVNpemU7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmFycmF5WyBpbmRleDEgKyBpIF0gPSBhdHRyaWJ1dGUuYXJyYXlbIGluZGV4MiArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUFycmF5OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIGFycmF5ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlDb2xvcnNBcnJheTogZnVuY3Rpb24gKCBjb2xvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY29sb3JzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb2xvciA9IGNvbG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGNvbG9yID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlLmNvcHlDb2xvcnNBcnJheSgpOiBjb2xvciBpcyB1bmRlZmluZWQnLCBpICk7XG5cdFx0XHRcdGNvbG9yID0gbmV3IENvbG9yKCk7XG5cblx0XHRcdH1cblxuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gY29sb3Iucjtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IGNvbG9yLmc7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSBjb2xvci5iO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yMnNBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjJzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb3B5VmVjdG9yM3NBcnJheTogZnVuY3Rpb24gKCB2ZWN0b3JzICkge1xuXG5cdFx0dmFyIGFycmF5ID0gdGhpcy5hcnJheSwgb2Zmc2V0ID0gMDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlY3RvcnMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlY3RvciA9IHZlY3RvcnNbIGkgXTtcblxuXHRcdFx0aWYgKCB2ZWN0b3IgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJBdHRyaWJ1dGUuY29weVZlY3RvcjNzQXJyYXkoKTogdmVjdG9yIGlzIHVuZGVmaW5lZCcsIGkgKTtcblx0XHRcdFx0dmVjdG9yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3IueDtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci55O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLno7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHlWZWN0b3I0c0FycmF5OiBmdW5jdGlvbiAoIHZlY3RvcnMgKSB7XG5cblx0XHR2YXIgYXJyYXkgPSB0aGlzLmFycmF5LCBvZmZzZXQgPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdmVjdG9ycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVjdG9yID0gdmVjdG9yc1sgaSBdO1xuXG5cdFx0XHRpZiAoIHZlY3RvciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZS5jb3B5VmVjdG9yNHNBcnJheSgpOiB2ZWN0b3IgaXMgdW5kZWZpbmVkJywgaSApO1xuXHRcdFx0XHR2ZWN0b3IgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci54O1xuXHRcdFx0YXJyYXlbIG9mZnNldCArKyBdID0gdmVjdG9yLnk7XG5cdFx0XHRhcnJheVsgb2Zmc2V0ICsrIF0gPSB2ZWN0b3Iuejtcblx0XHRcdGFycmF5WyBvZmZzZXQgKysgXSA9IHZlY3Rvci53O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDM6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRfdmVjdG9yJDMueCA9IHRoaXMuZ2V0WCggaSApO1xuXHRcdFx0X3ZlY3RvciQzLnkgPSB0aGlzLmdldFkoIGkgKTtcblx0XHRcdF92ZWN0b3IkMy56ID0gdGhpcy5nZXRaKCBpICk7XG5cblx0XHRcdF92ZWN0b3IkMy5hcHBseU1hdHJpeDMoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkMy54LCBfdmVjdG9yJDMueSwgX3ZlY3RvciQzLnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YXBwbHlNYXRyaXg0OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQzLnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkMy55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDMueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDMuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDMueCwgX3ZlY3RvciQzLnksIF92ZWN0b3IkMy56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFwcGx5Tm9ybWFsTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQzLnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkMy55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDMueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDMuYXBwbHlOb3JtYWxNYXRyaXgoIG0gKTtcblxuXHRcdFx0dGhpcy5zZXRYWVooIGksIF92ZWN0b3IkMy54LCBfdmVjdG9yJDMueSwgX3ZlY3RvciQzLnogKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNmb3JtRGlyZWN0aW9uOiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0X3ZlY3RvciQzLnggPSB0aGlzLmdldFgoIGkgKTtcblx0XHRcdF92ZWN0b3IkMy55ID0gdGhpcy5nZXRZKCBpICk7XG5cdFx0XHRfdmVjdG9yJDMueiA9IHRoaXMuZ2V0WiggaSApO1xuXG5cdFx0XHRfdmVjdG9yJDMudHJhbnNmb3JtRGlyZWN0aW9uKCBtICk7XG5cblx0XHRcdHRoaXMuc2V0WFlaKCBpLCBfdmVjdG9yJDMueCwgX3ZlY3RvciQzLnksIF92ZWN0b3IkMy56ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSwgb2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR0aGlzLmFycmF5LnNldCggdmFsdWUsIG9mZnNldCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRYOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdO1xuXG5cdH0sXG5cblx0c2V0WDogZnVuY3Rpb24gKCBpbmRleCwgeCApIHtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICogdGhpcy5pdGVtU2l6ZSBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WTogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAxIF07XG5cblx0fSxcblxuXHRzZXRZOiBmdW5jdGlvbiAoIGluZGV4LCB5ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WjogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAyIF07XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIGluZGV4LCB6ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMiBdID0gejtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0VzogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmFycmF5WyBpbmRleCAqIHRoaXMuaXRlbVNpemUgKyAzIF07XG5cblx0fSxcblxuXHRzZXRXOiBmdW5jdGlvbiAoIGluZGV4LCB3ICkge1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKiB0aGlzLml0ZW1TaXplICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFk6IGZ1bmN0aW9uICggaW5kZXgsIHgsIHkgKSB7XG5cblx0XHRpbmRleCAqPSB0aGlzLml0ZW1TaXplO1xuXG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVpXOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggKj0gdGhpcy5pdGVtU2l6ZTtcblxuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmFycmF5WyBpbmRleCArIDEgXSA9IHk7XG5cdFx0dGhpcy5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuYXJyYXlbIGluZGV4ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0b25VcGxvYWQ6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHR0aGlzLm9uVXBsb2FkQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5hcnJheSwgdGhpcy5pdGVtU2l6ZSApLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGl0ZW1TaXplOiB0aGlzLml0ZW1TaXplLFxuXHRcdFx0dHlwZTogdGhpcy5hcnJheS5jb25zdHJ1Y3Rvci5uYW1lLFxuXHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCB0aGlzLmFycmF5ICksXG5cdFx0XHRub3JtYWxpemVkOiB0aGlzLm5vcm1hbGl6ZWRcblx0XHR9O1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5mdW5jdGlvbiBJbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuSW50OEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQ4QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQ4QXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDhCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBVaW50OENsYW1wZWRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuVWludDhDbGFtcGVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFVpbnQ4Q2xhbXBlZEJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBJbnQxNkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgSW50MTZBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5JbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbnQxNkJ1ZmZlckF0dHJpYnV0ZTtcblxuXG5mdW5jdGlvbiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IFVpbnQxNkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cblVpbnQxNkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlICk7XG5VaW50MTZCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVWludDE2QnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKSB7XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIG5ldyBJbnQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEludDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIFVpbnQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgVWludDMyQXJyYXkoIGFycmF5ICksIGl0ZW1TaXplLCBub3JtYWxpemVkICk7XG5cbn1cblxuVWludDMyQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcblVpbnQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBVaW50MzJCdWZmZXJBdHRyaWJ1dGU7XG5cblxuZnVuY3Rpb24gRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkICkge1xuXG5cdEJ1ZmZlckF0dHJpYnV0ZS5jYWxsKCB0aGlzLCBuZXcgRmxvYXQzMkFycmF5KCBhcnJheSApLCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG59XG5cbkZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApO1xuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBGbG9hdDMyQnVmZmVyQXR0cmlidXRlO1xuXG5cbmZ1bmN0aW9uIEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApIHtcblxuXHRCdWZmZXJBdHRyaWJ1dGUuY2FsbCggdGhpcywgbmV3IEZsb2F0NjRBcnJheSggYXJyYXkgKSwgaXRlbVNpemUsIG5vcm1hbGl6ZWQgKTtcblxufVxuXG5GbG9hdDY0QnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUgKTtcbkZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdEdlb21ldHJ5KCkge1xuXG5cdHRoaXMudmVydGljZXMgPSBbXTtcblx0dGhpcy5ub3JtYWxzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMudXZzID0gW107XG5cdHRoaXMudXZzMiA9IFtdO1xuXG5cdHRoaXMuZ3JvdXBzID0gW107XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSB7fTtcblxuXHR0aGlzLnNraW5XZWlnaHRzID0gW107XG5cdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblxuXHQvLyB0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy51dnNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdHRoaXMuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIERpcmVjdEdlb21ldHJ5LnByb3RvdHlwZSwge1xuXG5cdGNvbXB1dGVHcm91cHM6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgZ3JvdXA7XG5cdFx0dmFyIGdyb3VwcyA9IFtdO1xuXHRcdHZhciBtYXRlcmlhbEluZGV4ID0gdW5kZWZpbmVkO1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Ly8gbWF0ZXJpYWxzXG5cblx0XHRcdGlmICggZmFjZS5tYXRlcmlhbEluZGV4ICE9PSBtYXRlcmlhbEluZGV4ICkge1xuXG5cdFx0XHRcdG1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Z3JvdXAuY291bnQgPSAoIGkgKiAzICkgLSBncm91cC5zdGFydDtcblx0XHRcdFx0XHRncm91cHMucHVzaCggZ3JvdXAgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z3JvdXAgPSB7XG5cdFx0XHRcdFx0c3RhcnQ6IGkgKiAzLFxuXHRcdFx0XHRcdG1hdGVyaWFsSW5kZXg6IG1hdGVyaWFsSW5kZXhcblx0XHRcdFx0fTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBncm91cCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRncm91cC5jb3VudCA9ICggaSAqIDMgKSAtIGdyb3VwLnN0YXJ0O1xuXHRcdFx0Z3JvdXBzLnB1c2goIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmdyb3VwcyA9IGdyb3VwcztcblxuXHR9LFxuXG5cdGZyb21HZW9tZXRyeTogZnVuY3Rpb24gKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBmYWNlcyA9IGdlb21ldHJ5LmZhY2VzO1xuXHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdHZhciBmYWNlVmVydGV4VXZzID0gZ2VvbWV0cnkuZmFjZVZlcnRleFV2cztcblxuXHRcdHZhciBoYXNGYWNlVmVydGV4VXYgPSBmYWNlVmVydGV4VXZzWyAwIF0gJiYgZmFjZVZlcnRleFV2c1sgMCBdLmxlbmd0aCA+IDA7XG5cdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhVdjIgPSBmYWNlVmVydGV4VXZzWyAxIF0gJiYgZmFjZVZlcnRleFV2c1sgMSBdLmxlbmd0aCA+IDA7XG5cblx0XHQvLyBtb3JwaHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHM7XG5cdFx0dmFyIG1vcnBoVGFyZ2V0c0xlbmd0aCA9IG1vcnBoVGFyZ2V0cy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzUG9zaXRpb247XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c0xlbmd0aCA+IDAgKSB7XG5cblx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG1vcnBoVGFyZ2V0c0xlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNQb3NpdGlvblsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMucG9zaXRpb24gPSBtb3JwaFRhcmdldHNQb3NpdGlvbjtcblxuXHRcdH1cblxuXHRcdHZhciBtb3JwaE5vcm1hbHMgPSBnZW9tZXRyeS5tb3JwaE5vcm1hbHM7XG5cdFx0dmFyIG1vcnBoTm9ybWFsc0xlbmd0aCA9IG1vcnBoTm9ybWFscy5sZW5ndGg7XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0aWYgKCBtb3JwaE5vcm1hbHNMZW5ndGggPiAwICkge1xuXG5cdFx0XHRtb3JwaFRhcmdldHNOb3JtYWwgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c05vcm1hbFsgaSBdID0ge1xuXHRcdFx0XHRcdG5hbWU6IG1vcnBoTm9ybWFsc1sgaSBdLm5hbWUsXG5cdFx0XHRcdCBcdGRhdGE6IFtdXG5cdFx0XHRcdH07XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaFRhcmdldHMubm9ybWFsID0gbW9ycGhUYXJnZXRzTm9ybWFsO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbnNcblxuXHRcdHZhciBza2luSW5kaWNlcyA9IGdlb21ldHJ5LnNraW5JbmRpY2VzO1xuXHRcdHZhciBza2luV2VpZ2h0cyA9IGdlb21ldHJ5LnNraW5XZWlnaHRzO1xuXG5cdFx0dmFyIGhhc1NraW5JbmRpY2VzID0gc2tpbkluZGljZXMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cdFx0dmFyIGhhc1NraW5XZWlnaHRzID0gc2tpbldlaWdodHMubGVuZ3RoID09PSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB2ZXJ0aWNlcy5sZW5ndGggPiAwICYmIGZhY2VzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5OiBGYWNlbGVzcyBnZW9tZXRyaWVzIGFyZSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGZhY2VzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlc1sgaSBdO1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBmYWNlLmEgXSwgdmVydGljZXNbIGZhY2UuYiBdLCB2ZXJ0aWNlc1sgZmFjZS5jIF0gKTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIHZlcnRleE5vcm1hbHNbIDAgXSwgdmVydGV4Tm9ybWFsc1sgMSBdLCB2ZXJ0ZXhOb3JtYWxzWyAyIF0gKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgbm9ybWFsID0gZmFjZS5ub3JtYWw7XG5cblx0XHRcdFx0dGhpcy5ub3JtYWxzLnB1c2goIG5vcm1hbCwgbm9ybWFsLCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGlmICggdmVydGV4Q29sb3JzLmxlbmd0aCA9PT0gMyApIHtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCB2ZXJ0ZXhDb2xvcnNbIDAgXSwgdmVydGV4Q29sb3JzWyAxIF0sIHZlcnRleENvbG9yc1sgMiBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIGNvbG9yID0gZmFjZS5jb2xvcjtcblxuXHRcdFx0XHR0aGlzLmNvbG9ycy5wdXNoKCBjb2xvciwgY29sb3IsIGNvbG9yICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4VXYgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDAgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2cy5wdXNoKCB2ZXJ0ZXhVdnNbIDAgXSwgdmVydGV4VXZzWyAxIF0sIHZlcnRleFV2c1sgMiBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkRpcmVjdEdlb21ldHJ5LmZyb21HZW9tZXRyeSgpOiBVbmRlZmluZWQgdmVydGV4VXYgJywgaSApO1xuXG5cdFx0XHRcdFx0dGhpcy51dnMucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhVdjIgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dmFyIHZlcnRleFV2cyA9IGZhY2VWZXJ0ZXhVdnNbIDEgXVsgaSBdO1xuXG5cdFx0XHRcdGlmICggdmVydGV4VXZzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggdmVydGV4VXZzWyAwIF0sIHZlcnRleFV2c1sgMSBdLCB2ZXJ0ZXhVdnNbIDIgXSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5EaXJlY3RHZW9tZXRyeS5mcm9tR2VvbWV0cnkoKTogVW5kZWZpbmVkIHZlcnRleFV2MiAnLCBpICk7XG5cblx0XHRcdFx0XHR0aGlzLnV2czIucHVzaCggbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSwgbmV3IFZlY3RvcjIoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBtb3JwaHNcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhUYXJnZXRzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaFRhcmdldCA9IG1vcnBoVGFyZ2V0c1sgaiBdLnZlcnRpY2VzO1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0c1Bvc2l0aW9uWyBqIF0uZGF0YS5wdXNoKCBtb3JwaFRhcmdldFsgZmFjZS5hIF0sIG1vcnBoVGFyZ2V0WyBmYWNlLmIgXSwgbW9ycGhUYXJnZXRbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgbW9ycGhOb3JtYWxzTGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IG1vcnBoTm9ybWFsc1sgaiBdLnZlcnRleE5vcm1hbHNbIGkgXTtcblxuXHRcdFx0XHRtb3JwaFRhcmdldHNOb3JtYWxbIGogXS5kYXRhLnB1c2goIG1vcnBoTm9ybWFsLmEsIG1vcnBoTm9ybWFsLmIsIG1vcnBoTm9ybWFsLmMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBza2luc1xuXG5cdFx0XHRpZiAoIGhhc1NraW5JbmRpY2VzICkge1xuXG5cdFx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGZhY2UuYSBdLCBza2luSW5kaWNlc1sgZmFjZS5iIF0sIHNraW5JbmRpY2VzWyBmYWNlLmMgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2tpbldlaWdodHMgKSB7XG5cblx0XHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgZmFjZS5hIF0sIHNraW5XZWlnaHRzWyBmYWNlLmIgXSwgc2tpbldlaWdodHNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuY29tcHV0ZUdyb3VwcyggZ2VvbWV0cnkgKTtcblxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5jb2xvcnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IGdlb21ldHJ5LnV2c05lZWRVcGRhdGU7XG5cdFx0dGhpcy5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIGFycmF5TWF4KCBhcnJheSApIHtcblxuXHRpZiAoIGFycmF5Lmxlbmd0aCA9PT0gMCApIHJldHVybiAtIEluZmluaXR5O1xuXG5cdHZhciBtYXggPSBhcnJheVsgMCBdO1xuXG5cdGZvciAoIHZhciBpID0gMSwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7ICsrIGkgKSB7XG5cblx0XHRpZiAoIGFycmF5WyBpIF0gPiBtYXggKSBtYXggPSBhcnJheVsgaSBdO1xuXG5cdH1cblxuXHRyZXR1cm4gbWF4O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF9idWZmZXJHZW9tZXRyeUlkID0gMTsgLy8gQnVmZmVyR2VvbWV0cnkgdXNlcyBvZGQgbnVtYmVycyBhcyBJZFxuXG52YXIgX20xJDIgPSBuZXcgTWF0cml4NCgpO1xudmFyIF9vYmogPSBuZXcgT2JqZWN0M0QoKTtcbnZhciBfb2Zmc2V0ID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfYm94JDIgPSBuZXcgQm94MygpO1xudmFyIF9ib3hNb3JwaFRhcmdldHMgPSBuZXcgQm94MygpO1xudmFyIF92ZWN0b3IkNCA9IG5ldyBWZWN0b3IzKCk7XG5cbmZ1bmN0aW9uIEJ1ZmZlckdlb21ldHJ5KCkge1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ2lkJywgeyB2YWx1ZTogX2J1ZmZlckdlb21ldHJ5SWQgKz0gMiB9ICk7XG5cblx0dGhpcy51dWlkID0gTWF0aFV0aWxzLmdlbmVyYXRlVVVJRCgpO1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXHR0aGlzLnR5cGUgPSAnQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMuaW5kZXggPSBudWxsO1xuXHR0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcblxuXHR0aGlzLm1vcnBoQXR0cmlidXRlcyA9IHt9O1xuXHR0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZmFsc2U7XG5cblx0dGhpcy5ncm91cHMgPSBbXTtcblxuXHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG51bGw7XG5cblx0dGhpcy5kcmF3UmFuZ2UgPSB7IHN0YXJ0OiAwLCBjb3VudDogSW5maW5pdHkgfTtcblxuXHR0aGlzLnVzZXJEYXRhID0ge307XG5cbn1cblxuQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEJ1ZmZlckdlb21ldHJ5LFxuXG5cdGlzQnVmZmVyR2VvbWV0cnk6IHRydWUsXG5cblx0Z2V0SW5kZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmluZGV4O1xuXG5cdH0sXG5cblx0c2V0SW5kZXg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGluZGV4ICkgKSB7XG5cblx0XHRcdHRoaXMuaW5kZXggPSBuZXcgKCBhcnJheU1heCggaW5kZXggKSA+IDY1NTM1ID8gVWludDMyQnVmZmVyQXR0cmlidXRlIDogVWludDE2QnVmZmVyQXR0cmlidXRlICkoIGluZGV4LCAxICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmluZGV4ID0gaW5kZXg7XG5cblx0XHR9XG5cblx0fSxcblxuXHRnZXRBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdHJldHVybiB0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHR9LFxuXG5cdHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gKCBuYW1lLCBhdHRyaWJ1dGUgKSB7XG5cblx0XHR0aGlzLmF0dHJpYnV0ZXNbIG5hbWUgXSA9IGF0dHJpYnV0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGVsZXRlQXR0cmlidXRlOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5hdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZEdyb3VwOiBmdW5jdGlvbiAoIHN0YXJ0LCBjb3VudCwgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdHRoaXMuZ3JvdXBzLnB1c2goIHtcblxuXHRcdFx0c3RhcnQ6IHN0YXJ0LFxuXHRcdFx0Y291bnQ6IGNvdW50LFxuXHRcdFx0bWF0ZXJpYWxJbmRleDogbWF0ZXJpYWxJbmRleCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWxJbmRleCA6IDBcblxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdGNsZWFyR3JvdXBzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmdyb3VwcyA9IFtdO1xuXG5cdH0sXG5cblx0c2V0RHJhd1JhbmdlOiBmdW5jdGlvbiAoIHN0YXJ0LCBjb3VudCApIHtcblxuXHRcdHRoaXMuZHJhd1JhbmdlLnN0YXJ0ID0gc3RhcnQ7XG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBjb3VudDtcblxuXHR9LFxuXG5cdGFwcGx5TWF0cml4NDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHR2YXIgcG9zaXRpb24gPSB0aGlzLmF0dHJpYnV0ZXMucG9zaXRpb247XG5cblx0XHRpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvc2l0aW9uLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRcdHBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHZhciBub3JtYWwgPSB0aGlzLmF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0aWYgKCBub3JtYWwgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsLmFwcGx5Tm9ybWFsTWF0cml4KCBub3JtYWxNYXRyaXggKTtcblxuXHRcdFx0bm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHZhciB0YW5nZW50ID0gdGhpcy5hdHRyaWJ1dGVzLnRhbmdlbnQ7XG5cblx0XHRpZiAoIHRhbmdlbnQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGFuZ2VudC50cmFuc2Zvcm1EaXJlY3Rpb24oIG1hdHJpeCApO1xuXG5cdFx0XHR0YW5nZW50Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlWDogZnVuY3Rpb24gKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHRfbTEkMi5tYWtlUm90YXRpb25YKCBhbmdsZSApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSQyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0X20xJDIubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdF9tMSQyLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xJDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdF9tMSQyLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSQyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0X20xJDIubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xJDIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdF9vYmoubG9va0F0KCB2ZWN0b3IgKTtcblxuXHRcdF9vYmoudXBkYXRlTWF0cml4KCk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX29iai5tYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVCb3VuZGluZ0JveCgpO1xuXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5nZXRDZW50ZXIoIF9vZmZzZXQgKS5uZWdhdGUoKTtcblxuXHRcdHRoaXMudHJhbnNsYXRlKCBfb2Zmc2V0LngsIF9vZmZzZXQueSwgX29mZnNldC56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21PYmplY3Q6IGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0Ly8gY29uc29sZS5sb2coICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5zZXRGcm9tT2JqZWN0KCkuIENvbnZlcnRpbmcnLCBvYmplY3QsIHRoaXMgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggb2JqZWN0LmlzUG9pbnRzIHx8IG9iamVjdC5pc0xpbmUgKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMywgMyApO1xuXHRcdFx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBnZW9tZXRyeS5jb2xvcnMubGVuZ3RoICogMywgMyApO1xuXG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgcG9zaXRpb25zLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS52ZXJ0aWNlcyApICk7XG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgY29sb3JzLmNvcHlDb2xvcnNBcnJheSggZ2VvbWV0cnkuY29sb3JzICkgKTtcblxuXHRcdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICYmIGdlb21ldHJ5LmxpbmVEaXN0YW5jZXMubGVuZ3RoID09PSBnZW9tZXRyeS52ZXJ0aWNlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggZ2VvbWV0cnkubGluZURpc3RhbmNlcy5sZW5ndGgsIDEgKTtcblxuXHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIGxpbmVEaXN0YW5jZXMuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGdlb21ldHJ5LmJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHR0aGlzLmZyb21HZW9tZXRyeSggZ2VvbWV0cnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0cG9zaXRpb24ucHVzaCggcG9pbnQueCwgcG9pbnQueSwgcG9pbnQueiB8fCAwICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCAzICkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlRnJvbU9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHRpZiAoIG9iamVjdC5pc01lc2ggKSB7XG5cblx0XHRcdHZhciBkaXJlY3QgPSBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5O1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRkaXJlY3QgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGdlb21ldHJ5LmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZGlyZWN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRpcmVjdC52ZXJ0aWNlc05lZWRVcGRhdGUgPSBnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGU7XG5cdFx0XHRkaXJlY3Qubm9ybWFsc05lZWRVcGRhdGUgPSBnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5jb2xvcnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC51dnNOZWVkVXBkYXRlID0gZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZTtcblx0XHRcdGRpcmVjdC5ncm91cHNOZWVkVXBkYXRlID0gZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdFx0Z2VvbWV0cnkudmVydGljZXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRnZW9tZXRyeS5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0XHRnZW9tZXRyeSA9IGRpcmVjdDtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LnZlcnRpY2VzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyeS52ZXJ0aWNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IHRoaXMuYXR0cmlidXRlcy5ub3JtYWw7XG5cblx0XHRcdGlmICggYXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0YXR0cmlidXRlLmNvcHlWZWN0b3Izc0FycmF5KCBnZW9tZXRyeS5ub3JtYWxzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubm9ybWFsc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuY29sb3JzTmVlZFVwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmNvbG9yO1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApO1xuXHRcdFx0XHRhdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGdlb21ldHJ5LmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLnV2O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGF0dHJpYnV0ZS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkudXZzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0YXR0cmlidXRlID0gdGhpcy5hdHRyaWJ1dGVzLmxpbmVEaXN0YW5jZTtcblxuXHRcdFx0aWYgKCBhdHRyaWJ1dGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGUuY29weUFycmF5KCBnZW9tZXRyeS5saW5lRGlzdGFuY2VzICk7XG5cdFx0XHRcdGF0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkubGluZURpc3RhbmNlc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSApIHtcblxuXHRcdFx0Z2VvbWV0cnkuY29tcHV0ZUdyb3Vwcyggb2JqZWN0Lmdlb21ldHJ5ICk7XG5cdFx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0Z2VvbWV0cnkuZ3JvdXBzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRmcm9tR2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHRnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ID0gbmV3IERpcmVjdEdlb21ldHJ5KCkuZnJvbUdlb21ldHJ5KCBnZW9tZXRyeSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbURpcmVjdEdlb21ldHJ5KCBnZW9tZXRyeS5fX2RpcmVjdEdlb21ldHJ5ICk7XG5cblx0fSxcblxuXHRmcm9tRGlyZWN0R2VvbWV0cnk6IGZ1bmN0aW9uICggZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudmVydGljZXMubGVuZ3RoICogMyApO1xuXHRcdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkudmVydGljZXMgKSApO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ub3JtYWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHZhciBub3JtYWxzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkubm9ybWFscy5sZW5ndGggKiAzICk7XG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKS5jb3B5VmVjdG9yM3NBcnJheSggZ2VvbWV0cnkubm9ybWFscyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmNvbG9ycy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgY29sb3JzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkuY29sb3JzLmxlbmd0aCAqIDMgKTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKS5jb3B5Q29sb3JzQXJyYXkoIGdlb21ldHJ5LmNvbG9ycyApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LnV2cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzID0gbmV3IEZsb2F0MzJBcnJheSggZ2VvbWV0cnkudXZzLmxlbmd0aCAqIDIgKTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKS5jb3B5VmVjdG9yMnNBcnJheSggZ2VvbWV0cnkudXZzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkudXZzMi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgdXZzMiA9IG5ldyBGbG9hdDMyQXJyYXkoIGdlb21ldHJ5LnV2czIubGVuZ3RoICogMiApO1xuXHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1djInLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1dnMyLCAyICkuY29weVZlY3RvcjJzQXJyYXkoIGdlb21ldHJ5LnV2czIgKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ3JvdXBzXG5cblx0XHR0aGlzLmdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdC8vIG1vcnBoc1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblx0XHRcdHZhciBtb3JwaFRhcmdldHMgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoVGFyZ2V0ID0gbW9ycGhUYXJnZXRzWyBpIF07XG5cblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBtb3JwaFRhcmdldC5kYXRhLmxlbmd0aCAqIDMsIDMgKTtcblx0XHRcdFx0YXR0cmlidXRlLm5hbWUgPSBtb3JwaFRhcmdldC5uYW1lO1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIGF0dHJpYnV0ZS5jb3B5VmVjdG9yM3NBcnJheSggbW9ycGhUYXJnZXQuZGF0YSApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbm5pbmdcblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbkluZGljZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5JbmRpY2VzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5JbmRpY2VzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnc2tpbkluZGV4Jywgc2tpbkluZGljZXMuY29weVZlY3RvcjRzQXJyYXkoIGdlb21ldHJ5LnNraW5JbmRpY2VzICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2VvbWV0cnkuc2tpbldlaWdodHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dmFyIHNraW5XZWlnaHRzID0gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGdlb21ldHJ5LnNraW5XZWlnaHRzLmxlbmd0aCAqIDQsIDQgKTtcblx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCAnc2tpbldlaWdodCcsIHNraW5XZWlnaHRzLmNvcHlWZWN0b3I0c0FycmF5KCBnZW9tZXRyeS5za2luV2VpZ2h0cyApICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gZ2VvbWV0cnkuYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94LnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb25bIGkgXTtcblx0XHRcdFx0XHRfYm94JDIuc2V0RnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdGlmICggdGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ0LmFkZFZlY3RvcnMoIHRoaXMuYm91bmRpbmdCb3gubWluLCBfYm94JDIubWluICk7XG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkNCApO1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDQuYWRkVmVjdG9ycyggdGhpcy5ib3VuZGluZ0JveC5tYXgsIF9ib3gkMi5tYXggKTtcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX3ZlY3RvciQ0ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHR0aGlzLmJvdW5kaW5nQm94LmV4cGFuZEJ5UG9pbnQoIF9ib3gkMi5taW4gKTtcblx0XHRcdFx0XHRcdHRoaXMuYm91bmRpbmdCb3guZXhwYW5kQnlQb2ludCggX2JveCQyLm1heCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveC5tYWtlRW1wdHkoKTtcblxuXHRcdH1cblxuXHRcdGlmICggaXNOYU4oIHRoaXMuYm91bmRpbmdCb3gubWluLnggKSB8fCBpc05hTiggdGhpcy5ib3VuZGluZ0JveC5taW4ueSApIHx8IGlzTmFOKCB0aGlzLmJvdW5kaW5nQm94Lm1pbi56ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3g6IENvbXB1dGVkIG1pbi9tYXggaGF2ZSBOYU4gdmFsdWVzLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNvbXB1dGVCb3VuZGluZ1NwaGVyZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbmV3IFNwaGVyZSgpO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBvc2l0aW9uID0gdGhpcy5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiA9IHRoaXMubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0aWYgKCBwb3NpdGlvbiApIHtcblxuXHRcdFx0Ly8gZmlyc3QsIGZpbmQgdGhlIGNlbnRlciBvZiB0aGUgYm91bmRpbmcgc3BoZXJlXG5cblx0XHRcdHZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcblxuXHRcdFx0X2JveCQyLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uICk7XG5cblx0XHRcdC8vIHByb2Nlc3MgbW9ycGggYXR0cmlidXRlcyBpZiBwcmVzZW50XG5cblx0XHRcdGlmICggbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24gKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1vcnBoQXR0cmlidXRlc1Bvc2l0aW9uLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb25bIGkgXTtcblx0XHRcdFx0XHRfYm94TW9ycGhUYXJnZXRzLnNldEZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRpZiAoIHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IkNC5hZGRWZWN0b3JzKCBfYm94JDIubWluLCBfYm94TW9ycGhUYXJnZXRzLm1pbiApO1xuXHRcdFx0XHRcdFx0X2JveCQyLmV4cGFuZEJ5UG9pbnQoIF92ZWN0b3IkNCApO1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yJDQuYWRkVmVjdG9ycyggX2JveCQyLm1heCwgX2JveE1vcnBoVGFyZ2V0cy5tYXggKTtcblx0XHRcdFx0XHRcdF9ib3gkMi5leHBhbmRCeVBvaW50KCBfdmVjdG9yJDQgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdF9ib3gkMi5leHBhbmRCeVBvaW50KCBfYm94TW9ycGhUYXJnZXRzLm1pbiApO1xuXHRcdFx0XHRcdFx0X2JveCQyLmV4cGFuZEJ5UG9pbnQoIF9ib3hNb3JwaFRhcmdldHMubWF4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdF9ib3gkMi5nZXRDZW50ZXIoIGNlbnRlciApO1xuXG5cdFx0XHQvLyBzZWNvbmQsIHRyeSB0byBmaW5kIGEgYm91bmRpbmdTcGhlcmUgd2l0aCBhIHJhZGl1cyBzbWFsbGVyIHRoYW4gdGhlXG5cdFx0XHQvLyBib3VuZGluZ1NwaGVyZSBvZiB0aGUgYm91bmRpbmdCb3g6IHNxcnQoMykgc21hbGxlciBpbiB0aGUgYmVzdCBjYXNlXG5cblx0XHRcdHZhciBtYXhSYWRpdXNTcSA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb3NpdGlvbi5jb3VudDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdF92ZWN0b3IkNC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaSApO1xuXG5cdFx0XHRcdG1heFJhZGl1c1NxID0gTWF0aC5tYXgoIG1heFJhZGl1c1NxLCBjZW50ZXIuZGlzdGFuY2VUb1NxdWFyZWQoIF92ZWN0b3IkNCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvY2VzcyBtb3JwaCBhdHRyaWJ1dGVzIGlmIHByZXNlbnRcblxuXHRcdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvbiApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGVzUG9zaXRpb24ubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgbW9ycGhBdHRyaWJ1dGUgPSBtb3JwaEF0dHJpYnV0ZXNQb3NpdGlvblsgaSBdO1xuXHRcdFx0XHRcdHZhciBtb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gbW9ycGhBdHRyaWJ1dGUuY291bnQ7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0X3ZlY3RvciQ0LmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBqICk7XG5cblx0XHRcdFx0XHRcdGlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0XHRcdFx0X29mZnNldC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaiApO1xuXHRcdFx0XHRcdFx0XHRfdmVjdG9yJDQuYWRkKCBfb2Zmc2V0ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bWF4UmFkaXVzU3EgPSBNYXRoLm1heCggbWF4UmFkaXVzU3EsIGNlbnRlci5kaXN0YW5jZVRvU3F1YXJlZCggX3ZlY3RvciQ0ICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXMgPSBNYXRoLnNxcnQoIG1heFJhZGl1c1NxICk7XG5cblx0XHRcdGlmICggaXNOYU4oIHRoaXMuYm91bmRpbmdTcGhlcmUucmFkaXVzICkgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpOiBDb21wdXRlZCByYWRpdXMgaXMgTmFOLiBUaGUgXCJwb3NpdGlvblwiIGF0dHJpYnV0ZSBpcyBsaWtlbHkgdG8gaGF2ZSBOYU4gdmFsdWVzLicsIHRoaXMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUZhY2VOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG5cdH0sXG5cblx0Y29tcHV0ZVZlcnRleE5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gKSB7XG5cblx0XHRcdHZhciBwb3NpdGlvbnMgPSBhdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuXG5cdFx0XHRpZiAoIGF0dHJpYnV0ZXMubm9ybWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvbnMubGVuZ3RoICksIDMgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIHJlc2V0IGV4aXN0aW5nIG5vcm1hbHMgdG8gemVyb1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5WyBpIF0gPSAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsLmFycmF5O1xuXG5cdFx0XHR2YXIgdkEsIHZCLCB2Qztcblx0XHRcdHZhciBwQSA9IG5ldyBWZWN0b3IzKCksIHBCID0gbmV3IFZlY3RvcjMoKSwgcEMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0XHQvLyBpbmRleGVkIGVsZW1lbnRzXG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cblx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gaW5kZXguY291bnQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0dkEgPSBpbmRpY2VzWyBpICsgMCBdICogMztcblx0XHRcdFx0XHR2QiA9IGluZGljZXNbIGkgKyAxIF0gKiAzO1xuXHRcdFx0XHRcdHZDID0gaW5kaWNlc1sgaSArIDIgXSAqIDM7XG5cblx0XHRcdFx0XHRwQS5mcm9tQXJyYXkoIHBvc2l0aW9ucywgdkEgKTtcblx0XHRcdFx0XHRwQi5mcm9tQXJyYXkoIHBvc2l0aW9ucywgdkIgKTtcblx0XHRcdFx0XHRwQy5mcm9tQXJyYXkoIHBvc2l0aW9ucywgdkMgKTtcblxuXHRcdFx0XHRcdGNiLnN1YlZlY3RvcnMoIHBDLCBwQiApO1xuXHRcdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHBBLCBwQiApO1xuXHRcdFx0XHRcdGNiLmNyb3NzKCBhYiApO1xuXG5cdFx0XHRcdFx0bm9ybWFsc1sgdkEgXSArPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZBICsgMSBdICs9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkEgKyAyIF0gKz0gY2IuejtcblxuXHRcdFx0XHRcdG5vcm1hbHNbIHZCIF0gKz0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyB2QiArIDEgXSArPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIHZCICsgMiBdICs9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyB2QyBdICs9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgdkMgKyAxIF0gKz0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyB2QyArIDIgXSArPSBjYi56O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBub24taW5kZXhlZCBlbGVtZW50cyAodW5jb25uZWN0ZWQgdHJpYW5nbGUgc291cClcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlsOyBpICs9IDkgKSB7XG5cblx0XHRcdFx0XHRwQS5mcm9tQXJyYXkoIHBvc2l0aW9ucywgaSApO1xuXHRcdFx0XHRcdHBCLmZyb21BcnJheSggcG9zaXRpb25zLCBpICsgMyApO1xuXHRcdFx0XHRcdHBDLmZyb21BcnJheSggcG9zaXRpb25zLCBpICsgNiApO1xuXG5cdFx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggcEMsIHBCICk7XG5cdFx0XHRcdFx0YWIuc3ViVmVjdG9ycyggcEEsIHBCICk7XG5cdFx0XHRcdFx0Y2IuY3Jvc3MoIGFiICk7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpIF0gPSBjYi54O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyAxIF0gPSBjYi55O1xuXHRcdFx0XHRcdG5vcm1hbHNbIGkgKyAyIF0gPSBjYi56O1xuXG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDMgXSA9IGNiLng7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDQgXSA9IGNiLnk7XG5cdFx0XHRcdFx0bm9ybWFsc1sgaSArIDUgXSA9IGNiLno7XG5cblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNiBdID0gY2IueDtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgNyBdID0gY2IueTtcblx0XHRcdFx0XHRub3JtYWxzWyBpICsgOCBdID0gY2IuejtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVOb3JtYWxzKCk7XG5cblx0XHRcdGF0dHJpYnV0ZXMubm9ybWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiAoIGdlb21ldHJ5LCBvZmZzZXQgKSB7XG5cblx0XHRpZiAoICEgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5CdWZmZXJHZW9tZXRyeS5tZXJnZSgpOiBnZW9tZXRyeSBub3QgYW4gaW5zdGFuY2Ugb2YgVEhSRUUuQnVmZmVyR2VvbWV0cnkuJywgZ2VvbWV0cnkgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG9mZnNldCA9IDA7XG5cblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0J1RIUkVFLkJ1ZmZlckdlb21ldHJ5Lm1lcmdlKCk6IE92ZXJ3cml0aW5nIG9yaWdpbmFsIGdlb21ldHJ5LCBzdGFydGluZyBhdCBvZmZzZXQ9MC4gJ1xuXHRcdFx0XHQrICdVc2UgQnVmZmVyR2VvbWV0cnlVdGlscy5tZXJnZUJ1ZmZlckdlb21ldHJpZXMoKSBmb3IgbG9zc2xlc3MgbWVyZ2UuJ1xuXHRcdFx0KTtcblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggdmFyIGtleSBpbiBhdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZTEgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblx0XHRcdHZhciBhdHRyaWJ1dGVBcnJheTEgPSBhdHRyaWJ1dGUxLmFycmF5O1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlMiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5MiA9IGF0dHJpYnV0ZTIuYXJyYXk7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGVPZmZzZXQgPSBhdHRyaWJ1dGUyLml0ZW1TaXplICogb2Zmc2V0O1xuXHRcdFx0dmFyIGxlbmd0aCA9IE1hdGgubWluKCBhdHRyaWJ1dGVBcnJheTIubGVuZ3RoLCBhdHRyaWJ1dGVBcnJheTEubGVuZ3RoIC0gYXR0cmlidXRlT2Zmc2V0ICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaiA9IGF0dHJpYnV0ZU9mZnNldDsgaSA8IGxlbmd0aDsgaSArKywgaiArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVBcnJheTFbIGogXSA9IGF0dHJpYnV0ZUFycmF5MlsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZU5vcm1hbHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBub3JtYWxzLmNvdW50OyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNC54ID0gbm9ybWFscy5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yJDQueSA9IG5vcm1hbHMuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3RvciQ0LnogPSBub3JtYWxzLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ0Lm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnNldFhZWiggaSwgX3ZlY3RvciQ0LngsIF92ZWN0b3IkNC55LCBfdmVjdG9yJDQueiApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dG9Ob25JbmRleGVkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRmdW5jdGlvbiBjb252ZXJ0QnVmZmVyQXR0cmlidXRlKCBhdHRyaWJ1dGUsIGluZGljZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHRcdHZhciBpdGVtU2l6ZSA9IGF0dHJpYnV0ZS5pdGVtU2l6ZTtcblxuXHRcdFx0dmFyIGFycmF5MiA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvciggaW5kaWNlcy5sZW5ndGggKiBpdGVtU2l6ZSApO1xuXG5cdFx0XHR2YXIgaW5kZXggPSAwLCBpbmRleDIgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzWyBpIF0gKiBpdGVtU2l6ZTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBpdGVtU2l6ZTsgaiArKyApIHtcblxuXHRcdFx0XHRcdGFycmF5MlsgaW5kZXgyICsrIF0gPSBhcnJheVsgaW5kZXggKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFycmF5MiwgaXRlbVNpemUgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIHRoaXMuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LnRvTm9uSW5kZXhlZCgpOiBHZW9tZXRyeSBpcyBhbHJlYWR5IG5vbi1pbmRleGVkLicgKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdlb21ldHJ5MiA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGluZGljZXMgPSB0aGlzLmluZGV4LmFycmF5O1xuXHRcdHZhciBhdHRyaWJ1dGVzID0gdGhpcy5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gYXR0cmlidXRlc1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0dmFyIG5ld0F0dHJpYnV0ZSA9IGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApO1xuXG5cdFx0XHRnZW9tZXRyeTIuc2V0QXR0cmlidXRlKCBuYW1lLCBuZXdBdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSB0aGlzLm1vcnBoQXR0cmlidXRlcztcblxuXHRcdGZvciAoIG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgbW9ycGhBcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhBdHRyaWJ1dGUubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IG1vcnBoQXR0cmlidXRlWyBpIF07XG5cblx0XHRcdFx0dmFyIG5ld0F0dHJpYnV0ZSA9IGNvbnZlcnRCdWZmZXJBdHRyaWJ1dGUoIGF0dHJpYnV0ZSwgaW5kaWNlcyApO1xuXG5cdFx0XHRcdG1vcnBoQXJyYXkucHVzaCggbmV3QXR0cmlidXRlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkyLm1vcnBoQXR0cmlidXRlc1sgbmFtZSBdID0gbW9ycGhBcnJheTtcblxuXHRcdH1cblxuXHRcdGdlb21ldHJ5Mi5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRoaXMubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHQvLyBncm91cHNcblxuXHRcdHZhciBncm91cHMgPSB0aGlzLmdyb3VwcztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdGdlb21ldHJ5Mi5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnkyO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0J1ZmZlckdlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnQnVmZmVyR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBCdWZmZXJHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblx0XHRpZiAoIE9iamVjdC5rZXlzKCB0aGlzLnVzZXJEYXRhICkubGVuZ3RoID4gMCApIGRhdGEudXNlckRhdGEgPSB0aGlzLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCB0aGlzLnBhcmFtZXRlcnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHRcdGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdFx0XHRpZiAoIHBhcmFtZXRlcnNbIGtleSBdICE9PSB1bmRlZmluZWQgKSBkYXRhWyBrZXkgXSA9IHBhcmFtZXRlcnNbIGtleSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5kYXRhID0geyBhdHRyaWJ1dGVzOiB7fSB9O1xuXG5cdFx0dmFyIGluZGV4ID0gdGhpcy5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5pbmRleCA9IHtcblx0XHRcdFx0dHlwZTogaW5kZXguYXJyYXkuY29uc3RydWN0b3IubmFtZSxcblx0XHRcdFx0YXJyYXk6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBpbmRleC5hcnJheSApXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSB0aGlzLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCB2YXIga2V5IGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBrZXkgXTtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZURhdGEgPSBhdHRyaWJ1dGUudG9KU09OKCk7XG5cblx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09ICcnICkgYXR0cmlidXRlRGF0YS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cblx0XHRcdGRhdGEuZGF0YS5hdHRyaWJ1dGVzWyBrZXkgXSA9IGF0dHJpYnV0ZURhdGE7XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dmFyIGhhc01vcnBoQXR0cmlidXRlcyA9IGZhbHNlO1xuXG5cdFx0Zm9yICggdmFyIGtleSBpbiB0aGlzLm1vcnBoQXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZUFycmF5ID0gdGhpcy5tb3JwaEF0dHJpYnV0ZXNbIGtleSBdO1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVBcnJheVsgaSBdO1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVEYXRhID0gYXR0cmlidXRlLnRvSlNPTigpO1xuXG5cdFx0XHRcdGlmICggYXR0cmlidXRlLm5hbWUgIT09ICcnICkgYXR0cmlidXRlRGF0YS5uYW1lID0gYXR0cmlidXRlLm5hbWU7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggYXR0cmlidXRlRGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggYXJyYXkubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRtb3JwaEF0dHJpYnV0ZXNbIGtleSBdID0gYXJyYXk7XG5cblx0XHRcdFx0aGFzTW9ycGhBdHRyaWJ1dGVzID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBoYXNNb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5tb3JwaEF0dHJpYnV0ZXMgPSBtb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHRkYXRhLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmUgPSB0aGlzLm1vcnBoVGFyZ2V0c1JlbGF0aXZlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xuXG5cdFx0aWYgKCBncm91cHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0ZGF0YS5kYXRhLmdyb3VwcyA9IEpTT04ucGFyc2UoIEpTT04uc3RyaW5naWZ5KCBncm91cHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gdGhpcy5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdGRhdGEuZGF0YS5ib3VuZGluZ1NwaGVyZSA9IHtcblx0XHRcdFx0Y2VudGVyOiBib3VuZGluZ1NwaGVyZS5jZW50ZXIudG9BcnJheSgpLFxuXHRcdFx0XHRyYWRpdXM6IGJvdW5kaW5nU3BoZXJlLnJhZGl1c1xuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8qXG5cdFx0IC8vIEhhbmRsZSBwcmltaXRpdmVzXG5cblx0XHQgdmFyIHBhcmFtZXRlcnMgPSB0aGlzLnBhcmFtZXRlcnM7XG5cblx0XHQgaWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHQgdmFyIHZhbHVlcyA9IFtdO1xuXG5cdFx0IGZvciAoIHZhciBrZXkgaW4gcGFyYW1ldGVycyApIHtcblxuXHRcdCB2YWx1ZXMucHVzaCggcGFyYW1ldGVyc1sga2V5IF0gKTtcblxuXHRcdCB9XG5cblx0XHQgdmFyIGdlb21ldHJ5ID0gT2JqZWN0LmNyZWF0ZSggdGhpcy5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgKTtcblx0XHQgdGhpcy5jb25zdHJ1Y3Rvci5hcHBseSggZ2VvbWV0cnksIHZhbHVlcyApO1xuXHRcdCByZXR1cm4gZ2VvbWV0cnk7XG5cblx0XHQgfVxuXG5cdFx0IHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblx0XHQgKi9cblxuXHRcdHJldHVybiBuZXcgQnVmZmVyR2VvbWV0cnkoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdHZhciBuYW1lLCBpLCBsO1xuXG5cdFx0Ly8gcmVzZXRcblxuXHRcdHRoaXMuaW5kZXggPSBudWxsO1xuXHRcdHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuXHRcdHRoaXMubW9ycGhBdHRyaWJ1dGVzID0ge307XG5cdFx0dGhpcy5ncm91cHMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gaW5kZXhcblxuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5pbmRleDtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuc2V0SW5kZXgoIGluZGV4LmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBhdHRyaWJ1dGVzID0gc291cmNlLmF0dHJpYnV0ZXM7XG5cblx0XHRmb3IgKCBuYW1lIGluIGF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWyBuYW1lIF07XG5cdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggbmFtZSwgYXR0cmlidXRlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIGF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBzb3VyY2UubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBuYW1lIF07IC8vIG1vcnBoQXR0cmlidXRlOiBhcnJheSBvZiBGbG9hdDMyQnVmZmVyQXR0cmlidXRlc1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IG1vcnBoQXR0cmlidXRlLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0YXJyYXkucHVzaCggbW9ycGhBdHRyaWJ1dGVbIGkgXS5jbG9uZSgpICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dGhpcy5tb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXSA9IGFycmF5O1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHNvdXJjZS5tb3JwaFRhcmdldHNSZWxhdGl2ZTtcblxuXHRcdC8vIGdyb3Vwc1xuXG5cdFx0dmFyIGdyb3VwcyA9IHNvdXJjZS5ncm91cHM7XG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblx0XHRcdHRoaXMuYWRkR3JvdXAoIGdyb3VwLnN0YXJ0LCBncm91cC5jb3VudCwgZ3JvdXAubWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYm91bmRpbmcgYm94XG5cblx0XHR2YXIgYm91bmRpbmdCb3ggPSBzb3VyY2UuYm91bmRpbmdCb3g7XG5cblx0XHRpZiAoIGJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLmJvdW5kaW5nQm94ID0gYm91bmRpbmdCb3guY2xvbmUoKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIHNwaGVyZVxuXG5cdFx0dmFyIGJvdW5kaW5nU3BoZXJlID0gc291cmNlLmJvdW5kaW5nU3BoZXJlO1xuXG5cdFx0aWYgKCBib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBkcmF3IHJhbmdlXG5cblx0XHR0aGlzLmRyYXdSYW5nZS5zdGFydCA9IHNvdXJjZS5kcmF3UmFuZ2Uuc3RhcnQ7XG5cdFx0dGhpcy5kcmF3UmFuZ2UuY291bnQgPSBzb3VyY2UuZHJhd1JhbmdlLmNvdW50O1xuXG5cdFx0Ly8gdXNlciBkYXRhXG5cblx0XHR0aGlzLnVzZXJEYXRhID0gc291cmNlLnVzZXJEYXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwOi8vam9ub2JyMS5jb20vXG4gKi9cblxudmFyIF9pbnZlcnNlTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfcmF5ID0gbmV3IFJheSgpO1xudmFyIF9zcGhlcmUgPSBuZXcgU3BoZXJlKCk7XG5cbnZhciBfdkEgPSBuZXcgVmVjdG9yMygpO1xudmFyIF92QiA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3ZDID0gbmV3IFZlY3RvcjMoKTtcblxudmFyIF90ZW1wQSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3RlbXBCID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdGVtcEMgPSBuZXcgVmVjdG9yMygpO1xuXG52YXIgX21vcnBoQSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX21vcnBoQiA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX21vcnBoQyA9IG5ldyBWZWN0b3IzKCk7XG5cbnZhciBfdXZBID0gbmV3IFZlY3RvcjIoKTtcbnZhciBfdXZCID0gbmV3IFZlY3RvcjIoKTtcbnZhciBfdXZDID0gbmV3IFZlY3RvcjIoKTtcblxudmFyIF9pbnRlcnNlY3Rpb25Qb2ludCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2ludGVyc2VjdGlvblBvaW50V29ybGQgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoJztcblxuXHR0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCA/IGdlb21ldHJ5IDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHRoaXMubWF0ZXJpYWwgPSBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkID8gbWF0ZXJpYWwgOiBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoKTtcblxuXHR0aGlzLnVwZGF0ZU1vcnBoVGFyZ2V0cygpO1xuXG59XG5cbk1lc2gucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTWVzaCxcblxuXHRpc01lc2g6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdGlmICggc291cmNlLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IHNvdXJjZS5tb3JwaFRhcmdldEluZmx1ZW5jZXMuc2xpY2UoKTtcblxuXHRcdH1cblxuXHRcdGlmICggc291cmNlLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0RGljdGlvbmFyeSA9IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UubW9ycGhUYXJnZXREaWN0aW9uYXJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHR2YXIgbSwgbWwsIG5hbWU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0bmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoLnVwZGF0ZU1vcnBoVGFyZ2V0cygpIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbDtcblx0XHR2YXIgbWF0cml4V29ybGQgPSB0aGlzLm1hdHJpeFdvcmxkO1xuXG5cdFx0aWYgKCBtYXRlcmlhbCA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZS5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHRpZiAoIHJheWNhc3Rlci5yYXkuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRfaW52ZXJzZU1hdHJpeC5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdF9yYXkuY29weSggcmF5Y2FzdGVyLnJheSApLmFwcGx5TWF0cml4NCggX2ludmVyc2VNYXRyaXggKTtcblxuXHRcdC8vIENoZWNrIGJvdW5kaW5nQm94IGJlZm9yZSBjb250aW51aW5nXG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nQm94ICE9PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9yYXkuaW50ZXJzZWN0c0JveCggZ2VvbWV0cnkuYm91bmRpbmdCb3ggKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHR9XG5cblx0XHR2YXIgaW50ZXJzZWN0aW9uO1xuXG5cdFx0aWYgKCBnZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHR2YXIgYSwgYiwgYztcblx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdHZhciBtb3JwaFBvc2l0aW9uID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdFx0dmFyIG1vcnBoVGFyZ2V0c1JlbGF0aXZlID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cdFx0XHR2YXIgdXYgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnV2O1xuXHRcdFx0dmFyIHV2MiA9IGdlb21ldHJ5LmF0dHJpYnV0ZXMudXYyO1xuXHRcdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3Vwcztcblx0XHRcdHZhciBkcmF3UmFuZ2UgPSBnZW9tZXRyeS5kcmF3UmFuZ2U7XG5cdFx0XHR2YXIgaSwgaiwgaWwsIGpsO1xuXHRcdFx0dmFyIGdyb3VwLCBncm91cE1hdGVyaWFsO1xuXHRcdFx0dmFyIHN0YXJ0LCBlbmQ7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gaW5kZXhlZCBidWZmZXIgZ2VvbWV0cnlcblxuXHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBncm91cHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cdFx0XHRcdFx0XHRncm91cE1hdGVyaWFsID0gbWF0ZXJpYWxbIGdyb3VwLm1hdGVyaWFsSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBNYXRoLm1heCggZ3JvdXAuc3RhcnQsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdFx0ZW5kID0gTWF0aC5taW4oICggZ3JvdXAuc3RhcnQgKyBncm91cC5jb3VudCApLCAoIGRyYXdSYW5nZS5zdGFydCArIGRyYXdSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIGogPSBzdGFydCwgamwgPSBlbmQ7IGogPCBqbDsgaiArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRcdGEgPSBpbmRleC5nZXRYKCBqICk7XG5cdFx0XHRcdFx0XHRcdGIgPSBpbmRleC5nZXRYKCBqICsgMSApO1xuXHRcdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaiArIDIgKTtcblxuXHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBncm91cE1hdGVyaWFsLCByYXljYXN0ZXIsIF9yYXksIHBvc2l0aW9uLCBtb3JwaFBvc2l0aW9uLCBtb3JwaFRhcmdldHNSZWxhdGl2ZSwgdXYsIHV2MiwgYSwgYiwgYyApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGogLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBpbmRleGVkIGJ1ZmZlciBzZW1hbnRpY3Ncblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZS5tYXRlcmlhbEluZGV4ID0gZ3JvdXAubWF0ZXJpYWxJbmRleDtcblx0XHRcdFx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGFydCA9IE1hdGgubWF4KCAwLCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRlbmQgPSBNYXRoLm1pbiggaW5kZXguY291bnQsICggZHJhd1JhbmdlLnN0YXJ0ICsgZHJhd1JhbmdlLmNvdW50ICkgKTtcblxuXHRcdFx0XHRcdGZvciAoIGkgPSBzdGFydCwgaWwgPSBlbmQ7IGkgPCBpbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdFx0XHRhID0gaW5kZXguZ2V0WCggaSApO1xuXHRcdFx0XHRcdFx0YiA9IGluZGV4LmdldFgoIGkgKyAxICk7XG5cdFx0XHRcdFx0XHRjID0gaW5kZXguZ2V0WCggaSArIDIgKTtcblxuXHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgbWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSwgcG9zaXRpb24sIG1vcnBoUG9zaXRpb24sIG1vcnBoVGFyZ2V0c1JlbGF0aXZlLCB1diwgdXYyLCBhLCBiLCBjICk7XG5cblx0XHRcdFx0XHRcdGlmICggaW50ZXJzZWN0aW9uICkge1xuXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBpIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gaW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIHBvc2l0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gbm9uLWluZGV4ZWQgYnVmZmVyIGdlb21ldHJ5XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0Zm9yICggaSA9IDAsIGlsID0gZ3JvdXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0Z3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIGdyb3VwLnN0YXJ0LCBkcmF3UmFuZ2Uuc3RhcnQgKTtcblx0XHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCAoIGdyb3VwLnN0YXJ0ICsgZ3JvdXAuY291bnQgKSwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCBqID0gc3RhcnQsIGpsID0gZW5kOyBqIDwgamw7IGogKz0gMyApIHtcblxuXHRcdFx0XHRcdFx0XHRhID0gajtcblx0XHRcdFx0XHRcdFx0YiA9IGogKyAxO1xuXHRcdFx0XHRcdFx0XHRjID0gaiArIDI7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uID0gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggdGhpcywgZ3JvdXBNYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGludGVyc2VjdGlvbiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlSW5kZXggPSBNYXRoLmZsb29yKCBqIC8gMyApOyAvLyB0cmlhbmdsZSBudW1iZXIgaW4gbm9uLWluZGV4ZWQgYnVmZmVyIHNlbWFudGljc1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlLm1hdGVyaWFsSW5kZXggPSBncm91cC5tYXRlcmlhbEluZGV4O1xuXHRcdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN0YXJ0ID0gTWF0aC5tYXgoIDAsIGRyYXdSYW5nZS5zdGFydCApO1xuXHRcdFx0XHRcdGVuZCA9IE1hdGgubWluKCBwb3NpdGlvbi5jb3VudCwgKCBkcmF3UmFuZ2Uuc3RhcnQgKyBkcmF3UmFuZ2UuY291bnQgKSApO1xuXG5cdFx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBpbCA9IGVuZDsgaSA8IGlsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRcdGEgPSBpO1xuXHRcdFx0XHRcdFx0YiA9IGkgKyAxO1xuXHRcdFx0XHRcdFx0YyA9IGkgKyAyO1xuXG5cdFx0XHRcdFx0XHRpbnRlcnNlY3Rpb24gPSBjaGVja0J1ZmZlckdlb21ldHJ5SW50ZXJzZWN0aW9uKCB0aGlzLCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCBfcmF5LCBwb3NpdGlvbiwgbW9ycGhQb3NpdGlvbiwgbW9ycGhUYXJnZXRzUmVsYXRpdmUsIHV2LCB1djIsIGEsIGIsIGMgKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRcdFx0aW50ZXJzZWN0aW9uLmZhY2VJbmRleCA9IE1hdGguZmxvb3IoIGkgLyAzICk7IC8vIHRyaWFuZ2xlIG51bWJlciBpbiBub24taW5kZXhlZCBidWZmZXIgc2VtYW50aWNzXG5cdFx0XHRcdFx0XHRcdGludGVyc2VjdHMucHVzaCggaW50ZXJzZWN0aW9uICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBmdkEsIGZ2QiwgZnZDO1xuXHRcdFx0dmFyIGlzTXVsdGlNYXRlcmlhbCA9IEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICk7XG5cblx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cdFx0XHR2YXIgdXZzO1xuXG5cdFx0XHR2YXIgZmFjZVZlcnRleFV2cyA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHRcdGlmICggZmFjZVZlcnRleFV2cy5sZW5ndGggPiAwICkgdXZzID0gZmFjZVZlcnRleFV2cztcblxuXHRcdFx0Zm9yICggdmFyIGYgPSAwLCBmbCA9IGZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGYgXTtcblx0XHRcdFx0dmFyIGZhY2VNYXRlcmlhbCA9IGlzTXVsdGlNYXRlcmlhbCA/IG1hdGVyaWFsWyBmYWNlLm1hdGVyaWFsSW5kZXggXSA6IG1hdGVyaWFsO1xuXG5cdFx0XHRcdGlmICggZmFjZU1hdGVyaWFsID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRmdkEgPSB2ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHRcdGZ2QiA9IHZlcnRpY2VzWyBmYWNlLmIgXTtcblx0XHRcdFx0ZnZDID0gdmVydGljZXNbIGZhY2UuYyBdO1xuXG5cdFx0XHRcdGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCB0aGlzLCBmYWNlTWF0ZXJpYWwsIHJheWNhc3RlciwgX3JheSwgZnZBLCBmdkIsIGZ2QywgX2ludGVyc2VjdGlvblBvaW50ICk7XG5cblx0XHRcdFx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRcdFx0XHRpZiAoIHV2cyAmJiB1dnNbIGYgXSApIHtcblxuXHRcdFx0XHRcdFx0dmFyIHV2c19mID0gdXZzWyBmIF07XG5cdFx0XHRcdFx0XHRfdXZBLmNvcHkoIHV2c19mWyAwIF0gKTtcblx0XHRcdFx0XHRcdF91dkIuY29weSggdXZzX2ZbIDEgXSApO1xuXHRcdFx0XHRcdFx0X3V2Qy5jb3B5KCB1dnNfZlsgMiBdICk7XG5cblx0XHRcdFx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIGZ2QSwgZnZCLCBmdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblx0XHRcdFx0XHRpbnRlcnNlY3Rpb24uZmFjZUluZGV4ID0gZjtcblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIGludGVyc2VjdGlvbiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvciggdGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCApLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gY2hlY2tJbnRlcnNlY3Rpb24oIG9iamVjdCwgbWF0ZXJpYWwsIHJheWNhc3RlciwgcmF5LCBwQSwgcEIsIHBDLCBwb2ludCApIHtcblxuXHR2YXIgaW50ZXJzZWN0O1xuXG5cdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB7XG5cblx0XHRpbnRlcnNlY3QgPSByYXkuaW50ZXJzZWN0VHJpYW5nbGUoIHBDLCBwQiwgcEEsIHRydWUsIHBvaW50ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGludGVyc2VjdCA9IHJheS5pbnRlcnNlY3RUcmlhbmdsZSggcEEsIHBCLCBwQywgbWF0ZXJpYWwuc2lkZSAhPT0gRG91YmxlU2lkZSwgcG9pbnQgKTtcblxuXHR9XG5cblx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSByZXR1cm4gbnVsbDtcblxuXHRfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jb3B5KCBwb2ludCApO1xuXHRfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5hcHBseU1hdHJpeDQoIG9iamVjdC5tYXRyaXhXb3JsZCApO1xuXG5cdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIF9pbnRlcnNlY3Rpb25Qb2ludFdvcmxkICk7XG5cblx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdHBvaW50OiBfaW50ZXJzZWN0aW9uUG9pbnRXb3JsZC5jbG9uZSgpLFxuXHRcdG9iamVjdDogb2JqZWN0XG5cdH07XG5cbn1cblxuZnVuY3Rpb24gY2hlY2tCdWZmZXJHZW9tZXRyeUludGVyc2VjdGlvbiggb2JqZWN0LCBtYXRlcmlhbCwgcmF5Y2FzdGVyLCByYXksIHBvc2l0aW9uLCBtb3JwaFBvc2l0aW9uLCBtb3JwaFRhcmdldHNSZWxhdGl2ZSwgdXYsIHV2MiwgYSwgYiwgYyApIHtcblxuXHRfdkEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGEgKTtcblx0X3ZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBiICk7XG5cdF92Qy5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgYyApO1xuXG5cdHZhciBtb3JwaEluZmx1ZW5jZXMgPSBvYmplY3QubW9ycGhUYXJnZXRJbmZsdWVuY2VzO1xuXG5cdGlmICggbWF0ZXJpYWwubW9ycGhUYXJnZXRzICYmIG1vcnBoUG9zaXRpb24gJiYgbW9ycGhJbmZsdWVuY2VzICkge1xuXG5cdFx0X21vcnBoQS5zZXQoIDAsIDAsIDAgKTtcblx0XHRfbW9ycGhCLnNldCggMCwgMCwgMCApO1xuXHRcdF9tb3JwaEMuc2V0KCAwLCAwLCAwICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhQb3NpdGlvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IG1vcnBoSW5mbHVlbmNlc1sgaSBdO1xuXHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhQb3NpdGlvblsgaSBdO1xuXG5cdFx0XHRpZiAoIGluZmx1ZW5jZSA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHRfdGVtcEEuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggbW9ycGhBdHRyaWJ1dGUsIGEgKTtcblx0XHRcdF90ZW1wQi5mcm9tQnVmZmVyQXR0cmlidXRlKCBtb3JwaEF0dHJpYnV0ZSwgYiApO1xuXHRcdFx0X3RlbXBDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIG1vcnBoQXR0cmlidXRlLCBjICk7XG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzUmVsYXRpdmUgKSB7XG5cblx0XHRcdFx0X21vcnBoQS5hZGRTY2FsZWRWZWN0b3IoIF90ZW1wQSwgaW5mbHVlbmNlICk7XG5cdFx0XHRcdF9tb3JwaEIuYWRkU2NhbGVkVmVjdG9yKCBfdGVtcEIsIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhDLmFkZFNjYWxlZFZlY3RvciggX3RlbXBDLCBpbmZsdWVuY2UgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfbW9ycGhBLmFkZFNjYWxlZFZlY3RvciggX3RlbXBBLnN1YiggX3ZBICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhCLmFkZFNjYWxlZFZlY3RvciggX3RlbXBCLnN1YiggX3ZCICksIGluZmx1ZW5jZSApO1xuXHRcdFx0XHRfbW9ycGhDLmFkZFNjYWxlZFZlY3RvciggX3RlbXBDLnN1YiggX3ZDICksIGluZmx1ZW5jZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfdkEuYWRkKCBfbW9ycGhBICk7XG5cdFx0X3ZCLmFkZCggX21vcnBoQiApO1xuXHRcdF92Qy5hZGQoIF9tb3JwaEMgKTtcblxuXHR9XG5cblx0dmFyIGludGVyc2VjdGlvbiA9IGNoZWNrSW50ZXJzZWN0aW9uKCBvYmplY3QsIG1hdGVyaWFsLCByYXljYXN0ZXIsIHJheSwgX3ZBLCBfdkIsIF92QywgX2ludGVyc2VjdGlvblBvaW50ICk7XG5cblx0aWYgKCBpbnRlcnNlY3Rpb24gKSB7XG5cblx0XHRpZiAoIHV2ICkge1xuXG5cdFx0XHRfdXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBhICk7XG5cdFx0XHRfdXZCLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBiICk7XG5cdFx0XHRfdXZDLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2LCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi51diA9IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0aW9uUG9pbnQsIF92QSwgX3ZCLCBfdkMsIF91dkEsIF91dkIsIF91dkMsIG5ldyBWZWN0b3IyKCkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXYyICkge1xuXG5cdFx0XHRfdXZBLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHV2MiwgYSApO1xuXHRcdFx0X3V2Qi5mcm9tQnVmZmVyQXR0cmlidXRlKCB1djIsIGIgKTtcblx0XHRcdF91dkMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggdXYyLCBjICk7XG5cblx0XHRcdGludGVyc2VjdGlvbi51djIgPSBUcmlhbmdsZS5nZXRVViggX2ludGVyc2VjdGlvblBvaW50LCBfdkEsIF92QiwgX3ZDLCBfdXZBLCBfdXZCLCBfdXZDLCBuZXcgVmVjdG9yMigpICk7XG5cblx0XHR9XG5cblx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYyApO1xuXHRcdFRyaWFuZ2xlLmdldE5vcm1hbCggX3ZBLCBfdkIsIF92QywgZmFjZS5ub3JtYWwgKTtcblxuXHRcdGludGVyc2VjdGlvbi5mYWNlID0gZmFjZTtcblxuXHR9XG5cblx0cmV0dXJuIGludGVyc2VjdGlvbjtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGtpbGUgLyBodHRwOi8va2lsZS5zdHJhdmFnYW56YS5vcmcvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgX2dlb21ldHJ5SWQgPSAwOyAvLyBHZW9tZXRyeSB1c2VzIGV2ZW4gbnVtYmVycyBhcyBJZFxudmFyIF9tMSQzID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfb2JqJDEgPSBuZXcgT2JqZWN0M0QoKTtcbnZhciBfb2Zmc2V0JDEgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBHZW9tZXRyeSgpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdpZCcsIHsgdmFsdWU6IF9nZW9tZXRyeUlkICs9IDIgfSApO1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLm5hbWUgPSAnJztcblx0dGhpcy50eXBlID0gJ0dlb21ldHJ5JztcblxuXHR0aGlzLnZlcnRpY2VzID0gW107XG5cdHRoaXMuY29sb3JzID0gW107XG5cdHRoaXMuZmFjZXMgPSBbXTtcblx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblxuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IFtdO1xuXG5cdHRoaXMuc2tpbldlaWdodHMgPSBbXTtcblx0dGhpcy5za2luSW5kaWNlcyA9IFtdO1xuXG5cdHRoaXMubGluZURpc3RhbmNlcyA9IFtdO1xuXG5cdHRoaXMuYm91bmRpbmdCb3ggPSBudWxsO1xuXHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHQvLyB1cGRhdGUgZmxhZ3NcblxuXHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnZlcnRpY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLnV2c05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmNvbG9yc05lZWRVcGRhdGUgPSBmYWxzZTtcblx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBmYWxzZTtcblxufVxuXG5HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBFdmVudERpc3BhdGNoZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR2VvbWV0cnksXG5cblx0aXNHZW9tZXRyeTogdHJ1ZSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dmFyIG5vcm1hbE1hdHJpeCA9IG5ldyBNYXRyaXgzKCkuZ2V0Tm9ybWFsTWF0cml4KCBtYXRyaXggKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdmVydGV4ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0dmVydGV4LmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSB0aGlzLmZhY2VzWyBpIF07XG5cdFx0XHRmYWNlLm5vcm1hbC5hcHBseU1hdHJpeDMoIG5vcm1hbE1hdHJpeCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdGZhY2UudmVydGV4Tm9ybWFsc1sgaiBdLmFwcGx5TWF0cml4Myggbm9ybWFsTWF0cml4ICkubm9ybWFsaXplKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmVydGljZXNOZWVkVXBkYXRlID0gdHJ1ZTtcblx0XHR0aGlzLm5vcm1hbHNOZWVkVXBkYXRlID0gdHJ1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cm90YXRlWDogZnVuY3Rpb24gKCBhbmdsZSApIHtcblxuXHRcdC8vIHJvdGF0ZSBnZW9tZXRyeSBhcm91bmQgd29ybGQgeC1heGlzXG5cblx0XHRfbTEkMy5tYWtlUm90YXRpb25YKCBhbmdsZSApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSQzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHJvdGF0ZVk6IGZ1bmN0aW9uICggYW5nbGUgKSB7XG5cblx0XHQvLyByb3RhdGUgZ2VvbWV0cnkgYXJvdW5kIHdvcmxkIHktYXhpc1xuXG5cdFx0X20xJDMubWFrZVJvdGF0aW9uWSggYW5nbGUgKTtcblxuXHRcdHRoaXMuYXBwbHlNYXRyaXg0KCBfbTEkMyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyb3RhdGVaOiBmdW5jdGlvbiAoIGFuZ2xlICkge1xuXG5cdFx0Ly8gcm90YXRlIGdlb21ldHJ5IGFyb3VuZCB3b3JsZCB6LWF4aXNcblxuXHRcdF9tMSQzLm1ha2VSb3RhdGlvblooIGFuZ2xlICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xJDMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dHJhbnNsYXRlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHQvLyB0cmFuc2xhdGUgZ2VvbWV0cnlcblxuXHRcdF9tMSQzLm1ha2VUcmFuc2xhdGlvbiggeCwgeSwgeiApO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9tMSQzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHgsIHksIHogKSB7XG5cblx0XHQvLyBzY2FsZSBnZW9tZXRyeVxuXG5cdFx0X20xJDMubWFrZVNjYWxlKCB4LCB5LCB6ICk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggX20xJDMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bG9va0F0OiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdF9vYmokMS5sb29rQXQoIHZlY3RvciApO1xuXG5cdFx0X29iaiQxLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5hcHBseU1hdHJpeDQoIF9vYmokMS5tYXRyaXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZnJvbUJ1ZmZlckdlb21ldHJ5OiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBpbmRpY2VzID0gZ2VvbWV0cnkuaW5kZXggIT09IG51bGwgPyBnZW9tZXRyeS5pbmRleC5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgYXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZXMucG9zaXRpb24gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5LmZyb21CdWZmZXJHZW9tZXRyeSgpOiBQb3NpdGlvbiBhdHRyaWJ1dGUgcmVxdWlyZWQgZm9yIGNvbnZlcnNpb24uJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR2YXIgcG9zaXRpb25zID0gYXR0cmlidXRlcy5wb3NpdGlvbi5hcnJheTtcblx0XHR2YXIgbm9ybWFscyA9IGF0dHJpYnV0ZXMubm9ybWFsICE9PSB1bmRlZmluZWQgPyBhdHRyaWJ1dGVzLm5vcm1hbC5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgY29sb3JzID0gYXR0cmlidXRlcy5jb2xvciAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy5jb2xvci5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgdXZzID0gYXR0cmlidXRlcy51diAhPT0gdW5kZWZpbmVkID8gYXR0cmlidXRlcy51di5hcnJheSA6IHVuZGVmaW5lZDtcblx0XHR2YXIgdXZzMiA9IGF0dHJpYnV0ZXMudXYyICE9PSB1bmRlZmluZWQgPyBhdHRyaWJ1dGVzLnV2Mi5hcnJheSA6IHVuZGVmaW5lZDtcblxuXHRcdGlmICggdXZzMiAhPT0gdW5kZWZpbmVkICkgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMyApIHtcblxuXHRcdFx0c2NvcGUudmVydGljZXMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvc2l0aW9ucywgaSApICk7XG5cblx0XHRcdGlmICggY29sb3JzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUuY29sb3JzLnB1c2goIG5ldyBDb2xvcigpLmZyb21BcnJheSggY29sb3JzLCBpICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkRmFjZSggYSwgYiwgYywgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0dmFyIHZlcnRleENvbG9ycyA9ICggY29sb3JzID09PSB1bmRlZmluZWQgKSA/IFtdIDogW1xuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGEgXS5jbG9uZSgpLFxuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGIgXS5jbG9uZSgpLFxuXHRcdFx0XHRzY29wZS5jb2xvcnNbIGMgXS5jbG9uZSgpIF07XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gKCBub3JtYWxzID09PSB1bmRlZmluZWQgKSA/IFtdIDogW1xuXHRcdFx0XHRuZXcgVmVjdG9yMygpLmZyb21BcnJheSggbm9ybWFscywgYSAqIDMgKSxcblx0XHRcdFx0bmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIG5vcm1hbHMsIGIgKiAzICksXG5cdFx0XHRcdG5ldyBWZWN0b3IzKCkuZnJvbUFycmF5KCBub3JtYWxzLCBjICogMyApXG5cdFx0XHRdO1xuXG5cdFx0XHR2YXIgZmFjZSA9IG5ldyBGYWNlMyggYSwgYiwgYywgdmVydGV4Tm9ybWFscywgdmVydGV4Q29sb3JzLCBtYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdHNjb3BlLmZhY2VzLnB1c2goIGZhY2UgKTtcblxuXHRcdFx0aWYgKCB1dnMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5mYWNlVmVydGV4VXZzWyAwIF0ucHVzaCggW1xuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMsIGEgKiAyICksXG5cdFx0XHRcdFx0bmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIHV2cywgYiAqIDIgKSxcblx0XHRcdFx0XHRuZXcgVmVjdG9yMigpLmZyb21BcnJheSggdXZzLCBjICogMiApXG5cdFx0XHRcdF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHV2czIgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRzY29wZS5mYWNlVmVydGV4VXZzWyAxIF0ucHVzaCggW1xuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBhICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBiICogMiApLFxuXHRcdFx0XHRcdG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1dnMyLCBjICogMiApXG5cdFx0XHRcdF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdGlmICggZ3JvdXBzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGdyb3VwID0gZ3JvdXBzWyBpIF07XG5cblx0XHRcdFx0dmFyIHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdHZhciBjb3VudCA9IGdyb3VwLmNvdW50O1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gc3RhcnQsIGpsID0gc3RhcnQgKyBjb3VudDsgaiA8IGpsOyBqICs9IDMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGluZGljZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0YWRkRmFjZSggaW5kaWNlc1sgaiBdLCBpbmRpY2VzWyBqICsgMSBdLCBpbmRpY2VzWyBqICsgMiBdLCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRhZGRGYWNlKCBqLCBqICsgMSwgaiArIDIsIGdyb3VwLm1hdGVyaWFsSW5kZXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaW5kaWNlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRhZGRGYWNlKCBpbmRpY2VzWyBpIF0sIGluZGljZXNbIGkgKyAxIF0sIGluZGljZXNbIGkgKyAyIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcG9zaXRpb25zLmxlbmd0aCAvIDM7IGkgKz0gMyApIHtcblxuXHRcdFx0XHRcdGFkZEZhY2UoIGksIGkgKyAxLCBpICsgMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dGhpcy5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdCb3ggIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBnZW9tZXRyeS5ib3VuZGluZ0JveC5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlLmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdCb3goKTtcblxuXHRcdHRoaXMuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCBfb2Zmc2V0JDEgKS5uZWdhdGUoKTtcblxuXHRcdHRoaXMudHJhbnNsYXRlKCBfb2Zmc2V0JDEueCwgX29mZnNldCQxLnksIF9vZmZzZXQkMS56ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmJvdW5kaW5nU3BoZXJlLmNlbnRlcjtcblx0XHR2YXIgcmFkaXVzID0gdGhpcy5ib3VuZGluZ1NwaGVyZS5yYWRpdXM7XG5cblx0XHR2YXIgcyA9IHJhZGl1cyA9PT0gMCA/IDEgOiAxLjAgLyByYWRpdXM7XG5cblx0XHR2YXIgbWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcblx0XHRtYXRyaXguc2V0KFxuXHRcdFx0cywgMCwgMCwgLSBzICogY2VudGVyLngsXG5cdFx0XHQwLCBzLCAwLCAtIHMgKiBjZW50ZXIueSxcblx0XHRcdDAsIDAsIHMsIC0gcyAqIGNlbnRlci56LFxuXHRcdFx0MCwgMCwgMCwgMVxuXHRcdCk7XG5cblx0XHR0aGlzLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbXB1dGVGYWNlTm9ybWFsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGNiID0gbmV3IFZlY3RvcjMoKSwgYWIgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Zm9yICggdmFyIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHR2YXIgdkEgPSB0aGlzLnZlcnRpY2VzWyBmYWNlLmEgXTtcblx0XHRcdHZhciB2QiA9IHRoaXMudmVydGljZXNbIGZhY2UuYiBdO1xuXHRcdFx0dmFyIHZDID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdGNiLnN1YlZlY3RvcnMoIHZDLCB2QiApO1xuXHRcdFx0YWIuc3ViVmVjdG9ycyggdkEsIHZCICk7XG5cdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0Y2Iubm9ybWFsaXplKCk7XG5cblx0XHRcdGZhY2Uubm9ybWFsLmNvcHkoIGNiICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlVmVydGV4Tm9ybWFsczogZnVuY3Rpb24gKCBhcmVhV2VpZ2h0ZWQgKSB7XG5cblx0XHRpZiAoIGFyZWFXZWlnaHRlZCA9PT0gdW5kZWZpbmVkICkgYXJlYVdlaWdodGVkID0gdHJ1ZTtcblxuXHRcdHZhciB2LCB2bCwgZiwgZmwsIGZhY2UsIHZlcnRpY2VzO1xuXG5cdFx0dmVydGljZXMgPSBuZXcgQXJyYXkoIHRoaXMudmVydGljZXMubGVuZ3RoICk7XG5cblx0XHRmb3IgKCB2ID0gMCwgdmwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgdiA8IHZsOyB2ICsrICkge1xuXG5cdFx0XHR2ZXJ0aWNlc1sgdiBdID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdGlmICggYXJlYVdlaWdodGVkICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFscyB3ZWlnaHRlZCBieSB0cmlhbmdsZSBhcmVhc1xuXHRcdFx0Ly8gaHR0cDovL3d3dy5pcXVpbGV6bGVzLm9yZy93d3cvYXJ0aWNsZXMvbm9ybWFscy9ub3JtYWxzLmh0bVxuXG5cdFx0XHR2YXIgdkEsIHZCLCB2Qztcblx0XHRcdHZhciBjYiA9IG5ldyBWZWN0b3IzKCksIGFiID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRcdHZBID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5hIF07XG5cdFx0XHRcdHZCID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5iIF07XG5cdFx0XHRcdHZDID0gdGhpcy52ZXJ0aWNlc1sgZmFjZS5jIF07XG5cblx0XHRcdFx0Y2Iuc3ViVmVjdG9ycyggdkMsIHZCICk7XG5cdFx0XHRcdGFiLnN1YlZlY3RvcnMoIHZBLCB2QiApO1xuXHRcdFx0XHRjYi5jcm9zcyggYWIgKTtcblxuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5hIF0uYWRkKCBjYiApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5iIF0uYWRkKCBjYiApO1xuXHRcdFx0XHR2ZXJ0aWNlc1sgZmFjZS5jIF0uYWRkKCBjYiApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYSBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYiBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblx0XHRcdFx0dmVydGljZXNbIGZhY2UuYyBdLmFkZCggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Zm9yICggdiA9IDAsIHZsID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IHYgPCB2bDsgdiArKyApIHtcblxuXHRcdFx0dmVydGljZXNbIHYgXS5ub3JtYWxpemUoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIGYgPSAwLCBmbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBmIDwgZmw7IGYgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRpZiAoIHZlcnRleE5vcm1hbHMubGVuZ3RoID09PSAzICkge1xuXG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDAgXS5jb3B5KCB2ZXJ0aWNlc1sgZmFjZS5hIF0gKTtcblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMSBdLmNvcHkoIHZlcnRpY2VzWyBmYWNlLmIgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0uY29weSggdmVydGljZXNbIGZhY2UuYyBdICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdID0gdmVydGljZXNbIGZhY2UuYSBdLmNsb25lKCk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXSA9IHZlcnRpY2VzWyBmYWNlLmIgXS5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSB2ZXJ0aWNlc1sgZmFjZS5jIF0uY2xvbmUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmZhY2VzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUZsYXRWZXJ0ZXhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZiwgZmwsIGZhY2U7XG5cblx0XHR0aGlzLmNvbXB1dGVGYWNlTm9ybWFscygpO1xuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0dmFyIHZlcnRleE5vcm1hbHMgPSBmYWNlLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdGlmICggdmVydGV4Tm9ybWFscy5sZW5ndGggPT09IDMgKSB7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFsc1sgMCBdLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHNbIDEgXS5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0uY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAwIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAxIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzWyAyIF0gPSBmYWNlLm5vcm1hbC5jbG9uZSgpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuZmFjZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0dGhpcy5ub3JtYWxzTmVlZFVwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fSxcblxuXHRjb21wdXRlTW9ycGhOb3JtYWxzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgaSwgaWwsIGYsIGZsLCBmYWNlO1xuXG5cdFx0Ly8gc2F2ZSBvcmlnaW5hbCBub3JtYWxzXG5cdFx0Ly8gLSBjcmVhdGUgdGVtcCB2YXJpYWJsZXMgb24gZmlyc3QgYWNjZXNzXG5cdFx0Ly8gICBvdGhlcndpc2UganVzdCBjb3B5IChmb3IgZmFzdGVyIHJlcGVhdGVkIGNhbGxzKVxuXG5cdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0ZmFjZSA9IHRoaXMuZmFjZXNbIGYgXTtcblxuXHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWwgKSB7XG5cblx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbCA9IGZhY2Uubm9ybWFsLmNsb25lKCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZmFjZS5fX29yaWdpbmFsRmFjZU5vcm1hbC5jb3B5KCBmYWNlLm5vcm1hbCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggISBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzICkgZmFjZS5fX29yaWdpbmFsVmVydGV4Tm9ybWFscyA9IFtdO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBmYWNlLnZlcnRleE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCAhIGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSApIHtcblxuXHRcdFx0XHRcdGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXSA9IGZhY2UudmVydGV4Tm9ybWFsc1sgaSBdLmNsb25lKCk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGZhY2UuX19vcmlnaW5hbFZlcnRleE5vcm1hbHNbIGkgXS5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIGkgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gdXNlIHRlbXAgZ2VvbWV0cnkgdG8gY29tcHV0ZSBmYWNlIGFuZCB2ZXJ0ZXggbm9ybWFscyBmb3IgZWFjaCBtb3JwaFxuXG5cdFx0dmFyIHRtcEdlbyA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdHRtcEdlby5mYWNlcyA9IHRoaXMuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gY3JlYXRlIG9uIGZpcnN0IGFjY2Vzc1xuXG5cdFx0XHRpZiAoICEgdGhpcy5tb3JwaE5vcm1hbHNbIGkgXSApIHtcblxuXHRcdFx0XHR0aGlzLm1vcnBoTm9ybWFsc1sgaSBdID0ge307XG5cdFx0XHRcdHRoaXMubW9ycGhOb3JtYWxzWyBpIF0uZmFjZU5vcm1hbHMgPSBbXTtcblx0XHRcdFx0dGhpcy5tb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdFx0dmFyIGRzdE5vcm1hbHNGYWNlID0gdGhpcy5tb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscztcblx0XHRcdFx0dmFyIGRzdE5vcm1hbHNWZXJ0ZXggPSB0aGlzLm1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHM7XG5cblx0XHRcdFx0dmFyIGZhY2VOb3JtYWwsIHZlcnRleE5vcm1hbHM7XG5cblx0XHRcdFx0Zm9yICggZiA9IDAsIGZsID0gdGhpcy5mYWNlcy5sZW5ndGg7IGYgPCBmbDsgZiArKyApIHtcblxuXHRcdFx0XHRcdGZhY2VOb3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0XHRcdHZlcnRleE5vcm1hbHMgPSB7IGE6IG5ldyBWZWN0b3IzKCksIGI6IG5ldyBWZWN0b3IzKCksIGM6IG5ldyBWZWN0b3IzKCkgfTtcblxuXHRcdFx0XHRcdGRzdE5vcm1hbHNGYWNlLnB1c2goIGZhY2VOb3JtYWwgKTtcblx0XHRcdFx0XHRkc3ROb3JtYWxzVmVydGV4LnB1c2goIHZlcnRleE5vcm1hbHMgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1vcnBoTm9ybWFscyA9IHRoaXMubW9ycGhOb3JtYWxzWyBpIF07XG5cblx0XHRcdC8vIHNldCB2ZXJ0aWNlcyB0byBtb3JwaCB0YXJnZXRcblxuXHRcdFx0dG1wR2VvLnZlcnRpY2VzID0gdGhpcy5tb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcztcblxuXHRcdFx0Ly8gY29tcHV0ZSBtb3JwaCBub3JtYWxzXG5cblx0XHRcdHRtcEdlby5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblx0XHRcdHRtcEdlby5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdFx0XHQvLyBzdG9yZSBtb3JwaCBub3JtYWxzXG5cblx0XHRcdHZhciBmYWNlTm9ybWFsLCB2ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBmIF07XG5cblx0XHRcdFx0ZmFjZU5vcm1hbCA9IG1vcnBoTm9ybWFscy5mYWNlTm9ybWFsc1sgZiBdO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzID0gbW9ycGhOb3JtYWxzLnZlcnRleE5vcm1hbHNbIGYgXTtcblxuXHRcdFx0XHRmYWNlTm9ybWFsLmNvcHkoIGZhY2Uubm9ybWFsICk7XG5cblx0XHRcdFx0dmVydGV4Tm9ybWFscy5hLmNvcHkoIGZhY2UudmVydGV4Tm9ybWFsc1sgMCBdICk7XG5cdFx0XHRcdHZlcnRleE5vcm1hbHMuYi5jb3B5KCBmYWNlLnZlcnRleE5vcm1hbHNbIDEgXSApO1xuXHRcdFx0XHR2ZXJ0ZXhOb3JtYWxzLmMuY29weSggZmFjZS52ZXJ0ZXhOb3JtYWxzWyAyIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gcmVzdG9yZSBvcmlnaW5hbCBub3JtYWxzXG5cblx0XHRmb3IgKCBmID0gMCwgZmwgPSB0aGlzLmZhY2VzLmxlbmd0aDsgZiA8IGZsOyBmICsrICkge1xuXG5cdFx0XHRmYWNlID0gdGhpcy5mYWNlc1sgZiBdO1xuXG5cdFx0XHRmYWNlLm5vcm1hbCA9IGZhY2UuX19vcmlnaW5hbEZhY2VOb3JtYWw7XG5cdFx0XHRmYWNlLnZlcnRleE5vcm1hbHMgPSBmYWNlLl9fb3JpZ2luYWxWZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Y29tcHV0ZUJvdW5kaW5nQm94OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuYm91bmRpbmdCb3ggPT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdCb3ggPSBuZXcgQm94MygpO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5ib3VuZGluZ0JveC5zZXRGcm9tUG9pbnRzKCB0aGlzLnZlcnRpY2VzICk7XG5cblx0fSxcblxuXHRjb21wdXRlQm91bmRpbmdTcGhlcmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ1NwaGVyZSA9IG5ldyBTcGhlcmUoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuYm91bmRpbmdTcGhlcmUuc2V0RnJvbVBvaW50cyggdGhpcy52ZXJ0aWNlcyApO1xuXG5cdH0sXG5cblx0bWVyZ2U6IGZ1bmN0aW9uICggZ2VvbWV0cnksIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHtcblxuXHRcdGlmICggISAoIGdlb21ldHJ5ICYmIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdlb21ldHJ5Lm1lcmdlKCk6IGdlb21ldHJ5IG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5HZW9tZXRyeS4nLCBnZW9tZXRyeSApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG5vcm1hbE1hdHJpeCxcblx0XHRcdHZlcnRleE9mZnNldCA9IHRoaXMudmVydGljZXMubGVuZ3RoLFxuXHRcdFx0dmVydGljZXMxID0gdGhpcy52ZXJ0aWNlcyxcblx0XHRcdHZlcnRpY2VzMiA9IGdlb21ldHJ5LnZlcnRpY2VzLFxuXHRcdFx0ZmFjZXMxID0gdGhpcy5mYWNlcyxcblx0XHRcdGZhY2VzMiA9IGdlb21ldHJ5LmZhY2VzLFxuXHRcdFx0Y29sb3JzMSA9IHRoaXMuY29sb3JzLFxuXHRcdFx0Y29sb3JzMiA9IGdlb21ldHJ5LmNvbG9ycztcblxuXHRcdGlmICggbWF0ZXJpYWxJbmRleE9mZnNldCA9PT0gdW5kZWZpbmVkICkgbWF0ZXJpYWxJbmRleE9mZnNldCA9IDA7XG5cblx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRub3JtYWxNYXRyaXggPSBuZXcgTWF0cml4MygpLmdldE5vcm1hbE1hdHJpeCggbWF0cml4ICk7XG5cblx0XHR9XG5cblx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHZlcnRpY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHZlcnRleCA9IHZlcnRpY2VzMlsgaSBdO1xuXG5cdFx0XHR2YXIgdmVydGV4Q29weSA9IHZlcnRleC5jbG9uZSgpO1xuXG5cdFx0XHRpZiAoIG1hdHJpeCAhPT0gdW5kZWZpbmVkICkgdmVydGV4Q29weS5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdFx0XHR2ZXJ0aWNlczEucHVzaCggdmVydGV4Q29weSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY29sb3JzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Y29sb3JzMS5wdXNoKCBjb2xvcnMyWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzMi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2UgPSBmYWNlczJbIGkgXSwgZmFjZUNvcHksIG5vcm1hbCwgY29sb3IsXG5cdFx0XHRcdGZhY2VWZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzLFxuXHRcdFx0XHRmYWNlVmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdGZhY2VDb3B5ID0gbmV3IEZhY2UzKCBmYWNlLmEgKyB2ZXJ0ZXhPZmZzZXQsIGZhY2UuYiArIHZlcnRleE9mZnNldCwgZmFjZS5jICsgdmVydGV4T2Zmc2V0ICk7XG5cdFx0XHRmYWNlQ29weS5ub3JtYWwuY29weSggZmFjZS5ub3JtYWwgKTtcblxuXHRcdFx0aWYgKCBub3JtYWxNYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRmYWNlQ29weS5ub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZmFjZVZlcnRleE5vcm1hbHMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0bm9ybWFsID0gZmFjZVZlcnRleE5vcm1hbHNbIGogXS5jbG9uZSgpO1xuXG5cdFx0XHRcdGlmICggbm9ybWFsTWF0cml4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRub3JtYWwuYXBwbHlNYXRyaXgzKCBub3JtYWxNYXRyaXggKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmFjZUNvcHkudmVydGV4Tm9ybWFscy5wdXNoKCBub3JtYWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmYWNlQ29weS5jb2xvci5jb3B5KCBmYWNlLmNvbG9yICk7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBmYWNlVmVydGV4Q29sb3JzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdGNvbG9yID0gZmFjZVZlcnRleENvbG9yc1sgaiBdO1xuXHRcdFx0XHRmYWNlQ29weS52ZXJ0ZXhDb2xvcnMucHVzaCggY29sb3IuY2xvbmUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGZhY2VDb3B5Lm1hdGVyaWFsSW5kZXggPSBmYWNlLm1hdGVyaWFsSW5kZXggKyBtYXRlcmlhbEluZGV4T2Zmc2V0O1xuXG5cdFx0XHRmYWNlczEucHVzaCggZmFjZUNvcHkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHV2c1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlVmVydGV4VXZzMiA9IGdlb21ldHJ5LmZhY2VWZXJ0ZXhVdnNbIGkgXTtcblxuXHRcdFx0aWYgKCB0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXSA9PT0gdW5kZWZpbmVkICkgdGhpcy5mYWNlVmVydGV4VXZzWyBpIF0gPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGZhY2VWZXJ0ZXhVdnMyLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciB1dnMyID0gZmFjZVZlcnRleFV2czJbIGogXSwgdXZzQ29weSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2wgPSB1dnMyLmxlbmd0aDsgayA8IGtsOyBrICsrICkge1xuXG5cdFx0XHRcdFx0dXZzQ29weS5wdXNoKCB1dnMyWyBrIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXS5wdXNoKCB1dnNDb3B5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdG1lcmdlTWVzaDogZnVuY3Rpb24gKCBtZXNoICkge1xuXG5cdFx0aWYgKCAhICggbWVzaCAmJiBtZXNoLmlzTWVzaCApICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnkubWVyZ2VNZXNoKCk6IG1lc2ggbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLk1lc2guJywgbWVzaCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtZXNoLm1hdHJpeEF1dG9VcGRhdGUgKSBtZXNoLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0dGhpcy5tZXJnZSggbWVzaC5nZW9tZXRyeSwgbWVzaC5tYXRyaXggKTtcblxuXHR9LFxuXG5cdC8qXG5cdCAqIENoZWNrcyBmb3IgZHVwbGljYXRlIHZlcnRpY2VzIHdpdGggaGFzaG1hcC5cblx0ICogRHVwbGljYXRlZCB2ZXJ0aWNlcyBhcmUgcmVtb3ZlZFxuXHQgKiBhbmQgZmFjZXMnIHZlcnRpY2VzIGFyZSB1cGRhdGVkLlxuXHQgKi9cblxuXHRtZXJnZVZlcnRpY2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmVydGljZXNNYXAgPSB7fTsgLy8gSGFzaG1hcCBmb3IgbG9va2luZyB1cCB2ZXJ0aWNlcyBieSBwb3NpdGlvbiBjb29yZGluYXRlcyAoYW5kIG1ha2luZyBzdXJlIHRoZXkgYXJlIHVuaXF1ZSlcblx0XHR2YXIgdW5pcXVlID0gW10sIGNoYW5nZXMgPSBbXTtcblxuXHRcdHZhciB2LCBrZXk7XG5cdFx0dmFyIHByZWNpc2lvblBvaW50cyA9IDQ7IC8vIG51bWJlciBvZiBkZWNpbWFsIHBvaW50cywgZS5nLiA0IGZvciBlcHNpbG9uIG9mIDAuMDAwMVxuXHRcdHZhciBwcmVjaXNpb24gPSBNYXRoLnBvdyggMTAsIHByZWNpc2lvblBvaW50cyApO1xuXHRcdHZhciBpLCBpbCwgZmFjZTtcblx0XHR2YXIgaW5kaWNlcywgaiwgamw7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2ID0gdGhpcy52ZXJ0aWNlc1sgaSBdO1xuXHRcdFx0a2V5ID0gTWF0aC5yb3VuZCggdi54ICogcHJlY2lzaW9uICkgKyAnXycgKyBNYXRoLnJvdW5kKCB2LnkgKiBwcmVjaXNpb24gKSArICdfJyArIE1hdGgucm91bmQoIHYueiAqIHByZWNpc2lvbiApO1xuXG5cdFx0XHRpZiAoIHZlcnRpY2VzTWFwWyBrZXkgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHZlcnRpY2VzTWFwWyBrZXkgXSA9IGk7XG5cdFx0XHRcdHVuaXF1ZS5wdXNoKCB0aGlzLnZlcnRpY2VzWyBpIF0gKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gdW5pcXVlLmxlbmd0aCAtIDE7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly9jb25zb2xlLmxvZygnRHVwbGljYXRlIHZlcnRleCBmb3VuZC4gJywgaSwgJyBjb3VsZCBiZSB1c2luZyAnLCB2ZXJ0aWNlc01hcFtrZXldKTtcblx0XHRcdFx0Y2hhbmdlc1sgaSBdID0gY2hhbmdlc1sgdmVydGljZXNNYXBbIGtleSBdIF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXG5cdFx0Ly8gaWYgZmFjZXMgYXJlIGNvbXBsZXRlbHkgZGVnZW5lcmF0ZSBhZnRlciBtZXJnaW5nIHZlcnRpY2VzLCB3ZVxuXHRcdC8vIGhhdmUgdG8gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgZ2VvbWV0cnkuXG5cdFx0dmFyIGZhY2VJbmRpY2VzVG9SZW1vdmUgPSBbXTtcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuZmFjZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGZhY2UgPSB0aGlzLmZhY2VzWyBpIF07XG5cblx0XHRcdGZhY2UuYSA9IGNoYW5nZXNbIGZhY2UuYSBdO1xuXHRcdFx0ZmFjZS5iID0gY2hhbmdlc1sgZmFjZS5iIF07XG5cdFx0XHRmYWNlLmMgPSBjaGFuZ2VzWyBmYWNlLmMgXTtcblxuXHRcdFx0aW5kaWNlcyA9IFsgZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyBdO1xuXG5cdFx0XHQvLyBpZiBhbnkgZHVwbGljYXRlIHZlcnRpY2VzIGFyZSBmb3VuZCBpbiBhIEZhY2UzXG5cdFx0XHQvLyB3ZSBoYXZlIHRvIHJlbW92ZSB0aGUgZmFjZSBhcyBub3RoaW5nIGNhbiBiZSBzYXZlZFxuXHRcdFx0Zm9yICggdmFyIG4gPSAwOyBuIDwgMzsgbiArKyApIHtcblxuXHRcdFx0XHRpZiAoIGluZGljZXNbIG4gXSA9PT0gaW5kaWNlc1sgKCBuICsgMSApICUgMyBdICkge1xuXG5cdFx0XHRcdFx0ZmFjZUluZGljZXNUb1JlbW92ZS5wdXNoKCBpICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmb3IgKCBpID0gZmFjZUluZGljZXNUb1JlbW92ZS5sZW5ndGggLSAxOyBpID49IDA7IGkgLS0gKSB7XG5cblx0XHRcdHZhciBpZHggPSBmYWNlSW5kaWNlc1RvUmVtb3ZlWyBpIF07XG5cblx0XHRcdHRoaXMuZmFjZXMuc3BsaWNlKCBpZHgsIDEgKTtcblxuXHRcdFx0Zm9yICggaiA9IDAsIGpsID0gdGhpcy5mYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmFjZVZlcnRleFV2c1sgaiBdLnNwbGljZSggaWR4LCAxICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFVzZSB1bmlxdWUgc2V0IG9mIHZlcnRpY2VzXG5cblx0XHR2YXIgZGlmZiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gdW5pcXVlLmxlbmd0aDtcblx0XHR0aGlzLnZlcnRpY2VzID0gdW5pcXVlO1xuXHRcdHJldHVybiBkaWZmO1xuXG5cdH0sXG5cblx0c2V0RnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIHBvaW50ID0gcG9pbnRzWyBpIF07XG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIG5ldyBWZWN0b3IzKCBwb2ludC54LCBwb2ludC55LCBwb2ludC56IHx8IDAgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzb3J0RmFjZXNCeU1hdGVyaWFsSW5kZXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBmYWNlcyA9IHRoaXMuZmFjZXM7XG5cdFx0dmFyIGxlbmd0aCA9IGZhY2VzLmxlbmd0aDtcblxuXHRcdC8vIHRhZyBmYWNlc1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRmYWNlc1sgaSBdLl9pZCA9IGk7XG5cblx0XHR9XG5cblx0XHQvLyBzb3J0IGZhY2VzXG5cblx0XHRmdW5jdGlvbiBtYXRlcmlhbEluZGV4U29ydCggYSwgYiApIHtcblxuXHRcdFx0cmV0dXJuIGEubWF0ZXJpYWxJbmRleCAtIGIubWF0ZXJpYWxJbmRleDtcblxuXHRcdH1cblxuXHRcdGZhY2VzLnNvcnQoIG1hdGVyaWFsSW5kZXhTb3J0ICk7XG5cblx0XHQvLyBzb3J0IHV2c1xuXG5cdFx0dmFyIHV2czEgPSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXTtcblx0XHR2YXIgdXZzMiA9IHRoaXMuZmFjZVZlcnRleFV2c1sgMSBdO1xuXG5cdFx0dmFyIG5ld1V2czEsIG5ld1V2czI7XG5cblx0XHRpZiAoIHV2czEgJiYgdXZzMS5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czEgPSBbXTtcblx0XHRpZiAoIHV2czIgJiYgdXZzMi5sZW5ndGggPT09IGxlbmd0aCApIG5ld1V2czIgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGlkID0gZmFjZXNbIGkgXS5faWQ7XG5cblx0XHRcdGlmICggbmV3VXZzMSApIG5ld1V2czEucHVzaCggdXZzMVsgaWQgXSApO1xuXHRcdFx0aWYgKCBuZXdVdnMyICkgbmV3VXZzMi5wdXNoKCB1dnMyWyBpZCBdICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5ld1V2czEgKSB0aGlzLmZhY2VWZXJ0ZXhVdnNbIDAgXSA9IG5ld1V2czE7XG5cdFx0aWYgKCBuZXdVdnMyICkgdGhpcy5mYWNlVmVydGV4VXZzWyAxIF0gPSBuZXdVdnMyO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IHtcblx0XHRcdG1ldGFkYXRhOiB7XG5cdFx0XHRcdHZlcnNpb246IDQuNSxcblx0XHRcdFx0dHlwZTogJ0dlb21ldHJ5Jyxcblx0XHRcdFx0Z2VuZXJhdG9yOiAnR2VvbWV0cnkudG9KU09OJ1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBzdGFuZGFyZCBHZW9tZXRyeSBzZXJpYWxpemF0aW9uXG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXHRcdGlmICggdGhpcy5uYW1lICE9PSAnJyApIGRhdGEubmFtZSA9IHRoaXMubmFtZTtcblxuXHRcdGlmICggdGhpcy5wYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHRcdFx0aWYgKCBwYXJhbWV0ZXJzWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkgZGF0YVsga2V5IF0gPSBwYXJhbWV0ZXJzWyBrZXkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblxuXHRcdH1cblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSB0aGlzLnZlcnRpY2VzWyBpIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgZmFjZXMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBub3JtYWxzSGFzaCA9IHt9O1xuXHRcdHZhciBjb2xvcnMgPSBbXTtcblx0XHR2YXIgY29sb3JzSGFzaCA9IHt9O1xuXHRcdHZhciB1dnMgPSBbXTtcblx0XHR2YXIgdXZzSGFzaCA9IHt9O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5mYWNlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gdGhpcy5mYWNlc1sgaSBdO1xuXG5cdFx0XHR2YXIgaGFzTWF0ZXJpYWwgPSB0cnVlO1xuXHRcdFx0dmFyIGhhc0ZhY2VVdiA9IGZhbHNlOyAvLyBkZXByZWNhdGVkXG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleFV2ID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXSAhPT0gdW5kZWZpbmVkO1xuXHRcdFx0dmFyIGhhc0ZhY2VOb3JtYWwgPSBmYWNlLm5vcm1hbC5sZW5ndGgoKSA+IDA7XG5cdFx0XHR2YXIgaGFzRmFjZVZlcnRleE5vcm1hbCA9IGZhY2UudmVydGV4Tm9ybWFscy5sZW5ndGggPiAwO1xuXHRcdFx0dmFyIGhhc0ZhY2VDb2xvciA9IGZhY2UuY29sb3IuciAhPT0gMSB8fCBmYWNlLmNvbG9yLmcgIT09IDEgfHwgZmFjZS5jb2xvci5iICE9PSAxO1xuXHRcdFx0dmFyIGhhc0ZhY2VWZXJ0ZXhDb2xvciA9IGZhY2UudmVydGV4Q29sb3JzLmxlbmd0aCA+IDA7XG5cblx0XHRcdHZhciBmYWNlVHlwZSA9IDA7XG5cblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMCwgMCApOyAvLyBpc1F1YWRcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMSwgaGFzTWF0ZXJpYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgMiwgaGFzRmFjZVV2ICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDMsIGhhc0ZhY2VWZXJ0ZXhVdiApO1xuXHRcdFx0ZmFjZVR5cGUgPSBzZXRCaXQoIGZhY2VUeXBlLCA0LCBoYXNGYWNlTm9ybWFsICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDUsIGhhc0ZhY2VWZXJ0ZXhOb3JtYWwgKTtcblx0XHRcdGZhY2VUeXBlID0gc2V0Qml0KCBmYWNlVHlwZSwgNiwgaGFzRmFjZUNvbG9yICk7XG5cdFx0XHRmYWNlVHlwZSA9IHNldEJpdCggZmFjZVR5cGUsIDcsIGhhc0ZhY2VWZXJ0ZXhDb2xvciApO1xuXG5cdFx0XHRmYWNlcy5wdXNoKCBmYWNlVHlwZSApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5hLCBmYWNlLmIsIGZhY2UuYyApO1xuXHRcdFx0ZmFjZXMucHVzaCggZmFjZS5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdGlmICggaGFzRmFjZVZlcnRleFV2ICkge1xuXG5cdFx0XHRcdHZhciBmYWNlVmVydGV4VXZzID0gdGhpcy5mYWNlVmVydGV4VXZzWyAwIF1bIGkgXTtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDEgXSApLFxuXHRcdFx0XHRcdGdldFV2SW5kZXgoIGZhY2VWZXJ0ZXhVdnNbIDIgXSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlTm9ybWFsICkge1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goIGdldE5vcm1hbEluZGV4KCBmYWNlLm5vcm1hbCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNGYWNlVmVydGV4Tm9ybWFsICkge1xuXG5cdFx0XHRcdHZhciB2ZXJ0ZXhOb3JtYWxzID0gZmFjZS52ZXJ0ZXhOb3JtYWxzO1xuXG5cdFx0XHRcdGZhY2VzLnB1c2goXG5cdFx0XHRcdFx0Z2V0Tm9ybWFsSW5kZXgoIHZlcnRleE5vcm1hbHNbIDAgXSApLFxuXHRcdFx0XHRcdGdldE5vcm1hbEluZGV4KCB2ZXJ0ZXhOb3JtYWxzWyAxIF0gKSxcblx0XHRcdFx0XHRnZXROb3JtYWxJbmRleCggdmVydGV4Tm9ybWFsc1sgMiBdIClcblx0XHRcdFx0KTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VDb2xvciApIHtcblxuXHRcdFx0XHRmYWNlcy5wdXNoKCBnZXRDb2xvckluZGV4KCBmYWNlLmNvbG9yICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc0ZhY2VWZXJ0ZXhDb2xvciApIHtcblxuXHRcdFx0XHR2YXIgdmVydGV4Q29sb3JzID0gZmFjZS52ZXJ0ZXhDb2xvcnM7XG5cblx0XHRcdFx0ZmFjZXMucHVzaChcblx0XHRcdFx0XHRnZXRDb2xvckluZGV4KCB2ZXJ0ZXhDb2xvcnNbIDAgXSApLFxuXHRcdFx0XHRcdGdldENvbG9ySW5kZXgoIHZlcnRleENvbG9yc1sgMSBdICksXG5cdFx0XHRcdFx0Z2V0Q29sb3JJbmRleCggdmVydGV4Q29sb3JzWyAyIF0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBzZXRCaXQoIHZhbHVlLCBwb3NpdGlvbiwgZW5hYmxlZCApIHtcblxuXHRcdFx0cmV0dXJuIGVuYWJsZWQgPyB2YWx1ZSB8ICggMSA8PCBwb3NpdGlvbiApIDogdmFsdWUgJiAoIH4gKCAxIDw8IHBvc2l0aW9uICkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE5vcm1hbEluZGV4KCBub3JtYWwgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gbm9ybWFsLngudG9TdHJpbmcoKSArIG5vcm1hbC55LnRvU3RyaW5nKCkgKyBub3JtYWwuei50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIG5vcm1hbHNIYXNoWyBoYXNoIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gbm9ybWFsc0hhc2hbIGhhc2ggXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRub3JtYWxzSGFzaFsgaGFzaCBdID0gbm9ybWFscy5sZW5ndGggLyAzO1xuXHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdHJldHVybiBub3JtYWxzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0Q29sb3JJbmRleCggY29sb3IgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gY29sb3Iuci50b1N0cmluZygpICsgY29sb3IuZy50b1N0cmluZygpICsgY29sb3IuYi50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIGNvbG9yc0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiBjb2xvcnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0Y29sb3JzSGFzaFsgaGFzaCBdID0gY29sb3JzLmxlbmd0aDtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5nZXRIZXgoKSApO1xuXG5cdFx0XHRyZXR1cm4gY29sb3JzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0VXZJbmRleCggdXYgKSB7XG5cblx0XHRcdHZhciBoYXNoID0gdXYueC50b1N0cmluZygpICsgdXYueS50b1N0cmluZygpO1xuXG5cdFx0XHRpZiAoIHV2c0hhc2hbIGhhc2ggXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiB1dnNIYXNoWyBoYXNoIF07XG5cblx0XHRcdH1cblxuXHRcdFx0dXZzSGFzaFsgaGFzaCBdID0gdXZzLmxlbmd0aCAvIDI7XG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0XHRyZXR1cm4gdXZzSGFzaFsgaGFzaCBdO1xuXG5cdFx0fVxuXG5cdFx0ZGF0YS5kYXRhID0ge307XG5cblx0XHRkYXRhLmRhdGEudmVydGljZXMgPSB2ZXJ0aWNlcztcblx0XHRkYXRhLmRhdGEubm9ybWFscyA9IG5vcm1hbHM7XG5cdFx0aWYgKCBjb2xvcnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS5jb2xvcnMgPSBjb2xvcnM7XG5cdFx0aWYgKCB1dnMubGVuZ3RoID4gMCApIGRhdGEuZGF0YS51dnMgPSBbIHV2cyBdOyAvLyB0ZW1wb3JhbCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5cdFx0ZGF0YS5kYXRhLmZhY2VzID0gZmFjZXM7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvKlxuXHRcdCAvLyBIYW5kbGUgcHJpbWl0aXZlc1xuXG5cdFx0IHZhciBwYXJhbWV0ZXJzID0gdGhpcy5wYXJhbWV0ZXJzO1xuXG5cdFx0IGlmICggcGFyYW1ldGVycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0IHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdCBmb3IgKCB2YXIga2V5IGluIHBhcmFtZXRlcnMgKSB7XG5cblx0XHQgdmFsdWVzLnB1c2goIHBhcmFtZXRlcnNbIGtleSBdICk7XG5cblx0XHQgfVxuXG5cdFx0IHZhciBnZW9tZXRyeSA9IE9iamVjdC5jcmVhdGUoIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlICk7XG5cdFx0IHRoaXMuY29uc3RydWN0b3IuYXBwbHkoIGdlb21ldHJ5LCB2YWx1ZXMgKTtcblx0XHQgcmV0dXJuIGdlb21ldHJ5O1xuXG5cdFx0IH1cblxuXHRcdCByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cdFx0ICovXG5cblx0XHRyZXR1cm4gbmV3IEdlb21ldHJ5KCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR2YXIgaSwgaWwsIGosIGpsLCBrLCBrbDtcblxuXHRcdC8vIHJlc2V0XG5cblx0XHR0aGlzLnZlcnRpY2VzID0gW107XG5cdFx0dGhpcy5jb2xvcnMgPSBbXTtcblx0XHR0aGlzLmZhY2VzID0gW107XG5cdFx0dGhpcy5mYWNlVmVydGV4VXZzID0gW1tdXTtcblx0XHR0aGlzLm1vcnBoVGFyZ2V0cyA9IFtdO1xuXHRcdHRoaXMubW9ycGhOb3JtYWxzID0gW107XG5cdFx0dGhpcy5za2luV2VpZ2h0cyA9IFtdO1xuXHRcdHRoaXMuc2tpbkluZGljZXMgPSBbXTtcblx0XHR0aGlzLmxpbmVEaXN0YW5jZXMgPSBbXTtcblx0XHR0aGlzLmJvdW5kaW5nQm94ID0gbnVsbDtcblx0XHR0aGlzLmJvdW5kaW5nU3BoZXJlID0gbnVsbDtcblxuXHRcdC8vIG5hbWVcblxuXHRcdHRoaXMubmFtZSA9IHNvdXJjZS5uYW1lO1xuXG5cdFx0Ly8gdmVydGljZXNcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IHNvdXJjZS52ZXJ0aWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnZlcnRpY2VzLnB1c2goIHZlcnRpY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29sb3JzXG5cblx0XHR2YXIgY29sb3JzID0gc291cmNlLmNvbG9ycztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbG9ycy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2xvcnMucHVzaCggY29sb3JzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZXNcblxuXHRcdHZhciBmYWNlcyA9IHNvdXJjZS5mYWNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmZhY2VzLnB1c2goIGZhY2VzWyBpIF0uY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZmFjZSB2ZXJ0ZXggdXZzXG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBzb3VyY2UuZmFjZVZlcnRleFV2cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGZhY2VWZXJ0ZXhVdnMgPSBzb3VyY2UuZmFjZVZlcnRleFV2c1sgaSBdO1xuXG5cdFx0XHRpZiAoIHRoaXMuZmFjZVZlcnRleFV2c1sgaSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGhpcy5mYWNlVmVydGV4VXZzWyBpIF0gPSBbXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBqID0gMCwgamwgPSBmYWNlVmVydGV4VXZzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHZhciB1dnMgPSBmYWNlVmVydGV4VXZzWyBqIF0sIHV2c0NvcHkgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBrID0gMCwga2wgPSB1dnMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgdXYgPSB1dnNbIGsgXTtcblxuXHRcdFx0XHRcdHV2c0NvcHkucHVzaCggdXYuY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLmZhY2VWZXJ0ZXhVdnNbIGkgXS5wdXNoKCB1dnNDb3B5ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIG1vcnBoIHRhcmdldHNcblxuXHRcdHZhciBtb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSB7fTtcblx0XHRcdG1vcnBoVGFyZ2V0Lm5hbWUgPSBtb3JwaFRhcmdldHNbIGkgXS5uYW1lO1xuXG5cdFx0XHQvLyB2ZXJ0aWNlc1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXQudmVydGljZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS52ZXJ0aWNlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoVGFyZ2V0LnZlcnRpY2VzLnB1c2goIG1vcnBoVGFyZ2V0c1sgaSBdLnZlcnRpY2VzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBub3JtYWxzXG5cblx0XHRcdGlmICggbW9ycGhUYXJnZXRzWyBpIF0ubm9ybWFscyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0Lm5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdFx0bW9ycGhUYXJnZXQubm9ybWFscy5wdXNoKCBtb3JwaFRhcmdldHNbIGkgXS5ub3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoVGFyZ2V0cy5wdXNoKCBtb3JwaFRhcmdldCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gbW9ycGggbm9ybWFsc1xuXG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBtb3JwaE5vcm1hbHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBtb3JwaE5vcm1hbCA9IHt9O1xuXG5cdFx0XHQvLyB2ZXJ0ZXggbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLnZlcnRleE5vcm1hbHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRtb3JwaE5vcm1hbC52ZXJ0ZXhOb3JtYWxzID0gW107XG5cblx0XHRcdFx0Zm9yICggaiA9IDAsIGpsID0gbW9ycGhOb3JtYWxzWyBpIF0udmVydGV4Tm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzcmNWZXJ0ZXhOb3JtYWwgPSBtb3JwaE5vcm1hbHNbIGkgXS52ZXJ0ZXhOb3JtYWxzWyBqIF07XG5cdFx0XHRcdFx0dmFyIGRlc3RWZXJ0ZXhOb3JtYWwgPSB7fTtcblxuXHRcdFx0XHRcdGRlc3RWZXJ0ZXhOb3JtYWwuYSA9IHNyY1ZlcnRleE5vcm1hbC5hLmNsb25lKCk7XG5cdFx0XHRcdFx0ZGVzdFZlcnRleE5vcm1hbC5iID0gc3JjVmVydGV4Tm9ybWFsLmIuY2xvbmUoKTtcblx0XHRcdFx0XHRkZXN0VmVydGV4Tm9ybWFsLmMgPSBzcmNWZXJ0ZXhOb3JtYWwuYy5jbG9uZSgpO1xuXG5cdFx0XHRcdFx0bW9ycGhOb3JtYWwudmVydGV4Tm9ybWFscy5wdXNoKCBkZXN0VmVydGV4Tm9ybWFsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGZhY2Ugbm9ybWFsc1xuXG5cdFx0XHRpZiAoIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bW9ycGhOb3JtYWwuZmFjZU5vcm1hbHMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCBqID0gMCwgamwgPSBtb3JwaE5vcm1hbHNbIGkgXS5mYWNlTm9ybWFscy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdG1vcnBoTm9ybWFsLmZhY2VOb3JtYWxzLnB1c2goIG1vcnBoTm9ybWFsc1sgaSBdLmZhY2VOb3JtYWxzWyBqIF0uY2xvbmUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1vcnBoTm9ybWFscy5wdXNoKCBtb3JwaE5vcm1hbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2tpbiB3ZWlnaHRzXG5cblx0XHR2YXIgc2tpbldlaWdodHMgPSBzb3VyY2Uuc2tpbldlaWdodHM7XG5cblx0XHRmb3IgKCBpID0gMCwgaWwgPSBza2luV2VpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5za2luV2VpZ2h0cy5wdXNoKCBza2luV2VpZ2h0c1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdC8vIHNraW4gaW5kaWNlc1xuXG5cdFx0dmFyIHNraW5JbmRpY2VzID0gc291cmNlLnNraW5JbmRpY2VzO1xuXG5cdFx0Zm9yICggaSA9IDAsIGlsID0gc2tpbkluZGljZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuc2tpbkluZGljZXMucHVzaCggc2tpbkluZGljZXNbIGkgXS5jbG9uZSgpICk7XG5cblx0XHR9XG5cblx0XHQvLyBsaW5lIGRpc3RhbmNlc1xuXG5cdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBzb3VyY2UubGluZURpc3RhbmNlcztcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IGxpbmVEaXN0YW5jZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMubGluZURpc3RhbmNlcy5wdXNoKCBsaW5lRGlzdGFuY2VzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIGJvdW5kaW5nIGJveFxuXG5cdFx0dmFyIGJvdW5kaW5nQm94ID0gc291cmNlLmJvdW5kaW5nQm94O1xuXG5cdFx0aWYgKCBib3VuZGluZ0JveCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5ib3VuZGluZ0JveCA9IGJvdW5kaW5nQm94LmNsb25lKCk7XG5cblx0XHR9XG5cblx0XHQvLyBib3VuZGluZyBzcGhlcmVcblxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IHNvdXJjZS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuYm91bmRpbmdTcGhlcmUgPSBib3VuZGluZ1NwaGVyZS5jbG9uZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGZsYWdzXG5cblx0XHR0aGlzLmVsZW1lbnRzTmVlZFVwZGF0ZSA9IHNvdXJjZS5lbGVtZW50c05lZWRVcGRhdGU7XG5cdFx0dGhpcy52ZXJ0aWNlc05lZWRVcGRhdGUgPSBzb3VyY2UudmVydGljZXNOZWVkVXBkYXRlO1xuXHRcdHRoaXMudXZzTmVlZFVwZGF0ZSA9IHNvdXJjZS51dnNOZWVkVXBkYXRlO1xuXHRcdHRoaXMubm9ybWFsc05lZWRVcGRhdGUgPSBzb3VyY2Uubm9ybWFsc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5jb2xvcnNOZWVkVXBkYXRlID0gc291cmNlLmNvbG9yc05lZWRVcGRhdGU7XG5cdFx0dGhpcy5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZSA9IHNvdXJjZS5saW5lRGlzdGFuY2VzTmVlZFVwZGF0ZTtcblx0XHR0aGlzLmdyb3Vwc05lZWRVcGRhdGUgPSBzb3VyY2UuZ3JvdXBzTmVlZFVwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNwb3NlJyB9ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gQm94R2VvbWV0cnlcblxuY2xhc3MgQm94R2VvbWV0cnkgZXh0ZW5kcyBHZW9tZXRyeSB7XG5cblx0Y29uc3RydWN0b3IoIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgZGVwdGhTZWdtZW50cyApIHtcblxuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLnR5cGUgPSAnQm94R2VvbWV0cnknO1xuXG5cdFx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdFx0d2lkdGg6IHdpZHRoLFxuXHRcdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0XHRkZXB0aDogZGVwdGgsXG5cdFx0XHR3aWR0aFNlZ21lbnRzOiB3aWR0aFNlZ21lbnRzLFxuXHRcdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdFx0ZGVwdGhTZWdtZW50czogZGVwdGhTZWdtZW50c1xuXHRcdH07XG5cblx0XHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEJveEJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIGRlcHRoU2VnbWVudHMgKSApO1xuXHRcdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG5cdH1cblxufVxuXG4vLyBCb3hCdWZmZXJHZW9tZXRyeVxuXG5jbGFzcyBCb3hCdWZmZXJHZW9tZXRyeSBleHRlbmRzIEJ1ZmZlckdlb21ldHJ5IHtcblxuXHRjb25zdHJ1Y3Rvciggd2lkdGgsIGhlaWdodCwgZGVwdGgsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzICkge1xuXG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMudHlwZSA9ICdCb3hCdWZmZXJHZW9tZXRyeSc7XG5cblx0XHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0XHR3aWR0aDogd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGhlaWdodCxcblx0XHRcdGRlcHRoOiBkZXB0aCxcblx0XHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRkZXB0aFNlZ21lbnRzOiBkZXB0aFNlZ21lbnRzXG5cdFx0fTtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR3aWR0aCA9IHdpZHRoIHx8IDE7XG5cdFx0aGVpZ2h0ID0gaGVpZ2h0IHx8IDE7XG5cdFx0ZGVwdGggPSBkZXB0aCB8fCAxO1xuXG5cdFx0Ly8gc2VnbWVudHNcblxuXHRcdHdpZHRoU2VnbWVudHMgPSBNYXRoLmZsb29yKCB3aWR0aFNlZ21lbnRzICkgfHwgMTtcblx0XHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblx0XHRkZXB0aFNlZ21lbnRzID0gTWF0aC5mbG9vciggZGVwdGhTZWdtZW50cyApIHx8IDE7XG5cblx0XHQvLyBidWZmZXJzXG5cblx0XHR2YXIgaW5kaWNlcyA9IFtdO1xuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHRcdHZhciBub3JtYWxzID0gW107XG5cdFx0dmFyIHV2cyA9IFtdO1xuXG5cdFx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdFx0dmFyIG51bWJlck9mVmVydGljZXMgPSAwO1xuXHRcdHZhciBncm91cFN0YXJ0ID0gMDtcblxuXHRcdC8vIGJ1aWxkIGVhY2ggc2lkZSBvZiB0aGUgYm94IGdlb21ldHJ5XG5cblx0XHRidWlsZFBsYW5lKCAneicsICd5JywgJ3gnLCAtIDEsIC0gMSwgZGVwdGgsIGhlaWdodCwgd2lkdGgsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCAwICk7IC8vIHB4XG5cdFx0YnVpbGRQbGFuZSggJ3onLCAneScsICd4JywgMSwgLSAxLCBkZXB0aCwgaGVpZ2h0LCAtIHdpZHRoLCBkZXB0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgMSApOyAvLyBueFxuXHRcdGJ1aWxkUGxhbmUoICd4JywgJ3onLCAneScsIDEsIDEsIHdpZHRoLCBkZXB0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAyICk7IC8vIHB5XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneicsICd5JywgMSwgLSAxLCB3aWR0aCwgZGVwdGgsIC0gaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBkZXB0aFNlZ21lbnRzLCAzICk7IC8vIG55XG5cdFx0YnVpbGRQbGFuZSggJ3gnLCAneScsICd6JywgMSwgLSAxLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDQgKTsgLy8gcHpcblx0XHRidWlsZFBsYW5lKCAneCcsICd5JywgJ3onLCAtIDEsIC0gMSwgd2lkdGgsIGhlaWdodCwgLSBkZXB0aCwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIDUgKTsgLy8gbnpcblxuXHRcdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0XHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdFx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdFx0ZnVuY3Rpb24gYnVpbGRQbGFuZSggdSwgdiwgdywgdWRpciwgdmRpciwgd2lkdGgsIGhlaWdodCwgZGVwdGgsIGdyaWRYLCBncmlkWSwgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRcdFx0dmFyIHNlZ21lbnRXaWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdFx0XHR2YXIgc2VnbWVudEhlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdFx0XHR2YXIgd2lkdGhIYWxmID0gd2lkdGggLyAyO1xuXHRcdFx0dmFyIGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyO1xuXHRcdFx0dmFyIGRlcHRoSGFsZiA9IGRlcHRoIC8gMjtcblxuXHRcdFx0dmFyIGdyaWRYMSA9IGdyaWRYICsgMTtcblx0XHRcdHZhciBncmlkWTEgPSBncmlkWSArIDE7XG5cblx0XHRcdHZhciB2ZXJ0ZXhDb3VudGVyID0gMDtcblx0XHRcdHZhciBncm91cENvdW50ID0gMDtcblxuXHRcdFx0dmFyIGl4LCBpeTtcblxuXHRcdFx0dmFyIHZlY3RvciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdFx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZMTsgaXkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmO1xuXG5cdFx0XHRcdGZvciAoIGl4ID0gMDsgaXggPCBncmlkWDE7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIHggPSBpeCAqIHNlZ21lbnRXaWR0aCAtIHdpZHRoSGFsZjtcblxuXHRcdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0XHR2ZWN0b3JbIHUgXSA9IHggKiB1ZGlyO1xuXHRcdFx0XHRcdHZlY3RvclsgdiBdID0geSAqIHZkaXI7XG5cdFx0XHRcdFx0dmVjdG9yWyB3IF0gPSBkZXB0aEhhbGY7XG5cblx0XHRcdFx0XHQvLyBub3cgYXBwbHkgdmVjdG9yIHRvIHZlcnRleCBidWZmZXJcblxuXHRcdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlY3Rvci54LCB2ZWN0b3IueSwgdmVjdG9yLnogKTtcblxuXHRcdFx0XHRcdC8vIHNldCB2YWx1ZXMgdG8gY29ycmVjdCB2ZWN0b3IgY29tcG9uZW50XG5cblx0XHRcdFx0XHR2ZWN0b3JbIHUgXSA9IDA7XG5cdFx0XHRcdFx0dmVjdG9yWyB2IF0gPSAwO1xuXHRcdFx0XHRcdHZlY3RvclsgdyBdID0gZGVwdGggPiAwID8gMSA6IC0gMTtcblxuXHRcdFx0XHRcdC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gbm9ybWFsIGJ1ZmZlclxuXG5cdFx0XHRcdFx0bm9ybWFscy5wdXNoKCB2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56ICk7XG5cblx0XHRcdFx0XHQvLyB1dnNcblxuXHRcdFx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHRcdFx0dXZzLnB1c2goIDEgLSAoIGl5IC8gZ3JpZFkgKSApO1xuXG5cdFx0XHRcdFx0Ly8gY291bnRlcnNcblxuXHRcdFx0XHRcdHZlcnRleENvdW50ZXIgKz0gMTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gaW5kaWNlc1xuXG5cdFx0XHQvLyAxLiB5b3UgbmVlZCB0aHJlZSBpbmRpY2VzIHRvIGRyYXcgYSBzaW5nbGUgZmFjZVxuXHRcdFx0Ly8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcblx0XHRcdC8vIDMuIHNvIHdlIG5lZWQgdG8gZ2VuZXJhdGUgc2l4ICgyKjMpIGluZGljZXMgcGVyIHNlZ21lbnRcblxuXHRcdFx0Zm9yICggaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSArKyApIHtcblxuXHRcdFx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFg7IGl4ICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGEgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiBpeTtcblx0XHRcdFx0XHR2YXIgYiA9IG51bWJlck9mVmVydGljZXMgKyBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdFx0dmFyIGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHRcdFx0dmFyIGQgPSBudW1iZXJPZlZlcnRpY2VzICsgKCBpeCArIDEgKSArIGdyaWRYMSAqIGl5O1xuXG5cdFx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0XHRcdFx0Ly8gaW5jcmVhc2UgY291bnRlclxuXG5cdFx0XHRcdFx0Z3JvdXBDb3VudCArPSA2O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgbWF0ZXJpYWxJbmRleCApO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdFx0Z3JvdXBTdGFydCArPSBncm91cENvdW50O1xuXG5cdFx0XHQvLyB1cGRhdGUgdG90YWwgbnVtYmVyIG9mIHZlcnRpY2VzXG5cblx0XHRcdG51bWJlck9mVmVydGljZXMgKz0gdmVydGV4Q291bnRlcjtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBVbmlmb3JtIFV0aWxpdGllc1xuICovXG5cbmZ1bmN0aW9uIGNsb25lVW5pZm9ybXMoIHNyYyApIHtcblxuXHR2YXIgZHN0ID0ge307XG5cblx0Zm9yICggdmFyIHUgaW4gc3JjICkge1xuXG5cdFx0ZHN0WyB1IF0gPSB7fTtcblxuXHRcdGZvciAoIHZhciBwIGluIHNyY1sgdSBdICkge1xuXG5cdFx0XHR2YXIgcHJvcGVydHkgPSBzcmNbIHUgXVsgcCBdO1xuXG5cdFx0XHRpZiAoIHByb3BlcnR5ICYmICggcHJvcGVydHkuaXNDb2xvciB8fFxuXHRcdFx0XHRwcm9wZXJ0eS5pc01hdHJpeDMgfHwgcHJvcGVydHkuaXNNYXRyaXg0IHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzVmVjdG9yMiB8fCBwcm9wZXJ0eS5pc1ZlY3RvcjMgfHwgcHJvcGVydHkuaXNWZWN0b3I0IHx8XG5cdFx0XHRcdHByb3BlcnR5LmlzVGV4dHVyZSApICkge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5jbG9uZSgpO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCBwcm9wZXJ0eSApICkge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eS5zbGljZSgpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGRzdFsgdSBdWyBwIF0gPSBwcm9wZXJ0eTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZHN0O1xuXG59XG5cbmZ1bmN0aW9uIG1lcmdlVW5pZm9ybXMoIHVuaWZvcm1zICkge1xuXG5cdHZhciBtZXJnZWQgPSB7fTtcblxuXHRmb3IgKCB2YXIgdSA9IDA7IHUgPCB1bmlmb3Jtcy5sZW5ndGg7IHUgKysgKSB7XG5cblx0XHR2YXIgdG1wID0gY2xvbmVVbmlmb3JtcyggdW5pZm9ybXNbIHUgXSApO1xuXG5cdFx0Zm9yICggdmFyIHAgaW4gdG1wICkge1xuXG5cdFx0XHRtZXJnZWRbIHAgXSA9IHRtcFsgcCBdO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gbWVyZ2VkO1xuXG59XG5cbi8vIExlZ2FjeVxuXG52YXIgVW5pZm9ybXNVdGlscyA9IHsgY2xvbmU6IGNsb25lVW5pZm9ybXMsIG1lcmdlOiBtZXJnZVVuaWZvcm1zIH07XG5cbnZhciBkZWZhdWx0X3ZlcnRleCA9IFwidm9pZCBtYWluKCkge1xcblxcdGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTtcXG59XCI7XG5cbnZhciBkZWZhdWx0X2ZyYWdtZW50ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggMS4wLCAwLjAsIDAuMCwgMS4wICk7XFxufVwiO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBkZWZpbmVzOiB7IFwibGFiZWxcIiA6IFwidmFsdWVcIiB9LFxuICogIHVuaWZvcm1zOiB7IFwicGFyYW1ldGVyMVwiOiB7IHZhbHVlOiAxLjAgfSwgXCJwYXJhbWV0ZXIyXCI6IHsgdmFsdWUyOiAyIH0gfSxcbiAqXG4gKiAgZnJhZ21lbnRTaGFkZXI6IDxzdHJpbmc+LFxuICogIHZlcnRleFNoYWRlcjogPHN0cmluZz4sXG4gKlxuICogIHdpcmVmcmFtZTogPGJvb2xlYW4+LFxuICogIHdpcmVmcmFtZUxpbmV3aWR0aDogPGZsb2F0PixcbiAqXG4gKiAgbGlnaHRzOiA8Ym9vbD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBTaGFkZXJNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NoYWRlck1hdGVyaWFsJztcblxuXHR0aGlzLmRlZmluZXMgPSB7fTtcblx0dGhpcy51bmlmb3JtcyA9IHt9O1xuXG5cdHRoaXMudmVydGV4U2hhZGVyID0gZGVmYXVsdF92ZXJ0ZXg7XG5cdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBkZWZhdWx0X2ZyYWdtZW50O1xuXG5cdHRoaXMubGluZXdpZHRoID0gMTtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy5mb2cgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBmb2dcblx0dGhpcy5saWdodHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBzY2VuZSBsaWdodHNcblx0dGhpcy5jbGlwcGluZyA9IGZhbHNlOyAvLyBzZXQgdG8gdXNlIHVzZXItZGVmaW5lZCBjbGlwcGluZyBwbGFuZXNcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7IC8vIHNldCB0byB1c2Ugc2tpbm5pbmcgYXR0cmlidXRlIHN0cmVhbXNcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTsgLy8gc2V0IHRvIHVzZSBtb3JwaCB0YXJnZXRzXG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7IC8vIHNldCB0byB1c2UgbW9ycGggbm9ybWFsc1xuXG5cdHRoaXMuZXh0ZW5zaW9ucyA9IHtcblx0XHRkZXJpdmF0aXZlczogZmFsc2UsIC8vIHNldCB0byB1c2UgZGVyaXZhdGl2ZXNcblx0XHRmcmFnRGVwdGg6IGZhbHNlLCAvLyBzZXQgdG8gdXNlIGZyYWdtZW50IGRlcHRoIHZhbHVlc1xuXHRcdGRyYXdCdWZmZXJzOiBmYWxzZSwgLy8gc2V0IHRvIHVzZSBkcmF3IGJ1ZmZlcnNcblx0XHRzaGFkZXJUZXh0dXJlTE9EOiBmYWxzZSAvLyBzZXQgdG8gdXNlIHNoYWRlciB0ZXh0dXJlIExPRFxuXHR9O1xuXG5cdC8vIFdoZW4gcmVuZGVyZWQgZ2VvbWV0cnkgZG9lc24ndCBpbmNsdWRlIHRoZXNlIGF0dHJpYnV0ZXMgYnV0IHRoZSBtYXRlcmlhbCBkb2VzLFxuXHQvLyB1c2UgdGhlc2UgZGVmYXVsdCB2YWx1ZXMgaW4gV2ViR0wuIFRoaXMgYXZvaWRzIGVycm9ycyB3aGVuIGJ1ZmZlciBkYXRhIGlzIG1pc3NpbmcuXG5cdHRoaXMuZGVmYXVsdEF0dHJpYnV0ZVZhbHVlcyA9IHtcblx0XHQnY29sb3InOiBbIDEsIDEsIDEgXSxcblx0XHQndXYnOiBbIDAsIDAgXSxcblx0XHQndXYyJzogWyAwLCAwIF1cblx0fTtcblxuXHR0aGlzLmluZGV4MEF0dHJpYnV0ZU5hbWUgPSB1bmRlZmluZWQ7XG5cdHRoaXMudW5pZm9ybXNOZWVkVXBkYXRlID0gZmFsc2U7XG5cblx0aWYgKCBwYXJhbWV0ZXJzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIHBhcmFtZXRlcnMuYXR0cmlidXRlcyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2hhZGVyTWF0ZXJpYWw6IGF0dHJpYnV0ZXMgc2hvdWxkIG5vdyBiZSBkZWZpbmVkIGluIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxuXHR9XG5cbn1cblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkZXJNYXRlcmlhbDtcblxuU2hhZGVyTWF0ZXJpYWwucHJvdG90eXBlLmlzU2hhZGVyTWF0ZXJpYWwgPSB0cnVlO1xuXG5TaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBzb3VyY2UuZnJhZ21lbnRTaGFkZXI7XG5cdHRoaXMudmVydGV4U2hhZGVyID0gc291cmNlLnZlcnRleFNoYWRlcjtcblxuXHR0aGlzLnVuaWZvcm1zID0gY2xvbmVVbmlmb3Jtcyggc291cmNlLnVuaWZvcm1zICk7XG5cblx0dGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbigge30sIHNvdXJjZS5kZWZpbmVzICk7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0dGhpcy5saWdodHMgPSBzb3VyY2UubGlnaHRzO1xuXHR0aGlzLmNsaXBwaW5nID0gc291cmNlLmNsaXBwaW5nO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXHR0aGlzLm1vcnBoTm9ybWFscyA9IHNvdXJjZS5tb3JwaE5vcm1hbHM7XG5cblx0dGhpcy5leHRlbnNpb25zID0gc291cmNlLmV4dGVuc2lvbnM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblNoYWRlck1hdGVyaWFsLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoIG1ldGEgKSB7XG5cblx0dmFyIGRhdGEgPSBNYXRlcmlhbC5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRkYXRhLnVuaWZvcm1zID0ge307XG5cblx0Zm9yICggdmFyIG5hbWUgaW4gdGhpcy51bmlmb3JtcyApIHtcblxuXHRcdHZhciB1bmlmb3JtID0gdGhpcy51bmlmb3Jtc1sgbmFtZSBdO1xuXHRcdHZhciB2YWx1ZSA9IHVuaWZvcm0udmFsdWU7XG5cblx0XHRpZiAoIHZhbHVlICYmIHZhbHVlLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAndCcsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0pTT04oIG1ldGEgKS51dWlkXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNDb2xvciApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAnYycsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS5nZXRIZXgoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzVmVjdG9yMiApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAndjInLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNWZWN0b3IzICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICd2MycsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiB2YWx1ZS5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdGRhdGEudW5pZm9ybXNbIG5hbWUgXSA9IHtcblx0XHRcdFx0dHlwZTogJ3Y0Jyxcblx0XHRcdFx0dmFsdWU6IHZhbHVlLnRvQXJyYXkoKVxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIHZhbHVlLmlzTWF0cml4MyApIHtcblxuXHRcdFx0ZGF0YS51bmlmb3Jtc1sgbmFtZSBdID0ge1xuXHRcdFx0XHR0eXBlOiAnbTMnLFxuXHRcdFx0XHR2YWx1ZTogdmFsdWUudG9BcnJheSgpXG5cdFx0XHR9O1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgdmFsdWUuaXNNYXRyaXg0ICkge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHR5cGU6ICdtNCcsXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZS50b0FycmF5KClcblx0XHRcdH07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkYXRhLnVuaWZvcm1zWyBuYW1lIF0gPSB7XG5cdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0fTtcblxuXHRcdFx0Ly8gbm90ZTogdGhlIGFycmF5IHZhcmlhbnRzIHYydiwgdjN2LCB2NHYsIG00diBhbmQgdHYgYXJlIG5vdCBzdXBwb3J0ZWQgc28gZmFyXG5cblx0XHR9XG5cblx0fVxuXG5cdGlmICggT2JqZWN0LmtleXMoIHRoaXMuZGVmaW5lcyApLmxlbmd0aCA+IDAgKSBkYXRhLmRlZmluZXMgPSB0aGlzLmRlZmluZXM7XG5cblx0ZGF0YS52ZXJ0ZXhTaGFkZXIgPSB0aGlzLnZlcnRleFNoYWRlcjtcblx0ZGF0YS5mcmFnbWVudFNoYWRlciA9IHRoaXMuZnJhZ21lbnRTaGFkZXI7XG5cblx0dmFyIGV4dGVuc2lvbnMgPSB7fTtcblxuXHRmb3IgKCB2YXIga2V5IGluIHRoaXMuZXh0ZW5zaW9ucyApIHtcblxuXHRcdGlmICggdGhpcy5leHRlbnNpb25zWyBrZXkgXSA9PT0gdHJ1ZSApIGV4dGVuc2lvbnNbIGtleSBdID0gdHJ1ZTtcblxuXHR9XG5cblx0aWYgKCBPYmplY3Qua2V5cyggZXh0ZW5zaW9ucyApLmxlbmd0aCA+IDAgKSBkYXRhLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4qL1xuXG5mdW5jdGlvbiBDYW1lcmEoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDYW1lcmEnO1xuXG5cdHRoaXMubWF0cml4V29ybGRJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHR0aGlzLnByb2plY3Rpb25NYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXHR0aGlzLnByb2plY3Rpb25NYXRyaXhJbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxufVxuXG5DYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ2FtZXJhLFxuXG5cdGlzQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZEludmVyc2UuY29weSggc291cmNlLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4LmNvcHkoIHNvdXJjZS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4SW52ZXJzZS5jb3B5KCBzb3VyY2UucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0V29ybGREaXJlY3Rpb246IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ2FtZXJhOiAuZ2V0V29ybGREaXJlY3Rpb24oKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdHZhciBlID0gdGhpcy5tYXRyaXhXb3JsZC5lbGVtZW50cztcblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KCAtIGVbIDggXSwgLSBlWyA5IF0sIC0gZVsgMTAgXSApLm5vcm1hbGl6ZSgpO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGRJbnZlcnNlLmdldEludmVyc2UoIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHR9LFxuXG5cdHVwZGF0ZVdvcmxkTWF0cml4OiBmdW5jdGlvbiAoIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZVdvcmxkTWF0cml4LmNhbGwoIHRoaXMsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuICk7XG5cblx0XHR0aGlzLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGdyZWdnbWFuIC8gaHR0cDovL2dhbWVzLmdyZWdnbWFuLmNvbS9cbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApIHtcblxuXHRDYW1lcmEuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQZXJzcGVjdGl2ZUNhbWVyYSc7XG5cblx0dGhpcy5mb3YgPSBmb3YgIT09IHVuZGVmaW5lZCA/IGZvdiA6IDUwO1xuXHR0aGlzLnpvb20gPSAxO1xuXG5cdHRoaXMubmVhciA9IG5lYXIgIT09IHVuZGVmaW5lZCA/IG5lYXIgOiAwLjE7XG5cdHRoaXMuZmFyID0gZmFyICE9PSB1bmRlZmluZWQgPyBmYXIgOiAyMDAwO1xuXHR0aGlzLmZvY3VzID0gMTA7XG5cblx0dGhpcy5hc3BlY3QgPSBhc3BlY3QgIT09IHVuZGVmaW5lZCA/IGFzcGVjdCA6IDE7XG5cdHRoaXMudmlldyA9IG51bGw7XG5cblx0dGhpcy5maWxtR2F1Z2UgPSAzNTtcdC8vIHdpZHRoIG9mIHRoZSBmaWxtIChkZWZhdWx0IGluIG1pbGxpbWV0ZXJzKVxuXHR0aGlzLmZpbG1PZmZzZXQgPSAwO1x0Ly8gaG9yaXpvbnRhbCBmaWxtIG9mZnNldCAoc2FtZSB1bml0IGFzIGdhdWdlKVxuXG5cdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG59XG5cblBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIENhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQZXJzcGVjdGl2ZUNhbWVyYSxcblxuXHRpc1BlcnNwZWN0aXZlQ2FtZXJhOiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlLCByZWN1cnNpdmUgKSB7XG5cblx0XHRDYW1lcmEucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlLCByZWN1cnNpdmUgKTtcblxuXHRcdHRoaXMuZm92ID0gc291cmNlLmZvdjtcblx0XHR0aGlzLnpvb20gPSBzb3VyY2Uuem9vbTtcblxuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblx0XHR0aGlzLmZvY3VzID0gc291cmNlLmZvY3VzO1xuXG5cdFx0dGhpcy5hc3BlY3QgPSBzb3VyY2UuYXNwZWN0O1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0dGhpcy5maWxtR2F1Z2UgPSBzb3VyY2UuZmlsbUdhdWdlO1xuXHRcdHRoaXMuZmlsbU9mZnNldCA9IHNvdXJjZS5maWxtT2Zmc2V0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0cyB0aGUgRk9WIGJ5IGZvY2FsIGxlbmd0aCBpbiByZXNwZWN0IHRvIHRoZSBjdXJyZW50IC5maWxtR2F1Z2UuXG5cdCAqXG5cdCAqIFRoZSBkZWZhdWx0IGZpbG0gZ2F1Z2UgaXMgMzUsIHNvIHRoYXQgdGhlIGZvY2FsIGxlbmd0aCBjYW4gYmUgc3BlY2lmaWVkIGZvclxuXHQgKiBhIDM1bW0gKGZ1bGwgZnJhbWUpIGNhbWVyYS5cblx0ICpcblx0ICogVmFsdWVzIGZvciBmb2NhbCBsZW5ndGggYW5kIGZpbG0gZ2F1Z2UgbXVzdCBoYXZlIHRoZSBzYW1lIHVuaXQuXG5cdCAqL1xuXHRzZXRGb2NhbExlbmd0aDogZnVuY3Rpb24gKCBmb2NhbExlbmd0aCApIHtcblxuXHRcdC8vIHNlZSBodHRwOi8vd3d3LmJvYmF0a2lucy5jb20vcGhvdG9ncmFwaHkvdGVjaG5pY2FsL2ZpZWxkX29mX3ZpZXcuaHRtbFxuXHRcdHZhciB2RXh0ZW50U2xvcGUgPSAwLjUgKiB0aGlzLmdldEZpbG1IZWlnaHQoKSAvIGZvY2FsTGVuZ3RoO1xuXG5cdFx0dGhpcy5mb3YgPSBNYXRoVXRpbHMuUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oIHZFeHRlbnRTbG9wZSApO1xuXHRcdHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGN1bGF0ZXMgdGhlIGZvY2FsIGxlbmd0aCBmcm9tIHRoZSBjdXJyZW50IC5mb3YgYW5kIC5maWxtR2F1Z2UuXG5cdCAqL1xuXHRnZXRGb2NhbExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZFeHRlbnRTbG9wZSA9IE1hdGgudGFuKCBNYXRoVXRpbHMuREVHMlJBRCAqIDAuNSAqIHRoaXMuZm92ICk7XG5cblx0XHRyZXR1cm4gMC41ICogdGhpcy5nZXRGaWxtSGVpZ2h0KCkgLyB2RXh0ZW50U2xvcGU7XG5cblx0fSxcblxuXHRnZXRFZmZlY3RpdmVGT1Y6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBNYXRoVXRpbHMuUkFEMkRFRyAqIDIgKiBNYXRoLmF0YW4oXG5cdFx0XHRNYXRoLnRhbiggTWF0aFV0aWxzLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tICk7XG5cblx0fSxcblxuXHRnZXRGaWxtV2lkdGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdC8vIGZpbG0gbm90IGNvbXBsZXRlbHkgY292ZXJlZCBpbiBwb3J0cmFpdCBmb3JtYXQgKGFzcGVjdCA8IDEpXG5cdFx0cmV0dXJuIHRoaXMuZmlsbUdhdWdlICogTWF0aC5taW4oIHRoaXMuYXNwZWN0LCAxICk7XG5cblx0fSxcblxuXHRnZXRGaWxtSGVpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBmaWxtIG5vdCBjb21wbGV0ZWx5IGNvdmVyZWQgaW4gbGFuZHNjYXBlIGZvcm1hdCAoYXNwZWN0ID4gMSlcblx0XHRyZXR1cm4gdGhpcy5maWxtR2F1Z2UgLyBNYXRoLm1heCggdGhpcy5hc3BlY3QsIDEgKTtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBTZXRzIGFuIG9mZnNldCBpbiBhIGxhcmdlciBmcnVzdHVtLiBUaGlzIGlzIHVzZWZ1bCBmb3IgbXVsdGktd2luZG93IG9yXG5cdCAqIG11bHRpLW1vbml0b3IvbXVsdGktbWFjaGluZSBzZXR1cHMuXG5cdCAqXG5cdCAqIEZvciBleGFtcGxlLCBpZiB5b3UgaGF2ZSAzeDIgbW9uaXRvcnMgYW5kIGVhY2ggbW9uaXRvciBpcyAxOTIweDEwODAgYW5kXG5cdCAqIHRoZSBtb25pdG9ycyBhcmUgaW4gZ3JpZCBsaWtlIHRoaXNcblx0ICpcblx0ICogICArLS0tKy0tLSstLS0rXG5cdCAqICAgfCBBIHwgQiB8IEMgfFxuXHQgKiAgICstLS0rLS0tKy0tLStcblx0ICogICB8IEQgfCBFIHwgRiB8XG5cdCAqICAgKy0tLSstLS0rLS0tK1xuXHQgKlxuXHQgKiB0aGVuIGZvciBlYWNoIG1vbml0b3IgeW91IHdvdWxkIGNhbGwgaXQgbGlrZSB0aGlzXG5cdCAqXG5cdCAqICAgdmFyIHcgPSAxOTIwO1xuXHQgKiAgIHZhciBoID0gMTA4MDtcblx0ICogICB2YXIgZnVsbFdpZHRoID0gdyAqIDM7XG5cdCAqICAgdmFyIGZ1bGxIZWlnaHQgPSBoICogMjtcblx0ICpcblx0ICogICAtLUEtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMCwgdywgaCApO1xuXHQgKiAgIC0tQi0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAwLCB3LCBoICk7XG5cdCAqICAgLS1DLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDAsIHcsIGggKTtcblx0ICogICAtLUQtLVxuXHQgKiAgIGNhbWVyYS5zZXRWaWV3T2Zmc2V0KCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHcgKiAwLCBoICogMSwgdywgaCApO1xuXHQgKiAgIC0tRS0tXG5cdCAqICAgY2FtZXJhLnNldFZpZXdPZmZzZXQoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgdyAqIDEsIGggKiAxLCB3LCBoICk7XG5cdCAqICAgLS1GLS1cblx0ICogICBjYW1lcmEuc2V0Vmlld09mZnNldCggZnVsbFdpZHRoLCBmdWxsSGVpZ2h0LCB3ICogMiwgaCAqIDEsIHcsIGggKTtcblx0ICpcblx0ICogICBOb3RlIHRoZXJlIGlzIG5vIHJlYXNvbiBtb25pdG9ycyBoYXZlIHRvIGJlIHRoZSBzYW1lIHNpemUgb3IgaW4gYSBncmlkLlxuXHQgKi9cblx0c2V0Vmlld09mZnNldDogZnVuY3Rpb24gKCBmdWxsV2lkdGgsIGZ1bGxIZWlnaHQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHR0aGlzLmFzcGVjdCA9IGZ1bGxXaWR0aCAvIGZ1bGxIZWlnaHQ7XG5cblx0XHRpZiAoIHRoaXMudmlldyA9PT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy52aWV3ID0ge1xuXHRcdFx0XHRlbmFibGVkOiB0cnVlLFxuXHRcdFx0XHRmdWxsV2lkdGg6IDEsXG5cdFx0XHRcdGZ1bGxIZWlnaHQ6IDEsXG5cdFx0XHRcdG9mZnNldFg6IDAsXG5cdFx0XHRcdG9mZnNldFk6IDAsXG5cdFx0XHRcdHdpZHRoOiAxLFxuXHRcdFx0XHRoZWlnaHQ6IDFcblx0XHRcdH07XG5cblx0XHR9XG5cblx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IHRydWU7XG5cdFx0dGhpcy52aWV3LmZ1bGxXaWR0aCA9IGZ1bGxXaWR0aDtcblx0XHR0aGlzLnZpZXcuZnVsbEhlaWdodCA9IGZ1bGxIZWlnaHQ7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFggPSB4O1xuXHRcdHRoaXMudmlldy5vZmZzZXRZID0geTtcblx0XHR0aGlzLnZpZXcud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLnZpZXcuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHRjbGVhclZpZXdPZmZzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0fSxcblxuXHR1cGRhdGVQcm9qZWN0aW9uTWF0cml4OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgbmVhciA9IHRoaXMubmVhcixcblx0XHRcdHRvcCA9IG5lYXIgKiBNYXRoLnRhbiggTWF0aFV0aWxzLkRFRzJSQUQgKiAwLjUgKiB0aGlzLmZvdiApIC8gdGhpcy56b29tLFxuXHRcdFx0aGVpZ2h0ID0gMiAqIHRvcCxcblx0XHRcdHdpZHRoID0gdGhpcy5hc3BlY3QgKiBoZWlnaHQsXG5cdFx0XHRsZWZ0ID0gLSAwLjUgKiB3aWR0aCxcblx0XHRcdHZpZXcgPSB0aGlzLnZpZXc7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcblxuXHRcdFx0dmFyIGZ1bGxXaWR0aCA9IHZpZXcuZnVsbFdpZHRoLFxuXHRcdFx0XHRmdWxsSGVpZ2h0ID0gdmlldy5mdWxsSGVpZ2h0O1xuXG5cdFx0XHRsZWZ0ICs9IHZpZXcub2Zmc2V0WCAqIHdpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0dG9wIC09IHZpZXcub2Zmc2V0WSAqIGhlaWdodCAvIGZ1bGxIZWlnaHQ7XG5cdFx0XHR3aWR0aCAqPSB2aWV3LndpZHRoIC8gZnVsbFdpZHRoO1xuXHRcdFx0aGVpZ2h0ICo9IHZpZXcuaGVpZ2h0IC8gZnVsbEhlaWdodDtcblxuXHRcdH1cblxuXHRcdHZhciBza2V3ID0gdGhpcy5maWxtT2Zmc2V0O1xuXHRcdGlmICggc2tldyAhPT0gMCApIGxlZnQgKz0gbmVhciAqIHNrZXcgLyB0aGlzLmdldEZpbG1XaWR0aCgpO1xuXG5cdFx0dGhpcy5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdCwgbGVmdCArIHdpZHRoLCB0b3AsIHRvcCAtIGhlaWdodCwgbmVhciwgdGhpcy5mYXIgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5mb3YgPSB0aGlzLmZvdjtcblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXG5cdFx0ZGF0YS5vYmplY3QubmVhciA9IHRoaXMubmVhcjtcblx0XHRkYXRhLm9iamVjdC5mYXIgPSB0aGlzLmZhcjtcblx0XHRkYXRhLm9iamVjdC5mb2N1cyA9IHRoaXMuZm9jdXM7XG5cblx0XHRkYXRhLm9iamVjdC5hc3BlY3QgPSB0aGlzLmFzcGVjdDtcblxuXHRcdGlmICggdGhpcy52aWV3ICE9PSBudWxsICkgZGF0YS5vYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCB0aGlzLnZpZXcgKTtcblxuXHRcdGRhdGEub2JqZWN0LmZpbG1HYXVnZSA9IHRoaXMuZmlsbUdhdWdlO1xuXHRcdGRhdGEub2JqZWN0LmZpbG1PZmZzZXQgPSB0aGlzLmZpbG1PZmZzZXQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBDYW1lcmEgZm9yIHJlbmRlcmluZyBjdWJlIG1hcHNcbiAqXHQtIHJlbmRlcnMgc2NlbmUgaW50byBheGlzLWFsaWduZWQgY3ViZVxuICpcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxudmFyIGZvdiA9IDkwLCBhc3BlY3QgPSAxO1xuXG5mdW5jdGlvbiBDdWJlQ2FtZXJhKCBuZWFyLCBmYXIsIGN1YmVSZXNvbHV0aW9uLCBvcHRpb25zICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQ3ViZUNhbWVyYSc7XG5cblx0dmFyIGNhbWVyYVBYID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBYLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYVBYLmxvb2tBdCggbmV3IFZlY3RvcjMoIDEsIDAsIDAgKSApO1xuXHR0aGlzLmFkZCggY2FtZXJhUFggKTtcblxuXHR2YXIgY2FtZXJhTlggPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0Y2FtZXJhTlgudXAuc2V0KCAwLCAtIDEsIDAgKTtcblx0Y2FtZXJhTlgubG9va0F0KCBuZXcgVmVjdG9yMyggLSAxLCAwLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYU5YICk7XG5cblx0dmFyIGNhbWVyYVBZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYVBZLnVwLnNldCggMCwgMCwgMSApO1xuXHRjYW1lcmFQWS5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYVBZICk7XG5cblx0dmFyIGNhbWVyYU5ZID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYU5ZLnVwLnNldCggMCwgMCwgLSAxICk7XG5cdGNhbWVyYU5ZLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFOWSApO1xuXG5cdHZhciBjYW1lcmFQWiA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZm92LCBhc3BlY3QsIG5lYXIsIGZhciApO1xuXHRjYW1lcmFQWi51cC5zZXQoIDAsIC0gMSwgMCApO1xuXHRjYW1lcmFQWi5sb29rQXQoIG5ldyBWZWN0b3IzKCAwLCAwLCAxICkgKTtcblx0dGhpcy5hZGQoIGNhbWVyYVBaICk7XG5cblx0dmFyIGNhbWVyYU5aID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKCBmb3YsIGFzcGVjdCwgbmVhciwgZmFyICk7XG5cdGNhbWVyYU5aLnVwLnNldCggMCwgLSAxLCAwICk7XG5cdGNhbWVyYU5aLmxvb2tBdCggbmV3IFZlY3RvcjMoIDAsIDAsIC0gMSApICk7XG5cdHRoaXMuYWRkKCBjYW1lcmFOWiApO1xuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHsgZm9ybWF0OiBSR0JGb3JtYXQsIG1hZ0ZpbHRlcjogTGluZWFyRmlsdGVyLCBtaW5GaWx0ZXI6IExpbmVhckZpbHRlciB9O1xuXG5cdHRoaXMucmVuZGVyVGFyZ2V0ID0gbmV3IFdlYkdMQ3ViZVJlbmRlclRhcmdldCggY3ViZVJlc29sdXRpb24sIG9wdGlvbnMgKTtcblx0dGhpcy5yZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lID0gXCJDdWJlQ2FtZXJhXCI7XG5cblx0dGhpcy51cGRhdGUgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRcdGlmICggdGhpcy5wYXJlbnQgPT09IG51bGwgKSB0aGlzLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHR2YXIgY3VycmVudFJlbmRlclRhcmdldCA9IHJlbmRlcmVyLmdldFJlbmRlclRhcmdldCgpO1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyVGFyZ2V0O1xuXHRcdHZhciBnZW5lcmF0ZU1pcG1hcHMgPSByZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHRyZW5kZXJUYXJnZXQudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAwICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAxICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlggKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAyICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCAzICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlkgKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA0ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhUFogKTtcblxuXHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGdlbmVyYXRlTWlwbWFwcztcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0LCA1ICk7XG5cdFx0cmVuZGVyZXIucmVuZGVyKCBzY2VuZSwgY2FtZXJhTlogKTtcblxuXHRcdHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApIHtcblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgcmVuZGVyVGFyZ2V0ID0gdGhpcy5yZW5kZXJUYXJnZXQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCwgaSApO1xuXG5cdFx0XHRyZW5kZXJlci5jbGVhciggY29sb3IsIGRlcHRoLCBzdGVuY2lsICk7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHR9O1xuXG59XG5cbkN1YmVDYW1lcmEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5DdWJlQ2FtZXJhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmVDYW1lcmE7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbVxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCBzaXplLCBvcHRpb25zLCBkdW1teSApIHtcblxuXHRpZiAoIE51bWJlci5pc0ludGVnZXIoIG9wdGlvbnMgKSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMQ3ViZVJlbmRlclRhcmdldDogY29uc3RydWN0b3Igc2lnbmF0dXJlIGlzIG5vdyBXZWJHTEN1YmVSZW5kZXJUYXJnZXQoIHNpemUsIG9wdGlvbnMgKScgKTtcblxuXHRcdG9wdGlvbnMgPSBkdW1teTtcblxuXHR9XG5cblx0V2ViR0xSZW5kZXJUYXJnZXQuY2FsbCggdGhpcywgc2l6ZSwgc2l6ZSwgb3B0aW9ucyApO1xuXG59XG5cbldlYkdMQ3ViZVJlbmRlclRhcmdldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBXZWJHTFJlbmRlclRhcmdldC5wcm90b3R5cGUgKTtcbldlYkdMQ3ViZVJlbmRlclRhcmdldC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBXZWJHTEN1YmVSZW5kZXJUYXJnZXQ7XG5cbldlYkdMQ3ViZVJlbmRlclRhcmdldC5wcm90b3R5cGUuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPSB0cnVlO1xuXG5XZWJHTEN1YmVSZW5kZXJUYXJnZXQucHJvdG90eXBlLmZyb21FcXVpcmVjdGFuZ3VsYXJUZXh0dXJlID0gZnVuY3Rpb24gKCByZW5kZXJlciwgdGV4dHVyZSApIHtcblxuXHR0aGlzLnRleHR1cmUudHlwZSA9IHRleHR1cmUudHlwZTtcblx0dGhpcy50ZXh0dXJlLmZvcm1hdCA9IHRleHR1cmUuZm9ybWF0O1xuXHR0aGlzLnRleHR1cmUuZW5jb2RpbmcgPSB0ZXh0dXJlLmVuY29kaW5nO1xuXG5cdHZhciBzY2VuZSA9IG5ldyBTY2VuZSgpO1xuXG5cdHZhciBzaGFkZXIgPSB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dEVxdWlyZWN0OiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0fSxcblxuXHRcdHZlcnRleFNoYWRlcjogW1xuXG5cdFx0XHRcInZhcnlpbmcgdmVjMyB2V29ybGREaXJlY3Rpb247XCIsXG5cblx0XHRcdFwidmVjMyB0cmFuc2Zvcm1EaXJlY3Rpb24oIGluIHZlYzMgZGlyLCBpbiBtYXQ0IG1hdHJpeCApIHtcIixcblxuXHRcdFx0XCJcdHJldHVybiBub3JtYWxpemUoICggbWF0cml4ICogdmVjNCggZGlyLCAwLjAgKSApLnh5eiApO1wiLFxuXG5cdFx0XHRcIn1cIixcblxuXHRcdFx0XCJ2b2lkIG1haW4oKSB7XCIsXG5cblx0XHRcdFwiXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1wiLFxuXG5cdFx0XHRcIlx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cIixcblx0XHRcdFwiXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XCIsXG5cblx0XHRcdFwifVwiXG5cblx0XHRdLmpvaW4oICdcXG4nICksXG5cblx0XHRmcmFnbWVudFNoYWRlcjogW1xuXG5cdFx0XHRcInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcIixcblxuXHRcdFx0XCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1wiLFxuXG5cdFx0XHRcIiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4XCIsXG5cdFx0XHRcIiNkZWZpbmUgUkVDSVBST0NBTF9QSTIgMC4xNTkxNTQ5NFwiLFxuXG5cdFx0XHRcInZvaWQgbWFpbigpIHtcIixcblxuXHRcdFx0XCJcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcIixcblxuXHRcdFx0XCJcdHZlYzIgc2FtcGxlVVY7XCIsXG5cblx0XHRcdFwiXHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIGRpcmVjdGlvbi55LCAtIDEuMCwgMS4wICkgKSAqIFJFQ0lQUk9DQUxfUEkgKyAwLjU7XCIsXG5cblx0XHRcdFwiXHRzYW1wbGVVVi54ID0gYXRhbiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcIixcblxuXHRcdFx0XCJcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCggdEVxdWlyZWN0LCBzYW1wbGVVViApO1wiLFxuXG5cdFx0XHRcIn1cIlxuXG5cdFx0XS5qb2luKCAnXFxuJyApLFxuXHR9O1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0dHlwZTogJ0N1YmVtYXBGcm9tRXF1aXJlY3QnLFxuXG5cdFx0dW5pZm9ybXM6IGNsb25lVW5pZm9ybXMoIHNoYWRlci51bmlmb3JtcyApLFxuXHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRmcmFnbWVudFNoYWRlcjogc2hhZGVyLmZyYWdtZW50U2hhZGVyLFxuXHRcdHNpZGU6IEJhY2tTaWRlLFxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nXG5cblx0fSApO1xuXG5cdG1hdGVyaWFsLnVuaWZvcm1zLnRFcXVpcmVjdC52YWx1ZSA9IHRleHR1cmU7XG5cblx0dmFyIG1lc2ggPSBuZXcgTWVzaCggbmV3IEJveEJ1ZmZlckdlb21ldHJ5KCA1LCA1LCA1ICksIG1hdGVyaWFsICk7XG5cblx0c2NlbmUuYWRkKCBtZXNoICk7XG5cblx0dmFyIGNhbWVyYSA9IG5ldyBDdWJlQ2FtZXJhKCAxLCAxMCwgMSApO1xuXG5cdGNhbWVyYS5yZW5kZXJUYXJnZXQgPSB0aGlzO1xuXHRjYW1lcmEucmVuZGVyVGFyZ2V0LnRleHR1cmUubmFtZSA9ICdDdWJlQ2FtZXJhVGV4dHVyZSc7XG5cblx0Y2FtZXJhLnVwZGF0ZSggcmVuZGVyZXIsIHNjZW5lICk7XG5cblx0bWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XG5cdG1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRGF0YVRleHR1cmUoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGZvcm1hdCwgdHlwZSwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSB9O1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcblxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxufVxuXG5EYXRhVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGF0YVRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmU7XG5cbkRhdGFUZXh0dXJlLnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqL1xuXG52YXIgX3NwaGVyZSQxID0gbmV3IFNwaGVyZSgpO1xudmFyIF92ZWN0b3IkNSA9IG5ldyBWZWN0b3IzKCk7XG5cbmZ1bmN0aW9uIEZydXN0dW0oIHAwLCBwMSwgcDIsIHAzLCBwNCwgcDUgKSB7XG5cblx0dGhpcy5wbGFuZXMgPSBbXG5cblx0XHQoIHAwICE9PSB1bmRlZmluZWQgKSA/IHAwIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwMSAhPT0gdW5kZWZpbmVkICkgPyBwMSA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDIgIT09IHVuZGVmaW5lZCApID8gcDIgOiBuZXcgUGxhbmUoKSxcblx0XHQoIHAzICE9PSB1bmRlZmluZWQgKSA/IHAzIDogbmV3IFBsYW5lKCksXG5cdFx0KCBwNCAhPT0gdW5kZWZpbmVkICkgPyBwNCA6IG5ldyBQbGFuZSgpLFxuXHRcdCggcDUgIT09IHVuZGVmaW5lZCApID8gcDUgOiBuZXcgUGxhbmUoKVxuXG5cdF07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRnJ1c3R1bS5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcDAsIHAxLCBwMiwgcDMsIHA0LCBwNSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblxuXHRcdHBsYW5lc1sgMCBdLmNvcHkoIHAwICk7XG5cdFx0cGxhbmVzWyAxIF0uY29weSggcDEgKTtcblx0XHRwbGFuZXNbIDIgXS5jb3B5KCBwMiApO1xuXHRcdHBsYW5lc1sgMyBdLmNvcHkoIHAzICk7XG5cdFx0cGxhbmVzWyA0IF0uY29weSggcDQgKTtcblx0XHRwbGFuZXNbIDUgXS5jb3B5KCBwNSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBmcnVzdHVtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0cGxhbmVzWyBpIF0uY29weSggZnJ1c3R1bS5wbGFuZXNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tUHJvamVjdGlvbk1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0dmFyIHBsYW5lcyA9IHRoaXMucGxhbmVzO1xuXHRcdHZhciBtZSA9IG0uZWxlbWVudHM7XG5cdFx0dmFyIG1lMCA9IG1lWyAwIF0sIG1lMSA9IG1lWyAxIF0sIG1lMiA9IG1lWyAyIF0sIG1lMyA9IG1lWyAzIF07XG5cdFx0dmFyIG1lNCA9IG1lWyA0IF0sIG1lNSA9IG1lWyA1IF0sIG1lNiA9IG1lWyA2IF0sIG1lNyA9IG1lWyA3IF07XG5cdFx0dmFyIG1lOCA9IG1lWyA4IF0sIG1lOSA9IG1lWyA5IF0sIG1lMTAgPSBtZVsgMTAgXSwgbWUxMSA9IG1lWyAxMSBdO1xuXHRcdHZhciBtZTEyID0gbWVbIDEyIF0sIG1lMTMgPSBtZVsgMTMgXSwgbWUxNCA9IG1lWyAxNCBdLCBtZTE1ID0gbWVbIDE1IF07XG5cblx0XHRwbGFuZXNbIDAgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTAsIG1lNyAtIG1lNCwgbWUxMSAtIG1lOCwgbWUxNSAtIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDEgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTAsIG1lNyArIG1lNCwgbWUxMSArIG1lOCwgbWUxNSArIG1lMTIgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDIgXS5zZXRDb21wb25lbnRzKCBtZTMgKyBtZTEsIG1lNyArIG1lNSwgbWUxMSArIG1lOSwgbWUxNSArIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDMgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTEsIG1lNyAtIG1lNSwgbWUxMSAtIG1lOSwgbWUxNSAtIG1lMTMgKS5ub3JtYWxpemUoKTtcblx0XHRwbGFuZXNbIDQgXS5zZXRDb21wb25lbnRzKCBtZTMgLSBtZTIsIG1lNyAtIG1lNiwgbWUxMSAtIG1lMTAsIG1lMTUgLSBtZTE0ICkubm9ybWFsaXplKCk7XG5cdFx0cGxhbmVzWyA1IF0uc2V0Q29tcG9uZW50cyggbWUzICsgbWUyLCBtZTcgKyBtZTYsIG1lMTEgKyBtZTEwLCBtZTE1ICsgbWUxNCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzT2JqZWN0OiBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdC5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPT09IG51bGwgKSBnZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxuXHRcdF9zcGhlcmUkMS5jb3B5KCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSApLmFwcGx5TWF0cml4NCggb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDEgKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNTcHJpdGU6IGZ1bmN0aW9uICggc3ByaXRlICkge1xuXG5cdFx0X3NwaGVyZSQxLmNlbnRlci5zZXQoIDAsIDAsIDAgKTtcblx0XHRfc3BoZXJlJDEucmFkaXVzID0gMC43MDcxMDY3ODExODY1NDc2O1xuXHRcdF9zcGhlcmUkMS5hcHBseU1hdHJpeDQoIHNwcml0ZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggX3NwaGVyZSQxICk7XG5cblx0fSxcblxuXHRpbnRlcnNlY3RzU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdHZhciBwbGFuZXMgPSB0aGlzLnBsYW5lcztcblx0XHR2YXIgY2VudGVyID0gc3BoZXJlLmNlbnRlcjtcblx0XHR2YXIgbmVnUmFkaXVzID0gLSBzcGhlcmUucmFkaXVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gcGxhbmVzWyBpIF0uZGlzdGFuY2VUb1BvaW50KCBjZW50ZXIgKTtcblxuXHRcdFx0aWYgKCBkaXN0YW5jZSA8IG5lZ1JhZGl1cyApIHtcblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXG5cdH0sXG5cblx0aW50ZXJzZWN0c0JveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHR2YXIgcGxhbmUgPSBwbGFuZXNbIGkgXTtcblxuXHRcdFx0Ly8gY29ybmVyIGF0IG1heCBkaXN0YW5jZVxuXG5cdFx0XHRfdmVjdG9yJDUueCA9IHBsYW5lLm5vcm1hbC54ID4gMCA/IGJveC5tYXgueCA6IGJveC5taW4ueDtcblx0XHRcdF92ZWN0b3IkNS55ID0gcGxhbmUubm9ybWFsLnkgPiAwID8gYm94Lm1heC55IDogYm94Lm1pbi55O1xuXHRcdFx0X3ZlY3RvciQ1LnogPSBwbGFuZS5ub3JtYWwueiA+IDAgPyBib3gubWF4LnogOiBib3gubWluLno7XG5cblx0XHRcdGlmICggcGxhbmUuZGlzdGFuY2VUb1BvaW50KCBfdmVjdG9yJDUgKSA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9LFxuXG5cdGNvbnRhaW5zUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHR2YXIgcGxhbmVzID0gdGhpcy5wbGFuZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRpZiAoIHBsYW5lc1sgaSBdLmRpc3RhbmNlVG9Qb2ludCggcG9pbnQgKSA8IDAgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBVbmlmb3JtcyBsaWJyYXJ5IGZvciBzaGFyZWQgd2ViZ2wgc2hhZGVyc1xuICovXG5cbnZhciBVbmlmb3Jtc0xpYiA9IHtcblxuXHRjb21tb246IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhlZWVlZWUgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblx0XHR1djJUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblxuXHRcdGFscGhhTWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cblx0fSxcblxuXHRzcGVjdWxhcm1hcDoge1xuXG5cdFx0c3BlY3VsYXJNYXA6IHsgdmFsdWU6IG51bGwgfSxcblxuXHR9LFxuXG5cdGVudm1hcDoge1xuXG5cdFx0ZW52TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0ZmxpcEVudk1hcDogeyB2YWx1ZTogLSAxIH0sXG5cdFx0cmVmbGVjdGl2aXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRyZWZyYWN0aW9uUmF0aW86IHsgdmFsdWU6IDAuOTggfSxcblx0XHRtYXhNaXBMZXZlbDogeyB2YWx1ZTogMCB9XG5cblx0fSxcblxuXHRhb21hcDoge1xuXG5cdFx0YW9NYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRhb01hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9XG5cblx0fSxcblxuXHRsaWdodG1hcDoge1xuXG5cdFx0bGlnaHRNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRsaWdodE1hcEludGVuc2l0eTogeyB2YWx1ZTogMSB9XG5cblx0fSxcblxuXHRlbWlzc2l2ZW1hcDoge1xuXG5cdFx0ZW1pc3NpdmVNYXA6IHsgdmFsdWU6IG51bGwgfVxuXG5cdH0sXG5cblx0YnVtcG1hcDoge1xuXG5cdFx0YnVtcE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdGJ1bXBTY2FsZTogeyB2YWx1ZTogMSB9XG5cblx0fSxcblxuXHRub3JtYWxtYXA6IHtcblxuXHRcdG5vcm1hbE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdG5vcm1hbFNjYWxlOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMSwgMSApIH1cblxuXHR9LFxuXG5cdGRpc3BsYWNlbWVudG1hcDoge1xuXG5cdFx0ZGlzcGxhY2VtZW50TWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0ZGlzcGxhY2VtZW50U2NhbGU6IHsgdmFsdWU6IDEgfSxcblx0XHRkaXNwbGFjZW1lbnRCaWFzOiB7IHZhbHVlOiAwIH1cblxuXHR9LFxuXG5cdHJvdWdobmVzc21hcDoge1xuXG5cdFx0cm91Z2huZXNzTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdG1ldGFsbmVzc21hcDoge1xuXG5cdFx0bWV0YWxuZXNzTWFwOiB7IHZhbHVlOiBudWxsIH1cblxuXHR9LFxuXG5cdGdyYWRpZW50bWFwOiB7XG5cblx0XHRncmFkaWVudE1hcDogeyB2YWx1ZTogbnVsbCB9XG5cblx0fSxcblxuXHRmb2c6IHtcblxuXHRcdGZvZ0RlbnNpdHk6IHsgdmFsdWU6IDAuMDAwMjUgfSxcblx0XHRmb2dOZWFyOiB7IHZhbHVlOiAxIH0sXG5cdFx0Zm9nRmFyOiB7IHZhbHVlOiAyMDAwIH0sXG5cdFx0Zm9nQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhmZmZmZmYgKSB9XG5cblx0fSxcblxuXHRsaWdodHM6IHtcblxuXHRcdGFtYmllbnRMaWdodENvbG9yOiB7IHZhbHVlOiBbXSB9LFxuXG5cdFx0bGlnaHRQcm9iZTogeyB2YWx1ZTogW10gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0ZGlyZWN0aW9uOiB7fSxcblx0XHRcdGNvbG9yOiB7fVxuXHRcdH0gfSxcblxuXHRcdGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdHNwb3RMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRjb2xvcjoge30sXG5cdFx0XHRwb3NpdGlvbjoge30sXG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0ZGlzdGFuY2U6IHt9LFxuXHRcdFx0Y29uZUNvczoge30sXG5cdFx0XHRwZW51bWJyYUNvczoge30sXG5cdFx0XHRkZWNheToge31cblx0XHR9IH0sXG5cblx0XHRzcG90TGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge31cblx0XHR9IH0sXG5cblx0XHRzcG90U2hhZG93TWFwOiB7IHZhbHVlOiBbXSB9LFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IHsgdmFsdWU6IFtdIH0sXG5cblx0XHRwb2ludExpZ2h0czogeyB2YWx1ZTogW10sIHByb3BlcnRpZXM6IHtcblx0XHRcdGNvbG9yOiB7fSxcblx0XHRcdHBvc2l0aW9uOiB7fSxcblx0XHRcdGRlY2F5OiB7fSxcblx0XHRcdGRpc3RhbmNlOiB7fVxuXHRcdH0gfSxcblxuXHRcdHBvaW50TGlnaHRTaGFkb3dzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0c2hhZG93Qmlhczoge30sXG5cdFx0XHRzaGFkb3dSYWRpdXM6IHt9LFxuXHRcdFx0c2hhZG93TWFwU2l6ZToge30sXG5cdFx0XHRzaGFkb3dDYW1lcmFOZWFyOiB7fSxcblx0XHRcdHNoYWRvd0NhbWVyYUZhcjoge31cblx0XHR9IH0sXG5cblx0XHRwb2ludFNoYWRvd01hcDogeyB2YWx1ZTogW10gfSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogeyB2YWx1ZTogW10gfSxcblxuXHRcdGhlbWlzcGhlcmVMaWdodHM6IHsgdmFsdWU6IFtdLCBwcm9wZXJ0aWVzOiB7XG5cdFx0XHRkaXJlY3Rpb246IHt9LFxuXHRcdFx0c2t5Q29sb3I6IHt9LFxuXHRcdFx0Z3JvdW5kQ29sb3I6IHt9XG5cdFx0fSB9LFxuXG5cdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IFJlY3RBcmVhTGlnaHQgQlJERiBkYXRhIG5lZWRzIHRvIGJlIG1vdmVkIGZyb20gZXhhbXBsZSB0byBtYWluIHNyY1xuXHRcdHJlY3RBcmVhTGlnaHRzOiB7IHZhbHVlOiBbXSwgcHJvcGVydGllczoge1xuXHRcdFx0Y29sb3I6IHt9LFxuXHRcdFx0cG9zaXRpb246IHt9LFxuXHRcdFx0d2lkdGg6IHt9LFxuXHRcdFx0aGVpZ2h0OiB7fVxuXHRcdH0gfVxuXG5cdH0sXG5cblx0cG9pbnRzOiB7XG5cblx0XHRkaWZmdXNlOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4ZWVlZWVlICkgfSxcblx0XHRvcGFjaXR5OiB7IHZhbHVlOiAxLjAgfSxcblx0XHRzaXplOiB7IHZhbHVlOiAxLjAgfSxcblx0XHRzY2FsZTogeyB2YWx1ZTogMS4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XG5cblx0fSxcblxuXHRzcHJpdGU6IHtcblxuXHRcdGRpZmZ1c2U6IHsgdmFsdWU6IG5ldyBDb2xvciggMHhlZWVlZWUgKSB9LFxuXHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9LFxuXHRcdGNlbnRlcjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoIDAuNSwgMC41ICkgfSxcblx0XHRyb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG5cdFx0bWFwOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0YWxwaGFNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHR1dlRyYW5zZm9ybTogeyB2YWx1ZTogbmV3IE1hdHJpeDMoKSB9XG5cblx0fVxuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xBbmltYXRpb24oKSB7XG5cblx0dmFyIGNvbnRleHQgPSBudWxsO1xuXHR2YXIgaXNBbmltYXRpbmcgPSBmYWxzZTtcblx0dmFyIGFuaW1hdGlvbkxvb3AgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0aWYgKCBpc0FuaW1hdGluZyA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRhbmltYXRpb25Mb29wKCB0aW1lLCBmcmFtZSApO1xuXG5cdFx0Y29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlmICggaXNBbmltYXRpbmcgPT09IHRydWUgKSByZXR1cm47XG5cdFx0XHRpZiAoIGFuaW1hdGlvbkxvb3AgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHRcdGNvbnRleHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gdHJ1ZTtcblxuXHRcdH0sXG5cblx0XHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGlzQW5pbWF0aW5nID0gZmFsc2U7XG5cblx0XHR9LFxuXG5cdFx0c2V0QW5pbWF0aW9uTG9vcDogZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdFx0YW5pbWF0aW9uTG9vcCA9IGNhbGxiYWNrO1xuXG5cdFx0fSxcblxuXHRcdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnRleHQgPSB2YWx1ZTtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEF0dHJpYnV0ZXMoIGdsLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdHZhciBidWZmZXJzID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXNhZ2UgPSBhdHRyaWJ1dGUudXNhZ2U7XG5cblx0XHR2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblx0XHRnbC5idWZmZXJEYXRhKCBidWZmZXJUeXBlLCBhcnJheSwgdXNhZ2UgKTtcblxuXHRcdGF0dHJpYnV0ZS5vblVwbG9hZENhbGxiYWNrKCk7XG5cblx0XHR2YXIgdHlwZSA9IDUxMjY7XG5cblx0XHRpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5ICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTEF0dHJpYnV0ZXM6IFVuc3VwcG9ydGVkIGRhdGEgYnVmZmVyIGZvcm1hdDogRmxvYXQ2NEFycmF5LicgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTIzO1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMjtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDMyQXJyYXkgKSB7XG5cblx0XHRcdHR5cGUgPSA1MTI1O1xuXG5cdFx0fSBlbHNlIGlmICggYXJyYXkgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyNDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgSW50OEFycmF5ICkge1xuXG5cdFx0XHR0eXBlID0gNTEyMDtcblxuXHRcdH0gZWxzZSBpZiAoIGFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSApIHtcblxuXHRcdFx0dHlwZSA9IDUxMjE7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0YnVmZmVyOiBidWZmZXIsXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0Ynl0ZXNQZXJFbGVtZW50OiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdHZlcnNpb246IGF0dHJpYnV0ZS52ZXJzaW9uXG5cdFx0fTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQnVmZmVyKCBidWZmZXIsIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApIHtcblxuXHRcdHZhciBhcnJheSA9IGF0dHJpYnV0ZS5hcnJheTtcblx0XHR2YXIgdXBkYXRlUmFuZ2UgPSBhdHRyaWJ1dGUudXBkYXRlUmFuZ2U7XG5cblx0XHRnbC5iaW5kQnVmZmVyKCBidWZmZXJUeXBlLCBidWZmZXIgKTtcblxuXHRcdGlmICggdXBkYXRlUmFuZ2UuY291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0Ly8gTm90IHVzaW5nIHVwZGF0ZSByYW5nZXNcblxuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgMCwgYXJyYXkgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdFx0Z2wuYnVmZmVyU3ViRGF0YSggYnVmZmVyVHlwZSwgdXBkYXRlUmFuZ2Uub2Zmc2V0ICogYXJyYXkuQllURVNfUEVSX0VMRU1FTlQsXG5cdFx0XHRcdFx0YXJyYXksIHVwZGF0ZVJhbmdlLm9mZnNldCwgdXBkYXRlUmFuZ2UuY291bnQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRnbC5idWZmZXJTdWJEYXRhKCBidWZmZXJUeXBlLCB1cGRhdGVSYW5nZS5vZmZzZXQgKiBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCxcblx0XHRcdFx0XHRhcnJheS5zdWJhcnJheSggdXBkYXRlUmFuZ2Uub2Zmc2V0LCB1cGRhdGVSYW5nZS5vZmZzZXQgKyB1cGRhdGVSYW5nZS5jb3VudCApICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlUmFuZ2UuY291bnQgPSAtIDE7IC8vIHJlc2V0IHJhbmdlXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gZ2V0KCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHRyZXR1cm4gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIGF0dHJpYnV0ZSApIHtcblxuXHRcdGlmICggYXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGUuZGF0YTtcblxuXHRcdHZhciBkYXRhID0gYnVmZmVycy5nZXQoIGF0dHJpYnV0ZSApO1xuXG5cdFx0aWYgKCBkYXRhICkge1xuXG5cdFx0XHRnbC5kZWxldGVCdWZmZXIoIGRhdGEuYnVmZmVyICk7XG5cblx0XHRcdGJ1ZmZlcnMuZGVsZXRlKCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBhdHRyaWJ1dGUsIGJ1ZmZlclR5cGUgKSB7XG5cblx0XHRpZiAoIGF0dHJpYnV0ZS5pc0ludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlICkgYXR0cmlidXRlID0gYXR0cmlidXRlLmRhdGE7XG5cblx0XHR2YXIgZGF0YSA9IGJ1ZmZlcnMuZ2V0KCBhdHRyaWJ1dGUgKTtcblxuXHRcdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRidWZmZXJzLnNldCggYXR0cmlidXRlLCBjcmVhdGVCdWZmZXIoIGF0dHJpYnV0ZSwgYnVmZmVyVHlwZSApICk7XG5cblx0XHR9IGVsc2UgaWYgKCBkYXRhLnZlcnNpb24gPCBhdHRyaWJ1dGUudmVyc2lvbiApIHtcblxuXHRcdFx0dXBkYXRlQnVmZmVyKCBkYXRhLmJ1ZmZlciwgYXR0cmlidXRlLCBidWZmZXJUeXBlICk7XG5cblx0XHRcdGRhdGEudmVyc2lvbiA9IGF0dHJpYnV0ZS52ZXJzaW9uO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0Z2V0OiBnZXQsXG5cdFx0cmVtb3ZlOiByZW1vdmUsXG5cdFx0dXBkYXRlOiB1cGRhdGVcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gUGxhbmVHZW9tZXRyeVxuXG5mdW5jdGlvbiBQbGFuZUdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BsYW5lR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBsYW5lQnVmZmVyR2VvbWV0cnkoIHdpZHRoLCBoZWlnaHQsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUGxhbmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblBsYW5lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVHZW9tZXRyeTtcblxuLy8gUGxhbmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBQbGFuZUJ1ZmZlckdlb21ldHJ5KCB3aWR0aCwgaGVpZ2h0LCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1BsYW5lQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR3aWR0aDogd2lkdGgsXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHNcblx0fTtcblxuXHR3aWR0aCA9IHdpZHRoIHx8IDE7XG5cdGhlaWdodCA9IGhlaWdodCB8fCAxO1xuXG5cdHZhciB3aWR0aF9oYWxmID0gd2lkdGggLyAyO1xuXHR2YXIgaGVpZ2h0X2hhbGYgPSBoZWlnaHQgLyAyO1xuXG5cdHZhciBncmlkWCA9IE1hdGguZmxvb3IoIHdpZHRoU2VnbWVudHMgKSB8fCAxO1xuXHR2YXIgZ3JpZFkgPSBNYXRoLmZsb29yKCBoZWlnaHRTZWdtZW50cyApIHx8IDE7XG5cblx0dmFyIGdyaWRYMSA9IGdyaWRYICsgMTtcblx0dmFyIGdyaWRZMSA9IGdyaWRZICsgMTtcblxuXHR2YXIgc2VnbWVudF93aWR0aCA9IHdpZHRoIC8gZ3JpZFg7XG5cdHZhciBzZWdtZW50X2hlaWdodCA9IGhlaWdodCAvIGdyaWRZO1xuXG5cdHZhciBpeCwgaXk7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGl5ID0gMDsgaXkgPCBncmlkWTE7IGl5ICsrICkge1xuXG5cdFx0dmFyIHkgPSBpeSAqIHNlZ21lbnRfaGVpZ2h0IC0gaGVpZ2h0X2hhbGY7XG5cblx0XHRmb3IgKCBpeCA9IDA7IGl4IDwgZ3JpZFgxOyBpeCArKyApIHtcblxuXHRcdFx0dmFyIHggPSBpeCAqIHNlZ21lbnRfd2lkdGggLSB3aWR0aF9oYWxmO1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAtIHksIDAgKTtcblxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cblx0XHRcdHV2cy5wdXNoKCBpeCAvIGdyaWRYICk7XG5cdFx0XHR1dnMucHVzaCggMSAtICggaXkgLyBncmlkWSApICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgZ3JpZFk7IGl5ICsrICkge1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IGdyaWRYOyBpeCArKyApIHtcblxuXHRcdFx0dmFyIGEgPSBpeCArIGdyaWRYMSAqIGl5O1xuXHRcdFx0dmFyIGIgPSBpeCArIGdyaWRYMSAqICggaXkgKyAxICk7XG5cdFx0XHR2YXIgYyA9ICggaXggKyAxICkgKyBncmlkWDEgKiAoIGl5ICsgMSApO1xuXHRcdFx0dmFyIGQgPSAoIGl4ICsgMSApICsgZ3JpZFgxICogaXk7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5QbGFuZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUGxhbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBQbGFuZUJ1ZmZlckdlb21ldHJ5O1xuXG52YXIgYWxwaGFtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB2VXYgKS5nO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGFtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BTFBIQU1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgYWxwaGF0ZXN0X2ZyYWdtZW50ID0gXCIjaWZkZWYgQUxQSEFURVNUXFxuXFx0aWYgKCBkaWZmdXNlQ29sb3IuYSA8IEFMUEhBVEVTVCApIGRpc2NhcmQ7XFxuI2VuZGlmXCI7XG5cbnZhciBhb21hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdGZsb2F0IGFtYmllbnRPY2NsdXNpb24gPSAoIHRleHR1cmUyRCggYW9NYXAsIHZVdjIgKS5yIC0gMS4wICkgKiBhb01hcEludGVuc2l0eSArIDEuMDtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKj0gYW1iaWVudE9jY2x1c2lvbjtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0VOVk1BUCApICYmIGRlZmluZWQoIFNUQU5EQVJEIClcXG5cXHRcXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZ2VvbWV0cnkudmlld0RpciApICk7XFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciAqPSBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGRvdE5WLCBhbWJpZW50T2NjbHVzaW9uLCBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgYW9tYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9BT01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGFvTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYW9NYXBJbnRlbnNpdHk7XFxuI2VuZGlmXCI7XG5cbnZhciBiZWdpbl92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWQgPSB2ZWMzKCBwb3NpdGlvbiApO1wiO1xuXG52YXIgYmVnaW5ub3JtYWxfdmVydGV4ID0gXCJ2ZWMzIG9iamVjdE5vcm1hbCA9IHZlYzMoIG5vcm1hbCApO1xcbiNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdHZlYzMgb2JqZWN0VGFuZ2VudCA9IHZlYzMoIHRhbmdlbnQueHl6ICk7XFxuI2VuZGlmXCI7XG5cbnZhciBic2RmcyA9IFwidmVjMiBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgdmVjNCBjMCA9IHZlYzQoIC0gMSwgLSAwLjAyNzUsIC0gMC41NzIsIDAuMDIyICk7XFxuXFx0Y29uc3QgdmVjNCBjMSA9IHZlYzQoIDEsIDAuMDQyNSwgMS4wNCwgLSAwLjA0ICk7XFxuXFx0dmVjNCByID0gcm91Z2huZXNzICogYzAgKyBjMTtcXG5cXHRmbG9hdCBhMDA0ID0gbWluKCByLnggKiByLngsIGV4cDIoIC0gOS4yOCAqIGRvdE5WICkgKSAqIHIueCArIHIueTtcXG5cXHRyZXR1cm4gdmVjMiggLTEuMDQsIDEuMDQgKSAqIGEwMDQgKyByLnp3O1xcbn1cXG5mbG9hdCBwdW5jdHVhbExpZ2h0SW50ZW5zaXR5VG9JcnJhZGlhbmNlRmFjdG9yKCBjb25zdCBpbiBmbG9hdCBsaWdodERpc3RhbmNlLCBjb25zdCBpbiBmbG9hdCBjdXRvZmZEaXN0YW5jZSwgY29uc3QgaW4gZmxvYXQgZGVjYXlFeHBvbmVudCApIHtcXG4jaWYgZGVmaW5lZCAoIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMgKVxcblxcdGZsb2F0IGRpc3RhbmNlRmFsbG9mZiA9IDEuMCAvIG1heCggcG93KCBsaWdodERpc3RhbmNlLCBkZWNheUV4cG9uZW50ICksIDAuMDEgKTtcXG5cXHRpZiggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgKSB7XFxuXFx0XFx0ZGlzdGFuY2VGYWxsb2ZmICo9IHBvdzIoIHNhdHVyYXRlKCAxLjAgLSBwb3c0KCBsaWdodERpc3RhbmNlIC8gY3V0b2ZmRGlzdGFuY2UgKSApICk7XFxuXFx0fVxcblxcdHJldHVybiBkaXN0YW5jZUZhbGxvZmY7XFxuI2Vsc2VcXG5cXHRpZiggY3V0b2ZmRGlzdGFuY2UgPiAwLjAgJiYgZGVjYXlFeHBvbmVudCA+IDAuMCApIHtcXG5cXHRcXHRyZXR1cm4gcG93KCBzYXR1cmF0ZSggLWxpZ2h0RGlzdGFuY2UgLyBjdXRvZmZEaXN0YW5jZSArIDEuMCApLCBkZWNheUV4cG9uZW50ICk7XFxuXFx0fVxcblxcdHJldHVybiAxLjA7XFxuI2VuZGlmXFxufVxcbnZlYzMgQlJERl9EaWZmdXNlX0xhbWJlcnQoIGNvbnN0IGluIHZlYzMgZGlmZnVzZUNvbG9yICkge1xcblxcdHJldHVybiBSRUNJUFJPQ0FMX1BJICogZGlmZnVzZUNvbG9yO1xcbn1cXG52ZWMzIEZfU2NobGljayggY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCBkb3RMSCApIHtcXG5cXHRmbG9hdCBmcmVzbmVsID0gZXhwMiggKCAtNS41NTQ3MyAqIGRvdExIIC0gNi45ODMxNiApICogZG90TEggKTtcXG5cXHRyZXR1cm4gKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiBmcmVzbmVsICsgc3BlY3VsYXJDb2xvcjtcXG59XFxudmVjMyBGX1NjaGxpY2tfUm91Z2huZXNzRGVwZW5kZW50KCBjb25zdCBpbiB2ZWMzIEYwLCBjb25zdCBpbiBmbG9hdCBkb3ROViwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGZyZXNuZWwgPSBleHAyKCAoIC01LjU1NDczICogZG90TlYgLSA2Ljk4MzE2ICkgKiBkb3ROViApO1xcblxcdHZlYzMgRnIgPSBtYXgoIHZlYzMoIDEuMCAtIHJvdWdobmVzcyApLCBGMCApIC0gRjA7XFxuXFx0cmV0dXJuIEZyICogZnJlc25lbCArIEYwO1xcbn1cXG5mbG9hdCBHX0dHWF9TbWl0aCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ2wgPSBkb3ROTCArIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TkwgKSApO1xcblxcdGZsb2F0IGd2ID0gZG90TlYgKyBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5WICkgKTtcXG5cXHRyZXR1cm4gMS4wIC8gKCBnbCAqIGd2ICk7XFxufVxcbmZsb2F0IEdfR0dYX1NtaXRoQ29ycmVsYXRlZCggY29uc3QgaW4gZmxvYXQgYWxwaGEsIGNvbnN0IGluIGZsb2F0IGRvdE5MLCBjb25zdCBpbiBmbG9hdCBkb3ROViApIHtcXG5cXHRmbG9hdCBhMiA9IHBvdzIoIGFscGhhICk7XFxuXFx0ZmxvYXQgZ3YgPSBkb3ROTCAqIHNxcnQoIGEyICsgKCAxLjAgLSBhMiApICogcG93MiggZG90TlYgKSApO1xcblxcdGZsb2F0IGdsID0gZG90TlYgKiBzcXJ0KCBhMiArICggMS4wIC0gYTIgKSAqIHBvdzIoIGRvdE5MICkgKTtcXG5cXHRyZXR1cm4gMC41IC8gbWF4KCBndiArIGdsLCBFUFNJTE9OICk7XFxufVxcbmZsb2F0IERfR0dYKCBjb25zdCBpbiBmbG9hdCBhbHBoYSwgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0ZmxvYXQgYTIgPSBwb3cyKCBhbHBoYSApO1xcblxcdGZsb2F0IGRlbm9tID0gcG93MiggZG90TkggKSAqICggYTIgLSAxLjAgKSArIDEuMDtcXG5cXHRyZXR1cm4gUkVDSVBST0NBTF9QSSAqIGEyIC8gcG93MiggZGVub20gKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX0dHWCggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBpbmNpZGVudExpZ2h0LCBjb25zdCBpbiB2ZWMzIHZpZXdEaXIsIGNvbnN0IGluIHZlYzMgbm9ybWFsLCBjb25zdCBpbiB2ZWMzIHNwZWN1bGFyQ29sb3IsIGNvbnN0IGluIGZsb2F0IHJvdWdobmVzcyApIHtcXG5cXHRmbG9hdCBhbHBoYSA9IHBvdzIoIHJvdWdobmVzcyApO1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyB2aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkwgPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGluY2lkZW50TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIG5vcm1hbCwgdmlld0RpciApICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19HR1hfU21pdGhDb3JyZWxhdGVkKCBhbHBoYSwgZG90TkwsIGRvdE5WICk7XFxuXFx0ZmxvYXQgRCA9IERfR0dYKCBhbHBoYSwgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxudmVjMiBMVENfVXYoIGNvbnN0IGluIHZlYzMgTiwgY29uc3QgaW4gdmVjMyBWLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0Y29uc3QgZmxvYXQgTFVUX1NJWkUgID0gNjQuMDtcXG5cXHRjb25zdCBmbG9hdCBMVVRfU0NBTEUgPSAoIExVVF9TSVpFIC0gMS4wICkgLyBMVVRfU0laRTtcXG5cXHRjb25zdCBmbG9hdCBMVVRfQklBUyAgPSAwLjUgLyBMVVRfU0laRTtcXG5cXHRmbG9hdCBkb3ROViA9IHNhdHVyYXRlKCBkb3QoIE4sIFYgKSApO1xcblxcdHZlYzIgdXYgPSB2ZWMyKCByb3VnaG5lc3MsIHNxcnQoIDEuMCAtIGRvdE5WICkgKTtcXG5cXHR1diA9IHV2ICogTFVUX1NDQUxFICsgTFVUX0JJQVM7XFxuXFx0cmV0dXJuIHV2O1xcbn1cXG5mbG9hdCBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIGNvbnN0IGluIHZlYzMgZiApIHtcXG5cXHRmbG9hdCBsID0gbGVuZ3RoKCBmICk7XFxuXFx0cmV0dXJuIG1heCggKCBsICogbCArIGYueiApIC8gKCBsICsgMS4wICksIDAuMCApO1xcbn1cXG52ZWMzIExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29uc3QgaW4gdmVjMyB2MSwgY29uc3QgaW4gdmVjMyB2MiApIHtcXG5cXHRmbG9hdCB4ID0gZG90KCB2MSwgdjIgKTtcXG5cXHRmbG9hdCB5ID0gYWJzKCB4ICk7XFxuXFx0ZmxvYXQgYSA9IDAuODU0Mzk4NSArICggMC40OTY1MTU1ICsgMC4wMTQ1MjA2ICogeSApICogeTtcXG5cXHRmbG9hdCBiID0gMy40MTc1OTQwICsgKCA0LjE2MTY3MjQgKyB5ICkgKiB5O1xcblxcdGZsb2F0IHYgPSBhIC8gYjtcXG5cXHRmbG9hdCB0aGV0YV9zaW50aGV0YSA9ICggeCA+IDAuMCApID8gdiA6IDAuNSAqIGludmVyc2VzcXJ0KCBtYXgoIDEuMCAtIHggKiB4LCAxZS03ICkgKSAtIHY7XFxuXFx0cmV0dXJuIGNyb3NzKCB2MSwgdjIgKSAqIHRoZXRhX3NpbnRoZXRhO1xcbn1cXG52ZWMzIExUQ19FdmFsdWF0ZSggY29uc3QgaW4gdmVjMyBOLCBjb25zdCBpbiB2ZWMzIFYsIGNvbnN0IGluIHZlYzMgUCwgY29uc3QgaW4gbWF0MyBtSW52LCBjb25zdCBpbiB2ZWMzIHJlY3RDb29yZHNbIDQgXSApIHtcXG5cXHR2ZWMzIHYxID0gcmVjdENvb3Jkc1sgMSBdIC0gcmVjdENvb3Jkc1sgMCBdO1xcblxcdHZlYzMgdjIgPSByZWN0Q29vcmRzWyAzIF0gLSByZWN0Q29vcmRzWyAwIF07XFxuXFx0dmVjMyBsaWdodE5vcm1hbCA9IGNyb3NzKCB2MSwgdjIgKTtcXG5cXHRpZiggZG90KCBsaWdodE5vcm1hbCwgUCAtIHJlY3RDb29yZHNbIDAgXSApIDwgMC4wICkgcmV0dXJuIHZlYzMoIDAuMCApO1xcblxcdHZlYzMgVDEsIFQyO1xcblxcdFQxID0gbm9ybWFsaXplKCBWIC0gTiAqIGRvdCggViwgTiApICk7XFxuXFx0VDIgPSAtIGNyb3NzKCBOLCBUMSApO1xcblxcdG1hdDMgbWF0ID0gbUludiAqIHRyYW5zcG9zZU1hdDMoIG1hdDMoIFQxLCBUMiwgTiApICk7XFxuXFx0dmVjMyBjb29yZHNbIDQgXTtcXG5cXHRjb29yZHNbIDAgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMCBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMSBdID0gbWF0ICogKCByZWN0Q29vcmRzWyAxIF0gLSBQICk7XFxuXFx0Y29vcmRzWyAyIF0gPSBtYXQgKiAoIHJlY3RDb29yZHNbIDIgXSAtIFAgKTtcXG5cXHRjb29yZHNbIDMgXSA9IG1hdCAqICggcmVjdENvb3Jkc1sgMyBdIC0gUCApO1xcblxcdGNvb3Jkc1sgMCBdID0gbm9ybWFsaXplKCBjb29yZHNbIDAgXSApO1xcblxcdGNvb3Jkc1sgMSBdID0gbm9ybWFsaXplKCBjb29yZHNbIDEgXSApO1xcblxcdGNvb3Jkc1sgMiBdID0gbm9ybWFsaXplKCBjb29yZHNbIDIgXSApO1xcblxcdGNvb3Jkc1sgMyBdID0gbm9ybWFsaXplKCBjb29yZHNbIDMgXSApO1xcblxcdHZlYzMgdmVjdG9yRm9ybUZhY3RvciA9IHZlYzMoIDAuMCApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDAgXSwgY29vcmRzWyAxIF0gKTtcXG5cXHR2ZWN0b3JGb3JtRmFjdG9yICs9IExUQ19FZGdlVmVjdG9yRm9ybUZhY3RvciggY29vcmRzWyAxIF0sIGNvb3Jkc1sgMiBdICk7XFxuXFx0dmVjdG9yRm9ybUZhY3RvciArPSBMVENfRWRnZVZlY3RvckZvcm1GYWN0b3IoIGNvb3Jkc1sgMiBdLCBjb29yZHNbIDMgXSApO1xcblxcdHZlY3RvckZvcm1GYWN0b3IgKz0gTFRDX0VkZ2VWZWN0b3JGb3JtRmFjdG9yKCBjb29yZHNbIDMgXSwgY29vcmRzWyAwIF0gKTtcXG5cXHRmbG9hdCByZXN1bHQgPSBMVENfQ2xpcHBlZFNwaGVyZUZvcm1GYWN0b3IoIHZlY3RvckZvcm1GYWN0b3IgKTtcXG5cXHRyZXR1cm4gdmVjMyggcmVzdWx0ICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9HR1hfRW52aXJvbm1lbnQoIGNvbnN0IGluIHZlYzMgdmlld0RpciwgY29uc3QgaW4gdmVjMyBub3JtYWwsIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzICkge1xcblxcdGZsb2F0IGRvdE5WID0gc2F0dXJhdGUoIGRvdCggbm9ybWFsLCB2aWV3RGlyICkgKTtcXG5cXHR2ZWMyIGJyZGYgPSBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHRyZXR1cm4gc3BlY3VsYXJDb2xvciAqIGJyZGYueCArIGJyZGYueTtcXG59XFxudm9pZCBCUkRGX1NwZWN1bGFyX011bHRpc2NhdHRlcmluZ19FbnZpcm9ubWVudCggY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gdmVjMyBzcGVjdWxhckNvbG9yLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGlub3V0IHZlYzMgc2luZ2xlU2NhdHRlciwgaW5vdXQgdmVjMyBtdWx0aVNjYXR0ZXIgKSB7XFxuXFx0ZmxvYXQgZG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGlja19Sb3VnaG5lc3NEZXBlbmRlbnQoIHNwZWN1bGFyQ29sb3IsIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMyIGJyZGYgPSBpbnRlZ3JhdGVTcGVjdWxhckJSREYoIGRvdE5WLCByb3VnaG5lc3MgKTtcXG5cXHR2ZWMzIEZzc0VzcyA9IEYgKiBicmRmLnggKyBicmRmLnk7XFxuXFx0ZmxvYXQgRXNzID0gYnJkZi54ICsgYnJkZi55O1xcblxcdGZsb2F0IEVtcyA9IDEuMCAtIEVzcztcXG5cXHR2ZWMzIEZhdmcgPSBzcGVjdWxhckNvbG9yICsgKCAxLjAgLSBzcGVjdWxhckNvbG9yICkgKiAwLjA0NzYxOTtcXHR2ZWMzIEZtcyA9IEZzc0VzcyAqIEZhdmcgLyAoIDEuMCAtIEVtcyAqIEZhdmcgKTtcXG5cXHRzaW5nbGVTY2F0dGVyICs9IEZzc0VzcztcXG5cXHRtdWx0aVNjYXR0ZXIgKz0gRm1zICogRW1zO1xcbn1cXG5mbG9hdCBHX0JsaW5uUGhvbmdfSW1wbGljaXQoICkge1xcblxcdHJldHVybiAwLjI1O1xcbn1cXG5mbG9hdCBEX0JsaW5uUGhvbmcoIGNvbnN0IGluIGZsb2F0IHNoaW5pbmVzcywgY29uc3QgaW4gZmxvYXQgZG90TkggKSB7XFxuXFx0cmV0dXJuIFJFQ0lQUk9DQUxfUEkgKiAoIHNoaW5pbmVzcyAqIDAuNSArIDEuMCApICogcG93KCBkb3ROSCwgc2hpbmluZXNzICk7XFxufVxcbnZlYzMgQlJERl9TcGVjdWxhcl9CbGlublBob25nKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGluY2lkZW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIHZlYzMgc3BlY3VsYXJDb2xvciwgY29uc3QgaW4gZmxvYXQgc2hpbmluZXNzICkge1xcblxcdHZlYzMgaGFsZkRpciA9IG5vcm1hbGl6ZSggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24gKyBnZW9tZXRyeS52aWV3RGlyICk7XFxuXFx0ZmxvYXQgZG90TkggPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhhbGZEaXIgKSApO1xcblxcdGZsb2F0IGRvdExIID0gc2F0dXJhdGUoIGRvdCggaW5jaWRlbnRMaWdodC5kaXJlY3Rpb24sIGhhbGZEaXIgKSApO1xcblxcdHZlYzMgRiA9IEZfU2NobGljayggc3BlY3VsYXJDb2xvciwgZG90TEggKTtcXG5cXHRmbG9hdCBHID0gR19CbGlublBob25nX0ltcGxpY2l0KCApO1xcblxcdGZsb2F0IEQgPSBEX0JsaW5uUGhvbmcoIHNoaW5pbmVzcywgZG90TkggKTtcXG5cXHRyZXR1cm4gRiAqICggRyAqIEQgKTtcXG59XFxuZmxvYXQgR0dYUm91Z2huZXNzVG9CbGlubkV4cG9uZW50KCBjb25zdCBpbiBmbG9hdCBnZ3hSb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuICggMi4wIC8gcG93MiggZ2d4Um91Z2huZXNzICsgMC4wMDAxICkgLSAyLjAgKTtcXG59XFxuZmxvYXQgQmxpbm5FeHBvbmVudFRvR0dYUm91Z2huZXNzKCBjb25zdCBpbiBmbG9hdCBibGlubkV4cG9uZW50ICkge1xcblxcdHJldHVybiBzcXJ0KCAyLjAgLyAoIGJsaW5uRXhwb25lbnQgKyAyLjAgKSApO1xcbn1cXG4jaWYgZGVmaW5lZCggVVNFX1NIRUVOIClcXG5mbG9hdCBEX0NoYXJsaWUoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOb0gpIHtcXG5cXHRmbG9hdCBpbnZBbHBoYSAgPSAxLjAgLyByb3VnaG5lc3M7XFxuXFx0ZmxvYXQgY29zMmggPSBOb0ggKiBOb0g7XFxuXFx0ZmxvYXQgc2luMmggPSBtYXgoMS4wIC0gY29zMmgsIDAuMDA3ODEyNSk7XFx0cmV0dXJuICgyLjAgKyBpbnZBbHBoYSkgKiBwb3coc2luMmgsIGludkFscGhhICogMC41KSAvICgyLjAgKiBQSSk7XFxufVxcbmZsb2F0IFZfTmV1YmVsdChmbG9hdCBOb1YsIGZsb2F0IE5vTCkge1xcblxcdHJldHVybiBzYXR1cmF0ZSgxLjAgLyAoNC4wICogKE5vTCArIE5vViAtIE5vTCAqIE5vVikpKTtcXG59XFxudmVjMyBCUkRGX1NwZWN1bGFyX1NoZWVuKCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MsIGNvbnN0IGluIHZlYzMgTCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgdmVjMyBzcGVjdWxhckNvbG9yICkge1xcblxcdHZlYzMgTiA9IGdlb21ldHJ5Lm5vcm1hbDtcXG5cXHR2ZWMzIFYgPSBnZW9tZXRyeS52aWV3RGlyO1xcblxcdHZlYzMgSCA9IG5vcm1hbGl6ZSggViArIEwgKTtcXG5cXHRmbG9hdCBkb3ROSCA9IHNhdHVyYXRlKCBkb3QoIE4sIEggKSApO1xcblxcdHJldHVybiBzcGVjdWxhckNvbG9yICogRF9DaGFybGllKCByb3VnaG5lc3MsIGRvdE5IICkgKiBWX05ldWJlbHQoIGRvdChOLCBWKSwgZG90KE4sIEwpICk7XFxufVxcbiNlbmRpZlwiO1xuXG52YXIgYnVtcG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0JVTVBNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBidW1wTWFwO1xcblxcdHVuaWZvcm0gZmxvYXQgYnVtcFNjYWxlO1xcblxcdHZlYzIgZEhkeHlfZndkKCkge1xcblxcdFxcdHZlYzIgZFNUZHggPSBkRmR4KCB2VXYgKTtcXG5cXHRcXHR2ZWMyIGRTVGR5ID0gZEZkeSggdlV2ICk7XFxuXFx0XFx0ZmxvYXQgSGxsID0gYnVtcFNjYWxlICogdGV4dHVyZTJEKCBidW1wTWFwLCB2VXYgKS54O1xcblxcdFxcdGZsb2F0IGRCeCA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHggKS54IC0gSGxsO1xcblxcdFxcdGZsb2F0IGRCeSA9IGJ1bXBTY2FsZSAqIHRleHR1cmUyRCggYnVtcE1hcCwgdlV2ICsgZFNUZHkgKS54IC0gSGxsO1xcblxcdFxcdHJldHVybiB2ZWMyKCBkQngsIGRCeSApO1xcblxcdH1cXG5cXHR2ZWMzIHBlcnR1cmJOb3JtYWxBcmIoIHZlYzMgc3VyZl9wb3MsIHZlYzMgc3VyZl9ub3JtLCB2ZWMyIGRIZHh5ICkge1xcblxcdFxcdHZlYzMgdlNpZ21hWCA9IHZlYzMoIGRGZHgoIHN1cmZfcG9zLnggKSwgZEZkeCggc3VyZl9wb3MueSApLCBkRmR4KCBzdXJmX3Bvcy56ICkgKTtcXG5cXHRcXHR2ZWMzIHZTaWdtYVkgPSB2ZWMzKCBkRmR5KCBzdXJmX3Bvcy54ICksIGRGZHkoIHN1cmZfcG9zLnkgKSwgZEZkeSggc3VyZl9wb3MueiApICk7XFxuXFx0XFx0dmVjMyB2TiA9IHN1cmZfbm9ybTtcXG5cXHRcXHR2ZWMzIFIxID0gY3Jvc3MoIHZTaWdtYVksIHZOICk7XFxuXFx0XFx0dmVjMyBSMiA9IGNyb3NzKCB2TiwgdlNpZ21hWCApO1xcblxcdFxcdGZsb2F0IGZEZXQgPSBkb3QoIHZTaWdtYVgsIFIxICk7XFxuXFx0XFx0ZkRldCAqPSAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0dmVjMyB2R3JhZCA9IHNpZ24oIGZEZXQgKSAqICggZEhkeHkueCAqIFIxICsgZEhkeHkueSAqIFIyICk7XFxuXFx0XFx0cmV0dXJuIG5vcm1hbGl6ZSggYWJzKCBmRGV0ICkgKiBzdXJmX25vcm0gLSB2R3JhZCApO1xcblxcdH1cXG4jZW5kaWZcIjtcblxudmFyIGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmVjNCBwbGFuZTtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpICsrICkge1xcblxcdFxcdHBsYW5lID0gY2xpcHBpbmdQbGFuZXNbIGkgXTtcXG5cXHRcXHRpZiAoIGRvdCggdkNsaXBQb3NpdGlvbiwgcGxhbmUueHl6ICkgPiBwbGFuZS53ICkgZGlzY2FyZDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjaWYgVU5JT05fQ0xJUFBJTkdfUExBTkVTIDwgTlVNX0NMSVBQSU5HX1BMQU5FU1xcblxcdFxcdGJvb2wgY2xpcHBlZCA9IHRydWU7XFxuXFx0XFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdFxcdGZvciAoIGludCBpID0gVU5JT05fQ0xJUFBJTkdfUExBTkVTOyBpIDwgTlVNX0NMSVBQSU5HX1BMQU5FUzsgaSArKyApIHtcXG5cXHRcXHRcXHRwbGFuZSA9IGNsaXBwaW5nUGxhbmVzWyBpIF07XFxuXFx0XFx0XFx0Y2xpcHBlZCA9ICggZG90KCB2Q2xpcFBvc2l0aW9uLCBwbGFuZS54eXogKSA+IHBsYW5lLncgKSAmJiBjbGlwcGVkO1xcblxcdFxcdH1cXG5cXHRcXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdFxcdGlmICggY2xpcHBlZCApIGRpc2NhcmQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dmFyeWluZyB2ZWMzIHZDbGlwUG9zaXRpb247XFxuXFx0dW5pZm9ybSB2ZWM0IGNsaXBwaW5nUGxhbmVzWyBOVU1fQ0xJUFBJTkdfUExBTkVTIF07XFxuI2VuZGlmXCI7XG5cbnZhciBjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXggPSBcIiNpZiBOVU1fQ0xJUFBJTkdfUExBTkVTID4gMFxcblxcdHZhcnlpbmcgdmVjMyB2Q2xpcFBvc2l0aW9uO1xcbiNlbmRpZlwiO1xuXG52YXIgY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCA9IFwiI2lmIE5VTV9DTElQUElOR19QTEFORVMgPiAwXFxuXFx0dkNsaXBQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdGRpZmZ1c2VDb2xvci5yZ2IgKj0gdkNvbG9yO1xcbiNlbmRpZlwiO1xuXG52YXIgY29sb3JfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9DT0xPUlxcblxcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XFxuI2VuZGlmXCI7XG5cbnZhciBjb2xvcl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfQ09MT1JcXG5cXHR2Q29sb3IueHl6ID0gY29sb3IueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgY29tbW9uID0gXCIjZGVmaW5lIFBJIDMuMTQxNTkyNjUzNTlcXG4jZGVmaW5lIFBJMiA2LjI4MzE4NTMwNzE4XFxuI2RlZmluZSBQSV9IQUxGIDEuNTcwNzk2MzI2Nzk0OVxcbiNkZWZpbmUgUkVDSVBST0NBTF9QSSAwLjMxODMwOTg4NjE4XFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0XFxuI2RlZmluZSBMT0cyIDEuNDQyNjk1XFxuI2RlZmluZSBFUFNJTE9OIDFlLTZcXG4jaWZuZGVmIHNhdHVyYXRlXFxuI2RlZmluZSBzYXR1cmF0ZShhKSBjbGFtcCggYSwgMC4wLCAxLjAgKVxcbiNlbmRpZlxcbiNkZWZpbmUgd2hpdGVDb21wbGVtZW50KGEpICggMS4wIC0gc2F0dXJhdGUoIGEgKSApXFxuZmxvYXQgcG93MiggY29uc3QgaW4gZmxvYXQgeCApIHsgcmV0dXJuIHgqeDsgfVxcbmZsb2F0IHBvdzMoIGNvbnN0IGluIGZsb2F0IHggKSB7IHJldHVybiB4KngqeDsgfVxcbmZsb2F0IHBvdzQoIGNvbnN0IGluIGZsb2F0IHggKSB7IGZsb2F0IHgyID0geCp4OyByZXR1cm4geDIqeDI7IH1cXG5mbG9hdCBhdmVyYWdlKCBjb25zdCBpbiB2ZWMzIGNvbG9yICkgeyByZXR1cm4gZG90KCBjb2xvciwgdmVjMyggMC4zMzMzICkgKTsgfVxcbmhpZ2hwIGZsb2F0IHJhbmQoIGNvbnN0IGluIHZlYzIgdXYgKSB7XFxuXFx0Y29uc3QgaGlnaHAgZmxvYXQgYSA9IDEyLjk4OTgsIGIgPSA3OC4yMzMsIGMgPSA0Mzc1OC41NDUzO1xcblxcdGhpZ2hwIGZsb2F0IGR0ID0gZG90KCB1di54eSwgdmVjMiggYSxiICkgKSwgc24gPSBtb2QoIGR0LCBQSSApO1xcblxcdHJldHVybiBmcmFjdChzaW4oc24pICogYyk7XFxufVxcbiNpZmRlZiBISUdIX1BSRUNJU0lPTlxcblxcdGZsb2F0IHByZWNpc2lvblNhZmVMZW5ndGgoIHZlYzMgdiApIHsgcmV0dXJuIGxlbmd0aCggdiApOyB9XFxuI2Vsc2VcXG5cXHRmbG9hdCBtYXgzKCB2ZWMzIHYgKSB7IHJldHVybiBtYXgoIG1heCggdi54LCB2LnkgKSwgdi56ICk7IH1cXG5cXHRmbG9hdCBwcmVjaXNpb25TYWZlTGVuZ3RoKCB2ZWMzIHYgKSB7XFxuXFx0XFx0ZmxvYXQgbWF4Q29tcG9uZW50ID0gbWF4MyggYWJzKCB2ICkgKTtcXG5cXHRcXHRyZXR1cm4gbGVuZ3RoKCB2IC8gbWF4Q29tcG9uZW50ICkgKiBtYXhDb21wb25lbnQ7XFxuXFx0fVxcbiNlbmRpZlxcbnN0cnVjdCBJbmNpZGVudExpZ2h0IHtcXG5cXHR2ZWMzIGNvbG9yO1xcblxcdHZlYzMgZGlyZWN0aW9uO1xcblxcdGJvb2wgdmlzaWJsZTtcXG59O1xcbnN0cnVjdCBSZWZsZWN0ZWRMaWdodCB7XFxuXFx0dmVjMyBkaXJlY3REaWZmdXNlO1xcblxcdHZlYzMgZGlyZWN0U3BlY3VsYXI7XFxuXFx0dmVjMyBpbmRpcmVjdERpZmZ1c2U7XFxuXFx0dmVjMyBpbmRpcmVjdFNwZWN1bGFyO1xcbn07XFxuc3RydWN0IEdlb21ldHJpY0NvbnRleHQge1xcblxcdHZlYzMgcG9zaXRpb247XFxuXFx0dmVjMyBub3JtYWw7XFxuXFx0dmVjMyB2aWV3RGlyO1xcbiNpZmRlZiBDTEVBUkNPQVRcXG5cXHR2ZWMzIGNsZWFyY29hdE5vcm1hbDtcXG4jZW5kaWZcXG59O1xcbnZlYzMgdHJhbnNmb3JtRGlyZWN0aW9uKCBpbiB2ZWMzIGRpciwgaW4gbWF0NCBtYXRyaXggKSB7XFxuXFx0cmV0dXJuIG5vcm1hbGl6ZSggKCBtYXRyaXggKiB2ZWM0KCBkaXIsIDAuMCApICkueHl6ICk7XFxufVxcbnZlYzMgaW52ZXJzZVRyYW5zZm9ybURpcmVjdGlvbiggaW4gdmVjMyBkaXIsIGluIG1hdDQgbWF0cml4ICkge1xcblxcdHJldHVybiBub3JtYWxpemUoICggdmVjNCggZGlyLCAwLjAgKSAqIG1hdHJpeCApLnh5eiApO1xcbn1cXG52ZWMzIHByb2plY3RPblBsYW5lKGluIHZlYzMgcG9pbnQsIGluIHZlYzMgcG9pbnRPblBsYW5lLCBpbiB2ZWMzIHBsYW5lTm9ybWFsICkge1xcblxcdGZsb2F0IGRpc3RhbmNlID0gZG90KCBwbGFuZU5vcm1hbCwgcG9pbnQgLSBwb2ludE9uUGxhbmUgKTtcXG5cXHRyZXR1cm4gLSBkaXN0YW5jZSAqIHBsYW5lTm9ybWFsICsgcG9pbnQ7XFxufVxcbmZsb2F0IHNpZGVPZlBsYW5lKCBpbiB2ZWMzIHBvaW50LCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRyZXR1cm4gc2lnbiggZG90KCBwb2ludCAtIHBvaW50T25QbGFuZSwgcGxhbmVOb3JtYWwgKSApO1xcbn1cXG52ZWMzIGxpbmVQbGFuZUludGVyc2VjdCggaW4gdmVjMyBwb2ludE9uTGluZSwgaW4gdmVjMyBsaW5lRGlyZWN0aW9uLCBpbiB2ZWMzIHBvaW50T25QbGFuZSwgaW4gdmVjMyBwbGFuZU5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbGluZURpcmVjdGlvbiAqICggZG90KCBwbGFuZU5vcm1hbCwgcG9pbnRPblBsYW5lIC0gcG9pbnRPbkxpbmUgKSAvIGRvdCggcGxhbmVOb3JtYWwsIGxpbmVEaXJlY3Rpb24gKSApICsgcG9pbnRPbkxpbmU7XFxufVxcbm1hdDMgdHJhbnNwb3NlTWF0MyggY29uc3QgaW4gbWF0MyBtICkge1xcblxcdG1hdDMgdG1wO1xcblxcdHRtcFsgMCBdID0gdmVjMyggbVsgMCBdLngsIG1bIDEgXS54LCBtWyAyIF0ueCApO1xcblxcdHRtcFsgMSBdID0gdmVjMyggbVsgMCBdLnksIG1bIDEgXS55LCBtWyAyIF0ueSApO1xcblxcdHRtcFsgMiBdID0gdmVjMyggbVsgMCBdLnosIG1bIDEgXS56LCBtWyAyIF0ueiApO1xcblxcdHJldHVybiB0bXA7XFxufVxcbmZsb2F0IGxpbmVhclRvUmVsYXRpdmVMdW1pbmFuY2UoIGNvbnN0IGluIHZlYzMgY29sb3IgKSB7XFxuXFx0dmVjMyB3ZWlnaHRzID0gdmVjMyggMC4yMTI2LCAwLjcxNTIsIDAuMDcyMiApO1xcblxcdHJldHVybiBkb3QoIHdlaWdodHMsIGNvbG9yLnJnYiApO1xcbn1cXG5ib29sIGlzUGVyc3BlY3RpdmVNYXRyaXgoIG1hdDQgbSApIHtcXG4gIHJldHVybiBtWyAyIF1bIDMgXSA9PSAtIDEuMDtcXG59XCI7XG5cbnZhciBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQgPSBcIiNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFX1VWXFxuI2RlZmluZSBjdWJlVVZfbWF4TWlwTGV2ZWwgOC4wXFxuI2RlZmluZSBjdWJlVVZfbWluTWlwTGV2ZWwgNC4wXFxuI2RlZmluZSBjdWJlVVZfbWF4VGlsZVNpemUgMjU2LjBcXG4jZGVmaW5lIGN1YmVVVl9taW5UaWxlU2l6ZSAxNi4wXFxuZmxvYXQgZ2V0RmFjZSh2ZWMzIGRpcmVjdGlvbikge1xcbiAgICB2ZWMzIGFic0RpcmVjdGlvbiA9IGFicyhkaXJlY3Rpb24pO1xcbiAgICBmbG9hdCBmYWNlID0gLTEuMDtcXG4gICAgaWYgKGFic0RpcmVjdGlvbi54ID4gYWJzRGlyZWN0aW9uLnopIHtcXG4gICAgICBpZiAoYWJzRGlyZWN0aW9uLnggPiBhYnNEaXJlY3Rpb24ueSlcXG4gICAgICAgIGZhY2UgPSBkaXJlY3Rpb24ueCA+IDAuMCA/IDAuMCA6IDMuMDtcXG4gICAgICBlbHNlXFxuICAgICAgICBmYWNlID0gZGlyZWN0aW9uLnkgPiAwLjAgPyAxLjAgOiA0LjA7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgaWYgKGFic0RpcmVjdGlvbi56ID4gYWJzRGlyZWN0aW9uLnkpXFxuICAgICAgICBmYWNlID0gZGlyZWN0aW9uLnogPiAwLjAgPyAyLjAgOiA1LjA7XFxuICAgICAgZWxzZVxcbiAgICAgICAgZmFjZSA9IGRpcmVjdGlvbi55ID4gMC4wID8gMS4wIDogNC4wO1xcbiAgICB9XFxuICAgIHJldHVybiBmYWNlO1xcbn1cXG52ZWMyIGdldFVWKHZlYzMgZGlyZWN0aW9uLCBmbG9hdCBmYWNlKSB7XFxuICAgIHZlYzIgdXY7XFxuICAgIGlmIChmYWNlID09IDAuMCkge1xcbiAgICAgIHV2ID0gdmVjMigtZGlyZWN0aW9uLnosIGRpcmVjdGlvbi55KSAvIGFicyhkaXJlY3Rpb24ueCk7XFxuICAgIH0gZWxzZSBpZiAoZmFjZSA9PSAxLjApIHtcXG4gICAgICB1diA9IHZlYzIoZGlyZWN0aW9uLngsIC1kaXJlY3Rpb24ueikgLyBhYnMoZGlyZWN0aW9uLnkpO1xcbiAgICB9IGVsc2UgaWYgKGZhY2UgPT0gMi4wKSB7XFxuICAgICAgdXYgPSBkaXJlY3Rpb24ueHkgLyBhYnMoZGlyZWN0aW9uLnopO1xcbiAgICB9IGVsc2UgaWYgKGZhY2UgPT0gMy4wKSB7XFxuICAgICAgdXYgPSB2ZWMyKGRpcmVjdGlvbi56LCBkaXJlY3Rpb24ueSkgLyBhYnMoZGlyZWN0aW9uLngpO1xcbiAgICB9IGVsc2UgaWYgKGZhY2UgPT0gNC4wKSB7XFxuICAgICAgdXYgPSBkaXJlY3Rpb24ueHogLyBhYnMoZGlyZWN0aW9uLnkpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgIHV2ID0gdmVjMigtZGlyZWN0aW9uLngsIGRpcmVjdGlvbi55KSAvIGFicyhkaXJlY3Rpb24ueik7XFxuICAgIH1cXG4gICAgcmV0dXJuIDAuNSAqICh1diArIDEuMCk7XFxufVxcbnZlYzMgYmlsaW5lYXJDdWJlVVYoc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBkaXJlY3Rpb24sIGZsb2F0IG1pcEludCkge1xcbiAgZmxvYXQgZmFjZSA9IGdldEZhY2UoZGlyZWN0aW9uKTtcXG4gIGZsb2F0IGZpbHRlckludCA9IG1heChjdWJlVVZfbWluTWlwTGV2ZWwgLSBtaXBJbnQsIDAuMCk7XFxuICBtaXBJbnQgPSBtYXgobWlwSW50LCBjdWJlVVZfbWluTWlwTGV2ZWwpO1xcbiAgZmxvYXQgZmFjZVNpemUgPSBleHAyKG1pcEludCk7XFxuICBmbG9hdCB0ZXhlbFNpemUgPSAxLjAgLyAoMy4wICogY3ViZVVWX21heFRpbGVTaXplKTtcXG4gIHZlYzIgdXYgPSBnZXRVVihkaXJlY3Rpb24sIGZhY2UpICogKGZhY2VTaXplIC0gMS4wKTtcXG4gIHZlYzIgZiA9IGZyYWN0KHV2KTtcXG4gIHV2ICs9IDAuNSAtIGY7XFxuICBpZiAoZmFjZSA+IDIuMCkge1xcbiAgICB1di55ICs9IGZhY2VTaXplO1xcbiAgICBmYWNlIC09IDMuMDtcXG4gIH1cXG4gIHV2LnggKz0gZmFjZSAqIGZhY2VTaXplO1xcbiAgaWYobWlwSW50IDwgY3ViZVVWX21heE1pcExldmVsKXtcXG4gICAgdXYueSArPSAyLjAgKiBjdWJlVVZfbWF4VGlsZVNpemU7XFxuICB9XFxuICB1di55ICs9IGZpbHRlckludCAqIDIuMCAqIGN1YmVVVl9taW5UaWxlU2l6ZTtcXG4gIHV2LnggKz0gMy4wICogbWF4KDAuMCwgY3ViZVVWX21heFRpbGVTaXplIC0gMi4wICogZmFjZVNpemUpO1xcbiAgdXYgKj0gdGV4ZWxTaXplO1xcbiAgdmVjMyB0bCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXYpKS5yZ2I7XFxuICB1di54ICs9IHRleGVsU2l6ZTtcXG4gIHZlYzMgdHIgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2KSkucmdiO1xcbiAgdXYueSArPSB0ZXhlbFNpemU7XFxuICB2ZWMzIGJyID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dikpLnJnYjtcXG4gIHV2LnggLT0gdGV4ZWxTaXplO1xcbiAgdmVjMyBibCA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXYpKS5yZ2I7XFxuICB2ZWMzIHRtID0gbWl4KHRsLCB0ciwgZi54KTtcXG4gIHZlYzMgYm0gPSBtaXgoYmwsIGJyLCBmLngpO1xcbiAgcmV0dXJuIG1peCh0bSwgYm0sIGYueSk7XFxufVxcbiNkZWZpbmUgcjAgMS4wXFxuI2RlZmluZSB2MCAwLjMzOVxcbiNkZWZpbmUgbTAgLTIuMFxcbiNkZWZpbmUgcjEgMC44XFxuI2RlZmluZSB2MSAwLjI3NlxcbiNkZWZpbmUgbTEgLTEuMFxcbiNkZWZpbmUgcjQgMC40XFxuI2RlZmluZSB2NCAwLjA0NlxcbiNkZWZpbmUgbTQgMi4wXFxuI2RlZmluZSByNSAwLjMwNVxcbiNkZWZpbmUgdjUgMC4wMTZcXG4jZGVmaW5lIG01IDMuMFxcbiNkZWZpbmUgcjYgMC4yMVxcbiNkZWZpbmUgdjYgMC4wMDM4XFxuI2RlZmluZSBtNiA0LjBcXG5mbG9hdCByb3VnaG5lc3NUb01pcChmbG9hdCByb3VnaG5lc3MpIHtcXG4gIGZsb2F0IG1pcCA9IDAuMDtcXG4gIGlmIChyb3VnaG5lc3MgPj0gcjEpIHtcXG4gICAgbWlwID0gKHIwIC0gcm91Z2huZXNzKSAqIChtMSAtIG0wKSAvIChyMCAtIHIxKSArIG0wO1xcbiAgfSBlbHNlIGlmIChyb3VnaG5lc3MgPj0gcjQpIHtcXG4gICAgbWlwID0gKHIxIC0gcm91Z2huZXNzKSAqIChtNCAtIG0xKSAvIChyMSAtIHI0KSArIG0xO1xcbiAgfSBlbHNlIGlmIChyb3VnaG5lc3MgPj0gcjUpIHtcXG4gICAgbWlwID0gKHI0IC0gcm91Z2huZXNzKSAqIChtNSAtIG00KSAvIChyNCAtIHI1KSArIG00O1xcbiAgfSBlbHNlIGlmIChyb3VnaG5lc3MgPj0gcjYpIHtcXG4gICAgbWlwID0gKHI1IC0gcm91Z2huZXNzKSAqIChtNiAtIG01KSAvIChyNSAtIHI2KSArIG01O1xcbiAgfSBlbHNlIHtcXG4gICAgbWlwID0gLTIuMCAqIGxvZzIoMS4xNiAqIHJvdWdobmVzcyk7ICB9XFxuICByZXR1cm4gbWlwO1xcbn1cXG52ZWM0IHRleHR1cmVDdWJlVVYoc2FtcGxlcjJEIGVudk1hcCwgdmVjMyBzYW1wbGVEaXIsIGZsb2F0IHJvdWdobmVzcykge1xcbiAgZmxvYXQgbWlwID0gY2xhbXAocm91Z2huZXNzVG9NaXAocm91Z2huZXNzKSwgbTAsIGN1YmVVVl9tYXhNaXBMZXZlbCk7XFxuICBmbG9hdCBtaXBGID0gZnJhY3QobWlwKTtcXG4gIGZsb2F0IG1pcEludCA9IGZsb29yKG1pcCk7XFxuICB2ZWMzIGNvbG9yMCA9IGJpbGluZWFyQ3ViZVVWKGVudk1hcCwgc2FtcGxlRGlyLCBtaXBJbnQpO1xcbiAgaWYgKG1pcEYgPT0gMC4wKSB7XFxuICAgIHJldHVybiB2ZWM0KGNvbG9yMCwgMS4wKTtcXG4gIH0gZWxzZSB7XFxuICAgIHZlYzMgY29sb3IxID0gYmlsaW5lYXJDdWJlVVYoZW52TWFwLCBzYW1wbGVEaXIsIG1pcEludCArIDEuMCk7XFxuICAgIHJldHVybiB2ZWM0KG1peChjb2xvcjAsIGNvbG9yMSwgbWlwRiksIDEuMCk7XFxuICB9XFxufVxcbiNlbmRpZlwiO1xuXG52YXIgZGVmYXVsdG5vcm1hbF92ZXJ0ZXggPSBcInZlYzMgdHJhbnNmb3JtZWROb3JtYWwgPSBvYmplY3ROb3JtYWw7XFxuI2lmZGVmIFVTRV9JTlNUQU5DSU5HXFxuXFx0bWF0MyBtID0gbWF0MyggaW5zdGFuY2VNYXRyaXggKTtcXG5cXHR0cmFuc2Zvcm1lZE5vcm1hbCAvPSB2ZWMzKCBkb3QoIG1bIDAgXSwgbVsgMCBdICksIGRvdCggbVsgMSBdLCBtWyAxIF0gKSwgZG90KCBtWyAyIF0sIG1bIDIgXSApICk7XFxuXFx0dHJhbnNmb3JtZWROb3JtYWwgPSBtICogdHJhbnNmb3JtZWROb3JtYWw7XFxuI2VuZGlmXFxudHJhbnNmb3JtZWROb3JtYWwgPSBub3JtYWxNYXRyaXggKiB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jaWZkZWYgRkxJUF9TSURFRFxcblxcdHRyYW5zZm9ybWVkTm9ybWFsID0gLSB0cmFuc2Zvcm1lZE5vcm1hbDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHR2ZWMzIHRyYW5zZm9ybWVkVGFuZ2VudCA9ICggbW9kZWxWaWV3TWF0cml4ICogdmVjNCggb2JqZWN0VGFuZ2VudCwgMC4wICkgKS54eXo7XFxuXFx0I2lmZGVmIEZMSVBfU0lERURcXG5cXHRcXHR0cmFuc2Zvcm1lZFRhbmdlbnQgPSAtIHRyYW5zZm9ybWVkVGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9ESVNQTEFDRU1FTlRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBkaXNwbGFjZW1lbnRNYXA7XFxuXFx0dW5pZm9ybSBmbG9hdCBkaXNwbGFjZW1lbnRTY2FsZTtcXG5cXHR1bmlmb3JtIGZsb2F0IGRpc3BsYWNlbWVudEJpYXM7XFxuI2VuZGlmXCI7XG5cbnZhciBkaXNwbGFjZW1lbnRtYXBfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0RJU1BMQUNFTUVOVE1BUFxcblxcdHRyYW5zZm9ybWVkICs9IG5vcm1hbGl6ZSggb2JqZWN0Tm9ybWFsICkgKiAoIHRleHR1cmUyRCggZGlzcGxhY2VtZW50TWFwLCB2VXYgKS54ICogZGlzcGxhY2VtZW50U2NhbGUgKyBkaXNwbGFjZW1lbnRCaWFzICk7XFxuI2VuZGlmXCI7XG5cbnZhciBlbWlzc2l2ZW1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTUlTU0lWRU1BUFxcblxcdHZlYzQgZW1pc3NpdmVDb2xvciA9IHRleHR1cmUyRCggZW1pc3NpdmVNYXAsIHZVdiApO1xcblxcdGVtaXNzaXZlQ29sb3IucmdiID0gZW1pc3NpdmVNYXBUZXhlbFRvTGluZWFyKCBlbWlzc2l2ZUNvbG9yICkucmdiO1xcblxcdHRvdGFsRW1pc3NpdmVSYWRpYW5jZSAqPSBlbWlzc2l2ZUNvbG9yLnJnYjtcXG4jZW5kaWZcIjtcblxudmFyIGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU1JU1NJVkVNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBlbWlzc2l2ZU1hcDtcXG4jZW5kaWZcIjtcblxudmFyIGVuY29kaW5nc19mcmFnbWVudCA9IFwiZ2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbCggZ2xfRnJhZ0NvbG9yICk7XCI7XG5cbnZhciBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCA9IFwiXFxudmVjNCBMaW5lYXJUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmFsdWU7XFxufVxcbnZlYzQgR2FtbWFUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSwgaW4gZmxvYXQgZ2FtbWFGYWN0b3IgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCBnYW1tYUZhY3RvciApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBMaW5lYXJUb0dhbW1hKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBnYW1tYUZhY3RvciApIHtcXG5cXHRyZXR1cm4gdmVjNCggcG93KCB2YWx1ZS5yZ2IsIHZlYzMoIDEuMCAvIGdhbW1hRmFjdG9yICkgKSwgdmFsdWUuYSApO1xcbn1cXG52ZWM0IHNSR0JUb0xpbmVhciggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggbWl4KCBwb3coIHZhbHVlLnJnYiAqIDAuOTQ3ODY3Mjk4NiArIHZlYzMoIDAuMDUyMTMyNzAxNCApLCB2ZWMzKCAyLjQgKSApLCB2YWx1ZS5yZ2IgKiAwLjA3NzM5OTM4MDgsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wNDA0NSApICkgKSApLCB2YWx1ZS5hICk7XFxufVxcbnZlYzQgTGluZWFyVG9zUkdCKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdHJldHVybiB2ZWM0KCBtaXgoIHBvdyggdmFsdWUucmdiLCB2ZWMzKCAwLjQxNjY2ICkgKSAqIDEuMDU1IC0gdmVjMyggMC4wNTUgKSwgdmFsdWUucmdiICogMTIuOTIsIHZlYzMoIGxlc3NUaGFuRXF1YWwoIHZhbHVlLnJnYiwgdmVjMyggMC4wMDMxMzA4ICkgKSApICksIHZhbHVlLmEgKTtcXG59XFxudmVjNCBSR0JFVG9MaW5lYXIoIGluIHZlYzQgdmFsdWUgKSB7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAqIGV4cDIoIHZhbHVlLmEgKiAyNTUuMCAtIDEyOC4wICksIDEuMCApO1xcbn1cXG52ZWM0IExpbmVhclRvUkdCRSggaW4gdmVjNCB2YWx1ZSApIHtcXG5cXHRmbG9hdCBtYXhDb21wb25lbnQgPSBtYXgoIG1heCggdmFsdWUuciwgdmFsdWUuZyApLCB2YWx1ZS5iICk7XFxuXFx0ZmxvYXQgZkV4cCA9IGNsYW1wKCBjZWlsKCBsb2cyKCBtYXhDb21wb25lbnQgKSApLCAtMTI4LjAsIDEyNy4wICk7XFxuXFx0cmV0dXJuIHZlYzQoIHZhbHVlLnJnYiAvIGV4cDIoIGZFeHAgKSwgKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wICk7XFxufVxcbnZlYzQgUkdCTVRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogdmFsdWUuYSAqIG1heFJhbmdlLCAxLjAgKTtcXG59XFxudmVjNCBMaW5lYXJUb1JHQk0oIGluIHZlYzQgdmFsdWUsIGluIGZsb2F0IG1heFJhbmdlICkge1xcblxcdGZsb2F0IG1heFJHQiA9IG1heCggdmFsdWUuciwgbWF4KCB2YWx1ZS5nLCB2YWx1ZS5iICkgKTtcXG5cXHRmbG9hdCBNID0gY2xhbXAoIG1heFJHQiAvIG1heFJhbmdlLCAwLjAsIDEuMCApO1xcblxcdE0gPSBjZWlsKCBNICogMjU1LjAgKSAvIDI1NS4wO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgLyAoIE0gKiBtYXhSYW5nZSApLCBNICk7XFxufVxcbnZlYzQgUkdCRFRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRyZXR1cm4gdmVjNCggdmFsdWUucmdiICogKCAoIG1heFJhbmdlIC8gMjU1LjAgKSAvIHZhbHVlLmEgKSwgMS4wICk7XFxufVxcbnZlYzQgTGluZWFyVG9SR0JEKCBpbiB2ZWM0IHZhbHVlLCBpbiBmbG9hdCBtYXhSYW5nZSApIHtcXG5cXHRmbG9hdCBtYXhSR0IgPSBtYXgoIHZhbHVlLnIsIG1heCggdmFsdWUuZywgdmFsdWUuYiApICk7XFxuXFx0ZmxvYXQgRCA9IG1heCggbWF4UmFuZ2UgLyBtYXhSR0IsIDEuMCApO1xcblxcdEQgPSBjbGFtcCggZmxvb3IoIEQgKSAvIDI1NS4wLCAwLjAsIDEuMCApO1xcblxcdHJldHVybiB2ZWM0KCB2YWx1ZS5yZ2IgKiAoIEQgKiAoIDI1NS4wIC8gbWF4UmFuZ2UgKSApLCBEICk7XFxufVxcbmNvbnN0IG1hdDMgY0xvZ0x1dk0gPSBtYXQzKCAwLjIyMDksIDAuMzM5MCwgMC40MTg0LCAwLjExMzgsIDAuNjc4MCwgMC43MzE5LCAwLjAxMDIsIDAuMTEzMCwgMC4yOTY5ICk7XFxudmVjNCBMaW5lYXJUb0xvZ0x1diggaW4gdmVjNCB2YWx1ZSApICB7XFxuXFx0dmVjMyBYcF9ZX1hZWnAgPSBjTG9nTHV2TSAqIHZhbHVlLnJnYjtcXG5cXHRYcF9ZX1hZWnAgPSBtYXgoIFhwX1lfWFlacCwgdmVjMyggMWUtNiwgMWUtNiwgMWUtNiApICk7XFxuXFx0dmVjNCB2UmVzdWx0O1xcblxcdHZSZXN1bHQueHkgPSBYcF9ZX1hZWnAueHkgLyBYcF9ZX1hZWnAuejtcXG5cXHRmbG9hdCBMZSA9IDIuMCAqIGxvZzIoWHBfWV9YWVpwLnkpICsgMTI3LjA7XFxuXFx0dlJlc3VsdC53ID0gZnJhY3QoIExlICk7XFxuXFx0dlJlc3VsdC56ID0gKCBMZSAtICggZmxvb3IoIHZSZXN1bHQudyAqIDI1NS4wICkgKSAvIDI1NS4wICkgLyAyNTUuMDtcXG5cXHRyZXR1cm4gdlJlc3VsdDtcXG59XFxuY29uc3QgbWF0MyBjTG9nTHV2SW52ZXJzZU0gPSBtYXQzKCA2LjAwMTQsIC0yLjcwMDgsIC0xLjc5OTYsIC0xLjMzMjAsIDMuMTAyOSwgLTUuNzcyMSwgMC4zMDA4LCAtMS4wODgyLCA1LjYyNjggKTtcXG52ZWM0IExvZ0x1dlRvTGluZWFyKCBpbiB2ZWM0IHZhbHVlICkge1xcblxcdGZsb2F0IExlID0gdmFsdWUueiAqIDI1NS4wICsgdmFsdWUudztcXG5cXHR2ZWMzIFhwX1lfWFlacDtcXG5cXHRYcF9ZX1hZWnAueSA9IGV4cDIoICggTGUgLSAxMjcuMCApIC8gMi4wICk7XFxuXFx0WHBfWV9YWVpwLnogPSBYcF9ZX1hZWnAueSAvIHZhbHVlLnk7XFxuXFx0WHBfWV9YWVpwLnggPSB2YWx1ZS54ICogWHBfWV9YWVpwLno7XFxuXFx0dmVjMyB2UkdCID0gY0xvZ0x1dkludmVyc2VNICogWHBfWV9YWVpwLnJnYjtcXG5cXHRyZXR1cm4gdmVjNCggbWF4KCB2UkdCLCAwLjAgKSwgMS4wICk7XFxufVwiO1xuXG52YXIgZW52bWFwX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0VOVk1BUFxcblxcdCNpZmRlZiBFTlZfV09STERQT1NcXG5cXHRcXHR2ZWMzIGNhbWVyYVRvRnJhZztcXG5cXHRcXHRcXG5cXHRcXHRpZiAoIGlzT3J0aG9ncmFwaGljICkge1xcblxcdFxcdFxcdGNhbWVyYVRvRnJhZyA9IG5vcm1hbGl6ZSggdmVjMyggLSB2aWV3TWF0cml4WyAwIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAxIF1bIDIgXSwgLSB2aWV3TWF0cml4WyAyIF1bIDIgXSApICk7XFxuXFx0XFx0fSAgZWxzZSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9GcmFnID0gbm9ybWFsaXplKCB2V29ybGRQb3NpdGlvbiAtIGNhbWVyYVBvc2l0aW9uICk7XFxuXFx0XFx0fVxcblxcdFxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX01PREVfUkVGTEVDVElPTlxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIGNhbWVyYVRvRnJhZywgd29ybGROb3JtYWwgKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIGNhbWVyYVRvRnJhZywgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbHNlXFxuXFx0XFx0dmVjMyByZWZsZWN0VmVjID0gdlJlZmxlY3Q7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9UWVBFX0NVQkVcXG5cXHRcXHR2ZWM0IGVudkNvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0dmVjNCBlbnZDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgcmVmbGVjdFZlYywgMC4wICk7XFxuXFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRyZWZsZWN0VmVjID0gbm9ybWFsaXplKCByZWZsZWN0VmVjICk7XFxuXFx0XFx0c2FtcGxlVVYueSA9IGFzaW4oIGNsYW1wKCByZWZsZWN0VmVjLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRcXHRzYW1wbGVVVi54ID0gYXRhbiggcmVmbGVjdFZlYy56LCByZWZsZWN0VmVjLnggKSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIHJlZmxlY3RWZWMgKTtcXG5cXHRcXHR2ZWMzIHJlZmxlY3RWaWV3ID0gbm9ybWFsaXplKCAoIHZpZXdNYXRyaXggKiB2ZWM0KCByZWZsZWN0VmVjLCAwLjAgKSApLnh5eiArIHZlYzMoIDAuMCwgMC4wLCAxLjAgKSApO1xcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgcmVmbGVjdFZpZXcueHkgKiAwLjUgKyAwLjUgKTtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzQgZW52Q29sb3IgPSB2ZWM0KCAwLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZuZGVmIEVOVk1BUF9UWVBFX0NVQkVfVVZcXG5cXHRcXHRlbnZDb2xvciA9IGVudk1hcFRleGVsVG9MaW5lYXIoIGVudkNvbG9yICk7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVk1BUF9CTEVORElOR19NVUxUSVBMWVxcblxcdFxcdG91dGdvaW5nTGlnaHQgPSBtaXgoIG91dGdvaW5nTGlnaHQsIG91dGdvaW5nTGlnaHQgKiBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfTUlYIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ID0gbWl4KCBvdXRnb2luZ0xpZ2h0LCBlbnZDb2xvci54eXosIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHkgKTtcXG5cXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfQkxFTkRJTkdfQUREIClcXG5cXHRcXHRvdXRnb2luZ0xpZ2h0ICs9IGVudkNvbG9yLnh5eiAqIHNwZWN1bGFyU3RyZW5ndGggKiByZWZsZWN0aXZpdHk7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfY29tbW9uX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0dW5pZm9ybSBmbG9hdCBlbnZNYXBJbnRlbnNpdHk7XFxuXFx0dW5pZm9ybSBmbG9hdCBmbGlwRW52TWFwO1xcblxcdHVuaWZvcm0gaW50IG1heE1pcExldmVsO1xcblxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0dW5pZm9ybSBzYW1wbGVyQ3ViZSBlbnZNYXA7XFxuXFx0I2Vsc2VcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBlbnZNYXA7XFxuXFx0I2VuZGlmXFxuXFx0XFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHR1bmlmb3JtIGZsb2F0IHJlZmxlY3Rpdml0eTtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCggUEhPTkcgKVxcblxcdFxcdCNkZWZpbmUgRU5WX1dPUkxEUE9TXFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIEVOVl9XT1JMRFBPU1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG5cXHRcXHR1bmlmb3JtIGZsb2F0IHJlZnJhY3Rpb25SYXRpbztcXG5cXHQjZWxzZVxcblxcdFxcdHZhcnlpbmcgdmVjMyB2UmVmbGVjdDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGVudm1hcF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWYgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBVU0VfTk9STUFMTUFQICkgfHxkZWZpbmVkKCBQSE9ORyApXFxuXFx0XFx0I2RlZmluZSBFTlZfV09STERQT1NcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZXb3JsZFBvc2l0aW9uO1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZSZWZsZWN0O1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgcmVmcmFjdGlvblJhdGlvO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZW52bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9FTlZNQVBcXG5cXHQjaWZkZWYgRU5WX1dPUkxEUE9TXFxuXFx0XFx0dldvcmxkUG9zaXRpb24gPSB3b3JsZFBvc2l0aW9uLnh5ejtcXG5cXHQjZWxzZVxcblxcdFxcdHZlYzMgY2FtZXJhVG9WZXJ0ZXg7XFxuXFx0XFx0aWYgKCBpc09ydGhvZ3JhcGhpYyApIHsgXFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHZlYzMoIC0gdmlld01hdHJpeFsgMCBdWyAyIF0sIC0gdmlld01hdHJpeFsgMSBdWyAyIF0sIC0gdmlld01hdHJpeFsgMiBdWyAyIF0gKSApO1xcblxcdFxcdH0gZWxzZSB7XFxuXFx0XFx0XFx0Y2FtZXJhVG9WZXJ0ZXggPSBub3JtYWxpemUoIHdvcmxkUG9zaXRpb24ueHl6IC0gY2FtZXJhUG9zaXRpb24gKTtcXG5cXHRcXHR9XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIHRyYW5zZm9ybWVkTm9ybWFsLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHRcXHR2UmVmbGVjdCA9IHJlZmxlY3QoIGNhbWVyYVRvVmVydGV4LCB3b3JsZE5vcm1hbCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dlJlZmxlY3QgPSByZWZyYWN0KCBjYW1lcmFUb1ZlcnRleCwgd29ybGROb3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHRmb2dEZXB0aCA9IC1tdlBvc2l0aW9uLno7XFxuI2VuZGlmXCI7XG5cbnZhciBmb2dfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dmFyeWluZyBmbG9hdCBmb2dEZXB0aDtcXG4jZW5kaWZcIjtcblxudmFyIGZvZ19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9GT0dcXG5cXHQjaWZkZWYgRk9HX0VYUDJcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSAxLjAgLSBleHAoIC0gZm9nRGVuc2l0eSAqIGZvZ0RlbnNpdHkgKiBmb2dEZXB0aCAqIGZvZ0RlcHRoICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBmb2dGYWN0b3IgPSBzbW9vdGhzdGVwKCBmb2dOZWFyLCBmb2dGYXIsIGZvZ0RlcHRoICk7XFxuXFx0I2VuZGlmXFxuXFx0Z2xfRnJhZ0NvbG9yLnJnYiA9IG1peCggZ2xfRnJhZ0NvbG9yLnJnYiwgZm9nQ29sb3IsIGZvZ0ZhY3RvciApO1xcbiNlbmRpZlwiO1xuXG52YXIgZm9nX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfRk9HXFxuXFx0dW5pZm9ybSB2ZWMzIGZvZ0NvbG9yO1xcblxcdHZhcnlpbmcgZmxvYXQgZm9nRGVwdGg7XFxuXFx0I2lmZGVmIEZPR19FWFAyXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dEZW5zaXR5O1xcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCBmb2dOZWFyO1xcblxcdFxcdHVuaWZvcm0gZmxvYXQgZm9nRmFyO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgZ3JhZGllbnRtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9HUkFESUVOVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGdyYWRpZW50TWFwO1xcbiNlbmRpZlxcbnZlYzMgZ2V0R3JhZGllbnRJcnJhZGlhbmNlKCB2ZWMzIG5vcm1hbCwgdmVjMyBsaWdodERpcmVjdGlvbiApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IGRvdCggbm9ybWFsLCBsaWdodERpcmVjdGlvbiApO1xcblxcdHZlYzIgY29vcmQgPSB2ZWMyKCBkb3ROTCAqIDAuNSArIDAuNSwgMC4wICk7XFxuXFx0I2lmZGVmIFVTRV9HUkFESUVOVE1BUFxcblxcdFxcdHJldHVybiB0ZXh0dXJlMkQoIGdyYWRpZW50TWFwLCBjb29yZCApLnJnYjtcXG5cXHQjZWxzZVxcblxcdFxcdHJldHVybiAoIGNvb3JkLnggPCAwLjcgKSA/IHZlYzMoIDAuNyApIDogdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxufVwiO1xuXG52YXIgbGlnaHRtYXBfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR2ZWM0IGxpZ2h0TWFwVGV4ZWw9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKTtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gUEkgKiBsaWdodE1hcFRleGVsVG9MaW5lYXIoIGxpZ2h0TWFwVGV4ZWwgKS5yZ2IgKiBsaWdodE1hcEludGVuc2l0eTtcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBsaWdodE1hcDtcXG5cXHR1bmlmb3JtIGZsb2F0IGxpZ2h0TWFwSW50ZW5zaXR5O1xcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX2xhbWJlcnRfdmVydGV4ID0gXCJ2ZWMzIGRpZmZ1c2UgPSB2ZWMzKCAxLjAgKTtcXG5HZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5O1xcbmdlb21ldHJ5LnBvc2l0aW9uID0gbXZQb3NpdGlvbi54eXo7XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIC1tdlBvc2l0aW9uLnh5eiApO1xcbkdlb21ldHJpY0NvbnRleHQgYmFja0dlb21ldHJ5O1xcbmJhY2tHZW9tZXRyeS5wb3NpdGlvbiA9IGdlb21ldHJ5LnBvc2l0aW9uO1xcbmJhY2tHZW9tZXRyeS5ub3JtYWwgPSAtZ2VvbWV0cnkubm9ybWFsO1xcbmJhY2tHZW9tZXRyeS52aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG52TGlnaHRGcm9udCA9IHZlYzMoIDAuMCApO1xcbnZJbmRpcmVjdEZyb250ID0gdmVjMyggMC4wICk7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZMaWdodEJhY2sgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2SW5kaXJlY3RCYWNrID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXFxuSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodDtcXG5mbG9hdCBkb3ROTDtcXG52ZWMzIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG4jaWYgTlVNX1BPSU5UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIE5VTV9TUE9UX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIHNwb3RMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIE5VTV9ESVJfTElHSFRTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRnZXREaXJlY3Rpb25hbERpcmVjdExpZ2h0SXJyYWRpYW5jZSggZGlyZWN0aW9uYWxMaWdodHNbIGkgXSwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0ZG90TkwgPSBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHRDb2xvcl9EaWZmdXNlID0gUEkgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHR2TGlnaHRGcm9udCArPSBzYXR1cmF0ZSggZG90TkwgKSAqIGRpcmVjdExpZ2h0Q29sb3JfRGlmZnVzZTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkxpZ2h0QmFjayArPSBzYXR1cmF0ZSggLWRvdE5MICkgKiBkaXJlY3RMaWdodENvbG9yX0RpZmZ1c2U7XFxuXFx0XFx0I2VuZGlmXFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIE5VTV9IRU1JX0xJR0hUUyA+IDBcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX0hFTUlfTElHSFRTOyBpICsrICkge1xcblxcdFxcdHZJbmRpcmVjdEZyb250ICs9IGdldEhlbWlzcGhlcmVMaWdodElycmFkaWFuY2UoIGhlbWlzcGhlcmVMaWdodHNbIGkgXSwgZ2VvbWV0cnkgKTtcXG5cXHRcXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0XFx0dkluZGlyZWN0QmFjayArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGJhY2tHZW9tZXRyeSApO1xcblxcdFxcdCNlbmRpZlxcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlwiO1xuXG52YXIgbGlnaHRzX3BhcnNfYmVnaW4gPSBcInVuaWZvcm0gYm9vbCByZWNlaXZlU2hhZG93O1xcbnVuaWZvcm0gdmVjMyBhbWJpZW50TGlnaHRDb2xvcjtcXG51bmlmb3JtIHZlYzMgbGlnaHRQcm9iZVsgOSBdO1xcbnZlYzMgc2hHZXRJcnJhZGlhbmNlQXQoIGluIHZlYzMgbm9ybWFsLCBpbiB2ZWMzIHNoQ29lZmZpY2llbnRzWyA5IF0gKSB7XFxuXFx0ZmxvYXQgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcXG5cXHR2ZWMzIHJlc3VsdCA9IHNoQ29lZmZpY2llbnRzWyAwIF0gKiAwLjg4NjIyNztcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDEgXSAqIDIuMCAqIDAuNTExNjY0ICogeTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDIgXSAqIDIuMCAqIDAuNTExNjY0ICogejtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDMgXSAqIDIuMCAqIDAuNTExNjY0ICogeDtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDQgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHk7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA1IF0gKiAyLjAgKiAwLjQyOTA0MyAqIHkgKiB6O1xcblxcdHJlc3VsdCArPSBzaENvZWZmaWNpZW50c1sgNiBdICogKCAwLjc0MzEyNSAqIHogKiB6IC0gMC4yNDc3MDggKTtcXG5cXHRyZXN1bHQgKz0gc2hDb2VmZmljaWVudHNbIDcgXSAqIDIuMCAqIDAuNDI5MDQzICogeCAqIHo7XFxuXFx0cmVzdWx0ICs9IHNoQ29lZmZpY2llbnRzWyA4IF0gKiAwLjQyOTA0MyAqICggeCAqIHggLSB5ICogeSApO1xcblxcdHJldHVybiByZXN1bHQ7XFxufVxcbnZlYzMgZ2V0TGlnaHRQcm9iZUlycmFkaWFuY2UoIGNvbnN0IGluIHZlYzMgbGlnaHRQcm9iZVsgOSBdLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdHZlYzMgd29ybGROb3JtYWwgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCBnZW9tZXRyeS5ub3JtYWwsIHZpZXdNYXRyaXggKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBzaEdldElycmFkaWFuY2VBdCggd29ybGROb3JtYWwsIGxpZ2h0UHJvYmUgKTtcXG5cXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG59XFxudmVjMyBnZXRBbWJpZW50TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiB2ZWMzIGFtYmllbnRMaWdodENvbG9yICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGFtYmllbnRMaWdodENvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmV0dXJuIGlycmFkaWFuY2U7XFxufVxcbiNpZiBOVU1fRElSX0xJR0hUUyA+IDBcXG5cXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHR9O1xcblxcdHVuaWZvcm0gRGlyZWN0aW9uYWxMaWdodCBkaXJlY3Rpb25hbExpZ2h0c1sgTlVNX0RJUl9MSUdIVFMgXTtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHRzdHJ1Y3QgRGlyZWN0aW9uYWxMaWdodFNoYWRvdyB7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93QmlhcztcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0dmVjMiBzaGFkb3dNYXBTaXplO1xcblxcdFxcdH07XFxuXFx0XFx0dW5pZm9ybSBEaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHR2b2lkIGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBEaXJlY3Rpb25hbExpZ2h0IGRpcmVjdGlvbmFsTGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gZGlyZWN0aW9uYWxMaWdodC5jb2xvcjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBkaXJlY3Rpb25hbExpZ2h0LmRpcmVjdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9QT0lOVF9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IFBvaW50TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHR9O1xcblxcdHVuaWZvcm0gUG9pbnRMaWdodCBwb2ludExpZ2h0c1sgTlVNX1BPSU5UX0xJR0hUUyBdO1xcblxcdCNpZiBkZWZpbmVkKCBVU0VfU0hBRE9XTUFQICkgJiYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0c3RydWN0IFBvaW50TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBzaGFkb3dDYW1lcmFOZWFyO1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0NhbWVyYUZhcjtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gUG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0U2hhZG93c1sgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHR2b2lkIGdldFBvaW50RGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBQb2ludExpZ2h0IHBvaW50TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICkge1xcblxcdFxcdHZlYzMgbFZlY3RvciA9IHBvaW50TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgPSBwb2ludExpZ2h0LmNvbG9yO1xcblxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yICo9IHB1bmN0dWFsTGlnaHRJbnRlbnNpdHlUb0lycmFkaWFuY2VGYWN0b3IoIGxpZ2h0RGlzdGFuY2UsIHBvaW50TGlnaHQuZGlzdGFuY2UsIHBvaW50TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gKCBkaXJlY3RMaWdodC5jb2xvciAhPSB2ZWMzKCAwLjAgKSApO1xcblxcdH1cXG4jZW5kaWZcXG4jaWYgTlVNX1NQT1RfTElHSFRTID4gMFxcblxcdHN0cnVjdCBTcG90TGlnaHQge1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBjb2xvcjtcXG5cXHRcXHRmbG9hdCBkaXN0YW5jZTtcXG5cXHRcXHRmbG9hdCBkZWNheTtcXG5cXHRcXHRmbG9hdCBjb25lQ29zO1xcblxcdFxcdGZsb2F0IHBlbnVtYnJhQ29zO1xcblxcdH07XFxuXFx0dW5pZm9ybSBTcG90TGlnaHQgc3BvdExpZ2h0c1sgTlVNX1NQT1RfTElHSFRTIF07XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHN0cnVjdCBTcG90TGlnaHRTaGFkb3cge1xcblxcdFxcdFxcdGZsb2F0IHNoYWRvd0JpYXM7XFxuXFx0XFx0XFx0ZmxvYXQgc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdHZlYzIgc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHR9O1xcblxcdFxcdHVuaWZvcm0gU3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodFNoYWRvd3NbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHQjZW5kaWZcXG5cXHR2b2lkIGdldFNwb3REaXJlY3RMaWdodElycmFkaWFuY2UoIGNvbnN0IGluIFNwb3RMaWdodCBzcG90TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIG91dCBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0ICApIHtcXG5cXHRcXHR2ZWMzIGxWZWN0b3IgPSBzcG90TGlnaHQucG9zaXRpb24gLSBnZW9tZXRyeS5wb3NpdGlvbjtcXG5cXHRcXHRkaXJlY3RMaWdodC5kaXJlY3Rpb24gPSBub3JtYWxpemUoIGxWZWN0b3IgKTtcXG5cXHRcXHRmbG9hdCBsaWdodERpc3RhbmNlID0gbGVuZ3RoKCBsVmVjdG9yICk7XFxuXFx0XFx0ZmxvYXQgYW5nbGVDb3MgPSBkb3QoIGRpcmVjdExpZ2h0LmRpcmVjdGlvbiwgc3BvdExpZ2h0LmRpcmVjdGlvbiApO1xcblxcdFxcdGlmICggYW5nbGVDb3MgPiBzcG90TGlnaHQuY29uZUNvcyApIHtcXG5cXHRcXHRcXHRmbG9hdCBzcG90RWZmZWN0ID0gc21vb3Roc3RlcCggc3BvdExpZ2h0LmNvbmVDb3MsIHNwb3RMaWdodC5wZW51bWJyYUNvcywgYW5nbGVDb3MgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciA9IHNwb3RMaWdodC5jb2xvcjtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBzcG90RWZmZWN0ICogcHVuY3R1YWxMaWdodEludGVuc2l0eVRvSXJyYWRpYW5jZUZhY3RvciggbGlnaHREaXN0YW5jZSwgc3BvdExpZ2h0LmRpc3RhbmNlLCBzcG90TGlnaHQuZGVjYXkgKTtcXG5cXHRcXHRcXHRkaXJlY3RMaWdodC52aXNpYmxlID0gdHJ1ZTtcXG5cXHRcXHR9IGVsc2Uge1xcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmNvbG9yID0gdmVjMyggMC4wICk7XFxuXFx0XFx0XFx0ZGlyZWN0TGlnaHQudmlzaWJsZSA9IGZhbHNlO1xcblxcdFxcdH1cXG5cXHR9XFxuI2VuZGlmXFxuI2lmIE5VTV9SRUNUX0FSRUFfTElHSFRTID4gMFxcblxcdHN0cnVjdCBSZWN0QXJlYUxpZ2h0IHtcXG5cXHRcXHR2ZWMzIGNvbG9yO1xcblxcdFxcdHZlYzMgcG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGg7XFxuXFx0XFx0dmVjMyBoYWxmSGVpZ2h0O1xcblxcdH07XFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzE7XFx0dW5pZm9ybSBzYW1wbGVyMkQgbHRjXzI7XFxuXFx0dW5pZm9ybSBSZWN0QXJlYUxpZ2h0IHJlY3RBcmVhTGlnaHRzWyBOVU1fUkVDVF9BUkVBX0xJR0hUUyBdO1xcbiNlbmRpZlxcbiNpZiBOVU1fSEVNSV9MSUdIVFMgPiAwXFxuXFx0c3RydWN0IEhlbWlzcGhlcmVMaWdodCB7XFxuXFx0XFx0dmVjMyBkaXJlY3Rpb247XFxuXFx0XFx0dmVjMyBza3lDb2xvcjtcXG5cXHRcXHR2ZWMzIGdyb3VuZENvbG9yO1xcblxcdH07XFxuXFx0dW5pZm9ybSBIZW1pc3BoZXJlTGlnaHQgaGVtaXNwaGVyZUxpZ2h0c1sgTlVNX0hFTUlfTElHSFRTIF07XFxuXFx0dmVjMyBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBjb25zdCBpbiBIZW1pc3BoZXJlTGlnaHQgaGVtaUxpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5ICkge1xcblxcdFxcdGZsb2F0IGRvdE5MID0gZG90KCBnZW9tZXRyeS5ub3JtYWwsIGhlbWlMaWdodC5kaXJlY3Rpb24gKTtcXG5cXHRcXHRmbG9hdCBoZW1pRGlmZnVzZVdlaWdodCA9IDAuNSAqIGRvdE5MICsgMC41O1xcblxcdFxcdHZlYzMgaXJyYWRpYW5jZSA9IG1peCggaGVtaUxpZ2h0Lmdyb3VuZENvbG9yLCBoZW1pTGlnaHQuc2t5Q29sb3IsIGhlbWlEaWZmdXNlV2VpZ2h0ICk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHRyZXR1cm4gaXJyYWRpYW5jZTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9FTlZNQVAgKVxcblxcdCNpZmRlZiBFTlZNQVBfTU9ERV9SRUZSQUNUSU9OXFxuXFx0XFx0dW5pZm9ybSBmbG9hdCByZWZyYWN0aW9uUmF0aW87XFxuXFx0I2VuZGlmXFxuXFx0dmVjMyBnZXRMaWdodFByb2JlSW5kaXJlY3RJcnJhZGlhbmNlKCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0dmVjMyB3b3JsZE5vcm1hbCA9IGludmVyc2VUcmFuc2Zvcm1EaXJlY3Rpb24oIGdlb21ldHJ5Lm5vcm1hbCwgdmlld01hdHJpeCApO1xcblxcdFxcdCNpZmRlZiBFTlZNQVBfVFlQRV9DVUJFXFxuXFx0XFx0XFx0dmVjMyBxdWVyeVZlYyA9IHZlYzMoIGZsaXBFbnZNYXAgKiB3b3JsZE5vcm1hbC54LCB3b3JsZE5vcm1hbC55eiApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVMb2RFWFQoIGVudk1hcCwgcXVlcnlWZWMsIGZsb2F0KCBtYXhNSVBMZXZlbCApICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgcXVlcnlWZWMsIGZsb2F0KCBtYXhNSVBMZXZlbCApICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgd29ybGROb3JtYWwsIDEuMCApO1xcblxcdFxcdCNlbHNlXFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHZlYzQoIDAuMCApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJldHVybiBQSSAqIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U3BlY3VsYXJNSVBMZXZlbCggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0ZmxvYXQgbWF4TUlQTGV2ZWxTY2FsYXIgPSBmbG9hdCggbWF4TUlQTGV2ZWwgKTtcXG5cXHRcXHRmbG9hdCBzaWdtYSA9IFBJICogcm91Z2huZXNzICogcm91Z2huZXNzIC8gKCAxLjAgKyByb3VnaG5lc3MgKTtcXG5cXHRcXHRmbG9hdCBkZXNpcmVkTUlQTGV2ZWwgPSBtYXhNSVBMZXZlbFNjYWxhciArIGxvZzIoIHNpZ21hICk7XFxuXFx0XFx0cmV0dXJuIGNsYW1wKCBkZXNpcmVkTUlQTGV2ZWwsIDAuMCwgbWF4TUlQTGV2ZWxTY2FsYXIgKTtcXG5cXHR9XFxuXFx0dmVjMyBnZXRMaWdodFByb2JlSW5kaXJlY3RSYWRpYW5jZSggY29uc3QgaW4gdmVjMyB2aWV3RGlyLCBjb25zdCBpbiB2ZWMzIG5vcm1hbCwgY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBpbnQgbWF4TUlQTGV2ZWwgKSB7XFxuXFx0XFx0I2lmZGVmIEVOVk1BUF9NT0RFX1JFRkxFQ1RJT05cXG5cXHRcXHQgIHZlYzMgcmVmbGVjdFZlYyA9IHJlZmxlY3QoIC12aWV3RGlyLCBub3JtYWwgKTtcXG5cXHRcXHQgIHJlZmxlY3RWZWMgPSBub3JtYWxpemUoIG1peCggcmVmbGVjdFZlYywgbm9ybWFsLCByb3VnaG5lc3MgKiByb3VnaG5lc3MpICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHQgIHZlYzMgcmVmbGVjdFZlYyA9IHJlZnJhY3QoIC12aWV3RGlyLCBub3JtYWwsIHJlZnJhY3Rpb25SYXRpbyApO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdHJlZmxlY3RWZWMgPSBpbnZlcnNlVHJhbnNmb3JtRGlyZWN0aW9uKCByZWZsZWN0VmVjLCB2aWV3TWF0cml4ICk7XFxuXFx0XFx0ZmxvYXQgc3BlY3VsYXJNSVBMZXZlbCA9IGdldFNwZWN1bGFyTUlQTGV2ZWwoIHJvdWdobmVzcywgbWF4TUlQTGV2ZWwgKTtcXG5cXHRcXHQjaWZkZWYgRU5WTUFQX1RZUEVfQ1VCRVxcblxcdFxcdFxcdHZlYzMgcXVlcnlSZWZsZWN0VmVjID0gdmVjMyggZmxpcEVudk1hcCAqIHJlZmxlY3RWZWMueCwgcmVmbGVjdFZlYy55eiApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmVMb2RFWFQoIGVudk1hcCwgcXVlcnlSZWZsZWN0VmVjLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZUN1YmUoIGVudk1hcCwgcXVlcnlSZWZsZWN0VmVjLCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfQ1VCRV9VViApXFxuXFx0XFx0XFx0dmVjNCBlbnZNYXBDb2xvciA9IHRleHR1cmVDdWJlVVYoIGVudk1hcCwgcmVmbGVjdFZlYywgcm91Z2huZXNzICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggRU5WTUFQX1RZUEVfRVFVSVJFQyApXFxuXFx0XFx0XFx0dmVjMiBzYW1wbGVVVjtcXG5cXHRcXHRcXHRzYW1wbGVVVi55ID0gYXNpbiggY2xhbXAoIHJlZmxlY3RWZWMueSwgLSAxLjAsIDEuMCApICkgKiBSRUNJUFJPQ0FMX1BJICsgMC41O1xcblxcdFxcdFxcdHNhbXBsZVVWLnggPSBhdGFuKCByZWZsZWN0VmVjLnosIHJlZmxlY3RWZWMueCApICogUkVDSVBST0NBTF9QSTIgKyAwLjU7XFxuXFx0XFx0XFx0I2lmZGVmIFRFWFRVUkVfTE9EX0VYVFxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkRMb2RFWFQoIGVudk1hcCwgc2FtcGxlVVYsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZWxzZVxcblxcdFxcdFxcdFxcdHZlYzQgZW52TWFwQ29sb3IgPSB0ZXh0dXJlMkQoIGVudk1hcCwgc2FtcGxlVVYsIHNwZWN1bGFyTUlQTGV2ZWwgKTtcXG5cXHRcXHRcXHQjZW5kaWZcXG5cXHRcXHRcXHRlbnZNYXBDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKCBlbnZNYXBDb2xvciApLnJnYjtcXG5cXHRcXHQjZWxpZiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9TUEhFUkUgKVxcblxcdFxcdFxcdHZlYzMgcmVmbGVjdFZpZXcgPSBub3JtYWxpemUoICggdmlld01hdHJpeCAqIHZlYzQoIHJlZmxlY3RWZWMsIDAuMCApICkueHl6ICsgdmVjMyggMC4wLDAuMCwxLjAgKSApO1xcblxcdFxcdFxcdCNpZmRlZiBURVhUVVJFX0xPRF9FWFRcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJETG9kRVhUKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41LCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRcXHR2ZWM0IGVudk1hcENvbG9yID0gdGV4dHVyZTJEKCBlbnZNYXAsIHJlZmxlY3RWaWV3Lnh5ICogMC41ICsgMC41LCBzcGVjdWxhck1JUExldmVsICk7XFxuXFx0XFx0XFx0I2VuZGlmXFxuXFx0XFx0XFx0ZW52TWFwQ29sb3IucmdiID0gZW52TWFwVGV4ZWxUb0xpbmVhciggZW52TWFwQ29sb3IgKS5yZ2I7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0cmV0dXJuIGVudk1hcENvbG9yLnJnYiAqIGVudk1hcEludGVuc2l0eTtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfdG9vbl9mcmFnbWVudCA9IFwiVG9vbk1hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xuXG52YXIgbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCA9IFwidmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbnN0cnVjdCBUb29uTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0dmVjM1xcdHNwZWN1bGFyQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclNoaW5pbmVzcztcXG5cXHRmbG9hdFxcdHNwZWN1bGFyU3RyZW5ndGg7XFxufTtcXG52b2lkIFJFX0RpcmVjdF9Ub29uKCBjb25zdCBpbiBJbmNpZGVudExpZ2h0IGRpcmVjdExpZ2h0LCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBUb29uTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGdldEdyYWRpZW50SXJyYWRpYW5jZSggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX1Rvb24oIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gVG9vbk1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfVG9vblxcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX1Rvb25cXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsIClcXHQoMClcIjtcblxudmFyIGxpZ2h0c19waG9uZ19mcmFnbWVudCA9IFwiQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsO1xcbm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IHNwZWN1bGFyO1xcbm1hdGVyaWFsLnNwZWN1bGFyU2hpbmluZXNzID0gc2hpbmluZXNzO1xcbm1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGggPSBzcGVjdWxhclN0cmVuZ3RoO1wiO1xuXG52YXIgbGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQgPSBcInZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG5zdHJ1Y3QgQmxpbm5QaG9uZ01hdGVyaWFsIHtcXG5cXHR2ZWMzXFx0ZGlmZnVzZUNvbG9yO1xcblxcdHZlYzNcXHRzcGVjdWxhckNvbG9yO1xcblxcdGZsb2F0XFx0c3BlY3VsYXJTaGluaW5lc3M7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclN0cmVuZ3RoO1xcbn07XFxudm9pZCBSRV9EaXJlY3RfQmxpbm5QaG9uZyggY29uc3QgaW4gSW5jaWRlbnRMaWdodCBkaXJlY3RMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRmbG9hdCBkb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5Lm5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHR2ZWMzIGlycmFkaWFuY2UgPSBkb3ROTCAqIGRpcmVjdExpZ2h0LmNvbG9yO1xcblxcdCNpZm5kZWYgUEhZU0lDQUxMWV9DT1JSRUNUX0xJR0hUU1xcblxcdFxcdGlycmFkaWFuY2UgKj0gUEk7XFxuXFx0I2VuZGlmXFxuXFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArPSBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9IGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX0JsaW5uUGhvbmcoIGRpcmVjdExpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwuc3BlY3VsYXJDb2xvciwgbWF0ZXJpYWwuc3BlY3VsYXJTaGluaW5lc3MgKSAqIG1hdGVyaWFsLnNwZWN1bGFyU3RyZW5ndGg7XFxufVxcbnZvaWQgUkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmcoIGNvbnN0IGluIHZlYzMgaXJyYWRpYW5jZSwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gQmxpbm5QaG9uZ01hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxuI2RlZmluZSBSRV9EaXJlY3RcXHRcXHRcXHRcXHRSRV9EaXJlY3RfQmxpbm5QaG9uZ1xcbiNkZWZpbmUgUkVfSW5kaXJlY3REaWZmdXNlXFx0XFx0UkVfSW5kaXJlY3REaWZmdXNlX0JsaW5uUGhvbmdcXG4jZGVmaW5lIE1hdGVyaWFsX0xpZ2h0UHJvYmVMT0QoIG1hdGVyaWFsIClcXHQoMClcIjtcblxudmFyIGxpZ2h0c19waHlzaWNhbF9mcmFnbWVudCA9IFwiUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbDtcXG5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBkaWZmdXNlQ29sb3IucmdiICogKCAxLjAgLSBtZXRhbG5lc3NGYWN0b3IgKTtcXG52ZWMzIGR4eSA9IG1heCggYWJzKCBkRmR4KCBnZW9tZXRyeU5vcm1hbCApICksIGFicyggZEZkeSggZ2VvbWV0cnlOb3JtYWwgKSApICk7XFxuZmxvYXQgZ2VvbWV0cnlSb3VnaG5lc3MgPSBtYXgoIG1heCggZHh5LngsIGR4eS55ICksIGR4eS56ICk7XFxubWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtYXgoIHJvdWdobmVzc0ZhY3RvciwgMC4wNTI1ICk7bWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxubWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MgPSBtaW4oIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCAxLjAgKTtcXG4jaWZkZWYgUkVGTEVDVElWSVRZXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggTUFYSU1VTV9TUEVDVUxBUl9DT0VGRklDSUVOVCAqIHBvdzIoIHJlZmxlY3Rpdml0eSApICksIGRpZmZ1c2VDb2xvci5yZ2IsIG1ldGFsbmVzc0ZhY3RvciApO1xcbiNlbHNlXFxuXFx0bWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG1peCggdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBkaWZmdXNlQ29sb3IucmdiLCBtZXRhbG5lc3NGYWN0b3IgKTtcXG4jZW5kaWZcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gY2xlYXJjb2F0O1xcblxcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IGNsZWFyY29hdFJvdWdobmVzcztcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdFxcdG1hdGVyaWFsLmNsZWFyY29hdCAqPSB0ZXh0dXJlMkQoIGNsZWFyY29hdE1hcCwgdlV2ICkueDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHRcXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKj0gdGV4dHVyZTJEKCBjbGVhcmNvYXRSb3VnaG5lc3NNYXAsIHZVdiApLnk7XFxuXFx0I2VuZGlmXFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0ID0gc2F0dXJhdGUoIG1hdGVyaWFsLmNsZWFyY29hdCApO1xcdG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IG1heCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCAwLjA1MjUgKTtcXG5cXHRtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKz0gZ2VvbWV0cnlSb3VnaG5lc3M7XFxuXFx0bWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzID0gbWluKCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIDEuMCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfU0hFRU5cXG5cXHRtYXRlcmlhbC5zaGVlbkNvbG9yID0gc2hlZW47XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCA9IFwic3RydWN0IFBoeXNpY2FsTWF0ZXJpYWwge1xcblxcdHZlYzNcXHRkaWZmdXNlQ29sb3I7XFxuXFx0ZmxvYXRcXHRzcGVjdWxhclJvdWdobmVzcztcXG5cXHR2ZWMzXFx0c3BlY3VsYXJDb2xvcjtcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0ZmxvYXQgY2xlYXJjb2F0O1xcblxcdGZsb2F0IGNsZWFyY29hdFJvdWdobmVzcztcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX1NIRUVOXFxuXFx0dmVjMyBzaGVlbkNvbG9yO1xcbiNlbmRpZlxcbn07XFxuI2RlZmluZSBNQVhJTVVNX1NQRUNVTEFSX0NPRUZGSUNJRU5UIDAuMTZcXG4jZGVmaW5lIERFRkFVTFRfU1BFQ1VMQVJfQ09FRkZJQ0lFTlQgMC4wNFxcbmZsb2F0IGNsZWFyY29hdERIUkFwcHJveCggY29uc3QgaW4gZmxvYXQgcm91Z2huZXNzLCBjb25zdCBpbiBmbG9hdCBkb3ROTCApIHtcXG5cXHRyZXR1cm4gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCArICggMS4wIC0gREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApICogKCBwb3coIDEuMCAtIGRvdE5MLCA1LjAgKSAqIHBvdyggMS4wIC0gcm91Z2huZXNzLCAyLjAgKSApO1xcbn1cXG4jaWYgTlVNX1JFQ1RfQVJFQV9MSUdIVFMgPiAwXFxuXFx0dm9pZCBSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWwoIGNvbnN0IGluIFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodCwgY29uc3QgaW4gR2VvbWV0cmljQ29udGV4dCBnZW9tZXRyeSwgY29uc3QgaW4gUGh5c2ljYWxNYXRlcmlhbCBtYXRlcmlhbCwgaW5vdXQgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgKSB7XFxuXFx0XFx0dmVjMyBub3JtYWwgPSBnZW9tZXRyeS5ub3JtYWw7XFxuXFx0XFx0dmVjMyB2aWV3RGlyID0gZ2VvbWV0cnkudmlld0RpcjtcXG5cXHRcXHR2ZWMzIHBvc2l0aW9uID0gZ2VvbWV0cnkucG9zaXRpb247XFxuXFx0XFx0dmVjMyBsaWdodFBvcyA9IHJlY3RBcmVhTGlnaHQucG9zaXRpb247XFxuXFx0XFx0dmVjMyBoYWxmV2lkdGggPSByZWN0QXJlYUxpZ2h0LmhhbGZXaWR0aDtcXG5cXHRcXHR2ZWMzIGhhbGZIZWlnaHQgPSByZWN0QXJlYUxpZ2h0LmhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMyBsaWdodENvbG9yID0gcmVjdEFyZWFMaWdodC5jb2xvcjtcXG5cXHRcXHRmbG9hdCByb3VnaG5lc3MgPSBtYXRlcmlhbC5zcGVjdWxhclJvdWdobmVzcztcXG5cXHRcXHR2ZWMzIHJlY3RDb29yZHNbIDQgXTtcXG5cXHRcXHRyZWN0Q29vcmRzWyAwIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCAtIGhhbGZIZWlnaHQ7XFx0XFx0cmVjdENvb3Jkc1sgMSBdID0gbGlnaHRQb3MgLSBoYWxmV2lkdGggLSBoYWxmSGVpZ2h0O1xcblxcdFxcdHJlY3RDb29yZHNbIDIgXSA9IGxpZ2h0UG9zIC0gaGFsZldpZHRoICsgaGFsZkhlaWdodDtcXG5cXHRcXHRyZWN0Q29vcmRzWyAzIF0gPSBsaWdodFBvcyArIGhhbGZXaWR0aCArIGhhbGZIZWlnaHQ7XFxuXFx0XFx0dmVjMiB1diA9IExUQ19Vdiggbm9ybWFsLCB2aWV3RGlyLCByb3VnaG5lc3MgKTtcXG5cXHRcXHR2ZWM0IHQxID0gdGV4dHVyZTJEKCBsdGNfMSwgdXYgKTtcXG5cXHRcXHR2ZWM0IHQyID0gdGV4dHVyZTJEKCBsdGNfMiwgdXYgKTtcXG5cXHRcXHRtYXQzIG1JbnYgPSBtYXQzKFxcblxcdFxcdFxcdHZlYzMoIHQxLngsIDAsIHQxLnkgKSxcXG5cXHRcXHRcXHR2ZWMzKCAgICAwLCAxLCAgICAwICksXFxuXFx0XFx0XFx0dmVjMyggdDEueiwgMCwgdDEudyApXFxuXFx0XFx0KTtcXG5cXHRcXHR2ZWMzIGZyZXNuZWwgPSAoIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKiB0Mi54ICsgKCB2ZWMzKCAxLjAgKSAtIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IgKSAqIHQyLnkgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBsaWdodENvbG9yICogZnJlc25lbCAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbUludiwgcmVjdENvb3JkcyApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRDb2xvciAqIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciAqIExUQ19FdmFsdWF0ZSggbm9ybWFsLCB2aWV3RGlyLCBwb3NpdGlvbiwgbWF0MyggMS4wICksIHJlY3RDb29yZHMgKTtcXG5cXHR9XFxuI2VuZGlmXFxudm9pZCBSRV9EaXJlY3RfUGh5c2ljYWwoIGNvbnN0IGluIEluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ICkge1xcblxcdGZsb2F0IGRvdE5MID0gc2F0dXJhdGUoIGRvdCggZ2VvbWV0cnkubm9ybWFsLCBkaXJlY3RMaWdodC5kaXJlY3Rpb24gKSApO1xcblxcdHZlYzMgaXJyYWRpYW5jZSA9IGRvdE5MICogZGlyZWN0TGlnaHQuY29sb3I7XFxuXFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0aXJyYWRpYW5jZSAqPSBQSTtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgQ0xFQVJDT0FUXFxuXFx0XFx0ZmxvYXQgY2NEb3ROTCA9IHNhdHVyYXRlKCBkb3QoIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgZGlyZWN0TGlnaHQuZGlyZWN0aW9uICkgKTtcXG5cXHRcXHR2ZWMzIGNjSXJyYWRpYW5jZSA9IGNjRG90TkwgKiBkaXJlY3RMaWdodC5jb2xvcjtcXG5cXHRcXHQjaWZuZGVmIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFNcXG5cXHRcXHRcXHRjY0lycmFkaWFuY2UgKj0gUEk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0ZmxvYXQgY2xlYXJjb2F0REhSID0gbWF0ZXJpYWwuY2xlYXJjb2F0ICogY2xlYXJjb2F0REhSQXBwcm94KCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MsIGNjRG90TkwgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArPSBjY0lycmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhcmNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5LmNsZWFyY29hdE5vcm1hbCwgdmVjMyggREVGQVVMVF9TUEVDVUxBUl9DT0VGRklDSUVOVCApLCBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3MgKTtcXG5cXHQjZWxzZVxcblxcdFxcdGZsb2F0IGNsZWFyY29hdERIUiA9IDAuMDtcXG5cXHQjZW5kaWZcXG5cXHQjaWZkZWYgVVNFX1NIRUVOXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKz0gKCAxLjAgLSBjbGVhcmNvYXRESFIgKSAqIGlycmFkaWFuY2UgKiBCUkRGX1NwZWN1bGFyX1NoZWVuKFxcblxcdFxcdFxcdG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLFxcblxcdFxcdFxcdGRpcmVjdExpZ2h0LmRpcmVjdGlvbixcXG5cXHRcXHRcXHRnZW9tZXRyeSxcXG5cXHRcXHRcXHRtYXRlcmlhbC5zaGVlbkNvbG9yXFxuXFx0XFx0KTtcXG5cXHQjZWxzZVxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICs9ICggMS4wIC0gY2xlYXJjb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9TcGVjdWxhcl9HR1goIGRpcmVjdExpZ2h0LCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5ub3JtYWwsIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzKTtcXG5cXHQjZW5kaWZcXG5cXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICs9ICggMS4wIC0gY2xlYXJjb2F0REhSICkgKiBpcnJhZGlhbmNlICogQlJERl9EaWZmdXNlX0xhbWJlcnQoIG1hdGVyaWFsLmRpZmZ1c2VDb2xvciApO1xcbn1cXG52b2lkIFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbCggY29uc3QgaW4gdmVjMyBpcnJhZGlhbmNlLCBjb25zdCBpbiBHZW9tZXRyaWNDb250ZXh0IGdlb21ldHJ5LCBjb25zdCBpbiBQaHlzaWNhbE1hdGVyaWFsIG1hdGVyaWFsLCBpbm91dCBSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCApIHtcXG5cXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gaXJyYWRpYW5jZSAqIEJSREZfRGlmZnVzZV9MYW1iZXJ0KCBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKTtcXG59XFxudm9pZCBSRV9JbmRpcmVjdFNwZWN1bGFyX1BoeXNpY2FsKCBjb25zdCBpbiB2ZWMzIHJhZGlhbmNlLCBjb25zdCBpbiB2ZWMzIGlycmFkaWFuY2UsIGNvbnN0IGluIHZlYzMgY2xlYXJjb2F0UmFkaWFuY2UsIGNvbnN0IGluIEdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnksIGNvbnN0IGluIFBoeXNpY2FsTWF0ZXJpYWwgbWF0ZXJpYWwsIGlub3V0IFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0KSB7XFxuXFx0I2lmZGVmIENMRUFSQ09BVFxcblxcdFxcdGZsb2F0IGNjRG90TlYgPSBzYXR1cmF0ZSggZG90KCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIGdlb21ldHJ5LnZpZXdEaXIgKSApO1xcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKz0gY2xlYXJjb2F0UmFkaWFuY2UgKiBtYXRlcmlhbC5jbGVhcmNvYXQgKiBCUkRGX1NwZWN1bGFyX0dHWF9FbnZpcm9ubWVudCggZ2VvbWV0cnkudmlld0RpciwgZ2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsLCB2ZWMzKCBERUZBVUxUX1NQRUNVTEFSX0NPRUZGSUNJRU5UICksIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyApO1xcblxcdFxcdGZsb2F0IGNjRG90TkwgPSBjY0RvdE5WO1xcblxcdFxcdGZsb2F0IGNsZWFyY29hdERIUiA9IG1hdGVyaWFsLmNsZWFyY29hdCAqIGNsZWFyY29hdERIUkFwcHJveCggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzLCBjY0RvdE5MICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRmbG9hdCBjbGVhcmNvYXRESFIgPSAwLjA7XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgY2xlYXJjb2F0SW52ID0gMS4wIC0gY2xlYXJjb2F0REhSO1xcblxcdHZlYzMgc2luZ2xlU2NhdHRlcmluZyA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzMgbXVsdGlTY2F0dGVyaW5nID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2UgPSBpcnJhZGlhbmNlICogUkVDSVBST0NBTF9QSTtcXG5cXHRCUkRGX1NwZWN1bGFyX011bHRpc2NhdHRlcmluZ19FbnZpcm9ubWVudCggZ2VvbWV0cnksIG1hdGVyaWFsLnNwZWN1bGFyQ29sb3IsIG1hdGVyaWFsLnNwZWN1bGFyUm91Z2huZXNzLCBzaW5nbGVTY2F0dGVyaW5nLCBtdWx0aVNjYXR0ZXJpbmcgKTtcXG5cXHR2ZWMzIGRpZmZ1c2UgPSBtYXRlcmlhbC5kaWZmdXNlQ29sb3IgKiAoIDEuMCAtICggc2luZ2xlU2NhdHRlcmluZyArIG11bHRpU2NhdHRlcmluZyApICk7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBjbGVhcmNvYXRJbnYgKiByYWRpYW5jZSAqIHNpbmdsZVNjYXR0ZXJpbmc7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArPSBtdWx0aVNjYXR0ZXJpbmcgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxuXFx0cmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICs9IGRpZmZ1c2UgKiBjb3NpbmVXZWlnaHRlZElycmFkaWFuY2U7XFxufVxcbiNkZWZpbmUgUkVfRGlyZWN0XFx0XFx0XFx0XFx0UkVfRGlyZWN0X1BoeXNpY2FsXFxuI2RlZmluZSBSRV9EaXJlY3RfUmVjdEFyZWFcXHRcXHRSRV9EaXJlY3RfUmVjdEFyZWFfUGh5c2ljYWxcXG4jZGVmaW5lIFJFX0luZGlyZWN0RGlmZnVzZVxcdFxcdFJFX0luZGlyZWN0RGlmZnVzZV9QaHlzaWNhbFxcbiNkZWZpbmUgUkVfSW5kaXJlY3RTcGVjdWxhclxcdFxcdFJFX0luZGlyZWN0U3BlY3VsYXJfUGh5c2ljYWxcXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJPY2NsdXNpb24oIGNvbnN0IGluIGZsb2F0IGRvdE5WLCBjb25zdCBpbiBmbG9hdCBhbWJpZW50T2NjbHVzaW9uLCBjb25zdCBpbiBmbG9hdCByb3VnaG5lc3MgKSB7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBwb3coIGRvdE5WICsgYW1iaWVudE9jY2x1c2lvbiwgZXhwMiggLSAxNi4wICogcm91Z2huZXNzIC0gMS4wICkgKSAtIDEuMCArIGFtYmllbnRPY2NsdXNpb24gKTtcXG59XCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfYmVnaW4gPSBcIlxcbkdlb21ldHJpY0NvbnRleHQgZ2VvbWV0cnk7XFxuZ2VvbWV0cnkucG9zaXRpb24gPSAtIHZWaWV3UG9zaXRpb247XFxuZ2VvbWV0cnkubm9ybWFsID0gbm9ybWFsO1xcbmdlb21ldHJ5LnZpZXdEaXIgPSAoIGlzT3J0aG9ncmFwaGljICkgPyB2ZWMzKCAwLCAwLCAxICkgOiBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0Z2VvbWV0cnkuY2xlYXJjb2F0Tm9ybWFsID0gY2xlYXJjb2F0Tm9ybWFsO1xcbiNlbmRpZlxcbkluY2lkZW50TGlnaHQgZGlyZWN0TGlnaHQ7XFxuI2lmICggTlVNX1BPSU5UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFBvaW50TGlnaHQgcG9pbnRMaWdodDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFBvaW50TGlnaHRTaGFkb3cgcG9pbnRMaWdodFNoYWRvdztcXG5cXHQjZW5kaWZcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1BPSU5UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodHNbIGkgXTtcXG5cXHRcXHRnZXRQb2ludERpcmVjdExpZ2h0SXJyYWRpYW5jZSggcG9pbnRMaWdodCwgZ2VvbWV0cnksIGRpcmVjdExpZ2h0ICk7XFxuXFx0XFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiAoIFVOUk9MTEVEX0xPT1BfSU5ERVggPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0cG9pbnRMaWdodFNoYWRvdyA9IHBvaW50TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRQb2ludFNoYWRvdyggcG9pbnRTaGFkb3dNYXBbIGkgXSwgcG9pbnRMaWdodFNoYWRvdy5zaGFkb3dNYXBTaXplLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93UmFkaXVzLCB2UG9pbnRTaGFkb3dDb29yZFsgaSBdLCBwb2ludExpZ2h0U2hhZG93LnNoYWRvd0NhbWVyYU5lYXIsIHBvaW50TGlnaHRTaGFkb3cuc2hhZG93Q2FtZXJhRmFyICkgOiAxLjA7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0UkVfRGlyZWN0KCBkaXJlY3RMaWdodCwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcbiNlbmRpZlxcbiNpZiAoIE5VTV9TUE9UX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdFNwb3RMaWdodCBzcG90TGlnaHQ7XFxuXFx0I2lmIGRlZmluZWQoIFVTRV9TSEFET1dNQVAgKSAmJiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFNwb3RMaWdodFNoYWRvdyBzcG90TGlnaHRTaGFkb3c7XFxuXFx0I2VuZGlmXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9TUE9UX0xJR0hUUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRzWyBpIF07XFxuXFx0XFx0Z2V0U3BvdERpcmVjdExpZ2h0SXJyYWRpYW5jZSggc3BvdExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgKVxcblxcdFxcdHNwb3RMaWdodFNoYWRvdyA9IHNwb3RMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRkaXJlY3RMaWdodC5jb2xvciAqPSBhbGwoIGJ2ZWMyKCBkaXJlY3RMaWdodC52aXNpYmxlLCByZWNlaXZlU2hhZG93ICkgKSA/IGdldFNoYWRvdyggc3BvdFNoYWRvd01hcFsgaSBdLCBzcG90TGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgc3BvdExpZ2h0U2hhZG93LnNoYWRvd0JpYXMsIHNwb3RMaWdodFNoYWRvdy5zaGFkb3dSYWRpdXMsIHZTcG90U2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fRElSX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3QgKVxcblxcdERpcmVjdGlvbmFsTGlnaHQgZGlyZWN0aW9uYWxMaWdodDtcXG5cXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3c7XFxuXFx0I2VuZGlmXFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRTOyBpICsrICkge1xcblxcdFxcdGRpcmVjdGlvbmFsTGlnaHQgPSBkaXJlY3Rpb25hbExpZ2h0c1sgaSBdO1xcblxcdFxcdGdldERpcmVjdGlvbmFsRGlyZWN0TGlnaHRJcnJhZGlhbmNlKCBkaXJlY3Rpb25hbExpZ2h0LCBnZW9tZXRyeSwgZGlyZWN0TGlnaHQgKTtcXG5cXHRcXHQjaWYgZGVmaW5lZCggVVNFX1NIQURPV01BUCApICYmICggVU5ST0xMRURfTE9PUF9JTkRFWCA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUyApXFxuXFx0XFx0ZGlyZWN0aW9uYWxMaWdodFNoYWRvdyA9IGRpcmVjdGlvbmFsTGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0ZGlyZWN0TGlnaHQuY29sb3IgKj0gYWxsKCBidmVjMiggZGlyZWN0TGlnaHQudmlzaWJsZSwgcmVjZWl2ZVNoYWRvdyApICkgPyBnZXRTaGFkb3coIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBpIF0sIGRpcmVjdGlvbmFsTGlnaHRTaGFkb3cuc2hhZG93TWFwU2l6ZSwgZGlyZWN0aW9uYWxMaWdodFNoYWRvdy5zaGFkb3dCaWFzLCBkaXJlY3Rpb25hbExpZ2h0U2hhZG93LnNoYWRvd1JhZGl1cywgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSApIDogMS4wO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdFJFX0RpcmVjdCggZGlyZWN0TGlnaHQsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG4jZW5kaWZcXG4jaWYgKCBOVU1fUkVDVF9BUkVBX0xJR0hUUyA+IDAgKSAmJiBkZWZpbmVkKCBSRV9EaXJlY3RfUmVjdEFyZWEgKVxcblxcdFJlY3RBcmVhTGlnaHQgcmVjdEFyZWFMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1JFQ1RfQVJFQV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0cmVjdEFyZWFMaWdodCA9IHJlY3RBcmVhTGlnaHRzWyBpIF07XFxuXFx0XFx0UkVfRGlyZWN0X1JlY3RBcmVhKCByZWN0QXJlYUxpZ2h0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHJlZmxlY3RlZExpZ2h0ICk7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0dmVjMyBpYmxJcnJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuXFx0dmVjMyBpcnJhZGlhbmNlID0gZ2V0QW1iaWVudExpZ2h0SXJyYWRpYW5jZSggYW1iaWVudExpZ2h0Q29sb3IgKTtcXG5cXHRpcnJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJcnJhZGlhbmNlKCBsaWdodFByb2JlLCBnZW9tZXRyeSApO1xcblxcdCNpZiAoIE5VTV9IRU1JX0xJR0hUUyA+IDAgKVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRcXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fSEVNSV9MSUdIVFM7IGkgKysgKSB7XFxuXFx0XFx0XFx0aXJyYWRpYW5jZSArPSBnZXRIZW1pc3BoZXJlTGlnaHRJcnJhZGlhbmNlKCBoZW1pc3BoZXJlTGlnaHRzWyBpIF0sIGdlb21ldHJ5ICk7XFxuXFx0XFx0fVxcblxcdFxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0U3BlY3VsYXIgKVxcblxcdHZlYzMgcmFkaWFuY2UgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWMzIGNsZWFyY29hdFJhZGlhbmNlID0gdmVjMyggMC4wICk7XFxuI2VuZGlmXCI7XG5cbnZhciBsaWdodHNfZnJhZ21lbnRfbWFwcyA9IFwiI2lmIGRlZmluZWQoIFJFX0luZGlyZWN0RGlmZnVzZSApXFxuXFx0I2lmZGVmIFVTRV9MSUdIVE1BUFxcblxcdFxcdHZlYzQgbGlnaHRNYXBUZXhlbD0gdGV4dHVyZTJEKCBsaWdodE1hcCwgdlV2MiApO1xcblxcdFxcdHZlYzMgbGlnaHRNYXBJcnJhZGlhbmNlID0gbGlnaHRNYXBUZXhlbFRvTGluZWFyKCBsaWdodE1hcFRleGVsICkucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0XFx0I2lmbmRlZiBQSFlTSUNBTExZX0NPUlJFQ1RfTElHSFRTXFxuXFx0XFx0XFx0bGlnaHRNYXBJcnJhZGlhbmNlICo9IFBJO1xcblxcdFxcdCNlbmRpZlxcblxcdFxcdGlycmFkaWFuY2UgKz0gbGlnaHRNYXBJcnJhZGlhbmNlO1xcblxcdCNlbmRpZlxcblxcdCNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggU1RBTkRBUkQgKSAmJiBkZWZpbmVkKCBFTlZNQVBfVFlQRV9DVUJFX1VWIClcXG5cXHRcXHRpYmxJcnJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdElycmFkaWFuY2UoIGdlb21ldHJ5LCBtYXhNaXBMZXZlbCApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgJiYgZGVmaW5lZCggUkVfSW5kaXJlY3RTcGVjdWxhciApXFxuXFx0cmFkaWFuY2UgKz0gZ2V0TGlnaHRQcm9iZUluZGlyZWN0UmFkaWFuY2UoIGdlb21ldHJ5LnZpZXdEaXIsIGdlb21ldHJ5Lm5vcm1hbCwgbWF0ZXJpYWwuc3BlY3VsYXJSb3VnaG5lc3MsIG1heE1pcExldmVsICk7XFxuXFx0I2lmZGVmIENMRUFSQ09BVFxcblxcdFxcdGNsZWFyY29hdFJhZGlhbmNlICs9IGdldExpZ2h0UHJvYmVJbmRpcmVjdFJhZGlhbmNlKCBnZW9tZXRyeS52aWV3RGlyLCBnZW9tZXRyeS5jbGVhcmNvYXROb3JtYWwsIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcywgbWF4TWlwTGV2ZWwgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxpZ2h0c19mcmFnbWVudF9lbmQgPSBcIiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdERpZmZ1c2UgKVxcblxcdFJFX0luZGlyZWN0RGlmZnVzZSggaXJyYWRpYW5jZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCByZWZsZWN0ZWRMaWdodCApO1xcbiNlbmRpZlxcbiNpZiBkZWZpbmVkKCBSRV9JbmRpcmVjdFNwZWN1bGFyIClcXG5cXHRSRV9JbmRpcmVjdFNwZWN1bGFyKCByYWRpYW5jZSwgaWJsSXJyYWRpYW5jZSwgY2xlYXJjb2F0UmFkaWFuY2UsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcmVmbGVjdGVkTGlnaHQgKTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX2ZyYWdtZW50ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGICkgJiYgZGVmaW5lZCggVVNFX0xPR0RFUFRIQlVGX0VYVCApXFxuXFx0Z2xfRnJhZ0RlcHRoRVhUID0gdklzUGVyc3BlY3RpdmUgPT0gMC4wID8gZ2xfRnJhZ0Nvb3JkLnogOiBsb2cyKCB2RnJhZ0RlcHRoICkgKiBsb2dEZXB0aEJ1ZkZDICogMC41O1xcbiNlbmRpZlwiO1xuXG52YXIgbG9nZGVwdGhidWZfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRiApICYmIGRlZmluZWQoIFVTRV9MT0dERVBUSEJVRl9FWFQgKVxcblxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX0xPR0RFUFRIQlVGXFxuXFx0I2lmZGVmIFVTRV9MT0dERVBUSEJVRl9FWFRcXG5cXHRcXHR2YXJ5aW5nIGZsb2F0IHZGcmFnRGVwdGg7XFxuXFx0XFx0dmFyeWluZyBmbG9hdCB2SXNQZXJzcGVjdGl2ZTtcXG5cXHQjZWxzZVxcblxcdFxcdHVuaWZvcm0gZmxvYXQgbG9nRGVwdGhCdWZGQztcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGxvZ2RlcHRoYnVmX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9MT0dERVBUSEJVRlxcblxcdCNpZmRlZiBVU0VfTE9HREVQVEhCVUZfRVhUXFxuXFx0XFx0dkZyYWdEZXB0aCA9IDEuMCArIGdsX1Bvc2l0aW9uLnc7XFxuXFx0XFx0dklzUGVyc3BlY3RpdmUgPSBmbG9hdCggaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRpZiAoIGlzUGVyc3BlY3RpdmVNYXRyaXgoIHByb2plY3Rpb25NYXRyaXggKSApIHtcXG5cXHRcXHRcXHRnbF9Qb3NpdGlvbi56ID0gbG9nMiggbWF4KCBFUFNJTE9OLCBnbF9Qb3NpdGlvbi53ICsgMS4wICkgKSAqIGxvZ0RlcHRoQnVmRkMgLSAxLjA7XFxuXFx0XFx0XFx0Z2xfUG9zaXRpb24ueiAqPSBnbF9Qb3NpdGlvbi53O1xcblxcdFxcdH1cXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NQVBcXG5cXHR2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgdlV2ICk7XFxuXFx0dGV4ZWxDb2xvciA9IG1hcFRleGVsVG9MaW5lYXIoIHRleGVsQ29sb3IgKTtcXG5cXHRkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcIjtcblxudmFyIG1hcF9wYXJ0aWNsZV9mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdHZlYzIgdXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggZ2xfUG9pbnRDb29yZC54LCAxLjAgLSBnbF9Qb2ludENvb3JkLnksIDEgKSApLnh5O1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfTUFQXFxuXFx0dmVjNCBtYXBUZXhlbCA9IHRleHR1cmUyRCggbWFwLCB1diApO1xcblxcdGRpZmZ1c2VDb2xvciAqPSBtYXBUZXhlbFRvTGluZWFyKCBtYXBUZXhlbCApO1xcbiNlbmRpZlxcbiNpZmRlZiBVU0VfQUxQSEFNQVBcXG5cXHRkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCB1diApLmc7XFxuI2VuZGlmXCI7XG5cbnZhciBtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudCA9IFwiI2lmIGRlZmluZWQoIFVTRV9NQVAgKSB8fCBkZWZpbmVkKCBVU0VfQUxQSEFNQVAgKVxcblxcdHVuaWZvcm0gbWF0MyB1dlRyYW5zZm9ybTtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX01BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0FMUEhBTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgYWxwaGFNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IG1ldGFsbmVzc0ZhY3RvciA9IG1ldGFsbmVzcztcXG4jaWZkZWYgVVNFX01FVEFMTkVTU01BUFxcblxcdHZlYzQgdGV4ZWxNZXRhbG5lc3MgPSB0ZXh0dXJlMkQoIG1ldGFsbmVzc01hcCwgdlV2ICk7XFxuXFx0bWV0YWxuZXNzRmFjdG9yICo9IHRleGVsTWV0YWxuZXNzLmI7XFxuI2VuZGlmXCI7XG5cbnZhciBtZXRhbG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9NRVRBTE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBtZXRhbG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaG5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0b2JqZWN0Tm9ybWFsICo9IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwwICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0b2JqZWN0Tm9ybWFsICs9IG1vcnBoTm9ybWFsMSAqIG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgMSBdO1xcblxcdG9iamVjdE5vcm1hbCArPSBtb3JwaE5vcm1hbDIgKiBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDIgXTtcXG5cXHRvYmplY3ROb3JtYWwgKz0gbW9ycGhOb3JtYWwzICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuI2VuZGlmXCI7XG5cbnZhciBtb3JwaHRhcmdldF9wYXJzX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZTtcXG5cXHQjaWZuZGVmIFVTRV9NT1JQSE5PUk1BTFNcXG5cXHR1bmlmb3JtIGZsb2F0IG1vcnBoVGFyZ2V0SW5mbHVlbmNlc1sgOCBdO1xcblxcdCNlbHNlXFxuXFx0dW5pZm9ybSBmbG9hdCBtb3JwaFRhcmdldEluZmx1ZW5jZXNbIDQgXTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIG1vcnBodGFyZ2V0X3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9NT1JQSFRBUkdFVFNcXG5cXHR0cmFuc2Zvcm1lZCAqPSBtb3JwaFRhcmdldEJhc2VJbmZsdWVuY2U7XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQwICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAwIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQxICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAxIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQyICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAyIF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQzICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyAzIF07XFxuXFx0I2lmbmRlZiBVU0VfTU9SUEhOT1JNQUxTXFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ0ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA0IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ1ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA1IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ2ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA2IF07XFxuXFx0dHJhbnNmb3JtZWQgKz0gbW9ycGhUYXJnZXQ3ICogbW9ycGhUYXJnZXRJbmZsdWVuY2VzWyA3IF07XFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBub3JtYWxfZnJhZ21lbnRfYmVnaW4gPSBcIiNpZmRlZiBGTEFUX1NIQURFRFxcblxcdHZlYzMgZmR4ID0gdmVjMyggZEZkeCggdlZpZXdQb3NpdGlvbi54ICksIGRGZHgoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR4KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgZmR5ID0gdmVjMyggZEZkeSggdlZpZXdQb3NpdGlvbi54ICksIGRGZHkoIHZWaWV3UG9zaXRpb24ueSApLCBkRmR5KCB2Vmlld1Bvc2l0aW9uLnogKSApO1xcblxcdHZlYzMgbm9ybWFsID0gbm9ybWFsaXplKCBjcm9zcyggZmR4LCBmZHkgKSApO1xcbiNlbHNlXFxuXFx0dmVjMyBub3JtYWwgPSBub3JtYWxpemUoIHZOb3JtYWwgKTtcXG5cXHQjaWZkZWYgRE9VQkxFX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gbm9ybWFsICogKCBmbG9hdCggZ2xfRnJvbnRGYWNpbmcgKSAqIDIuMCAtIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZlYzMgdGFuZ2VudCA9IG5vcm1hbGl6ZSggdlRhbmdlbnQgKTtcXG5cXHRcXHR2ZWMzIGJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggdkJpdGFuZ2VudCApO1xcblxcdFxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRcXHR0YW5nZW50ID0gdGFuZ2VudCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHRcXHRiaXRhbmdlbnQgPSBiaXRhbmdlbnQgKiAoIGZsb2F0KCBnbF9Gcm9udEZhY2luZyApICogMi4wIC0gMS4wICk7XFxuXFx0XFx0I2VuZGlmXFxuXFx0XFx0I2lmIGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUCApXFxuXFx0XFx0XFx0bWF0MyB2VEJOID0gbWF0MyggdGFuZ2VudCwgYml0YW5nZW50LCBub3JtYWwgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG52ZWMzIGdlb21ldHJ5Tm9ybWFsID0gbm9ybWFsO1wiO1xuXG52YXIgbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBPQkpFQ1RTUEFDRV9OT1JNQUxNQVBcXG5cXHRub3JtYWwgPSB0ZXh0dXJlMkQoIG5vcm1hbE1hcCwgdlV2ICkueHl6ICogMi4wIC0gMS4wO1xcblxcdCNpZmRlZiBGTElQX1NJREVEXFxuXFx0XFx0bm9ybWFsID0gLSBub3JtYWw7XFxuXFx0I2VuZGlmXFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdG5vcm1hbCA9IG5vcm1hbCAqICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHQjZW5kaWZcXG5cXHRub3JtYWwgPSBub3JtYWxpemUoIG5vcm1hbE1hdHJpeCAqIG5vcm1hbCApO1xcbiNlbGlmIGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdHZlYzMgbWFwTiA9IHRleHR1cmUyRCggbm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0bWFwTi54eSAqPSBub3JtYWxTY2FsZTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRub3JtYWwgPSBub3JtYWxpemUoIHZUQk4gKiBtYXBOICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLXZWaWV3UG9zaXRpb24sIG5vcm1hbCwgbWFwTiApO1xcblxcdCNlbmRpZlxcbiNlbGlmIGRlZmluZWQoIFVTRV9CVU1QTUFQIClcXG5cXHRub3JtYWwgPSBwZXJ0dXJiTm9ybWFsQXJiKCAtdlZpZXdQb3NpdGlvbiwgbm9ybWFsLCBkSGR4eV9md2QoKSApO1xcbiNlbmRpZlwiO1xuXG52YXIgbm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQgPSBcIiNpZmRlZiBVU0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgbm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBub3JtYWxTY2FsZTtcXG4jZW5kaWZcXG4jaWZkZWYgT0JKRUNUU1BBQ0VfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG4jZW5kaWZcXG4jaWYgISBkZWZpbmVkICggVVNFX1RBTkdFTlQgKSAmJiAoIGRlZmluZWQgKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQICkgfHwgZGVmaW5lZCAoIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQICkgKVxcblxcdHZlYzMgcGVydHVyYk5vcm1hbDJBcmIoIHZlYzMgZXllX3BvcywgdmVjMyBzdXJmX25vcm0sIHZlYzMgbWFwTiApIHtcXG5cXHRcXHR2ZWMzIHEwID0gdmVjMyggZEZkeCggZXllX3Bvcy54ICksIGRGZHgoIGV5ZV9wb3MueSApLCBkRmR4KCBleWVfcG9zLnogKSApO1xcblxcdFxcdHZlYzMgcTEgPSB2ZWMzKCBkRmR5KCBleWVfcG9zLnggKSwgZEZkeSggZXllX3Bvcy55ICksIGRGZHkoIGV5ZV9wb3MueiApICk7XFxuXFx0XFx0dmVjMiBzdDAgPSBkRmR4KCB2VXYuc3QgKTtcXG5cXHRcXHR2ZWMyIHN0MSA9IGRGZHkoIHZVdi5zdCApO1xcblxcdFxcdGZsb2F0IHNjYWxlID0gc2lnbiggc3QxLnQgKiBzdDAucyAtIHN0MC50ICogc3QxLnMgKTtcXG5cXHRcXHR2ZWMzIFMgPSBub3JtYWxpemUoICggcTAgKiBzdDEudCAtIHExICogc3QwLnQgKSAqIHNjYWxlICk7XFxuXFx0XFx0dmVjMyBUID0gbm9ybWFsaXplKCAoIC0gcTAgKiBzdDEucyArIHExICogc3QwLnMgKSAqIHNjYWxlICk7XFxuXFx0XFx0dmVjMyBOID0gbm9ybWFsaXplKCBzdXJmX25vcm0gKTtcXG5cXHRcXHRtYXQzIHRzbiA9IG1hdDMoIFMsIFQsIE4gKTtcXG5cXHRcXHRtYXBOLnh5ICo9ICggZmxvYXQoIGdsX0Zyb250RmFjaW5nICkgKiAyLjAgLSAxLjAgKTtcXG5cXHRcXHRyZXR1cm4gbm9ybWFsaXplKCB0c24gKiBtYXBOICk7XFxuXFx0fVxcbiNlbmRpZlwiO1xuXG52YXIgY2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbiA9IFwiI2lmZGVmIENMRUFSQ09BVFxcblxcdHZlYzMgY2xlYXJjb2F0Tm9ybWFsID0gZ2VvbWV0cnlOb3JtYWw7XFxuI2VuZGlmXCI7XG5cbnZhciBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHMgPSBcIiNpZmRlZiBVU0VfQ0xFQVJDT0FUX05PUk1BTE1BUFxcblxcdHZlYzMgY2xlYXJjb2F0TWFwTiA9IHRleHR1cmUyRCggY2xlYXJjb2F0Tm9ybWFsTWFwLCB2VXYgKS54eXogKiAyLjAgLSAxLjA7XFxuXFx0Y2xlYXJjb2F0TWFwTi54eSAqPSBjbGVhcmNvYXROb3JtYWxTY2FsZTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRjbGVhcmNvYXROb3JtYWwgPSBub3JtYWxpemUoIHZUQk4gKiBjbGVhcmNvYXRNYXBOICk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRjbGVhcmNvYXROb3JtYWwgPSBwZXJ0dXJiTm9ybWFsMkFyYiggLSB2Vmlld1Bvc2l0aW9uLCBjbGVhcmNvYXROb3JtYWwsIGNsZWFyY29hdE1hcE4gKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcIjtcblxudmFyIGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50ID0gXCIjaWZkZWYgVVNFX0NMRUFSQ09BVE1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIGNsZWFyY29hdE1hcDtcXG4jZW5kaWZcXG4jaWZkZWYgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCBjbGVhcmNvYXRSb3VnaG5lc3NNYXA7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQXFxuXFx0dW5pZm9ybSBzYW1wbGVyMkQgY2xlYXJjb2F0Tm9ybWFsTWFwO1xcblxcdHVuaWZvcm0gdmVjMiBjbGVhcmNvYXROb3JtYWxTY2FsZTtcXG4jZW5kaWZcIjtcblxudmFyIHBhY2tpbmcgPSBcInZlYzMgcGFja05vcm1hbFRvUkdCKCBjb25zdCBpbiB2ZWMzIG5vcm1hbCApIHtcXG5cXHRyZXR1cm4gbm9ybWFsaXplKCBub3JtYWwgKSAqIDAuNSArIDAuNTtcXG59XFxudmVjMyB1bnBhY2tSR0JUb05vcm1hbCggY29uc3QgaW4gdmVjMyByZ2IgKSB7XFxuXFx0cmV0dXJuIDIuMCAqIHJnYi54eXogLSAxLjA7XFxufVxcbmNvbnN0IGZsb2F0IFBhY2tVcHNjYWxlID0gMjU2LiAvIDI1NS47Y29uc3QgZmxvYXQgVW5wYWNrRG93bnNjYWxlID0gMjU1LiAvIDI1Ni47XFxuY29uc3QgdmVjMyBQYWNrRmFjdG9ycyA9IHZlYzMoIDI1Ni4gKiAyNTYuICogMjU2LiwgMjU2LiAqIDI1Ni4sICAyNTYuICk7XFxuY29uc3QgdmVjNCBVbnBhY2tGYWN0b3JzID0gVW5wYWNrRG93bnNjYWxlIC8gdmVjNCggUGFja0ZhY3RvcnMsIDEuICk7XFxuY29uc3QgZmxvYXQgU2hpZnRSaWdodDggPSAxLiAvIDI1Ni47XFxudmVjNCBwYWNrRGVwdGhUb1JHQkEoIGNvbnN0IGluIGZsb2F0IHYgKSB7XFxuXFx0dmVjNCByID0gdmVjNCggZnJhY3QoIHYgKiBQYWNrRmFjdG9ycyApLCB2ICk7XFxuXFx0ci55encgLT0gci54eXogKiBTaGlmdFJpZ2h0ODtcXHRyZXR1cm4gciAqIFBhY2tVcHNjYWxlO1xcbn1cXG5mbG9hdCB1bnBhY2tSR0JBVG9EZXB0aCggY29uc3QgaW4gdmVjNCB2ICkge1xcblxcdHJldHVybiBkb3QoIHYsIFVucGFja0ZhY3RvcnMgKTtcXG59XFxudmVjNCBwYWNrMkhhbGZUb1JHQkEoIHZlYzIgdiApIHtcXG5cXHR2ZWM0IHIgPSB2ZWM0KCB2LngsIGZyYWN0KCB2LnggKiAyNTUuMCApLCB2LnksIGZyYWN0KCB2LnkgKiAyNTUuMCApKTtcXG5cXHRyZXR1cm4gdmVjNCggci54IC0gci55IC8gMjU1LjAsIHIueSwgci56IC0gci53IC8gMjU1LjAsIHIudyk7XFxufVxcbnZlYzIgdW5wYWNrUkdCQVRvMkhhbGYoIHZlYzQgdiApIHtcXG5cXHRyZXR1cm4gdmVjMiggdi54ICsgKCB2LnkgLyAyNTUuMCApLCB2LnogKyAoIHYudyAvIDI1NS4wICkgKTtcXG59XFxuZmxvYXQgdmlld1pUb09ydGhvZ3JhcGhpY0RlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoIHZpZXdaICsgbmVhciApIC8gKCBuZWFyIC0gZmFyICk7XFxufVxcbmZsb2F0IG9ydGhvZ3JhcGhpY0RlcHRoVG9WaWV3WiggY29uc3QgaW4gZmxvYXQgbGluZWFyQ2xpcFosIGNvbnN0IGluIGZsb2F0IG5lYXIsIGNvbnN0IGluIGZsb2F0IGZhciApIHtcXG5cXHRyZXR1cm4gbGluZWFyQ2xpcFogKiAoIG5lYXIgLSBmYXIgKSAtIG5lYXI7XFxufVxcbmZsb2F0IHZpZXdaVG9QZXJzcGVjdGl2ZURlcHRoKCBjb25zdCBpbiBmbG9hdCB2aWV3WiwgY29uc3QgaW4gZmxvYXQgbmVhciwgY29uc3QgaW4gZmxvYXQgZmFyICkge1xcblxcdHJldHVybiAoKCBuZWFyICsgdmlld1ogKSAqIGZhciApIC8gKCggZmFyIC0gbmVhciApICogdmlld1ogKTtcXG59XFxuZmxvYXQgcGVyc3BlY3RpdmVEZXB0aFRvVmlld1ooIGNvbnN0IGluIGZsb2F0IGludkNsaXBaLCBjb25zdCBpbiBmbG9hdCBuZWFyLCBjb25zdCBpbiBmbG9hdCBmYXIgKSB7XFxuXFx0cmV0dXJuICggbmVhciAqIGZhciApIC8gKCAoIGZhciAtIG5lYXIgKSAqIGludkNsaXBaIC0gZmFyICk7XFxufVwiO1xuXG52YXIgcHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudCA9IFwiI2lmZGVmIFBSRU1VTFRJUExJRURfQUxQSEFcXG5cXHRnbF9GcmFnQ29sb3IucmdiICo9IGdsX0ZyYWdDb2xvci5hO1xcbiNlbmRpZlwiO1xuXG52YXIgcHJvamVjdF92ZXJ0ZXggPSBcInZlYzQgbXZQb3NpdGlvbiA9IHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG4jaWZkZWYgVVNFX0lOU1RBTkNJTkdcXG5cXHRtdlBvc2l0aW9uID0gaW5zdGFuY2VNYXRyaXggKiBtdlBvc2l0aW9uO1xcbiNlbmRpZlxcbm12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiBtdlBvc2l0aW9uO1xcbmdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG12UG9zaXRpb247XCI7XG5cbnZhciBkaXRoZXJpbmdfZnJhZ21lbnQgPSBcIiNpZmRlZiBESVRIRVJJTkdcXG5cXHRnbF9GcmFnQ29sb3IucmdiID0gZGl0aGVyaW5nKCBnbF9GcmFnQ29sb3IucmdiICk7XFxuI2VuZGlmXCI7XG5cbnZhciBkaXRoZXJpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIERJVEhFUklOR1xcblxcdHZlYzMgZGl0aGVyaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdFxcdGZsb2F0IGdyaWRfcG9zaXRpb24gPSByYW5kKCBnbF9GcmFnQ29vcmQueHkgKTtcXG5cXHRcXHR2ZWMzIGRpdGhlcl9zaGlmdF9SR0IgPSB2ZWMzKCAwLjI1IC8gMjU1LjAsIC0wLjI1IC8gMjU1LjAsIDAuMjUgLyAyNTUuMCApO1xcblxcdFxcdGRpdGhlcl9zaGlmdF9SR0IgPSBtaXgoIDIuMCAqIGRpdGhlcl9zaGlmdF9SR0IsIC0yLjAgKiBkaXRoZXJfc2hpZnRfUkdCLCBncmlkX3Bvc2l0aW9uICk7XFxuXFx0XFx0cmV0dXJuIGNvbG9yICsgZGl0aGVyX3NoaWZ0X1JHQjtcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHJvdWdobmVzc0ZhY3RvciA9IHJvdWdobmVzcztcXG4jaWZkZWYgVVNFX1JPVUdITkVTU01BUFxcblxcdHZlYzQgdGV4ZWxSb3VnaG5lc3MgPSB0ZXh0dXJlMkQoIHJvdWdobmVzc01hcCwgdlV2ICk7XFxuXFx0cm91Z2huZXNzRmFjdG9yICo9IHRleGVsUm91Z2huZXNzLmc7XFxuI2VuZGlmXCI7XG5cbnZhciByb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9ST1VHSE5FU1NNQVBcXG5cXHR1bmlmb3JtIHNhbXBsZXIyRCByb3VnaG5lc3NNYXA7XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIGRpcmVjdGlvbmFsU2hhZG93TWFwWyBOVU1fRElSX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdFxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwb3RTaGFkb3dNYXBbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlNwb3RTaGFkb3dDb29yZFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIHNhbXBsZXIyRCBwb2ludFNoYWRvd01hcFsgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlBvaW50U2hhZG93Q29vcmRbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0ZmxvYXQgdGV4dHVyZTJEQ29tcGFyZSggc2FtcGxlcjJEIGRlcHRocywgdmVjMiB1diwgZmxvYXQgY29tcGFyZSApIHtcXG5cXHRcXHRyZXR1cm4gc3RlcCggY29tcGFyZSwgdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggZGVwdGhzLCB1diApICkgKTtcXG5cXHR9XFxuXFx0dmVjMiB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYgKSB7XFxuXFx0XFx0cmV0dXJuIHVucGFja1JHQkFUbzJIYWxmKCB0ZXh0dXJlMkQoIHNoYWRvdywgdXYgKSApO1xcblxcdH1cXG5cXHRmbG9hdCBWU01TaGFkb3cgKHNhbXBsZXIyRCBzaGFkb3csIHZlYzIgdXYsIGZsb2F0IGNvbXBhcmUgKXtcXG5cXHRcXHRmbG9hdCBvY2NsdXNpb24gPSAxLjA7XFxuXFx0XFx0dmVjMiBkaXN0cmlidXRpb24gPSB0ZXh0dXJlMkREaXN0cmlidXRpb24oIHNoYWRvdywgdXYgKTtcXG5cXHRcXHRmbG9hdCBoYXJkX3NoYWRvdyA9IHN0ZXAoIGNvbXBhcmUgLCBkaXN0cmlidXRpb24ueCApO1xcblxcdFxcdGlmIChoYXJkX3NoYWRvdyAhPSAxLjAgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgZGlzdGFuY2UgPSBjb21wYXJlIC0gZGlzdHJpYnV0aW9uLnggO1xcblxcdFxcdFxcdGZsb2F0IHZhcmlhbmNlID0gbWF4KCAwLjAwMDAwLCBkaXN0cmlidXRpb24ueSAqIGRpc3RyaWJ1dGlvbi55ICk7XFxuXFx0XFx0XFx0ZmxvYXQgc29mdG5lc3NfcHJvYmFiaWxpdHkgPSB2YXJpYW5jZSAvICh2YXJpYW5jZSArIGRpc3RhbmNlICogZGlzdGFuY2UgKTtcXHRcXHRcXHRzb2Z0bmVzc19wcm9iYWJpbGl0eSA9IGNsYW1wKCAoIHNvZnRuZXNzX3Byb2JhYmlsaXR5IC0gMC4zICkgLyAoIDAuOTUgLSAwLjMgKSwgMC4wLCAxLjAgKTtcXHRcXHRcXHRvY2NsdXNpb24gPSBjbGFtcCggbWF4KCBoYXJkX3NoYWRvdywgc29mdG5lc3NfcHJvYmFiaWxpdHkgKSwgMC4wLCAxLjAgKTtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIG9jY2x1c2lvbjtcXG5cXHR9XFxuXFx0ZmxvYXQgZ2V0U2hhZG93KCBzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMyIHNoYWRvd01hcFNpemUsIGZsb2F0IHNoYWRvd0JpYXMsIGZsb2F0IHNoYWRvd1JhZGl1cywgdmVjNCBzaGFkb3dDb29yZCApIHtcXG5cXHRcXHRmbG9hdCBzaGFkb3cgPSAxLjA7XFxuXFx0XFx0c2hhZG93Q29vcmQueHl6IC89IHNoYWRvd0Nvb3JkLnc7XFxuXFx0XFx0c2hhZG93Q29vcmQueiArPSBzaGFkb3dCaWFzO1xcblxcdFxcdGJ2ZWM0IGluRnJ1c3R1bVZlYyA9IGJ2ZWM0ICggc2hhZG93Q29vcmQueCA+PSAwLjAsIHNoYWRvd0Nvb3JkLnggPD0gMS4wLCBzaGFkb3dDb29yZC55ID49IDAuMCwgc2hhZG93Q29vcmQueSA8PSAxLjAgKTtcXG5cXHRcXHRib29sIGluRnJ1c3R1bSA9IGFsbCggaW5GcnVzdHVtVmVjICk7XFxuXFx0XFx0YnZlYzIgZnJ1c3R1bVRlc3RWZWMgPSBidmVjMiggaW5GcnVzdHVtLCBzaGFkb3dDb29yZC56IDw9IDEuMCApO1xcblxcdFxcdGJvb2wgZnJ1c3R1bVRlc3QgPSBhbGwoIGZydXN0dW1UZXN0VmVjICk7XFxuXFx0XFx0aWYgKCBmcnVzdHVtVGVzdCApIHtcXG5cXHRcXHQjaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfUENGIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeDAgPSAtIHRleGVsU2l6ZS54ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR5MCA9IC0gdGV4ZWxTaXplLnkgKiBzaGFkb3dSYWRpdXM7XFxuXFx0XFx0XFx0ZmxvYXQgZHgxID0gKyB0ZXhlbFNpemUueCAqIHNoYWRvd1JhZGl1cztcXG5cXHRcXHRcXHRmbG9hdCBkeTEgPSArIHRleGVsU2l6ZS55ICogc2hhZG93UmFkaXVzO1xcblxcdFxcdFxcdGZsb2F0IGR4MiA9IGR4MCAvIDIuMDtcXG5cXHRcXHRcXHRmbG9hdCBkeTIgPSBkeTAgLyAyLjA7XFxuXFx0XFx0XFx0ZmxvYXQgZHgzID0gZHgxIC8gMi4wO1xcblxcdFxcdFxcdGZsb2F0IGR5MyA9IGR5MSAvIDIuMDtcXG5cXHRcXHRcXHRzaGFkb3cgPSAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MSwgZHkwICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIDAuMCwgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MywgZHkyICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSArIHZlYzIoIGR4MiwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBzaGFkb3dDb29yZC54eSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCAwLjAgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgyLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgzLCBkeTMgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgwLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggMC4wLCBkeTEgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHNoYWRvd0Nvb3JkLnh5ICsgdmVjMiggZHgxLCBkeTEgKSwgc2hhZG93Q29vcmQueiApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gMTcuMCApO1xcblxcdFxcdCNlbGlmIGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1BDRl9TT0ZUIClcXG5cXHRcXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gc2hhZG93TWFwU2l6ZTtcXG5cXHRcXHRcXHRmbG9hdCBkeCA9IHRleGVsU2l6ZS54O1xcblxcdFxcdFxcdGZsb2F0IGR5ID0gdGV4ZWxTaXplLnk7XFxuXFx0XFx0XFx0dmVjMiB1diA9IHNoYWRvd0Nvb3JkLnh5O1xcblxcdFxcdFxcdHZlYzIgZiA9IGZyYWN0KCB1diAqIHNoYWRvd01hcFNpemUgKyAwLjUgKTtcXG5cXHRcXHRcXHR1diAtPSBmICogdGV4ZWxTaXplO1xcblxcdFxcdFxcdHNoYWRvdyA9IChcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2LCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDAuMCwgZHkgKSwgc2hhZG93Q29vcmQueiApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdGV4ZWxTaXplLCBzaGFkb3dDb29yZC56ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMC4wICksIHNoYWRvd0Nvb3JkLnogKSxcXG5cXHRcXHRcXHRcXHRcXHQgZi54ICkgK1xcblxcdFxcdFxcdFxcdG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgZHkgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHQgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueCApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAwLjAsIC1keSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdCB0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIHV2ICsgdmVjMiggMC4wLCAyLjAgKiBkeSApLCBzaGFkb3dDb29yZC56ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApICtcXG5cXHRcXHRcXHRcXHRtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgLWR5ICksIHNoYWRvd0Nvb3JkLnogKSwgXFxuXFx0XFx0XFx0XFx0XFx0IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdCBmLnkgKSArXFxuXFx0XFx0XFx0XFx0bWl4KCBtaXgoIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAtZHgsIC1keSApLCBzaGFkb3dDb29yZC56ICksIFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIDIuMCAqIGR4LCAtZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IG1peCggdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCB1diArIHZlYzIoIC1keCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLCBcXG5cXHRcXHRcXHRcXHRcXHRcXHQgIHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgdXYgKyB2ZWMyKCAyLjAgKiBkeCwgMi4wICogZHkgKSwgc2hhZG93Q29vcmQueiApLFxcblxcdFxcdFxcdFxcdFxcdFxcdCAgZi54ICksXFxuXFx0XFx0XFx0XFx0XFx0IGYueSApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2VsaWYgZGVmaW5lZCggU0hBRE9XTUFQX1RZUEVfVlNNIClcXG5cXHRcXHRcXHRzaGFkb3cgPSBWU01TaGFkb3coIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZWxzZVxcblxcdFxcdFxcdHNoYWRvdyA9IHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgc2hhZG93Q29vcmQueHksIHNoYWRvd0Nvb3JkLnogKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHNoYWRvdztcXG5cXHR9XFxuXFx0dmVjMiBjdWJlVG9VViggdmVjMyB2LCBmbG9hdCB0ZXhlbFNpemVZICkge1xcblxcdFxcdHZlYzMgYWJzViA9IGFicyggdiApO1xcblxcdFxcdGZsb2F0IHNjYWxlVG9DdWJlID0gMS4wIC8gbWF4KCBhYnNWLngsIG1heCggYWJzVi55LCBhYnNWLnogKSApO1xcblxcdFxcdGFic1YgKj0gc2NhbGVUb0N1YmU7XFxuXFx0XFx0diAqPSBzY2FsZVRvQ3ViZSAqICggMS4wIC0gMi4wICogdGV4ZWxTaXplWSApO1xcblxcdFxcdHZlYzIgcGxhbmFyID0gdi54eTtcXG5cXHRcXHRmbG9hdCBhbG1vc3RBVGV4ZWwgPSAxLjUgKiB0ZXhlbFNpemVZO1xcblxcdFxcdGZsb2F0IGFsbW9zdE9uZSA9IDEuMCAtIGFsbW9zdEFUZXhlbDtcXG5cXHRcXHRpZiAoIGFic1YueiA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0aWYgKCB2LnogPiAwLjAgKVxcblxcdFxcdFxcdFxcdHBsYW5hci54ID0gNC4wIC0gdi54O1xcblxcdFxcdH0gZWxzZSBpZiAoIGFic1YueCA+PSBhbG1vc3RPbmUgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgc2lnblggPSBzaWduKCB2LnggKTtcXG5cXHRcXHRcXHRwbGFuYXIueCA9IHYueiAqIHNpZ25YICsgMi4wICogc2lnblg7XFxuXFx0XFx0fSBlbHNlIGlmICggYWJzVi55ID49IGFsbW9zdE9uZSApIHtcXG5cXHRcXHRcXHRmbG9hdCBzaWduWSA9IHNpZ24oIHYueSApO1xcblxcdFxcdFxcdHBsYW5hci54ID0gdi54ICsgMi4wICogc2lnblkgKyAyLjA7XFxuXFx0XFx0XFx0cGxhbmFyLnkgPSB2LnogKiBzaWduWSAtIDIuMDtcXG5cXHRcXHR9XFxuXFx0XFx0cmV0dXJuIHZlYzIoIDAuMTI1LCAwLjI1ICkgKiBwbGFuYXIgKyB2ZWMyKCAwLjM3NSwgMC43NSApO1xcblxcdH1cXG5cXHRmbG9hdCBnZXRQb2ludFNoYWRvdyggc2FtcGxlcjJEIHNoYWRvd01hcCwgdmVjMiBzaGFkb3dNYXBTaXplLCBmbG9hdCBzaGFkb3dCaWFzLCBmbG9hdCBzaGFkb3dSYWRpdXMsIHZlYzQgc2hhZG93Q29vcmQsIGZsb2F0IHNoYWRvd0NhbWVyYU5lYXIsIGZsb2F0IHNoYWRvd0NhbWVyYUZhciApIHtcXG5cXHRcXHR2ZWMyIHRleGVsU2l6ZSA9IHZlYzIoIDEuMCApIC8gKCBzaGFkb3dNYXBTaXplICogdmVjMiggNC4wLCAyLjAgKSApO1xcblxcdFxcdHZlYzMgbGlnaHRUb1Bvc2l0aW9uID0gc2hhZG93Q29vcmQueHl6O1xcblxcdFxcdGZsb2F0IGRwID0gKCBsZW5ndGgoIGxpZ2h0VG9Qb3NpdGlvbiApIC0gc2hhZG93Q2FtZXJhTmVhciApIC8gKCBzaGFkb3dDYW1lcmFGYXIgLSBzaGFkb3dDYW1lcmFOZWFyICk7XFx0XFx0ZHAgKz0gc2hhZG93QmlhcztcXG5cXHRcXHR2ZWMzIGJkM0QgPSBub3JtYWxpemUoIGxpZ2h0VG9Qb3NpdGlvbiApO1xcblxcdFxcdCNpZiBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0YgKSB8fCBkZWZpbmVkKCBTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCApIHx8IGRlZmluZWQoIFNIQURPV01BUF9UWVBFX1ZTTSApXFxuXFx0XFx0XFx0dmVjMiBvZmZzZXQgPSB2ZWMyKCAtIDEsIDEgKSAqIHNoYWRvd1JhZGl1cyAqIHRleGVsU2l6ZS55O1xcblxcdFxcdFxcdHJldHVybiAoXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eXksIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXl5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnh5eCwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC55eXgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueHh5LCB0ZXhlbFNpemUueSApLCBkcCApICtcXG5cXHRcXHRcXHRcXHR0ZXh0dXJlMkRDb21wYXJlKCBzaGFkb3dNYXAsIGN1YmVUb1VWKCBiZDNEICsgb2Zmc2V0Lnl4eSwgdGV4ZWxTaXplLnkgKSwgZHAgKSArXFxuXFx0XFx0XFx0XFx0dGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCArIG9mZnNldC54eHgsIHRleGVsU2l6ZS55ICksIGRwICkgK1xcblxcdFxcdFxcdFxcdHRleHR1cmUyRENvbXBhcmUoIHNoYWRvd01hcCwgY3ViZVRvVVYoIGJkM0QgKyBvZmZzZXQueXh4LCB0ZXhlbFNpemUueSApLCBkcCApXFxuXFx0XFx0XFx0KSAqICggMS4wIC8gOS4wICk7XFxuXFx0XFx0I2Vsc2VcXG5cXHRcXHRcXHRyZXR1cm4gdGV4dHVyZTJEQ29tcGFyZSggc2hhZG93TWFwLCBjdWJlVG9VViggYmQzRCwgdGV4ZWxTaXplLnkgKSwgZHAgKTtcXG5cXHRcXHQjZW5kaWZcXG5cXHR9XFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXBfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXhbIE5VTV9ESVJfTElHSFRfU0hBRE9XUyBdO1xcblxcdFxcdHZhcnlpbmcgdmVjNCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgTlVNX0RJUl9MSUdIVF9TSEFET1dTIF07XFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IHNwb3RTaGFkb3dNYXRyaXhbIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgXTtcXG5cXHRcXHR2YXJ5aW5nIHZlYzQgdlNwb3RTaGFkb3dDb29yZFsgTlVNX1NQT1RfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHRcXHR1bmlmb3JtIG1hdDQgcG9pbnRTaGFkb3dNYXRyaXhbIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTIF07XFxuXFx0XFx0dmFyeWluZyB2ZWM0IHZQb2ludFNoYWRvd0Nvb3JkWyBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUyBdO1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2hhZG93bWFwX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TSEFET1dNQVBcXG5cXHQjaWYgTlVNX0RJUl9MSUdIVF9TSEFET1dTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fRElSX0xJR0hUX1NIQURPV1M7IGkgKysgKSB7XFxuXFx0XFx0dkRpcmVjdGlvbmFsU2hhZG93Q29vcmRbIGkgXSA9IGRpcmVjdGlvbmFsU2hhZG93TWF0cml4WyBpIF0gKiB3b3JsZFBvc2l0aW9uO1xcblxcdH1cXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX2VuZFxcblxcdCNlbmRpZlxcblxcdCNpZiBOVU1fU1BPVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fU1BPVF9MSUdIVF9TSEFET1dTOyBpICsrICkge1xcblxcdFxcdHZTcG90U2hhZG93Q29vcmRbIGkgXSA9IHNwb3RTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9QT0lOVF9MSUdIVF9TSEFET1dTID4gMFxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHR2UG9pbnRTaGFkb3dDb29yZFsgaSBdID0gcG9pbnRTaGFkb3dNYXRyaXhbIGkgXSAqIHdvcmxkUG9zaXRpb247XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuI2VuZGlmXCI7XG5cbnZhciBzaGFkb3dtYXNrX3BhcnNfZnJhZ21lbnQgPSBcImZsb2F0IGdldFNoYWRvd01hc2soKSB7XFxuXFx0ZmxvYXQgc2hhZG93ID0gMS4wO1xcblxcdCNpZmRlZiBVU0VfU0hBRE9XTUFQXFxuXFx0I2lmIE5VTV9ESVJfTElHSFRfU0hBRE9XUyA+IDBcXG5cXHREaXJlY3Rpb25hbExpZ2h0U2hhZG93IGRpcmVjdGlvbmFsTGlnaHQ7XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFxcblxcdGZvciAoIGludCBpID0gMDsgaSA8IE5VTV9ESVJfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRkaXJlY3Rpb25hbExpZ2h0ID0gZGlyZWN0aW9uYWxMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFNoYWRvdyggZGlyZWN0aW9uYWxTaGFkb3dNYXBbIGkgXSwgZGlyZWN0aW9uYWxMaWdodC5zaGFkb3dNYXBTaXplLCBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvd0JpYXMsIGRpcmVjdGlvbmFsTGlnaHQuc2hhZG93UmFkaXVzLCB2RGlyZWN0aW9uYWxTaGFkb3dDb29yZFsgaSBdICkgOiAxLjA7XFxuXFx0fVxcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3BfZW5kXFxuXFx0I2VuZGlmXFxuXFx0I2lmIE5VTV9TUE9UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0U3BvdExpZ2h0U2hhZG93IHNwb3RMaWdodDtcXG5cXHQjcHJhZ21hIHVucm9sbF9sb29wX3N0YXJ0XFxuXFx0Zm9yICggaW50IGkgPSAwOyBpIDwgTlVNX1NQT1RfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRzcG90TGlnaHQgPSBzcG90TGlnaHRTaGFkb3dzWyBpIF07XFxuXFx0XFx0c2hhZG93ICo9IHJlY2VpdmVTaGFkb3cgPyBnZXRTaGFkb3coIHNwb3RTaGFkb3dNYXBbIGkgXSwgc3BvdExpZ2h0LnNoYWRvd01hcFNpemUsIHNwb3RMaWdodC5zaGFkb3dCaWFzLCBzcG90TGlnaHQuc2hhZG93UmFkaXVzLCB2U3BvdFNoYWRvd0Nvb3JkWyBpIF0gKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjaWYgTlVNX1BPSU5UX0xJR0hUX1NIQURPV1MgPiAwXFxuXFx0UG9pbnRMaWdodFNoYWRvdyBwb2ludExpZ2h0O1xcblxcdCNwcmFnbWEgdW5yb2xsX2xvb3Bfc3RhcnRcXG5cXHRmb3IgKCBpbnQgaSA9IDA7IGkgPCBOVU1fUE9JTlRfTElHSFRfU0hBRE9XUzsgaSArKyApIHtcXG5cXHRcXHRwb2ludExpZ2h0ID0gcG9pbnRMaWdodFNoYWRvd3NbIGkgXTtcXG5cXHRcXHRzaGFkb3cgKj0gcmVjZWl2ZVNoYWRvdyA/IGdldFBvaW50U2hhZG93KCBwb2ludFNoYWRvd01hcFsgaSBdLCBwb2ludExpZ2h0LnNoYWRvd01hcFNpemUsIHBvaW50TGlnaHQuc2hhZG93QmlhcywgcG9pbnRMaWdodC5zaGFkb3dSYWRpdXMsIHZQb2ludFNoYWRvd0Nvb3JkWyBpIF0sIHBvaW50TGlnaHQuc2hhZG93Q2FtZXJhTmVhciwgcG9pbnRMaWdodC5zaGFkb3dDYW1lcmFGYXIgKSA6IDEuMDtcXG5cXHR9XFxuXFx0I3ByYWdtYSB1bnJvbGxfbG9vcF9lbmRcXG5cXHQjZW5kaWZcXG5cXHQjZW5kaWZcXG5cXHRyZXR1cm4gc2hhZG93O1xcbn1cIjtcblxudmFyIHNraW5iYXNlX3ZlcnRleCA9IFwiI2lmZGVmIFVTRV9TS0lOTklOR1xcblxcdG1hdDQgYm9uZU1hdFggPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueCApO1xcblxcdG1hdDQgYm9uZU1hdFkgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueSApO1xcblxcdG1hdDQgYm9uZU1hdFogPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgueiApO1xcblxcdG1hdDQgYm9uZU1hdFcgPSBnZXRCb25lTWF0cml4KCBza2luSW5kZXgudyApO1xcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5pbmdfcGFyc192ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeDtcXG5cXHR1bmlmb3JtIG1hdDQgYmluZE1hdHJpeEludmVyc2U7XFxuXFx0I2lmZGVmIEJPTkVfVEVYVFVSRVxcblxcdFxcdHVuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIGJvbmVUZXh0dXJlO1xcblxcdFxcdHVuaWZvcm0gaW50IGJvbmVUZXh0dXJlU2l6ZTtcXG5cXHRcXHRtYXQ0IGdldEJvbmVNYXRyaXgoIGNvbnN0IGluIGZsb2F0IGkgKSB7XFxuXFx0XFx0XFx0ZmxvYXQgaiA9IGkgKiA0LjA7XFxuXFx0XFx0XFx0ZmxvYXQgeCA9IG1vZCggaiwgZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgeSA9IGZsb29yKCBqIC8gZmxvYXQoIGJvbmVUZXh0dXJlU2l6ZSApICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHggPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0ZmxvYXQgZHkgPSAxLjAgLyBmbG9hdCggYm9uZVRleHR1cmVTaXplICk7XFxuXFx0XFx0XFx0eSA9IGR5ICogKCB5ICsgMC41ICk7XFxuXFx0XFx0XFx0dmVjNCB2MSA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMC41ICksIHkgKSApO1xcblxcdFxcdFxcdHZlYzQgdjIgPSB0ZXh0dXJlMkQoIGJvbmVUZXh0dXJlLCB2ZWMyKCBkeCAqICggeCArIDEuNSApLCB5ICkgKTtcXG5cXHRcXHRcXHR2ZWM0IHYzID0gdGV4dHVyZTJEKCBib25lVGV4dHVyZSwgdmVjMiggZHggKiAoIHggKyAyLjUgKSwgeSApICk7XFxuXFx0XFx0XFx0dmVjNCB2NCA9IHRleHR1cmUyRCggYm9uZVRleHR1cmUsIHZlYzIoIGR4ICogKCB4ICsgMy41ICksIHkgKSApO1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IG1hdDQoIHYxLCB2MiwgdjMsIHY0ICk7XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbHNlXFxuXFx0XFx0dW5pZm9ybSBtYXQ0IGJvbmVNYXRyaWNlc1sgTUFYX0JPTkVTIF07XFxuXFx0XFx0bWF0NCBnZXRCb25lTWF0cml4KCBjb25zdCBpbiBmbG9hdCBpICkge1xcblxcdFxcdFxcdG1hdDQgYm9uZSA9IGJvbmVNYXRyaWNlc1sgaW50KGkpIF07XFxuXFx0XFx0XFx0cmV0dXJuIGJvbmU7XFxuXFx0XFx0fVxcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5pbmdfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1NLSU5OSU5HXFxuXFx0dmVjNCBza2luVmVydGV4ID0gYmluZE1hdHJpeCAqIHZlYzQoIHRyYW5zZm9ybWVkLCAxLjAgKTtcXG5cXHR2ZWM0IHNraW5uZWQgPSB2ZWM0KCAwLjAgKTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRYICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueDtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRZICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQueTtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRaICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQuejtcXG5cXHRza2lubmVkICs9IGJvbmVNYXRXICogc2tpblZlcnRleCAqIHNraW5XZWlnaHQudztcXG5cXHR0cmFuc2Zvcm1lZCA9ICggYmluZE1hdHJpeEludmVyc2UgKiBza2lubmVkICkueHl6O1xcbiNlbmRpZlwiO1xuXG52YXIgc2tpbm5vcm1hbF92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfU0tJTk5JTkdcXG5cXHRtYXQ0IHNraW5NYXRyaXggPSBtYXQ0KCAwLjAgKTtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQueCAqIGJvbmVNYXRYO1xcblxcdHNraW5NYXRyaXggKz0gc2tpbldlaWdodC55ICogYm9uZU1hdFk7XFxuXFx0c2tpbk1hdHJpeCArPSBza2luV2VpZ2h0LnogKiBib25lTWF0WjtcXG5cXHRza2luTWF0cml4ICs9IHNraW5XZWlnaHQudyAqIGJvbmVNYXRXO1xcblxcdHNraW5NYXRyaXggID0gYmluZE1hdHJpeEludmVyc2UgKiBza2luTWF0cml4ICogYmluZE1hdHJpeDtcXG5cXHRvYmplY3ROb3JtYWwgPSB2ZWM0KCBza2luTWF0cml4ICogdmVjNCggb2JqZWN0Tm9ybWFsLCAwLjAgKSApLnh5ejtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHRvYmplY3RUYW5nZW50ID0gdmVjNCggc2tpbk1hdHJpeCAqIHZlYzQoIG9iamVjdFRhbmdlbnQsIDAuMCApICkueHl6O1xcblxcdCNlbmRpZlxcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfZnJhZ21lbnQgPSBcImZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxuI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHZlYzQgdGV4ZWxTcGVjdWxhciA9IHRleHR1cmUyRCggc3BlY3VsYXJNYXAsIHZVdiApO1xcblxcdHNwZWN1bGFyU3RyZW5ndGggPSB0ZXhlbFNwZWN1bGFyLnI7XFxuI2Vsc2VcXG5cXHRzcGVjdWxhclN0cmVuZ3RoID0gMS4wO1xcbiNlbmRpZlwiO1xuXG52YXIgc3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudCA9IFwiI2lmZGVmIFVTRV9TUEVDVUxBUk1BUFxcblxcdHVuaWZvcm0gc2FtcGxlcjJEIHNwZWN1bGFyTWFwO1xcbiNlbmRpZlwiO1xuXG52YXIgdG9uZW1hcHBpbmdfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBUT05FX01BUFBJTkcgKVxcblxcdGdsX0ZyYWdDb2xvci5yZ2IgPSB0b25lTWFwcGluZyggZ2xfRnJhZ0NvbG9yLnJnYiApO1xcbiNlbmRpZlwiO1xuXG52YXIgdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCA9IFwiI2lmbmRlZiBzYXR1cmF0ZVxcbiNkZWZpbmUgc2F0dXJhdGUoYSkgY2xhbXAoIGEsIDAuMCwgMS4wIClcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxudW5pZm9ybSBmbG9hdCB0b25lTWFwcGluZ1doaXRlUG9pbnQ7XFxudmVjMyBMaW5lYXJUb25lTWFwcGluZyggdmVjMyBjb2xvciApIHtcXG5cXHRyZXR1cm4gdG9uZU1hcHBpbmdFeHBvc3VyZSAqIGNvbG9yO1xcbn1cXG52ZWMzIFJlaW5oYXJkVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoIGNvbG9yIC8gKCB2ZWMzKCAxLjAgKSArIGNvbG9yICkgKTtcXG59XFxuI2RlZmluZSBVbmNoYXJ0ZWQySGVscGVyKCB4ICkgbWF4KCAoICggeCAqICggMC4xNSAqIHggKyAwLjEwICogMC41MCApICsgMC4yMCAqIDAuMDIgKSAvICggeCAqICggMC4xNSAqIHggKyAwLjUwICkgKyAwLjIwICogMC4zMCApICkgLSAwLjAyIC8gMC4zMCwgdmVjMyggMC4wICkgKVxcbnZlYzMgVW5jaGFydGVkMlRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0cmV0dXJuIHNhdHVyYXRlKCBVbmNoYXJ0ZWQySGVscGVyKCBjb2xvciApIC8gVW5jaGFydGVkMkhlbHBlciggdmVjMyggdG9uZU1hcHBpbmdXaGl0ZVBvaW50ICkgKSApO1xcbn1cXG52ZWMzIE9wdGltaXplZENpbmVvblRvbmVNYXBwaW5nKCB2ZWMzIGNvbG9yICkge1xcblxcdGNvbG9yICo9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XFxuXFx0Y29sb3IgPSBtYXgoIHZlYzMoIDAuMCApLCBjb2xvciAtIDAuMDA0ICk7XFxuXFx0cmV0dXJuIHBvdyggKCBjb2xvciAqICggNi4yICogY29sb3IgKyAwLjUgKSApIC8gKCBjb2xvciAqICggNi4yICogY29sb3IgKyAxLjcgKSArIDAuMDYgKSwgdmVjMyggMi4yICkgKTtcXG59XFxudmVjMyBBQ0VTRmlsbWljVG9uZU1hcHBpbmcoIHZlYzMgY29sb3IgKSB7XFxuXFx0Y29sb3IgKj0gdG9uZU1hcHBpbmdFeHBvc3VyZTtcXG5cXHRyZXR1cm4gc2F0dXJhdGUoICggY29sb3IgKiAoIDIuNTEgKiBjb2xvciArIDAuMDMgKSApIC8gKCBjb2xvciAqICggMi40MyAqIGNvbG9yICsgMC41OSApICsgMC4xNCApICk7XFxufVwiO1xuXG52YXIgdXZfcGFyc19mcmFnbWVudCA9IFwiI2lmICggZGVmaW5lZCggVVNFX1VWICkgJiYgISBkZWZpbmVkKCBVVlNfVkVSVEVYX09OTFkgKSApXFxuXFx0dmFyeWluZyB2ZWMyIHZVdjtcXG4jZW5kaWZcIjtcblxudmFyIHV2X3BhcnNfdmVydGV4ID0gXCIjaWZkZWYgVVNFX1VWXFxuXFx0I2lmZGVmIFVWU19WRVJURVhfT05MWVxcblxcdFxcdHZlYzIgdlV2O1xcblxcdCNlbHNlXFxuXFx0XFx0dmFyeWluZyB2ZWMyIHZVdjtcXG5cXHQjZW5kaWZcXG5cXHR1bmlmb3JtIG1hdDMgdXZUcmFuc2Zvcm07XFxuI2VuZGlmXCI7XG5cbnZhciB1dl92ZXJ0ZXggPSBcIiNpZmRlZiBVU0VfVVZcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfZnJhZ21lbnQgPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZhcnlpbmcgdmVjMiB2VXYyO1xcbiNlbmRpZlwiO1xuXG52YXIgdXYyX3BhcnNfdmVydGV4ID0gXCIjaWYgZGVmaW5lZCggVVNFX0xJR0hUTUFQICkgfHwgZGVmaW5lZCggVVNFX0FPTUFQIClcXG5cXHRhdHRyaWJ1dGUgdmVjMiB1djI7XFxuXFx0dmFyeWluZyB2ZWMyIHZVdjI7XFxuXFx0dW5pZm9ybSBtYXQzIHV2MlRyYW5zZm9ybTtcXG4jZW5kaWZcIjtcblxudmFyIHV2Ml92ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfTElHSFRNQVAgKSB8fCBkZWZpbmVkKCBVU0VfQU9NQVAgKVxcblxcdHZVdjIgPSAoIHV2MlRyYW5zZm9ybSAqIHZlYzMoIHV2MiwgMSApICkueHk7XFxuI2VuZGlmXCI7XG5cbnZhciB3b3JsZHBvc192ZXJ0ZXggPSBcIiNpZiBkZWZpbmVkKCBVU0VfRU5WTUFQICkgfHwgZGVmaW5lZCggRElTVEFOQ0UgKSB8fCBkZWZpbmVkICggVVNFX1NIQURPV01BUCApXFxuXFx0dmVjNCB3b3JsZFBvc2l0aW9uID0gdmVjNCggdHJhbnNmb3JtZWQsIDEuMCApO1xcblxcdCNpZmRlZiBVU0VfSU5TVEFOQ0lOR1xcblxcdFxcdHdvcmxkUG9zaXRpb24gPSBpbnN0YW5jZU1hdHJpeCAqIHdvcmxkUG9zaXRpb247XFxuXFx0I2VuZGlmXFxuXFx0d29ybGRQb3NpdGlvbiA9IG1vZGVsTWF0cml4ICogd29ybGRQb3NpdGlvbjtcXG4jZW5kaWZcIjtcblxudmFyIGJhY2tncm91bmRfZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgdDJEO1xcbnZhcnlpbmcgdmVjMiB2VXY7XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzQgdGV4Q29sb3IgPSB0ZXh0dXJlMkQoIHQyRCwgdlV2ICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4Q29sb3IgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBiYWNrZ3JvdW5kX3ZlcnQgPSBcInZhcnlpbmcgdmVjMiB2VXY7XFxudW5pZm9ybSBtYXQzIHV2VHJhbnNmb3JtO1xcbnZvaWQgbWFpbigpIHtcXG5cXHR2VXYgPSAoIHV2VHJhbnNmb3JtICogdmVjMyggdXYsIDEgKSApLnh5O1xcblxcdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24ueHksIDEuMCwgMS4wICk7XFxufVwiO1xuXG52YXIgY3ViZV9mcmFnID0gXCIjaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgdlJlZmxlY3QgPSB2V29ybGREaXJlY3Rpb247XFxuXFx0I2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cXG5cXHRnbF9GcmFnQ29sb3IgPSBlbnZDb2xvcjtcXG5cXHRnbF9GcmFnQ29sb3IuYSAqPSBvcGFjaXR5O1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGN1YmVfdmVydCA9IFwidmFyeWluZyB2ZWMzIHZXb3JsZERpcmVjdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2V29ybGREaXJlY3Rpb24gPSB0cmFuc2Zvcm1EaXJlY3Rpb24oIHBvc2l0aW9uLCBtb2RlbE1hdHJpeCApO1xcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdGdsX1Bvc2l0aW9uLnogPSBnbF9Qb3NpdGlvbi53O1xcbn1cIjtcblxudmFyIGRlcHRoX2ZyYWcgPSBcIiNpZiBERVBUSF9QQUNLSU5HID09IDMyMDBcXG5cXHR1bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZhcnlpbmcgdmVjMiB2SGlnaFByZWNpc2lvblpXO1xcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggMS4wICk7XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGRpZmZ1c2VDb2xvci5hID0gb3BhY2l0eTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHRmbG9hdCBmcmFnQ29vcmRaID0gMC41ICogdkhpZ2hQcmVjaXNpb25aV1swXSAvIHZIaWdoUHJlY2lzaW9uWldbMV0gKyAwLjU7XFxuXFx0I2lmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMFxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIHZlYzMoIDEuMCAtIGZyYWdDb29yZFogKSwgb3BhY2l0eSApO1xcblxcdCNlbGlmIERFUFRIX1BBQ0tJTkcgPT0gMzIwMVxcblxcdFxcdGdsX0ZyYWdDb2xvciA9IHBhY2tEZXB0aFRvUkdCQSggZnJhZ0Nvb3JkWiApO1xcblxcdCNlbmRpZlxcbn1cIjtcblxudmFyIGRlcHRoX3ZlcnQgPSBcIiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52YXJ5aW5nIHZlYzIgdkhpZ2hQcmVjaXNpb25aVztcXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2SGlnaFByZWNpc2lvblpXID0gZ2xfUG9zaXRpb24uenc7XFxufVwiO1xuXG52YXIgZGlzdGFuY2VSR0JBX2ZyYWcgPSBcIiNkZWZpbmUgRElTVEFOQ0VcXG51bmlmb3JtIHZlYzMgcmVmZXJlbmNlUG9zaXRpb247XFxudW5pZm9ybSBmbG9hdCBuZWFyRGlzdGFuY2U7XFxudW5pZm9ybSBmbG9hdCBmYXJEaXN0YW5jZTtcXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zaXRpb247XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbiAoKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYXRlc3RfZnJhZ21lbnQ+XFxuXFx0ZmxvYXQgZGlzdCA9IGxlbmd0aCggdldvcmxkUG9zaXRpb24gLSByZWZlcmVuY2VQb3NpdGlvbiApO1xcblxcdGRpc3QgPSAoIGRpc3QgLSBuZWFyRGlzdGFuY2UgKSAvICggZmFyRGlzdGFuY2UgLSBuZWFyRGlzdGFuY2UgKTtcXG5cXHRkaXN0ID0gc2F0dXJhdGUoIGRpc3QgKTtcXG5cXHRnbF9GcmFnQ29sb3IgPSBwYWNrRGVwdGhUb1JHQkEoIGRpc3QgKTtcXG59XCI7XG5cbnZhciBkaXN0YW5jZVJHQkFfdmVydCA9IFwiI2RlZmluZSBESVNUQU5DRVxcbnZhcnlpbmcgdmVjMyB2V29ybGRQb3NpdGlvbjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRElTUExBQ0VNRU5UTUFQXFxuXFx0XFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHRcXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdFxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2V29ybGRQb3NpdGlvbiA9IHdvcmxkUG9zaXRpb24ueHl6O1xcbn1cIjtcblxudmFyIGVxdWlyZWN0X2ZyYWcgPSBcInVuaWZvcm0gc2FtcGxlcjJEIHRFcXVpcmVjdDtcXG52YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZlYzMgZGlyZWN0aW9uID0gbm9ybWFsaXplKCB2V29ybGREaXJlY3Rpb24gKTtcXG5cXHR2ZWMyIHNhbXBsZVVWO1xcblxcdHNhbXBsZVVWLnkgPSBhc2luKCBjbGFtcCggZGlyZWN0aW9uLnksIC0gMS4wLCAxLjAgKSApICogUkVDSVBST0NBTF9QSSArIDAuNTtcXG5cXHRzYW1wbGVVVi54ID0gYXRhbiggZGlyZWN0aW9uLnosIGRpcmVjdGlvbi54ICkgKiBSRUNJUFJPQ0FMX1BJMiArIDAuNTtcXG5cXHR2ZWM0IHRleENvbG9yID0gdGV4dHVyZTJEKCB0RXF1aXJlY3QsIHNhbXBsZVVWICk7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gbWFwVGV4ZWxUb0xpbmVhciggdGV4Q29sb3IgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBlcXVpcmVjdF92ZXJ0ID0gXCJ2YXJ5aW5nIHZlYzMgdldvcmxkRGlyZWN0aW9uO1xcbiNpbmNsdWRlIDxjb21tb24+XFxudm9pZCBtYWluKCkge1xcblxcdHZXb3JsZERpcmVjdGlvbiA9IHRyYW5zZm9ybURpcmVjdGlvbiggcG9zaXRpb24sIG1vZGVsTWF0cml4ICk7XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxufVwiO1xuXG52YXIgbGluZWRhc2hlZF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBmbG9hdCBkYXNoU2l6ZTtcXG51bmlmb3JtIGZsb2F0IHRvdGFsU2l6ZTtcXG52YXJ5aW5nIGZsb2F0IHZMaW5lRGlzdGFuY2U7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdGlmICggbW9kKCB2TGluZURpc3RhbmNlLCB0b3RhbFNpemUgKSA+IGRhc2hTaXplICkge1xcblxcdFxcdGRpc2NhcmQ7XFxuXFx0fVxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XFxuXFx0b3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIGxpbmVkYXNoZWRfdmVydCA9IFwidW5pZm9ybSBmbG9hdCBzY2FsZTtcXG5hdHRyaWJ1dGUgZmxvYXQgbGluZURpc3RhbmNlO1xcbnZhcnlpbmcgZmxvYXQgdkxpbmVEaXN0YW5jZTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHR2TGluZURpc3RhbmNlID0gc2NhbGUgKiBsaW5lRGlzdGFuY2U7XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG1lc2hiYXNpY19mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdCNpZmRlZiBVU0VfTElHSFRNQVBcXG5cXHRcXG5cXHRcXHR2ZWM0IGxpZ2h0TWFwVGV4ZWw9IHRleHR1cmUyRCggbGlnaHRNYXAsIHZVdjIgKTtcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gbGlnaHRNYXBUZXhlbFRvTGluZWFyKCBsaWdodE1hcFRleGVsICkucmdiICogbGlnaHRNYXBJbnRlbnNpdHk7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdmVjMyggMS4wICk7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGFvbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG59XCI7XG5cbnZhciBtZXNoYmFzaWNfdmVydCA9IFwiI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDx1dl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHV2Ml92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpZmRlZiBVU0VfRU5WTUFQXFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBtZXNobGFtYmVydF9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG52YXJ5aW5nIHZlYzMgdkluZGlyZWN0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcblxcdHZhcnlpbmcgdmVjMyB2SW5kaXJlY3RCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSA9IGdldEFtYmllbnRMaWdodElycmFkaWFuY2UoIGFtYmllbnRMaWdodENvbG9yICk7XFxuXFx0I2lmZGVmIERPVUJMRV9TSURFRFxcblxcdFxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArPSAoIGdsX0Zyb250RmFjaW5nICkgPyB2SW5kaXJlY3RGcm9udCA6IHZJbmRpcmVjdEJhY2s7XFxuXFx0I2Vsc2VcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKz0gdkluZGlyZWN0RnJvbnQ7XFxuXFx0I2VuZGlmXFxuXFx0I2luY2x1ZGUgPGxpZ2h0bWFwX2ZyYWdtZW50PlxcblxcdHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSAqPSBCUkRGX0RpZmZ1c2VfTGFtYmVydCggZGlmZnVzZUNvbG9yLnJnYiApO1xcblxcdCNpZmRlZiBET1VCTEVfU0lERURcXG5cXHRcXHRyZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlID0gKCBnbF9Gcm9udEZhY2luZyApID8gdkxpZ2h0RnJvbnQgOiB2TGlnaHRCYWNrO1xcblxcdCNlbHNlXFxuXFx0XFx0cmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSA9IHZMaWdodEZyb250O1xcblxcdCNlbmRpZlxcblxcdHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKj0gQlJERl9EaWZmdXNlX0xhbWJlcnQoIGRpZmZ1c2VDb2xvci5yZ2IgKSAqIGdldFNoYWRvd01hc2soKTtcXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hsYW1iZXJ0X3ZlcnQgPSBcIiNkZWZpbmUgTEFNQkVSVFxcbnZhcnlpbmcgdmVjMyB2TGlnaHRGcm9udDtcXG52YXJ5aW5nIHZlYzMgdkluZGlyZWN0RnJvbnQ7XFxuI2lmZGVmIERPVUJMRV9TSURFRFxcblxcdHZhcnlpbmcgdmVjMyB2TGlnaHRCYWNrO1xcblxcdHZhcnlpbmcgdmVjMyB2SW5kaXJlY3RCYWNrO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2xhbWJlcnRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG1lc2htYXRjYXBfZnJhZyA9IFwiI2RlZmluZSBNQVRDQVBcXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxudW5pZm9ybSBzYW1wbGVyMkQgbWF0Y2FwO1xcbnZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YWxwaGFtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHR2ZWMzIHZpZXdEaXIgPSBub3JtYWxpemUoIHZWaWV3UG9zaXRpb24gKTtcXG5cXHR2ZWMzIHggPSBub3JtYWxpemUoIHZlYzMoIHZpZXdEaXIueiwgMC4wLCAtIHZpZXdEaXIueCApICk7XFxuXFx0dmVjMyB5ID0gY3Jvc3MoIHZpZXdEaXIsIHggKTtcXG5cXHR2ZWMyIHV2ID0gdmVjMiggZG90KCB4LCBub3JtYWwgKSwgZG90KCB5LCBub3JtYWwgKSApICogMC40OTUgKyAwLjU7XFxuXFx0I2lmZGVmIFVTRV9NQVRDQVBcXG5cXHRcXHR2ZWM0IG1hdGNhcENvbG9yID0gdGV4dHVyZTJEKCBtYXRjYXAsIHV2ICk7XFxuXFx0XFx0bWF0Y2FwQ29sb3IgPSBtYXRjYXBUZXhlbFRvTGluZWFyKCBtYXRjYXBDb2xvciApO1xcblxcdCNlbHNlXFxuXFx0XFx0dmVjNCBtYXRjYXBDb2xvciA9IHZlYzQoIDEuMCApO1xcblxcdCNlbmRpZlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IGRpZmZ1c2VDb2xvci5yZ2IgKiBtYXRjYXBDb2xvci5yZ2I7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggb3V0Z29pbmdMaWdodCwgZGlmZnVzZUNvbG9yLmEgKTtcXG5cXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2htYXRjYXBfdmVydCA9IFwiI2RlZmluZSBNQVRDQVBcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNraW5uaW5nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG5cXHQjaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0XFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG59XCI7XG5cbnZhciBtZXNodG9vbl9mcmFnID0gXCIjZGVmaW5lIFRPT05cXG51bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIHZlYzMgZW1pc3NpdmU7XFxudW5pZm9ybSB2ZWMzIHNwZWN1bGFyO1xcbnVuaWZvcm0gZmxvYXQgc2hpbmluZXNzO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxwYWNraW5nPlxcbiNpbmNsdWRlIDxkaXRoZXJpbmdfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxhb21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnNkZnM+XFxuI2luY2x1ZGUgPGxpZ2h0c19wYXJzX2JlZ2luPlxcbiNpbmNsdWRlIDxsaWdodHNfdG9vbl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxub3JtYWxtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XFxuXFx0dmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XFxuXFx0UmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcXG5cXHR2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XFxuXFx0I2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfdG9vbl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPHByZW11bHRpcGxpZWRfYWxwaGFfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGRpdGhlcmluZ19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBtZXNodG9vbl92ZXJ0ID0gXCIjZGVmaW5lIFRPT05cXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuI2VuZGlmXFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBtZXNocGhvbmdfZnJhZyA9IFwiI2RlZmluZSBQSE9OR1xcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIHZlYzMgc3BlY3VsYXI7XFxudW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxzcGVjdWxhcm1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19waG9uZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X2VuZD5cXG5cXHQjaW5jbHVkZSA8YW9tYXBfZnJhZ21lbnQ+XFxuXFx0dmVjMyBvdXRnb2luZ0xpZ2h0ID0gcmVmbGVjdGVkTGlnaHQuZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0RGlmZnVzZSArIHJlZmxlY3RlZExpZ2h0LmRpcmVjdFNwZWN1bGFyICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3RTcGVjdWxhciArIHRvdGFsRW1pc3NpdmVSYWRpYW5jZTtcXG5cXHQjaW5jbHVkZSA8ZW52bWFwX2ZyYWdtZW50PlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hwaG9uZ192ZXJ0ID0gXCIjZGVmaW5lIFBIT05HXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDx1djJfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8dXYyX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y29sb3JfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxiZWdpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBobm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbmJhc2VfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGVmYXVsdG5vcm1hbF92ZXJ0ZXg+XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XFxuI2VuZGlmXFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuXFx0I2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cXG59XCI7XG5cbnZhciBtZXNocGh5c2ljYWxfZnJhZyA9IFwiI2RlZmluZSBTVEFOREFSRFxcbiNpZmRlZiBQSFlTSUNBTFxcblxcdCNkZWZpbmUgUkVGTEVDVElWSVRZXFxuXFx0I2RlZmluZSBDTEVBUkNPQVRcXG5cXHQjZGVmaW5lIFRSQU5TUEFSRU5DWVxcbiNlbmRpZlxcbnVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gdmVjMyBlbWlzc2l2ZTtcXG51bmlmb3JtIGZsb2F0IHJvdWdobmVzcztcXG51bmlmb3JtIGZsb2F0IG1ldGFsbmVzcztcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2lmZGVmIFRSQU5TUEFSRU5DWVxcblxcdHVuaWZvcm0gZmxvYXQgdHJhbnNwYXJlbmN5O1xcbiNlbmRpZlxcbiNpZmRlZiBSRUZMRUNUSVZJVFlcXG5cXHR1bmlmb3JtIGZsb2F0IHJlZmxlY3Rpdml0eTtcXG4jZW5kaWZcXG4jaWZkZWYgQ0xFQVJDT0FUXFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXQ7XFxuXFx0dW5pZm9ybSBmbG9hdCBjbGVhcmNvYXRSb3VnaG5lc3M7XFxuI2VuZGlmXFxuI2lmZGVmIFVTRV9TSEVFTlxcblxcdHVuaWZvcm0gdmVjMyBzaGVlbjtcXG4jZW5kaWZcXG52YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8ZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGVhcmNvYXRfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8cm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHRSZWZsZWN0ZWRMaWdodCByZWZsZWN0ZWRMaWdodCA9IFJlZmxlY3RlZExpZ2h0KCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSApO1xcblxcdHZlYzMgdG90YWxFbWlzc2l2ZVJhZGlhbmNlID0gZW1pc3NpdmU7XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGNvbG9yX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxyb3VnaG5lc3NtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1ldGFsbmVzc21hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9iZWdpbj5cXG5cXHQjaW5jbHVkZSA8Y2xlYXJjb2F0X25vcm1hbF9mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XFxuXFx0I2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxcblxcdCNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxcblxcdCNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xcblxcdCNpZmRlZiBUUkFOU1BBUkVOQ1lcXG5cXHRcXHRkaWZmdXNlQ29sb3IuYSAqPSBzYXR1cmF0ZSggMS4gLSB0cmFuc3BhcmVuY3kgKyBsaW5lYXJUb1JlbGF0aXZlTHVtaW5hbmNlKCByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKSApO1xcblxcdCNlbmRpZlxcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZGl0aGVyaW5nX2ZyYWdtZW50Plxcbn1cIjtcblxudmFyIG1lc2hwaHlzaWNhbF92ZXJ0ID0gXCIjZGVmaW5lIFNUQU5EQVJEXFxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XFxuI2lmbmRlZiBGTEFUX1NIQURFRFxcblxcdHZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZhcnlpbmcgdmVjMyB2VGFuZ2VudDtcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdkJpdGFuZ2VudDtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8dXYyX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxmb2dfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx1djJfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dk5vcm1hbCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWROb3JtYWwgKTtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2VGFuZ2VudCA9IG5vcm1hbGl6ZSggdHJhbnNmb3JtZWRUYW5nZW50ICk7XFxuXFx0XFx0dkJpdGFuZ2VudCA9IG5vcm1hbGl6ZSggY3Jvc3MoIHZOb3JtYWwsIHZUYW5nZW50ICkgKiB0YW5nZW50LncgKTtcXG5cXHQjZW5kaWZcXG4jZW5kaWZcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaHRhcmdldF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5uaW5nX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8ZGlzcGxhY2VtZW50bWFwX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8cHJvamVjdF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleD5cXG5cXHR2Vmlld1Bvc2l0aW9uID0gLSBtdlBvc2l0aW9uLnh5ejtcXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIG5vcm1hbF9mcmFnID0gXCIjZGVmaW5lIE5PUk1BTFxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaWYgZGVmaW5lZCggRkxBVF9TSEFERUQgKSB8fCBkZWZpbmVkKCBVU0VfQlVNUE1BUCApIHx8IGRlZmluZWQoIFRBTkdFTlRTUEFDRV9OT1JNQUxNQVAgKVxcblxcdHZhcnlpbmcgdmVjMyB2Vmlld1Bvc2l0aW9uO1xcbiNlbmRpZlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG5cXHQjaWZkZWYgVVNFX1RBTkdFTlRcXG5cXHRcXHR2YXJ5aW5nIHZlYzMgdlRhbmdlbnQ7XFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZCaXRhbmdlbnQ7XFxuXFx0I2VuZGlmXFxuI2VuZGlmXFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxuI2luY2x1ZGUgPHV2X3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJ1bXBtYXBfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxcblxcdCNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBwYWNrTm9ybWFsVG9SR0IoIG5vcm1hbCApLCBvcGFjaXR5ICk7XFxufVwiO1xuXG52YXIgbm9ybWFsX3ZlcnQgPSBcIiNkZWZpbmUgTk9STUFMXFxuI2lmIGRlZmluZWQoIEZMQVRfU0hBREVEICkgfHwgZGVmaW5lZCggVVNFX0JVTVBNQVAgKSB8fCBkZWZpbmVkKCBUQU5HRU5UU1BBQ0VfTk9STUFMTUFQIClcXG5cXHR2YXJ5aW5nIHZlYzMgdlZpZXdQb3NpdGlvbjtcXG4jZW5kaWZcXG4jaWZuZGVmIEZMQVRfU0hBREVEXFxuXFx0dmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxuXFx0I2lmZGVmIFVTRV9UQU5HRU5UXFxuXFx0XFx0dmFyeWluZyB2ZWMzIHZUYW5nZW50O1xcblxcdFxcdHZhcnlpbmcgdmVjMyB2Qml0YW5nZW50O1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcbiNpbmNsdWRlIDxjb21tb24+XFxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxcbiNpZm5kZWYgRkxBVF9TSEFERURcXG5cXHR2Tm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xcblxcdCNpZmRlZiBVU0VfVEFOR0VOVFxcblxcdFxcdHZUYW5nZW50ID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZFRhbmdlbnQgKTtcXG5cXHRcXHR2Qml0YW5nZW50ID0gbm9ybWFsaXplKCBjcm9zcyggdk5vcm1hbCwgdlRhbmdlbnQgKSAqIHRhbmdlbnQudyApO1xcblxcdCNlbmRpZlxcbiNlbmRpZlxcblxcdCNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcbiNpZiBkZWZpbmVkKCBGTEFUX1NIQURFRCApIHx8IGRlZmluZWQoIFVTRV9CVU1QTUFQICkgfHwgZGVmaW5lZCggVEFOR0VOVFNQQUNFX05PUk1BTE1BUCApXFxuXFx0dlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XFxuI2VuZGlmXFxufVwiO1xuXG52YXIgcG9pbnRzX2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBkaWZmdXNlO1xcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDxjb2xvcl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxtYXBfcGFydGljbGVfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxcblxcdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xcblxcdHZlYzQgZGlmZnVzZUNvbG9yID0gdmVjNCggZGlmZnVzZSwgb3BhY2l0eSApO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8bWFwX3BhcnRpY2xlX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxjb2xvcl9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxcblxcdG91dGdvaW5nTGlnaHQgPSBkaWZmdXNlQ29sb3IucmdiO1xcblxcdGdsX0ZyYWdDb2xvciA9IHZlYzQoIG91dGdvaW5nTGlnaHQsIGRpZmZ1c2VDb2xvci5hICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8cHJlbXVsdGlwbGllZF9hbHBoYV9mcmFnbWVudD5cXG59XCI7XG5cbnZhciBwb2ludHNfdmVydCA9IFwidW5pZm9ybSBmbG9hdCBzaXplO1xcbnVuaWZvcm0gZmxvYXQgc2NhbGU7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XFxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XFxudm9pZCBtYWluKCkge1xcblxcdCNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGJlZ2luX3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHRnbF9Qb2ludFNpemUgPSBzaXplO1xcblxcdCNpZmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIGdsX1BvaW50U2l6ZSAqPSAoIHNjYWxlIC8gLSBtdlBvc2l0aW9uLnogKTtcXG5cXHQjZW5kaWZcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxcblxcdCNpbmNsdWRlIDx3b3JsZHBvc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgc2hhZG93X2ZyYWcgPSBcInVuaWZvcm0gdmVjMyBjb2xvcjtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8cGFja2luZz5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGJzZGZzPlxcbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPHNoYWRvd21hc2tfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0Z2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIG9wYWNpdHkgKiAoIDEuMCAtIGdldFNoYWRvd01hc2soKSApICk7XFxuXFx0I2luY2x1ZGUgPHRvbmVtYXBwaW5nX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxlbmNvZGluZ3NfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGZvZ19mcmFnbWVudD5cXG59XCI7XG5cbnZhciBzaGFkb3dfdmVydCA9IFwiI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxcblxcdCNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cXG5cXHQjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxcblxcdCNpbmNsdWRlIDxmb2dfdmVydGV4Plxcbn1cIjtcblxudmFyIHNwcml0ZV9mcmFnID0gXCJ1bmlmb3JtIHZlYzMgZGlmZnVzZTtcXG51bmlmb3JtIGZsb2F0IG9wYWNpdHk7XFxuI2luY2x1ZGUgPGNvbW1vbj5cXG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cXG4jaW5jbHVkZSA8bWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XFxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxcbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cXG52b2lkIG1haW4oKSB7XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cXG5cXHR2ZWMzIG91dGdvaW5nTGlnaHQgPSB2ZWMzKCAwLjAgKTtcXG5cXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcXG5cXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XFxuXFx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cXG5cXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KCBvdXRnb2luZ0xpZ2h0LCBkaWZmdXNlQ29sb3IuYSApO1xcblxcdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cXG5cXHQjaW5jbHVkZSA8ZW5jb2RpbmdzX2ZyYWdtZW50PlxcblxcdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XFxufVwiO1xuXG52YXIgc3ByaXRlX3ZlcnQgPSBcInVuaWZvcm0gZmxvYXQgcm90YXRpb247XFxudW5pZm9ybSB2ZWMyIGNlbnRlcjtcXG4jaW5jbHVkZSA8Y29tbW9uPlxcbiNpbmNsdWRlIDx1dl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxcbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cXG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxcbnZvaWQgbWFpbigpIHtcXG5cXHQjaW5jbHVkZSA8dXZfdmVydGV4PlxcblxcdHZlYzQgbXZQb3NpdGlvbiA9IG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIDAuMCwgMC4wLCAwLjAsIDEuMCApO1xcblxcdHZlYzIgc2NhbGU7XFxuXFx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XFxuXFx0c2NhbGUueSA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDEgXS54LCBtb2RlbE1hdHJpeFsgMSBdLnksIG1vZGVsTWF0cml4WyAxIF0ueiApICk7XFxuXFx0I2lmbmRlZiBVU0VfU0laRUFUVEVOVUFUSU9OXFxuXFx0XFx0Ym9vbCBpc1BlcnNwZWN0aXZlID0gaXNQZXJzcGVjdGl2ZU1hdHJpeCggcHJvamVjdGlvbk1hdHJpeCApO1xcblxcdFxcdGlmICggaXNQZXJzcGVjdGl2ZSApIHNjYWxlICo9IC0gbXZQb3NpdGlvbi56O1xcblxcdCNlbmRpZlxcblxcdHZlYzIgYWxpZ25lZFBvc2l0aW9uID0gKCBwb3NpdGlvbi54eSAtICggY2VudGVyIC0gdmVjMiggMC41ICkgKSApICogc2NhbGU7XFxuXFx0dmVjMiByb3RhdGVkUG9zaXRpb247XFxuXFx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xcblxcdHJvdGF0ZWRQb3NpdGlvbi55ID0gc2luKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnggKyBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueTtcXG5cXHRtdlBvc2l0aW9uLnh5ICs9IHJvdGF0ZWRQb3NpdGlvbjtcXG5cXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xcblxcdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XFxuXFx0I2luY2x1ZGUgPGZvZ192ZXJ0ZXg+XFxufVwiO1xuXG52YXIgU2hhZGVyQ2h1bmsgPSB7XG5cdGFscGhhbWFwX2ZyYWdtZW50OiBhbHBoYW1hcF9mcmFnbWVudCxcblx0YWxwaGFtYXBfcGFyc19mcmFnbWVudDogYWxwaGFtYXBfcGFyc19mcmFnbWVudCxcblx0YWxwaGF0ZXN0X2ZyYWdtZW50OiBhbHBoYXRlc3RfZnJhZ21lbnQsXG5cdGFvbWFwX2ZyYWdtZW50OiBhb21hcF9mcmFnbWVudCxcblx0YW9tYXBfcGFyc19mcmFnbWVudDogYW9tYXBfcGFyc19mcmFnbWVudCxcblx0YmVnaW5fdmVydGV4OiBiZWdpbl92ZXJ0ZXgsXG5cdGJlZ2lubm9ybWFsX3ZlcnRleDogYmVnaW5ub3JtYWxfdmVydGV4LFxuXHRic2RmczogYnNkZnMsXG5cdGJ1bXBtYXBfcGFyc19mcmFnbWVudDogYnVtcG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudCxcblx0Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ6IGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50LFxuXHRjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg6IGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleCxcblx0Y2xpcHBpbmdfcGxhbmVzX3ZlcnRleDogY2xpcHBpbmdfcGxhbmVzX3ZlcnRleCxcblx0Y29sb3JfZnJhZ21lbnQ6IGNvbG9yX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX2ZyYWdtZW50OiBjb2xvcl9wYXJzX2ZyYWdtZW50LFxuXHRjb2xvcl9wYXJzX3ZlcnRleDogY29sb3JfcGFyc192ZXJ0ZXgsXG5cdGNvbG9yX3ZlcnRleDogY29sb3JfdmVydGV4LFxuXHRjb21tb246IGNvbW1vbixcblx0Y3ViZV91dl9yZWZsZWN0aW9uX2ZyYWdtZW50OiBjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQsXG5cdGRlZmF1bHRub3JtYWxfdmVydGV4OiBkZWZhdWx0bm9ybWFsX3ZlcnRleCxcblx0ZGlzcGxhY2VtZW50bWFwX3BhcnNfdmVydGV4OiBkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXgsXG5cdGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg6IGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXgsXG5cdGVtaXNzaXZlbWFwX2ZyYWdtZW50OiBlbWlzc2l2ZW1hcF9mcmFnbWVudCxcblx0ZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudDogZW1pc3NpdmVtYXBfcGFyc19mcmFnbWVudCxcblx0ZW5jb2RpbmdzX2ZyYWdtZW50OiBlbmNvZGluZ3NfZnJhZ21lbnQsXG5cdGVuY29kaW5nc19wYXJzX2ZyYWdtZW50OiBlbmNvZGluZ3NfcGFyc19mcmFnbWVudCxcblx0ZW52bWFwX2ZyYWdtZW50OiBlbnZtYXBfZnJhZ21lbnQsXG5cdGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudDogZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50LFxuXHRlbnZtYXBfcGFyc19mcmFnbWVudDogZW52bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF9wYXJzX3ZlcnRleDogZW52bWFwX3BhcnNfdmVydGV4LFxuXHRlbnZtYXBfcGh5c2ljYWxfcGFyc19mcmFnbWVudDogZW52bWFwX3BoeXNpY2FsX3BhcnNfZnJhZ21lbnQsXG5cdGVudm1hcF92ZXJ0ZXg6IGVudm1hcF92ZXJ0ZXgsXG5cdGZvZ192ZXJ0ZXg6IGZvZ192ZXJ0ZXgsXG5cdGZvZ19wYXJzX3ZlcnRleDogZm9nX3BhcnNfdmVydGV4LFxuXHRmb2dfZnJhZ21lbnQ6IGZvZ19mcmFnbWVudCxcblx0Zm9nX3BhcnNfZnJhZ21lbnQ6IGZvZ19wYXJzX2ZyYWdtZW50LFxuXHRncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50OiBncmFkaWVudG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRsaWdodG1hcF9mcmFnbWVudDogbGlnaHRtYXBfZnJhZ21lbnQsXG5cdGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQ6IGxpZ2h0bWFwX3BhcnNfZnJhZ21lbnQsXG5cdGxpZ2h0c19sYW1iZXJ0X3ZlcnRleDogbGlnaHRzX2xhbWJlcnRfdmVydGV4LFxuXHRsaWdodHNfcGFyc19iZWdpbjogbGlnaHRzX3BhcnNfYmVnaW4sXG5cdGxpZ2h0c190b29uX2ZyYWdtZW50OiBsaWdodHNfdG9vbl9mcmFnbWVudCxcblx0bGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudDogbGlnaHRzX3Rvb25fcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3Bob25nX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfZnJhZ21lbnQsXG5cdGxpZ2h0c19waG9uZ19wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX3BoeXNpY2FsX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfZnJhZ21lbnQsXG5cdGxpZ2h0c19waHlzaWNhbF9wYXJzX2ZyYWdtZW50OiBsaWdodHNfcGh5c2ljYWxfcGFyc19mcmFnbWVudCxcblx0bGlnaHRzX2ZyYWdtZW50X2JlZ2luOiBsaWdodHNfZnJhZ21lbnRfYmVnaW4sXG5cdGxpZ2h0c19mcmFnbWVudF9tYXBzOiBsaWdodHNfZnJhZ21lbnRfbWFwcyxcblx0bGlnaHRzX2ZyYWdtZW50X2VuZDogbGlnaHRzX2ZyYWdtZW50X2VuZCxcblx0bG9nZGVwdGhidWZfZnJhZ21lbnQ6IGxvZ2RlcHRoYnVmX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50OiBsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50LFxuXHRsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleDogbG9nZGVwdGhidWZfcGFyc192ZXJ0ZXgsXG5cdGxvZ2RlcHRoYnVmX3ZlcnRleDogbG9nZGVwdGhidWZfdmVydGV4LFxuXHRtYXBfZnJhZ21lbnQ6IG1hcF9mcmFnbWVudCxcblx0bWFwX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRtYXBfcGFydGljbGVfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9mcmFnbWVudCxcblx0bWFwX3BhcnRpY2xlX3BhcnNfZnJhZ21lbnQ6IG1hcF9wYXJ0aWNsZV9wYXJzX2ZyYWdtZW50LFxuXHRtZXRhbG5lc3NtYXBfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9mcmFnbWVudCxcblx0bWV0YWxuZXNzbWFwX3BhcnNfZnJhZ21lbnQ6IG1ldGFsbmVzc21hcF9wYXJzX2ZyYWdtZW50LFxuXHRtb3JwaG5vcm1hbF92ZXJ0ZXg6IG1vcnBobm9ybWFsX3ZlcnRleCxcblx0bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg6IG1vcnBodGFyZ2V0X3BhcnNfdmVydGV4LFxuXHRtb3JwaHRhcmdldF92ZXJ0ZXg6IG1vcnBodGFyZ2V0X3ZlcnRleCxcblx0bm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBub3JtYWxfZnJhZ21lbnRfYmVnaW4sXG5cdG5vcm1hbF9mcmFnbWVudF9tYXBzOiBub3JtYWxfZnJhZ21lbnRfbWFwcyxcblx0bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ6IG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50LFxuXHRjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luOiBjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X2JlZ2luLFxuXHRjbGVhcmNvYXRfbm9ybWFsX2ZyYWdtZW50X21hcHM6IGNsZWFyY29hdF9ub3JtYWxfZnJhZ21lbnRfbWFwcyxcblx0Y2xlYXJjb2F0X3BhcnNfZnJhZ21lbnQ6IGNsZWFyY29hdF9wYXJzX2ZyYWdtZW50LFxuXHRwYWNraW5nOiBwYWNraW5nLFxuXHRwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50OiBwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50LFxuXHRwcm9qZWN0X3ZlcnRleDogcHJvamVjdF92ZXJ0ZXgsXG5cdGRpdGhlcmluZ19mcmFnbWVudDogZGl0aGVyaW5nX2ZyYWdtZW50LFxuXHRkaXRoZXJpbmdfcGFyc19mcmFnbWVudDogZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQsXG5cdHJvdWdobmVzc21hcF9mcmFnbWVudDogcm91Z2huZXNzbWFwX2ZyYWdtZW50LFxuXHRyb3VnaG5lc3NtYXBfcGFyc19mcmFnbWVudDogcm91Z2huZXNzbWFwX3BhcnNfZnJhZ21lbnQsXG5cdHNoYWRvd21hcF9wYXJzX2ZyYWdtZW50OiBzaGFkb3dtYXBfcGFyc19mcmFnbWVudCxcblx0c2hhZG93bWFwX3BhcnNfdmVydGV4OiBzaGFkb3dtYXBfcGFyc192ZXJ0ZXgsXG5cdHNoYWRvd21hcF92ZXJ0ZXg6IHNoYWRvd21hcF92ZXJ0ZXgsXG5cdHNoYWRvd21hc2tfcGFyc19mcmFnbWVudDogc2hhZG93bWFza19wYXJzX2ZyYWdtZW50LFxuXHRza2luYmFzZV92ZXJ0ZXg6IHNraW5iYXNlX3ZlcnRleCxcblx0c2tpbm5pbmdfcGFyc192ZXJ0ZXg6IHNraW5uaW5nX3BhcnNfdmVydGV4LFxuXHRza2lubmluZ192ZXJ0ZXg6IHNraW5uaW5nX3ZlcnRleCxcblx0c2tpbm5vcm1hbF92ZXJ0ZXg6IHNraW5ub3JtYWxfdmVydGV4LFxuXHRzcGVjdWxhcm1hcF9mcmFnbWVudDogc3BlY3VsYXJtYXBfZnJhZ21lbnQsXG5cdHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ6IHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQsXG5cdHRvbmVtYXBwaW5nX2ZyYWdtZW50OiB0b25lbWFwcGluZ19mcmFnbWVudCxcblx0dG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudDogdG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc19mcmFnbWVudDogdXZfcGFyc19mcmFnbWVudCxcblx0dXZfcGFyc192ZXJ0ZXg6IHV2X3BhcnNfdmVydGV4LFxuXHR1dl92ZXJ0ZXg6IHV2X3ZlcnRleCxcblx0dXYyX3BhcnNfZnJhZ21lbnQ6IHV2Ml9wYXJzX2ZyYWdtZW50LFxuXHR1djJfcGFyc192ZXJ0ZXg6IHV2Ml9wYXJzX3ZlcnRleCxcblx0dXYyX3ZlcnRleDogdXYyX3ZlcnRleCxcblx0d29ybGRwb3NfdmVydGV4OiB3b3JsZHBvc192ZXJ0ZXgsXG5cblx0YmFja2dyb3VuZF9mcmFnOiBiYWNrZ3JvdW5kX2ZyYWcsXG5cdGJhY2tncm91bmRfdmVydDogYmFja2dyb3VuZF92ZXJ0LFxuXHRjdWJlX2ZyYWc6IGN1YmVfZnJhZyxcblx0Y3ViZV92ZXJ0OiBjdWJlX3ZlcnQsXG5cdGRlcHRoX2ZyYWc6IGRlcHRoX2ZyYWcsXG5cdGRlcHRoX3ZlcnQ6IGRlcHRoX3ZlcnQsXG5cdGRpc3RhbmNlUkdCQV9mcmFnOiBkaXN0YW5jZVJHQkFfZnJhZyxcblx0ZGlzdGFuY2VSR0JBX3ZlcnQ6IGRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRlcXVpcmVjdF9mcmFnOiBlcXVpcmVjdF9mcmFnLFxuXHRlcXVpcmVjdF92ZXJ0OiBlcXVpcmVjdF92ZXJ0LFxuXHRsaW5lZGFzaGVkX2ZyYWc6IGxpbmVkYXNoZWRfZnJhZyxcblx0bGluZWRhc2hlZF92ZXJ0OiBsaW5lZGFzaGVkX3ZlcnQsXG5cdG1lc2hiYXNpY19mcmFnOiBtZXNoYmFzaWNfZnJhZyxcblx0bWVzaGJhc2ljX3ZlcnQ6IG1lc2hiYXNpY192ZXJ0LFxuXHRtZXNobGFtYmVydF9mcmFnOiBtZXNobGFtYmVydF9mcmFnLFxuXHRtZXNobGFtYmVydF92ZXJ0OiBtZXNobGFtYmVydF92ZXJ0LFxuXHRtZXNobWF0Y2FwX2ZyYWc6IG1lc2htYXRjYXBfZnJhZyxcblx0bWVzaG1hdGNhcF92ZXJ0OiBtZXNobWF0Y2FwX3ZlcnQsXG5cdG1lc2h0b29uX2ZyYWc6IG1lc2h0b29uX2ZyYWcsXG5cdG1lc2h0b29uX3ZlcnQ6IG1lc2h0b29uX3ZlcnQsXG5cdG1lc2hwaG9uZ19mcmFnOiBtZXNocGhvbmdfZnJhZyxcblx0bWVzaHBob25nX3ZlcnQ6IG1lc2hwaG9uZ192ZXJ0LFxuXHRtZXNocGh5c2ljYWxfZnJhZzogbWVzaHBoeXNpY2FsX2ZyYWcsXG5cdG1lc2hwaHlzaWNhbF92ZXJ0OiBtZXNocGh5c2ljYWxfdmVydCxcblx0bm9ybWFsX2ZyYWc6IG5vcm1hbF9mcmFnLFxuXHRub3JtYWxfdmVydDogbm9ybWFsX3ZlcnQsXG5cdHBvaW50c19mcmFnOiBwb2ludHNfZnJhZyxcblx0cG9pbnRzX3ZlcnQ6IHBvaW50c192ZXJ0LFxuXHRzaGFkb3dfZnJhZzogc2hhZG93X2ZyYWcsXG5cdHNoYWRvd192ZXJ0OiBzaGFkb3dfdmVydCxcblx0c3ByaXRlX2ZyYWc6IHNwcml0ZV9mcmFnLFxuXHRzcHJpdGVfdmVydDogc3ByaXRlX3ZlcnRcbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICovXG5cbnZhciBTaGFkZXJMaWIgPSB7XG5cblx0YmFzaWM6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmFvbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2dcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hiYXNpY192ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNoYmFzaWNfZnJhZ1xuXG5cdH0sXG5cblx0bGFtYmVydDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hsYW1iZXJ0X2ZyYWdcblxuXHR9LFxuXG5cdHBob25nOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuc3BlY3VsYXJtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5lbnZtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5hb21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW1pc3NpdmVtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MTExMTExICkgfSxcblx0XHRcdFx0c2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGhvbmdfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBob25nX2ZyYWdcblxuXHR9LFxuXG5cdHN0YW5kYXJkOiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIuY29tbW9uLFxuXHRcdFx0VW5pZm9ybXNMaWIuZW52bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLnJvdWdobmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLm1ldGFsbmVzc21hcCxcblx0XHRcdFVuaWZvcm1zTGliLmZvZyxcblx0XHRcdFVuaWZvcm1zTGliLmxpZ2h0cyxcblx0XHRcdHtcblx0XHRcdFx0ZW1pc3NpdmU6IHsgdmFsdWU6IG5ldyBDb2xvciggMHgwMDAwMDAgKSB9LFxuXHRcdFx0XHRyb3VnaG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRtZXRhbG5lc3M6IHsgdmFsdWU6IDAuNSB9LFxuXHRcdFx0XHRlbnZNYXBJbnRlbnNpdHk6IHsgdmFsdWU6IDEgfSAvLyB0ZW1wb3Jhcnlcblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLm1lc2hwaHlzaWNhbF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG5cdH0sXG5cblx0dG9vbjoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLnNwZWN1bGFybWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYW9tYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5saWdodG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmVtaXNzaXZlbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuYnVtcG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLm5vcm1hbG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdFVuaWZvcm1zTGliLmdyYWRpZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0e1xuXHRcdFx0XHRlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwMCApIH0sXG5cdFx0XHRcdHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MTExMTExICkgfSxcblx0XHRcdFx0c2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNodG9vbl9mcmFnXG5cblx0fSxcblxuXHRtYXRjYXA6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5idW1wbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIubm9ybWFsbWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZGlzcGxhY2VtZW50bWFwLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRtYXRjYXA6IHsgdmFsdWU6IG51bGwgfVxuXHRcdFx0fVxuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaG1hdGNhcF92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNobWF0Y2FwX2ZyYWdcblxuXHR9LFxuXG5cdHBvaW50czoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLnBvaW50cyxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsucG9pbnRzX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnBvaW50c19mcmFnXG5cblx0fSxcblxuXHRkYXNoZWQ6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5mb2csXG5cdFx0XHR7XG5cdFx0XHRcdHNjYWxlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGRhc2hTaXplOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdHRvdGFsU2l6ZTogeyB2YWx1ZTogMiB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5saW5lZGFzaGVkX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmxpbmVkYXNoZWRfZnJhZ1xuXG5cdH0sXG5cblx0ZGVwdGg6IHtcblxuXHRcdHVuaWZvcm1zOiBtZXJnZVVuaWZvcm1zKCBbXG5cdFx0XHRVbmlmb3Jtc0xpYi5jb21tb24sXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXBcblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRlcHRoX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmRlcHRoX2ZyYWdcblxuXHR9LFxuXG5cdG5vcm1hbDoge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmJ1bXBtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG5cdFx0XHRVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG5cdFx0XHR7XG5cdFx0XHRcdG9wYWNpdHk6IHsgdmFsdWU6IDEuMCB9XG5cdFx0XHR9XG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5ub3JtYWxfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsubm9ybWFsX2ZyYWdcblxuXHR9LFxuXG5cdHNwcml0ZToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLnNwcml0ZSxcblx0XHRcdFVuaWZvcm1zTGliLmZvZ1xuXHRcdF0gKSxcblxuXHRcdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsuc3ByaXRlX3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLnNwcml0ZV9mcmFnXG5cblx0fSxcblxuXHRiYWNrZ3JvdW5kOiB7XG5cblx0XHR1bmlmb3Jtczoge1xuXHRcdFx0dXZUcmFuc2Zvcm06IHsgdmFsdWU6IG5ldyBNYXRyaXgzKCkgfSxcblx0XHRcdHQyRDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmJhY2tncm91bmRfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuYmFja2dyb3VuZF9mcmFnXG5cblx0fSxcblx0LyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXHQvL1x0Q3ViZSBtYXAgc2hhZGVyXG5cdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Y3ViZToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmVudm1hcCxcblx0XHRcdHtcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmN1YmVfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuY3ViZV9mcmFnXG5cblx0fSxcblxuXHRlcXVpcmVjdDoge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdHRFcXVpcmVjdDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X3ZlcnQsXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckNodW5rLmVxdWlyZWN0X2ZyYWdcblxuXHR9LFxuXG5cdGRpc3RhbmNlUkdCQToge1xuXG5cdFx0dW5pZm9ybXM6IG1lcmdlVW5pZm9ybXMoIFtcblx0XHRcdFVuaWZvcm1zTGliLmNvbW1vbixcblx0XHRcdFVuaWZvcm1zTGliLmRpc3BsYWNlbWVudG1hcCxcblx0XHRcdHtcblx0XHRcdFx0cmVmZXJlbmNlUG9zaXRpb246IHsgdmFsdWU6IG5ldyBWZWN0b3IzKCkgfSxcblx0XHRcdFx0bmVhckRpc3RhbmNlOiB7IHZhbHVlOiAxIH0sXG5cdFx0XHRcdGZhckRpc3RhbmNlOiB7IHZhbHVlOiAxMDAwIH1cblx0XHRcdH1cblx0XHRdICksXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IFNoYWRlckNodW5rLmRpc3RhbmNlUkdCQV92ZXJ0LFxuXHRcdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5kaXN0YW5jZVJHQkFfZnJhZ1xuXG5cdH0sXG5cblx0c2hhZG93OiB7XG5cblx0XHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFx0VW5pZm9ybXNMaWIubGlnaHRzLFxuXHRcdFx0VW5pZm9ybXNMaWIuZm9nLFxuXHRcdFx0e1xuXHRcdFx0XHRjb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKCAweDAwMDAwICkgfSxcblx0XHRcdFx0b3BhY2l0eTogeyB2YWx1ZTogMS4wIH1cblx0XHRcdH0sXG5cdFx0XSApLFxuXG5cdFx0dmVydGV4U2hhZGVyOiBTaGFkZXJDaHVuay5zaGFkb3dfdmVydCxcblx0XHRmcmFnbWVudFNoYWRlcjogU2hhZGVyQ2h1bmsuc2hhZG93X2ZyYWdcblxuXHR9XG5cbn07XG5cblNoYWRlckxpYi5waHlzaWNhbCA9IHtcblxuXHR1bmlmb3JtczogbWVyZ2VVbmlmb3JtcyggW1xuXHRcdFNoYWRlckxpYi5zdGFuZGFyZC51bmlmb3Jtcyxcblx0XHR7XG5cdFx0XHRjbGVhcmNvYXQ6IHsgdmFsdWU6IDAgfSxcblx0XHRcdGNsZWFyY29hdE1hcDogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHRjbGVhcmNvYXRSb3VnaG5lc3NNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdGNsZWFyY29hdE5vcm1hbFNjYWxlOiB7IHZhbHVlOiBuZXcgVmVjdG9yMiggMSwgMSApIH0sXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXA6IHsgdmFsdWU6IG51bGwgfSxcblx0XHRcdHNoZWVuOiB7IHZhbHVlOiBuZXcgQ29sb3IoIDB4MDAwMDAwICkgfSxcblx0XHRcdHRyYW5zcGFyZW5jeTogeyB2YWx1ZTogMCB9LFxuXHRcdH1cblx0XSApLFxuXG5cdHZlcnRleFNoYWRlcjogU2hhZGVyQ2h1bmsubWVzaHBoeXNpY2FsX3ZlcnQsXG5cdGZyYWdtZW50U2hhZGVyOiBTaGFkZXJDaHVuay5tZXNocGh5c2ljYWxfZnJhZ1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xCYWNrZ3JvdW5kKCByZW5kZXJlciwgc3RhdGUsIG9iamVjdHMsIHByZW11bHRpcGxpZWRBbHBoYSApIHtcblxuXHR2YXIgY2xlYXJDb2xvciA9IG5ldyBDb2xvciggMHgwMDAwMDAgKTtcblx0dmFyIGNsZWFyQWxwaGEgPSAwO1xuXG5cdHZhciBwbGFuZU1lc2g7XG5cdHZhciBib3hNZXNoO1xuXG5cdHZhciBjdXJyZW50QmFja2dyb3VuZCA9IG51bGw7XG5cdHZhciBjdXJyZW50QmFja2dyb3VuZFZlcnNpb24gPSAwO1xuXHR2YXIgY3VycmVudFRvbmVtYXBwaW5nID0gbnVsbDtcblxuXHRmdW5jdGlvbiByZW5kZXIoIHJlbmRlckxpc3QsIHNjZW5lLCBjYW1lcmEsIGZvcmNlQ2xlYXIgKSB7XG5cblx0XHR2YXIgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cblx0XHQvLyBJZ25vcmUgYmFja2dyb3VuZCBpbiBBUlxuXHRcdC8vIFRPRE86IFJlY29uc2lkZXIgdGhpcy5cblxuXHRcdHZhciB4ciA9IHJlbmRlcmVyLnhyO1xuXHRcdHZhciBzZXNzaW9uID0geHIuZ2V0U2Vzc2lvbiAmJiB4ci5nZXRTZXNzaW9uKCk7XG5cblx0XHRpZiAoIHNlc3Npb24gJiYgc2Vzc2lvbi5lbnZpcm9ubWVudEJsZW5kTW9kZSA9PT0gJ2FkZGl0aXZlJyApIHtcblxuXHRcdFx0YmFja2dyb3VuZCA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJhY2tncm91bmQgPT09IG51bGwgKSB7XG5cblx0XHRcdHNldENsZWFyKCBjbGVhckNvbG9yLCBjbGVhckFscGhhICk7XG5cblx0XHR9IGVsc2UgaWYgKCBiYWNrZ3JvdW5kICYmIGJhY2tncm91bmQuaXNDb2xvciApIHtcblxuXHRcdFx0c2V0Q2xlYXIoIGJhY2tncm91bmQsIDEgKTtcblx0XHRcdGZvcmNlQ2xlYXIgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJlci5hdXRvQ2xlYXIgfHwgZm9yY2VDbGVhciApIHtcblxuXHRcdFx0cmVuZGVyZXIuY2xlYXIoIHJlbmRlcmVyLmF1dG9DbGVhckNvbG9yLCByZW5kZXJlci5hdXRvQ2xlYXJEZXB0aCwgcmVuZGVyZXIuYXV0b0NsZWFyU3RlbmNpbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBiYWNrZ3JvdW5kICYmICggYmFja2dyb3VuZC5pc0N1YmVUZXh0dXJlIHx8IGJhY2tncm91bmQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgfHwgYmFja2dyb3VuZC5tYXBwaW5nID09PSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZyApICkge1xuXG5cdFx0XHRpZiAoIGJveE1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRib3hNZXNoID0gbmV3IE1lc2goXG5cdFx0XHRcdFx0bmV3IEJveEJ1ZmZlckdlb21ldHJ5KCAxLCAxLCAxICksXG5cdFx0XHRcdFx0bmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnQmFja2dyb3VuZEN1YmVNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmN1YmUudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmN1YmUudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5jdWJlLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogQmFja1NpZGUsXG5cdFx0XHRcdFx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdFx0XHRcdFx0ZGVwdGhXcml0ZTogZmFsc2UsXG5cdFx0XHRcdFx0XHRmb2c6IGZhbHNlXG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ym94TWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cdFx0XHRcdGJveE1lc2guZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAndXYnICk7XG5cblx0XHRcdFx0Ym94TWVzaC5vbkJlZm9yZVJlbmRlciA9IGZ1bmN0aW9uICggcmVuZGVyZXIsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1hdHJpeFdvcmxkLmNvcHlQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBlbmFibGUgY29kZSBpbmplY3Rpb24gZm9yIG5vbi1idWlsdC1pbiBtYXRlcmlhbFxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGJveE1lc2gubWF0ZXJpYWwsICdlbnZNYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMuZW52TWFwLnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggYm94TWVzaCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB0ZXh0dXJlID0gYmFja2dyb3VuZC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCA/IGJhY2tncm91bmQudGV4dHVyZSA6IGJhY2tncm91bmQ7XG5cblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZW52TWFwLnZhbHVlID0gdGV4dHVyZTtcblx0XHRcdGJveE1lc2gubWF0ZXJpYWwudW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IHRleHR1cmUuaXNDdWJlVGV4dHVyZSA/IC0gMSA6IDE7XG5cblx0XHRcdGlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHxcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSB0ZXh0dXJlLnZlcnNpb24gfHxcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nICE9PSByZW5kZXJlci50b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRib3hNZXNoLm1hdGVyaWFsLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRjdXJyZW50QmFja2dyb3VuZCA9IGJhY2tncm91bmQ7XG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kVmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nID0gcmVuZGVyZXIudG9uZU1hcHBpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gcHVzaCB0byB0aGUgcHJlLXNvcnRlZCBvcGFxdWUgcmVuZGVyIGxpc3Rcblx0XHRcdHJlbmRlckxpc3QudW5zaGlmdCggYm94TWVzaCwgYm94TWVzaC5nZW9tZXRyeSwgYm94TWVzaC5tYXRlcmlhbCwgMCwgMCwgbnVsbCApO1xuXG5cdFx0fSBlbHNlIGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0aWYgKCBwbGFuZU1lc2ggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2ggPSBuZXcgTWVzaChcblx0XHRcdFx0XHRuZXcgUGxhbmVCdWZmZXJHZW9tZXRyeSggMiwgMiApLFxuXHRcdFx0XHRcdG5ldyBTaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0XHRcdFx0dHlwZTogJ0JhY2tncm91bmRNYXRlcmlhbCcsXG5cdFx0XHRcdFx0XHR1bmlmb3JtczogY2xvbmVVbmlmb3JtcyggU2hhZGVyTGliLmJhY2tncm91bmQudW5pZm9ybXMgKSxcblx0XHRcdFx0XHRcdHZlcnRleFNoYWRlcjogU2hhZGVyTGliLmJhY2tncm91bmQudmVydGV4U2hhZGVyLFxuXHRcdFx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IFNoYWRlckxpYi5iYWNrZ3JvdW5kLmZyYWdtZW50U2hhZGVyLFxuXHRcdFx0XHRcdFx0c2lkZTogRnJvbnRTaWRlLFxuXHRcdFx0XHRcdFx0ZGVwdGhUZXN0OiBmYWxzZSxcblx0XHRcdFx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Zm9nOiBmYWxzZVxuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdHBsYW5lTWVzaC5nZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdub3JtYWwnICk7XG5cblx0XHRcdFx0Ly8gZW5hYmxlIGNvZGUgaW5qZWN0aW9uIGZvciBub24tYnVpbHQtaW4gbWF0ZXJpYWxcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBwbGFuZU1lc2gubWF0ZXJpYWwsICdtYXAnLCB7XG5cblx0XHRcdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMudW5pZm9ybXMudDJELnZhbHVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHRvYmplY3RzLnVwZGF0ZSggcGxhbmVNZXNoICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnQyRC52YWx1ZSA9IGJhY2tncm91bmQ7XG5cblx0XHRcdGlmICggYmFja2dyb3VuZC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdGJhY2tncm91bmQudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0cGxhbmVNZXNoLm1hdGVyaWFsLnVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIGJhY2tncm91bmQubWF0cml4ICk7XG5cblx0XHRcdGlmICggY3VycmVudEJhY2tncm91bmQgIT09IGJhY2tncm91bmQgfHxcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uICE9PSBiYWNrZ3JvdW5kLnZlcnNpb24gfHxcblx0XHRcdFx0Y3VycmVudFRvbmVtYXBwaW5nICE9PSByZW5kZXJlci50b25lTWFwcGluZyApIHtcblxuXHRcdFx0XHRwbGFuZU1lc2gubWF0ZXJpYWwubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdGN1cnJlbnRCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblx0XHRcdFx0Y3VycmVudEJhY2tncm91bmRWZXJzaW9uID0gYmFja2dyb3VuZC52ZXJzaW9uO1xuXHRcdFx0XHRjdXJyZW50VG9uZW1hcHBpbmcgPSByZW5kZXJlci50b25lTWFwcGluZztcblxuXHRcdFx0fVxuXG5cblx0XHRcdC8vIHB1c2ggdG8gdGhlIHByZS1zb3J0ZWQgb3BhcXVlIHJlbmRlciBsaXN0XG5cdFx0XHRyZW5kZXJMaXN0LnVuc2hpZnQoIHBsYW5lTWVzaCwgcGxhbmVNZXNoLmdlb21ldHJ5LCBwbGFuZU1lc2gubWF0ZXJpYWwsIDAsIDAsIG51bGwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0Q2xlYXIoIGNvbG9yLCBhbHBoYSApIHtcblxuXHRcdHN0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIsIGFscGhhLCBwcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGdldENsZWFyQ29sb3I6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIGNsZWFyQ29sb3I7XG5cblx0XHR9LFxuXHRcdHNldENsZWFyQ29sb3I6IGZ1bmN0aW9uICggY29sb3IsIGFscGhhICkge1xuXG5cdFx0XHRjbGVhckNvbG9yLnNldCggY29sb3IgKTtcblx0XHRcdGNsZWFyQWxwaGEgPSBhbHBoYSAhPT0gdW5kZWZpbmVkID8gYWxwaGEgOiAxO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0Z2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRyZXR1cm4gY2xlYXJBbHBoYTtcblxuXHRcdH0sXG5cdFx0c2V0Q2xlYXJBbHBoYTogZnVuY3Rpb24gKCBhbHBoYSApIHtcblxuXHRcdFx0Y2xlYXJBbHBoYSA9IGFscGhhO1xuXHRcdFx0c2V0Q2xlYXIoIGNsZWFyQ29sb3IsIGNsZWFyQWxwaGEgKTtcblxuXHRcdH0sXG5cdFx0cmVuZGVyOiByZW5kZXJcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEJ1ZmZlclJlbmRlcmVyKCBnbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICkge1xuXG5cdHZhciBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHR2YXIgbW9kZTtcblxuXHRmdW5jdGlvbiBzZXRNb2RlKCB2YWx1ZSApIHtcblxuXHRcdG1vZGUgPSB2YWx1ZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3QXJyYXlzKCBtb2RlLCBzdGFydCwgY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBzdGFydCwgY291bnQsIHByaW1jb3VudCApIHtcblxuXHRcdGlmICggcHJpbWNvdW50ID09PSAwICkgcmV0dXJuO1xuXG5cdFx0dmFyIGV4dGVuc2lvbiwgbWV0aG9kTmFtZTtcblxuXHRcdGlmICggaXNXZWJHTDIgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGdsO1xuXHRcdFx0bWV0aG9kTmFtZSA9ICdkcmF3QXJyYXlzSW5zdGFuY2VkJztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblx0XHRcdG1ldGhvZE5hbWUgPSAnZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFJztcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMQnVmZmVyUmVuZGVyZXI6IHVzaW5nIFRIUkVFLkluc3RhbmNlZEJ1ZmZlckdlb21ldHJ5IGJ1dCBoYXJkd2FyZSBkb2VzIG5vdCBzdXBwb3J0IGV4dGVuc2lvbiBBTkdMRV9pbnN0YW5jZWRfYXJyYXlzLicgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRleHRlbnNpb25bIG1ldGhvZE5hbWUgXSggbW9kZSwgc3RhcnQsIGNvdW50LCBwcmltY291bnQgKTtcblxuXHRcdGluZm8udXBkYXRlKCBjb3VudCwgbW9kZSwgcHJpbWNvdW50ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dGhpcy5zZXRNb2RlID0gc2V0TW9kZTtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTENhcGFiaWxpdGllcyggZ2wsIGV4dGVuc2lvbnMsIHBhcmFtZXRlcnMgKSB7XG5cblx0dmFyIG1heEFuaXNvdHJvcHk7XG5cblx0ZnVuY3Rpb24gZ2V0TWF4QW5pc290cm9weSgpIHtcblxuXHRcdGlmICggbWF4QW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIG1heEFuaXNvdHJvcHk7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IGdsLmdldFBhcmFtZXRlciggZXh0ZW5zaW9uLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0bWF4QW5pc290cm9weSA9IDA7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF4QW5pc290cm9weTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TWF4UHJlY2lzaW9uKCBwcmVjaXNpb24gKSB7XG5cblx0XHRpZiAoIHByZWNpc2lvbiA9PT0gJ2hpZ2hwJyApIHtcblxuXHRcdFx0aWYgKCBnbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoIDM1NjMzLCAzNjMzOCApLnByZWNpc2lvbiA+IDAgJiZcblx0XHRcdFx0Z2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMiwgMzYzMzggKS5wcmVjaXNpb24gPiAwICkge1xuXG5cdFx0XHRcdHJldHVybiAnaGlnaHAnO1xuXG5cdFx0XHR9XG5cblx0XHRcdHByZWNpc2lvbiA9ICdtZWRpdW1wJztcblxuXHRcdH1cblxuXHRcdGlmICggcHJlY2lzaW9uID09PSAnbWVkaXVtcCcgKSB7XG5cblx0XHRcdGlmICggZ2wuZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KCAzNTYzMywgMzYzMzcgKS5wcmVjaXNpb24gPiAwICYmXG5cdFx0XHRcdGdsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCggMzU2MzIsIDM2MzM3ICkucHJlY2lzaW9uID4gMCApIHtcblxuXHRcdFx0XHRyZXR1cm4gJ21lZGl1bXAnO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ2xvd3AnO1xuXG5cdH1cblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuXHR2YXIgaXNXZWJHTDIgPSAoIHR5cGVvZiBXZWJHTDJSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMlJlbmRlcmluZ0NvbnRleHQgKSB8fFxuXHRcdCggdHlwZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0ICE9PSAndW5kZWZpbmVkJyAmJiBnbCBpbnN0YW5jZW9mIFdlYkdMMkNvbXB1dGVSZW5kZXJpbmdDb250ZXh0ICk7XG5cdC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cblxuXHR2YXIgcHJlY2lzaW9uID0gcGFyYW1ldGVycy5wcmVjaXNpb24gIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucHJlY2lzaW9uIDogJ2hpZ2hwJztcblx0dmFyIG1heFByZWNpc2lvbiA9IGdldE1heFByZWNpc2lvbiggcHJlY2lzaW9uICk7XG5cblx0aWYgKCBtYXhQcmVjaXNpb24gIT09IHByZWNpc2lvbiApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6JywgcHJlY2lzaW9uLCAnbm90IHN1cHBvcnRlZCwgdXNpbmcnLCBtYXhQcmVjaXNpb24sICdpbnN0ZWFkLicgKTtcblx0XHRwcmVjaXNpb24gPSBtYXhQcmVjaXNpb247XG5cblx0fVxuXG5cdHZhciBsb2dhcml0aG1pY0RlcHRoQnVmZmVyID0gcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID09PSB0cnVlO1xuXG5cdHZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzQ5MzAgKTtcblx0dmFyIG1heFZlcnRleFRleHR1cmVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNTY2MCApO1xuXHR2YXIgbWF4VGV4dHVyZVNpemUgPSBnbC5nZXRQYXJhbWV0ZXIoIDMzNzkgKTtcblx0dmFyIG1heEN1YmVtYXBTaXplID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDA3NiApO1xuXG5cdHZhciBtYXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkyMSApO1xuXHR2YXIgbWF4VmVydGV4VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ3ICk7XG5cdHZhciBtYXhWYXJ5aW5ncyA9IGdsLmdldFBhcmFtZXRlciggMzYzNDggKTtcblx0dmFyIG1heEZyYWdtZW50VW5pZm9ybXMgPSBnbC5nZXRQYXJhbWV0ZXIoIDM2MzQ5ICk7XG5cblx0dmFyIHZlcnRleFRleHR1cmVzID0gbWF4VmVydGV4VGV4dHVyZXMgPiAwO1xuXHR2YXIgZmxvYXRGcmFnbWVudFRleHR1cmVzID0gaXNXZWJHTDIgfHwgISEgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdCcgKTtcblx0dmFyIGZsb2F0VmVydGV4VGV4dHVyZXMgPSB2ZXJ0ZXhUZXh0dXJlcyAmJiBmbG9hdEZyYWdtZW50VGV4dHVyZXM7XG5cblx0dmFyIG1heFNhbXBsZXMgPSBpc1dlYkdMMiA/IGdsLmdldFBhcmFtZXRlciggMzYxODMgKSA6IDA7XG5cblx0cmV0dXJuIHtcblxuXHRcdGlzV2ViR0wyOiBpc1dlYkdMMixcblxuXHRcdGdldE1heEFuaXNvdHJvcHk6IGdldE1heEFuaXNvdHJvcHksXG5cdFx0Z2V0TWF4UHJlY2lzaW9uOiBnZXRNYXhQcmVjaXNpb24sXG5cblx0XHRwcmVjaXNpb246IHByZWNpc2lvbixcblx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0bWF4VGV4dHVyZXM6IG1heFRleHR1cmVzLFxuXHRcdG1heFZlcnRleFRleHR1cmVzOiBtYXhWZXJ0ZXhUZXh0dXJlcyxcblx0XHRtYXhUZXh0dXJlU2l6ZTogbWF4VGV4dHVyZVNpemUsXG5cdFx0bWF4Q3ViZW1hcFNpemU6IG1heEN1YmVtYXBTaXplLFxuXG5cdFx0bWF4QXR0cmlidXRlczogbWF4QXR0cmlidXRlcyxcblx0XHRtYXhWZXJ0ZXhVbmlmb3JtczogbWF4VmVydGV4VW5pZm9ybXMsXG5cdFx0bWF4VmFyeWluZ3M6IG1heFZhcnlpbmdzLFxuXHRcdG1heEZyYWdtZW50VW5pZm9ybXM6IG1heEZyYWdtZW50VW5pZm9ybXMsXG5cblx0XHR2ZXJ0ZXhUZXh0dXJlczogdmVydGV4VGV4dHVyZXMsXG5cdFx0ZmxvYXRGcmFnbWVudFRleHR1cmVzOiBmbG9hdEZyYWdtZW50VGV4dHVyZXMsXG5cdFx0ZmxvYXRWZXJ0ZXhUZXh0dXJlczogZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdG1heFNhbXBsZXM6IG1heFNhbXBsZXNcblxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMQ2xpcHBpbmcoKSB7XG5cblx0dmFyIHNjb3BlID0gdGhpcyxcblxuXHRcdGdsb2JhbFN0YXRlID0gbnVsbCxcblx0XHRudW1HbG9iYWxQbGFuZXMgPSAwLFxuXHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkID0gZmFsc2UsXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlLFxuXG5cdFx0cGxhbmUgPSBuZXcgUGxhbmUoKSxcblx0XHR2aWV3Tm9ybWFsTWF0cml4ID0gbmV3IE1hdHJpeDMoKSxcblxuXHRcdHVuaWZvcm0gPSB7IHZhbHVlOiBudWxsLCBuZWVkc1VwZGF0ZTogZmFsc2UgfTtcblxuXHR0aGlzLnVuaWZvcm0gPSB1bmlmb3JtO1xuXHR0aGlzLm51bVBsYW5lcyA9IDA7XG5cdHRoaXMubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR0aGlzLmluaXQgPSBmdW5jdGlvbiAoIHBsYW5lcywgZW5hYmxlTG9jYWxDbGlwcGluZywgY2FtZXJhICkge1xuXG5cdFx0dmFyIGVuYWJsZWQgPVxuXHRcdFx0cGxhbmVzLmxlbmd0aCAhPT0gMCB8fFxuXHRcdFx0ZW5hYmxlTG9jYWxDbGlwcGluZyB8fFxuXHRcdFx0Ly8gZW5hYmxlIHN0YXRlIG9mIHByZXZpb3VzIGZyYW1lIC0gdGhlIGNsaXBwaW5nIGNvZGUgaGFzIHRvXG5cdFx0XHQvLyBydW4gYW5vdGhlciBmcmFtZSBpbiBvcmRlciB0byByZXNldCB0aGUgc3RhdGU6XG5cdFx0XHRudW1HbG9iYWxQbGFuZXMgIT09IDAgfHxcblx0XHRcdGxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXG5cdFx0bG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBlbmFibGVMb2NhbENsaXBwaW5nO1xuXG5cdFx0Z2xvYmFsU3RhdGUgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgMCApO1xuXHRcdG51bUdsb2JhbFBsYW5lcyA9IHBsYW5lcy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gZW5hYmxlZDtcblxuXHR9O1xuXG5cdHRoaXMuYmVnaW5TaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IHRydWU7XG5cdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdH07XG5cblx0dGhpcy5lbmRTaGFkb3dzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmVuZGVyaW5nU2hhZG93cyA9IGZhbHNlO1xuXHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U3RhdGUgPSBmdW5jdGlvbiAoIHBsYW5lcywgY2xpcEludGVyc2VjdGlvbiwgY2xpcFNoYWRvd3MsIGNhbWVyYSwgY2FjaGUsIGZyb21DYWNoZSApIHtcblxuXHRcdGlmICggISBsb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBwbGFuZXMgPT09IG51bGwgfHwgcGxhbmVzLmxlbmd0aCA9PT0gMCB8fCByZW5kZXJpbmdTaGFkb3dzICYmICEgY2xpcFNoYWRvd3MgKSB7XG5cblx0XHRcdC8vIHRoZXJlJ3Mgbm8gbG9jYWwgY2xpcHBpbmdcblxuXHRcdFx0aWYgKCByZW5kZXJpbmdTaGFkb3dzICkge1xuXG5cdFx0XHRcdC8vIHRoZXJlJ3Mgbm8gZ2xvYmFsIGNsaXBwaW5nXG5cblx0XHRcdFx0cHJvamVjdFBsYW5lcyggbnVsbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlc2V0R2xvYmFsU3RhdGUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIG5HbG9iYWwgPSByZW5kZXJpbmdTaGFkb3dzID8gMCA6IG51bUdsb2JhbFBsYW5lcyxcblx0XHRcdFx0bEdsb2JhbCA9IG5HbG9iYWwgKiA0LFxuXG5cdFx0XHRcdGRzdEFycmF5ID0gY2FjaGUuY2xpcHBpbmdTdGF0ZSB8fCBudWxsO1xuXG5cdFx0XHR1bmlmb3JtLnZhbHVlID0gZHN0QXJyYXk7IC8vIGVuc3VyZSB1bmlxdWUgc3RhdGVcblxuXHRcdFx0ZHN0QXJyYXkgPSBwcm9qZWN0UGxhbmVzKCBwbGFuZXMsIGNhbWVyYSwgbEdsb2JhbCwgZnJvbUNhY2hlICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbEdsb2JhbDsgKysgaSApIHtcblxuXHRcdFx0XHRkc3RBcnJheVsgaSBdID0gZ2xvYmFsU3RhdGVbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjYWNoZS5jbGlwcGluZ1N0YXRlID0gZHN0QXJyYXk7XG5cdFx0XHR0aGlzLm51bUludGVyc2VjdGlvbiA9IGNsaXBJbnRlcnNlY3Rpb24gPyB0aGlzLm51bVBsYW5lcyA6IDA7XG5cdFx0XHR0aGlzLm51bVBsYW5lcyArPSBuR2xvYmFsO1xuXG5cdFx0fVxuXG5cblx0fTtcblxuXHRmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuXG5cdFx0aWYgKCB1bmlmb3JtLnZhbHVlICE9PSBnbG9iYWxTdGF0ZSApIHtcblxuXHRcdFx0dW5pZm9ybS52YWx1ZSA9IGdsb2JhbFN0YXRlO1xuXHRcdFx0dW5pZm9ybS5uZWVkc1VwZGF0ZSA9IG51bUdsb2JhbFBsYW5lcyA+IDA7XG5cblx0XHR9XG5cblx0XHRzY29wZS5udW1QbGFuZXMgPSBudW1HbG9iYWxQbGFuZXM7XG5cdFx0c2NvcGUubnVtSW50ZXJzZWN0aW9uID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHJvamVjdFBsYW5lcyggcGxhbmVzLCBjYW1lcmEsIGRzdE9mZnNldCwgc2tpcFRyYW5zZm9ybSApIHtcblxuXHRcdHZhciBuUGxhbmVzID0gcGxhbmVzICE9PSBudWxsID8gcGxhbmVzLmxlbmd0aCA6IDAsXG5cdFx0XHRkc3RBcnJheSA9IG51bGw7XG5cblx0XHRpZiAoIG5QbGFuZXMgIT09IDAgKSB7XG5cblx0XHRcdGRzdEFycmF5ID0gdW5pZm9ybS52YWx1ZTtcblxuXHRcdFx0aWYgKCBza2lwVHJhbnNmb3JtICE9PSB0cnVlIHx8IGRzdEFycmF5ID09PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBmbGF0U2l6ZSA9IGRzdE9mZnNldCArIG5QbGFuZXMgKiA0LFxuXHRcdFx0XHRcdHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xuXG5cdFx0XHRcdHZpZXdOb3JtYWxNYXRyaXguZ2V0Tm9ybWFsTWF0cml4KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0aWYgKCBkc3RBcnJheSA9PT0gbnVsbCB8fCBkc3RBcnJheS5sZW5ndGggPCBmbGF0U2l6ZSApIHtcblxuXHRcdFx0XHRcdGRzdEFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggZmxhdFNpemUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpNCA9IGRzdE9mZnNldDsgaSAhPT0gblBsYW5lczsgKysgaSwgaTQgKz0gNCApIHtcblxuXHRcdFx0XHRcdHBsYW5lLmNvcHkoIHBsYW5lc1sgaSBdICkuYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4LCB2aWV3Tm9ybWFsTWF0cml4ICk7XG5cblx0XHRcdFx0XHRwbGFuZS5ub3JtYWwudG9BcnJheSggZHN0QXJyYXksIGk0ICk7XG5cdFx0XHRcdFx0ZHN0QXJyYXlbIGk0ICsgMyBdID0gcGxhbmUuY29uc3RhbnQ7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm0udmFsdWUgPSBkc3RBcnJheTtcblx0XHRcdHVuaWZvcm0ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0c2NvcGUubnVtUGxhbmVzID0gblBsYW5lcztcblx0XHRzY29wZS5udW1JbnRlcnNlY3Rpb24gPSAwO1xuXG5cdFx0cmV0dXJuIGRzdEFycmF5O1xuXG5cdH1cblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xFeHRlbnNpb25zKCBnbCApIHtcblxuXHR2YXIgZXh0ZW5zaW9ucyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbmFtZSApIHtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zWyBuYW1lIF0gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gZXh0ZW5zaW9uc1sgbmFtZSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBleHRlbnNpb247XG5cblx0XHRcdHN3aXRjaCAoIG5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfZGVwdGhfdGV4dHVyZSc6XG5cdFx0XHRcdFx0ZXh0ZW5zaW9uID0gZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfV0VCR0xfZGVwdGhfdGV4dHVyZScgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfZGVwdGhfdGV4dHVyZScgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdNT1pfRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnOlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjJyApIHx8IGdsLmdldEV4dGVuc2lvbiggJ01PWl9XRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0YycgKSB8fCBnbC5nZXRFeHRlbnNpb24oICdXRUJLSVRfV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJzpcblx0XHRcdFx0XHRleHRlbnNpb24gPSBnbC5nZXRFeHRlbnNpb24oICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfcHZydGMnICkgfHwgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCS0lUX1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YycgKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGV4dGVuc2lvbiA9IGdsLmdldEV4dGVuc2lvbiggbmFtZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uID09PSBudWxsICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6ICcgKyBuYW1lICsgJyBleHRlbnNpb24gbm90IHN1cHBvcnRlZC4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0ZXh0ZW5zaW9uc1sgbmFtZSBdID0gZXh0ZW5zaW9uO1xuXG5cdFx0XHRyZXR1cm4gZXh0ZW5zaW9uO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMR2VvbWV0cmllcyggZ2wsIGF0dHJpYnV0ZXMsIGluZm8gKSB7XG5cblx0dmFyIGdlb21ldHJpZXMgPSBuZXcgV2Vha01hcCgpO1xuXHR2YXIgd2lyZWZyYW1lQXR0cmlidXRlcyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gb25HZW9tZXRyeURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gZXZlbnQudGFyZ2V0O1xuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBnZW9tZXRyeSApO1xuXG5cdFx0aWYgKCBidWZmZXJnZW9tZXRyeS5pbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy5yZW1vdmUoIGJ1ZmZlcmdlb21ldHJ5LmluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgbmFtZSBpbiBidWZmZXJnZW9tZXRyeS5hdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYnVmZmVyZ2VvbWV0cnkuYXR0cmlidXRlc1sgbmFtZSBdICk7XG5cblx0XHR9XG5cblx0XHRnZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRnZW9tZXRyaWVzLmRlbGV0ZSggZ2VvbWV0cnkgKTtcblxuXHRcdHZhciBhdHRyaWJ1dGUgPSB3aXJlZnJhbWVBdHRyaWJ1dGVzLmdldCggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggYXR0cmlidXRlICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnJlbW92ZSggYXR0cmlidXRlICk7XG5cdFx0XHR3aXJlZnJhbWVBdHRyaWJ1dGVzLmRlbGV0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpbmZvLm1lbW9yeS5nZW9tZXRyaWVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIG9iamVjdCwgZ2VvbWV0cnkgKSB7XG5cblx0XHR2YXIgYnVmZmVyZ2VvbWV0cnkgPSBnZW9tZXRyaWVzLmdldCggZ2VvbWV0cnkgKTtcblxuXHRcdGlmICggYnVmZmVyZ2VvbWV0cnkgKSByZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0XHRnZW9tZXRyeS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uR2VvbWV0cnlEaXNwb3NlICk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0XHRpZiAoIGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGdlb21ldHJ5Ll9idWZmZXJHZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpLnNldEZyb21PYmplY3QoIG9iamVjdCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGJ1ZmZlcmdlb21ldHJ5ID0gZ2VvbWV0cnkuX2J1ZmZlckdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cmllcy5zZXQoIGdlb21ldHJ5LCBidWZmZXJnZW9tZXRyeSApO1xuXG5cdFx0aW5mby5tZW1vcnkuZ2VvbWV0cmllcyArKztcblxuXHRcdHJldHVybiBidWZmZXJnZW9tZXRyeTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdHZhciBnZW9tZXRyeUF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0YXR0cmlidXRlcy51cGRhdGUoIGluZGV4LCAzNDk2MyApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gZ2VvbWV0cnlBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF0sIDM0OTYyICk7XG5cblx0XHR9XG5cblx0XHQvLyBtb3JwaCB0YXJnZXRzXG5cblx0XHR2YXIgbW9ycGhBdHRyaWJ1dGVzID0gZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBtb3JwaEF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gYXJyYXkubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRhdHRyaWJ1dGVzLnVwZGF0ZSggYXJyYXlbIGkgXSwgMzQ5NjIgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICkge1xuXG5cdFx0dmFyIGluZGljZXMgPSBbXTtcblxuXHRcdHZhciBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cdFx0dmFyIGdlb21ldHJ5UG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHRcdHZhciB2ZXJzaW9uID0gMDtcblxuXHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dmFyIGFycmF5ID0gZ2VvbWV0cnlJbmRleC5hcnJheTtcblx0XHRcdHZlcnNpb24gPSBnZW9tZXRyeUluZGV4LnZlcnNpb247XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGFycmF5Lmxlbmd0aDsgaSA8IGw7IGkgKz0gMyApIHtcblxuXHRcdFx0XHR2YXIgYSA9IGFycmF5WyBpICsgMCBdO1xuXHRcdFx0XHR2YXIgYiA9IGFycmF5WyBpICsgMSBdO1xuXHRcdFx0XHR2YXIgYyA9IGFycmF5WyBpICsgMiBdO1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgYiwgYywgYywgYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgYXJyYXkgPSBnZW9tZXRyeVBvc2l0aW9uLmFycmF5O1xuXHRcdFx0dmVyc2lvbiA9IGdlb21ldHJ5UG9zaXRpb24udmVyc2lvbjtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gKCBhcnJheS5sZW5ndGggLyAzICkgLSAxOyBpIDwgbDsgaSArPSAzICkge1xuXG5cdFx0XHRcdHZhciBhID0gaSArIDA7XG5cdFx0XHRcdHZhciBiID0gaSArIDE7XG5cdFx0XHRcdHZhciBjID0gaSArIDI7XG5cblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBiLCBjLCBjLCBhICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBhdHRyaWJ1dGUgPSBuZXcgKCBhcnJheU1heCggaW5kaWNlcyApID4gNjU1MzUgPyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUgOiBVaW50MTZCdWZmZXJBdHRyaWJ1dGUgKSggaW5kaWNlcywgMSApO1xuXHRcdGF0dHJpYnV0ZS52ZXJzaW9uID0gdmVyc2lvbjtcblxuXHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBhdHRyaWJ1dGUsIDM0OTYzICk7XG5cblx0XHQvL1xuXG5cdFx0dmFyIHByZXZpb3VzQXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIHByZXZpb3VzQXR0cmlidXRlICkgYXR0cmlidXRlcy5yZW1vdmUoIHByZXZpb3VzQXR0cmlidXRlICk7XG5cblx0XHQvL1xuXG5cdFx0d2lyZWZyYW1lQXR0cmlidXRlcy5zZXQoIGdlb21ldHJ5LCBhdHRyaWJ1dGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApIHtcblxuXHRcdHZhciBjdXJyZW50QXR0cmlidXRlID0gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0XHRpZiAoIGN1cnJlbnRBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdHZhciBnZW9tZXRyeUluZGV4ID0gZ2VvbWV0cnkuaW5kZXg7XG5cblx0XHRcdGlmICggZ2VvbWV0cnlJbmRleCAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHQvLyBpZiB0aGUgYXR0cmlidXRlIGlzIG9ic29sZXRlLCBjcmVhdGUgYSBuZXcgb25lXG5cblx0XHRcdFx0aWYgKCBjdXJyZW50QXR0cmlidXRlLnZlcnNpb24gPCBnZW9tZXRyeUluZGV4LnZlcnNpb24gKSB7XG5cblx0XHRcdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR1cGRhdGVXaXJlZnJhbWVBdHRyaWJ1dGUoIGdlb21ldHJ5ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gd2lyZWZyYW1lQXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5ICk7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGdldCxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblxuXHRcdGdldFdpcmVmcmFtZUF0dHJpYnV0ZTogZ2V0V2lyZWZyYW1lQXR0cmlidXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xJbmRleGVkQnVmZmVyUmVuZGVyZXIoIGdsLCBleHRlbnNpb25zLCBpbmZvLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdHZhciBtb2RlO1xuXG5cdGZ1bmN0aW9uIHNldE1vZGUoIHZhbHVlICkge1xuXG5cdFx0bW9kZSA9IHZhbHVlO1xuXG5cdH1cblxuXHR2YXIgdHlwZSwgYnl0ZXNQZXJFbGVtZW50O1xuXG5cdGZ1bmN0aW9uIHNldEluZGV4KCB2YWx1ZSApIHtcblxuXHRcdHR5cGUgPSB2YWx1ZS50eXBlO1xuXHRcdGJ5dGVzUGVyRWxlbWVudCA9IHZhbHVlLmJ5dGVzUGVyRWxlbWVudDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVuZGVyKCBzdGFydCwgY291bnQgKSB7XG5cblx0XHRnbC5kcmF3RWxlbWVudHMoIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCApO1xuXG5cdFx0aW5mby51cGRhdGUoIGNvdW50LCBtb2RlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlckluc3RhbmNlcyggZ2VvbWV0cnksIHN0YXJ0LCBjb3VudCwgcHJpbWNvdW50ICkge1xuXG5cdFx0aWYgKCBwcmltY291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHR2YXIgZXh0ZW5zaW9uLCBtZXRob2ROYW1lO1xuXG5cdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZ2w7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZCc7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cdFx0XHRtZXRob2ROYW1lID0gJ2RyYXdFbGVtZW50c0luc3RhbmNlZEFOR0xFJztcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gPT09IG51bGwgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyOiB1c2luZyBUSFJFRS5JbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSBidXQgaGFyZHdhcmUgZG9lcyBub3Qgc3VwcG9ydCBleHRlbnNpb24gQU5HTEVfaW5zdGFuY2VkX2FycmF5cy4nICk7XG5cdFx0XHRcdHJldHVybjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9uWyBtZXRob2ROYW1lIF0oIG1vZGUsIGNvdW50LCB0eXBlLCBzdGFydCAqIGJ5dGVzUGVyRWxlbWVudCwgcHJpbWNvdW50ICk7XG5cblx0XHRpbmZvLnVwZGF0ZSggY291bnQsIG1vZGUsIHByaW1jb3VudCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuc2V0TW9kZSA9IHNldE1vZGU7XG5cdHRoaXMuc2V0SW5kZXggPSBzZXRJbmRleDtcblx0dGhpcy5yZW5kZXIgPSByZW5kZXI7XG5cdHRoaXMucmVuZGVySW5zdGFuY2VzID0gcmVuZGVySW5zdGFuY2VzO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTEluZm8oIGdsICkge1xuXG5cdHZhciBtZW1vcnkgPSB7XG5cdFx0Z2VvbWV0cmllczogMCxcblx0XHR0ZXh0dXJlczogMFxuXHR9O1xuXG5cdHZhciByZW5kZXIgPSB7XG5cdFx0ZnJhbWU6IDAsXG5cdFx0Y2FsbHM6IDAsXG5cdFx0dHJpYW5nbGVzOiAwLFxuXHRcdHBvaW50czogMCxcblx0XHRsaW5lczogMFxuXHR9O1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggY291bnQsIG1vZGUsIGluc3RhbmNlQ291bnQgKSB7XG5cblx0XHRpbnN0YW5jZUNvdW50ID0gaW5zdGFuY2VDb3VudCB8fCAxO1xuXG5cdFx0cmVuZGVyLmNhbGxzICsrO1xuXG5cdFx0c3dpdGNoICggbW9kZSApIHtcblxuXHRcdFx0Y2FzZSA0OlxuXHRcdFx0XHRyZW5kZXIudHJpYW5nbGVzICs9IGluc3RhbmNlQ291bnQgKiAoIGNvdW50IC8gMyApO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAxOlxuXHRcdFx0XHRyZW5kZXIubGluZXMgKz0gaW5zdGFuY2VDb3VudCAqICggY291bnQgLyAyICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIDM6XG5cdFx0XHRcdHJlbmRlci5saW5lcyArPSBpbnN0YW5jZUNvdW50ICogKCBjb3VudCAtIDEgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMjpcblx0XHRcdFx0cmVuZGVyLmxpbmVzICs9IGluc3RhbmNlQ291bnQgKiBjb3VudDtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgMDpcblx0XHRcdFx0cmVuZGVyLnBvaW50cyArPSBpbnN0YW5jZUNvdW50ICogY291bnQ7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xJbmZvOiBVbmtub3duIGRyYXcgbW9kZTonLCBtb2RlICk7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZXNldCgpIHtcblxuXHRcdHJlbmRlci5mcmFtZSArKztcblx0XHRyZW5kZXIuY2FsbHMgPSAwO1xuXHRcdHJlbmRlci50cmlhbmdsZXMgPSAwO1xuXHRcdHJlbmRlci5wb2ludHMgPSAwO1xuXHRcdHJlbmRlci5saW5lcyA9IDA7XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0bWVtb3J5OiBtZW1vcnksXG5cdFx0cmVuZGVyOiByZW5kZXIsXG5cdFx0cHJvZ3JhbXM6IG51bGwsXG5cdFx0YXV0b1Jlc2V0OiB0cnVlLFxuXHRcdHJlc2V0OiByZXNldCxcblx0XHR1cGRhdGU6IHVwZGF0ZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBhYnNOdW1lcmljYWxTb3J0KCBhLCBiICkge1xuXG5cdHJldHVybiBNYXRoLmFicyggYlsgMSBdICkgLSBNYXRoLmFicyggYVsgMSBdICk7XG5cbn1cblxuZnVuY3Rpb24gV2ViR0xNb3JwaHRhcmdldHMoIGdsICkge1xuXG5cdHZhciBpbmZsdWVuY2VzTGlzdCA9IHt9O1xuXHR2YXIgbW9ycGhJbmZsdWVuY2VzID0gbmV3IEZsb2F0MzJBcnJheSggOCApO1xuXG5cdGZ1bmN0aW9uIHVwZGF0ZSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKSB7XG5cblx0XHR2YXIgb2JqZWN0SW5mbHVlbmNlcyA9IG9iamVjdC5tb3JwaFRhcmdldEluZmx1ZW5jZXM7XG5cblx0XHQvLyBXaGVuIG9iamVjdCBkb2Vzbid0IGhhdmUgbW9ycGggdGFyZ2V0IGluZmx1ZW5jZXMgZGVmaW5lZCwgd2UgdHJlYXQgaXQgYXMgYSAwLWxlbmd0aCBhcnJheVxuXHRcdC8vIFRoaXMgaXMgaW1wb3J0YW50IHRvIG1ha2Ugc3VyZSB3ZSBzZXQgdXAgbW9ycGhUYXJnZXRCYXNlSW5mbHVlbmNlIC8gbW9ycGhUYXJnZXRJbmZsdWVuY2VzXG5cblx0XHR2YXIgbGVuZ3RoID0gb2JqZWN0SW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkID8gMCA6IG9iamVjdEluZmx1ZW5jZXMubGVuZ3RoO1xuXG5cdFx0dmFyIGluZmx1ZW5jZXMgPSBpbmZsdWVuY2VzTGlzdFsgZ2VvbWV0cnkuaWQgXTtcblxuXHRcdGlmICggaW5mbHVlbmNlcyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBpbml0aWFsaXNlIGxpc3RcblxuXHRcdFx0aW5mbHVlbmNlcyA9IFtdO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0aW5mbHVlbmNlc1sgaSBdID0gWyBpLCAwIF07XG5cblx0XHRcdH1cblxuXHRcdFx0aW5mbHVlbmNlc0xpc3RbIGdlb21ldHJ5LmlkIF0gPSBpbmZsdWVuY2VzO1xuXG5cdFx0fVxuXG5cdFx0dmFyIG1vcnBoVGFyZ2V0cyA9IG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb247XG5cdFx0dmFyIG1vcnBoTm9ybWFscyA9IG1hdGVyaWFsLm1vcnBoTm9ybWFscyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMubm9ybWFsO1xuXG5cdFx0Ly8gUmVtb3ZlIGN1cnJlbnQgbW9ycGhBdHRyaWJ1dGVzXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbmZsdWVuY2UgPSBpbmZsdWVuY2VzWyBpIF07XG5cblx0XHRcdGlmICggaW5mbHVlbmNlWyAxIF0gIT09IDAgKSB7XG5cblx0XHRcdFx0aWYgKCBtb3JwaFRhcmdldHMgKSBnZW9tZXRyeS5kZWxldGVBdHRyaWJ1dGUoICdtb3JwaFRhcmdldCcgKyBpICk7XG5cdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICkgZ2VvbWV0cnkuZGVsZXRlQXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBDb2xsZWN0IGluZmx1ZW5jZXNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aW5mbHVlbmNlWyAwIF0gPSBpO1xuXHRcdFx0aW5mbHVlbmNlWyAxIF0gPSBvYmplY3RJbmZsdWVuY2VzWyBpIF07XG5cblx0XHR9XG5cblx0XHRpbmZsdWVuY2VzLnNvcnQoIGFic051bWVyaWNhbFNvcnQgKTtcblxuXHRcdC8vIEFkZCBtb3JwaEF0dHJpYnV0ZXNcblxuXHRcdHZhciBtb3JwaEluZmx1ZW5jZXNTdW0gPSAwO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgODsgaSArKyApIHtcblxuXHRcdFx0dmFyIGluZmx1ZW5jZSA9IGluZmx1ZW5jZXNbIGkgXTtcblxuXHRcdFx0aWYgKCBpbmZsdWVuY2UgKSB7XG5cblx0XHRcdFx0dmFyIGluZGV4ID0gaW5mbHVlbmNlWyAwIF07XG5cdFx0XHRcdHZhciB2YWx1ZSA9IGluZmx1ZW5jZVsgMSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyApIGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ21vcnBoVGFyZ2V0JyArIGksIG1vcnBoVGFyZ2V0c1sgaW5kZXggXSApO1xuXHRcdFx0XHRcdGlmICggbW9ycGhOb3JtYWxzICkgZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbW9ycGhOb3JtYWwnICsgaSwgbW9ycGhOb3JtYWxzWyBpbmRleCBdICk7XG5cblx0XHRcdFx0XHRtb3JwaEluZmx1ZW5jZXNbIGkgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdG1vcnBoSW5mbHVlbmNlc1N1bSArPSB2YWx1ZTtcblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0bW9ycGhJbmZsdWVuY2VzWyBpIF0gPSAwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR0xTTCBzaGFkZXIgdXNlcyBmb3JtdWxhIGJhc2VpbmZsdWVuY2UgKiBiYXNlICsgc3VtKHRhcmdldCAqIGluZmx1ZW5jZSlcblx0XHQvLyBUaGlzIGFsbG93cyB1cyB0byBzd2l0Y2ggYmV0d2VlbiBhYnNvbHV0ZSBtb3JwaHMgYW5kIHJlbGF0aXZlIG1vcnBocyB3aXRob3V0IGNoYW5naW5nIHNoYWRlciBjb2RlXG5cdFx0Ly8gV2hlbiBiYXNlaW5mbHVlbmNlID0gMSAtIHN1bShpbmZsdWVuY2UpLCB0aGUgYWJvdmUgaXMgZXF1aXZhbGVudCB0byBzdW0oKHRhcmdldCAtIGJhc2UpICogaW5mbHVlbmNlKVxuXHRcdHZhciBtb3JwaEJhc2VJbmZsdWVuY2UgPSBnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA/IDEgOiAxIC0gbW9ycGhJbmZsdWVuY2VzU3VtO1xuXG5cdFx0cHJvZ3JhbS5nZXRVbmlmb3JtcygpLnNldFZhbHVlKCBnbCwgJ21vcnBoVGFyZ2V0QmFzZUluZmx1ZW5jZScsIG1vcnBoQmFzZUluZmx1ZW5jZSApO1xuXHRcdHByb2dyYW0uZ2V0VW5pZm9ybXMoKS5zZXRWYWx1ZSggZ2wsICdtb3JwaFRhcmdldEluZmx1ZW5jZXMnLCBtb3JwaEluZmx1ZW5jZXMgKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdHVwZGF0ZTogdXBkYXRlXG5cblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gV2ViR0xPYmplY3RzKCBnbCwgZ2VvbWV0cmllcywgYXR0cmlidXRlcywgaW5mbyApIHtcblxuXHR2YXIgdXBkYXRlTWFwID0gbmV3IFdlYWtNYXAoKTtcblxuXHRmdW5jdGlvbiB1cGRhdGUoIG9iamVjdCApIHtcblxuXHRcdHZhciBmcmFtZSA9IGluZm8ucmVuZGVyLmZyYW1lO1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gb2JqZWN0Lmdlb21ldHJ5O1xuXHRcdHZhciBidWZmZXJnZW9tZXRyeSA9IGdlb21ldHJpZXMuZ2V0KCBvYmplY3QsIGdlb21ldHJ5ICk7XG5cblx0XHQvLyBVcGRhdGUgb25jZSBwZXIgZnJhbWVcblxuXHRcdGlmICggdXBkYXRlTWFwLmdldCggYnVmZmVyZ2VvbWV0cnkgKSAhPT0gZnJhbWUgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0XHRidWZmZXJnZW9tZXRyeS51cGRhdGVGcm9tT2JqZWN0KCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRnZW9tZXRyaWVzLnVwZGF0ZSggYnVmZmVyZ2VvbWV0cnkgKTtcblxuXHRcdFx0dXBkYXRlTWFwLnNldCggYnVmZmVyZ2VvbWV0cnksIGZyYW1lICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdC5pc0luc3RhbmNlZE1lc2ggKSB7XG5cblx0XHRcdGF0dHJpYnV0ZXMudXBkYXRlKCBvYmplY3QuaW5zdGFuY2VNYXRyaXgsIDM0OTYyICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYnVmZmVyZ2VvbWV0cnk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHR1cGRhdGVNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXG5cdFx0dXBkYXRlOiB1cGRhdGUsXG5cdFx0ZGlzcG9zZTogZGlzcG9zZVxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEN1YmVUZXh0dXJlKCBpbWFnZXMsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKSB7XG5cblx0aW1hZ2VzID0gaW1hZ2VzICE9PSB1bmRlZmluZWQgPyBpbWFnZXMgOiBbXTtcblx0bWFwcGluZyA9IG1hcHBpbmcgIT09IHVuZGVmaW5lZCA/IG1hcHBpbmcgOiBDdWJlUmVmbGVjdGlvbk1hcHBpbmc7XG5cdGZvcm1hdCA9IGZvcm1hdCAhPT0gdW5kZWZpbmVkID8gZm9ybWF0IDogUkdCRm9ybWF0O1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgaW1hZ2VzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHksIGVuY29kaW5nICk7XG5cblx0dGhpcy5mbGlwWSA9IGZhbHNlO1xuXG59XG5cbkN1YmVUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5DdWJlVGV4dHVyZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJlVGV4dHVyZTtcblxuQ3ViZVRleHR1cmUucHJvdG90eXBlLmlzQ3ViZVRleHR1cmUgPSB0cnVlO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEN1YmVUZXh0dXJlLnByb3RvdHlwZSwgJ2ltYWdlcycsIHtcblxuXHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmltYWdlO1xuXG5cdH0sXG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5pbWFnZSA9IHZhbHVlO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgVGFrYWhpcm8gaHR0cHM6Ly9naXRodWIuY29tL3Rha2FoaXJveFxuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlMkRBcnJheSggZGF0YSwgd2lkdGgsIGhlaWdodCwgZGVwdGggKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSwgZGVwdGg6IGRlcHRoIHx8IDEgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cbn1cblxuRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5EYXRhVGV4dHVyZTJEQXJyYXkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRGF0YVRleHR1cmUyREFycmF5O1xuRGF0YVRleHR1cmUyREFycmF5LnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlMkRBcnJheSA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBBcnR1ciBUcnplc2lva1xuICovXG5cbmZ1bmN0aW9uIERhdGFUZXh0dXJlM0QoIGRhdGEsIHdpZHRoLCBoZWlnaHQsIGRlcHRoICkge1xuXG5cdC8vIFdlJ3JlIGdvaW5nIHRvIGFkZCAuc2V0WFhYKCkgbWV0aG9kcyBmb3Igc2V0dGluZyBwcm9wZXJ0aWVzIGxhdGVyLlxuXHQvLyBVc2VycyBjYW4gc3RpbGwgc2V0IGluIERhdGFUZXh0dXJlM0QgZGlyZWN0bHkuXG5cdC8vXG5cdC8vXHR2YXIgdGV4dHVyZSA9IG5ldyBUSFJFRS5EYXRhVGV4dHVyZTNEKCBkYXRhLCB3aWR0aCwgaGVpZ2h0LCBkZXB0aCApO1xuXHQvLyBcdHRleHR1cmUuYW5pc290cm9weSA9IDE2O1xuXHQvL1xuXHQvLyBTZWUgIzE0ODM5XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCBudWxsICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgZGF0YTogZGF0YSB8fCBudWxsLCB3aWR0aDogd2lkdGggfHwgMSwgaGVpZ2h0OiBoZWlnaHQgfHwgMSwgZGVwdGg6IGRlcHRoIHx8IDEgfTtcblxuXHR0aGlzLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdHRoaXMubWluRmlsdGVyID0gTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLndyYXBSID0gQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHR0aGlzLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblxufVxuXG5EYXRhVGV4dHVyZTNELnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5EYXRhVGV4dHVyZTNELnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERhdGFUZXh0dXJlM0Q7XG5EYXRhVGV4dHVyZTNELnByb3RvdHlwZS5pc0RhdGFUZXh0dXJlM0QgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICpcbiAqIFVuaWZvcm1zIG9mIGEgcHJvZ3JhbS5cbiAqIFRob3NlIGZvcm0gYSB0cmVlIHN0cnVjdHVyZSB3aXRoIGEgc3BlY2lhbCB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciB0aGUgcm9vdCxcbiAqIHdoaWNoIHlvdSBnZXQgYnkgY2FsbGluZyAnbmV3IFdlYkdMVW5pZm9ybXMoIGdsLCBwcm9ncmFtICknLlxuICpcbiAqXG4gKiBQcm9wZXJ0aWVzIG9mIGlubmVyIG5vZGVzIGluY2x1ZGluZyB0aGUgdG9wLWxldmVsIGNvbnRhaW5lcjpcbiAqXG4gKiAuc2VxIC0gYXJyYXkgb2YgbmVzdGVkIHVuaWZvcm1zXG4gKiAubWFwIC0gbmVzdGVkIHVuaWZvcm1zIGJ5IG5hbWVcbiAqXG4gKlxuICogTWV0aG9kcyBvZiBhbGwgbm9kZXMgZXhjZXB0IHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIHZhbHVlLCBbdGV4dHVyZXNdIClcbiAqXG4gKiBcdFx0dXBsb2FkcyBhIHVuaWZvcm0gdmFsdWUocylcbiAqICBcdHRoZSAndGV4dHVyZXMnIHBhcmFtZXRlciBpcyBuZWVkZWQgZm9yIHNhbXBsZXIgdW5pZm9ybXNcbiAqXG4gKlxuICogU3RhdGljIG1ldGhvZHMgb2YgdGhlIHRvcC1sZXZlbCBjb250YWluZXIgKHRleHR1cmVzIGZhY3Rvcml6YXRpb25zKTpcbiAqXG4gKiAudXBsb2FkKCBnbCwgc2VxLCB2YWx1ZXMsIHRleHR1cmVzIClcbiAqXG4gKiBcdFx0c2V0cyB1bmlmb3JtcyBpbiAnc2VxJyB0byAndmFsdWVzW2lkXS52YWx1ZSdcbiAqXG4gKiAuc2VxV2l0aFZhbHVlKCBzZXEsIHZhbHVlcyApIDogZmlsdGVyZWRTZXFcbiAqXG4gKiBcdFx0ZmlsdGVycyAnc2VxJyBlbnRyaWVzIHdpdGggY29ycmVzcG9uZGluZyBlbnRyeSBpbiB2YWx1ZXNcbiAqXG4gKlxuICogTWV0aG9kcyBvZiB0aGUgdG9wLWxldmVsIGNvbnRhaW5lciAodGV4dHVyZXMgZmFjdG9yaXphdGlvbnMpOlxuICpcbiAqIC5zZXRWYWx1ZSggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApXG4gKlxuICogXHRcdHNldHMgdW5pZm9ybSB3aXRoICBuYW1lICduYW1lJyB0byAndmFsdWUnXG4gKlxuICogLnNldE9wdGlvbmFsKCBnbCwgb2JqLCBwcm9wIClcbiAqXG4gKiBcdFx0bGlrZSAuc2V0IGZvciBhbiBvcHRpb25hbCBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0XG4gKlxuICovXG5cbnZhciBlbXB0eVRleHR1cmUgPSBuZXcgVGV4dHVyZSgpO1xudmFyIGVtcHR5VGV4dHVyZTJkQXJyYXkgPSBuZXcgRGF0YVRleHR1cmUyREFycmF5KCk7XG52YXIgZW1wdHlUZXh0dXJlM2QgPSBuZXcgRGF0YVRleHR1cmUzRCgpO1xudmFyIGVtcHR5Q3ViZVRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblxuLy8gLS0tIFV0aWxpdGllcyAtLS1cblxuLy8gQXJyYXkgQ2FjaGVzIChwcm92aWRlIHR5cGVkIGFycmF5cyBmb3IgdGVtcG9yYXJ5IGJ5IHNpemUpXG5cbnZhciBhcnJheUNhY2hlRjMyID0gW107XG52YXIgYXJyYXlDYWNoZUkzMiA9IFtdO1xuXG4vLyBGbG9hdDMyQXJyYXkgY2FjaGVzIHVzZWQgZm9yIHVwbG9hZGluZyBNYXRyaXggdW5pZm9ybXNcblxudmFyIG1hdDRhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDE2ICk7XG52YXIgbWF0M2FycmF5ID0gbmV3IEZsb2F0MzJBcnJheSggOSApO1xudmFyIG1hdDJhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIDQgKTtcblxuLy8gRmxhdHRlbmluZyBmb3IgYXJyYXlzIG9mIHZlY3RvcnMgYW5kIG1hdHJpY2VzXG5cbmZ1bmN0aW9uIGZsYXR0ZW4oIGFycmF5LCBuQmxvY2tzLCBibG9ja1NpemUgKSB7XG5cblx0dmFyIGZpcnN0RWxlbSA9IGFycmF5WyAwIF07XG5cblx0aWYgKCBmaXJzdEVsZW0gPD0gMCB8fCBmaXJzdEVsZW0gPiAwICkgcmV0dXJuIGFycmF5O1xuXHQvLyB1bm9wdGltaXplZDogISBpc05hTiggZmlyc3RFbGVtIClcblx0Ly8gc2VlIGh0dHA6Ly9qYWNrc29uZHVuc3Rhbi5jb20vYXJ0aWNsZXMvOTgzXG5cblx0dmFyIG4gPSBuQmxvY2tzICogYmxvY2tTaXplLFxuXHRcdHIgPSBhcnJheUNhY2hlRjMyWyBuIF07XG5cblx0aWYgKCByID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRyID0gbmV3IEZsb2F0MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVGMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGlmICggbkJsb2NrcyAhPT0gMCApIHtcblxuXHRcdGZpcnN0RWxlbS50b0FycmF5KCByLCAwICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDEsIG9mZnNldCA9IDA7IGkgIT09IG5CbG9ja3M7ICsrIGkgKSB7XG5cblx0XHRcdG9mZnNldCArPSBibG9ja1NpemU7XG5cdFx0XHRhcnJheVsgaSBdLnRvQXJyYXkoIHIsIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gcjtcblxufVxuXG5mdW5jdGlvbiBhcnJheXNFcXVhbCggYSwgYiApIHtcblxuXHRpZiAoIGEubGVuZ3RoICE9PSBiLmxlbmd0aCApIHJldHVybiBmYWxzZTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRpZiAoIGFbIGkgXSAhPT0gYlsgaSBdICkgcmV0dXJuIGZhbHNlO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG5mdW5jdGlvbiBjb3B5QXJyYXkoIGEsIGIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gYi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0YVsgaSBdID0gYlsgaSBdO1xuXG5cdH1cblxufVxuXG4vLyBUZXh0dXJlIHVuaXQgYWxsb2NhdGlvblxuXG5mdW5jdGlvbiBhbGxvY1RleFVuaXRzKCB0ZXh0dXJlcywgbiApIHtcblxuXHR2YXIgciA9IGFycmF5Q2FjaGVJMzJbIG4gXTtcblxuXHRpZiAoIHIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHIgPSBuZXcgSW50MzJBcnJheSggbiApO1xuXHRcdGFycmF5Q2FjaGVJMzJbIG4gXSA9IHI7XG5cblx0fVxuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApXG5cdFx0clsgaSBdID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdHJldHVybiByO1xuXG59XG5cbi8vIC0tLSBTZXR0ZXJzIC0tLVxuXG4vLyBOb3RlOiBEZWZpbmluZyB0aGVzZSBtZXRob2RzIGV4dGVybmFsbHksIGJlY2F1c2UgdGhleSBjb21lIGluIGEgYnVuY2hcbi8vIGFuZCB0aGlzIHdheSB0aGVpciBuYW1lcyBtaW5pZnkuXG5cbi8vIFNpbmdsZSBzY2FsYXJcblxuZnVuY3Rpb24gc2V0VmFsdWVWMWYoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cblx0aWYgKCBjYWNoZVsgMCBdID09PSB2ICkgcmV0dXJuO1xuXG5cdGdsLnVuaWZvcm0xZiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y2FjaGVbIDAgXSA9IHY7XG5cbn1cblxuLy8gU2luZ2xlIGZsb2F0IHZlY3RvciAoZnJvbSBmbGF0IGFycmF5IG9yIFRIUkVFLlZlY3Rvck4pXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJmKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgKSB7XG5cblx0XHRcdGdsLnVuaWZvcm0yZiggdGhpcy5hZGRyLCB2LngsIHYueSApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblxuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzZiggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblxuXHRpZiAoIHYueCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnggfHwgY2FjaGVbIDEgXSAhPT0gdi55IHx8IGNhY2hlWyAyIF0gIT09IHYueiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnogKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYueDtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lnk7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi56O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSBpZiAoIHYuciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBjYWNoZVsgMCBdICE9PSB2LnIgfHwgY2FjaGVbIDEgXSAhPT0gdi5nIHx8IGNhY2hlWyAyIF0gIT09IHYuYiApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTNmKCB0aGlzLmFkZHIsIHYuciwgdi5nLCB2LmIgKTtcblxuXHRcdFx0Y2FjaGVbIDAgXSA9IHYucjtcblx0XHRcdGNhY2hlWyAxIF0gPSB2Lmc7XG5cdFx0XHRjYWNoZVsgMiBdID0gdi5iO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjRmKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggdi54ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGNhY2hlWyAwIF0gIT09IHYueCB8fCBjYWNoZVsgMSBdICE9PSB2LnkgfHwgY2FjaGVbIDIgXSAhPT0gdi56IHx8IGNhY2hlWyAzIF0gIT09IHYudyApIHtcblxuXHRcdFx0Z2wudW5pZm9ybTRmKCB0aGlzLmFkZHIsIHYueCwgdi55LCB2LnosIHYudyApO1xuXG5cdFx0XHRjYWNoZVsgMCBdID0gdi54O1xuXHRcdFx0Y2FjaGVbIDEgXSA9IHYueTtcblx0XHRcdGNhY2hlWyAyIF0gPSB2Lno7XG5cdFx0XHRjYWNoZVsgMyBdID0gdi53O1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybTRmdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fVxuXG59XG5cbi8vIFNpbmdsZSBtYXRyaXggKGZyb20gZmxhdCBhcnJheSBvciBNYXRyaXhOKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0yKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgZWxlbWVudHMgPSB2LmVsZW1lbnRzO1xuXG5cdGlmICggZWxlbWVudHMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0XHRnbC51bmlmb3JtTWF0cml4MmZ2KCB0aGlzLmFkZHIsIGZhbHNlLCB2ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCB2ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCBlbGVtZW50cyApICkgcmV0dXJuO1xuXG5cdFx0bWF0MmFycmF5LnNldCggZWxlbWVudHMgKTtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIG1hdDJhcnJheSApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgZWxlbWVudHMgKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVNMyggZ2wsIHYgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIGVsZW1lbnRzID0gdi5lbGVtZW50cztcblxuXHRpZiAoIGVsZW1lbnRzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgdiApICkgcmV0dXJuO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgdiApO1xuXG5cdFx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRpZiAoIGFycmF5c0VxdWFsKCBjYWNoZSwgZWxlbWVudHMgKSApIHJldHVybjtcblxuXHRcdG1hdDNhcnJheS5zZXQoIGVsZW1lbnRzICk7XG5cblx0XHRnbC51bmlmb3JtTWF0cml4M2Z2KCB0aGlzLmFkZHIsIGZhbHNlLCBtYXQzYXJyYXkgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIGVsZW1lbnRzICk7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTQoIGdsLCB2ICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciBlbGVtZW50cyA9IHYuZWxlbWVudHM7XG5cblx0aWYgKCBlbGVtZW50cyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIHYgKSApIHJldHVybjtcblxuXHRcdGdsLnVuaWZvcm1NYXRyaXg0ZnYoIHRoaXMuYWRkciwgZmFsc2UsIHYgKTtcblxuXHRcdGNvcHlBcnJheSggY2FjaGUsIHYgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCBhcnJheXNFcXVhbCggY2FjaGUsIGVsZW1lbnRzICkgKSByZXR1cm47XG5cblx0XHRtYXQ0YXJyYXkuc2V0KCBlbGVtZW50cyApO1xuXG5cdFx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgbWF0NGFycmF5ICk7XG5cblx0XHRjb3B5QXJyYXkoIGNhY2hlLCBlbGVtZW50cyApO1xuXG5cdH1cblxufVxuXG4vLyBTaW5nbGUgdGV4dHVyZSAoMkQgLyBDdWJlKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQxKCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2FmZVNldFRleHR1cmUyRCggdiB8fCBlbXB0eVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQyREFycmF5MSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdHZhciBjYWNoZSA9IHRoaXMuY2FjaGU7XG5cdHZhciB1bml0ID0gdGV4dHVyZXMuYWxsb2NhdGVUZXh0dXJlVW5pdCgpO1xuXG5cdGlmICggY2FjaGVbIDAgXSAhPT0gdW5pdCApIHtcblxuXHRcdGdsLnVuaWZvcm0xaSggdGhpcy5hZGRyLCB1bml0ICk7XG5cdFx0Y2FjaGVbIDAgXSA9IHVuaXQ7XG5cblx0fVxuXG5cdHRleHR1cmVzLnNldFRleHR1cmUyREFycmF5KCB2IHx8IGVtcHR5VGV4dHVyZTJkQXJyYXksIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQzRDEoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXHR2YXIgdW5pdCA9IHRleHR1cmVzLmFsbG9jYXRlVGV4dHVyZVVuaXQoKTtcblxuXHRpZiAoIGNhY2hlWyAwIF0gIT09IHVuaXQgKSB7XG5cblx0XHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdW5pdCApO1xuXHRcdGNhY2hlWyAwIF0gPSB1bml0O1xuXG5cdH1cblxuXHR0ZXh0dXJlcy5zZXRUZXh0dXJlM0QoIHYgfHwgZW1wdHlUZXh0dXJlM2QsIHVuaXQgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2KCBnbCwgdiwgdGV4dHVyZXMgKSB7XG5cblx0dmFyIGNhY2hlID0gdGhpcy5jYWNoZTtcblx0dmFyIHVuaXQgPSB0ZXh0dXJlcy5hbGxvY2F0ZVRleHR1cmVVbml0KCk7XG5cblx0aWYgKCBjYWNoZVsgMCBdICE9PSB1bml0ICkge1xuXG5cdFx0Z2wudW5pZm9ybTFpKCB0aGlzLmFkZHIsIHVuaXQgKTtcblx0XHRjYWNoZVsgMCBdID0gdW5pdDtcblxuXHR9XG5cblx0dGV4dHVyZXMuc2FmZVNldFRleHR1cmVDdWJlKCB2IHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXQgKTtcblxufVxuXG4vLyBJbnRlZ2VyIC8gQm9vbGVhbiB2ZWN0b3JzIG9yIGFycmF5cyB0aGVyZW9mIChhbHdheXMgZmxhdCBhcnJheXMpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVjFpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMWkoIHRoaXMuYWRkciwgdiApO1xuXG5cdGNhY2hlWyAwIF0gPSB2O1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjJpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTJpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTNpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjRpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggYXJyYXlzRXF1YWwoIGNhY2hlLCB2ICkgKSByZXR1cm47XG5cblx0Z2wudW5pZm9ybTRpdiggdGhpcy5hZGRyLCB2ICk7XG5cblx0Y29weUFycmF5KCBjYWNoZSwgdiApO1xuXG59XG5cbi8vIHVpbnRcblxuZnVuY3Rpb24gc2V0VmFsdWVWMXVpKCBnbCwgdiApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggY2FjaGVbIDAgXSA9PT0gdiApIHJldHVybjtcblxuXHRnbC51bmlmb3JtMXVpKCB0aGlzLmFkZHIsIHYgKTtcblxuXHRjYWNoZVsgMCBdID0gdjtcblxufVxuXG4vLyBIZWxwZXIgdG8gcGljayB0aGUgcmlnaHQgc2V0dGVyIGZvciB0aGUgc2luZ3VsYXIgY2FzZVxuXG5mdW5jdGlvbiBnZXRTaW5ndWxhclNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZjsgLy8gRkxPQVRcblx0XHRjYXNlIDB4OGI1MDogcmV0dXJuIHNldFZhbHVlVjJmOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjUxOiByZXR1cm4gc2V0VmFsdWVWM2Y7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZjsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVhOiByZXR1cm4gc2V0VmFsdWVNMjsgLy8gX01BVDJcblx0XHRjYXNlIDB4OGI1YjogcmV0dXJuIHNldFZhbHVlTTM7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00OyAvLyBfTUFUNFxuXG5cdFx0Y2FzZSAweDE0MDQ6IGNhc2UgMHg4YjU2OiByZXR1cm4gc2V0VmFsdWVWMWk7IC8vIElOVCwgQk9PTFxuXHRcdGNhc2UgMHg4YjUzOiBjYXNlIDB4OGI1NzogcmV0dXJuIHNldFZhbHVlVjJpOyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpOyAvLyBfVkVDM1xuXHRcdGNhc2UgMHg4YjU1OiBjYXNlIDB4OGI1OTogcmV0dXJuIHNldFZhbHVlVjRpOyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDE0MDU6IHJldHVybiBzZXRWYWx1ZVYxdWk7IC8vIFVJTlRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMTtcblxuXHRcdGNhc2UgMHg4YjVmOiAvLyBTQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkY2I6IC8vIElOVF9TQU1QTEVSXzNEXG5cdFx0Y2FzZSAweDhkZDM6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzNEXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUM0QxO1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDY7XG5cblx0XHRjYXNlIDB4OGRjMTogLy8gU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGNmOiAvLyBJTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGQ3OiAvLyBVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWVxuXHRcdGNhc2UgMHg4ZGM0OiAvLyBTQU1QTEVSXzJEX0FSUkFZX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDJEQXJyYXkxO1xuXG5cdH1cblxufVxuXG4vLyBBcnJheSBvZiBzY2FsYXJzXG5mdW5jdGlvbiBzZXRWYWx1ZVYxZkFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWZ2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG4vLyBJbnRlZ2VyIC8gQm9vbGVhbiB2ZWN0b3JzIG9yIGFycmF5cyB0aGVyZW9mIChhbHdheXMgZmxhdCBhcnJheXMpXG5mdW5jdGlvbiBzZXRWYWx1ZVYxaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtMml2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYzaUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtM2l2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVY0aUFycmF5KCBnbCwgdiApIHtcblxuXHRnbC51bmlmb3JtNGl2KCB0aGlzLmFkZHIsIHYgKTtcblxufVxuXG5cbi8vIEFycmF5IG9mIHZlY3RvcnMgKGZsYXQgb3IgZnJvbSBUSFJFRSBjbGFzc2VzKVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVYyZkFycmF5KCBnbCwgdiApIHtcblxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgMiApO1xuXG5cdGdsLnVuaWZvcm0yZnYoIHRoaXMuYWRkciwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlVjNmQXJyYXkoIGdsLCB2ICkge1xuXG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCAzICk7XG5cblx0Z2wudW5pZm9ybTNmdiggdGhpcy5hZGRyLCBkYXRhICk7XG5cbn1cblxuZnVuY3Rpb24gc2V0VmFsdWVWNGZBcnJheSggZ2wsIHYgKSB7XG5cblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDQgKTtcblxuXHRnbC51bmlmb3JtNGZ2KCB0aGlzLmFkZHIsIGRhdGEgKTtcblxufVxuXG4vLyBBcnJheSBvZiBtYXRyaWNlcyAoZmxhdCBvciBmcm9tIFRIUkVFIGNsYXNlcylcblxuZnVuY3Rpb24gc2V0VmFsdWVNMkFycmF5KCBnbCwgdiApIHtcblxuXHR2YXIgZGF0YSA9IGZsYXR0ZW4oIHYsIHRoaXMuc2l6ZSwgNCApO1xuXG5cdGdsLnVuaWZvcm1NYXRyaXgyZnYoIHRoaXMuYWRkciwgZmFsc2UsIGRhdGEgKTtcblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZU0zQXJyYXkoIGdsLCB2ICkge1xuXG5cdHZhciBkYXRhID0gZmxhdHRlbiggdiwgdGhpcy5zaXplLCA5ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDNmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbmZ1bmN0aW9uIHNldFZhbHVlTTRBcnJheSggZ2wsIHYgKSB7XG5cblx0dmFyIGRhdGEgPSBmbGF0dGVuKCB2LCB0aGlzLnNpemUsIDE2ICk7XG5cblx0Z2wudW5pZm9ybU1hdHJpeDRmdiggdGhpcy5hZGRyLCBmYWxzZSwgZGF0YSApO1xuXG59XG5cbi8vIEFycmF5IG9mIHRleHR1cmVzICgyRCAvIEN1YmUpXG5cbmZ1bmN0aW9uIHNldFZhbHVlVDFBcnJheSggZ2wsIHYsIHRleHR1cmVzICkge1xuXG5cdHZhciBuID0gdi5sZW5ndGg7XG5cblx0dmFyIHVuaXRzID0gYWxsb2NUZXhVbml0cyggdGV4dHVyZXMsIG4gKTtcblxuXHRnbC51bmlmb3JtMWl2KCB0aGlzLmFkZHIsIHVuaXRzICk7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0dGV4dHVyZXMuc2FmZVNldFRleHR1cmUyRCggdlsgaSBdIHx8IGVtcHR5VGV4dHVyZSwgdW5pdHNbIGkgXSApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZVQ2QXJyYXkoIGdsLCB2LCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgbiA9IHYubGVuZ3RoO1xuXG5cdHZhciB1bml0cyA9IGFsbG9jVGV4VW5pdHMoIHRleHR1cmVzLCBuICk7XG5cblx0Z2wudW5pZm9ybTFpdiggdGhpcy5hZGRyLCB1bml0cyApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHRleHR1cmVzLnNhZmVTZXRUZXh0dXJlQ3ViZSggdlsgaSBdIHx8IGVtcHR5Q3ViZVRleHR1cmUsIHVuaXRzWyBpIF0gKTtcblxuXHR9XG5cbn1cblxuLy8gSGVscGVyIHRvIHBpY2sgdGhlIHJpZ2h0IHNldHRlciBmb3IgYSBwdXJlIChib3R0b20tbGV2ZWwpIGFycmF5XG5cbmZ1bmN0aW9uIGdldFB1cmVBcnJheVNldHRlciggdHlwZSApIHtcblxuXHRzd2l0Y2ggKCB0eXBlICkge1xuXG5cdFx0Y2FzZSAweDE0MDY6IHJldHVybiBzZXRWYWx1ZVYxZkFycmF5OyAvLyBGTE9BVFxuXHRcdGNhc2UgMHg4YjUwOiByZXR1cm4gc2V0VmFsdWVWMmZBcnJheTsgLy8gX1ZFQzJcblx0XHRjYXNlIDB4OGI1MTogcmV0dXJuIHNldFZhbHVlVjNmQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTI6IHJldHVybiBzZXRWYWx1ZVY0ZkFycmF5OyAvLyBfVkVDNFxuXG5cdFx0Y2FzZSAweDhiNWE6IHJldHVybiBzZXRWYWx1ZU0yQXJyYXk7IC8vIF9NQVQyXG5cdFx0Y2FzZSAweDhiNWI6IHJldHVybiBzZXRWYWx1ZU0zQXJyYXk7IC8vIF9NQVQzXG5cdFx0Y2FzZSAweDhiNWM6IHJldHVybiBzZXRWYWx1ZU00QXJyYXk7IC8vIF9NQVQ0XG5cblx0XHRjYXNlIDB4MTQwNDogY2FzZSAweDhiNTY6IHJldHVybiBzZXRWYWx1ZVYxaUFycmF5OyAvLyBJTlQsIEJPT0xcblx0XHRjYXNlIDB4OGI1MzogY2FzZSAweDhiNTc6IHJldHVybiBzZXRWYWx1ZVYyaUFycmF5OyAvLyBfVkVDMlxuXHRcdGNhc2UgMHg4YjU0OiBjYXNlIDB4OGI1ODogcmV0dXJuIHNldFZhbHVlVjNpQXJyYXk7IC8vIF9WRUMzXG5cdFx0Y2FzZSAweDhiNTU6IGNhc2UgMHg4YjU5OiByZXR1cm4gc2V0VmFsdWVWNGlBcnJheTsgLy8gX1ZFQzRcblxuXHRcdGNhc2UgMHg4YjVlOiAvLyBTQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkNjY6IC8vIFNBTVBMRVJfRVhURVJOQUxfT0VTXG5cdFx0Y2FzZSAweDhkY2E6IC8vIElOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhkZDI6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEXG5cdFx0Y2FzZSAweDhiNjI6IC8vIFNBTVBMRVJfMkRfU0hBRE9XXG5cdFx0XHRyZXR1cm4gc2V0VmFsdWVUMUFycmF5O1xuXG5cdFx0Y2FzZSAweDhiNjA6IC8vIFNBTVBMRVJfQ1VCRVxuXHRcdGNhc2UgMHg4ZGNjOiAvLyBJTlRfU0FNUExFUl9DVUJFXG5cdFx0Y2FzZSAweDhkZDQ6IC8vIFVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkVcblx0XHRjYXNlIDB4OGRjNTogLy8gU0FNUExFUl9DVUJFX1NIQURPV1xuXHRcdFx0cmV0dXJuIHNldFZhbHVlVDZBcnJheTtcblxuXHR9XG5cbn1cblxuLy8gLS0tIFVuaWZvcm0gQ2xhc3NlcyAtLS1cblxuZnVuY3Rpb24gU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSB7XG5cblx0dGhpcy5pZCA9IGlkO1xuXHR0aGlzLmFkZHIgPSBhZGRyO1xuXHR0aGlzLmNhY2hlID0gW107XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRTaW5ndWxhclNldHRlciggYWN0aXZlSW5mby50eXBlICk7XG5cblx0Ly8gdGhpcy5wYXRoID0gYWN0aXZlSW5mby5uYW1lOyAvLyBERUJVR1xuXG59XG5cbmZ1bmN0aW9uIFB1cmVBcnJheVVuaWZvcm0oIGlkLCBhY3RpdmVJbmZvLCBhZGRyICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblx0dGhpcy5hZGRyID0gYWRkcjtcblx0dGhpcy5jYWNoZSA9IFtdO1xuXHR0aGlzLnNpemUgPSBhY3RpdmVJbmZvLnNpemU7XG5cdHRoaXMuc2V0VmFsdWUgPSBnZXRQdXJlQXJyYXlTZXR0ZXIoIGFjdGl2ZUluZm8udHlwZSApO1xuXG5cdC8vIHRoaXMucGF0aCA9IGFjdGl2ZUluZm8ubmFtZTsgLy8gREVCVUdcblxufVxuXG5QdXJlQXJyYXlVbmlmb3JtLnByb3RvdHlwZS51cGRhdGVDYWNoZSA9IGZ1bmN0aW9uICggZGF0YSApIHtcblxuXHR2YXIgY2FjaGUgPSB0aGlzLmNhY2hlO1xuXG5cdGlmICggZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJiBjYWNoZS5sZW5ndGggIT09IGRhdGEubGVuZ3RoICkge1xuXG5cdFx0dGhpcy5jYWNoZSA9IG5ldyBGbG9hdDMyQXJyYXkoIGRhdGEubGVuZ3RoICk7XG5cblx0fVxuXG5cdGNvcHlBcnJheSggY2FjaGUsIGRhdGEgKTtcblxufTtcblxuZnVuY3Rpb24gU3RydWN0dXJlZFVuaWZvcm0oIGlkICkge1xuXG5cdHRoaXMuaWQgPSBpZDtcblxuXHR0aGlzLnNlcSA9IFtdO1xuXHR0aGlzLm1hcCA9IHt9O1xuXG59XG5cblN0cnVjdHVyZWRVbmlmb3JtLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgc2VxID0gdGhpcy5zZXE7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF07XG5cdFx0dS5zZXRWYWx1ZSggZ2wsIHZhbHVlWyB1LmlkIF0sIHRleHR1cmVzICk7XG5cblx0fVxuXG59O1xuXG4vLyAtLS0gVG9wLWxldmVsIC0tLVxuXG4vLyBQYXJzZXIgLSBidWlsZHMgdXAgdGhlIHByb3BlcnR5IHRyZWUgZnJvbSB0aGUgcGF0aCBzdHJpbmdzXG5cbnZhciBSZVBhdGhQYXJ0ID0gLyhbXFx3XFxkX10rKShcXF0pPyhcXFt8XFwuKT8vZztcblxuLy8gZXh0cmFjdHNcbi8vIFx0LSB0aGUgaWRlbnRpZmllciAobWVtYmVyIG5hbWUgb3IgYXJyYXkgaW5kZXgpXG4vLyAgLSBmb2xsb3dlZCBieSBhbiBvcHRpb25hbCByaWdodCBicmFja2V0IChmb3VuZCB3aGVuIGFycmF5IGluZGV4KVxuLy8gIC0gZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgbGVmdCBicmFja2V0IG9yIGRvdCAodHlwZSBvZiBzdWJzY3JpcHQpXG4vL1xuLy8gTm90ZTogVGhlc2UgcG9ydGlvbnMgY2FuIGJlIHJlYWQgaW4gYSBub24tb3ZlcmxhcHBpbmcgZmFzaGlvbiBhbmRcbi8vIGFsbG93IHN0cmFpZ2h0Zm9yd2FyZCBwYXJzaW5nIG9mIHRoZSBoaWVyYXJjaHkgdGhhdCBXZWJHTCBlbmNvZGVzXG4vLyBpbiB0aGUgdW5pZm9ybSBuYW1lcy5cblxuZnVuY3Rpb24gYWRkVW5pZm9ybSggY29udGFpbmVyLCB1bmlmb3JtT2JqZWN0ICkge1xuXG5cdGNvbnRhaW5lci5zZXEucHVzaCggdW5pZm9ybU9iamVjdCApO1xuXHRjb250YWluZXIubWFwWyB1bmlmb3JtT2JqZWN0LmlkIF0gPSB1bmlmb3JtT2JqZWN0O1xuXG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pZm9ybSggYWN0aXZlSW5mbywgYWRkciwgY29udGFpbmVyICkge1xuXG5cdHZhciBwYXRoID0gYWN0aXZlSW5mby5uYW1lLFxuXHRcdHBhdGhMZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuXHQvLyByZXNldCBSZWdFeHAgb2JqZWN0LCBiZWNhdXNlIG9mIHRoZSBlYXJseSBleGl0IG9mIGEgcHJldmlvdXMgcnVuXG5cdFJlUGF0aFBhcnQubGFzdEluZGV4ID0gMDtcblxuXHR3aGlsZSAoIHRydWUgKSB7XG5cblx0XHR2YXIgbWF0Y2ggPSBSZVBhdGhQYXJ0LmV4ZWMoIHBhdGggKSxcblx0XHRcdG1hdGNoRW5kID0gUmVQYXRoUGFydC5sYXN0SW5kZXgsXG5cblx0XHRcdGlkID0gbWF0Y2hbIDEgXSxcblx0XHRcdGlkSXNJbmRleCA9IG1hdGNoWyAyIF0gPT09ICddJyxcblx0XHRcdHN1YnNjcmlwdCA9IG1hdGNoWyAzIF07XG5cblx0XHRpZiAoIGlkSXNJbmRleCApIGlkID0gaWQgfCAwOyAvLyBjb252ZXJ0IHRvIGludGVnZXJcblxuXHRcdGlmICggc3Vic2NyaXB0ID09PSB1bmRlZmluZWQgfHwgc3Vic2NyaXB0ID09PSAnWycgJiYgbWF0Y2hFbmQgKyAyID09PSBwYXRoTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBiYXJlIG5hbWUgb3IgXCJwdXJlXCIgYm90dG9tLWxldmVsIGFycmF5IFwiWzBdXCIgc3VmZml4XG5cblx0XHRcdGFkZFVuaWZvcm0oIGNvbnRhaW5lciwgc3Vic2NyaXB0ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRuZXcgU2luZ2xlVW5pZm9ybSggaWQsIGFjdGl2ZUluZm8sIGFkZHIgKSA6XG5cdFx0XHRcdG5ldyBQdXJlQXJyYXlVbmlmb3JtKCBpZCwgYWN0aXZlSW5mbywgYWRkciApICk7XG5cblx0XHRcdGJyZWFrO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gc3RlcCBpbnRvIGlubmVyIG5vZGUgLyBjcmVhdGUgaXQgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0XG5cblx0XHRcdHZhciBtYXAgPSBjb250YWluZXIubWFwLCBuZXh0ID0gbWFwWyBpZCBdO1xuXG5cdFx0XHRpZiAoIG5leHQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRuZXh0ID0gbmV3IFN0cnVjdHVyZWRVbmlmb3JtKCBpZCApO1xuXHRcdFx0XHRhZGRVbmlmb3JtKCBjb250YWluZXIsIG5leHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjb250YWluZXIgPSBuZXh0O1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG4vLyBSb290IENvbnRhaW5lclxuXG5mdW5jdGlvbiBXZWJHTFVuaWZvcm1zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHR0aGlzLnNlcSA9IFtdO1xuXHR0aGlzLm1hcCA9IHt9O1xuXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MTggKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBuOyArKyBpICkge1xuXG5cdFx0dmFyIGluZm8gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKCBwcm9ncmFtLCBpICksXG5cdFx0XHRhZGRyID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKCBwcm9ncmFtLCBpbmZvLm5hbWUgKTtcblxuXHRcdHBhcnNlVW5pZm9ybSggaW5mbywgYWRkciwgdGhpcyApO1xuXG5cdH1cblxufVxuXG5XZWJHTFVuaWZvcm1zLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICggZ2wsIG5hbWUsIHZhbHVlLCB0ZXh0dXJlcyApIHtcblxuXHR2YXIgdSA9IHRoaXMubWFwWyBuYW1lIF07XG5cblx0aWYgKCB1ICE9PSB1bmRlZmluZWQgKSB1LnNldFZhbHVlKCBnbCwgdmFsdWUsIHRleHR1cmVzICk7XG5cbn07XG5cbldlYkdMVW5pZm9ybXMucHJvdG90eXBlLnNldE9wdGlvbmFsID0gZnVuY3Rpb24gKCBnbCwgb2JqZWN0LCBuYW1lICkge1xuXG5cdHZhciB2ID0gb2JqZWN0WyBuYW1lIF07XG5cblx0aWYgKCB2ICE9PSB1bmRlZmluZWQgKSB0aGlzLnNldFZhbHVlKCBnbCwgbmFtZSwgdiApO1xuXG59O1xuXG5cbi8vIFN0YXRpYyBpbnRlcmZhY2VcblxuV2ViR0xVbmlmb3Jtcy51cGxvYWQgPSBmdW5jdGlvbiAoIGdsLCBzZXEsIHZhbHVlcywgdGV4dHVyZXMgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gc2VxLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdHZhciB1ID0gc2VxWyBpIF0sXG5cdFx0XHR2ID0gdmFsdWVzWyB1LmlkIF07XG5cblx0XHRpZiAoIHYubmVlZHNVcGRhdGUgIT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBub3RlOiBhbHdheXMgdXBkYXRpbmcgd2hlbiAubmVlZHNVcGRhdGUgaXMgdW5kZWZpbmVkXG5cdFx0XHR1LnNldFZhbHVlKCBnbCwgdi52YWx1ZSwgdGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHR9XG5cbn07XG5cbldlYkdMVW5pZm9ybXMuc2VxV2l0aFZhbHVlID0gZnVuY3Rpb24gKCBzZXEsIHZhbHVlcyApIHtcblxuXHR2YXIgciA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbiA9IHNlcS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHR2YXIgdSA9IHNlcVsgaSBdO1xuXHRcdGlmICggdS5pZCBpbiB2YWx1ZXMgKSByLnB1c2goIHUgKTtcblxuXHR9XG5cblx0cmV0dXJuIHI7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFNoYWRlciggZ2wsIHR5cGUsIHN0cmluZyApIHtcblxuXHR2YXIgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKCB0eXBlICk7XG5cblx0Z2wuc2hhZGVyU291cmNlKCBzaGFkZXIsIHN0cmluZyApO1xuXHRnbC5jb21waWxlU2hhZGVyKCBzaGFkZXIgKTtcblxuXHRyZXR1cm4gc2hhZGVyO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgcHJvZ3JhbUlkQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBhZGRMaW5lTnVtYmVycyggc3RyaW5nICkge1xuXG5cdHZhciBsaW5lcyA9IHN0cmluZy5zcGxpdCggJ1xcbicgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRsaW5lc1sgaSBdID0gKCBpICsgMSApICsgJzogJyArIGxpbmVzWyBpIF07XG5cblx0fVxuXG5cdHJldHVybiBsaW5lcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKSB7XG5cblx0c3dpdGNoICggZW5jb2RpbmcgKSB7XG5cblx0XHRjYXNlIExpbmVhckVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ0xpbmVhcicsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBzUkdCRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnc1JHQicsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBSR0JFRW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnUkdCRScsICcoIHZhbHVlICknIF07XG5cdFx0Y2FzZSBSR0JNN0VuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ1JHQk0nLCAnKCB2YWx1ZSwgNy4wICknIF07XG5cdFx0Y2FzZSBSR0JNMTZFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JNJywgJyggdmFsdWUsIDE2LjAgKScgXTtcblx0XHRjYXNlIFJHQkRFbmNvZGluZzpcblx0XHRcdHJldHVybiBbICdSR0JEJywgJyggdmFsdWUsIDI1Ni4wICknIF07XG5cdFx0Y2FzZSBHYW1tYUVuY29kaW5nOlxuXHRcdFx0cmV0dXJuIFsgJ0dhbW1hJywgJyggdmFsdWUsIGZsb2F0KCBHQU1NQV9GQUNUT1IgKSApJyBdO1xuXHRcdGNhc2UgTG9nTHV2RW5jb2Rpbmc6XG5cdFx0XHRyZXR1cm4gWyAnTG9nTHV2JywgJyggdmFsdWUgKScgXTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAndW5zdXBwb3J0ZWQgZW5jb2Rpbmc6ICcgKyBlbmNvZGluZyApO1xuXG5cdH1cblxufVxuXG5mdW5jdGlvbiBnZXRTaGFkZXJFcnJvcnMoIGdsLCBzaGFkZXIsIHR5cGUgKSB7XG5cblx0dmFyIHN0YXR1cyA9IGdsLmdldFNoYWRlclBhcmFtZXRlciggc2hhZGVyLCAzNTcxMyApO1xuXHR2YXIgbG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyggc2hhZGVyICkudHJpbSgpO1xuXG5cdGlmICggc3RhdHVzICYmIGxvZyA9PT0gJycgKSByZXR1cm4gJyc7XG5cblx0Ly8gLS1lbmFibGUtcHJpdmlsZWdlZC13ZWJnbC1leHRlbnNpb25cblx0Ly8gY29uc29sZS5sb2coICcqKicgKyB0eXBlICsgJyoqJywgZ2wuZ2V0RXh0ZW5zaW9uKCAnV0VCR0xfZGVidWdfc2hhZGVycycgKS5nZXRUcmFuc2xhdGVkU2hhZGVyU291cmNlKCBzaGFkZXIgKSApO1xuXG5cdHZhciBzb3VyY2UgPSBnbC5nZXRTaGFkZXJTb3VyY2UoIHNoYWRlciApO1xuXG5cdHJldHVybiAnVEhSRUUuV2ViR0xTaGFkZXI6IGdsLmdldFNoYWRlckluZm9Mb2coKSAnICsgdHlwZSArICdcXG4nICsgbG9nICsgYWRkTGluZU51bWJlcnMoIHNvdXJjZSApO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggZnVuY3Rpb25OYW1lLCBlbmNvZGluZyApIHtcblxuXHR2YXIgY29tcG9uZW50cyA9IGdldEVuY29kaW5nQ29tcG9uZW50cyggZW5jb2RpbmcgKTtcblx0cmV0dXJuICd2ZWM0ICcgKyBmdW5jdGlvbk5hbWUgKyAnKCB2ZWM0IHZhbHVlICkgeyByZXR1cm4gJyArIGNvbXBvbmVudHNbIDAgXSArICdUb0xpbmVhcicgKyBjb21wb25lbnRzWyAxIF0gKyAnOyB9JztcblxufVxuXG5mdW5jdGlvbiBnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgZW5jb2RpbmcgKSB7XG5cblx0dmFyIGNvbXBvbmVudHMgPSBnZXRFbmNvZGluZ0NvbXBvbmVudHMoIGVuY29kaW5nICk7XG5cdHJldHVybiAndmVjNCAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjNCB2YWx1ZSApIHsgcmV0dXJuIExpbmVhclRvJyArIGNvbXBvbmVudHNbIDAgXSArIGNvbXBvbmVudHNbIDEgXSArICc7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRvbmVNYXBwaW5nRnVuY3Rpb24oIGZ1bmN0aW9uTmFtZSwgdG9uZU1hcHBpbmcgKSB7XG5cblx0dmFyIHRvbmVNYXBwaW5nTmFtZTtcblxuXHRzd2l0Y2ggKCB0b25lTWFwcGluZyApIHtcblxuXHRcdGNhc2UgTGluZWFyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnTGluZWFyJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBSZWluaGFyZFRvbmVNYXBwaW5nOlxuXHRcdFx0dG9uZU1hcHBpbmdOYW1lID0gJ1JlaW5oYXJkJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBVbmNoYXJ0ZWQyVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnVW5jaGFydGVkMic7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgQ2luZW9uVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnT3B0aW1pemVkQ2luZW9uJztcblx0XHRcdGJyZWFrO1xuXG5cdFx0Y2FzZSBBQ0VTRmlsbWljVG9uZU1hcHBpbmc6XG5cdFx0XHR0b25lTWFwcGluZ05hbWUgPSAnQUNFU0ZpbG1pYyc7XG5cdFx0XHRicmVhaztcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICd1bnN1cHBvcnRlZCB0b25lTWFwcGluZzogJyArIHRvbmVNYXBwaW5nICk7XG5cblx0fVxuXG5cdHJldHVybiAndmVjMyAnICsgZnVuY3Rpb25OYW1lICsgJyggdmVjMyBjb2xvciApIHsgcmV0dXJuICcgKyB0b25lTWFwcGluZ05hbWUgKyAnVG9uZU1hcHBpbmcoIGNvbG9yICk7IH0nO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRXh0ZW5zaW9ucyggcGFyYW1ldGVycyApIHtcblxuXHR2YXIgY2h1bmtzID0gW1xuXHRcdCggcGFyYW1ldGVycy5leHRlbnNpb25EZXJpdmF0aXZlcyB8fCBwYXJhbWV0ZXJzLmVudk1hcEN1YmVVViB8fCBwYXJhbWV0ZXJzLmJ1bXBNYXAgfHwgcGFyYW1ldGVycy50YW5nZW50U3BhY2VOb3JtYWxNYXAgfHwgcGFyYW1ldGVycy5jbGVhcmNvYXROb3JtYWxNYXAgfHwgcGFyYW1ldGVycy5mbGF0U2hhZGluZyB8fCBwYXJhbWV0ZXJzLnNoYWRlcklEID09PSAncGh5c2ljYWwnICkgPyAnI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGUnIDogJycsXG5cdFx0KCBwYXJhbWV0ZXJzLmV4dGVuc2lvbkZyYWdEZXB0aCB8fCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgKSAmJiBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uRnJhZ0RlcHRoID8gJyNleHRlbnNpb24gR0xfRVhUX2ZyYWdfZGVwdGggOiBlbmFibGUnIDogJycsXG5cdFx0KCBwYXJhbWV0ZXJzLmV4dGVuc2lvbkRyYXdCdWZmZXJzICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25EcmF3QnVmZmVycyApID8gJyNleHRlbnNpb24gR0xfRVhUX2RyYXdfYnVmZmVycyA6IHJlcXVpcmUnIDogJycsXG5cdFx0KCBwYXJhbWV0ZXJzLmV4dGVuc2lvblNoYWRlclRleHR1cmVMT0QgfHwgcGFyYW1ldGVycy5lbnZNYXAgKSAmJiBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxvZCA/ICcjZXh0ZW5zaW9uIEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QgOiBlbmFibGUnIDogJydcblx0XTtcblxuXHRyZXR1cm4gY2h1bmtzLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZURlZmluZXMoIGRlZmluZXMgKSB7XG5cblx0dmFyIGNodW5rcyA9IFtdO1xuXG5cdGZvciAoIHZhciBuYW1lIGluIGRlZmluZXMgKSB7XG5cblx0XHR2YXIgdmFsdWUgPSBkZWZpbmVzWyBuYW1lIF07XG5cblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIGNvbnRpbnVlO1xuXG5cdFx0Y2h1bmtzLnB1c2goICcjZGVmaW5lICcgKyBuYW1lICsgJyAnICsgdmFsdWUgKTtcblxuXHR9XG5cblx0cmV0dXJuIGNodW5rcy5qb2luKCAnXFxuJyApO1xuXG59XG5cbmZ1bmN0aW9uIGZldGNoQXR0cmlidXRlTG9jYXRpb25zKCBnbCwgcHJvZ3JhbSApIHtcblxuXHR2YXIgYXR0cmlidXRlcyA9IHt9O1xuXG5cdHZhciBuID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlciggcHJvZ3JhbSwgMzU3MjEgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBuOyBpICsrICkge1xuXG5cdFx0dmFyIGluZm8gPSBnbC5nZXRBY3RpdmVBdHRyaWIoIHByb2dyYW0sIGkgKTtcblx0XHR2YXIgbmFtZSA9IGluZm8ubmFtZTtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBBQ1RJVkUgVkVSVEVYIEFUVFJJQlVURTonLCBuYW1lLCBpICk7XG5cblx0XHRhdHRyaWJ1dGVzWyBuYW1lIF0gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgbmFtZSApO1xuXG5cdH1cblxuXHRyZXR1cm4gYXR0cmlidXRlcztcblxufVxuXG5mdW5jdGlvbiBmaWx0ZXJFbXB0eUxpbmUoIHN0cmluZyApIHtcblxuXHRyZXR1cm4gc3RyaW5nICE9PSAnJztcblxufVxuXG5mdW5jdGlvbiByZXBsYWNlTGlnaHROdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0RJUl9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1EaXJMaWdodHMgKVxuXHRcdC5yZXBsYWNlKCAvTlVNX1NQT1RfTElHSFRTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUkVDVF9BUkVBX0xJR0hUUy9nLCBwYXJhbWV0ZXJzLm51bVJlY3RBcmVhTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9QT0lOVF9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1Qb2ludExpZ2h0cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fSEVNSV9MSUdIVFMvZywgcGFyYW1ldGVycy5udW1IZW1pTGlnaHRzIClcblx0XHQucmVwbGFjZSggL05VTV9ESVJfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bURpckxpZ2h0U2hhZG93cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fU1BPVF9MSUdIVF9TSEFET1dTL2csIHBhcmFtZXRlcnMubnVtU3BvdExpZ2h0U2hhZG93cyApXG5cdFx0LnJlcGxhY2UoIC9OVU1fUE9JTlRfTElHSFRfU0hBRE9XUy9nLCBwYXJhbWV0ZXJzLm51bVBvaW50TGlnaHRTaGFkb3dzICk7XG5cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCBzdHJpbmcsIHBhcmFtZXRlcnMgKSB7XG5cblx0cmV0dXJuIHN0cmluZ1xuXHRcdC5yZXBsYWNlKCAvTlVNX0NMSVBQSU5HX1BMQU5FUy9nLCBwYXJhbWV0ZXJzLm51bUNsaXBwaW5nUGxhbmVzIClcblx0XHQucmVwbGFjZSggL1VOSU9OX0NMSVBQSU5HX1BMQU5FUy9nLCAoIHBhcmFtZXRlcnMubnVtQ2xpcHBpbmdQbGFuZXMgLSBwYXJhbWV0ZXJzLm51bUNsaXBJbnRlcnNlY3Rpb24gKSApO1xuXG59XG5cbi8vIFJlc29sdmUgSW5jbHVkZXNcblxudmFyIGluY2x1ZGVQYXR0ZXJuID0gL15bIFxcdF0qI2luY2x1ZGUgKzwoW1xcd1xcZC4vXSspPi9nbTtcblxuZnVuY3Rpb24gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKSB7XG5cblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBpbmNsdWRlUGF0dGVybiwgaW5jbHVkZVJlcGxhY2VyICk7XG5cbn1cblxuZnVuY3Rpb24gaW5jbHVkZVJlcGxhY2VyKCBtYXRjaCwgaW5jbHVkZSApIHtcblxuXHR2YXIgc3RyaW5nID0gU2hhZGVyQ2h1bmtbIGluY2x1ZGUgXTtcblxuXHRpZiAoIHN0cmluZyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhyb3cgbmV3IEVycm9yKCAnQ2FuIG5vdCByZXNvbHZlICNpbmNsdWRlIDwnICsgaW5jbHVkZSArICc+JyApO1xuXG5cdH1cblxuXHRyZXR1cm4gcmVzb2x2ZUluY2x1ZGVzKCBzdHJpbmcgKTtcblxufVxuXG4vLyBVbnJvbGwgTG9vcHNcblxudmFyIGRlcHJlY2F0ZWRVbnJvbGxMb29wUGF0dGVybiA9IC8jcHJhZ21hIHVucm9sbF9sb29wW1xcc10rP2ZvciBcXCggaW50IGkgXFw9IChcXGQrKVxcOyBpIDwgKFxcZCspXFw7IGkgXFwrXFwrIFxcKSBcXHsoW1xcc1xcU10rPykoPz1cXH0pXFx9L2c7XG52YXIgdW5yb2xsTG9vcFBhdHRlcm4gPSAvI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydFtcXHNdKz9mb3IgXFwoIGludCBpIFxcPSAoXFxkKylcXDsgaSA8IChcXGQrKVxcOyBpIFxcK1xcKyBcXCkgXFx7KFtcXHNcXFNdKz8pKD89XFx9KVxcfVtcXHNdKz8jcHJhZ21hIHVucm9sbF9sb29wX2VuZC9nO1xuXG5mdW5jdGlvbiB1bnJvbGxMb29wcyggc3RyaW5nICkge1xuXG5cdHJldHVybiBzdHJpbmdcblx0XHQucmVwbGFjZSggdW5yb2xsTG9vcFBhdHRlcm4sIGxvb3BSZXBsYWNlciApXG5cdFx0LnJlcGxhY2UoIGRlcHJlY2F0ZWRVbnJvbGxMb29wUGF0dGVybiwgZGVwcmVjYXRlZExvb3BSZXBsYWNlciApO1xuXG59XG5cbmZ1bmN0aW9uIGRlcHJlY2F0ZWRMb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1dlYkdMUHJvZ3JhbTogI3ByYWdtYSB1bnJvbGxfbG9vcCBzaGFkZXIgc3ludGF4IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgI3ByYWdtYSB1bnJvbGxfbG9vcF9zdGFydCBzeW50YXggaW5zdGVhZC4nICk7XG5cdHJldHVybiBsb29wUmVwbGFjZXIoIG1hdGNoLCBzdGFydCwgZW5kLCBzbmlwcGV0ICk7XG5cbn1cblxuZnVuY3Rpb24gbG9vcFJlcGxhY2VyKCBtYXRjaCwgc3RhcnQsIGVuZCwgc25pcHBldCApIHtcblxuXHR2YXIgc3RyaW5nID0gJyc7XG5cblx0Zm9yICggdmFyIGkgPSBwYXJzZUludCggc3RhcnQgKTsgaSA8IHBhcnNlSW50KCBlbmQgKTsgaSArKyApIHtcblxuXHRcdHN0cmluZyArPSBzbmlwcGV0XG5cdFx0XHQucmVwbGFjZSggL1xcWyBpIFxcXS9nLCAnWyAnICsgaSArICcgXScgKVxuXHRcdFx0LnJlcGxhY2UoIC9VTlJPTExFRF9MT09QX0lOREVYL2csIGkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVByZWNpc2lvbiggcGFyYW1ldGVycyApIHtcblxuXHR2YXIgcHJlY2lzaW9uc3RyaW5nID0gXCJwcmVjaXNpb24gXCIgKyBwYXJhbWV0ZXJzLnByZWNpc2lvbiArIFwiIGZsb2F0O1xcbnByZWNpc2lvbiBcIiArIHBhcmFtZXRlcnMucHJlY2lzaW9uICsgXCIgaW50O1wiO1xuXG5cdGlmICggcGFyYW1ldGVycy5wcmVjaXNpb24gPT09IFwiaGlnaHBcIiApIHtcblxuXHRcdHByZWNpc2lvbnN0cmluZyArPSBcIlxcbiNkZWZpbmUgSElHSF9QUkVDSVNJT05cIjtcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gXCJtZWRpdW1wXCIgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gXCJcXG4jZGVmaW5lIE1FRElVTV9QUkVDSVNJT05cIjtcblxuXHR9IGVsc2UgaWYgKCBwYXJhbWV0ZXJzLnByZWNpc2lvbiA9PT0gXCJsb3dwXCIgKSB7XG5cblx0XHRwcmVjaXNpb25zdHJpbmcgKz0gXCJcXG4jZGVmaW5lIExPV19QUkVDSVNJT05cIjtcblxuXHR9XG5cblx0cmV0dXJuIHByZWNpc2lvbnN0cmluZztcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVNoYWRvd01hcFR5cGVEZWZpbmUoIHBhcmFtZXRlcnMgKSB7XG5cblx0dmFyIHNoYWRvd01hcFR5cGVEZWZpbmUgPSAnU0hBRE9XTUFQX1RZUEVfQkFTSUMnO1xuXG5cdGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1BDRic7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBQQ0ZTb2Z0U2hhZG93TWFwICkge1xuXG5cdFx0c2hhZG93TWFwVHlwZURlZmluZSA9ICdTSEFET1dNQVBfVFlQRV9QQ0ZfU09GVCc7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkb3dNYXBUeXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRzaGFkb3dNYXBUeXBlRGVmaW5lID0gJ1NIQURPV01BUF9UWVBFX1ZTTSc7XG5cblx0fVxuXG5cdHJldHVybiBzaGFkb3dNYXBUeXBlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHR2YXIgZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9DVUJFJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVJlZnJhY3Rpb25NYXBwaW5nOlxuXHRcdFx0XHRlbnZNYXBUeXBlRGVmaW5lID0gJ0VOVk1BUF9UWVBFX0NVQkUnO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBDdWJlVVZSZWZsZWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfQ1VCRV9VVic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlIEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nOlxuXHRcdFx0Y2FzZSBFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdFx0ZW52TWFwVHlwZURlZmluZSA9ICdFTlZNQVBfVFlQRV9FUVVJUkVDJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcFR5cGVEZWZpbmUgPSAnRU5WTUFQX1RZUEVfU1BIRVJFJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBUeXBlRGVmaW5lO1xuXG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApIHtcblxuXHR2YXIgZW52TWFwTW9kZURlZmluZSA9ICdFTlZNQVBfTU9ERV9SRUZMRUNUSU9OJztcblxuXHRpZiAoIHBhcmFtZXRlcnMuZW52TWFwICkge1xuXG5cdFx0c3dpdGNoICggcGFyYW1ldGVycy5lbnZNYXBNb2RlICkge1xuXG5cdFx0XHRjYXNlIEN1YmVSZWZyYWN0aW9uTWFwcGluZzpcblx0XHRcdGNhc2UgRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmc6XG5cdFx0XHRcdGVudk1hcE1vZGVEZWZpbmUgPSAnRU5WTUFQX01PREVfUkVGUkFDVElPTic7XG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4gZW52TWFwTW9kZURlZmluZTtcblxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICkge1xuXG5cdHZhciBlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTk9ORSc7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmVudk1hcCApIHtcblxuXHRcdHN3aXRjaCAoIHBhcmFtZXRlcnMuY29tYmluZSApIHtcblxuXHRcdFx0Y2FzZSBNdWx0aXBseU9wZXJhdGlvbjpcblx0XHRcdFx0ZW52TWFwQmxlbmRpbmdEZWZpbmUgPSAnRU5WTUFQX0JMRU5ESU5HX01VTFRJUExZJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgTWl4T3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfTUlYJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgQWRkT3BlcmF0aW9uOlxuXHRcdFx0XHRlbnZNYXBCbGVuZGluZ0RlZmluZSA9ICdFTlZNQVBfQkxFTkRJTkdfQUREJztcblx0XHRcdFx0YnJlYWs7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiBlbnZNYXBCbGVuZGluZ0RlZmluZTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFByb2dyYW0oIHJlbmRlcmVyLCBjYWNoZUtleSwgcGFyYW1ldGVycyApIHtcblxuXHR2YXIgZ2wgPSByZW5kZXJlci5nZXRDb250ZXh0KCk7XG5cblx0dmFyIGRlZmluZXMgPSBwYXJhbWV0ZXJzLmRlZmluZXM7XG5cblx0dmFyIHZlcnRleFNoYWRlciA9IHBhcmFtZXRlcnMudmVydGV4U2hhZGVyO1xuXHR2YXIgZnJhZ21lbnRTaGFkZXIgPSBwYXJhbWV0ZXJzLmZyYWdtZW50U2hhZGVyO1xuXHR2YXIgc2hhZG93TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlU2hhZG93TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHR2YXIgZW52TWFwVHlwZURlZmluZSA9IGdlbmVyYXRlRW52TWFwVHlwZURlZmluZSggcGFyYW1ldGVycyApO1xuXHR2YXIgZW52TWFwTW9kZURlZmluZSA9IGdlbmVyYXRlRW52TWFwTW9kZURlZmluZSggcGFyYW1ldGVycyApO1xuXHR2YXIgZW52TWFwQmxlbmRpbmdEZWZpbmUgPSBnZW5lcmF0ZUVudk1hcEJsZW5kaW5nRGVmaW5lKCBwYXJhbWV0ZXJzICk7XG5cblxuXHR2YXIgZ2FtbWFGYWN0b3JEZWZpbmUgPSAoIHJlbmRlcmVyLmdhbW1hRmFjdG9yID4gMCApID8gcmVuZGVyZXIuZ2FtbWFGYWN0b3IgOiAxLjA7XG5cblx0dmFyIGN1c3RvbUV4dGVuc2lvbnMgPSBwYXJhbWV0ZXJzLmlzV2ViR0wyID8gJycgOiBnZW5lcmF0ZUV4dGVuc2lvbnMoIHBhcmFtZXRlcnMgKTtcblxuXHR2YXIgY3VzdG9tRGVmaW5lcyA9IGdlbmVyYXRlRGVmaW5lcyggZGVmaW5lcyApO1xuXG5cdHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXG5cdHZhciBwcmVmaXhWZXJ0ZXgsIHByZWZpeEZyYWdtZW50O1xuXG5cdGlmICggcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXG5cdFx0XHRjdXN0b21EZWZpbmVzXG5cblx0XHRdLmZpbHRlciggZmlsdGVyRW1wdHlMaW5lICkuam9pbiggJ1xcbicgKTtcblxuXHRcdGlmICggcHJlZml4VmVydGV4Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeFZlcnRleCArPSAnXFxuJztcblxuXHRcdH1cblxuXHRcdHByZWZpeEZyYWdtZW50ID0gW1xuXG5cdFx0XHRjdXN0b21FeHRlbnNpb25zLFxuXHRcdFx0Y3VzdG9tRGVmaW5lc1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRpZiAoIHByZWZpeEZyYWdtZW50Lmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHByZWZpeEZyYWdtZW50ICs9ICdcXG4nO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRwcmVmaXhWZXJ0ZXggPSBbXG5cblx0XHRcdGdlbmVyYXRlUHJlY2lzaW9uKCBwYXJhbWV0ZXJzICksXG5cblx0XHRcdCcjZGVmaW5lIFNIQURFUl9OQU1FICcgKyBwYXJhbWV0ZXJzLnNoYWRlck5hbWUsXG5cblx0XHRcdGN1c3RvbURlZmluZXMsXG5cblx0XHRcdHBhcmFtZXRlcnMuaW5zdGFuY2luZyA/ICcjZGVmaW5lIFVTRV9JTlNUQU5DSU5HJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zdXBwb3J0c1ZlcnRleFRleHR1cmVzID8gJyNkZWZpbmUgVkVSVEVYX1RFWFRVUkVTJyA6ICcnLFxuXG5cdFx0XHQnI2RlZmluZSBHQU1NQV9GQUNUT1IgJyArIGdhbW1hRmFjdG9yRGVmaW5lLFxuXG5cdFx0XHQnI2RlZmluZSBNQVhfQk9ORVMgJyArIHBhcmFtZXRlcnMubWF4Qm9uZXMsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nICkgPyAnI2RlZmluZSBVU0VfRk9HJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLnVzZUZvZyAmJiBwYXJhbWV0ZXJzLmZvZ0V4cDIgKSA/ICcjZGVmaW5lIEZPR19FWFAyJyA6ICcnLFxuXG5cdFx0XHRwYXJhbWV0ZXJzLm1hcCA/ICcjZGVmaW5lIFVTRV9NQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lIFVTRV9FTlZNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVudk1hcCA/ICcjZGVmaW5lICcgKyBlbnZNYXBNb2RlRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgVEFOR0VOVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgPyAnI2RlZmluZSBVU0VfQ0xFQVJDT0FUX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Tm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9OT1JNQUxNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmRpc3BsYWNlbWVudE1hcCAmJiBwYXJhbWV0ZXJzLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMgPyAnI2RlZmluZSBVU0VfRElTUExBQ0VNRU5UTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdnMgPyAnI2RlZmluZSBVU0VfVVYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnV2c1ZlcnRleE9ubHkgPyAnI2RlZmluZSBVVlNfVkVSVEVYX09OTFknIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5za2lubmluZyA/ICcjZGVmaW5lIFVTRV9TS0lOTklORycgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudXNlVmVydGV4VGV4dHVyZSA/ICcjZGVmaW5lIEJPTkVfVEVYVFVSRScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPyAnI2RlZmluZSBVU0VfTU9SUEhUQVJHRVRTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tb3JwaE5vcm1hbHMgJiYgcGFyYW1ldGVycy5mbGF0U2hhZGluZyA9PT0gZmFsc2UgPyAnI2RlZmluZSBVU0VfTU9SUEhOT1JNQUxTJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2l6ZUF0dGVudWF0aW9uID8gJyNkZWZpbmUgVVNFX1NJWkVBVFRFTlVBVElPTicgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLmxvZ2FyaXRobWljRGVwdGhCdWZmZXIgJiYgcGFyYW1ldGVycy5yZW5kZXJlckV4dGVuc2lvbkZyYWdEZXB0aCApID8gJyNkZWZpbmUgVVNFX0xPR0RFUFRIQlVGX0VYVCcgOiAnJyxcblxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCBtb2RlbFZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gbWF0NCB2aWV3TWF0cml4OycsXG5cdFx0XHQndW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDsnLFxuXHRcdFx0J3VuaWZvcm0gdmVjMyBjYW1lcmFQb3NpdGlvbjsnLFxuXHRcdFx0J3VuaWZvcm0gYm9vbCBpc09ydGhvZ3JhcGhpYzsnLFxuXG5cdFx0XHQnI2lmZGVmIFVTRV9JTlNUQU5DSU5HJyxcblxuXHRcdFx0JyBhdHRyaWJ1dGUgbWF0NCBpbnN0YW5jZU1hdHJpeDsnLFxuXG5cdFx0XHQnI2VuZGlmJyxcblxuXHRcdFx0J2F0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzMgbm9ybWFsOycsXG5cdFx0XHQnYXR0cmlidXRlIHZlYzIgdXY7JyxcblxuXHRcdFx0JyNpZmRlZiBVU0VfVEFOR0VOVCcsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWM0IHRhbmdlbnQ7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX0NPTE9SJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgY29sb3I7JyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX01PUlBIVEFSR0VUUycsXG5cblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MDsnLFxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQxOycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDI7Jyxcblx0XHRcdCdcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0MzsnLFxuXG5cdFx0XHQnXHQjaWZkZWYgVVNFX01PUlBITk9STUFMUycsXG5cblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwwOycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoTm9ybWFsMTsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaE5vcm1hbDI7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhOb3JtYWwzOycsXG5cblx0XHRcdCdcdCNlbHNlJyxcblxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDQ7Jyxcblx0XHRcdCdcdFx0YXR0cmlidXRlIHZlYzMgbW9ycGhUYXJnZXQ1OycsXG5cdFx0XHQnXHRcdGF0dHJpYnV0ZSB2ZWMzIG1vcnBoVGFyZ2V0NjsnLFxuXHRcdFx0J1x0XHRhdHRyaWJ1dGUgdmVjMyBtb3JwaFRhcmdldDc7JyxcblxuXHRcdFx0J1x0I2VuZGlmJyxcblxuXHRcdFx0JyNlbmRpZicsXG5cblx0XHRcdCcjaWZkZWYgVVNFX1NLSU5OSU5HJyxcblxuXHRcdFx0J1x0YXR0cmlidXRlIHZlYzQgc2tpbkluZGV4OycsXG5cdFx0XHQnXHRhdHRyaWJ1dGUgdmVjNCBza2luV2VpZ2h0OycsXG5cblx0XHRcdCcjZW5kaWYnLFxuXG5cdFx0XHQnXFxuJ1xuXG5cdFx0XS5maWx0ZXIoIGZpbHRlckVtcHR5TGluZSApLmpvaW4oICdcXG4nICk7XG5cblx0XHRwcmVmaXhGcmFnbWVudCA9IFtcblxuXHRcdFx0Y3VzdG9tRXh0ZW5zaW9ucyxcblxuXHRcdFx0Z2VuZXJhdGVQcmVjaXNpb24oIHBhcmFtZXRlcnMgKSxcblxuXHRcdFx0JyNkZWZpbmUgU0hBREVSX05BTUUgJyArIHBhcmFtZXRlcnMuc2hhZGVyTmFtZSxcblxuXHRcdFx0Y3VzdG9tRGVmaW5lcyxcblxuXHRcdFx0cGFyYW1ldGVycy5hbHBoYVRlc3QgPyAnI2RlZmluZSBBTFBIQVRFU1QgJyArIHBhcmFtZXRlcnMuYWxwaGFUZXN0ICsgKCBwYXJhbWV0ZXJzLmFscGhhVGVzdCAlIDEgPyAnJyA6ICcuMCcgKSA6ICcnLCAvLyBhZGQgJy4wJyBpZiBpbnRlZ2VyXG5cblx0XHRcdCcjZGVmaW5lIEdBTU1BX0ZBQ1RPUiAnICsgZ2FtbWFGYWN0b3JEZWZpbmUsXG5cblx0XHRcdCggcGFyYW1ldGVycy51c2VGb2cgJiYgcGFyYW1ldGVycy5mb2cgKSA/ICcjZGVmaW5lIFVTRV9GT0cnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudXNlRm9nICYmIHBhcmFtZXRlcnMuZm9nRXhwMiApID8gJyNkZWZpbmUgRk9HX0VYUDInIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubWFwID8gJyNkZWZpbmUgVVNFX01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWF0Y2FwID8gJyNkZWZpbmUgVVNFX01BVENBUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgVVNFX0VOVk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcFR5cGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcE1vZGVEZWZpbmUgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwID8gJyNkZWZpbmUgJyArIGVudk1hcEJsZW5kaW5nRGVmaW5lIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmxpZ2h0TWFwID8gJyNkZWZpbmUgVVNFX0xJR0hUTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5hb01hcCA/ICcjZGVmaW5lIFVTRV9BT01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW1pc3NpdmVNYXAgPyAnI2RlZmluZSBVU0VfRU1JU1NJVkVNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmJ1bXBNYXAgPyAnI2RlZmluZSBVU0VfQlVNUE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubm9ybWFsTWFwID8gJyNkZWZpbmUgVVNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5ub3JtYWxNYXAgJiYgcGFyYW1ldGVycy5vYmplY3RTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgT0JKRUNUU1BBQ0VfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0KCBwYXJhbWV0ZXJzLm5vcm1hbE1hcCAmJiBwYXJhbWV0ZXJzLnRhbmdlbnRTcGFjZU5vcm1hbE1hcCApID8gJyNkZWZpbmUgVEFOR0VOVFNQQUNFX05PUk1BTE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0TWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVE1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX0NMRUFSQ09BVF9ST1VHSE5FU1NNQVAnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmNsZWFyY29hdE5vcm1hbE1hcCA/ICcjZGVmaW5lIFVTRV9DTEVBUkNPQVRfTk9STUFMTUFQJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5zcGVjdWxhck1hcCA/ICcjZGVmaW5lIFVTRV9TUEVDVUxBUk1BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMucm91Z2huZXNzTWFwID8gJyNkZWZpbmUgVVNFX1JPVUdITkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMubWV0YWxuZXNzTWFwID8gJyNkZWZpbmUgVVNFX01FVEFMTkVTU01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuYWxwaGFNYXAgPyAnI2RlZmluZSBVU0VfQUxQSEFNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuc2hlZW4gPyAnI2RlZmluZSBVU0VfU0hFRU4nIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMudmVydGV4VGFuZ2VudHMgPyAnI2RlZmluZSBVU0VfVEFOR0VOVCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMudmVydGV4Q29sb3JzID8gJyNkZWZpbmUgVVNFX0NPTE9SJyA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy52ZXJ0ZXhVdnMgPyAnI2RlZmluZSBVU0VfVVYnIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLnV2c1ZlcnRleE9ubHkgPyAnI2RlZmluZSBVVlNfVkVSVEVYX09OTFknIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZ3JhZGllbnRNYXAgPyAnI2RlZmluZSBVU0VfR1JBRElFTlRNQVAnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZmxhdFNoYWRpbmcgPyAnI2RlZmluZSBGTEFUX1NIQURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kb3VibGVTaWRlZCA/ICcjZGVmaW5lIERPVUJMRV9TSURFRCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZmxpcFNpZGVkID8gJyNkZWZpbmUgRkxJUF9TSURFRCcgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5zaGFkb3dNYXBFbmFibGVkID8gJyNkZWZpbmUgVVNFX1NIQURPV01BUCcgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuc2hhZG93TWFwRW5hYmxlZCA/ICcjZGVmaW5lICcgKyBzaGFkb3dNYXBUeXBlRGVmaW5lIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMucHJlbXVsdGlwbGllZEFscGhhID8gJyNkZWZpbmUgUFJFTVVMVElQTElFRF9BTFBIQScgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyA/ICcjZGVmaW5lIFBIWVNJQ0FMTFlfQ09SUkVDVF9MSUdIVFMnIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMubG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRicgOiAnJyxcblx0XHRcdCggcGFyYW1ldGVycy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICYmIHBhcmFtZXRlcnMucmVuZGVyZXJFeHRlbnNpb25GcmFnRGVwdGggKSA/ICcjZGVmaW5lIFVTRV9MT0dERVBUSEJVRl9FWFQnIDogJycsXG5cblx0XHRcdCggKCBwYXJhbWV0ZXJzLmV4dGVuc2lvblNoYWRlclRleHR1cmVMT0QgfHwgcGFyYW1ldGVycy5lbnZNYXAgKSAmJiBwYXJhbWV0ZXJzLnJlbmRlcmVyRXh0ZW5zaW9uU2hhZGVyVGV4dHVyZUxvZCApID8gJyNkZWZpbmUgVEVYVFVSRV9MT0RfRVhUJyA6ICcnLFxuXG5cdFx0XHQndW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7Jyxcblx0XHRcdCd1bmlmb3JtIHZlYzMgY2FtZXJhUG9zaXRpb247Jyxcblx0XHRcdCd1bmlmb3JtIGJvb2wgaXNPcnRob2dyYXBoaWM7JyxcblxuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyAnI2RlZmluZSBUT05FX01BUFBJTkcnIDogJycsXG5cdFx0XHQoIHBhcmFtZXRlcnMudG9uZU1hcHBpbmcgIT09IE5vVG9uZU1hcHBpbmcgKSA/IFNoYWRlckNodW5rWyAndG9uZW1hcHBpbmdfcGFyc19mcmFnbWVudCcgXSA6ICcnLCAvLyB0aGlzIGNvZGUgaXMgcmVxdWlyZWQgaGVyZSBiZWNhdXNlIGl0IGlzIHVzZWQgYnkgdGhlIHRvbmVNYXBwaW5nKCkgZnVuY3Rpb24gZGVmaW5lZCBiZWxvd1xuXHRcdFx0KCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICE9PSBOb1RvbmVNYXBwaW5nICkgPyBnZXRUb25lTWFwcGluZ0Z1bmN0aW9uKCAndG9uZU1hcHBpbmcnLCBwYXJhbWV0ZXJzLnRvbmVNYXBwaW5nICkgOiAnJyxcblxuXHRcdFx0cGFyYW1ldGVycy5kaXRoZXJpbmcgPyAnI2RlZmluZSBESVRIRVJJTkcnIDogJycsXG5cblx0XHRcdCggcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLm1hcEVuY29kaW5nIHx8IHBhcmFtZXRlcnMubWF0Y2FwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyB8fCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgfHwgcGFyYW1ldGVycy5saWdodE1hcEVuY29kaW5nICkgP1xuXHRcdFx0XHRTaGFkZXJDaHVua1sgJ2VuY29kaW5nc19wYXJzX2ZyYWdtZW50JyBdIDogJycsIC8vIHRoaXMgY29kZSBpcyByZXF1aXJlZCBoZXJlIGJlY2F1c2UgaXQgaXMgdXNlZCBieSB0aGUgdmFyaW91cyBlbmNvZGluZy9kZWNvZGluZyBmdW5jdGlvbiBkZWZpbmVkIGJlbG93XG5cdFx0XHRwYXJhbWV0ZXJzLm1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbWFwVGV4ZWxUb0xpbmVhcicsIHBhcmFtZXRlcnMubWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5tYXRjYXBFbmNvZGluZyA/IGdldFRleGVsRGVjb2RpbmdGdW5jdGlvbiggJ21hdGNhcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLm1hdGNhcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMuZW52TWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbnZNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5lbnZNYXBFbmNvZGluZyApIDogJycsXG5cdFx0XHRwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgPyBnZXRUZXhlbERlY29kaW5nRnVuY3Rpb24oICdlbWlzc2l2ZU1hcFRleGVsVG9MaW5lYXInLCBwYXJhbWV0ZXJzLmVtaXNzaXZlTWFwRW5jb2RpbmcgKSA6ICcnLFxuXHRcdFx0cGFyYW1ldGVycy5saWdodE1hcEVuY29kaW5nID8gZ2V0VGV4ZWxEZWNvZGluZ0Z1bmN0aW9uKCAnbGlnaHRNYXBUZXhlbFRvTGluZWFyJywgcGFyYW1ldGVycy5saWdodE1hcEVuY29kaW5nICkgOiAnJyxcblx0XHRcdHBhcmFtZXRlcnMub3V0cHV0RW5jb2RpbmcgPyBnZXRUZXhlbEVuY29kaW5nRnVuY3Rpb24oICdsaW5lYXJUb091dHB1dFRleGVsJywgcGFyYW1ldGVycy5vdXRwdXRFbmNvZGluZyApIDogJycsXG5cblx0XHRcdHBhcmFtZXRlcnMuZGVwdGhQYWNraW5nID8gJyNkZWZpbmUgREVQVEhfUEFDS0lORyAnICsgcGFyYW1ldGVycy5kZXB0aFBhY2tpbmcgOiAnJyxcblxuXHRcdFx0J1xcbidcblxuXHRcdF0uZmlsdGVyKCBmaWx0ZXJFbXB0eUxpbmUgKS5qb2luKCAnXFxuJyApO1xuXG5cdH1cblxuXHR2ZXJ0ZXhTaGFkZXIgPSByZXNvbHZlSW5jbHVkZXMoIHZlcnRleFNoYWRlciApO1xuXHR2ZXJ0ZXhTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblx0dmVydGV4U2hhZGVyID0gcmVwbGFjZUNsaXBwaW5nUGxhbmVOdW1zKCB2ZXJ0ZXhTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHRmcmFnbWVudFNoYWRlciA9IHJlc29sdmVJbmNsdWRlcyggZnJhZ21lbnRTaGFkZXIgKTtcblx0ZnJhZ21lbnRTaGFkZXIgPSByZXBsYWNlTGlnaHROdW1zKCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycyApO1xuXHRmcmFnbWVudFNoYWRlciA9IHJlcGxhY2VDbGlwcGluZ1BsYW5lTnVtcyggZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMgKTtcblxuXHR2ZXJ0ZXhTaGFkZXIgPSB1bnJvbGxMb29wcyggdmVydGV4U2hhZGVyICk7XG5cdGZyYWdtZW50U2hhZGVyID0gdW5yb2xsTG9vcHMoIGZyYWdtZW50U2hhZGVyICk7XG5cblx0aWYgKCBwYXJhbWV0ZXJzLmlzV2ViR0wyICYmICEgcGFyYW1ldGVycy5pc1Jhd1NoYWRlck1hdGVyaWFsICkge1xuXG5cdFx0dmFyIGlzR0xTTDNTaGFkZXJNYXRlcmlhbCA9IGZhbHNlO1xuXG5cdFx0dmFyIHZlcnNpb25SZWdleCA9IC9eXFxzKiN2ZXJzaW9uXFxzKzMwMFxccytlc1xccypcXG4vO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmlzU2hhZGVyTWF0ZXJpYWwgJiZcblx0XHRcdHZlcnRleFNoYWRlci5tYXRjaCggdmVyc2lvblJlZ2V4ICkgIT09IG51bGwgJiZcblx0XHRcdGZyYWdtZW50U2hhZGVyLm1hdGNoKCB2ZXJzaW9uUmVnZXggKSAhPT0gbnVsbCApIHtcblxuXHRcdFx0aXNHTFNMM1NoYWRlck1hdGVyaWFsID0gdHJ1ZTtcblxuXHRcdFx0dmVydGV4U2hhZGVyID0gdmVydGV4U2hhZGVyLnJlcGxhY2UoIHZlcnNpb25SZWdleCwgJycgKTtcblx0XHRcdGZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXIucmVwbGFjZSggdmVyc2lvblJlZ2V4LCAnJyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gR0xTTCAzLjAgY29udmVyc2lvblxuXG5cdFx0cHJlZml4VmVydGV4ID0gW1xuXHRcdFx0JyN2ZXJzaW9uIDMwMCBlc1xcbicsXG5cdFx0XHQnI2RlZmluZSBhdHRyaWJ1dGUgaW4nLFxuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBvdXQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEIHRleHR1cmUnXG5cdFx0XS5qb2luKCAnXFxuJyApICsgJ1xcbicgKyBwcmVmaXhWZXJ0ZXg7XG5cblx0XHRwcmVmaXhGcmFnbWVudCA9IFtcblx0XHRcdCcjdmVyc2lvbiAzMDAgZXNcXG4nLFxuXHRcdFx0JyNkZWZpbmUgdmFyeWluZyBpbicsXG5cdFx0XHRpc0dMU0wzU2hhZGVyTWF0ZXJpYWwgPyAnJyA6ICdvdXQgaGlnaHAgdmVjNCBwY19mcmFnQ29sb3I7Jyxcblx0XHRcdGlzR0xTTDNTaGFkZXJNYXRlcmlhbCA/ICcnIDogJyNkZWZpbmUgZ2xfRnJhZ0NvbG9yIHBjX2ZyYWdDb2xvcicsXG5cdFx0XHQnI2RlZmluZSBnbF9GcmFnRGVwdGhFWFQgZ2xfRnJhZ0RlcHRoJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmUyRCB0ZXh0dXJlJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlIHRleHR1cmUnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJEUHJvaiB0ZXh0dXJlUHJvaicsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRMb2RFWFQgdGV4dHVyZUxvZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qTG9kRVhUIHRleHR1cmVQcm9qTG9kJyxcblx0XHRcdCcjZGVmaW5lIHRleHR1cmVDdWJlTG9kRVhUIHRleHR1cmVMb2QnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZTJER3JhZEVYVCB0ZXh0dXJlR3JhZCcsXG5cdFx0XHQnI2RlZmluZSB0ZXh0dXJlMkRQcm9qR3JhZEVYVCB0ZXh0dXJlUHJvakdyYWQnLFxuXHRcdFx0JyNkZWZpbmUgdGV4dHVyZUN1YmVHcmFkRVhUIHRleHR1cmVHcmFkJ1xuXHRcdF0uam9pbiggJ1xcbicgKSArICdcXG4nICsgcHJlZml4RnJhZ21lbnQ7XG5cblx0fVxuXG5cdHZhciB2ZXJ0ZXhHbHNsID0gcHJlZml4VmVydGV4ICsgdmVydGV4U2hhZGVyO1xuXHR2YXIgZnJhZ21lbnRHbHNsID0gcHJlZml4RnJhZ21lbnQgKyBmcmFnbWVudFNoYWRlcjtcblxuXHQvLyBjb25zb2xlLmxvZyggJypWRVJURVgqJywgdmVydGV4R2xzbCApO1xuXHQvLyBjb25zb2xlLmxvZyggJypGUkFHTUVOVConLCBmcmFnbWVudEdsc2wgKTtcblxuXHR2YXIgZ2xWZXJ0ZXhTaGFkZXIgPSBXZWJHTFNoYWRlciggZ2wsIDM1NjMzLCB2ZXJ0ZXhHbHNsICk7XG5cdHZhciBnbEZyYWdtZW50U2hhZGVyID0gV2ViR0xTaGFkZXIoIGdsLCAzNTYzMiwgZnJhZ21lbnRHbHNsICk7XG5cblx0Z2wuYXR0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5hdHRhY2hTaGFkZXIoIHByb2dyYW0sIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBGb3JjZSBhIHBhcnRpY3VsYXIgYXR0cmlidXRlIHRvIGluZGV4IDAuXG5cblx0aWYgKCBwYXJhbWV0ZXJzLmluZGV4MEF0dHJpYnV0ZU5hbWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdGdsLmJpbmRBdHRyaWJMb2NhdGlvbiggcHJvZ3JhbSwgMCwgcGFyYW1ldGVycy5pbmRleDBBdHRyaWJ1dGVOYW1lICk7XG5cblx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5tb3JwaFRhcmdldHMgPT09IHRydWUgKSB7XG5cblx0XHQvLyBwcm9ncmFtcyB3aXRoIG1vcnBoVGFyZ2V0cyBkaXNwbGFjZSBwb3NpdGlvbiBvdXQgb2YgYXR0cmlidXRlIDBcblx0XHRnbC5iaW5kQXR0cmliTG9jYXRpb24oIHByb2dyYW0sIDAsICdwb3NpdGlvbicgKTtcblxuXHR9XG5cblx0Z2wubGlua1Byb2dyYW0oIHByb2dyYW0gKTtcblxuXHQvLyBjaGVjayBmb3IgbGluayBlcnJvcnNcblx0aWYgKCByZW5kZXJlci5kZWJ1Zy5jaGVja1NoYWRlckVycm9ycyApIHtcblxuXHRcdHZhciBwcm9ncmFtTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2coIHByb2dyYW0gKS50cmltKCk7XG5cdFx0dmFyIHZlcnRleExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsVmVydGV4U2hhZGVyICkudHJpbSgpO1xuXHRcdHZhciBmcmFnbWVudExvZyA9IGdsLmdldFNoYWRlckluZm9Mb2coIGdsRnJhZ21lbnRTaGFkZXIgKS50cmltKCk7XG5cblx0XHR2YXIgcnVubmFibGUgPSB0cnVlO1xuXHRcdHZhciBoYXZlRGlhZ25vc3RpY3MgPSB0cnVlO1xuXG5cdFx0aWYgKCBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKCBwcm9ncmFtLCAzNTcxNCApID09PSBmYWxzZSApIHtcblxuXHRcdFx0cnVubmFibGUgPSBmYWxzZTtcblxuXHRcdFx0dmFyIHZlcnRleEVycm9ycyA9IGdldFNoYWRlckVycm9ycyggZ2wsIGdsVmVydGV4U2hhZGVyLCAndmVydGV4JyApO1xuXHRcdFx0dmFyIGZyYWdtZW50RXJyb3JzID0gZ2V0U2hhZGVyRXJyb3JzKCBnbCwgZ2xGcmFnbWVudFNoYWRlciwgJ2ZyYWdtZW50JyApO1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xQcm9ncmFtOiBzaGFkZXIgZXJyb3I6ICcsIGdsLmdldEVycm9yKCksICczNTcxNScsIGdsLmdldFByb2dyYW1QYXJhbWV0ZXIoIHByb2dyYW0sIDM1NzE1ICksICdnbC5nZXRQcm9ncmFtSW5mb0xvZycsIHByb2dyYW1Mb2csIHZlcnRleEVycm9ycywgZnJhZ21lbnRFcnJvcnMgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHByb2dyYW1Mb2cgIT09ICcnICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW06IGdsLmdldFByb2dyYW1JbmZvTG9nKCknLCBwcm9ncmFtTG9nICk7XG5cblx0XHR9IGVsc2UgaWYgKCB2ZXJ0ZXhMb2cgPT09ICcnIHx8IGZyYWdtZW50TG9nID09PSAnJyApIHtcblxuXHRcdFx0aGF2ZURpYWdub3N0aWNzID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRpZiAoIGhhdmVEaWFnbm9zdGljcyApIHtcblxuXHRcdFx0dGhpcy5kaWFnbm9zdGljcyA9IHtcblxuXHRcdFx0XHRydW5uYWJsZTogcnVubmFibGUsXG5cblx0XHRcdFx0cHJvZ3JhbUxvZzogcHJvZ3JhbUxvZyxcblxuXHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IHtcblxuXHRcdFx0XHRcdGxvZzogdmVydGV4TG9nLFxuXHRcdFx0XHRcdHByZWZpeDogcHJlZml4VmVydGV4XG5cblx0XHRcdFx0fSxcblxuXHRcdFx0XHRmcmFnbWVudFNoYWRlcjoge1xuXG5cdFx0XHRcdFx0bG9nOiBmcmFnbWVudExvZyxcblx0XHRcdFx0XHRwcmVmaXg6IHByZWZpeEZyYWdtZW50XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBjbGVhbiB1cFxuXG5cdGdsLmRldGFjaFNoYWRlciggcHJvZ3JhbSwgZ2xWZXJ0ZXhTaGFkZXIgKTtcblx0Z2wuZGV0YWNoU2hhZGVyKCBwcm9ncmFtLCBnbEZyYWdtZW50U2hhZGVyICk7XG5cblx0Z2wuZGVsZXRlU2hhZGVyKCBnbFZlcnRleFNoYWRlciApO1xuXHRnbC5kZWxldGVTaGFkZXIoIGdsRnJhZ21lbnRTaGFkZXIgKTtcblxuXHQvLyBzZXQgdXAgY2FjaGluZyBmb3IgdW5pZm9ybSBsb2NhdGlvbnNcblxuXHR2YXIgY2FjaGVkVW5pZm9ybXM7XG5cblx0dGhpcy5nZXRVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggY2FjaGVkVW5pZm9ybXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y2FjaGVkVW5pZm9ybXMgPSBuZXcgV2ViR0xVbmlmb3JtcyggZ2wsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWRVbmlmb3JtcztcblxuXHR9O1xuXG5cdC8vIHNldCB1cCBjYWNoaW5nIGZvciBhdHRyaWJ1dGUgbG9jYXRpb25zXG5cblx0dmFyIGNhY2hlZEF0dHJpYnV0ZXM7XG5cblx0dGhpcy5nZXRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCBjYWNoZWRBdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNhY2hlZEF0dHJpYnV0ZXMgPSBmZXRjaEF0dHJpYnV0ZUxvY2F0aW9ucyggZ2wsIHByb2dyYW0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjYWNoZWRBdHRyaWJ1dGVzO1xuXG5cdH07XG5cblx0Ly8gZnJlZSByZXNvdXJjZVxuXG5cdHRoaXMuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGdsLmRlbGV0ZVByb2dyYW0oIHByb2dyYW0gKTtcblx0XHR0aGlzLnByb2dyYW0gPSB1bmRlZmluZWQ7XG5cblx0fTtcblxuXHQvL1xuXG5cdHRoaXMubmFtZSA9IHBhcmFtZXRlcnMuc2hhZGVyTmFtZTtcblx0dGhpcy5pZCA9IHByb2dyYW1JZENvdW50ICsrO1xuXHR0aGlzLmNhY2hlS2V5ID0gY2FjaGVLZXk7XG5cdHRoaXMudXNlZFRpbWVzID0gMTtcblx0dGhpcy5wcm9ncmFtID0gcHJvZ3JhbTtcblx0dGhpcy52ZXJ0ZXhTaGFkZXIgPSBnbFZlcnRleFNoYWRlcjtcblx0dGhpcy5mcmFnbWVudFNoYWRlciA9IGdsRnJhZ21lbnRTaGFkZXI7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMUHJvZ3JhbXMoIHJlbmRlcmVyLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIHByb2dyYW1zID0gW107XG5cblx0dmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXHR2YXIgbG9nYXJpdGhtaWNEZXB0aEJ1ZmZlciA9IGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyO1xuXHR2YXIgZmxvYXRWZXJ0ZXhUZXh0dXJlcyA9IGNhcGFiaWxpdGllcy5mbG9hdFZlcnRleFRleHR1cmVzO1xuXHR2YXIgcHJlY2lzaW9uID0gY2FwYWJpbGl0aWVzLnByZWNpc2lvbjtcblx0dmFyIG1heFZlcnRleFVuaWZvcm1zID0gY2FwYWJpbGl0aWVzLm1heFZlcnRleFVuaWZvcm1zO1xuXHR2YXIgdmVydGV4VGV4dHVyZXMgPSBjYXBhYmlsaXRpZXMudmVydGV4VGV4dHVyZXM7XG5cblx0dmFyIHNoYWRlcklEcyA9IHtcblx0XHRNZXNoRGVwdGhNYXRlcmlhbDogJ2RlcHRoJyxcblx0XHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogJ2Rpc3RhbmNlUkdCQScsXG5cdFx0TWVzaE5vcm1hbE1hdGVyaWFsOiAnbm9ybWFsJyxcblx0XHRNZXNoQmFzaWNNYXRlcmlhbDogJ2Jhc2ljJyxcblx0XHRNZXNoTGFtYmVydE1hdGVyaWFsOiAnbGFtYmVydCcsXG5cdFx0TWVzaFBob25nTWF0ZXJpYWw6ICdwaG9uZycsXG5cdFx0TWVzaFRvb25NYXRlcmlhbDogJ3Rvb24nLFxuXHRcdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hQaHlzaWNhbE1hdGVyaWFsOiAncGh5c2ljYWwnLFxuXHRcdE1lc2hNYXRjYXBNYXRlcmlhbDogJ21hdGNhcCcsXG5cdFx0TGluZUJhc2ljTWF0ZXJpYWw6ICdiYXNpYycsXG5cdFx0TGluZURhc2hlZE1hdGVyaWFsOiAnZGFzaGVkJyxcblx0XHRQb2ludHNNYXRlcmlhbDogJ3BvaW50cycsXG5cdFx0U2hhZG93TWF0ZXJpYWw6ICdzaGFkb3cnLFxuXHRcdFNwcml0ZU1hdGVyaWFsOiAnc3ByaXRlJ1xuXHR9O1xuXG5cdHZhciBwYXJhbWV0ZXJOYW1lcyA9IFtcblx0XHRcInByZWNpc2lvblwiLCBcImlzV2ViR0wyXCIsIFwic3VwcG9ydHNWZXJ0ZXhUZXh0dXJlc1wiLCBcIm91dHB1dEVuY29kaW5nXCIsIFwiaW5zdGFuY2luZ1wiLFxuXHRcdFwibWFwXCIsIFwibWFwRW5jb2RpbmdcIiwgXCJtYXRjYXBcIiwgXCJtYXRjYXBFbmNvZGluZ1wiLCBcImVudk1hcFwiLCBcImVudk1hcE1vZGVcIiwgXCJlbnZNYXBFbmNvZGluZ1wiLCBcImVudk1hcEN1YmVVVlwiLFxuXHRcdFwibGlnaHRNYXBcIiwgXCJsaWdodE1hcEVuY29kaW5nXCIsIFwiYW9NYXBcIiwgXCJlbWlzc2l2ZU1hcFwiLCBcImVtaXNzaXZlTWFwRW5jb2RpbmdcIiwgXCJidW1wTWFwXCIsIFwibm9ybWFsTWFwXCIsIFwib2JqZWN0U3BhY2VOb3JtYWxNYXBcIiwgXCJ0YW5nZW50U3BhY2VOb3JtYWxNYXBcIiwgXCJjbGVhcmNvYXRNYXBcIiwgXCJjbGVhcmNvYXRSb3VnaG5lc3NNYXBcIiwgXCJjbGVhcmNvYXROb3JtYWxNYXBcIiwgXCJkaXNwbGFjZW1lbnRNYXBcIiwgXCJzcGVjdWxhck1hcFwiLFxuXHRcdFwicm91Z2huZXNzTWFwXCIsIFwibWV0YWxuZXNzTWFwXCIsIFwiZ3JhZGllbnRNYXBcIixcblx0XHRcImFscGhhTWFwXCIsIFwiY29tYmluZVwiLCBcInZlcnRleENvbG9yc1wiLCBcInZlcnRleFRhbmdlbnRzXCIsIFwidmVydGV4VXZzXCIsIFwidXZzVmVydGV4T25seVwiLCBcImZvZ1wiLCBcInVzZUZvZ1wiLCBcImZvZ0V4cDJcIixcblx0XHRcImZsYXRTaGFkaW5nXCIsIFwic2l6ZUF0dGVudWF0aW9uXCIsIFwibG9nYXJpdGhtaWNEZXB0aEJ1ZmZlclwiLCBcInNraW5uaW5nXCIsXG5cdFx0XCJtYXhCb25lc1wiLCBcInVzZVZlcnRleFRleHR1cmVcIiwgXCJtb3JwaFRhcmdldHNcIiwgXCJtb3JwaE5vcm1hbHNcIixcblx0XHRcIm1heE1vcnBoVGFyZ2V0c1wiLCBcIm1heE1vcnBoTm9ybWFsc1wiLCBcInByZW11bHRpcGxpZWRBbHBoYVwiLFxuXHRcdFwibnVtRGlyTGlnaHRzXCIsIFwibnVtUG9pbnRMaWdodHNcIiwgXCJudW1TcG90TGlnaHRzXCIsIFwibnVtSGVtaUxpZ2h0c1wiLCBcIm51bVJlY3RBcmVhTGlnaHRzXCIsXG5cdFx0XCJudW1EaXJMaWdodFNoYWRvd3NcIiwgXCJudW1Qb2ludExpZ2h0U2hhZG93c1wiLCBcIm51bVNwb3RMaWdodFNoYWRvd3NcIixcblx0XHRcInNoYWRvd01hcEVuYWJsZWRcIiwgXCJzaGFkb3dNYXBUeXBlXCIsIFwidG9uZU1hcHBpbmdcIiwgJ3BoeXNpY2FsbHlDb3JyZWN0TGlnaHRzJyxcblx0XHRcImFscGhhVGVzdFwiLCBcImRvdWJsZVNpZGVkXCIsIFwiZmxpcFNpZGVkXCIsIFwibnVtQ2xpcHBpbmdQbGFuZXNcIiwgXCJudW1DbGlwSW50ZXJzZWN0aW9uXCIsIFwiZGVwdGhQYWNraW5nXCIsIFwiZGl0aGVyaW5nXCIsXG5cdFx0XCJzaGVlblwiXG5cdF07XG5cblx0ZnVuY3Rpb24gZ2V0U2hhZGVyT2JqZWN0KCBtYXRlcmlhbCwgc2hhZGVySUQgKSB7XG5cblx0XHR2YXIgc2hhZGVyb2JqZWN0O1xuXG5cdFx0aWYgKCBzaGFkZXJJRCApIHtcblxuXHRcdFx0dmFyIHNoYWRlciA9IFNoYWRlckxpYlsgc2hhZGVySUQgXTtcblxuXHRcdFx0c2hhZGVyb2JqZWN0ID0ge1xuXHRcdFx0XHRuYW1lOiBtYXRlcmlhbC50eXBlLFxuXHRcdFx0XHR1bmlmb3JtczogVW5pZm9ybXNVdGlscy5jbG9uZSggc2hhZGVyLnVuaWZvcm1zICksXG5cdFx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyLnZlcnRleFNoYWRlcixcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IHNoYWRlci5mcmFnbWVudFNoYWRlclxuXHRcdFx0fTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHNoYWRlcm9iamVjdCA9IHtcblx0XHRcdFx0bmFtZTogbWF0ZXJpYWwudHlwZSxcblx0XHRcdFx0dW5pZm9ybXM6IG1hdGVyaWFsLnVuaWZvcm1zLFxuXHRcdFx0XHR2ZXJ0ZXhTaGFkZXI6IG1hdGVyaWFsLnZlcnRleFNoYWRlcixcblx0XHRcdFx0ZnJhZ21lbnRTaGFkZXI6IG1hdGVyaWFsLmZyYWdtZW50U2hhZGVyXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNoYWRlcm9iamVjdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gYWxsb2NhdGVCb25lcyggb2JqZWN0ICkge1xuXG5cdFx0dmFyIHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXHRcdHZhciBib25lcyA9IHNrZWxldG9uLmJvbmVzO1xuXG5cdFx0aWYgKCBmbG9hdFZlcnRleFRleHR1cmVzICkge1xuXG5cdFx0XHRyZXR1cm4gMTAyNDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGRlZmF1bHQgZm9yIHdoZW4gb2JqZWN0IGlzIG5vdCBzcGVjaWZpZWRcblx0XHRcdC8vICggZm9yIGV4YW1wbGUgd2hlbiBwcmVidWlsZGluZyBzaGFkZXIgdG8gYmUgdXNlZCB3aXRoIG11bHRpcGxlIG9iamVjdHMgKVxuXHRcdFx0Ly9cblx0XHRcdC8vICAtIGxlYXZlIHNvbWUgZXh0cmEgc3BhY2UgZm9yIG90aGVyIHVuaWZvcm1zXG5cdFx0XHQvLyAgLSBsaW1pdCBoZXJlIGlzIEFOR0xFJ3MgMjU0IG1heCB1bmlmb3JtIHZlY3RvcnNcblx0XHRcdC8vICAgICh1cCB0byA1NCBzaG91bGQgYmUgc2FmZSlcblxuXHRcdFx0dmFyIG5WZXJ0ZXhVbmlmb3JtcyA9IG1heFZlcnRleFVuaWZvcm1zO1xuXHRcdFx0dmFyIG5WZXJ0ZXhNYXRyaWNlcyA9IE1hdGguZmxvb3IoICggblZlcnRleFVuaWZvcm1zIC0gMjAgKSAvIDQgKTtcblxuXHRcdFx0dmFyIG1heEJvbmVzID0gTWF0aC5taW4oIG5WZXJ0ZXhNYXRyaWNlcywgYm9uZXMubGVuZ3RoICk7XG5cblx0XHRcdGlmICggbWF4Qm9uZXMgPCBib25lcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogU2tlbGV0b24gaGFzICcgKyBib25lcy5sZW5ndGggKyAnIGJvbmVzLiBUaGlzIEdQVSBzdXBwb3J0cyAnICsgbWF4Qm9uZXMgKyAnLicgKTtcblx0XHRcdFx0cmV0dXJuIDA7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1heEJvbmVzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBtYXAgKSB7XG5cblx0XHR2YXIgZW5jb2Rpbmc7XG5cblx0XHRpZiAoICEgbWFwICkge1xuXG5cdFx0XHRlbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXG5cdFx0fSBlbHNlIGlmICggbWFwLmlzVGV4dHVyZSApIHtcblxuXHRcdFx0ZW5jb2RpbmcgPSBtYXAuZW5jb2Rpbmc7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMUHJvZ3JhbXMuZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcDogZG9uJ3QgdXNlIHJlbmRlciB0YXJnZXRzIGFzIHRleHR1cmVzLiBVc2UgdGhlaXIgLnRleHR1cmUgcHJvcGVydHkgaW5zdGVhZC5cIiApO1xuXHRcdFx0ZW5jb2RpbmcgPSBtYXAudGV4dHVyZS5lbmNvZGluZztcblxuXHRcdH1cblxuXHRcdHJldHVybiBlbmNvZGluZztcblxuXHR9XG5cblx0dGhpcy5nZXRQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCBtYXRlcmlhbCwgbGlnaHRzLCBzaGFkb3dzLCBzY2VuZSwgbkNsaXBQbGFuZXMsIG5DbGlwSW50ZXJzZWN0aW9uLCBvYmplY3QgKSB7XG5cblx0XHR2YXIgZm9nID0gc2NlbmUuZm9nO1xuXHRcdHZhciBlbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cblx0XHR2YXIgZW52TWFwID0gbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50O1xuXG5cdFx0dmFyIHNoYWRlcklEID0gc2hhZGVySURzWyBtYXRlcmlhbC50eXBlIF07XG5cblx0XHQvLyBoZXVyaXN0aWNzIHRvIGNyZWF0ZSBzaGFkZXIgcGFyYW1ldGVycyBhY2NvcmRpbmcgdG8gbGlnaHRzIGluIHRoZSBzY2VuZVxuXHRcdC8vIChub3QgdG8gYmxvdyBvdmVyIG1heExpZ2h0cyBidWRnZXQpXG5cblx0XHR2YXIgbWF4Qm9uZXMgPSBvYmplY3QuaXNTa2lubmVkTWVzaCA/IGFsbG9jYXRlQm9uZXMoIG9iamVjdCApIDogMDtcblxuXHRcdGlmICggbWF0ZXJpYWwucHJlY2lzaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRwcmVjaXNpb24gPSBjYXBhYmlsaXRpZXMuZ2V0TWF4UHJlY2lzaW9uKCBtYXRlcmlhbC5wcmVjaXNpb24gKTtcblxuXHRcdFx0aWYgKCBwcmVjaXNpb24gIT09IG1hdGVyaWFsLnByZWNpc2lvbiApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFByb2dyYW0uZ2V0UGFyYW1ldGVyczonLCBtYXRlcmlhbC5wcmVjaXNpb24sICdub3Qgc3VwcG9ydGVkLCB1c2luZycsIHByZWNpc2lvbiwgJ2luc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgc2hhZGVyb2JqZWN0ID0gZ2V0U2hhZGVyT2JqZWN0KCBtYXRlcmlhbCwgc2hhZGVySUQgKTtcblx0XHRtYXRlcmlhbC5vbkJlZm9yZUNvbXBpbGUoIHNoYWRlcm9iamVjdCwgcmVuZGVyZXIgKTtcblxuXHRcdHZhciBjdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cblx0XHR2YXIgcGFyYW1ldGVycyA9IHtcblxuXHRcdFx0aXNXZWJHTDI6IGlzV2ViR0wyLFxuXG5cdFx0XHRzaGFkZXJJRDogc2hhZGVySUQsXG5cdFx0XHRzaGFkZXJOYW1lOiBzaGFkZXJvYmplY3QubmFtZSxcblxuXHRcdFx0dW5pZm9ybXM6IHNoYWRlcm9iamVjdC51bmlmb3Jtcyxcblx0XHRcdHZlcnRleFNoYWRlcjogc2hhZGVyb2JqZWN0LnZlcnRleFNoYWRlcixcblx0XHRcdGZyYWdtZW50U2hhZGVyOiBzaGFkZXJvYmplY3QuZnJhZ21lbnRTaGFkZXIsXG5cdFx0XHRkZWZpbmVzOiBtYXRlcmlhbC5kZWZpbmVzLFxuXG5cdFx0XHRpc1Jhd1NoYWRlck1hdGVyaWFsOiBtYXRlcmlhbC5pc1Jhd1NoYWRlck1hdGVyaWFsLFxuXHRcdFx0aXNTaGFkZXJNYXRlcmlhbDogbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCxcblxuXHRcdFx0cHJlY2lzaW9uOiBwcmVjaXNpb24sXG5cblx0XHRcdGluc3RhbmNpbmc6IG9iamVjdC5pc0luc3RhbmNlZE1lc2ggPT09IHRydWUsXG5cblx0XHRcdHN1cHBvcnRzVmVydGV4VGV4dHVyZXM6IHZlcnRleFRleHR1cmVzLFxuXHRcdFx0b3V0cHV0RW5jb2Rpbmc6ICggY3VycmVudFJlbmRlclRhcmdldCAhPT0gbnVsbCApID8gZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggY3VycmVudFJlbmRlclRhcmdldC50ZXh0dXJlICkgOiByZW5kZXJlci5vdXRwdXRFbmNvZGluZyxcblx0XHRcdG1hcDogISEgbWF0ZXJpYWwubWFwLFxuXHRcdFx0bWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLm1hcCApLFxuXHRcdFx0bWF0Y2FwOiAhISBtYXRlcmlhbC5tYXRjYXAsXG5cdFx0XHRtYXRjYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubWF0Y2FwICksXG5cdFx0XHRlbnZNYXA6ICEhIGVudk1hcCxcblx0XHRcdGVudk1hcE1vZGU6IGVudk1hcCAmJiBlbnZNYXAubWFwcGluZyxcblx0XHRcdGVudk1hcEVuY29kaW5nOiBnZXRUZXh0dXJlRW5jb2RpbmdGcm9tTWFwKCBlbnZNYXAgKSxcblx0XHRcdGVudk1hcEN1YmVVVjogKCAhISBlbnZNYXAgKSAmJiAoICggZW52TWFwLm1hcHBpbmcgPT09IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nICkgfHwgKCBlbnZNYXAubWFwcGluZyA9PT0gQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmcgKSApLFxuXHRcdFx0bGlnaHRNYXA6ICEhIG1hdGVyaWFsLmxpZ2h0TWFwLFxuXHRcdFx0bGlnaHRNYXBFbmNvZGluZzogZ2V0VGV4dHVyZUVuY29kaW5nRnJvbU1hcCggbWF0ZXJpYWwubGlnaHRNYXAgKSxcblx0XHRcdGFvTWFwOiAhISBtYXRlcmlhbC5hb01hcCxcblx0XHRcdGVtaXNzaXZlTWFwOiAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcCxcblx0XHRcdGVtaXNzaXZlTWFwRW5jb2Rpbmc6IGdldFRleHR1cmVFbmNvZGluZ0Zyb21NYXAoIG1hdGVyaWFsLmVtaXNzaXZlTWFwICksXG5cdFx0XHRidW1wTWFwOiAhISBtYXRlcmlhbC5idW1wTWFwLFxuXHRcdFx0bm9ybWFsTWFwOiAhISBtYXRlcmlhbC5ub3JtYWxNYXAsXG5cdFx0XHRvYmplY3RTcGFjZU5vcm1hbE1hcDogbWF0ZXJpYWwubm9ybWFsTWFwVHlwZSA9PT0gT2JqZWN0U3BhY2VOb3JtYWxNYXAsXG5cdFx0XHR0YW5nZW50U3BhY2VOb3JtYWxNYXA6IG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPT09IFRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcblx0XHRcdGNsZWFyY29hdE1hcDogISEgbWF0ZXJpYWwuY2xlYXJjb2F0TWFwLFxuXHRcdFx0Y2xlYXJjb2F0Um91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAsXG5cdFx0XHRjbGVhcmNvYXROb3JtYWxNYXA6ICEhIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCxcblx0XHRcdGRpc3BsYWNlbWVudE1hcDogISEgbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwLFxuXHRcdFx0cm91Z2huZXNzTWFwOiAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAsXG5cdFx0XHRtZXRhbG5lc3NNYXA6ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCxcblx0XHRcdHNwZWN1bGFyTWFwOiAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCxcblx0XHRcdGFscGhhTWFwOiAhISBtYXRlcmlhbC5hbHBoYU1hcCxcblxuXHRcdFx0Z3JhZGllbnRNYXA6ICEhIG1hdGVyaWFsLmdyYWRpZW50TWFwLFxuXG5cdFx0XHRzaGVlbjogISEgbWF0ZXJpYWwuc2hlZW4sXG5cblx0XHRcdGNvbWJpbmU6IG1hdGVyaWFsLmNvbWJpbmUsXG5cblx0XHRcdHZlcnRleFRhbmdlbnRzOiAoIG1hdGVyaWFsLm5vcm1hbE1hcCAmJiBtYXRlcmlhbC52ZXJ0ZXhUYW5nZW50cyApLFxuXHRcdFx0dmVydGV4Q29sb3JzOiBtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMsXG5cdFx0XHR2ZXJ0ZXhVdnM6ICEhIG1hdGVyaWFsLm1hcCB8fCAhISBtYXRlcmlhbC5idW1wTWFwIHx8ICEhIG1hdGVyaWFsLm5vcm1hbE1hcCB8fCAhISBtYXRlcmlhbC5zcGVjdWxhck1hcCB8fCAhISBtYXRlcmlhbC5hbHBoYU1hcCB8fCAhISBtYXRlcmlhbC5lbWlzc2l2ZU1hcCB8fCAhISBtYXRlcmlhbC5yb3VnaG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwubWV0YWxuZXNzTWFwIHx8ICEhIG1hdGVyaWFsLmNsZWFyY29hdE1hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgfHwgISEgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwIHx8ICEhIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCxcblx0XHRcdHV2c1ZlcnRleE9ubHk6ICEgKCAhISBtYXRlcmlhbC5tYXAgfHwgISEgbWF0ZXJpYWwuYnVtcE1hcCB8fCAhISBtYXRlcmlhbC5ub3JtYWxNYXAgfHwgISEgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgfHwgISEgbWF0ZXJpYWwuYWxwaGFNYXAgfHwgISEgbWF0ZXJpYWwuZW1pc3NpdmVNYXAgfHwgISEgbWF0ZXJpYWwucm91Z2huZXNzTWFwIHx8ICEhIG1hdGVyaWFsLm1ldGFsbmVzc01hcCB8fCAhISBtYXRlcmlhbC5jbGVhcmNvYXROb3JtYWxNYXAgKSAmJiAhISBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAsXG5cblx0XHRcdGZvZzogISEgZm9nLFxuXHRcdFx0dXNlRm9nOiBtYXRlcmlhbC5mb2csXG5cdFx0XHRmb2dFeHAyOiAoIGZvZyAmJiBmb2cuaXNGb2dFeHAyICksXG5cblx0XHRcdGZsYXRTaGFkaW5nOiBtYXRlcmlhbC5mbGF0U2hhZGluZyxcblxuXHRcdFx0c2l6ZUF0dGVudWF0aW9uOiBtYXRlcmlhbC5zaXplQXR0ZW51YXRpb24sXG5cdFx0XHRsb2dhcml0aG1pY0RlcHRoQnVmZmVyOiBsb2dhcml0aG1pY0RlcHRoQnVmZmVyLFxuXG5cdFx0XHRza2lubmluZzogbWF0ZXJpYWwuc2tpbm5pbmcgJiYgbWF4Qm9uZXMgPiAwLFxuXHRcdFx0bWF4Qm9uZXM6IG1heEJvbmVzLFxuXHRcdFx0dXNlVmVydGV4VGV4dHVyZTogZmxvYXRWZXJ0ZXhUZXh0dXJlcyxcblxuXHRcdFx0bW9ycGhUYXJnZXRzOiBtYXRlcmlhbC5tb3JwaFRhcmdldHMsXG5cdFx0XHRtb3JwaE5vcm1hbHM6IG1hdGVyaWFsLm1vcnBoTm9ybWFscyxcblx0XHRcdG1heE1vcnBoVGFyZ2V0czogcmVuZGVyZXIubWF4TW9ycGhUYXJnZXRzLFxuXHRcdFx0bWF4TW9ycGhOb3JtYWxzOiByZW5kZXJlci5tYXhNb3JwaE5vcm1hbHMsXG5cblx0XHRcdG51bURpckxpZ2h0czogbGlnaHRzLmRpcmVjdGlvbmFsLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRzOiBsaWdodHMucG9pbnQubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0czogbGlnaHRzLnNwb3QubGVuZ3RoLFxuXHRcdFx0bnVtUmVjdEFyZWFMaWdodHM6IGxpZ2h0cy5yZWN0QXJlYS5sZW5ndGgsXG5cdFx0XHRudW1IZW1pTGlnaHRzOiBsaWdodHMuaGVtaS5sZW5ndGgsXG5cblx0XHRcdG51bURpckxpZ2h0U2hhZG93czogbGlnaHRzLmRpcmVjdGlvbmFsU2hhZG93TWFwLmxlbmd0aCxcblx0XHRcdG51bVBvaW50TGlnaHRTaGFkb3dzOiBsaWdodHMucG9pbnRTaGFkb3dNYXAubGVuZ3RoLFxuXHRcdFx0bnVtU3BvdExpZ2h0U2hhZG93czogbGlnaHRzLnNwb3RTaGFkb3dNYXAubGVuZ3RoLFxuXG5cdFx0XHRudW1DbGlwcGluZ1BsYW5lczogbkNsaXBQbGFuZXMsXG5cdFx0XHRudW1DbGlwSW50ZXJzZWN0aW9uOiBuQ2xpcEludGVyc2VjdGlvbixcblxuXHRcdFx0ZGl0aGVyaW5nOiBtYXRlcmlhbC5kaXRoZXJpbmcsXG5cblx0XHRcdHNoYWRvd01hcEVuYWJsZWQ6IHJlbmRlcmVyLnNoYWRvd01hcC5lbmFibGVkICYmIHNoYWRvd3MubGVuZ3RoID4gMCxcblx0XHRcdHNoYWRvd01hcFR5cGU6IHJlbmRlcmVyLnNoYWRvd01hcC50eXBlLFxuXG5cdFx0XHR0b25lTWFwcGluZzogbWF0ZXJpYWwudG9uZU1hcHBlZCA/IHJlbmRlcmVyLnRvbmVNYXBwaW5nIDogTm9Ub25lTWFwcGluZyxcblx0XHRcdHBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzOiByZW5kZXJlci5waHlzaWNhbGx5Q29ycmVjdExpZ2h0cyxcblxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEsXG5cblx0XHRcdGFscGhhVGVzdDogbWF0ZXJpYWwuYWxwaGFUZXN0LFxuXHRcdFx0ZG91YmxlU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGUsXG5cdFx0XHRmbGlwU2lkZWQ6IG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlLFxuXG5cdFx0XHRkZXB0aFBhY2tpbmc6ICggbWF0ZXJpYWwuZGVwdGhQYWNraW5nICE9PSB1bmRlZmluZWQgKSA/IG1hdGVyaWFsLmRlcHRoUGFja2luZyA6IGZhbHNlLFxuXG5cdFx0XHRpbmRleDBBdHRyaWJ1dGVOYW1lOiBtYXRlcmlhbC5pbmRleDBBdHRyaWJ1dGVOYW1lLFxuXG5cdFx0XHRleHRlbnNpb25EZXJpdmF0aXZlczogbWF0ZXJpYWwuZXh0ZW5zaW9ucyAmJiBtYXRlcmlhbC5leHRlbnNpb25zLmRlcml2YXRpdmVzLFxuXHRcdFx0ZXh0ZW5zaW9uRnJhZ0RlcHRoOiBtYXRlcmlhbC5leHRlbnNpb25zICYmIG1hdGVyaWFsLmV4dGVuc2lvbnMuZnJhZ0RlcHRoLFxuXHRcdFx0ZXh0ZW5zaW9uRHJhd0J1ZmZlcnM6IG1hdGVyaWFsLmV4dGVuc2lvbnMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5kcmF3QnVmZmVycyxcblx0XHRcdGV4dGVuc2lvblNoYWRlclRleHR1cmVMT0Q6IG1hdGVyaWFsLmV4dGVuc2lvbnMgJiYgbWF0ZXJpYWwuZXh0ZW5zaW9ucy5zaGFkZXJUZXh0dXJlTE9ELFxuXG5cdFx0XHRyZW5kZXJlckV4dGVuc2lvbkZyYWdEZXB0aDogaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5nZXQoICdFWFRfZnJhZ19kZXB0aCcgKSAhPT0gbnVsbCxcblx0XHRcdHJlbmRlcmVyRXh0ZW5zaW9uRHJhd0J1ZmZlcnM6IGlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfZHJhd19idWZmZXJzJyApICE9PSBudWxsLFxuXHRcdFx0cmVuZGVyZXJFeHRlbnNpb25TaGFkZXJUZXh0dXJlTG9kOiBpc1dlYkdMMiB8fCBleHRlbnNpb25zLmdldCggJ0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QnICkgIT09IG51bGwsXG5cblx0XHRcdG9uQmVmb3JlQ29tcGlsZTogbWF0ZXJpYWwub25CZWZvcmVDb21waWxlXG5cblx0XHR9O1xuXG5cdFx0cmV0dXJuIHBhcmFtZXRlcnM7XG5cblx0fTtcblxuXHR0aGlzLmdldFByb2dyYW1DYWNoZUtleSA9IGZ1bmN0aW9uICggcGFyYW1ldGVycyApIHtcblxuXHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLnNoYWRlcklEICkge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnNoYWRlcklEICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLmZyYWdtZW50U2hhZGVyICk7XG5cdFx0XHRhcnJheS5wdXNoKCBwYXJhbWV0ZXJzLnZlcnRleFNoYWRlciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4gcGFyYW1ldGVycy5kZWZpbmVzICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIG5hbWUgKTtcblx0XHRcdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5kZWZpbmVzWyBuYW1lIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwYXJhbWV0ZXJzLmlzUmF3U2hhZGVyTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgcGFyYW1ldGVyTmFtZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdGFycmF5LnB1c2goIHBhcmFtZXRlcnNbIHBhcmFtZXRlck5hbWVzWyBpIF0gXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGFycmF5LnB1c2goIHJlbmRlcmVyLm91dHB1dEVuY29kaW5nICk7XG5cdFx0XHRhcnJheS5wdXNoKCByZW5kZXJlci5nYW1tYUZhY3RvciApO1xuXG5cdFx0fVxuXG5cdFx0YXJyYXkucHVzaCggcGFyYW1ldGVycy5vbkJlZm9yZUNvbXBpbGUudG9TdHJpbmcoKSApO1xuXG5cdFx0cmV0dXJuIGFycmF5LmpvaW4oKTtcblxuXHR9O1xuXG5cdHRoaXMuYWNxdWlyZVByb2dyYW0gPSBmdW5jdGlvbiAoIHBhcmFtZXRlcnMsIGNhY2hlS2V5ICkge1xuXG5cdFx0dmFyIHByb2dyYW07XG5cblx0XHQvLyBDaGVjayBpZiBjb2RlIGhhcyBiZWVuIGFscmVhZHkgY29tcGlsZWRcblx0XHRmb3IgKCB2YXIgcCA9IDAsIHBsID0gcHJvZ3JhbXMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdHZhciBwcmVleGlzdGluZ1Byb2dyYW0gPSBwcm9ncmFtc1sgcCBdO1xuXG5cdFx0XHRpZiAoIHByZWV4aXN0aW5nUHJvZ3JhbS5jYWNoZUtleSA9PT0gY2FjaGVLZXkgKSB7XG5cblx0XHRcdFx0cHJvZ3JhbSA9IHByZWV4aXN0aW5nUHJvZ3JhbTtcblx0XHRcdFx0KysgcHJvZ3JhbS51c2VkVGltZXM7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcHJvZ3JhbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRwcm9ncmFtID0gbmV3IFdlYkdMUHJvZ3JhbSggcmVuZGVyZXIsIGNhY2hlS2V5LCBwYXJhbWV0ZXJzICk7XG5cdFx0XHRwcm9ncmFtcy5wdXNoKCBwcm9ncmFtICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHR9O1xuXG5cdHRoaXMucmVsZWFzZVByb2dyYW0gPSBmdW5jdGlvbiAoIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIC0tIHByb2dyYW0udXNlZFRpbWVzID09PSAwICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZnJvbSB1bm9yZGVyZWQgc2V0XG5cdFx0XHR2YXIgaSA9IHByb2dyYW1zLmluZGV4T2YoIHByb2dyYW0gKTtcblx0XHRcdHByb2dyYW1zWyBpIF0gPSBwcm9ncmFtc1sgcHJvZ3JhbXMubGVuZ3RoIC0gMSBdO1xuXHRcdFx0cHJvZ3JhbXMucG9wKCk7XG5cblx0XHRcdC8vIEZyZWUgV2ViR0wgcmVzb3VyY2VzXG5cdFx0XHRwcm9ncmFtLmRlc3Ryb3koKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdC8vIEV4cG9zZWQgZm9yIHJlc291cmNlIG1vbml0b3JpbmcgJiBlcnJvciBmZWVkYmFjayB2aWEgcmVuZGVyZXIuaW5mbzpcblx0dGhpcy5wcm9ncmFtcyA9IHByb2dyYW1zO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBmb3JkYWNpb3VzIC8gZm9yZGFjaW91cy5naXRodWIuaW9cbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFByb3BlcnRpZXMoKSB7XG5cblx0dmFyIHByb3BlcnRpZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIGdldCggb2JqZWN0ICkge1xuXG5cdFx0dmFyIG1hcCA9IHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggbWFwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hcCA9IHt9O1xuXHRcdFx0cHJvcGVydGllcy5zZXQoIG9iamVjdCwgbWFwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWFwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmUoIG9iamVjdCApIHtcblxuXHRcdHByb3BlcnRpZXMuZGVsZXRlKCBvYmplY3QgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlKCBvYmplY3QsIGtleSwgdmFsdWUgKSB7XG5cblx0XHRwcm9wZXJ0aWVzLmdldCggb2JqZWN0IClbIGtleSBdID0gdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRwcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRyZW1vdmU6IHJlbW92ZSxcblx0XHR1cGRhdGU6IHVwZGF0ZSxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIHBhaW50ZXJTb3J0U3RhYmxlKCBhLCBiICkge1xuXG5cdGlmICggYS5ncm91cE9yZGVyICE9PSBiLmdyb3VwT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5ncm91cE9yZGVyIC0gYi5ncm91cE9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIgKSB7XG5cblx0XHRyZXR1cm4gYS5yZW5kZXJPcmRlciAtIGIucmVuZGVyT3JkZXI7XG5cblx0fSBlbHNlIGlmICggYS5wcm9ncmFtICE9PSBiLnByb2dyYW0gKSB7XG5cblx0XHRyZXR1cm4gYS5wcm9ncmFtLmlkIC0gYi5wcm9ncmFtLmlkO1xuXG5cdH0gZWxzZSBpZiAoIGEubWF0ZXJpYWwuaWQgIT09IGIubWF0ZXJpYWwuaWQgKSB7XG5cblx0XHRyZXR1cm4gYS5tYXRlcmlhbC5pZCAtIGIubWF0ZXJpYWwuaWQ7XG5cblx0fSBlbHNlIGlmICggYS56ICE9PSBiLnogKSB7XG5cblx0XHRyZXR1cm4gYS56IC0gYi56O1xuXG5cdH0gZWxzZSB7XG5cblx0XHRyZXR1cm4gYS5pZCAtIGIuaWQ7XG5cblx0fVxuXG59XG5cbmZ1bmN0aW9uIHJldmVyc2VQYWludGVyU29ydFN0YWJsZSggYSwgYiApIHtcblxuXHRpZiAoIGEuZ3JvdXBPcmRlciAhPT0gYi5ncm91cE9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEuZ3JvdXBPcmRlciAtIGIuZ3JvdXBPcmRlcjtcblxuXHR9IGVsc2UgaWYgKCBhLnJlbmRlck9yZGVyICE9PSBiLnJlbmRlck9yZGVyICkge1xuXG5cdFx0cmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyO1xuXG5cdH0gZWxzZSBpZiAoIGEueiAhPT0gYi56ICkge1xuXG5cdFx0cmV0dXJuIGIueiAtIGEuejtcblxuXHR9IGVsc2Uge1xuXG5cdFx0cmV0dXJuIGEuaWQgLSBiLmlkO1xuXG5cdH1cblxufVxuXG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyTGlzdCgpIHtcblxuXHR2YXIgcmVuZGVySXRlbXMgPSBbXTtcblx0dmFyIHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdHZhciBvcGFxdWUgPSBbXTtcblx0dmFyIHRyYW5zcGFyZW50ID0gW107XG5cblx0dmFyIGRlZmF1bHRQcm9ncmFtID0geyBpZDogLSAxIH07XG5cblx0ZnVuY3Rpb24gaW5pdCgpIHtcblxuXHRcdHJlbmRlckl0ZW1zSW5kZXggPSAwO1xuXG5cdFx0b3BhcXVlLmxlbmd0aCA9IDA7XG5cdFx0dHJhbnNwYXJlbnQubGVuZ3RoID0gMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0TmV4dFJlbmRlckl0ZW0oIG9iamVjdCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cE9yZGVyLCB6LCBncm91cCApIHtcblxuXHRcdHZhciByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXTtcblxuXHRcdGlmICggcmVuZGVySXRlbSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZW5kZXJJdGVtID0ge1xuXHRcdFx0XHRpZDogb2JqZWN0LmlkLFxuXHRcdFx0XHRvYmplY3Q6IG9iamVjdCxcblx0XHRcdFx0Z2VvbWV0cnk6IGdlb21ldHJ5LFxuXHRcdFx0XHRtYXRlcmlhbDogbWF0ZXJpYWwsXG5cdFx0XHRcdHByb2dyYW06IG1hdGVyaWFsLnByb2dyYW0gfHwgZGVmYXVsdFByb2dyYW0sXG5cdFx0XHRcdGdyb3VwT3JkZXI6IGdyb3VwT3JkZXIsXG5cdFx0XHRcdHJlbmRlck9yZGVyOiBvYmplY3QucmVuZGVyT3JkZXIsXG5cdFx0XHRcdHo6IHosXG5cdFx0XHRcdGdyb3VwOiBncm91cFxuXHRcdFx0fTtcblxuXHRcdFx0cmVuZGVySXRlbXNbIHJlbmRlckl0ZW1zSW5kZXggXSA9IHJlbmRlckl0ZW07XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJJdGVtLmlkID0gb2JqZWN0LmlkO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBvYmplY3Q7XG5cdFx0XHRyZW5kZXJJdGVtLmdlb21ldHJ5ID0gZ2VvbWV0cnk7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbWF0ZXJpYWw7XG5cdFx0XHRyZW5kZXJJdGVtLnByb2dyYW0gPSBtYXRlcmlhbC5wcm9ncmFtIHx8IGRlZmF1bHRQcm9ncmFtO1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cE9yZGVyID0gZ3JvdXBPcmRlcjtcblx0XHRcdHJlbmRlckl0ZW0ucmVuZGVyT3JkZXIgPSBvYmplY3QucmVuZGVyT3JkZXI7XG5cdFx0XHRyZW5kZXJJdGVtLnogPSB6O1xuXHRcdFx0cmVuZGVySXRlbS5ncm91cCA9IGdyb3VwO1xuXG5cdFx0fVxuXG5cdFx0cmVuZGVySXRlbXNJbmRleCArKztcblxuXHRcdHJldHVybiByZW5kZXJJdGVtO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKSB7XG5cblx0XHR2YXIgcmVuZGVySXRlbSA9IGdldE5leHRSZW5kZXJJdGVtKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgeiwgZ3JvdXAgKTtcblxuXHRcdCggbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IHRydWUgPyB0cmFuc3BhcmVudCA6IG9wYXF1ZSApLnB1c2goIHJlbmRlckl0ZW0gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdW5zaGlmdCggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICkge1xuXG5cdFx0dmFyIHJlbmRlckl0ZW0gPSBnZXROZXh0UmVuZGVySXRlbSggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwT3JkZXIsIHosIGdyb3VwICk7XG5cblx0XHQoIG1hdGVyaWFsLnRyYW5zcGFyZW50ID09PSB0cnVlID8gdHJhbnNwYXJlbnQgOiBvcGFxdWUgKS51bnNoaWZ0KCByZW5kZXJJdGVtICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNvcnQoIGN1c3RvbU9wYXF1ZVNvcnQsIGN1c3RvbVRyYW5zcGFyZW50U29ydCApIHtcblxuXHRcdGlmICggb3BhcXVlLmxlbmd0aCA+IDEgKSBvcGFxdWUuc29ydCggY3VzdG9tT3BhcXVlU29ydCB8fCBwYWludGVyU29ydFN0YWJsZSApO1xuXHRcdGlmICggdHJhbnNwYXJlbnQubGVuZ3RoID4gMSApIHRyYW5zcGFyZW50LnNvcnQoIGN1c3RvbVRyYW5zcGFyZW50U29ydCB8fCByZXZlcnNlUGFpbnRlclNvcnRTdGFibGUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZmluaXNoKCkge1xuXG5cdFx0Ly8gQ2xlYXIgcmVmZXJlbmNlcyBmcm9tIGluYWN0aXZlIHJlbmRlckl0ZW1zIGluIHRoZSBsaXN0XG5cblx0XHRmb3IgKCB2YXIgaSA9IHJlbmRlckl0ZW1zSW5kZXgsIGlsID0gcmVuZGVySXRlbXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciByZW5kZXJJdGVtID0gcmVuZGVySXRlbXNbIGkgXTtcblxuXHRcdFx0aWYgKCByZW5kZXJJdGVtLmlkID09PSBudWxsICkgYnJlYWs7XG5cblx0XHRcdHJlbmRlckl0ZW0uaWQgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5vYmplY3QgPSBudWxsO1xuXHRcdFx0cmVuZGVySXRlbS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLm1hdGVyaWFsID0gbnVsbDtcblx0XHRcdHJlbmRlckl0ZW0ucHJvZ3JhbSA9IG51bGw7XG5cdFx0XHRyZW5kZXJJdGVtLmdyb3VwID0gbnVsbDtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRvcGFxdWU6IG9wYXF1ZSxcblx0XHR0cmFuc3BhcmVudDogdHJhbnNwYXJlbnQsXG5cblx0XHRpbml0OiBpbml0LFxuXHRcdHB1c2g6IHB1c2gsXG5cdFx0dW5zaGlmdDogdW5zaGlmdCxcblx0XHRmaW5pc2g6IGZpbmlzaCxcblxuXHRcdHNvcnQ6IHNvcnRcblx0fTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTFJlbmRlckxpc3RzKCkge1xuXG5cdHZhciBsaXN0cyA9IG5ldyBXZWFrTWFwKCk7XG5cblx0ZnVuY3Rpb24gb25TY2VuZURpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIHNjZW5lID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0c2NlbmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblNjZW5lRGlzcG9zZSApO1xuXG5cdFx0bGlzdHMuZGVsZXRlKCBzY2VuZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXQoIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgY2FtZXJhcyA9IGxpc3RzLmdldCggc2NlbmUgKTtcblx0XHR2YXIgbGlzdDtcblx0XHRpZiAoIGNhbWVyYXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdGxpc3RzLnNldCggc2NlbmUsIG5ldyBXZWFrTWFwKCkgKTtcblx0XHRcdGxpc3RzLmdldCggc2NlbmUgKS5zZXQoIGNhbWVyYSwgbGlzdCApO1xuXG5cdFx0XHRzY2VuZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uU2NlbmVEaXNwb3NlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsaXN0ID0gY2FtZXJhcy5nZXQoIGNhbWVyYSApO1xuXHRcdFx0aWYgKCBsaXN0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bGlzdCA9IG5ldyBXZWJHTFJlbmRlckxpc3QoKTtcblx0XHRcdFx0Y2FtZXJhcy5zZXQoIGNhbWVyYSwgbGlzdCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZGlzcG9zZSgpIHtcblxuXHRcdGxpc3RzID0gbmV3IFdlYWtNYXAoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGdldCxcblx0XHRkaXNwb3NlOiBkaXNwb3NlXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFVuaWZvcm1zQ2FjaGUoKSB7XG5cblx0dmFyIGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKClcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1Nwb3RMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRwb3NpdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGRpcmVjdGlvbjogbmV3IFZlY3RvcjMoKSxcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdGRpc3RhbmNlOiAwLFxuXHRcdFx0XHRcdFx0Y29uZUNvczogMCxcblx0XHRcdFx0XHRcdHBlbnVtYnJhQ29zOiAwLFxuXHRcdFx0XHRcdFx0ZGVjYXk6IDBcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ1BvaW50TGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IG5ldyBWZWN0b3IzKCksXG5cdFx0XHRcdFx0XHRjb2xvcjogbmV3IENvbG9yKCksXG5cdFx0XHRcdFx0XHRkaXN0YW5jZTogMCxcblx0XHRcdFx0XHRcdGRlY2F5OiAwXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXHRcdFx0XHRcdHVuaWZvcm1zID0ge1xuXHRcdFx0XHRcdFx0ZGlyZWN0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0c2t5Q29sb3I6IG5ldyBDb2xvcigpLFxuXHRcdFx0XHRcdFx0Z3JvdW5kQ29sb3I6IG5ldyBDb2xvcigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdSZWN0QXJlYUxpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdGNvbG9yOiBuZXcgQ29sb3IoKSxcblx0XHRcdFx0XHRcdHBvc2l0aW9uOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZldpZHRoOiBuZXcgVmVjdG9yMygpLFxuXHRcdFx0XHRcdFx0aGFsZkhlaWdodDogbmV3IFZlY3RvcjMoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0bGlnaHRzWyBsaWdodC5pZCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdHJldHVybiB1bmlmb3JtcztcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFNoYWRvd1VuaWZvcm1zQ2FjaGUoKSB7XG5cblx0dmFyIGxpZ2h0cyA9IHt9O1xuXG5cdHJldHVybiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHRcdGlmICggbGlnaHRzWyBsaWdodC5pZCBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxpZ2h0c1sgbGlnaHQuaWQgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdW5pZm9ybXM7XG5cblx0XHRcdHN3aXRjaCAoIGxpZ2h0LnR5cGUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnRGlyZWN0aW9uYWxMaWdodCc6XG5cdFx0XHRcdFx0dW5pZm9ybXMgPSB7XG5cdFx0XHRcdFx0XHRzaGFkb3dCaWFzOiAwLFxuXHRcdFx0XHRcdFx0c2hhZG93UmFkaXVzOiAxLFxuXHRcdFx0XHRcdFx0c2hhZG93TWFwU2l6ZTogbmV3IFZlY3RvcjIoKVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnU3BvdExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlICdQb2ludExpZ2h0Jzpcblx0XHRcdFx0XHR1bmlmb3JtcyA9IHtcblx0XHRcdFx0XHRcdHNoYWRvd0JpYXM6IDAsXG5cdFx0XHRcdFx0XHRzaGFkb3dSYWRpdXM6IDEsXG5cdFx0XHRcdFx0XHRzaGFkb3dNYXBTaXplOiBuZXcgVmVjdG9yMigpLFxuXHRcdFx0XHRcdFx0c2hhZG93Q2FtZXJhTmVhcjogMSxcblx0XHRcdFx0XHRcdHNoYWRvd0NhbWVyYUZhcjogMTAwMFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IHNldCBSZWN0QXJlYUxpZ2h0IHNoYWRvdyB1bmlmb3Jtc1xuXG5cdFx0XHR9XG5cblx0XHRcdGxpZ2h0c1sgbGlnaHQuaWQgXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRyZXR1cm4gdW5pZm9ybXM7XG5cblx0XHR9XG5cblx0fTtcblxufVxuXG5cblxudmFyIG5leHRWZXJzaW9uID0gMDtcblxuZnVuY3Rpb24gc2hhZG93Q2FzdGluZ0xpZ2h0c0ZpcnN0KCBsaWdodEEsIGxpZ2h0QiApIHtcblxuXHRyZXR1cm4gKCBsaWdodEIuY2FzdFNoYWRvdyA/IDEgOiAwICkgLSAoIGxpZ2h0QS5jYXN0U2hhZG93ID8gMSA6IDAgKTtcblxufVxuXG5mdW5jdGlvbiBXZWJHTExpZ2h0cygpIHtcblxuXHR2YXIgY2FjaGUgPSBuZXcgVW5pZm9ybXNDYWNoZSgpO1xuXG5cdHZhciBzaGFkb3dDYWNoZSA9IFNoYWRvd1VuaWZvcm1zQ2FjaGUoKTtcblxuXHR2YXIgc3RhdGUgPSB7XG5cblx0XHR2ZXJzaW9uOiAwLFxuXG5cdFx0aGFzaDoge1xuXHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGg6IC0gMSxcblx0XHRcdHBvaW50TGVuZ3RoOiAtIDEsXG5cdFx0XHRzcG90TGVuZ3RoOiAtIDEsXG5cdFx0XHRyZWN0QXJlYUxlbmd0aDogLSAxLFxuXHRcdFx0aGVtaUxlbmd0aDogLSAxLFxuXG5cdFx0XHRudW1EaXJlY3Rpb25hbFNoYWRvd3M6IC0gMSxcblx0XHRcdG51bVBvaW50U2hhZG93czogLSAxLFxuXHRcdFx0bnVtU3BvdFNoYWRvd3M6IC0gMVxuXHRcdH0sXG5cblx0XHRhbWJpZW50OiBbIDAsIDAsIDAgXSxcblx0XHRwcm9iZTogW10sXG5cdFx0ZGlyZWN0aW9uYWw6IFtdLFxuXHRcdGRpcmVjdGlvbmFsU2hhZG93OiBbXSxcblx0XHRkaXJlY3Rpb25hbFNoYWRvd01hcDogW10sXG5cdFx0ZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdHNwb3Q6IFtdLFxuXHRcdHNwb3RTaGFkb3c6IFtdLFxuXHRcdHNwb3RTaGFkb3dNYXA6IFtdLFxuXHRcdHNwb3RTaGFkb3dNYXRyaXg6IFtdLFxuXHRcdHJlY3RBcmVhOiBbXSxcblx0XHRwb2ludDogW10sXG5cdFx0cG9pbnRTaGFkb3c6IFtdLFxuXHRcdHBvaW50U2hhZG93TWFwOiBbXSxcblx0XHRwb2ludFNoYWRvd01hdHJpeDogW10sXG5cdFx0aGVtaTogW11cblxuXHR9O1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSBzdGF0ZS5wcm9iZS5wdXNoKCBuZXcgVmVjdG9yMygpICk7XG5cblx0dmFyIHZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgbWF0cml4NCA9IG5ldyBNYXRyaXg0KCk7XG5cdHZhciBtYXRyaXg0MiA9IG5ldyBNYXRyaXg0KCk7XG5cblx0ZnVuY3Rpb24gc2V0dXAoIGxpZ2h0cywgc2hhZG93cywgY2FtZXJhICkge1xuXG5cdFx0dmFyIHIgPSAwLCBnID0gMCwgYiA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkgc3RhdGUucHJvYmVbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdHZhciBkaXJlY3Rpb25hbExlbmd0aCA9IDA7XG5cdFx0dmFyIHBvaW50TGVuZ3RoID0gMDtcblx0XHR2YXIgc3BvdExlbmd0aCA9IDA7XG5cdFx0dmFyIHJlY3RBcmVhTGVuZ3RoID0gMDtcblx0XHR2YXIgaGVtaUxlbmd0aCA9IDA7XG5cblx0XHR2YXIgbnVtRGlyZWN0aW9uYWxTaGFkb3dzID0gMDtcblx0XHR2YXIgbnVtUG9pbnRTaGFkb3dzID0gMDtcblx0XHR2YXIgbnVtU3BvdFNoYWRvd3MgPSAwO1xuXG5cdFx0dmFyIHZpZXdNYXRyaXggPSBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlO1xuXG5cdFx0bGlnaHRzLnNvcnQoIHNoYWRvd0Nhc3RpbmdMaWdodHNGaXJzdCApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gbGlnaHRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBsaWdodCA9IGxpZ2h0c1sgaSBdO1xuXG5cdFx0XHR2YXIgY29sb3IgPSBsaWdodC5jb2xvcjtcblx0XHRcdHZhciBpbnRlbnNpdHkgPSBsaWdodC5pbnRlbnNpdHk7XG5cdFx0XHR2YXIgZGlzdGFuY2UgPSBsaWdodC5kaXN0YW5jZTtcblxuXHRcdFx0dmFyIHNoYWRvd01hcCA9ICggbGlnaHQuc2hhZG93ICYmIGxpZ2h0LnNoYWRvdy5tYXAgKSA/IGxpZ2h0LnNoYWRvdy5tYXAudGV4dHVyZSA6IG51bGw7XG5cblx0XHRcdGlmICggbGlnaHQuaXNBbWJpZW50TGlnaHQgKSB7XG5cblx0XHRcdFx0ciArPSBjb2xvci5yICogaW50ZW5zaXR5O1xuXHRcdFx0XHRnICs9IGNvbG9yLmcgKiBpbnRlbnNpdHk7XG5cdFx0XHRcdGIgKz0gY29sb3IuYiAqIGludGVuc2l0eTtcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNMaWdodFByb2JlICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDk7IGogKysgKSB7XG5cblx0XHRcdFx0XHRzdGF0ZS5wcm9iZVsgaiBdLmFkZFNjYWxlZFZlY3RvciggbGlnaHQuc2guY29lZmZpY2llbnRzWyBqIF0sIGludGVuc2l0eSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNEaXJlY3Rpb25hbExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBsaWdodC5pbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc3ViKCB2ZWN0b3IzICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi50cmFuc2Zvcm1EaXJlY3Rpb24oIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdFx0c3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dbIGRpcmVjdGlvbmFsTGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3Jtcztcblx0XHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hdHJpeFsgZGlyZWN0aW9uYWxMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1EaXJlY3Rpb25hbFNoYWRvd3MgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsWyBkaXJlY3Rpb25hbExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0ZGlyZWN0aW9uYWxMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzU3BvdExpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLmFwcGx5TWF0cml4NCggdmlld01hdHJpeCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmNvbG9yLmNvcHkoIGNvbG9yICkubXVsdGlwbHlTY2FsYXIoIGludGVuc2l0eSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuXG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdHZlY3RvcjMuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uLnN1YiggdmVjdG9yMyApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29uZUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wZW51bWJyYUNvcyA9IE1hdGguY29zKCBsaWdodC5hbmdsZSAqICggMSAtIGxpZ2h0LnBlbnVtYnJhICkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZGVjYXkgPSBsaWdodC5kZWNheTtcblxuXHRcdFx0XHRpZiAoIGxpZ2h0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvd1VuaWZvcm1zID0gc2hhZG93Q2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93QmlhcyA9IHNoYWRvdy5iaWFzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd1JhZGl1cyA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0XHRcdFx0c2hhZG93VW5pZm9ybXMuc2hhZG93TWFwU2l6ZSA9IHNoYWRvdy5tYXBTaXplO1xuXG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd1sgc3BvdExlbmd0aCBdID0gc2hhZG93VW5pZm9ybXM7XG5cdFx0XHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcFsgc3BvdExlbmd0aCBdID0gc2hhZG93TWFwO1xuXHRcdFx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXhbIHNwb3RMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1TcG90U2hhZG93cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3RhdGUuc3BvdFsgc3BvdExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0c3BvdExlbmd0aCArKztcblxuXHRcdFx0fSBlbHNlIGlmICggbGlnaHQuaXNSZWN0QXJlYUxpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHQvLyAoYSkgaW50ZW5zaXR5IGlzIHRoZSB0b3RhbCB2aXNpYmxlIGxpZ2h0IGVtaXR0ZWRcblx0XHRcdFx0Ly91bmlmb3Jtcy5jb2xvci5jb3B5KCBjb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgLyAoIGxpZ2h0LndpZHRoICogbGlnaHQuaGVpZ2h0ICogTWF0aC5QSSApICk7XG5cblx0XHRcdFx0Ly8gKGIpIGludGVuc2l0eSBpcyB0aGUgYnJpZ2h0bmVzcyBvZiB0aGUgbGlnaHRcblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggY29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5wb3NpdGlvbi5hcHBseU1hdHJpeDQoIHZpZXdNYXRyaXggKTtcblxuXHRcdFx0XHQvLyBleHRyYWN0IGxvY2FsIHJvdGF0aW9uIG9mIGxpZ2h0IHRvIGRlcml2ZSB3aWR0aC9oZWlnaHQgaGFsZiB2ZWN0b3JzXG5cdFx0XHRcdG1hdHJpeDQyLmlkZW50aXR5KCk7XG5cdFx0XHRcdG1hdHJpeDQuY29weSggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4NC5wcmVtdWx0aXBseSggdmlld01hdHJpeCApO1xuXHRcdFx0XHRtYXRyaXg0Mi5leHRyYWN0Um90YXRpb24oIG1hdHJpeDQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguc2V0KCBsaWdodC53aWR0aCAqIDAuNSwgMC4wLCAwLjAgKTtcblx0XHRcdFx0dW5pZm9ybXMuaGFsZkhlaWdodC5zZXQoIDAuMCwgbGlnaHQuaGVpZ2h0ICogMC41LCAwLjAgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmV2lkdGguYXBwbHlNYXRyaXg0KCBtYXRyaXg0MiApO1xuXHRcdFx0XHR1bmlmb3Jtcy5oYWxmSGVpZ2h0LmFwcGx5TWF0cml4NCggbWF0cml4NDIgKTtcblxuXHRcdFx0XHQvLyBUT0RPIChhYmVsbmF0aW9uKTogUmVjdEFyZWFMaWdodCBkaXN0YW5jZT9cblx0XHRcdFx0Ly8gdW5pZm9ybXMuZGlzdGFuY2UgPSBkaXN0YW5jZTtcblxuXHRcdFx0XHRzdGF0ZS5yZWN0QXJlYVsgcmVjdEFyZWFMZW5ndGggXSA9IHVuaWZvcm1zO1xuXG5cdFx0XHRcdHJlY3RBcmVhTGVuZ3RoICsrO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBsaWdodC5pc1BvaW50TGlnaHQgKSB7XG5cblx0XHRcdFx0dmFyIHVuaWZvcm1zID0gY2FjaGUuZ2V0KCBsaWdodCApO1xuXG5cdFx0XHRcdHVuaWZvcm1zLnBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbGlnaHQubWF0cml4V29ybGQgKTtcblx0XHRcdFx0dW5pZm9ybXMucG9zaXRpb24uYXBwbHlNYXRyaXg0KCB2aWV3TWF0cml4ICk7XG5cblx0XHRcdFx0dW5pZm9ybXMuY29sb3IuY29weSggbGlnaHQuY29sb3IgKS5tdWx0aXBseVNjYWxhciggbGlnaHQuaW50ZW5zaXR5ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpc3RhbmNlID0gbGlnaHQuZGlzdGFuY2U7XG5cdFx0XHRcdHVuaWZvcm1zLmRlY2F5ID0gbGlnaHQuZGVjYXk7XG5cblx0XHRcdFx0aWYgKCBsaWdodC5jYXN0U2hhZG93ICkge1xuXG5cdFx0XHRcdFx0dmFyIHNoYWRvdyA9IGxpZ2h0LnNoYWRvdztcblxuXHRcdFx0XHRcdHZhciBzaGFkb3dVbmlmb3JtcyA9IHNoYWRvd0NhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0JpYXMgPSBzaGFkb3cuYmlhcztcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dSYWRpdXMgPSBzaGFkb3cucmFkaXVzO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd01hcFNpemUgPSBzaGFkb3cubWFwU2l6ZTtcblx0XHRcdFx0XHRzaGFkb3dVbmlmb3Jtcy5zaGFkb3dDYW1lcmFOZWFyID0gc2hhZG93LmNhbWVyYS5uZWFyO1xuXHRcdFx0XHRcdHNoYWRvd1VuaWZvcm1zLnNoYWRvd0NhbWVyYUZhciA9IHNoYWRvdy5jYW1lcmEuZmFyO1xuXG5cdFx0XHRcdFx0c3RhdGUucG9pbnRTaGFkb3dbIHBvaW50TGVuZ3RoIF0gPSBzaGFkb3dVbmlmb3Jtcztcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcFsgcG9pbnRMZW5ndGggXSA9IHNoYWRvd01hcDtcblx0XHRcdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hdHJpeFsgcG9pbnRMZW5ndGggXSA9IGxpZ2h0LnNoYWRvdy5tYXRyaXg7XG5cblx0XHRcdFx0XHRudW1Qb2ludFNoYWRvd3MgKys7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN0YXRlLnBvaW50WyBwb2ludExlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0cG9pbnRMZW5ndGggKys7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGxpZ2h0LmlzSGVtaXNwaGVyZUxpZ2h0ICkge1xuXG5cdFx0XHRcdHZhciB1bmlmb3JtcyA9IGNhY2hlLmdldCggbGlnaHQgKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24uc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdFx0XHR1bmlmb3Jtcy5kaXJlY3Rpb24udHJhbnNmb3JtRGlyZWN0aW9uKCB2aWV3TWF0cml4ICk7XG5cdFx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbi5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR1bmlmb3Jtcy5za3lDb2xvci5jb3B5KCBsaWdodC5jb2xvciApLm11bHRpcGx5U2NhbGFyKCBpbnRlbnNpdHkgKTtcblx0XHRcdFx0dW5pZm9ybXMuZ3JvdW5kQ29sb3IuY29weSggbGlnaHQuZ3JvdW5kQ29sb3IgKS5tdWx0aXBseVNjYWxhciggaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0c3RhdGUuaGVtaVsgaGVtaUxlbmd0aCBdID0gdW5pZm9ybXM7XG5cblx0XHRcdFx0aGVtaUxlbmd0aCArKztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYW1iaWVudFsgMCBdID0gcjtcblx0XHRzdGF0ZS5hbWJpZW50WyAxIF0gPSBnO1xuXHRcdHN0YXRlLmFtYmllbnRbIDIgXSA9IGI7XG5cblx0XHR2YXIgaGFzaCA9IHN0YXRlLmhhc2g7XG5cblx0XHRpZiAoIGhhc2guZGlyZWN0aW9uYWxMZW5ndGggIT09IGRpcmVjdGlvbmFsTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnBvaW50TGVuZ3RoICE9PSBwb2ludExlbmd0aCB8fFxuXHRcdFx0aGFzaC5zcG90TGVuZ3RoICE9PSBzcG90TGVuZ3RoIHx8XG5cdFx0XHRoYXNoLnJlY3RBcmVhTGVuZ3RoICE9PSByZWN0QXJlYUxlbmd0aCB8fFxuXHRcdFx0aGFzaC5oZW1pTGVuZ3RoICE9PSBoZW1pTGVuZ3RoIHx8XG5cdFx0XHRoYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyAhPT0gbnVtRGlyZWN0aW9uYWxTaGFkb3dzIHx8XG5cdFx0XHRoYXNoLm51bVBvaW50U2hhZG93cyAhPT0gbnVtUG9pbnRTaGFkb3dzIHx8XG5cdFx0XHRoYXNoLm51bVNwb3RTaGFkb3dzICE9PSBudW1TcG90U2hhZG93cyApIHtcblxuXHRcdFx0c3RhdGUuZGlyZWN0aW9uYWwubGVuZ3RoID0gZGlyZWN0aW9uYWxMZW5ndGg7XG5cdFx0XHRzdGF0ZS5zcG90Lmxlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRzdGF0ZS5yZWN0QXJlYS5sZW5ndGggPSByZWN0QXJlYUxlbmd0aDtcblx0XHRcdHN0YXRlLnBvaW50Lmxlbmd0aCA9IHBvaW50TGVuZ3RoO1xuXHRcdFx0c3RhdGUuaGVtaS5sZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvdy5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5kaXJlY3Rpb25hbFNoYWRvd01hcC5sZW5ndGggPSBudW1EaXJlY3Rpb25hbFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvdy5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5wb2ludFNoYWRvd01hcC5sZW5ndGggPSBudW1Qb2ludFNoYWRvd3M7XG5cdFx0XHRzdGF0ZS5zcG90U2hhZG93Lmxlbmd0aCA9IG51bVNwb3RTaGFkb3dzO1xuXHRcdFx0c3RhdGUuc3BvdFNoYWRvd01hcC5sZW5ndGggPSBudW1TcG90U2hhZG93cztcblx0XHRcdHN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdHN0YXRlLnBvaW50U2hhZG93TWF0cml4Lmxlbmd0aCA9IG51bVBvaW50U2hhZG93cztcblx0XHRcdHN0YXRlLnNwb3RTaGFkb3dNYXRyaXgubGVuZ3RoID0gbnVtU3BvdFNoYWRvd3M7XG5cblx0XHRcdGhhc2guZGlyZWN0aW9uYWxMZW5ndGggPSBkaXJlY3Rpb25hbExlbmd0aDtcblx0XHRcdGhhc2gucG9pbnRMZW5ndGggPSBwb2ludExlbmd0aDtcblx0XHRcdGhhc2guc3BvdExlbmd0aCA9IHNwb3RMZW5ndGg7XG5cdFx0XHRoYXNoLnJlY3RBcmVhTGVuZ3RoID0gcmVjdEFyZWFMZW5ndGg7XG5cdFx0XHRoYXNoLmhlbWlMZW5ndGggPSBoZW1pTGVuZ3RoO1xuXG5cdFx0XHRoYXNoLm51bURpcmVjdGlvbmFsU2hhZG93cyA9IG51bURpcmVjdGlvbmFsU2hhZG93cztcblx0XHRcdGhhc2gubnVtUG9pbnRTaGFkb3dzID0gbnVtUG9pbnRTaGFkb3dzO1xuXHRcdFx0aGFzaC5udW1TcG90U2hhZG93cyA9IG51bVNwb3RTaGFkb3dzO1xuXG5cdFx0XHRzdGF0ZS52ZXJzaW9uID0gbmV4dFZlcnNpb24gKys7XG5cblx0XHR9XG5cblx0fVxuXG5cdHJldHVybiB7XG5cdFx0c2V0dXA6IHNldHVwLFxuXHRcdHN0YXRlOiBzdGF0ZVxuXHR9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlclN0YXRlKCkge1xuXG5cdHZhciBsaWdodHMgPSBuZXcgV2ViR0xMaWdodHMoKTtcblxuXHR2YXIgbGlnaHRzQXJyYXkgPSBbXTtcblx0dmFyIHNoYWRvd3NBcnJheSA9IFtdO1xuXG5cdGZ1bmN0aW9uIGluaXQoKSB7XG5cblx0XHRsaWdodHNBcnJheS5sZW5ndGggPSAwO1xuXHRcdHNoYWRvd3NBcnJheS5sZW5ndGggPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBwdXNoTGlnaHQoIGxpZ2h0ICkge1xuXG5cdFx0bGlnaHRzQXJyYXkucHVzaCggbGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFNoYWRvdyggc2hhZG93TGlnaHQgKSB7XG5cblx0XHRzaGFkb3dzQXJyYXkucHVzaCggc2hhZG93TGlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0dXBMaWdodHMoIGNhbWVyYSApIHtcblxuXHRcdGxpZ2h0cy5zZXR1cCggbGlnaHRzQXJyYXksIHNoYWRvd3NBcnJheSwgY2FtZXJhICk7XG5cblx0fVxuXG5cdHZhciBzdGF0ZSA9IHtcblx0XHRsaWdodHNBcnJheTogbGlnaHRzQXJyYXksXG5cdFx0c2hhZG93c0FycmF5OiBzaGFkb3dzQXJyYXksXG5cblx0XHRsaWdodHM6IGxpZ2h0c1xuXHR9O1xuXG5cdHJldHVybiB7XG5cdFx0aW5pdDogaW5pdCxcblx0XHRzdGF0ZTogc3RhdGUsXG5cdFx0c2V0dXBMaWdodHM6IHNldHVwTGlnaHRzLFxuXG5cdFx0cHVzaExpZ2h0OiBwdXNoTGlnaHQsXG5cdFx0cHVzaFNoYWRvdzogcHVzaFNoYWRvd1xuXHR9O1xuXG59XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyU3RhdGVzKCkge1xuXG5cdHZhciByZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdGZ1bmN0aW9uIG9uU2NlbmVEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBzY2VuZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHNjZW5lLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25TY2VuZURpc3Bvc2UgKTtcblxuXHRcdHJlbmRlclN0YXRlcy5kZWxldGUoIHNjZW5lICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldCggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdHZhciByZW5kZXJTdGF0ZTtcblxuXHRcdGlmICggcmVuZGVyU3RhdGVzLmhhcyggc2NlbmUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdHJlbmRlclN0YXRlID0gbmV3IFdlYkdMUmVuZGVyU3RhdGUoKTtcblx0XHRcdHJlbmRlclN0YXRlcy5zZXQoIHNjZW5lLCBuZXcgV2Vha01hcCgpICk7XG5cdFx0XHRyZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSApLnNldCggY2FtZXJhLCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHRzY2VuZS5hZGRFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uU2NlbmVEaXNwb3NlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lICkuaGFzKCBjYW1lcmEgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0cmVuZGVyU3RhdGUgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZSgpO1xuXHRcdFx0XHRyZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSApLnNldCggY2FtZXJhLCByZW5kZXJTdGF0ZSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHJlbmRlclN0YXRlID0gcmVuZGVyU3RhdGVzLmdldCggc2NlbmUgKS5nZXQoIGNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVuZGVyU3RhdGU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG5cblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2Vha01hcCgpO1xuXG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdGdldDogZ2V0LFxuXHRcdGRpc3Bvc2U6IGRpc3Bvc2Vcblx0fTtcblxufVxuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHBzOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKlxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoRGVwdGhNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hEZXB0aE1hdGVyaWFsJztcblxuXHR0aGlzLmRlcHRoUGFja2luZyA9IEJhc2ljRGVwdGhQYWNraW5nO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBudWxsO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gMTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gMDtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cblx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaERlcHRoTWF0ZXJpYWw7XG5cbk1lc2hEZXB0aE1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hEZXB0aE1hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaERlcHRoTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmRlcHRoUGFja2luZyA9IHNvdXJjZS5kZXB0aFBhY2tpbmc7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgcmVmZXJlbmNlUG9zaXRpb246IDxmbG9hdD4sXG4gKiAgbmVhckRpc3RhbmNlOiA8ZmxvYXQ+LFxuICogIGZhckRpc3RhbmNlOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PlxuICpcbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoRGlzdGFuY2VNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hEaXN0YW5jZU1hdGVyaWFsJztcblxuXHR0aGlzLnJlZmVyZW5jZVBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblx0dGhpcy5uZWFyRGlzdGFuY2UgPSAxO1xuXHR0aGlzLmZhckRpc3RhbmNlID0gMTAwMDtcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5mb2cgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWVzaERpc3RhbmNlTWF0ZXJpYWw7XG5cbk1lc2hEaXN0YW5jZU1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hEaXN0YW5jZU1hdGVyaWFsID0gdHJ1ZTtcblxuTWVzaERpc3RhbmNlTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnJlZmVyZW5jZVBvc2l0aW9uLmNvcHkoIHNvdXJjZS5yZWZlcmVuY2VQb3NpdGlvbiApO1xuXHR0aGlzLm5lYXJEaXN0YW5jZSA9IHNvdXJjZS5uZWFyRGlzdGFuY2U7XG5cdHRoaXMuZmFyRGlzdGFuY2UgPSBzb3VyY2UuZmFyRGlzdGFuY2U7XG5cblx0dGhpcy5za2lubmluZyA9IHNvdXJjZS5za2lubmluZztcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBzb3VyY2UubW9ycGhUYXJnZXRzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gc291cmNlLmRpc3BsYWNlbWVudE1hcDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IHNvdXJjZS5kaXNwbGFjZW1lbnRTY2FsZTtcblx0dGhpcy5kaXNwbGFjZW1lbnRCaWFzID0gc291cmNlLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbnZhciB2c21fZnJhZyA9IFwidW5pZm9ybSBzYW1wbGVyMkQgc2hhZG93X3Bhc3M7XFxudW5pZm9ybSB2ZWMyIHJlc29sdXRpb247XFxudW5pZm9ybSBmbG9hdCByYWRpdXM7XFxuI2luY2x1ZGUgPHBhY2tpbmc+XFxudm9pZCBtYWluKCkge1xcbiAgZmxvYXQgbWVhbiA9IDAuMDtcXG4gIGZsb2F0IHNxdWFyZWRfbWVhbiA9IDAuMDtcXG5cXHRmbG9hdCBkZXB0aCA9IHVucGFja1JHQkFUb0RlcHRoKCB0ZXh0dXJlMkQoIHNoYWRvd19wYXNzLCAoIGdsX0ZyYWdDb29yZC54eSAgKSAvIHJlc29sdXRpb24gKSApO1xcbiAgZm9yICggZmxvYXQgaSA9IC0xLjA7IGkgPCAxLjAgOyBpICs9IFNBTVBMRV9SQVRFKSB7XFxuICAgICNpZmRlZiBIT1JJWk9OQUxfUEFTU1xcbiAgICAgIHZlYzIgZGlzdHJpYnV0aW9uID0gdW5wYWNrUkdCQVRvMkhhbGYoIHRleHR1cmUyRCggc2hhZG93X3Bhc3MsICggZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMiggaSwgMC4wICkgKiByYWRpdXMgKSAvIHJlc29sdXRpb24gKSApO1xcbiAgICAgIG1lYW4gKz0gZGlzdHJpYnV0aW9uLng7XFxuICAgICAgc3F1YXJlZF9tZWFuICs9IGRpc3RyaWJ1dGlvbi55ICogZGlzdHJpYnV0aW9uLnkgKyBkaXN0cmlidXRpb24ueCAqIGRpc3RyaWJ1dGlvbi54O1xcbiAgICAjZWxzZVxcbiAgICAgIGZsb2F0IGRlcHRoID0gdW5wYWNrUkdCQVRvRGVwdGgoIHRleHR1cmUyRCggc2hhZG93X3Bhc3MsICggZ2xfRnJhZ0Nvb3JkLnh5ICsgdmVjMiggMC4wLCAgaSApICAqIHJhZGl1cyApIC8gcmVzb2x1dGlvbiApICk7XFxuICAgICAgbWVhbiArPSBkZXB0aDtcXG4gICAgICBzcXVhcmVkX21lYW4gKz0gZGVwdGggKiBkZXB0aDtcXG4gICAgI2VuZGlmXFxuICB9XFxuICBtZWFuID0gbWVhbiAqIEhBTEZfU0FNUExFX1JBVEU7XFxuICBzcXVhcmVkX21lYW4gPSBzcXVhcmVkX21lYW4gKiBIQUxGX1NBTVBMRV9SQVRFO1xcbiAgZmxvYXQgc3RkX2RldiA9IHNxcnQoIHNxdWFyZWRfbWVhbiAtIG1lYW4gKiBtZWFuICk7XFxuICBnbF9GcmFnQ29sb3IgPSBwYWNrMkhhbGZUb1JHQkEoIHZlYzIoIG1lYW4sIHN0ZF9kZXYgKSApO1xcbn1cIjtcblxudmFyIHZzbV92ZXJ0ID0gXCJ2b2lkIG1haW4oKSB7XFxuXFx0Z2xfUG9zaXRpb24gPSB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XFxufVwiO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU2hhZG93TWFwKCBfcmVuZGVyZXIsIF9vYmplY3RzLCBtYXhUZXh0dXJlU2l6ZSApIHtcblxuXHR2YXIgX2ZydXN0dW0gPSBuZXcgRnJ1c3R1bSgpLFxuXG5cdFx0X3NoYWRvd01hcFNpemUgPSBuZXcgVmVjdG9yMigpLFxuXHRcdF92aWV3cG9ydFNpemUgPSBuZXcgVmVjdG9yMigpLFxuXG5cdFx0X3ZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSxcblxuXHRcdF9kZXB0aE1hdGVyaWFscyA9IFtdLFxuXHRcdF9kaXN0YW5jZU1hdGVyaWFscyA9IFtdLFxuXG5cdFx0X21hdGVyaWFsQ2FjaGUgPSB7fTtcblxuXHR2YXIgc2hhZG93U2lkZSA9IHsgMDogQmFja1NpZGUsIDE6IEZyb250U2lkZSwgMjogRG91YmxlU2lkZSB9O1xuXG5cdHZhciBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsID0gbmV3IFNoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRkZWZpbmVzOiB7XG5cdFx0XHRTQU1QTEVfUkFURTogMi4wIC8gOC4wLFxuXHRcdFx0SEFMRl9TQU1QTEVfUkFURTogMS4wIC8gOC4wXG5cdFx0fSxcblxuXHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRzaGFkb3dfcGFzczogeyB2YWx1ZTogbnVsbCB9LFxuXHRcdFx0cmVzb2x1dGlvbjogeyB2YWx1ZTogbmV3IFZlY3RvcjIoKSB9LFxuXHRcdFx0cmFkaXVzOiB7IHZhbHVlOiA0LjAgfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IHZzbV92ZXJ0LFxuXG5cdFx0ZnJhZ21lbnRTaGFkZXI6IHZzbV9mcmFnXG5cblx0fSApO1xuXG5cdHZhciBzaGFkb3dNYXRlcmlhbEhvcml6b25hbCA9IHNoYWRvd01hdGVyaWFsVmVydGljYWwuY2xvbmUoKTtcblx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwuZGVmaW5lcy5IT1JJWk9OQUxfUEFTUyA9IDE7XG5cblx0dmFyIGZ1bGxTY3JlZW5UcmkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0ZnVsbFNjcmVlblRyaS5zZXRBdHRyaWJ1dGUoXG5cdFx0XCJwb3NpdGlvblwiLFxuXHRcdG5ldyBCdWZmZXJBdHRyaWJ1dGUoXG5cdFx0XHRuZXcgRmxvYXQzMkFycmF5KCBbIC0gMSwgLSAxLCAwLjUsIDMsIC0gMSwgMC41LCAtIDEsIDMsIDAuNSBdICksXG5cdFx0XHQzXG5cdFx0KVxuXHQpO1xuXG5cdHZhciBmdWxsU2NyZWVuTWVzaCA9IG5ldyBNZXNoKCBmdWxsU2NyZWVuVHJpLCBzaGFkb3dNYXRlcmlhbFZlcnRpY2FsICk7XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlO1xuXHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy50eXBlID0gUENGU2hhZG93TWFwO1xuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBsaWdodHMsIHNjZW5lLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdGlmICggc2NvcGUuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgJiYgc2NvcGUubmVlZHNVcGRhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0aWYgKCBsaWdodHMubGVuZ3RoID09PSAwICkgcmV0dXJuO1xuXG5cdFx0dmFyIGN1cnJlbnRSZW5kZXJUYXJnZXQgPSBfcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0dmFyIGFjdGl2ZUN1YmVGYWNlID0gX3JlbmRlcmVyLmdldEFjdGl2ZUN1YmVGYWNlKCk7XG5cdFx0dmFyIGFjdGl2ZU1pcG1hcExldmVsID0gX3JlbmRlcmVyLmdldEFjdGl2ZU1pcG1hcExldmVsKCk7XG5cblx0XHR2YXIgX3N0YXRlID0gX3JlbmRlcmVyLnN0YXRlO1xuXG5cdFx0Ly8gU2V0IEdMIHN0YXRlIGZvciBkZXB0aCBtYXAuXG5cdFx0X3N0YXRlLnNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cdFx0X3N0YXRlLmJ1ZmZlcnMuY29sb3Iuc2V0Q2xlYXIoIDEsIDEsIDEsIDEgKTtcblx0XHRfc3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0X3N0YXRlLnNldFNjaXNzb3JUZXN0KCBmYWxzZSApO1xuXG5cdFx0Ly8gcmVuZGVyIGRlcHRoIG1hcFxuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGxpZ2h0cy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGxpZ2h0ID0gbGlnaHRzWyBpIF07XG5cdFx0XHR2YXIgc2hhZG93ID0gbGlnaHQuc2hhZG93O1xuXG5cdFx0XHRpZiAoIHNoYWRvdyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMU2hhZG93TWFwOicsIGxpZ2h0LCAnaGFzIG5vIHNoYWRvdy4nICk7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLmNvcHkoIHNoYWRvdy5tYXBTaXplICk7XG5cblx0XHRcdHZhciBzaGFkb3dGcmFtZUV4dGVudHMgPSBzaGFkb3cuZ2V0RnJhbWVFeHRlbnRzKCk7XG5cblx0XHRcdF9zaGFkb3dNYXBTaXplLm11bHRpcGx5KCBzaGFkb3dGcmFtZUV4dGVudHMgKTtcblxuXHRcdFx0X3ZpZXdwb3J0U2l6ZS5jb3B5KCBzaGFkb3cubWFwU2l6ZSApO1xuXG5cdFx0XHRpZiAoIF9zaGFkb3dNYXBTaXplLnggPiBtYXhUZXh0dXJlU2l6ZSB8fCBfc2hhZG93TWFwU2l6ZS55ID4gbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xTaGFkb3dNYXA6JywgbGlnaHQsICdoYXMgc2hhZG93IGV4Y2VlZGluZyBtYXggdGV4dHVyZSBzaXplLCByZWR1Y2luZycgKTtcblxuXHRcdFx0XHRpZiAoIF9zaGFkb3dNYXBTaXplLnggPiBtYXhUZXh0dXJlU2l6ZSApIHtcblxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueCA9IE1hdGguZmxvb3IoIG1heFRleHR1cmVTaXplIC8gc2hhZG93RnJhbWVFeHRlbnRzLnggKTtcblx0XHRcdFx0XHRfc2hhZG93TWFwU2l6ZS54ID0gX3ZpZXdwb3J0U2l6ZS54ICogc2hhZG93RnJhbWVFeHRlbnRzLng7XG5cdFx0XHRcdFx0c2hhZG93Lm1hcFNpemUueCA9IF92aWV3cG9ydFNpemUueDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBfc2hhZG93TWFwU2l6ZS55ID4gbWF4VGV4dHVyZVNpemUgKSB7XG5cblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgPSBNYXRoLmZsb29yKCBtYXhUZXh0dXJlU2l6ZSAvIHNoYWRvd0ZyYW1lRXh0ZW50cy55ICk7XG5cdFx0XHRcdFx0X3NoYWRvd01hcFNpemUueSA9IF92aWV3cG9ydFNpemUueSAqIHNoYWRvd0ZyYW1lRXh0ZW50cy55O1xuXHRcdFx0XHRcdHNoYWRvdy5tYXBTaXplLnkgPSBfdmlld3BvcnRTaXplLnk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93Lm1hcCA9PT0gbnVsbCAmJiAhIHNoYWRvdy5pc1BvaW50TGlnaHRTaGFkb3cgJiYgdGhpcy50eXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRcdFx0dmFyIHBhcnMgPSB7IG1pbkZpbHRlcjogTGluZWFyRmlsdGVyLCBtYWdGaWx0ZXI6IExpbmVhckZpbHRlciwgZm9ybWF0OiBSR0JBRm9ybWF0IH07XG5cblx0XHRcdFx0c2hhZG93Lm1hcCA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXHRcdFx0XHRzaGFkb3cubWFwLnRleHR1cmUubmFtZSA9IGxpZ2h0Lm5hbWUgKyBcIi5zaGFkb3dNYXBcIjtcblxuXHRcdFx0XHRzaGFkb3cubWFwUGFzcyA9IG5ldyBXZWJHTFJlbmRlclRhcmdldCggX3NoYWRvd01hcFNpemUueCwgX3NoYWRvd01hcFNpemUueSwgcGFycyApO1xuXG5cdFx0XHRcdHNoYWRvdy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc2hhZG93Lm1hcCA9PT0gbnVsbCApIHtcblxuXHRcdFx0XHR2YXIgcGFycyA9IHsgbWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLCBtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsIGZvcm1hdDogUkdCQUZvcm1hdCB9O1xuXG5cdFx0XHRcdHNoYWRvdy5tYXAgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIF9zaGFkb3dNYXBTaXplLngsIF9zaGFkb3dNYXBTaXplLnksIHBhcnMgKTtcblx0XHRcdFx0c2hhZG93Lm1hcC50ZXh0dXJlLm5hbWUgPSBsaWdodC5uYW1lICsgXCIuc2hhZG93TWFwXCI7XG5cblx0XHRcdFx0c2hhZG93LmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cblx0XHRcdHZhciB2aWV3cG9ydENvdW50ID0gc2hhZG93LmdldFZpZXdwb3J0Q291bnQoKTtcblxuXHRcdFx0Zm9yICggdmFyIHZwID0gMDsgdnAgPCB2aWV3cG9ydENvdW50OyB2cCArKyApIHtcblxuXHRcdFx0XHR2YXIgdmlld3BvcnQgPSBzaGFkb3cuZ2V0Vmlld3BvcnQoIHZwICk7XG5cblx0XHRcdFx0X3ZpZXdwb3J0LnNldChcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnggKiB2aWV3cG9ydC54LFxuXHRcdFx0XHRcdF92aWV3cG9ydFNpemUueSAqIHZpZXdwb3J0LnksXG5cdFx0XHRcdFx0X3ZpZXdwb3J0U2l6ZS54ICogdmlld3BvcnQueixcblx0XHRcdFx0XHRfdmlld3BvcnRTaXplLnkgKiB2aWV3cG9ydC53XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0X3N0YXRlLnZpZXdwb3J0KCBfdmlld3BvcnQgKTtcblxuXHRcdFx0XHRzaGFkb3cudXBkYXRlTWF0cmljZXMoIGxpZ2h0LCB2cCApO1xuXG5cdFx0XHRcdF9mcnVzdHVtID0gc2hhZG93LmdldEZydXN0dW0oKTtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBjYW1lcmEsIHNoYWRvdy5jYW1lcmEsIGxpZ2h0LCB0aGlzLnR5cGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBkbyBibHVyIHBhc3MgZm9yIFZTTVxuXG5cdFx0XHRpZiAoICEgc2hhZG93LmlzUG9pbnRMaWdodFNoYWRvdyAmJiB0aGlzLnR5cGUgPT09IFZTTVNoYWRvd01hcCApIHtcblxuXHRcdFx0XHRWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzY29wZS5uZWVkc1VwZGF0ZSA9IGZhbHNlO1xuXG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggY3VycmVudFJlbmRlclRhcmdldCwgYWN0aXZlQ3ViZUZhY2UsIGFjdGl2ZU1pcG1hcExldmVsICk7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBWU01QYXNzKCBzaGFkb3csIGNhbWVyYSApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IF9vYmplY3RzLnVwZGF0ZSggZnVsbFNjcmVlbk1lc2ggKTtcblxuXHRcdC8vIHZlcnRpY2FsIHBhc3NcblxuXHRcdHNoYWRvd01hdGVyaWFsVmVydGljYWwudW5pZm9ybXMuc2hhZG93X3Bhc3MudmFsdWUgPSBzaGFkb3cubWFwLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yZXNvbHV0aW9uLnZhbHVlID0gc2hhZG93Lm1hcFNpemU7XG5cdFx0c2hhZG93TWF0ZXJpYWxWZXJ0aWNhbC51bmlmb3Jtcy5yYWRpdXMudmFsdWUgPSBzaGFkb3cucmFkaXVzO1xuXHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIHNoYWRvdy5tYXBQYXNzICk7XG5cdFx0X3JlbmRlcmVyLmNsZWFyKCk7XG5cdFx0X3JlbmRlcmVyLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBudWxsLCBnZW9tZXRyeSwgc2hhZG93TWF0ZXJpYWxWZXJ0aWNhbCwgZnVsbFNjcmVlbk1lc2gsIG51bGwgKTtcblxuXHRcdC8vIGhvcml6b25hbCBwYXNzXG5cblx0XHRzaGFkb3dNYXRlcmlhbEhvcml6b25hbC51bmlmb3Jtcy5zaGFkb3dfcGFzcy52YWx1ZSA9IHNoYWRvdy5tYXBQYXNzLnRleHR1cmU7XG5cdFx0c2hhZG93TWF0ZXJpYWxIb3Jpem9uYWwudW5pZm9ybXMucmVzb2x1dGlvbi52YWx1ZSA9IHNoYWRvdy5tYXBTaXplO1xuXHRcdHNoYWRvd01hdGVyaWFsSG9yaXpvbmFsLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHNoYWRvdy5yYWRpdXM7XG5cdFx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggc2hhZG93Lm1hcCApO1xuXHRcdF9yZW5kZXJlci5jbGVhcigpO1xuXHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIGNhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIHNoYWRvd01hdGVyaWFsSG9yaXpvbmFsLCBmdWxsU2NyZWVuTWVzaCwgbnVsbCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXREZXB0aE1hdGVyaWFsVmFyaWFudCggdXNlTW9ycGhpbmcsIHVzZVNraW5uaW5nLCB1c2VJbnN0YW5jaW5nICkge1xuXG5cdFx0dmFyIGluZGV4ID0gdXNlTW9ycGhpbmcgPDwgMCB8IHVzZVNraW5uaW5nIDw8IDEgfCB1c2VJbnN0YW5jaW5nIDw8IDI7XG5cblx0XHR2YXIgbWF0ZXJpYWwgPSBfZGVwdGhNYXRlcmlhbHNbIGluZGV4IF07XG5cblx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hdGVyaWFsID0gbmV3IE1lc2hEZXB0aE1hdGVyaWFsKCB7XG5cblx0XHRcdFx0ZGVwdGhQYWNraW5nOiBSR0JBRGVwdGhQYWNraW5nLFxuXG5cdFx0XHRcdG1vcnBoVGFyZ2V0czogdXNlTW9ycGhpbmcsXG5cdFx0XHRcdHNraW5uaW5nOiB1c2VTa2lubmluZ1xuXG5cdFx0XHR9ICk7XG5cblx0XHRcdF9kZXB0aE1hdGVyaWFsc1sgaW5kZXggXSA9IG1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGVyaWFsO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBnZXREaXN0YW5jZU1hdGVyaWFsVmFyaWFudCggdXNlTW9ycGhpbmcsIHVzZVNraW5uaW5nLCB1c2VJbnN0YW5jaW5nICkge1xuXG5cdFx0dmFyIGluZGV4ID0gdXNlTW9ycGhpbmcgPDwgMCB8IHVzZVNraW5uaW5nIDw8IDEgfCB1c2VJbnN0YW5jaW5nIDw8IDI7XG5cblx0XHR2YXIgbWF0ZXJpYWwgPSBfZGlzdGFuY2VNYXRlcmlhbHNbIGluZGV4IF07XG5cblx0XHRpZiAoIG1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdG1hdGVyaWFsID0gbmV3IE1lc2hEaXN0YW5jZU1hdGVyaWFsKCB7XG5cblx0XHRcdFx0bW9ycGhUYXJnZXRzOiB1c2VNb3JwaGluZyxcblx0XHRcdFx0c2tpbm5pbmc6IHVzZVNraW5uaW5nXG5cblx0XHRcdH0gKTtcblxuXHRcdFx0X2Rpc3RhbmNlTWF0ZXJpYWxzWyBpbmRleCBdID0gbWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0ZXJpYWw7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldERlcHRoTWF0ZXJpYWwoIG9iamVjdCwgbWF0ZXJpYWwsIGxpZ2h0LCBzaGFkb3dDYW1lcmFOZWFyLCBzaGFkb3dDYW1lcmFGYXIsIHR5cGUgKSB7XG5cblx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3QuZ2VvbWV0cnk7XG5cblx0XHR2YXIgcmVzdWx0ID0gbnVsbDtcblxuXHRcdHZhciBnZXRNYXRlcmlhbFZhcmlhbnQgPSBnZXREZXB0aE1hdGVyaWFsVmFyaWFudDtcblx0XHR2YXIgY3VzdG9tTWF0ZXJpYWwgPSBvYmplY3QuY3VzdG9tRGVwdGhNYXRlcmlhbDtcblxuXHRcdGlmICggbGlnaHQuaXNQb2ludExpZ2h0ID09PSB0cnVlICkge1xuXG5cdFx0XHRnZXRNYXRlcmlhbFZhcmlhbnQgPSBnZXREaXN0YW5jZU1hdGVyaWFsVmFyaWFudDtcblx0XHRcdGN1c3RvbU1hdGVyaWFsID0gb2JqZWN0LmN1c3RvbURpc3RhbmNlTWF0ZXJpYWw7XG5cblx0XHR9XG5cblx0XHRpZiAoIGN1c3RvbU1hdGVyaWFsID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciB1c2VNb3JwaGluZyA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHR1c2VNb3JwaGluZyA9IGdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcyAmJiBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMucG9zaXRpb24gJiYgZ2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzLnBvc2l0aW9uLmxlbmd0aCA+IDA7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdHVzZU1vcnBoaW5nID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzICYmIGdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdXNlU2tpbm5pbmcgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNTa2lubmVkTWVzaCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLnNraW5uaW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0dXNlU2tpbm5pbmcgPSB0cnVlO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFNoYWRvd01hcDogVEhSRUUuU2tpbm5lZE1lc2ggd2l0aCBtYXRlcmlhbC5za2lubmluZyBzZXQgdG8gZmFsc2U6Jywgb2JqZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHZhciB1c2VJbnN0YW5jaW5nID0gb2JqZWN0LmlzSW5zdGFuY2VkTWVzaCA9PT0gdHJ1ZTtcblxuXHRcdFx0cmVzdWx0ID0gZ2V0TWF0ZXJpYWxWYXJpYW50KCB1c2VNb3JwaGluZywgdXNlU2tpbm5pbmcsIHVzZUluc3RhbmNpbmcgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdCA9IGN1c3RvbU1hdGVyaWFsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfcmVuZGVyZXIubG9jYWxDbGlwcGluZ0VuYWJsZWQgJiZcblx0XHRcdFx0bWF0ZXJpYWwuY2xpcFNoYWRvd3MgPT09IHRydWUgJiZcblx0XHRcdFx0bWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHQvLyBpbiB0aGlzIGNhc2Ugd2UgbmVlZCBhIHVuaXF1ZSBtYXRlcmlhbCBpbnN0YW5jZSByZWZsZWN0aW5nIHRoZVxuXHRcdFx0Ly8gYXBwcm9wcmlhdGUgc3RhdGVcblxuXHRcdFx0dmFyIGtleUEgPSByZXN1bHQudXVpZCwga2V5QiA9IG1hdGVyaWFsLnV1aWQ7XG5cblx0XHRcdHZhciBtYXRlcmlhbHNGb3JWYXJpYW50ID0gX21hdGVyaWFsQ2FjaGVbIGtleUEgXTtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbHNGb3JWYXJpYW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWxzRm9yVmFyaWFudCA9IHt9O1xuXHRcdFx0XHRfbWF0ZXJpYWxDYWNoZVsga2V5QSBdID0gbWF0ZXJpYWxzRm9yVmFyaWFudDtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2FjaGVkTWF0ZXJpYWwgPSBtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF07XG5cblx0XHRcdGlmICggY2FjaGVkTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjYWNoZWRNYXRlcmlhbCA9IHJlc3VsdC5jbG9uZSgpO1xuXHRcdFx0XHRtYXRlcmlhbHNGb3JWYXJpYW50WyBrZXlCIF0gPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdFx0fVxuXG5cdFx0XHRyZXN1bHQgPSBjYWNoZWRNYXRlcmlhbDtcblxuXHRcdH1cblxuXHRcdHJlc3VsdC52aXNpYmxlID0gbWF0ZXJpYWwudmlzaWJsZTtcblx0XHRyZXN1bHQud2lyZWZyYW1lID0gbWF0ZXJpYWwud2lyZWZyYW1lO1xuXG5cdFx0aWYgKCB0eXBlID09PSBWU01TaGFkb3dNYXAgKSB7XG5cblx0XHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9PSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogbWF0ZXJpYWwuc2lkZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlc3VsdC5zaWRlID0gKCBtYXRlcmlhbC5zaGFkb3dTaWRlICE9PSBudWxsICkgPyBtYXRlcmlhbC5zaGFkb3dTaWRlIDogc2hhZG93U2lkZVsgbWF0ZXJpYWwuc2lkZSBdO1xuXG5cdFx0fVxuXG5cdFx0cmVzdWx0LmNsaXBTaGFkb3dzID0gbWF0ZXJpYWwuY2xpcFNoYWRvd3M7XG5cdFx0cmVzdWx0LmNsaXBwaW5nUGxhbmVzID0gbWF0ZXJpYWwuY2xpcHBpbmdQbGFuZXM7XG5cdFx0cmVzdWx0LmNsaXBJbnRlcnNlY3Rpb24gPSBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uO1xuXG5cdFx0cmVzdWx0LndpcmVmcmFtZUxpbmV3aWR0aCA9IG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRyZXN1bHQubGluZXdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0aWYgKCBsaWdodC5pc1BvaW50TGlnaHQgPT09IHRydWUgJiYgcmVzdWx0LmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgPT09IHRydWUgKSB7XG5cblx0XHRcdHJlc3VsdC5yZWZlcmVuY2VQb3NpdGlvbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRyZXN1bHQubmVhckRpc3RhbmNlID0gc2hhZG93Q2FtZXJhTmVhcjtcblx0XHRcdHJlc3VsdC5mYXJEaXN0YW5jZSA9IHNoYWRvd0NhbWVyYUZhcjtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRpZiAoIHZpc2libGUgJiYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkgKSB7XG5cblx0XHRcdGlmICggKCBvYmplY3QuY2FzdFNoYWRvdyB8fCAoIG9iamVjdC5yZWNlaXZlU2hhZG93ICYmIHR5cGUgPT09IFZTTVNoYWRvd01hcCApICkgJiYgKCAhIG9iamVjdC5mcnVzdHVtQ3VsbGVkIHx8IF9mcnVzdHVtLmludGVyc2VjdHNPYmplY3QoIG9iamVjdCApICkgKSB7XG5cblx0XHRcdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBfb2JqZWN0cy51cGRhdGUoIG9iamVjdCApO1xuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBtYXRlcmlhbCApICkge1xuXG5cdFx0XHRcdFx0dmFyIGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0XHRcdGZvciAoIHZhciBrID0gMCwga2wgPSBncm91cHMubGVuZ3RoOyBrIDwga2w7IGsgKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgayBdO1xuXHRcdFx0XHRcdFx0dmFyIGdyb3VwTWF0ZXJpYWwgPSBtYXRlcmlhbFsgZ3JvdXAubWF0ZXJpYWxJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdyb3VwTWF0ZXJpYWwgJiYgZ3JvdXBNYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBkZXB0aE1hdGVyaWFsID0gZ2V0RGVwdGhNYXRlcmlhbCggb2JqZWN0LCBncm91cE1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIsIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHRfcmVuZGVyZXIucmVuZGVyQnVmZmVyRGlyZWN0KCBzaGFkb3dDYW1lcmEsIG51bGwsIGdlb21ldHJ5LCBkZXB0aE1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0dmFyIGRlcHRoTWF0ZXJpYWwgPSBnZXREZXB0aE1hdGVyaWFsKCBvYmplY3QsIG1hdGVyaWFsLCBsaWdodCwgc2hhZG93Q2FtZXJhLm5lYXIsIHNoYWRvd0NhbWVyYS5mYXIsIHR5cGUgKTtcblxuXHRcdFx0XHRcdF9yZW5kZXJlci5yZW5kZXJCdWZmZXJEaXJlY3QoIHNoYWRvd0NhbWVyYSwgbnVsbCwgZ2VvbWV0cnksIGRlcHRoTWF0ZXJpYWwsIG9iamVjdCwgbnVsbCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cmVuZGVyT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBjYW1lcmEsIHNoYWRvd0NhbWVyYSwgbGlnaHQsIHR5cGUgKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMU3RhdGUoIGdsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKSB7XG5cblx0dmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXG5cdGZ1bmN0aW9uIENvbG9yQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGNvbG9yID0gbmV3IFZlY3RvcjQoKTtcblx0XHR2YXIgY3VycmVudENvbG9yTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRDb2xvckNsZWFyID0gbmV3IFZlY3RvcjQoIDAsIDAsIDAsIDAgKTtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggY29sb3JNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudENvbG9yTWFzayAhPT0gY29sb3JNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuY29sb3JNYXNrKCBjb2xvck1hc2ssIGNvbG9yTWFzaywgY29sb3JNYXNrLCBjb2xvck1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50Q29sb3JNYXNrID0gY29sb3JNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggciwgZywgYiwgYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0XHRcdGlmICggcHJlbXVsdGlwbGllZEFscGhhID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0ciAqPSBhOyBnICo9IGE7IGIgKj0gYTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29sb3Iuc2V0KCByLCBnLCBiLCBhICk7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50Q29sb3JDbGVhci5lcXVhbHMoIGNvbG9yICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0Z2wuY2xlYXJDb2xvciggciwgZywgYiwgYSApO1xuXHRcdFx0XHRcdGN1cnJlbnRDb2xvckNsZWFyLmNvcHkoIGNvbG9yICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnRDb2xvck1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50Q29sb3JDbGVhci5zZXQoIC0gMSwgMCwgMCwgMCApOyAvLyBzZXQgdG8gaW52YWxpZCBzdGF0ZVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBEZXB0aEJ1ZmZlcigpIHtcblxuXHRcdHZhciBsb2NrZWQgPSBmYWxzZTtcblxuXHRcdHZhciBjdXJyZW50RGVwdGhNYXNrID0gbnVsbDtcblx0XHR2YXIgY3VycmVudERlcHRoRnVuYyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnREZXB0aENsZWFyID0gbnVsbDtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNldFRlc3Q6IGZ1bmN0aW9uICggZGVwdGhUZXN0ICkge1xuXG5cdFx0XHRcdGlmICggZGVwdGhUZXN0ICkge1xuXG5cdFx0XHRcdFx0ZW5hYmxlKCAyOTI5ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGRpc2FibGUoIDI5MjkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggZGVwdGhNYXNrICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudERlcHRoTWFzayAhPT0gZGVwdGhNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuZGVwdGhNYXNrKCBkZXB0aE1hc2sgKTtcblx0XHRcdFx0XHRjdXJyZW50RGVwdGhNYXNrID0gZGVwdGhNYXNrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0RnVuYzogZnVuY3Rpb24gKCBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhGdW5jICE9PSBkZXB0aEZ1bmMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRlcHRoRnVuYyApIHtcblxuXHRcdFx0XHRcdFx0c3dpdGNoICggZGVwdGhGdW5jICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTmV2ZXJEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTEyICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBBbHdheXNEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE5ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBMZXNzRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxMyApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTGVzc0VxdWFsRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE0ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE4ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0Y2FzZSBHcmVhdGVyRGVwdGg6XG5cblx0XHRcdFx0XHRcdFx0XHRnbC5kZXB0aEZ1bmMoIDUxNiApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgTm90RXF1YWxEZXB0aDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE3ICk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGdsLmRlcHRoRnVuYyggNTE1ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gZGVwdGhGdW5jO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0TG9ja2VkOiBmdW5jdGlvbiAoIGxvY2sgKSB7XG5cblx0XHRcdFx0bG9ja2VkID0gbG9jaztcblxuXHRcdFx0fSxcblxuXHRcdFx0c2V0Q2xlYXI6IGZ1bmN0aW9uICggZGVwdGggKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50RGVwdGhDbGVhciAhPT0gZGVwdGggKSB7XG5cblx0XHRcdFx0XHRnbC5jbGVhckRlcHRoKCBkZXB0aCApO1xuXHRcdFx0XHRcdGN1cnJlbnREZXB0aENsZWFyID0gZGVwdGg7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdGN1cnJlbnREZXB0aE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50RGVwdGhGdW5jID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudERlcHRoQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHRmdW5jdGlvbiBTdGVuY2lsQnVmZmVyKCkge1xuXG5cdFx0dmFyIGxvY2tlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRnVuYyA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsUmVmID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxGdW5jTWFzayA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsRmFpbCA9IG51bGw7XG5cdFx0dmFyIGN1cnJlbnRTdGVuY2lsWkZhaWwgPSBudWxsO1xuXHRcdHZhciBjdXJyZW50U3RlbmNpbFpQYXNzID0gbnVsbDtcblx0XHR2YXIgY3VycmVudFN0ZW5jaWxDbGVhciA9IG51bGw7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZXRUZXN0OiBmdW5jdGlvbiAoIHN0ZW5jaWxUZXN0ICkge1xuXG5cdFx0XHRcdGlmICggISBsb2NrZWQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHN0ZW5jaWxUZXN0ICkge1xuXG5cdFx0XHRcdFx0XHRlbmFibGUoIDI5NjAgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdGRpc2FibGUoIDI5NjAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldE1hc2s6IGZ1bmN0aW9uICggc3RlbmNpbE1hc2sgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbE1hc2sgIT09IHN0ZW5jaWxNYXNrICYmICEgbG9ja2VkICkge1xuXG5cdFx0XHRcdFx0Z2wuc3RlbmNpbE1hc2soIHN0ZW5jaWxNYXNrICk7XG5cdFx0XHRcdFx0Y3VycmVudFN0ZW5jaWxNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRGdW5jOiBmdW5jdGlvbiAoIHN0ZW5jaWxGdW5jLCBzdGVuY2lsUmVmLCBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRTdGVuY2lsRnVuYyAhPT0gc3RlbmNpbEZ1bmMgfHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbFJlZiBcdCE9PSBzdGVuY2lsUmVmIFx0fHxcblx0XHRcdFx0ICAgICBjdXJyZW50U3RlbmNpbEZ1bmNNYXNrICE9PSBzdGVuY2lsTWFzayApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxGdW5jKCBzdGVuY2lsRnVuYywgc3RlbmNpbFJlZiwgc3RlbmNpbE1hc2sgKTtcblxuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuYyA9IHN0ZW5jaWxGdW5jO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsUmVmID0gc3RlbmNpbFJlZjtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmNNYXNrID0gc3RlbmNpbE1hc2s7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRPcDogZnVuY3Rpb24gKCBzdGVuY2lsRmFpbCwgc3RlbmNpbFpGYWlsLCBzdGVuY2lsWlBhc3MgKSB7XG5cblx0XHRcdFx0aWYgKCBjdXJyZW50U3RlbmNpbEZhaWxcdCAhPT0gc3RlbmNpbEZhaWwgXHR8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWkZhaWwgIT09IHN0ZW5jaWxaRmFpbCB8fFxuXHRcdFx0XHQgICAgIGN1cnJlbnRTdGVuY2lsWlBhc3MgIT09IHN0ZW5jaWxaUGFzcyApIHtcblxuXHRcdFx0XHRcdGdsLnN0ZW5jaWxPcCggc3RlbmNpbEZhaWwsIHN0ZW5jaWxaRmFpbCwgc3RlbmNpbFpQYXNzICk7XG5cblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBzdGVuY2lsRmFpbDtcblx0XHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gc3RlbmNpbFpGYWlsO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsWlBhc3MgPSBzdGVuY2lsWlBhc3M7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRMb2NrZWQ6IGZ1bmN0aW9uICggbG9jayApIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBsb2NrO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXRDbGVhcjogZnVuY3Rpb24gKCBzdGVuY2lsICkge1xuXG5cdFx0XHRcdGlmICggY3VycmVudFN0ZW5jaWxDbGVhciAhPT0gc3RlbmNpbCApIHtcblxuXHRcdFx0XHRcdGdsLmNsZWFyU3RlbmNpbCggc3RlbmNpbCApO1xuXHRcdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBzdGVuY2lsO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0cmVzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRsb2NrZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRjdXJyZW50U3RlbmNpbE1hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZ1bmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFJlZiA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsRnVuY01hc2sgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbEZhaWwgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50U3RlbmNpbFpGYWlsID0gbnVsbDtcblx0XHRcdFx0Y3VycmVudFN0ZW5jaWxaUGFzcyA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRTdGVuY2lsQ2xlYXIgPSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdH1cblxuXHQvL1xuXG5cdHZhciBjb2xvckJ1ZmZlciA9IG5ldyBDb2xvckJ1ZmZlcigpO1xuXHR2YXIgZGVwdGhCdWZmZXIgPSBuZXcgRGVwdGhCdWZmZXIoKTtcblx0dmFyIHN0ZW5jaWxCdWZmZXIgPSBuZXcgU3RlbmNpbEJ1ZmZlcigpO1xuXG5cdHZhciBtYXhWZXJ0ZXhBdHRyaWJ1dGVzID0gZ2wuZ2V0UGFyYW1ldGVyKCAzNDkyMSApO1xuXHR2YXIgbmV3QXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cdHZhciBlbmFibGVkQXR0cmlidXRlcyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cdHZhciBhdHRyaWJ1dGVEaXZpc29ycyA9IG5ldyBVaW50OEFycmF5KCBtYXhWZXJ0ZXhBdHRyaWJ1dGVzICk7XG5cblx0dmFyIGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHR2YXIgY3VycmVudFByb2dyYW0gPSBudWxsO1xuXG5cdHZhciBjdXJyZW50QmxlbmRpbmdFbmFibGVkID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRFcXVhdGlvbiA9IG51bGw7XG5cdHZhciBjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRHN0ID0gbnVsbDtcblx0dmFyIGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kU3JjQWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudEJsZW5kRHN0QWxwaGEgPSBudWxsO1xuXHR2YXIgY3VycmVudFByZW11bHRpcGxlZEFscGhhID0gZmFsc2U7XG5cblx0dmFyIGN1cnJlbnRGbGlwU2lkZWQgPSBudWxsO1xuXHR2YXIgY3VycmVudEN1bGxGYWNlID0gbnVsbDtcblxuXHR2YXIgY3VycmVudExpbmVXaWR0aCA9IG51bGw7XG5cblx0dmFyIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gbnVsbDtcblx0dmFyIGN1cnJlbnRQb2x5Z29uT2Zmc2V0VW5pdHMgPSBudWxsO1xuXG5cdHZhciBtYXhUZXh0dXJlcyA9IGdsLmdldFBhcmFtZXRlciggMzU2NjEgKTtcblxuXHR2YXIgbGluZVdpZHRoQXZhaWxhYmxlID0gZmFsc2U7XG5cdHZhciB2ZXJzaW9uID0gMDtcblx0dmFyIGdsVmVyc2lvbiA9IGdsLmdldFBhcmFtZXRlciggNzkzOCApO1xuXG5cdGlmICggZ2xWZXJzaW9uLmluZGV4T2YoICdXZWJHTCcgKSAhPT0gLSAxICkge1xuXG5cdFx0dmVyc2lvbiA9IHBhcnNlRmxvYXQoIC9eV2ViR0xcXCAoWzAtOV0pLy5leGVjKCBnbFZlcnNpb24gKVsgMSBdICk7XG5cdFx0bGluZVdpZHRoQXZhaWxhYmxlID0gKCB2ZXJzaW9uID49IDEuMCApO1xuXG5cdH0gZWxzZSBpZiAoIGdsVmVyc2lvbi5pbmRleE9mKCAnT3BlbkdMIEVTJyApICE9PSAtIDEgKSB7XG5cblx0XHR2ZXJzaW9uID0gcGFyc2VGbG9hdCggL15PcGVuR0xcXCBFU1xcIChbMC05XSkvLmV4ZWMoIGdsVmVyc2lvbiApWyAxIF0gKTtcblx0XHRsaW5lV2lkdGhBdmFpbGFibGUgPSAoIHZlcnNpb24gPj0gMi4wICk7XG5cblx0fVxuXG5cdHZhciBjdXJyZW50VGV4dHVyZVNsb3QgPSBudWxsO1xuXHR2YXIgY3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHR2YXIgY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpO1xuXHR2YXIgY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKTtcblxuXHRmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKCB0eXBlLCB0YXJnZXQsIGNvdW50ICkge1xuXG5cdFx0dmFyIGRhdGEgPSBuZXcgVWludDhBcnJheSggNCApOyAvLyA0IGlzIHJlcXVpcmVkIHRvIG1hdGNoIGRlZmF1bHQgdW5wYWNrIGFsaWdubWVudCBvZiA0LlxuXHRcdHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG5cdFx0Z2wuYmluZFRleHR1cmUoIHR5cGUsIHRleHR1cmUgKTtcblx0XHRnbC50ZXhQYXJhbWV0ZXJpKCB0eXBlLCAxMDI0MSwgOTcyOCApO1xuXHRcdGdsLnRleFBhcmFtZXRlcmkoIHR5cGUsIDEwMjQwLCA5NzI4ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSArKyApIHtcblxuXHRcdFx0Z2wudGV4SW1hZ2UyRCggdGFyZ2V0ICsgaSwgMCwgNjQwOCwgMSwgMSwgMCwgNjQwOCwgNTEyMSwgZGF0YSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRleHR1cmU7XG5cblx0fVxuXG5cdHZhciBlbXB0eVRleHR1cmVzID0ge307XG5cdGVtcHR5VGV4dHVyZXNbIDM1NTMgXSA9IGNyZWF0ZVRleHR1cmUoIDM1NTMsIDM1NTMsIDEgKTtcblx0ZW1wdHlUZXh0dXJlc1sgMzQwNjcgXSA9IGNyZWF0ZVRleHR1cmUoIDM0MDY3LCAzNDA2OSwgNiApO1xuXG5cdC8vIGluaXRcblxuXHRjb2xvckJ1ZmZlci5zZXRDbGVhciggMCwgMCwgMCwgMSApO1xuXHRkZXB0aEJ1ZmZlci5zZXRDbGVhciggMSApO1xuXHRzdGVuY2lsQnVmZmVyLnNldENsZWFyKCAwICk7XG5cblx0ZW5hYmxlKCAyOTI5ICk7XG5cdGRlcHRoQnVmZmVyLnNldEZ1bmMoIExlc3NFcXVhbERlcHRoICk7XG5cblx0c2V0RmxpcFNpZGVkKCBmYWxzZSApO1xuXHRzZXRDdWxsRmFjZSggQ3VsbEZhY2VCYWNrICk7XG5cdGVuYWJsZSggMjg4NCApO1xuXG5cdHNldEJsZW5kaW5nKCBOb0JsZW5kaW5nICk7XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBpbml0QXR0cmlidXRlcygpIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG5ld0F0dHJpYnV0ZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0bmV3QXR0cmlidXRlc1sgaSBdID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlKCBhdHRyaWJ1dGUgKSB7XG5cblx0XHRlbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBhdHRyaWJ1dGUsIDAgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggYXR0cmlidXRlLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdFx0bmV3QXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPSAxO1xuXG5cdFx0aWYgKCBlbmFibGVkQXR0cmlidXRlc1sgYXR0cmlidXRlIF0gPT09IDAgKSB7XG5cblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCBhdHRyaWJ1dGUgKTtcblx0XHRcdGVuYWJsZWRBdHRyaWJ1dGVzWyBhdHRyaWJ1dGUgXSA9IDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSAhPT0gbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRcdFx0dmFyIGV4dGVuc2lvbiA9IGlzV2ViR0wyID8gZ2wgOiBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICk7XG5cblx0XHRcdGV4dGVuc2lvblsgaXNXZWJHTDIgPyAndmVydGV4QXR0cmliRGl2aXNvcicgOiAndmVydGV4QXR0cmliRGl2aXNvckFOR0xFJyBdKCBhdHRyaWJ1dGUsIG1lc2hQZXJBdHRyaWJ1dGUgKTtcblx0XHRcdGF0dHJpYnV0ZURpdmlzb3JzWyBhdHRyaWJ1dGUgXSA9IG1lc2hQZXJBdHRyaWJ1dGU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gZW5hYmxlZEF0dHJpYnV0ZXMubGVuZ3RoOyBpICE9PSBsOyArKyBpICkge1xuXG5cdFx0XHRpZiAoIGVuYWJsZWRBdHRyaWJ1dGVzWyBpIF0gIT09IG5ld0F0dHJpYnV0ZXNbIGkgXSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZW5hYmxlKCBpZCApIHtcblxuXHRcdGlmICggZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0Z2wuZW5hYmxlKCBpZCApO1xuXHRcdFx0ZW5hYmxlZENhcGFiaWxpdGllc1sgaWQgXSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRpc2FibGUoIGlkICkge1xuXG5cdFx0aWYgKCBlbmFibGVkQ2FwYWJpbGl0aWVzWyBpZCBdICE9PSBmYWxzZSApIHtcblxuXHRcdFx0Z2wuZGlzYWJsZSggaWQgKTtcblx0XHRcdGVuYWJsZWRDYXBhYmlsaXRpZXNbIGlkIF0gPSBmYWxzZTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXNlUHJvZ3JhbSggcHJvZ3JhbSApIHtcblxuXHRcdGlmICggY3VycmVudFByb2dyYW0gIT09IHByb2dyYW0gKSB7XG5cblx0XHRcdGdsLnVzZVByb2dyYW0oIHByb2dyYW0gKTtcblxuXHRcdFx0Y3VycmVudFByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblxuXHR9XG5cblx0dmFyIGVxdWF0aW9uVG9HTCA9IHtcblx0XHRbIEFkZEVxdWF0aW9uIF06IDMyNzc0LFxuXHRcdFsgU3VidHJhY3RFcXVhdGlvbiBdOiAzMjc3OCxcblx0XHRbIFJldmVyc2VTdWJ0cmFjdEVxdWF0aW9uIF06IDMyNzc5XG5cdH07XG5cblx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdGVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IDMyNzc1O1xuXHRcdGVxdWF0aW9uVG9HTFsgTWF4RXF1YXRpb24gXSA9IDMyNzc2O1xuXG5cdH0gZWxzZSB7XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfYmxlbmRfbWlubWF4JyApO1xuXG5cdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdGVxdWF0aW9uVG9HTFsgTWluRXF1YXRpb24gXSA9IGV4dGVuc2lvbi5NSU5fRVhUO1xuXHRcdFx0ZXF1YXRpb25Ub0dMWyBNYXhFcXVhdGlvbiBdID0gZXh0ZW5zaW9uLk1BWF9FWFQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdHZhciBmYWN0b3JUb0dMID0ge1xuXHRcdFsgWmVyb0ZhY3RvciBdOiAwLFxuXHRcdFsgT25lRmFjdG9yIF06IDEsXG5cdFx0WyBTcmNDb2xvckZhY3RvciBdOiA3NjgsXG5cdFx0WyBTcmNBbHBoYUZhY3RvciBdOiA3NzAsXG5cdFx0WyBTcmNBbHBoYVNhdHVyYXRlRmFjdG9yIF06IDc3Nixcblx0XHRbIERzdENvbG9yRmFjdG9yIF06IDc3NCxcblx0XHRbIERzdEFscGhhRmFjdG9yIF06IDc3Mixcblx0XHRbIE9uZU1pbnVzU3JjQ29sb3JGYWN0b3IgXTogNzY5LFxuXHRcdFsgT25lTWludXNTcmNBbHBoYUZhY3RvciBdOiA3NzEsXG5cdFx0WyBPbmVNaW51c0RzdENvbG9yRmFjdG9yIF06IDc3NSxcblx0XHRbIE9uZU1pbnVzRHN0QWxwaGFGYWN0b3IgXTogNzczXG5cdH07XG5cblx0ZnVuY3Rpb24gc2V0QmxlbmRpbmcoIGJsZW5kaW5nLCBibGVuZEVxdWF0aW9uLCBibGVuZFNyYywgYmxlbmREc3QsIGJsZW5kRXF1YXRpb25BbHBoYSwgYmxlbmRTcmNBbHBoYSwgYmxlbmREc3RBbHBoYSwgcHJlbXVsdGlwbGllZEFscGhhICkge1xuXG5cdFx0aWYgKCBibGVuZGluZyA9PT0gTm9CbGVuZGluZyApIHtcblxuXHRcdFx0aWYgKCBjdXJyZW50QmxlbmRpbmdFbmFibGVkICkge1xuXG5cdFx0XHRcdGRpc2FibGUoIDMwNDIgKTtcblx0XHRcdFx0Y3VycmVudEJsZW5kaW5nRW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdGlmICggISBjdXJyZW50QmxlbmRpbmdFbmFibGVkICkge1xuXG5cdFx0XHRlbmFibGUoIDMwNDIgKTtcblx0XHRcdGN1cnJlbnRCbGVuZGluZ0VuYWJsZWQgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZGluZyAhPT0gQ3VzdG9tQmxlbmRpbmcgKSB7XG5cblx0XHRcdGlmICggYmxlbmRpbmcgIT09IGN1cnJlbnRCbGVuZGluZyB8fCBwcmVtdWx0aXBsaWVkQWxwaGEgIT09IGN1cnJlbnRQcmVtdWx0aXBsZWRBbHBoYSApIHtcblxuXHRcdFx0XHRpZiAoIGN1cnJlbnRCbGVuZEVxdWF0aW9uICE9PSBBZGRFcXVhdGlvbiB8fCBjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhICE9PSBBZGRFcXVhdGlvbiApIHtcblxuXHRcdFx0XHRcdGdsLmJsZW5kRXF1YXRpb24oIDMyNzc0ICk7XG5cblx0XHRcdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IEFkZEVxdWF0aW9uO1xuXHRcdFx0XHRcdGN1cnJlbnRCbGVuZEVxdWF0aW9uQWxwaGEgPSBBZGRFcXVhdGlvbjtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBwcmVtdWx0aXBsaWVkQWxwaGEgKSB7XG5cblx0XHRcdFx0XHRzd2l0Y2ggKCBibGVuZGluZyApIHtcblxuXHRcdFx0XHRcdFx0Y2FzZSBOb3JtYWxCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDEsIDc3MSwgMSwgNzcxICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRjYXNlIEFkZGl0aXZlQmxlbmRpbmc6XG5cdFx0XHRcdFx0XHRcdGdsLmJsZW5kRnVuYyggMSwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggMCwgMCwgNzY5LCA3NzEgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdGNhc2UgTXVsdGlwbHlCbGVuZGluZzpcblx0XHRcdFx0XHRcdFx0Z2wuYmxlbmRGdW5jU2VwYXJhdGUoIDAsIDc2OCwgMCwgNzcwICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xTdGF0ZTogSW52YWxpZCBibGVuZGluZzogJywgYmxlbmRpbmcgKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHN3aXRjaCAoIGJsZW5kaW5nICkge1xuXG5cdFx0XHRcdFx0XHRjYXNlIE5vcm1hbEJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmNTZXBhcmF0ZSggNzcwLCA3NzEsIDEsIDc3MSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBBZGRpdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDc3MCwgMSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBTdWJ0cmFjdGl2ZUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDAsIDc2OSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0Y2FzZSBNdWx0aXBseUJsZW5kaW5nOlxuXHRcdFx0XHRcdFx0XHRnbC5ibGVuZEZ1bmMoIDAsIDc2OCApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6IEludmFsaWQgYmxlbmRpbmc6ICcsIGJsZW5kaW5nICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50QmxlbmRTcmMgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmREc3QgPSBudWxsO1xuXHRcdFx0XHRjdXJyZW50QmxlbmRTcmNBbHBoYSA9IG51bGw7XG5cdFx0XHRcdGN1cnJlbnRCbGVuZERzdEFscGhhID0gbnVsbDtcblxuXHRcdFx0XHRjdXJyZW50QmxlbmRpbmcgPSBibGVuZGluZztcblx0XHRcdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gcHJlbXVsdGlwbGllZEFscGhhO1xuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGN1c3RvbSBibGVuZGluZ1xuXG5cdFx0YmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhIHx8IGJsZW5kRXF1YXRpb247XG5cdFx0YmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGEgfHwgYmxlbmRTcmM7XG5cdFx0YmxlbmREc3RBbHBoYSA9IGJsZW5kRHN0QWxwaGEgfHwgYmxlbmREc3Q7XG5cblx0XHRpZiAoIGJsZW5kRXF1YXRpb24gIT09IGN1cnJlbnRCbGVuZEVxdWF0aW9uIHx8IGJsZW5kRXF1YXRpb25BbHBoYSAhPT0gY3VycmVudEJsZW5kRXF1YXRpb25BbHBoYSApIHtcblxuXHRcdFx0Z2wuYmxlbmRFcXVhdGlvblNlcGFyYXRlKCBlcXVhdGlvblRvR0xbIGJsZW5kRXF1YXRpb24gXSwgZXF1YXRpb25Ub0dMWyBibGVuZEVxdWF0aW9uQWxwaGEgXSApO1xuXG5cdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbiA9IGJsZW5kRXF1YXRpb247XG5cdFx0XHRjdXJyZW50QmxlbmRFcXVhdGlvbkFscGhhID0gYmxlbmRFcXVhdGlvbkFscGhhO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBibGVuZFNyYyAhPT0gY3VycmVudEJsZW5kU3JjIHx8IGJsZW5kRHN0ICE9PSBjdXJyZW50QmxlbmREc3QgfHwgYmxlbmRTcmNBbHBoYSAhPT0gY3VycmVudEJsZW5kU3JjQWxwaGEgfHwgYmxlbmREc3RBbHBoYSAhPT0gY3VycmVudEJsZW5kRHN0QWxwaGEgKSB7XG5cblx0XHRcdGdsLmJsZW5kRnVuY1NlcGFyYXRlKCBmYWN0b3JUb0dMWyBibGVuZFNyYyBdLCBmYWN0b3JUb0dMWyBibGVuZERzdCBdLCBmYWN0b3JUb0dMWyBibGVuZFNyY0FscGhhIF0sIGZhY3RvclRvR0xbIGJsZW5kRHN0QWxwaGEgXSApO1xuXG5cdFx0XHRjdXJyZW50QmxlbmRTcmMgPSBibGVuZFNyYztcblx0XHRcdGN1cnJlbnRCbGVuZERzdCA9IGJsZW5kRHN0O1xuXHRcdFx0Y3VycmVudEJsZW5kU3JjQWxwaGEgPSBibGVuZFNyY0FscGhhO1xuXHRcdFx0Y3VycmVudEJsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhO1xuXG5cdFx0fVxuXG5cdFx0Y3VycmVudEJsZW5kaW5nID0gYmxlbmRpbmc7XG5cdFx0Y3VycmVudFByZW11bHRpcGxlZEFscGhhID0gbnVsbDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApIHtcblxuXHRcdG1hdGVyaWFsLnNpZGUgPT09IERvdWJsZVNpZGVcblx0XHRcdD8gZGlzYWJsZSggMjg4NCApXG5cdFx0XHQ6IGVuYWJsZSggMjg4NCApO1xuXG5cdFx0dmFyIGZsaXBTaWRlZCA9ICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKTtcblx0XHRpZiAoIGZyb250RmFjZUNXICkgZmxpcFNpZGVkID0gISBmbGlwU2lkZWQ7XG5cblx0XHRzZXRGbGlwU2lkZWQoIGZsaXBTaWRlZCApO1xuXG5cdFx0KCBtYXRlcmlhbC5ibGVuZGluZyA9PT0gTm9ybWFsQmxlbmRpbmcgJiYgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPT09IGZhbHNlIClcblx0XHRcdD8gc2V0QmxlbmRpbmcoIE5vQmxlbmRpbmcgKVxuXHRcdFx0OiBzZXRCbGVuZGluZyggbWF0ZXJpYWwuYmxlbmRpbmcsIG1hdGVyaWFsLmJsZW5kRXF1YXRpb24sIG1hdGVyaWFsLmJsZW5kU3JjLCBtYXRlcmlhbC5ibGVuZERzdCwgbWF0ZXJpYWwuYmxlbmRFcXVhdGlvbkFscGhhLCBtYXRlcmlhbC5ibGVuZFNyY0FscGhhLCBtYXRlcmlhbC5ibGVuZERzdEFscGhhLCBtYXRlcmlhbC5wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGRlcHRoQnVmZmVyLnNldEZ1bmMoIG1hdGVyaWFsLmRlcHRoRnVuYyApO1xuXHRcdGRlcHRoQnVmZmVyLnNldFRlc3QoIG1hdGVyaWFsLmRlcHRoVGVzdCApO1xuXHRcdGRlcHRoQnVmZmVyLnNldE1hc2soIG1hdGVyaWFsLmRlcHRoV3JpdGUgKTtcblx0XHRjb2xvckJ1ZmZlci5zZXRNYXNrKCBtYXRlcmlhbC5jb2xvcldyaXRlICk7XG5cblx0XHR2YXIgc3RlbmNpbFdyaXRlID0gbWF0ZXJpYWwuc3RlbmNpbFdyaXRlO1xuXHRcdHN0ZW5jaWxCdWZmZXIuc2V0VGVzdCggc3RlbmNpbFdyaXRlICk7XG5cdFx0aWYgKCBzdGVuY2lsV3JpdGUgKSB7XG5cblx0XHRcdHN0ZW5jaWxCdWZmZXIuc2V0TWFzayggbWF0ZXJpYWwuc3RlbmNpbFdyaXRlTWFzayApO1xuXHRcdFx0c3RlbmNpbEJ1ZmZlci5zZXRGdW5jKCBtYXRlcmlhbC5zdGVuY2lsRnVuYywgbWF0ZXJpYWwuc3RlbmNpbFJlZiwgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrICk7XG5cdFx0XHRzdGVuY2lsQnVmZmVyLnNldE9wKCBtYXRlcmlhbC5zdGVuY2lsRmFpbCwgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsLCBtYXRlcmlhbC5zdGVuY2lsWlBhc3MgKTtcblxuXHRcdH1cblxuXHRcdHNldFBvbHlnb25PZmZzZXQoIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IsIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRVbml0cyApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldEZsaXBTaWRlZCggZmxpcFNpZGVkICkge1xuXG5cdFx0aWYgKCBjdXJyZW50RmxpcFNpZGVkICE9PSBmbGlwU2lkZWQgKSB7XG5cblx0XHRcdGlmICggZmxpcFNpZGVkICkge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGdsLmZyb250RmFjZSggMjMwNSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGN1cnJlbnRGbGlwU2lkZWQgPSBmbGlwU2lkZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldEN1bGxGYWNlKCBjdWxsRmFjZSApIHtcblxuXHRcdGlmICggY3VsbEZhY2UgIT09IEN1bGxGYWNlTm9uZSApIHtcblxuXHRcdFx0ZW5hYmxlKCAyODg0ICk7XG5cblx0XHRcdGlmICggY3VsbEZhY2UgIT09IGN1cnJlbnRDdWxsRmFjZSApIHtcblxuXHRcdFx0XHRpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUJhY2sgKSB7XG5cblx0XHRcdFx0XHRnbC5jdWxsRmFjZSggMTAyOSApO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGN1bGxGYWNlID09PSBDdWxsRmFjZUZyb250ICkge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMjggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Z2wuY3VsbEZhY2UoIDEwMzIgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDI4ODQgKTtcblxuXHRcdH1cblxuXHRcdGN1cnJlbnRDdWxsRmFjZSA9IGN1bGxGYWNlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRMaW5lV2lkdGgoIHdpZHRoICkge1xuXG5cdFx0aWYgKCB3aWR0aCAhPT0gY3VycmVudExpbmVXaWR0aCApIHtcblxuXHRcdFx0aWYgKCBsaW5lV2lkdGhBdmFpbGFibGUgKSBnbC5saW5lV2lkdGgoIHdpZHRoICk7XG5cblx0XHRcdGN1cnJlbnRMaW5lV2lkdGggPSB3aWR0aDtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0UG9seWdvbk9mZnNldCggcG9seWdvbk9mZnNldCwgZmFjdG9yLCB1bml0cyApIHtcblxuXHRcdGlmICggcG9seWdvbk9mZnNldCApIHtcblxuXHRcdFx0ZW5hYmxlKCAzMjgyMyApO1xuXG5cdFx0XHRpZiAoIGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yICE9PSBmYWN0b3IgfHwgY3VycmVudFBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5pdHMgKSB7XG5cblx0XHRcdFx0Z2wucG9seWdvbk9mZnNldCggZmFjdG9yLCB1bml0cyApO1xuXG5cdFx0XHRcdGN1cnJlbnRQb2x5Z29uT2Zmc2V0RmFjdG9yID0gZmFjdG9yO1xuXHRcdFx0XHRjdXJyZW50UG9seWdvbk9mZnNldFVuaXRzID0gdW5pdHM7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRpc2FibGUoIDMyODIzICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFNjaXNzb3JUZXN0KCBzY2lzc29yVGVzdCApIHtcblxuXHRcdGlmICggc2Npc3NvclRlc3QgKSB7XG5cblx0XHRcdGVuYWJsZSggMzA4OSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0ZGlzYWJsZSggMzA4OSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyB0ZXh0dXJlXG5cblx0ZnVuY3Rpb24gYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICkge1xuXG5cdFx0aWYgKCB3ZWJnbFNsb3QgPT09IHVuZGVmaW5lZCApIHdlYmdsU2xvdCA9IDMzOTg0ICsgbWF4VGV4dHVyZXMgLSAxO1xuXG5cdFx0aWYgKCBjdXJyZW50VGV4dHVyZVNsb3QgIT09IHdlYmdsU2xvdCApIHtcblxuXHRcdFx0Z2wuYWN0aXZlVGV4dHVyZSggd2ViZ2xTbG90ICk7XG5cdFx0XHRjdXJyZW50VGV4dHVyZVNsb3QgPSB3ZWJnbFNsb3Q7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSApIHtcblxuXHRcdGlmICggY3VycmVudFRleHR1cmVTbG90ID09PSBudWxsICkge1xuXG5cdFx0XHRhY3RpdmVUZXh0dXJlKCk7XG5cblx0XHR9XG5cblx0XHR2YXIgYm91bmRUZXh0dXJlID0gY3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdO1xuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ym91bmRUZXh0dXJlID0geyB0eXBlOiB1bmRlZmluZWQsIHRleHR1cmU6IHVuZGVmaW5lZCB9O1xuXHRcdFx0Y3VycmVudEJvdW5kVGV4dHVyZXNbIGN1cnJlbnRUZXh0dXJlU2xvdCBdID0gYm91bmRUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBib3VuZFRleHR1cmUudHlwZSAhPT0gd2ViZ2xUeXBlIHx8IGJvdW5kVGV4dHVyZS50ZXh0dXJlICE9PSB3ZWJnbFRleHR1cmUgKSB7XG5cblx0XHRcdGdsLmJpbmRUZXh0dXJlKCB3ZWJnbFR5cGUsIHdlYmdsVGV4dHVyZSB8fCBlbXB0eVRleHR1cmVzWyB3ZWJnbFR5cGUgXSApO1xuXG5cdFx0XHRib3VuZFRleHR1cmUudHlwZSA9IHdlYmdsVHlwZTtcblx0XHRcdGJvdW5kVGV4dHVyZS50ZXh0dXJlID0gd2ViZ2xUZXh0dXJlO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1bmJpbmRUZXh0dXJlKCkge1xuXG5cdFx0dmFyIGJvdW5kVGV4dHVyZSA9IGN1cnJlbnRCb3VuZFRleHR1cmVzWyBjdXJyZW50VGV4dHVyZVNsb3QgXTtcblxuXHRcdGlmICggYm91bmRUZXh0dXJlICE9PSB1bmRlZmluZWQgJiYgYm91bmRUZXh0dXJlLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Z2wuYmluZFRleHR1cmUoIGJvdW5kVGV4dHVyZS50eXBlLCBudWxsICk7XG5cblx0XHRcdGJvdW5kVGV4dHVyZS50eXBlID0gdW5kZWZpbmVkO1xuXHRcdFx0Ym91bmRUZXh0dXJlLnRleHR1cmUgPSB1bmRlZmluZWQ7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGNvbXByZXNzZWRUZXhJbWFnZTJEKCkge1xuXG5cdFx0dHJ5IHtcblxuXHRcdFx0Z2wuY29tcHJlc3NlZFRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UyRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlMkQuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4SW1hZ2UzRCgpIHtcblxuXHRcdHRyeSB7XG5cblx0XHRcdGdsLnRleEltYWdlM0QuYXBwbHkoIGdsLCBhcmd1bWVudHMgKTtcblxuXHRcdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMU3RhdGU6JywgZXJyb3IgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBzY2lzc29yKCBzY2lzc29yICkge1xuXG5cdFx0aWYgKCBjdXJyZW50U2Npc3Nvci5lcXVhbHMoIHNjaXNzb3IgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGdsLnNjaXNzb3IoIHNjaXNzb3IueCwgc2Npc3Nvci55LCBzY2lzc29yLnosIHNjaXNzb3IudyApO1xuXHRcdFx0Y3VycmVudFNjaXNzb3IuY29weSggc2Npc3NvciApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB2aWV3cG9ydCggdmlld3BvcnQgKSB7XG5cblx0XHRpZiAoIGN1cnJlbnRWaWV3cG9ydC5lcXVhbHMoIHZpZXdwb3J0ICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRnbC52aWV3cG9ydCggdmlld3BvcnQueCwgdmlld3BvcnQueSwgdmlld3BvcnQueiwgdmlld3BvcnQudyApO1xuXHRcdFx0Y3VycmVudFZpZXdwb3J0LmNvcHkoIHZpZXdwb3J0ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gcmVzZXQoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBlbmFibGVkQXR0cmlidXRlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGlmICggZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9PT0gMSApIHtcblxuXHRcdFx0XHRnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoIGkgKTtcblx0XHRcdFx0ZW5hYmxlZEF0dHJpYnV0ZXNbIGkgXSA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGVuYWJsZWRDYXBhYmlsaXRpZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRUZXh0dXJlU2xvdCA9IG51bGw7XG5cdFx0Y3VycmVudEJvdW5kVGV4dHVyZXMgPSB7fTtcblxuXHRcdGN1cnJlbnRQcm9ncmFtID0gbnVsbDtcblxuXHRcdGN1cnJlbnRCbGVuZGluZyA9IG51bGw7XG5cblx0XHRjdXJyZW50RmxpcFNpZGVkID0gbnVsbDtcblx0XHRjdXJyZW50Q3VsbEZhY2UgPSBudWxsO1xuXG5cdFx0Y29sb3JCdWZmZXIucmVzZXQoKTtcblx0XHRkZXB0aEJ1ZmZlci5yZXNldCgpO1xuXHRcdHN0ZW5jaWxCdWZmZXIucmVzZXQoKTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGJ1ZmZlcnM6IHtcblx0XHRcdGNvbG9yOiBjb2xvckJ1ZmZlcixcblx0XHRcdGRlcHRoOiBkZXB0aEJ1ZmZlcixcblx0XHRcdHN0ZW5jaWw6IHN0ZW5jaWxCdWZmZXJcblx0XHR9LFxuXG5cdFx0aW5pdEF0dHJpYnV0ZXM6IGluaXRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZTogZW5hYmxlQXR0cmlidXRlLFxuXHRcdGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3I6IGVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IsXG5cdFx0ZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXM6IGRpc2FibGVVbnVzZWRBdHRyaWJ1dGVzLFxuXHRcdGVuYWJsZTogZW5hYmxlLFxuXHRcdGRpc2FibGU6IGRpc2FibGUsXG5cblx0XHR1c2VQcm9ncmFtOiB1c2VQcm9ncmFtLFxuXG5cdFx0c2V0QmxlbmRpbmc6IHNldEJsZW5kaW5nLFxuXHRcdHNldE1hdGVyaWFsOiBzZXRNYXRlcmlhbCxcblxuXHRcdHNldEZsaXBTaWRlZDogc2V0RmxpcFNpZGVkLFxuXHRcdHNldEN1bGxGYWNlOiBzZXRDdWxsRmFjZSxcblxuXHRcdHNldExpbmVXaWR0aDogc2V0TGluZVdpZHRoLFxuXHRcdHNldFBvbHlnb25PZmZzZXQ6IHNldFBvbHlnb25PZmZzZXQsXG5cblx0XHRzZXRTY2lzc29yVGVzdDogc2V0U2Npc3NvclRlc3QsXG5cblx0XHRhY3RpdmVUZXh0dXJlOiBhY3RpdmVUZXh0dXJlLFxuXHRcdGJpbmRUZXh0dXJlOiBiaW5kVGV4dHVyZSxcblx0XHR1bmJpbmRUZXh0dXJlOiB1bmJpbmRUZXh0dXJlLFxuXHRcdGNvbXByZXNzZWRUZXhJbWFnZTJEOiBjb21wcmVzc2VkVGV4SW1hZ2UyRCxcblx0XHR0ZXhJbWFnZTJEOiB0ZXhJbWFnZTJELFxuXHRcdHRleEltYWdlM0Q6IHRleEltYWdlM0QsXG5cblx0XHRzY2lzc29yOiBzY2lzc29yLFxuXHRcdHZpZXdwb3J0OiB2aWV3cG9ydCxcblxuXHRcdHJlc2V0OiByZXNldFxuXG5cdH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFdlYkdMVGV4dHVyZXMoIF9nbCwgZXh0ZW5zaW9ucywgc3RhdGUsIHByb3BlcnRpZXMsIGNhcGFiaWxpdGllcywgdXRpbHMsIGluZm8gKSB7XG5cblx0dmFyIGlzV2ViR0wyID0gY2FwYWJpbGl0aWVzLmlzV2ViR0wyO1xuXHR2YXIgbWF4VGV4dHVyZXMgPSBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZXM7XG5cdHZhciBtYXhDdWJlbWFwU2l6ZSA9IGNhcGFiaWxpdGllcy5tYXhDdWJlbWFwU2l6ZTtcblx0dmFyIG1heFRleHR1cmVTaXplID0gY2FwYWJpbGl0aWVzLm1heFRleHR1cmVTaXplO1xuXHR2YXIgbWF4U2FtcGxlcyA9IGNhcGFiaWxpdGllcy5tYXhTYW1wbGVzO1xuXG5cdHZhciBfdmlkZW9UZXh0dXJlcyA9IG5ldyBXZWFrTWFwKCk7XG5cdHZhciBfY2FudmFzO1xuXG5cdC8vIGNvcmRvdmEgaU9TIChhcyBvZiA1LjApIHN0aWxsIHVzZXMgVUlXZWJWaWV3LCB3aGljaCBwcm92aWRlcyBPZmZzY3JlZW5DYW52YXMsXG5cdC8vIGFsc28gT2Zmc2NyZWVuQ2FudmFzLmdldENvbnRleHQoXCJ3ZWJnbFwiKSwgYnV0IG5vdCBPZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpIVxuXHQvLyBTb21lIGltcGxlbWVudGF0aW9ucyBtYXkgb25seSBpbXBsZW1lbnQgT2Zmc2NyZWVuQ2FudmFzIHBhcnRpYWxseSAoZS5nLiBsYWNraW5nIDJkKS5cblxuXHR2YXIgdXNlT2Zmc2NyZWVuQ2FudmFzID0gZmFsc2U7XG5cblx0dHJ5IHtcblxuXHRcdHVzZU9mZnNjcmVlbkNhbnZhcyA9IHR5cGVvZiBPZmZzY3JlZW5DYW52YXMgIT09ICd1bmRlZmluZWQnXG5cdFx0XHQmJiAoIG5ldyBPZmZzY3JlZW5DYW52YXMoIDEsIDEgKS5nZXRDb250ZXh0KCBcIjJkXCIgKSApICE9PSBudWxsO1xuXG5cdH0gY2F0Y2ggKCBlcnIgKSB7XG5cblx0XHQvLyBJZ25vcmUgYW55IGVycm9yc1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjcmVhdGVDYW52YXMoIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0XHQvLyBVc2UgT2Zmc2NyZWVuQ2FudmFzIHdoZW4gYXZhaWxhYmxlLiBTcGVjaWFsbHkgbmVlZGVkIGluIHdlYiB3b3JrZXJzXG5cblx0XHRyZXR1cm4gdXNlT2Zmc2NyZWVuQ2FudmFzID9cblx0XHRcdG5ldyBPZmZzY3JlZW5DYW52YXMoIHdpZHRoLCBoZWlnaHQgKSA6XG5cdFx0XHRkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywgJ2NhbnZhcycgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVzaXplSW1hZ2UoIGltYWdlLCBuZWVkc1Bvd2VyT2ZUd28sIG5lZWRzTmV3Q2FudmFzLCBtYXhTaXplICkge1xuXG5cdFx0dmFyIHNjYWxlID0gMTtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIGlmIHRleHR1cmUgZXhjZWVkcyBtYXggc2l6ZVxuXG5cdFx0aWYgKCBpbWFnZS53aWR0aCA+IG1heFNpemUgfHwgaW1hZ2UuaGVpZ2h0ID4gbWF4U2l6ZSApIHtcblxuXHRcdFx0c2NhbGUgPSBtYXhTaXplIC8gTWF0aC5tYXgoIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgaWYgbmVjZXNzYXJ5XG5cblx0XHRpZiAoIHNjYWxlIDwgMSB8fCBuZWVkc1Bvd2VyT2ZUd28gPT09IHRydWUgKSB7XG5cblx0XHRcdC8vIG9ubHkgcGVyZm9ybSByZXNpemUgZm9yIGNlcnRhaW4gaW1hZ2UgdHlwZXNcblxuXHRcdFx0aWYgKCAoIHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQgKSB8fFxuXHRcdFx0XHQoIHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCApIHx8XG5cdFx0XHRcdCggdHlwZW9mIEltYWdlQml0bWFwICE9PSAndW5kZWZpbmVkJyAmJiBpbWFnZSBpbnN0YW5jZW9mIEltYWdlQml0bWFwICkgKSB7XG5cblx0XHRcdFx0dmFyIGZsb29yID0gbmVlZHNQb3dlck9mVHdvID8gTWF0aFV0aWxzLmZsb29yUG93ZXJPZlR3byA6IE1hdGguZmxvb3I7XG5cblx0XHRcdFx0dmFyIHdpZHRoID0gZmxvb3IoIHNjYWxlICogaW1hZ2Uud2lkdGggKTtcblx0XHRcdFx0dmFyIGhlaWdodCA9IGZsb29yKCBzY2FsZSAqIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHRcdGlmICggX2NhbnZhcyA9PT0gdW5kZWZpbmVkICkgX2NhbnZhcyA9IGNyZWF0ZUNhbnZhcyggd2lkdGgsIGhlaWdodCApO1xuXG5cdFx0XHRcdC8vIGN1YmUgdGV4dHVyZXMgY2FuJ3QgcmV1c2UgdGhlIHNhbWUgY2FudmFzXG5cblx0XHRcdFx0dmFyIGNhbnZhcyA9IG5lZWRzTmV3Q2FudmFzID8gY3JlYXRlQ2FudmFzKCB3aWR0aCwgaGVpZ2h0ICkgOiBfY2FudmFzO1xuXG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG5cdFx0XHRcdHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoICcyZCcgKTtcblx0XHRcdFx0Y29udGV4dC5kcmF3SW1hZ2UoIGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBoYXMgYmVlbiByZXNpemVkIGZyb20gKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpIHRvICgnICsgd2lkdGggKyAneCcgKyBoZWlnaHQgKyAnKS4nICk7XG5cblx0XHRcdFx0cmV0dXJuIGNhbnZhcztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRpZiAoICdkYXRhJyBpbiBpbWFnZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEltYWdlIGluIERhdGFUZXh0dXJlIGlzIHRvbyBiaWcgKCcgKyBpbWFnZS53aWR0aCArICd4JyArIGltYWdlLmhlaWdodCArICcpLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGltYWdlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGlzUG93ZXJPZlR3byggaW1hZ2UgKSB7XG5cblx0XHRyZXR1cm4gTWF0aFV0aWxzLmlzUG93ZXJPZlR3byggaW1hZ2Uud2lkdGggKSAmJiBNYXRoVXRpbHMuaXNQb3dlck9mVHdvKCBpbWFnZS5oZWlnaHQgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdGV4dHVyZU5lZWRzUG93ZXJPZlR3byggdGV4dHVyZSApIHtcblxuXHRcdGlmICggaXNXZWJHTDIgKSByZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gKCB0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgKSB8fFxuXHRcdFx0KCB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTmVhcmVzdEZpbHRlciAmJiB0ZXh0dXJlLm1pbkZpbHRlciAhPT0gTGluZWFyRmlsdGVyICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0cmV0dXJuIHRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzICYmIHN1cHBvcnRzTWlwcyAmJlxuXHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlcjtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2VuZXJhdGVNaXBtYXAoIHRhcmdldCwgdGV4dHVyZSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdF9nbC5nZW5lcmF0ZU1pcG1hcCggdGFyZ2V0ICk7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0Ly8gTm90ZTogTWF0aC5sb2coIHggKSAqIE1hdGguTE9HMkUgdXNlZCBpbnN0ZWFkIG9mIE1hdGgubG9nMiggeCApIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUxMVxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBNYXRoLmxvZyggTWF0aC5tYXgoIHdpZHRoLCBoZWlnaHQgKSApICogTWF0aC5MT0cyRTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0SW50ZXJuYWxGb3JtYXQoIGludGVybmFsRm9ybWF0TmFtZSwgZ2xGb3JtYXQsIGdsVHlwZSApIHtcblxuXHRcdGlmICggaXNXZWJHTDIgPT09IGZhbHNlICkgcmV0dXJuIGdsRm9ybWF0O1xuXG5cdFx0aWYgKCBpbnRlcm5hbEZvcm1hdE5hbWUgIT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggX2dsWyBpbnRlcm5hbEZvcm1hdE5hbWUgXSAhPT0gdW5kZWZpbmVkICkgcmV0dXJuIF9nbFsgaW50ZXJuYWxGb3JtYXROYW1lIF07XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gdXNlIG5vbi1leGlzdGluZyBXZWJHTCBpbnRlcm5hbCBmb3JtYXQgXFwnJyArIGludGVybmFsRm9ybWF0TmFtZSArICdcXCcnICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaW50ZXJuYWxGb3JtYXQgPSBnbEZvcm1hdDtcblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDMgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyNTtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAzMzMyMTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDcgKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzNDgzNztcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzNDg0Mztcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAzMjg0OTtcblxuXHRcdH1cblxuXHRcdGlmICggZ2xGb3JtYXQgPT09IDY0MDggKSB7XG5cblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTI2ICkgaW50ZXJuYWxGb3JtYXQgPSAzNDgzNjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTMxICkgaW50ZXJuYWxGb3JtYXQgPSAzNDg0Mjtcblx0XHRcdGlmICggZ2xUeXBlID09PSA1MTIxICkgaW50ZXJuYWxGb3JtYXQgPSAzMjg1NjtcblxuXHRcdH1cblxuXHRcdGlmICggaW50ZXJuYWxGb3JtYXQgPT09IDMzMzI1IHx8IGludGVybmFsRm9ybWF0ID09PSAzMzMyNiB8fFxuXHRcdFx0aW50ZXJuYWxGb3JtYXQgPT09IDM0ODQyIHx8IGludGVybmFsRm9ybWF0ID09PSAzNDgzNiApIHtcblxuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdFWFRfY29sb3JfYnVmZmVyX2Zsb2F0JyApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGludGVybmFsRm9ybWF0O1xuXG5cdH1cblxuXHQvLyBGYWxsYmFjayBmaWx0ZXJzIGZvciBub24tcG93ZXItb2YtMiB0ZXh0dXJlc1xuXG5cdGZ1bmN0aW9uIGZpbHRlckZhbGxiYWNrKCBmICkge1xuXG5cdFx0aWYgKCBmID09PSBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyIHx8IGYgPT09IE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgKSB7XG5cblx0XHRcdHJldHVybiA5NzI4O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIDk3Mjk7XG5cblx0fVxuXG5cdC8vXG5cblx0ZnVuY3Rpb24gb25UZXh0dXJlRGlzcG9zZSggZXZlbnQgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHRleHR1cmUucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblRleHR1cmVEaXNwb3NlICk7XG5cblx0XHRkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzVmlkZW9UZXh0dXJlICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5kZWxldGUoIHRleHR1cmUgKTtcblxuXHRcdH1cblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzIC0tO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBvblJlbmRlclRhcmdldERpc3Bvc2UoIGV2ZW50ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdHJlbmRlclRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCAnZGlzcG9zZScsIG9uUmVuZGVyVGFyZ2V0RGlzcG9zZSApO1xuXG5cdFx0ZGVhbGxvY2F0ZVJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRpbmZvLm1lbW9yeS50ZXh0dXJlcyAtLTtcblxuXHR9XG5cblx0Ly9cblxuXHRmdW5jdGlvbiBkZWFsbG9jYXRlVGV4dHVyZSggdGV4dHVyZSApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xJbml0ID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRfZ2wuZGVsZXRlVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHRcdHByb3BlcnRpZXMucmVtb3ZlKCB0ZXh0dXJlICk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXG5cdFx0aWYgKCAhIHJlbmRlclRhcmdldCApIHJldHVybjtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmRlbGV0ZVRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0X2dsLmRlbGV0ZUZyYW1lYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdICk7XG5cdFx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xNdWx0aXNhbXBsZWRGcmFtZWJ1ZmZlciApIF9nbC5kZWxldGVGcmFtZWJ1ZmZlciggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgKSBfZ2wuZGVsZXRlUmVuZGVyYnVmZmVyKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xDb2xvclJlbmRlcmJ1ZmZlciApO1xuXHRcdFx0aWYgKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aFJlbmRlcmJ1ZmZlciApIF9nbC5kZWxldGVSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyICk7XG5cblx0XHR9XG5cblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0LnRleHR1cmUgKTtcblx0XHRwcm9wZXJ0aWVzLnJlbW92ZSggcmVuZGVyVGFyZ2V0ICk7XG5cblx0fVxuXG5cdC8vXG5cblx0dmFyIHRleHR1cmVVbml0cyA9IDA7XG5cblx0ZnVuY3Rpb24gcmVzZXRUZXh0dXJlVW5pdHMoKSB7XG5cblx0XHR0ZXh0dXJlVW5pdHMgPSAwO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhbGxvY2F0ZVRleHR1cmVVbml0KCkge1xuXG5cdFx0dmFyIHRleHR1cmVVbml0ID0gdGV4dHVyZVVuaXRzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlVW5pdCA+PSBtYXhUZXh0dXJlcyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xUZXh0dXJlczogVHJ5aW5nIHRvIHVzZSAnICsgdGV4dHVyZVVuaXQgKyAnIHRleHR1cmUgdW5pdHMgd2hpbGUgdGhpcyBHUFUgc3VwcG9ydHMgb25seSAnICsgbWF4VGV4dHVyZXMgKTtcblxuXHRcdH1cblxuXHRcdHRleHR1cmVVbml0cyArPSAxO1xuXG5cdFx0cmV0dXJuIHRleHR1cmVVbml0O1xuXG5cdH1cblxuXHQvL1xuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCB0ZXh0dXJlICk7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNWaWRlb1RleHR1cmUgKSB1cGRhdGVWaWRlb1RleHR1cmUoIHRleHR1cmUgKTtcblxuXHRcdGlmICggdGV4dHVyZS52ZXJzaW9uID4gMCAmJiB0ZXh0dXJlUHJvcGVydGllcy5fX3ZlcnNpb24gIT09IHRleHR1cmUudmVyc2lvbiApIHtcblxuXHRcdFx0dmFyIGltYWdlID0gdGV4dHVyZS5pbWFnZTtcblxuXHRcdFx0aWYgKCBpbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIHVuZGVmaW5lZCcgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaW1hZ2UuY29tcGxldGUgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFRleHR1cmUgbWFya2VkIGZvciB1cGRhdGUgYnV0IGltYWdlIGlzIGluY29tcGxldGUnICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dXBsb2FkVGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUsIHNsb3QgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gc2V0VGV4dHVyZTJEQXJyYXkoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1ODY2LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlM0QoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHR1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0c3RhdGUuYmluZFRleHR1cmUoIDMyODc5LCB0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGlmICggdGV4dHVyZS5pbWFnZS5sZW5ndGggIT09IDYgKSByZXR1cm47XG5cblx0XHR2YXIgdGV4dHVyZVByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggdGV4dHVyZSApO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLnZlcnNpb24gPiAwICYmIHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiAhPT0gdGV4dHVyZS52ZXJzaW9uICkge1xuXG5cdFx0XHRpbml0VGV4dHVyZSggdGV4dHVyZVByb3BlcnRpZXMsIHRleHR1cmUgKTtcblxuXHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRcdF9nbC5waXhlbFN0b3JlaSggMzc0NDAsIHRleHR1cmUuZmxpcFkgKTtcblxuXHRcdFx0dmFyIGlzQ29tcHJlc3NlZCA9ICggdGV4dHVyZSAmJiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSB8fCB0ZXh0dXJlLmltYWdlWyAwIF0uaXNDb21wcmVzc2VkVGV4dHVyZSApICk7XG5cdFx0XHR2YXIgaXNEYXRhVGV4dHVyZSA9ICggdGV4dHVyZS5pbWFnZVsgMCBdICYmIHRleHR1cmUuaW1hZ2VbIDAgXS5pc0RhdGFUZXh0dXJlICk7XG5cblx0XHRcdHZhciBjdWJlSW1hZ2UgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRpZiAoICEgaXNDb21wcmVzc2VkICYmICEgaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gcmVzaXplSW1hZ2UoIHRleHR1cmUuaW1hZ2VbIGkgXSwgZmFsc2UsIHRydWUsIG1heEN1YmVtYXBTaXplICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGN1YmVJbWFnZVsgaSBdID0gaXNEYXRhVGV4dHVyZSA/IHRleHR1cmUuaW1hZ2VbIGkgXS5pbWFnZSA6IHRleHR1cmUuaW1hZ2VbIGkgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGltYWdlID0gY3ViZUltYWdlWyAwIF0sXG5cdFx0XHRcdHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggaW1hZ2UgKSB8fCBpc1dlYkdMMixcblx0XHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApLFxuXHRcdFx0XHRnbFR5cGUgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLnR5cGUgKSxcblx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IGdldEludGVybmFsRm9ybWF0KCB0ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNDA2NywgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICk7XG5cblx0XHRcdHZhciBtaXBtYXBzO1xuXG5cdFx0XHRpZiAoIGlzQ29tcHJlc3NlZCApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwcyA9IGN1YmVJbWFnZVsgaSBdLm1pcG1hcHM7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1pcG1hcCA9IG1pcG1hcHNbIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCQUZvcm1hdCAmJiB0ZXh0dXJlLmZvcm1hdCAhPT0gUkdCRm9ybWF0ICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRzdGF0ZS5jb21wcmVzc2VkVGV4SW1hZ2UyRCggMzQwNjkgKyBpLCBqLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IEF0dGVtcHQgdG8gbG9hZCB1bnN1cHBvcnRlZCBjb21wcmVzc2VkIHRleHR1cmUgZm9ybWF0IGluIC5zZXRUZXh0dXJlQ3ViZSgpJyApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNDA2OSArIGksIGosIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcC53aWR0aCwgbWlwbWFwLmhlaWdodCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgbWlwbWFwLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG1pcG1hcHMgPSB0ZXh0dXJlLm1pcG1hcHM7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgNjsgaSArKyApIHtcblxuXHRcdFx0XHRcdGlmICggaXNEYXRhVGV4dHVyZSApIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBjdWJlSW1hZ2VbIGkgXS53aWR0aCwgY3ViZUltYWdlWyBpIF0uaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXS5kYXRhICk7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IG1pcG1hcHMubGVuZ3RoOyBqICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBtaXBtYXAgPSBtaXBtYXBzWyBqIF07XG5cdFx0XHRcdFx0XHRcdHZhciBtaXBtYXBJbWFnZSA9IG1pcG1hcC5pbWFnZVsgaSBdLmltYWdlO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIGdsSW50ZXJuYWxGb3JtYXQsIG1pcG1hcEltYWdlLndpZHRoLCBtaXBtYXBJbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcEltYWdlLmRhdGEgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzQwNjkgKyBpLCAwLCBnbEludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlLCBjdWJlSW1hZ2VbIGkgXSApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDA7IGogPCBtaXBtYXBzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgbWlwbWFwID0gbWlwbWFwc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM0MDY5ICsgaSwgaiArIDEsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5pbWFnZVsgaSBdICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IG1pcG1hcHMubGVuZ3RoO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCB0ZXh0dXJlLCBzdXBwb3J0c01pcHMgKSApIHtcblxuXHRcdFx0XHQvLyBXZSBhc3N1bWUgaW1hZ2VzIGZvciBjdWJlIG1hcCBoYXZlIHRoZSBzYW1lIHNpemUuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NywgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IHRleHR1cmUudmVyc2lvbjtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3RhdGUuYWN0aXZlVGV4dHVyZSggMzM5ODQgKyBzbG90ICk7XG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzQwNjcsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHN0YXRlLmFjdGl2ZVRleHR1cmUoIDMzOTg0ICsgc2xvdCApO1xuXHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSApO1xuXG5cdH1cblxuXHR2YXIgd3JhcHBpbmdUb0dMID0ge1xuXHRcdFsgUmVwZWF0V3JhcHBpbmcgXTogMTA0OTcsXG5cdFx0WyBDbGFtcFRvRWRnZVdyYXBwaW5nIF06IDMzMDcxLFxuXHRcdFsgTWlycm9yZWRSZXBlYXRXcmFwcGluZyBdOiAzMzY0OFxuXHR9O1xuXG5cdHZhciBmaWx0ZXJUb0dMID0ge1xuXHRcdFsgTmVhcmVzdEZpbHRlciBdOiA5NzI4LFxuXHRcdFsgTmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXIgXTogOTk4NCxcblx0XHRbIE5lYXJlc3RNaXBtYXBMaW5lYXJGaWx0ZXIgXTogOTk4NixcblxuXHRcdFsgTGluZWFyRmlsdGVyIF06IDk3MjksXG5cdFx0WyBMaW5lYXJNaXBtYXBOZWFyZXN0RmlsdGVyIF06IDk5ODUsXG5cdFx0WyBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIgXTogOTk4N1xuXHR9O1xuXG5cdGZ1bmN0aW9uIHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0aWYgKCBzdXBwb3J0c01pcHMgKSB7XG5cblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDIsIHdyYXBwaW5nVG9HTFsgdGV4dHVyZS53cmFwUyBdICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQzLCB3cmFwcGluZ1RvR0xbIHRleHR1cmUud3JhcFQgXSApO1xuXG5cdFx0XHRpZiAoIHRleHR1cmVUeXBlID09PSAzMjg3OSB8fCB0ZXh0dXJlVHlwZSA9PT0gMzU4NjYgKSB7XG5cblx0XHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAzMjg4Miwgd3JhcHBpbmdUb0dMWyB0ZXh0dXJlLndyYXBSIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQwLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1hZ0ZpbHRlciBdICk7XG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQxLCBmaWx0ZXJUb0dMWyB0ZXh0dXJlLm1pbkZpbHRlciBdICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfZ2wudGV4UGFyYW1ldGVyaSggdGV4dHVyZVR5cGUsIDEwMjQyLCAzMzA3MSApO1xuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MywgMzMwNzEgKTtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlVHlwZSA9PT0gMzI4NzkgfHwgdGV4dHVyZVR5cGUgPT09IDM1ODY2ICkge1xuXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMzI4ODIsIDMzMDcxICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXh0dXJlLndyYXBTICE9PSBDbGFtcFRvRWRnZVdyYXBwaW5nIHx8IHRleHR1cmUud3JhcFQgIT09IENsYW1wVG9FZGdlV3JhcHBpbmcgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVGV4dHVyZSBpcyBub3QgcG93ZXIgb2YgdHdvLiBUZXh0dXJlLndyYXBTIGFuZCBUZXh0dXJlLndyYXBUIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuQ2xhbXBUb0VkZ2VXcmFwcGluZy4nICk7XG5cblx0XHRcdH1cblxuXHRcdFx0X2dsLnRleFBhcmFtZXRlcmkoIHRleHR1cmVUeXBlLCAxMDI0MCwgZmlsdGVyRmFsbGJhY2soIHRleHR1cmUubWFnRmlsdGVyICkgKTtcblx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJpKCB0ZXh0dXJlVHlwZSwgMTAyNDEsIGZpbHRlckZhbGxiYWNrKCB0ZXh0dXJlLm1pbkZpbHRlciApICk7XG5cblx0XHRcdGlmICggdGV4dHVyZS5taW5GaWx0ZXIgIT09IE5lYXJlc3RGaWx0ZXIgJiYgdGV4dHVyZS5taW5GaWx0ZXIgIT09IExpbmVhckZpbHRlciApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBUZXh0dXJlIGlzIG5vdCBwb3dlciBvZiB0d28uIFRleHR1cmUubWluRmlsdGVyIHNob3VsZCBiZSBzZXQgdG8gVEhSRUUuTmVhcmVzdEZpbHRlciBvciBUSFJFRS5MaW5lYXJGaWx0ZXIuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdFWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnICk7XG5cblx0XHRpZiAoIGV4dGVuc2lvbiApIHtcblxuXHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSAmJiBleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicgKSA9PT0gbnVsbCApIHJldHVybjtcblx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBIYWxmRmxvYXRUeXBlICYmICggaXNXZWJHTDIgfHwgZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKSApID09PSBudWxsICkgcmV0dXJuO1xuXG5cdFx0XHRpZiAoIHRleHR1cmUuYW5pc290cm9weSA+IDEgfHwgcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ICkge1xuXG5cdFx0XHRcdF9nbC50ZXhQYXJhbWV0ZXJmKCB0ZXh0dXJlVHlwZSwgZXh0ZW5zaW9uLlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhULCBNYXRoLm1pbiggdGV4dHVyZS5hbmlzb3Ryb3B5LCBjYXBhYmlsaXRpZXMuZ2V0TWF4QW5pc290cm9weSgpICkgKTtcblx0XHRcdFx0cHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX2N1cnJlbnRBbmlzb3Ryb3B5ID0gdGV4dHVyZS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGluaXRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSApIHtcblxuXHRcdGlmICggdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbEluaXQgPSB0cnVlO1xuXG5cdFx0XHR0ZXh0dXJlLmFkZEV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25UZXh0dXJlRGlzcG9zZSApO1xuXG5cdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX3dlYmdsVGV4dHVyZSA9IF9nbC5jcmVhdGVUZXh0dXJlKCk7XG5cblx0XHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGxvYWRUZXh0dXJlKCB0ZXh0dXJlUHJvcGVydGllcywgdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdHZhciB0ZXh0dXJlVHlwZSA9IDM1NTM7XG5cblx0XHRpZiAoIHRleHR1cmUuaXNEYXRhVGV4dHVyZTJEQXJyYXkgKSB0ZXh0dXJlVHlwZSA9IDM1ODY2O1xuXHRcdGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlM0QgKSB0ZXh0dXJlVHlwZSA9IDMyODc5O1xuXG5cdFx0aW5pdFRleHR1cmUoIHRleHR1cmVQcm9wZXJ0aWVzLCB0ZXh0dXJlICk7XG5cblx0XHRzdGF0ZS5hY3RpdmVUZXh0dXJlKCAzMzk4NCArIHNsb3QgKTtcblx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggdGV4dHVyZVR5cGUsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cblx0XHRfZ2wucGl4ZWxTdG9yZWkoIDM3NDQwLCB0ZXh0dXJlLmZsaXBZICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzNzQ0MSwgdGV4dHVyZS5wcmVtdWx0aXBseUFscGhhICk7XG5cdFx0X2dsLnBpeGVsU3RvcmVpKCAzMzE3LCB0ZXh0dXJlLnVucGFja0FsaWdubWVudCApO1xuXG5cdFx0dmFyIG5lZWRzUG93ZXJPZlR3byA9IHRleHR1cmVOZWVkc1Bvd2VyT2ZUd28oIHRleHR1cmUgKSAmJiBpc1Bvd2VyT2ZUd28oIHRleHR1cmUuaW1hZ2UgKSA9PT0gZmFsc2U7XG5cdFx0dmFyIGltYWdlID0gcmVzaXplSW1hZ2UoIHRleHR1cmUuaW1hZ2UsIG5lZWRzUG93ZXJPZlR3bywgZmFsc2UsIG1heFRleHR1cmVTaXplICk7XG5cblx0XHR2YXIgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvKCBpbWFnZSApIHx8IGlzV2ViR0wyLFxuXHRcdFx0Z2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApLFxuXHRcdFx0Z2xUeXBlID0gdXRpbHMuY29udmVydCggdGV4dHVyZS50eXBlICksXG5cdFx0XHRnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHRleHR1cmUuaW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUgKTtcblxuXHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgc3VwcG9ydHNNaXBzICk7XG5cblx0XHR2YXIgbWlwbWFwLCBtaXBtYXBzID0gdGV4dHVyZS5taXBtYXBzO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkge1xuXG5cdFx0XHQvLyBwb3B1bGF0ZSBkZXB0aCB0ZXh0dXJlIHdpdGggZHVtbXkgZGF0YVxuXG5cdFx0XHRnbEludGVybmFsRm9ybWF0ID0gNjQwMjtcblxuXHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmUudHlwZSA9PT0gRmxvYXRUeXBlICkge1xuXG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM2MDEyO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUudHlwZSA9PT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDMzMTkwO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRleHR1cmUudHlwZSA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRcdFx0Z2xJbnRlcm5hbEZvcm1hdCA9IDM1MDU2O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzMxODk7IC8vIFdlYkdMMiByZXF1aXJlcyBzaXplZCBpbnRlcm5hbGZvcm1hdCBmb3IgZ2xUZXhJbWFnZTJEXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnV2ViR0xSZW5kZXJlcjogRmxvYXRpbmcgcG9pbnQgZGVwdGggdGV4dHVyZSByZXF1aXJlcyBXZWJHTDIuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyB2YWxpZGF0aW9uIGNoZWNrcyBmb3IgV2ViR0wgMVxuXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aEZvcm1hdCAmJiBnbEludGVybmFsRm9ybWF0ID09PSA2NDAyICkge1xuXG5cdFx0XHRcdC8vIFRoZSBlcnJvciBJTlZBTElEX09QRVJBVElPTiBpcyBnZW5lcmF0ZWQgYnkgdGV4SW1hZ2UyRCBpZiBmb3JtYXQgYW5kIGludGVybmFsZm9ybWF0IGFyZVxuXHRcdFx0XHQvLyBERVBUSF9DT01QT05FTlQgYW5kIHR5cGUgaXMgbm90IFVOU0lHTkVEX1NIT1JUIG9yIFVOU0lHTkVEX0lOVFxuXHRcdFx0XHQvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLylcblx0XHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkU2hvcnRUeXBlICYmIHRleHR1cmUudHlwZSAhPT0gVW5zaWduZWRJbnRUeXBlICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogVXNlIFVuc2lnbmVkU2hvcnRUeXBlIG9yIFVuc2lnbmVkSW50VHlwZSBmb3IgRGVwdGhGb3JtYXQgRGVwdGhUZXh0dXJlLicgKTtcblxuXHRcdFx0XHRcdHRleHR1cmUudHlwZSA9IFVuc2lnbmVkU2hvcnRUeXBlO1xuXHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgJiYgZ2xJbnRlcm5hbEZvcm1hdCA9PT0gNjQwMiApIHtcblxuXHRcdFx0XHQvLyBEZXB0aCBzdGVuY2lsIHRleHR1cmVzIG5lZWQgdGhlIERFUFRIX1NURU5DSUwgaW50ZXJuYWwgZm9ybWF0XG5cdFx0XHRcdC8vIChodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9leHRlbnNpb25zL1dFQkdMX2RlcHRoX3RleHR1cmUvKVxuXHRcdFx0XHRnbEludGVybmFsRm9ybWF0ID0gMzQwNDE7XG5cblx0XHRcdFx0Ly8gVGhlIGVycm9yIElOVkFMSURfT1BFUkFUSU9OIGlzIGdlbmVyYXRlZCBieSB0ZXhJbWFnZTJEIGlmIGZvcm1hdCBhbmQgaW50ZXJuYWxmb3JtYXQgYXJlXG5cdFx0XHRcdC8vIERFUFRIX1NURU5DSUwgYW5kIHR5cGUgaXMgbm90IFVOU0lHTkVEX0lOVF8yNF84X1dFQkdMLlxuXHRcdFx0XHQvLyAoaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvZXh0ZW5zaW9ucy9XRUJHTF9kZXB0aF90ZXh0dXJlLylcblx0XHRcdFx0aWYgKCB0ZXh0dXJlLnR5cGUgIT09IFVuc2lnbmVkSW50MjQ4VHlwZSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFVzZSBVbnNpZ25lZEludDI0OFR5cGUgZm9yIERlcHRoU3RlbmNpbEZvcm1hdCBEZXB0aFRleHR1cmUuJyApO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS50eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXHRcdFx0XHRcdGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHRleHR1cmUudHlwZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvL1xuXG5cdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUgKSB7XG5cblx0XHRcdC8vIHVzZSBtYW51YWxseSBjcmVhdGVkIG1pcG1hcHMgaWYgYXZhaWxhYmxlXG5cdFx0XHQvLyBpZiB0aGVyZSBhcmUgbm8gbWFudWFsIG1pcG1hcHNcblx0XHRcdC8vIHNldCAwIGxldmVsIG1pcG1hcCBhbmQgdGhlbiB1c2UgR0wgdG8gZ2VuZXJhdGUgb3RoZXIgbWlwbWFwIGxldmVsc1xuXG5cdFx0XHRpZiAoIG1pcG1hcHMubGVuZ3RoID4gMCAmJiBzdXBwb3J0c01pcHMgKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRtaXBtYXAgPSBtaXBtYXBzWyBpIF07XG5cdFx0XHRcdFx0c3RhdGUudGV4SW1hZ2UyRCggMzU1MywgaSwgZ2xJbnRlcm5hbEZvcm1hdCwgbWlwbWFwLndpZHRoLCBtaXBtYXAuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBtaXBtYXAuZGF0YSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblx0XHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIHRleHR1cmUuaXNDb21wcmVzc2VkVGV4dHVyZSApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG1pcG1hcHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggdGV4dHVyZS5mb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdGV4dHVyZS5mb3JtYXQgIT09IFJHQkZvcm1hdCApIHtcblxuXHRcdFx0XHRcdGlmICggZ2xGb3JtYXQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0XHRcdHN0YXRlLmNvbXByZXNzZWRUZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBBdHRlbXB0IHRvIGxvYWQgdW5zdXBwb3J0ZWQgY29tcHJlc3NlZCB0ZXh0dXJlIGZvcm1hdCBpbiAudXBsb2FkVGV4dHVyZSgpJyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRzdGF0ZS50ZXhJbWFnZTJEKCAzNTUzLCBpLCBnbEludGVybmFsRm9ybWF0LCBtaXBtYXAud2lkdGgsIG1pcG1hcC5oZWlnaHQsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcC5kYXRhICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSBtaXBtYXBzLmxlbmd0aCAtIDE7XG5cblx0XHR9IGVsc2UgaWYgKCB0ZXh0dXJlLmlzRGF0YVRleHR1cmUyREFycmF5ICkge1xuXG5cdFx0XHRzdGF0ZS50ZXhJbWFnZTNEKCAzNTg2NiwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCwgaW1hZ2UuZGVwdGgsIDAsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlLmRhdGEgKTtcblx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0fSBlbHNlIGlmICggdGV4dHVyZS5pc0RhdGFUZXh0dXJlM0QgKSB7XG5cblx0XHRcdHN0YXRlLnRleEltYWdlM0QoIDMyODc5LCAwLCBnbEludGVybmFsRm9ybWF0LCBpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kZXB0aCwgMCwgZ2xGb3JtYXQsIGdsVHlwZSwgaW1hZ2UuZGF0YSApO1xuXHRcdFx0dGV4dHVyZVByb3BlcnRpZXMuX19tYXhNaXBMZXZlbCA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyByZWd1bGFyIFRleHR1cmUgKGltYWdlLCB2aWRlbywgY2FudmFzKVxuXG5cdFx0XHQvLyB1c2UgbWFudWFsbHkgY3JlYXRlZCBtaXBtYXBzIGlmIGF2YWlsYWJsZVxuXHRcdFx0Ly8gaWYgdGhlcmUgYXJlIG5vIG1hbnVhbCBtaXBtYXBzXG5cdFx0XHQvLyBzZXQgMCBsZXZlbCBtaXBtYXAgYW5kIHRoZW4gdXNlIEdMIHRvIGdlbmVyYXRlIG90aGVyIG1pcG1hcCBsZXZlbHNcblxuXHRcdFx0aWYgKCBtaXBtYXBzLmxlbmd0aCA+IDAgJiYgc3VwcG9ydHNNaXBzICkge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBtaXBtYXBzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0bWlwbWFwID0gbWlwbWFwc1sgaSBdO1xuXHRcdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIGksIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIG1pcG1hcCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXHRcdFx0XHR0ZXh0dXJlUHJvcGVydGllcy5fX21heE1pcExldmVsID0gbWlwbWFwcy5sZW5ndGggLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHN0YXRlLnRleEltYWdlMkQoIDM1NTMsIDAsIGdsSW50ZXJuYWxGb3JtYXQsIGdsRm9ybWF0LCBnbFR5cGUsIGltYWdlICk7XG5cdFx0XHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fbWF4TWlwTGV2ZWwgPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdGdlbmVyYXRlTWlwbWFwKCB0ZXh0dXJlVHlwZSwgdGV4dHVyZSwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCApO1xuXG5cdFx0fVxuXG5cdFx0dGV4dHVyZVByb3BlcnRpZXMuX192ZXJzaW9uID0gdGV4dHVyZS52ZXJzaW9uO1xuXG5cdFx0aWYgKCB0ZXh0dXJlLm9uVXBkYXRlICkgdGV4dHVyZS5vblVwZGF0ZSggdGV4dHVyZSApO1xuXG5cdH1cblxuXHQvLyBSZW5kZXIgdGFyZ2V0c1xuXG5cdC8vIFNldHVwIHN0b3JhZ2UgZm9yIHRhcmdldCB0ZXh0dXJlIGFuZCBiaW5kIGl0IHRvIGNvcnJlY3QgZnJhbWVidWZmZXJcblx0ZnVuY3Rpb24gc2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIGZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIGF0dGFjaG1lbnQsIHRleHR1cmVUYXJnZXQgKSB7XG5cblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgKTtcblx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSApO1xuXHRcdHZhciBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cdFx0c3RhdGUudGV4SW1hZ2UyRCggdGV4dHVyZVRhcmdldCwgMCwgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0LCAwLCBnbEZvcm1hdCwgZ2xUeXBlLCBudWxsICk7XG5cdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYxNjAsIGZyYW1lYnVmZmVyICk7XG5cdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgYXR0YWNobWVudCwgdGV4dHVyZVRhcmdldCwgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICkuX193ZWJnbFRleHR1cmUsIDAgKTtcblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXR1cCBzdG9yYWdlIGZvciBpbnRlcm5hbCBkZXB0aC9zdGVuY2lsIGJ1ZmZlcnMgYW5kIGJpbmQgdG8gY29ycmVjdCBmcmFtZWJ1ZmZlclxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlcmJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBpc011bHRpc2FtcGxlICkge1xuXG5cdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmICEgcmVuZGVyVGFyZ2V0LnN0ZW5jaWxCdWZmZXIgKSB7XG5cblx0XHRcdHZhciBnbEludGVybmFsRm9ybWF0ID0gMzMxODk7XG5cblx0XHRcdGlmICggaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdFx0XHR2YXIgZGVwdGhUZXh0dXJlID0gcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZTtcblxuXHRcdFx0XHRpZiAoIGRlcHRoVGV4dHVyZSAmJiBkZXB0aFRleHR1cmUuaXNEZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGRlcHRoVGV4dHVyZS50eXBlID09PSBGbG9hdFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzNjAxMjtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRlcHRoVGV4dHVyZS50eXBlID09PSBVbnNpZ25lZEludFR5cGUgKSB7XG5cblx0XHRcdFx0XHRcdGdsSW50ZXJuYWxGb3JtYXQgPSAzMzE5MDtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0X2dsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoIDM2MTYxLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzNjA5NiwgMzYxNjEsIHJlbmRlcmJ1ZmZlciApO1xuXG5cdFx0fSBlbHNlIGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoQnVmZmVyICYmIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkge1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgMzUwNTYsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlKCAzNjE2MSwgMzQwNDEsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblxuXHRcdFx0X2dsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKCAzNjE2MCwgMzMzMDYsIDM2MTYxLCByZW5kZXJidWZmZXIgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHZhciBnbEZvcm1hdCA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdCApO1xuXHRcdFx0dmFyIGdsVHlwZSA9IHV0aWxzLmNvbnZlcnQoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgKTtcblx0XHRcdHZhciBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cblx0XHRcdGlmICggaXNNdWx0aXNhbXBsZSApIHtcblxuXHRcdFx0XHR2YXIgc2FtcGxlcyA9IGdldFJlbmRlclRhcmdldFNhbXBsZXMoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0XHRcdF9nbC5yZW5kZXJidWZmZXJTdG9yYWdlTXVsdGlzYW1wbGUoIDM2MTYxLCBzYW1wbGVzLCBnbEludGVybmFsRm9ybWF0LCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZSggMzYxNjEsIGdsSW50ZXJuYWxGb3JtYXQsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIG51bGwgKTtcblxuXHR9XG5cblx0Ly8gU2V0dXAgcmVzb3VyY2VzIGZvciBhIERlcHRoIFRleHR1cmUgZm9yIGEgRkJPIChuZWVkcyBhbiBleHRlbnNpb24pXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhUZXh0dXJlKCBmcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApO1xuXHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAnRGVwdGggVGV4dHVyZSB3aXRoIGN1YmUgcmVuZGVyIHRhcmdldHMgaXMgbm90IHN1cHBvcnRlZCcgKTtcblxuXHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSAmJiByZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmlzRGVwdGhUZXh0dXJlICkgKSB7XG5cblx0XHRcdHRocm93IG5ldyBFcnJvciggJ3JlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBUSFJFRS5EZXB0aFRleHR1cmUnICk7XG5cblx0XHR9XG5cblx0XHQvLyB1cGxvYWQgYW4gZW1wdHkgZGVwdGggdGV4dHVyZSB3aXRoIGZyYW1lYnVmZmVyIHNpemVcblx0XHRpZiAoICEgcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZSB8fFxuXHRcdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLndpZHRoICE9PSByZW5kZXJUYXJnZXQud2lkdGggfHxcblx0XHRcdFx0cmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5pbWFnZS5oZWlnaHQgIT09IHJlbmRlclRhcmdldC5oZWlnaHQgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuaW1hZ2Uud2lkdGggPSByZW5kZXJUYXJnZXQud2lkdGg7XG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLmltYWdlLmhlaWdodCA9IHJlbmRlclRhcmdldC5oZWlnaHQ7XG5cdFx0XHRyZW5kZXJUYXJnZXQuZGVwdGhUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdHNldFRleHR1cmUyRCggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0dmFyIHdlYmdsRGVwdGhUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmRlcHRoVGV4dHVyZS5mb3JtYXQgPT09IERlcHRoRm9ybWF0ICkge1xuXG5cdFx0XHRfZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoIDM2MTYwLCAzNjA5NiwgMzU1Mywgd2ViZ2xEZXB0aFRleHR1cmUsIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUuZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHRcdF9nbC5mcmFtZWJ1ZmZlclRleHR1cmUyRCggMzYxNjAsIDMzMzA2LCAzNTUzLCB3ZWJnbERlcHRoVGV4dHVyZSwgMCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnVW5rbm93biBkZXB0aFRleHR1cmUgZm9ybWF0JyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBTZXR1cCBHTCByZXNvdXJjZXMgZm9yIGEgbm9uLXRleHR1cmUgZGVwdGggYnVmZmVyXG5cdGZ1bmN0aW9uIHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aFRleHR1cmUgKSB7XG5cblx0XHRcdGlmICggaXNDdWJlICkgdGhyb3cgbmV3IEVycm9yKCAndGFyZ2V0LmRlcHRoVGV4dHVyZSBub3Qgc3VwcG9ydGVkIGluIEN1YmUgcmVuZGVyIHRhcmdldHMnICk7XG5cblx0XHRcdHNldHVwRGVwdGhUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciwgcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGlzQ3ViZSApIHtcblxuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSApO1xuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoYnVmZmVyWyBpIF0gPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIGZhbHNlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciApO1xuXHRcdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciA9IF9nbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcblx0XHRcdFx0c2V0dXBSZW5kZXJCdWZmZXJTdG9yYWdlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xEZXB0aGJ1ZmZlciwgcmVuZGVyVGFyZ2V0LCBmYWxzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgbnVsbCApO1xuXG5cdH1cblxuXHQvLyBTZXQgdXAgR0wgcmVzb3VyY2VzIGZvciB0aGUgcmVuZGVyIHRhcmdldFxuXHRmdW5jdGlvbiBzZXR1cFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHJlbmRlclRhcmdldFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cdFx0dmFyIHRleHR1cmVQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldC50ZXh0dXJlICk7XG5cblx0XHRyZW5kZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvblJlbmRlclRhcmdldERpc3Bvc2UgKTtcblxuXHRcdHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlID0gX2dsLmNyZWF0ZVRleHR1cmUoKTtcblxuXHRcdGluZm8ubWVtb3J5LnRleHR1cmVzICsrO1xuXG5cdFx0dmFyIGlzQ3ViZSA9ICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ID09PSB0cnVlICk7XG5cdFx0dmFyIGlzTXVsdGlzYW1wbGUgPSAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgPT09IHRydWUgKTtcblx0XHR2YXIgc3VwcG9ydHNNaXBzID0gaXNQb3dlck9mVHdvKCByZW5kZXJUYXJnZXQgKSB8fCBpc1dlYkdMMjtcblxuXHRcdC8vIEhhbmRsZXMgV2ViR0wyIFJHQkZvcm1hdCBmYWxsYmFjayAtICMxODg1OFxuXG5cdFx0aWYgKCBpc1dlYkdMMiAmJiByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgPT09IFJHQkZvcm1hdCAmJiAoIHJlbmRlclRhcmdldC50ZXh0dXJlLnR5cGUgPT09IEZsb2F0VHlwZSB8fCByZW5kZXJUYXJnZXQudGV4dHVyZS50eXBlID09PSBIYWxmRmxvYXRUeXBlICkgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldC50ZXh0dXJlLmZvcm1hdCA9IFJHQkFGb3JtYXQ7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFJlbmRlcmluZyB0byB0ZXh0dXJlcyB3aXRoIFJHQiBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZC4gVXNpbmcgUkdCQSBmb3JtYXQgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cblx0XHQvLyBTZXR1cCBmcmFtZWJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDY7IGkgKysgKSB7XG5cblx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRnJhbWVidWZmZXJbIGkgXSA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlciA9IF9nbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXG5cdFx0XHRpZiAoIGlzTXVsdGlzYW1wbGUgKSB7XG5cblx0XHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHRcdHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyID0gX2dsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsQ29sb3JSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZFJlbmRlcmJ1ZmZlciggMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cblx0XHRcdFx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCByZW5kZXJUYXJnZXQudGV4dHVyZS5mb3JtYXQgKTtcblx0XHRcdFx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggcmVuZGVyVGFyZ2V0LnRleHR1cmUudHlwZSApO1xuXHRcdFx0XHRcdHZhciBnbEludGVybmFsRm9ybWF0ID0gZ2V0SW50ZXJuYWxGb3JtYXQoIHJlbmRlclRhcmdldC50ZXh0dXJlLmludGVybmFsRm9ybWF0LCBnbEZvcm1hdCwgZ2xUeXBlICk7XG5cdFx0XHRcdFx0dmFyIHNhbXBsZXMgPSBnZXRSZW5kZXJUYXJnZXRTYW1wbGVzKCByZW5kZXJUYXJnZXQgKTtcblx0XHRcdFx0XHRfZ2wucmVuZGVyYnVmZmVyU3RvcmFnZU11bHRpc2FtcGxlKCAzNjE2MSwgc2FtcGxlcywgZ2xJbnRlcm5hbEZvcm1hdCwgcmVuZGVyVGFyZ2V0LndpZHRoLCByZW5kZXJUYXJnZXQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0XHRfZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoIDM2MTYwLCAzNjA2NCwgMzYxNjEsIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbENvbG9yUmVuZGVyYnVmZmVyICk7XG5cdFx0XHRcdFx0X2dsLmJpbmRSZW5kZXJidWZmZXIoIDM2MTYxLCBudWxsICk7XG5cblx0XHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIHtcblxuXHRcdFx0XHRcdFx0cmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsRGVwdGhSZW5kZXJidWZmZXIgPSBfZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XG5cdFx0XHRcdFx0XHRzZXR1cFJlbmRlckJ1ZmZlclN0b3JhZ2UoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbERlcHRoUmVuZGVyYnVmZmVyLCByZW5kZXJUYXJnZXQsIHRydWUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBudWxsICk7XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCBjYW4gb25seSBiZSB1c2VkIHdpdGggV2ViR0wyLicgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIFNldHVwIGNvbG9yIGJ1ZmZlclxuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgdGV4dHVyZVByb3BlcnRpZXMuX193ZWJnbFRleHR1cmUgKTtcblx0XHRcdHNldFRleHR1cmVQYXJhbWV0ZXJzKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0XHRcdHNldHVwRnJhbWVCdWZmZXJUZXh0dXJlKCByZW5kZXJUYXJnZXRQcm9wZXJ0aWVzLl9fd2ViZ2xGcmFtZWJ1ZmZlclsgaSBdLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNDA2OSArIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApICkge1xuXG5cdFx0XHRcdGdlbmVyYXRlTWlwbWFwKCAzNDA2NywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHJlbmRlclRhcmdldC53aWR0aCwgcmVuZGVyVGFyZ2V0LmhlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCAzNDA2NywgbnVsbCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIDM1NTMsIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRzZXRUZXh0dXJlUGFyYW1ldGVycyggMzU1MywgcmVuZGVyVGFyZ2V0LnRleHR1cmUsIHN1cHBvcnRzTWlwcyApO1xuXHRcdFx0c2V0dXBGcmFtZUJ1ZmZlclRleHR1cmUoIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyLCByZW5kZXJUYXJnZXQsIDM2MDY0LCAzNTUzICk7XG5cblx0XHRcdGlmICggdGV4dHVyZU5lZWRzR2VuZXJhdGVNaXBtYXBzKCByZW5kZXJUYXJnZXQudGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdFx0Z2VuZXJhdGVNaXBtYXAoIDM1NTMsIHJlbmRlclRhcmdldC50ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRzdGF0ZS5iaW5kVGV4dHVyZSggMzU1MywgbnVsbCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gU2V0dXAgZGVwdGggYW5kIHN0ZW5jaWwgYnVmZmVyc1xuXG5cdFx0aWYgKCByZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgKSB7XG5cblx0XHRcdHNldHVwRGVwdGhSZW5kZXJidWZmZXIoIHJlbmRlclRhcmdldCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiB1cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0dmFyIHN1cHBvcnRzTWlwcyA9IGlzUG93ZXJPZlR3byggcmVuZGVyVGFyZ2V0ICkgfHwgaXNXZWJHTDI7XG5cblx0XHRpZiAoIHRleHR1cmVOZWVkc0dlbmVyYXRlTWlwbWFwcyggdGV4dHVyZSwgc3VwcG9ydHNNaXBzICkgKSB7XG5cblx0XHRcdHZhciB0YXJnZXQgPSByZW5kZXJUYXJnZXQuaXNXZWJHTEN1YmVSZW5kZXJUYXJnZXQgPyAzNDA2NyA6IDM1NTM7XG5cdFx0XHR2YXIgd2ViZ2xUZXh0dXJlID0gcHJvcGVydGllcy5nZXQoIHRleHR1cmUgKS5fX3dlYmdsVGV4dHVyZTtcblxuXHRcdFx0c3RhdGUuYmluZFRleHR1cmUoIHRhcmdldCwgd2ViZ2xUZXh0dXJlICk7XG5cdFx0XHRnZW5lcmF0ZU1pcG1hcCggdGFyZ2V0LCB0ZXh0dXJlLCByZW5kZXJUYXJnZXQud2lkdGgsIHJlbmRlclRhcmdldC5oZWlnaHQgKTtcblx0XHRcdHN0YXRlLmJpbmRUZXh0dXJlKCB0YXJnZXQsIG51bGwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0aWYgKCBpc1dlYkdMMiApIHtcblxuXHRcdFx0XHR2YXIgcmVuZGVyVGFyZ2V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjAwOCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTtcblx0XHRcdFx0X2dsLmJpbmRGcmFtZWJ1ZmZlciggMzYwMDksIHJlbmRlclRhcmdldFByb3BlcnRpZXMuX193ZWJnbEZyYW1lYnVmZmVyICk7XG5cblx0XHRcdFx0dmFyIHdpZHRoID0gcmVuZGVyVGFyZ2V0LndpZHRoO1xuXHRcdFx0XHR2YXIgaGVpZ2h0ID0gcmVuZGVyVGFyZ2V0LmhlaWdodDtcblx0XHRcdFx0dmFyIG1hc2sgPSAxNjM4NDtcblxuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5kZXB0aEJ1ZmZlciApIG1hc2sgfD0gMjU2O1xuXHRcdFx0XHRpZiAoIHJlbmRlclRhcmdldC5zdGVuY2lsQnVmZmVyICkgbWFzayB8PSAxMDI0O1xuXG5cdFx0XHRcdF9nbC5ibGl0RnJhbWVidWZmZXIoIDAsIDAsIHdpZHRoLCBoZWlnaHQsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIG1hc2ssIDk3MjggKTtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgcmVuZGVyVGFyZ2V0UHJvcGVydGllcy5fX3dlYmdsTXVsdGlzYW1wbGVkRnJhbWVidWZmZXIgKTsgLy8gc2VlICMxODkwNVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IFdlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgY2FuIG9ubHkgYmUgdXNlZCB3aXRoIFdlYkdMMi4nICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0UmVuZGVyVGFyZ2V0U2FtcGxlcyggcmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0cmV0dXJuICggaXNXZWJHTDIgJiYgcmVuZGVyVGFyZ2V0LmlzV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCApID9cblx0XHRcdE1hdGgubWluKCBtYXhTYW1wbGVzLCByZW5kZXJUYXJnZXQuc2FtcGxlcyApIDogMDtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlVmlkZW9UZXh0dXJlKCB0ZXh0dXJlICkge1xuXG5cdFx0dmFyIGZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHQvLyBDaGVjayB0aGUgbGFzdCBmcmFtZSB3ZSB1cGRhdGVkIHRoZSBWaWRlb1RleHR1cmVcblxuXHRcdGlmICggX3ZpZGVvVGV4dHVyZXMuZ2V0KCB0ZXh0dXJlICkgIT09IGZyYW1lICkge1xuXG5cdFx0XHRfdmlkZW9UZXh0dXJlcy5zZXQoIHRleHR1cmUsIGZyYW1lICk7XG5cdFx0XHR0ZXh0dXJlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG5cdHZhciB3YXJuZWRUZXh0dXJlMkQgPSBmYWxzZTtcblx0dmFyIHdhcm5lZFRleHR1cmVDdWJlID0gZmFsc2U7XG5cblx0ZnVuY3Rpb24gc2FmZVNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApIHtcblxuXHRcdGlmICggdGV4dHVyZSAmJiB0ZXh0dXJlLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdGlmICggd2FybmVkVGV4dHVyZTJEID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oIFwiVEhSRUUuV2ViR0xUZXh0dXJlcy5zYWZlU2V0VGV4dHVyZTJEOiBkb24ndCB1c2UgcmVuZGVyIHRhcmdldHMgYXMgdGV4dHVyZXMuIFVzZSB0aGVpciAudGV4dHVyZSBwcm9wZXJ0eSBpbnN0ZWFkLlwiICk7XG5cdFx0XHRcdHdhcm5lZFRleHR1cmUyRCA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdFx0dGV4dHVyZSA9IHRleHR1cmUudGV4dHVyZTtcblxuXHRcdH1cblxuXHRcdHNldFRleHR1cmUyRCggdGV4dHVyZSwgc2xvdCApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBzYWZlU2V0VGV4dHVyZUN1YmUoIHRleHR1cmUsIHNsb3QgKSB7XG5cblx0XHRpZiAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc1dlYkdMQ3ViZVJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0aWYgKCB3YXJuZWRUZXh0dXJlQ3ViZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLldlYkdMVGV4dHVyZXMuc2FmZVNldFRleHR1cmVDdWJlOiBkb24ndCB1c2UgY3ViZSByZW5kZXIgdGFyZ2V0cyBhcyB0ZXh0dXJlcy4gVXNlIHRoZWlyIC50ZXh0dXJlIHByb3BlcnR5IGluc3RlYWQuXCIgKTtcblx0XHRcdFx0d2FybmVkVGV4dHVyZUN1YmUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUgPSB0ZXh0dXJlLnRleHR1cmU7XG5cblx0XHR9XG5cblx0XHQvLyBjdXJyZW50bHkgcmVseWluZyBvbiB0aGUgZmFjdCB0aGF0IFdlYkdMQ3ViZVJlbmRlclRhcmdldC50ZXh0dXJlIGlzIGEgVGV4dHVyZSBhbmQgTk9UIGEgQ3ViZVRleHR1cmVcblx0XHQvLyBUT0RPOiB1bmlmeSB0aGVzZSBjb2RlIHBhdGhzXG5cdFx0aWYgKCAoIHRleHR1cmUgJiYgdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkgfHxcblx0XHRcdCggQXJyYXkuaXNBcnJheSggdGV4dHVyZS5pbWFnZSApICYmIHRleHR1cmUuaW1hZ2UubGVuZ3RoID09PSA2ICkgKSB7XG5cblx0XHRcdC8vIENvbXByZXNzZWRUZXh0dXJlIGNhbiBoYXZlIEFycmF5IGluIGltYWdlIDovXG5cblx0XHRcdC8vIHRoaXMgZnVuY3Rpb24gYWxvbmUgc2hvdWxkIHRha2UgY2FyZSBvZiBjdWJlIHRleHR1cmVzXG5cdFx0XHRzZXRUZXh0dXJlQ3ViZSggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYXNzdW1lZDogdGV4dHVyZSBwcm9wZXJ0eSBvZiBUSFJFRS5XZWJHTEN1YmVSZW5kZXJUYXJnZXRcblx0XHRcdHNldFRleHR1cmVDdWJlRHluYW1pYyggdGV4dHVyZSwgc2xvdCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvL1xuXG5cdHRoaXMuYWxsb2NhdGVUZXh0dXJlVW5pdCA9IGFsbG9jYXRlVGV4dHVyZVVuaXQ7XG5cdHRoaXMucmVzZXRUZXh0dXJlVW5pdHMgPSByZXNldFRleHR1cmVVbml0cztcblxuXHR0aGlzLnNldFRleHR1cmUyRCA9IHNldFRleHR1cmUyRDtcblx0dGhpcy5zZXRUZXh0dXJlMkRBcnJheSA9IHNldFRleHR1cmUyREFycmF5O1xuXHR0aGlzLnNldFRleHR1cmUzRCA9IHNldFRleHR1cmUzRDtcblx0dGhpcy5zZXRUZXh0dXJlQ3ViZSA9IHNldFRleHR1cmVDdWJlO1xuXHR0aGlzLnNldFRleHR1cmVDdWJlRHluYW1pYyA9IHNldFRleHR1cmVDdWJlRHluYW1pYztcblx0dGhpcy5zZXR1cFJlbmRlclRhcmdldCA9IHNldHVwUmVuZGVyVGFyZ2V0O1xuXHR0aGlzLnVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcCA9IHVwZGF0ZVJlbmRlclRhcmdldE1pcG1hcDtcblx0dGhpcy51cGRhdGVNdWx0aXNhbXBsZVJlbmRlclRhcmdldCA9IHVwZGF0ZU11bHRpc2FtcGxlUmVuZGVyVGFyZ2V0O1xuXG5cdHRoaXMuc2FmZVNldFRleHR1cmUyRCA9IHNhZmVTZXRUZXh0dXJlMkQ7XG5cdHRoaXMuc2FmZVNldFRleHR1cmVDdWJlID0gc2FmZVNldFRleHR1cmVDdWJlO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB0aGVzcGl0ZSAvIGh0dHA6Ly93d3cudHdpdHRlci5jb20vdGhlc3BpdGVcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFV0aWxzKCBnbCwgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzICkge1xuXG5cdHZhciBpc1dlYkdMMiA9IGNhcGFiaWxpdGllcy5pc1dlYkdMMjtcblxuXHRmdW5jdGlvbiBjb252ZXJ0KCBwICkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbjtcblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRCeXRlVHlwZSApIHJldHVybiA1MTIxO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDQ0NDRUeXBlICkgcmV0dXJuIDMyODE5O1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU1NTFUeXBlICkgcmV0dXJuIDMyODIwO1xuXHRcdGlmICggcCA9PT0gVW5zaWduZWRTaG9ydDU2NVR5cGUgKSByZXR1cm4gMzM2MzU7XG5cblx0XHRpZiAoIHAgPT09IEJ5dGVUeXBlICkgcmV0dXJuIDUxMjA7XG5cdFx0aWYgKCBwID09PSBTaG9ydFR5cGUgKSByZXR1cm4gNTEyMjtcblx0XHRpZiAoIHAgPT09IFVuc2lnbmVkU2hvcnRUeXBlICkgcmV0dXJuIDUxMjM7XG5cdFx0aWYgKCBwID09PSBJbnRUeXBlICkgcmV0dXJuIDUxMjQ7XG5cdFx0aWYgKCBwID09PSBVbnNpZ25lZEludFR5cGUgKSByZXR1cm4gNTEyNTtcblx0XHRpZiAoIHAgPT09IEZsb2F0VHlwZSApIHJldHVybiA1MTI2O1xuXG5cdFx0aWYgKCBwID09PSBIYWxmRmxvYXRUeXBlICkge1xuXG5cdFx0XHRpZiAoIGlzV2ViR0wyICkgcmV0dXJuIDUxMzE7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4dGVuc2lvbi5IQUxGX0ZMT0FUX09FUztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBBbHBoYUZvcm1hdCApIHJldHVybiA2NDA2O1xuXHRcdGlmICggcCA9PT0gUkdCRm9ybWF0ICkgcmV0dXJuIDY0MDc7XG5cdFx0aWYgKCBwID09PSBSR0JBRm9ybWF0ICkgcmV0dXJuIDY0MDg7XG5cdFx0aWYgKCBwID09PSBMdW1pbmFuY2VGb3JtYXQgKSByZXR1cm4gNjQwOTtcblx0XHRpZiAoIHAgPT09IEx1bWluYW5jZUFscGhhRm9ybWF0ICkgcmV0dXJuIDY0MTA7XG5cdFx0aWYgKCBwID09PSBEZXB0aEZvcm1hdCApIHJldHVybiA2NDAyO1xuXHRcdGlmICggcCA9PT0gRGVwdGhTdGVuY2lsRm9ybWF0ICkgcmV0dXJuIDM0MDQxO1xuXHRcdGlmICggcCA9PT0gUmVkRm9ybWF0ICkgcmV0dXJuIDY0MDM7XG5cblx0XHQvLyBXZWJHTDIgZm9ybWF0cy5cblxuXHRcdGlmICggcCA9PT0gUmVkSW50ZWdlckZvcm1hdCApIHJldHVybiAzNjI0NDtcblx0XHRpZiAoIHAgPT09IFJHRm9ybWF0ICkgcmV0dXJuIDMzMzE5O1xuXHRcdGlmICggcCA9PT0gUkdJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIDMzMzIwO1xuXHRcdGlmICggcCA9PT0gUkdCSW50ZWdlckZvcm1hdCApIHJldHVybiAzNjI0ODtcblx0XHRpZiAoIHAgPT09IFJHQkFJbnRlZ2VyRm9ybWF0ICkgcmV0dXJuIDM2MjQ5O1xuXG5cdFx0aWYgKCBwID09PSBSR0JfUzNUQ19EWFQxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUzNUQ19EWFQzX0Zvcm1hdCB8fCBwID09PSBSR0JBX1MzVENfRFhUNV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdGlmICggcCA9PT0gUkdCX1MzVENfRFhUMV9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9TM1RDX0RYVDFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVDtcblx0XHRcdFx0aWYgKCBwID09PSBSR0JBX1MzVENfRFhUM19Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUzNUQ19EWFQ1X0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gUkdCX1BWUlRDXzRCUFBWMV9Gb3JtYXQgfHwgcCA9PT0gUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCB8fCBwID09PSBSR0JBX1BWUlRDXzJCUFBWMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdFx0XHRpZiAoIGV4dGVuc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQl9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfUFZSVENfNEJQUFYxX0Zvcm1hdCApIHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc7XG5cdFx0XHRcdGlmICggcCA9PT0gUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMV9Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb24uQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9FVEMyX0VBQ19Gb3JtYXQgKSB7XG5cblx0XHRcdGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0aWYgKCBwID09PSBSR0JfRVRDMl9Gb3JtYXQgKSByZXR1cm4gZXh0ZW5zaW9uLkNPTVBSRVNTRURfUkdCOF9FVEMyO1xuXHRcdFx0XHRpZiAoIHAgPT09IFJHQkFfRVRDMl9FQUNfRm9ybWF0ICkgcmV0dXJuIGV4dGVuc2lvbi5DT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHAgPT09IFJHQkFfQVNUQ180eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ181eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfNng1X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBSR0JBX0FTVENfOHg1X0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gUkdCQV9BU1RDXzh4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFJHQkFfQVNUQ18xMHgxMF9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFJHQkFfQVNUQ18xMngxMF9Gb3JtYXQgfHwgcCA9PT0gUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gU1JHQjhfQUxQSEE4X0FTVENfNHg0X0Zvcm1hdCB8fCBwID09PSBTUkdCOF9BTFBIQThfQVNUQ181eDRfRm9ybWF0IHx8IHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzV4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzZ4NV9Gb3JtYXQgfHwgcCA9PT0gU1JHQjhfQUxQSEE4X0FTVENfNng2X0Zvcm1hdCB8fCBwID09PSBTUkdCOF9BTFBIQThfQVNUQ184eDVfRm9ybWF0IHx8XG5cdFx0XHRwID09PSBTUkdCOF9BTFBIQThfQVNUQ184eDZfRm9ybWF0IHx8IHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzh4OF9Gb3JtYXQgfHwgcCA9PT0gU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9Gb3JtYXQgfHxcblx0XHRcdHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzEweDZfRm9ybWF0IHx8IHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzEweDhfRm9ybWF0IHx8IHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzEweDEwX0Zvcm1hdCB8fFxuXHRcdFx0cCA9PT0gU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfRm9ybWF0IHx8IHAgPT09IFNSR0I4X0FMUEhBOF9BU1RDXzEyeDEyX0Zvcm1hdCApIHtcblxuXHRcdFx0ZXh0ZW5zaW9uID0gZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfYXN0YycgKTtcblxuXHRcdFx0aWYgKCBleHRlbnNpb24gIT09IG51bGwgKSB7XG5cblx0XHRcdFx0Ly8gVE9ETyBDb21wbGV0ZT9cblxuXHRcdFx0XHRyZXR1cm4gcDtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBwID09PSBSR0JBX0JQVENfRm9ybWF0ICkge1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ0VYVF90ZXh0dXJlX2NvbXByZXNzaW9uX2JwdGMnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIFRPRE8gQ29tcGxldGU/XG5cblx0XHRcdFx0cmV0dXJuIHA7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggcCA9PT0gVW5zaWduZWRJbnQyNDhUeXBlICkge1xuXG5cdFx0XHRpZiAoIGlzV2ViR0wyICkgcmV0dXJuIDM0MDQyO1xuXG5cdFx0XHRleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cblx0XHRcdGlmICggZXh0ZW5zaW9uICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHJldHVybiBleHRlbnNpb24uVU5TSUdORURfSU5UXzI0XzhfV0VCR0w7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHsgY29udmVydDogY29udmVydCB9O1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBcnJheUNhbWVyYSggYXJyYXkgKSB7XG5cblx0UGVyc3BlY3RpdmVDYW1lcmEuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuY2FtZXJhcyA9IGFycmF5IHx8IFtdO1xuXG59XG5cbkFycmF5Q2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFycmF5Q2FtZXJhLFxuXG5cdGlzQXJyYXlDYW1lcmE6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gR3JvdXAoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdHcm91cCc7XG5cbn1cblxuR3JvdXAucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR3JvdXAsXG5cblx0aXNHcm91cDogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBXZWJYUk1hbmFnZXIoIHJlbmRlcmVyLCBnbCApIHtcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHZhciBzZXNzaW9uID0gbnVsbDtcblxuXHR2YXIgZnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IDEuMDtcblxuXHR2YXIgcmVmZXJlbmNlU3BhY2UgPSBudWxsO1xuXHR2YXIgcmVmZXJlbmNlU3BhY2VUeXBlID0gJ2xvY2FsLWZsb29yJztcblxuXHR2YXIgcG9zZSA9IG51bGw7XG5cblx0dmFyIGNvbnRyb2xsZXJzID0gW107XG5cdHZhciBpbnB1dFNvdXJjZXNNYXAgPSBuZXcgTWFwKCk7XG5cblx0Ly9cblxuXHR2YXIgY2FtZXJhTCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSgpO1xuXHRjYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0Y2FtZXJhTC52aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0dmFyIGNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0Y2FtZXJhUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cdGNhbWVyYVIudmlld3BvcnQgPSBuZXcgVmVjdG9yNCgpO1xuXG5cdHZhciBjYW1lcmFWUiA9IG5ldyBBcnJheUNhbWVyYSggWyBjYW1lcmFMLCBjYW1lcmFSIF0gKTtcblx0Y2FtZXJhVlIubGF5ZXJzLmVuYWJsZSggMSApO1xuXHRjYW1lcmFWUi5sYXllcnMuZW5hYmxlKCAyICk7XG5cblx0dmFyIF9jdXJyZW50RGVwdGhOZWFyID0gbnVsbDtcblx0dmFyIF9jdXJyZW50RGVwdGhGYXIgPSBudWxsO1xuXG5cdC8vXG5cblx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0dGhpcy5pc1ByZXNlbnRpbmcgPSBmYWxzZTtcblxuXHR0aGlzLmdldENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoIGlkICkge1xuXG5cdFx0dmFyIGNvbnRyb2xsZXIgPSBjb250cm9sbGVyc1sgaWQgXTtcblxuXHRcdGlmICggY29udHJvbGxlciA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb250cm9sbGVyID0ge307XG5cdFx0XHRjb250cm9sbGVyc1sgaWQgXSA9IGNvbnRyb2xsZXI7XG5cblx0XHR9XG5cblx0XHRpZiAoIGNvbnRyb2xsZXIudGFyZ2V0UmF5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnRyb2xsZXIudGFyZ2V0UmF5ID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLnRhcmdldFJheS5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cdFx0XHRjb250cm9sbGVyLnRhcmdldFJheS52aXNpYmxlID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gY29udHJvbGxlci50YXJnZXRSYXk7XG5cblx0fTtcblxuXHR0aGlzLmdldENvbnRyb2xsZXJHcmlwID0gZnVuY3Rpb24gKCBpZCApIHtcblxuXHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGlkIF07XG5cblx0XHRpZiAoIGNvbnRyb2xsZXIgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udHJvbGxlciA9IHt9O1xuXHRcdFx0Y29udHJvbGxlcnNbIGlkIF0gPSBjb250cm9sbGVyO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBjb250cm9sbGVyLmdyaXAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29udHJvbGxlci5ncmlwID0gbmV3IEdyb3VwKCk7XG5cdFx0XHRjb250cm9sbGVyLmdyaXAubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHRcdFx0Y29udHJvbGxlci5ncmlwLnZpc2libGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjb250cm9sbGVyLmdyaXA7XG5cblx0fTtcblxuXHQvL1xuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkV2ZW50KCBldmVudCApIHtcblxuXHRcdHZhciBjb250cm9sbGVyID0gaW5wdXRTb3VyY2VzTWFwLmdldCggZXZlbnQuaW5wdXRTb3VyY2UgKTtcblxuXHRcdGlmICggY29udHJvbGxlciApIHtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyLnRhcmdldFJheSApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyLnRhcmdldFJheS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUgfSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY29udHJvbGxlci5ncmlwICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIuZ3JpcC5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6IGV2ZW50LnR5cGUgfSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uU2Vzc2lvbkVuZCgpIHtcblxuXHRcdGlucHV0U291cmNlc01hcC5mb3JFYWNoKCBmdW5jdGlvbiAoIGNvbnRyb2xsZXIsIGlucHV0U291cmNlICkge1xuXG5cdFx0XHRpZiAoIGNvbnRyb2xsZXIudGFyZ2V0UmF5ICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIudGFyZ2V0UmF5LmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTtcblx0XHRcdFx0Y29udHJvbGxlci50YXJnZXRSYXkudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY29udHJvbGxlci5ncmlwICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIuZ3JpcC5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cdFx0XHRcdGNvbnRyb2xsZXIuZ3JpcC52aXNpYmxlID0gZmFsc2U7XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHRcdGlucHV0U291cmNlc01hcC5jbGVhcigpO1xuXG5cdFx0Ly9cblxuXHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBudWxsICk7XG5cdFx0cmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCByZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKSApOyAvLyBIYWNrICMxNTgzMFxuXHRcdGFuaW1hdGlvbi5zdG9wKCk7XG5cblx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSBmYWxzZTtcblxuXHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ3Nlc3Npb25lbmQnIH0gKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gb25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UoIHZhbHVlICkge1xuXG5cdFx0cmVmZXJlbmNlU3BhY2UgPSB2YWx1ZTtcblxuXHRcdGFuaW1hdGlvbi5zZXRDb250ZXh0KCBzZXNzaW9uICk7XG5cdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0XHRzY29wZS5pc1ByZXNlbnRpbmcgPSB0cnVlO1xuXG5cdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnc2Vzc2lvbnN0YXJ0JyB9ICk7XG5cblx0fVxuXG5cdHRoaXMuc2V0RnJhbWVidWZmZXJTY2FsZUZhY3RvciA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yID0gdmFsdWU7XG5cblx0XHQvLyBXYXJuIGlmIGZ1bmN0aW9uIGlzIHVzZWQgd2hpbGUgcHJlc2VudGluZ1xuXHRcdGlmICggc2NvcGUuaXNQcmVzZW50aW5nID09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggXCJXZWJYUk1hbmFnZXI6IENhbm5vdCBjaGFuZ2UgZnJhbWVidWZmZXIgc2NhbGUgd2hpbGUgcHJlc2VudGluZyBWUiBjb250ZW50XCIgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVmZXJlbmNlU3BhY2VUeXBlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHJlZmVyZW5jZVNwYWNlVHlwZSA9IHZhbHVlO1xuXG5cdH07XG5cblx0dGhpcy5nZXRSZWZlcmVuY2VTcGFjZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiByZWZlcmVuY2VTcGFjZTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2Vzc2lvbiA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBzZXNzaW9uO1xuXG5cdH07XG5cblx0dGhpcy5zZXRTZXNzaW9uID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHNlc3Npb24gPSB2YWx1ZTtcblxuXHRcdGlmICggc2Vzc2lvbiAhPT0gbnVsbCApIHtcblxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnc2VsZWN0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdHN0YXJ0Jywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NlbGVjdGVuZCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ3NxdWVlemVzdGFydCcsIG9uU2Vzc2lvbkV2ZW50ICk7XG5cdFx0XHRzZXNzaW9uLmFkZEV2ZW50TGlzdGVuZXIoICdzcXVlZXplZW5kJywgb25TZXNzaW9uRXZlbnQgKTtcblx0XHRcdHNlc3Npb24uYWRkRXZlbnRMaXN0ZW5lciggJ2VuZCcsIG9uU2Vzc2lvbkVuZCApO1xuXG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG5cblx0XHRcdHZhciBsYXllckluaXQgPSB7XG5cdFx0XHRcdGFudGlhbGlhczogYXR0cmlidXRlcy5hbnRpYWxpYXMsXG5cdFx0XHRcdGFscGhhOiBhdHRyaWJ1dGVzLmFscGhhLFxuXHRcdFx0XHRkZXB0aDogYXR0cmlidXRlcy5kZXB0aCxcblx0XHRcdFx0c3RlbmNpbDogYXR0cmlidXRlcy5zdGVuY2lsLFxuXHRcdFx0XHRmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yOiBmcmFtZWJ1ZmZlclNjYWxlRmFjdG9yXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0XHRcdHZhciBiYXNlTGF5ZXIgPSBuZXcgWFJXZWJHTExheWVyKCBzZXNzaW9uLCBnbCwgbGF5ZXJJbml0ICk7XG5cblx0XHRcdHNlc3Npb24udXBkYXRlUmVuZGVyU3RhdGUoIHsgYmFzZUxheWVyOiBiYXNlTGF5ZXIgfSApO1xuXG5cdFx0XHRzZXNzaW9uLnJlcXVlc3RSZWZlcmVuY2VTcGFjZSggcmVmZXJlbmNlU3BhY2VUeXBlICkudGhlbiggb25SZXF1ZXN0UmVmZXJlbmNlU3BhY2UgKTtcblxuXHRcdFx0Ly9cblxuXHRcdFx0c2Vzc2lvbi5hZGRFdmVudExpc3RlbmVyKCAnaW5wdXRzb3VyY2VzY2hhbmdlJywgdXBkYXRlSW5wdXRTb3VyY2VzICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHRmdW5jdGlvbiB1cGRhdGVJbnB1dFNvdXJjZXMoIGV2ZW50ICkge1xuXG5cdFx0dmFyIGlucHV0U291cmNlcyA9IHNlc3Npb24uaW5wdXRTb3VyY2VzO1xuXG5cdFx0Ly8gQXNzaWduIGlucHV0U291cmNlcyB0byBhdmFpbGFibGUgY29udHJvbGxlcnNcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZXJzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aW5wdXRTb3VyY2VzTWFwLnNldCggaW5wdXRTb3VyY2VzWyBpIF0sIGNvbnRyb2xsZXJzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vIE5vdGlmeSBkaXNjb25uZWN0ZWRcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGV2ZW50LnJlbW92ZWQubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaW5wdXRTb3VyY2UgPSBldmVudC5yZW1vdmVkWyBpIF07XG5cdFx0XHR2YXIgY29udHJvbGxlciA9IGlucHV0U291cmNlc01hcC5nZXQoIGlucHV0U291cmNlICk7XG5cblx0XHRcdGlmICggY29udHJvbGxlciApIHtcblxuXHRcdFx0XHRpZiAoIGNvbnRyb2xsZXIudGFyZ2V0UmF5ICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci50YXJnZXRSYXkuZGlzcGF0Y2hFdmVudCggeyB0eXBlOiAnZGlzY29ubmVjdGVkJywgZGF0YTogaW5wdXRTb3VyY2UgfSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGNvbnRyb2xsZXIuZ3JpcCApIHtcblxuXHRcdFx0XHRcdGNvbnRyb2xsZXIuZ3JpcC5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdkaXNjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlucHV0U291cmNlc01hcC5kZWxldGUoIGlucHV0U291cmNlICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIE5vdGlmeSBjb25uZWN0ZWRcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGV2ZW50LmFkZGVkLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGlucHV0U291cmNlID0gZXZlbnQuYWRkZWRbIGkgXTtcblx0XHRcdHZhciBjb250cm9sbGVyID0gaW5wdXRTb3VyY2VzTWFwLmdldCggaW5wdXRTb3VyY2UgKTtcblxuXHRcdFx0aWYgKCBjb250cm9sbGVyICkge1xuXG5cdFx0XHRcdGlmICggY29udHJvbGxlci50YXJnZXRSYXkgKSB7XG5cblx0XHRcdFx0XHRjb250cm9sbGVyLnRhcmdldFJheS5kaXNwYXRjaEV2ZW50KCB7IHR5cGU6ICdjb25uZWN0ZWQnLCBkYXRhOiBpbnB1dFNvdXJjZSB9ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggY29udHJvbGxlci5ncmlwICkge1xuXG5cdFx0XHRcdFx0Y29udHJvbGxlci5ncmlwLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Nvbm5lY3RlZCcsIGRhdGE6IGlucHV0U291cmNlIH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0Ly9cblxuXHR2YXIgY2FtZXJhTFBvcyA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBjYW1lcmFSUG9zID0gbmV3IFZlY3RvcjMoKTtcblxuXHQvKipcblx0ICogQGF1dGhvciBqc2FudGVsbCAvIGh0dHBzOi8vd3d3LmpzYW50ZWxsLmNvbS9cblx0ICpcblx0ICogQXNzdW1lcyAyIGNhbWVyYXMgdGhhdCBhcmUgcGFyYWxsZWwgYW5kIHNoYXJlIGFuIFgtYXhpcywgYW5kIHRoYXRcblx0ICogdGhlIGNhbWVyYXMnIHByb2plY3Rpb24gYW5kIHdvcmxkIG1hdHJpY2VzIGhhdmUgYWxyZWFkeSBiZWVuIHNldC5cblx0ICogQW5kIHRoYXQgbmVhciBhbmQgZmFyIHBsYW5lcyBhcmUgaWRlbnRpY2FsIGZvciBib3RoIGNhbWVyYXMuXG5cdCAqIFZpc3VhbGl6YXRpb24gb2YgdGhpcyB0ZWNobmlxdWU6IGh0dHBzOi8vY29tcHV0ZXJncmFwaGljcy5zdGFja2V4Y2hhbmdlLmNvbS9hLzQ3NjVcblx0ICovXG5cdGZ1bmN0aW9uIHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYSwgY2FtZXJhTCwgY2FtZXJhUiApIHtcblxuXHRcdGNhbWVyYUxQb3Muc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBjYW1lcmFMLm1hdHJpeFdvcmxkICk7XG5cdFx0Y2FtZXJhUlBvcy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYVIubWF0cml4V29ybGQgKTtcblxuXHRcdHZhciBpcGQgPSBjYW1lcmFMUG9zLmRpc3RhbmNlVG8oIGNhbWVyYVJQb3MgKTtcblxuXHRcdHZhciBwcm9qTCA9IGNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5lbGVtZW50cztcblx0XHR2YXIgcHJvalIgPSBjYW1lcmFSLnByb2plY3Rpb25NYXRyaXguZWxlbWVudHM7XG5cblx0XHQvLyBWUiBzeXN0ZW1zIHdpbGwgaGF2ZSBpZGVudGljYWwgZmFyIGFuZCBuZWFyIHBsYW5lcywgYW5kXG5cdFx0Ly8gbW9zdCBsaWtlbHkgaWRlbnRpY2FsIHRvcCBhbmQgYm90dG9tIGZydXN0dW0gZXh0ZW50cy5cblx0XHQvLyBVc2UgdGhlIGxlZnQgY2FtZXJhIGZvciB0aGVzZSB2YWx1ZXMuXG5cdFx0dmFyIG5lYXIgPSBwcm9qTFsgMTQgXSAvICggcHJvakxbIDEwIF0gLSAxICk7XG5cdFx0dmFyIGZhciA9IHByb2pMWyAxNCBdIC8gKCBwcm9qTFsgMTAgXSArIDEgKTtcblx0XHR2YXIgdG9wRm92ID0gKCBwcm9qTFsgOSBdICsgMSApIC8gcHJvakxbIDUgXTtcblx0XHR2YXIgYm90dG9tRm92ID0gKCBwcm9qTFsgOSBdIC0gMSApIC8gcHJvakxbIDUgXTtcblxuXHRcdHZhciBsZWZ0Rm92ID0gKCBwcm9qTFsgOCBdIC0gMSApIC8gcHJvakxbIDAgXTtcblx0XHR2YXIgcmlnaHRGb3YgPSAoIHByb2pSWyA4IF0gKyAxICkgLyBwcm9qUlsgMCBdO1xuXHRcdHZhciBsZWZ0ID0gbmVhciAqIGxlZnRGb3Y7XG5cdFx0dmFyIHJpZ2h0ID0gbmVhciAqIHJpZ2h0Rm92O1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHRoZSBuZXcgY2FtZXJhJ3MgcG9zaXRpb24gb2Zmc2V0IGZyb20gdGhlXG5cdFx0Ly8gbGVmdCBjYW1lcmEuIHhPZmZzZXQgc2hvdWxkIGJlIHJvdWdobHkgaGFsZiBgaXBkYC5cblx0XHR2YXIgek9mZnNldCA9IGlwZCAvICggLSBsZWZ0Rm92ICsgcmlnaHRGb3YgKTtcblx0XHR2YXIgeE9mZnNldCA9IHpPZmZzZXQgKiAtIGxlZnRGb3Y7XG5cblx0XHQvLyBUT0RPOiBCZXR0ZXIgd2F5IHRvIGFwcGx5IHRoaXMgb2Zmc2V0P1xuXHRcdGNhbWVyYUwubWF0cml4V29ybGQuZGVjb21wb3NlKCBjYW1lcmEucG9zaXRpb24sIGNhbWVyYS5xdWF0ZXJuaW9uLCBjYW1lcmEuc2NhbGUgKTtcblx0XHRjYW1lcmEudHJhbnNsYXRlWCggeE9mZnNldCApO1xuXHRcdGNhbWVyYS50cmFuc2xhdGVaKCB6T2Zmc2V0ICk7XG5cdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLmNvbXBvc2UoIGNhbWVyYS5wb3NpdGlvbiwgY2FtZXJhLnF1YXRlcm5pb24sIGNhbWVyYS5zY2FsZSApO1xuXHRcdGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UuZ2V0SW52ZXJzZSggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cblx0XHQvLyBGaW5kIHRoZSB1bmlvbiBvZiB0aGUgZnJ1c3R1bSB2YWx1ZXMgb2YgdGhlIGNhbWVyYXMgYW5kIHNjYWxlXG5cdFx0Ly8gdGhlIHZhbHVlcyBzbyB0aGF0IHRoZSBuZWFyIHBsYW5lJ3MgcG9zaXRpb24gZG9lcyBub3QgY2hhbmdlIGluIHdvcmxkIHNwYWNlLFxuXHRcdC8vIGFsdGhvdWdoIG11c3Qgbm93IGJlIHJlbGF0aXZlIHRvIHRoZSBuZXcgdW5pb24gY2FtZXJhLlxuXHRcdHZhciBuZWFyMiA9IG5lYXIgKyB6T2Zmc2V0O1xuXHRcdHZhciBmYXIyID0gZmFyICsgek9mZnNldDtcblx0XHR2YXIgbGVmdDIgPSBsZWZ0IC0geE9mZnNldDtcblx0XHR2YXIgcmlnaHQyID0gcmlnaHQgKyAoIGlwZCAtIHhPZmZzZXQgKTtcblx0XHR2YXIgdG9wMiA9IHRvcEZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblx0XHR2YXIgYm90dG9tMiA9IGJvdHRvbUZvdiAqIGZhciAvIGZhcjIgKiBuZWFyMjtcblxuXHRcdGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4Lm1ha2VQZXJzcGVjdGl2ZSggbGVmdDIsIHJpZ2h0MiwgdG9wMiwgYm90dG9tMiwgbmVhcjIsIGZhcjIgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKCBjYW1lcmEsIHBhcmVudCApIHtcblxuXHRcdGlmICggcGFyZW50ID09PSBudWxsICkge1xuXG5cdFx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y2FtZXJhLm1hdHJpeFdvcmxkLm11bHRpcGx5TWF0cmljZXMoIHBhcmVudC5tYXRyaXhXb3JsZCwgY2FtZXJhLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0Y2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZS5nZXRJbnZlcnNlKCBjYW1lcmEubWF0cml4V29ybGQgKTtcblxuXHR9XG5cblx0dGhpcy5nZXRDYW1lcmEgPSBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdGNhbWVyYVZSLm5lYXIgPSBjYW1lcmFSLm5lYXIgPSBjYW1lcmFMLm5lYXIgPSBjYW1lcmEubmVhcjtcblx0XHRjYW1lcmFWUi5mYXIgPSBjYW1lcmFSLmZhciA9IGNhbWVyYUwuZmFyID0gY2FtZXJhLmZhcjtcblxuXHRcdGlmICggX2N1cnJlbnREZXB0aE5lYXIgIT09IGNhbWVyYVZSLm5lYXIgfHwgX2N1cnJlbnREZXB0aEZhciAhPT0gY2FtZXJhVlIuZmFyICkge1xuXG5cdFx0XHQvLyBOb3RlIHRoYXQgdGhlIG5ldyByZW5kZXJTdGF0ZSB3b24ndCBhcHBseSB1bnRpbCB0aGUgbmV4dCBmcmFtZS4gU2VlICMxODMyMFxuXG5cdFx0XHRzZXNzaW9uLnVwZGF0ZVJlbmRlclN0YXRlKCB7XG5cdFx0XHRcdGRlcHRoTmVhcjogY2FtZXJhVlIubmVhcixcblx0XHRcdFx0ZGVwdGhGYXI6IGNhbWVyYVZSLmZhclxuXHRcdFx0fSApO1xuXG5cdFx0XHRfY3VycmVudERlcHRoTmVhciA9IGNhbWVyYVZSLm5lYXI7XG5cdFx0XHRfY3VycmVudERlcHRoRmFyID0gY2FtZXJhVlIuZmFyO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHBhcmVudCA9IGNhbWVyYS5wYXJlbnQ7XG5cdFx0dmFyIGNhbWVyYXMgPSBjYW1lcmFWUi5jYW1lcmFzO1xuXG5cdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFWUiwgcGFyZW50ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjYW1lcmFzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dXBkYXRlQ2FtZXJhKCBjYW1lcmFzWyBpIF0sIHBhcmVudCApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXBkYXRlIGNhbWVyYSBhbmQgaXRzIGNoaWxkcmVuXG5cblx0XHRjYW1lcmEubWF0cml4V29ybGQuY29weSggY2FtZXJhVlIubWF0cml4V29ybGQgKTtcblxuXHRcdHZhciBjaGlsZHJlbiA9IGNhbWVyYS5jaGlsZHJlbjtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdGNoaWxkcmVuWyBpIF0udXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdH1cblxuXHRcdHNldFByb2plY3Rpb25Gcm9tVW5pb24oIGNhbWVyYVZSLCBjYW1lcmFMLCBjYW1lcmFSICk7XG5cblx0XHRyZXR1cm4gY2FtZXJhVlI7XG5cblx0fTtcblxuXHQvLyBBbmltYXRpb24gTG9vcFxuXG5cdHZhciBvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBudWxsO1xuXG5cdGZ1bmN0aW9uIG9uQW5pbWF0aW9uRnJhbWUoIHRpbWUsIGZyYW1lICkge1xuXG5cdFx0cG9zZSA9IGZyYW1lLmdldFZpZXdlclBvc2UoIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRpZiAoIHBvc2UgIT09IG51bGwgKSB7XG5cblx0XHRcdHZhciB2aWV3cyA9IHBvc2Uudmlld3M7XG5cdFx0XHR2YXIgYmFzZUxheWVyID0gc2Vzc2lvbi5yZW5kZXJTdGF0ZS5iYXNlTGF5ZXI7XG5cblx0XHRcdHJlbmRlcmVyLnNldEZyYW1lYnVmZmVyKCBiYXNlTGF5ZXIuZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmlld3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciB2aWV3ID0gdmlld3NbIGkgXTtcblx0XHRcdFx0dmFyIHZpZXdwb3J0ID0gYmFzZUxheWVyLmdldFZpZXdwb3J0KCB2aWV3ICk7XG5cblx0XHRcdFx0dmFyIGNhbWVyYSA9IGNhbWVyYVZSLmNhbWVyYXNbIGkgXTtcblx0XHRcdFx0Y2FtZXJhLm1hdHJpeC5mcm9tQXJyYXkoIHZpZXcudHJhbnNmb3JtLm1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5mcm9tQXJyYXkoIHZpZXcucHJvamVjdGlvbk1hdHJpeCApO1xuXHRcdFx0XHRjYW1lcmEudmlld3BvcnQuc2V0KCB2aWV3cG9ydC54LCB2aWV3cG9ydC55LCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0ICk7XG5cblx0XHRcdFx0aWYgKCBpID09PSAwICkge1xuXG5cdFx0XHRcdFx0Y2FtZXJhVlIubWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXggKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgaW5wdXRTb3VyY2VzID0gc2Vzc2lvbi5pbnB1dFNvdXJjZXM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBjb250cm9sbGVycy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnNbIGkgXTtcblxuXHRcdFx0dmFyIGlucHV0U291cmNlID0gaW5wdXRTb3VyY2VzWyBpIF07XG5cblx0XHRcdHZhciBpbnB1dFBvc2UgPSBudWxsO1xuXHRcdFx0dmFyIGdyaXBQb3NlID0gbnVsbDtcblxuXHRcdFx0aWYgKCBpbnB1dFNvdXJjZSApIHtcblxuXHRcdFx0XHRpZiAoIGNvbnRyb2xsZXIudGFyZ2V0UmF5ICkge1xuXG5cdFx0XHRcdFx0aW5wdXRQb3NlID0gZnJhbWUuZ2V0UG9zZSggaW5wdXRTb3VyY2UudGFyZ2V0UmF5U3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0XHRpZiAoIGlucHV0UG9zZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0XHRcdFx0Y29udHJvbGxlci50YXJnZXRSYXkubWF0cml4LmZyb21BcnJheSggaW5wdXRQb3NlLnRyYW5zZm9ybS5tYXRyaXggKTtcblx0XHRcdFx0XHRcdGNvbnRyb2xsZXIudGFyZ2V0UmF5Lm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIudGFyZ2V0UmF5LnBvc2l0aW9uLCBjb250cm9sbGVyLnRhcmdldFJheS5yb3RhdGlvbiwgY29udHJvbGxlci50YXJnZXRSYXkuc2NhbGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBjb250cm9sbGVyLmdyaXAgJiYgaW5wdXRTb3VyY2UuZ3JpcFNwYWNlICkge1xuXG5cdFx0XHRcdFx0Z3JpcFBvc2UgPSBmcmFtZS5nZXRQb3NlKCBpbnB1dFNvdXJjZS5ncmlwU3BhY2UsIHJlZmVyZW5jZVNwYWNlICk7XG5cblx0XHRcdFx0XHRpZiAoIGdyaXBQb3NlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHRjb250cm9sbGVyLmdyaXAubWF0cml4LmZyb21BcnJheSggZ3JpcFBvc2UudHJhbnNmb3JtLm1hdHJpeCApO1xuXHRcdFx0XHRcdFx0Y29udHJvbGxlci5ncmlwLm1hdHJpeC5kZWNvbXBvc2UoIGNvbnRyb2xsZXIuZ3JpcC5wb3NpdGlvbiwgY29udHJvbGxlci5ncmlwLnJvdGF0aW9uLCBjb250cm9sbGVyLmdyaXAuc2NhbGUgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb250cm9sbGVyLnRhcmdldFJheSApIHtcblxuXHRcdFx0XHRjb250cm9sbGVyLnRhcmdldFJheS52aXNpYmxlID0gaW5wdXRQb3NlICE9PSBudWxsO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggY29udHJvbGxlci5ncmlwICkge1xuXG5cdFx0XHRcdGNvbnRyb2xsZXIuZ3JpcC52aXNpYmxlID0gZ3JpcFBvc2UgIT09IG51bGw7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lLCBmcmFtZSApO1xuXG5cdH1cblxuXHR2YXIgYW5pbWF0aW9uID0gbmV3IFdlYkdMQW5pbWF0aW9uKCk7XG5cdGFuaW1hdGlvbi5zZXRBbmltYXRpb25Mb29wKCBvbkFuaW1hdGlvbkZyYW1lICk7XG5cblx0dGhpcy5zZXRBbmltYXRpb25Mb29wID0gZnVuY3Rpb24gKCBjYWxsYmFjayApIHtcblxuXHRcdG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IGNhbGxiYWNrO1xuXG5cdH07XG5cblx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge307XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggV2ViWFJNYW5hZ2VyLnByb3RvdHlwZSwgRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApO1xuXG4vKipcbiAqIEBhdXRob3Igc3VwZXJlZ2diZXJ0IC8gaHR0cDovL3d3dy5wYXVsYnJ1bnQuY28udWsvXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3Igc3ppbWVrIC8gaHR0cHM6Ly9naXRodWIuY29tL3N6aW1lay9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBXZWJHTFJlbmRlcmVyKCBwYXJhbWV0ZXJzICkge1xuXG5cdHBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzIHx8IHt9O1xuXG5cdHZhciBfY2FudmFzID0gcGFyYW1ldGVycy5jYW52YXMgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuY2FudmFzIDogZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsICdjYW52YXMnICksXG5cdFx0X2NvbnRleHQgPSBwYXJhbWV0ZXJzLmNvbnRleHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuY29udGV4dCA6IG51bGwsXG5cblx0XHRfYWxwaGEgPSBwYXJhbWV0ZXJzLmFscGhhICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmFscGhhIDogZmFsc2UsXG5cdFx0X2RlcHRoID0gcGFyYW1ldGVycy5kZXB0aCAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5kZXB0aCA6IHRydWUsXG5cdFx0X3N0ZW5jaWwgPSBwYXJhbWV0ZXJzLnN0ZW5jaWwgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuc3RlbmNpbCA6IHRydWUsXG5cdFx0X2FudGlhbGlhcyA9IHBhcmFtZXRlcnMuYW50aWFsaWFzICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmFudGlhbGlhcyA6IGZhbHNlLFxuXHRcdF9wcmVtdWx0aXBsaWVkQWxwaGEgPSBwYXJhbWV0ZXJzLnByZW11bHRpcGxpZWRBbHBoYSAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVtdWx0aXBsaWVkQWxwaGEgOiB0cnVlLFxuXHRcdF9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBwYXJhbWV0ZXJzLnByZXNlcnZlRHJhd2luZ0J1ZmZlciAhPT0gdW5kZWZpbmVkID8gcGFyYW1ldGVycy5wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgOiBmYWxzZSxcblx0XHRfcG93ZXJQcmVmZXJlbmNlID0gcGFyYW1ldGVycy5wb3dlclByZWZlcmVuY2UgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMucG93ZXJQcmVmZXJlbmNlIDogJ2RlZmF1bHQnLFxuXHRcdF9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ID0gcGFyYW1ldGVycy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ICE9PSB1bmRlZmluZWQgPyBwYXJhbWV0ZXJzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgOiBmYWxzZTtcblxuXHR2YXIgY3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xuXHR2YXIgY3VycmVudFJlbmRlclN0YXRlID0gbnVsbDtcblxuXHQvLyBwdWJsaWMgcHJvcGVydGllc1xuXG5cdHRoaXMuZG9tRWxlbWVudCA9IF9jYW52YXM7XG5cblx0Ly8gRGVidWcgY29uZmlndXJhdGlvbiBjb250YWluZXJcblx0dGhpcy5kZWJ1ZyA9IHtcblxuXHRcdC8qKlxuXHRcdCAqIEVuYWJsZXMgZXJyb3IgY2hlY2tpbmcgYW5kIHJlcG9ydGluZyB3aGVuIHNoYWRlciBwcm9ncmFtcyBhcmUgYmVpbmcgY29tcGlsZWRcblx0XHQgKiBAdHlwZSB7Ym9vbGVhbn1cblx0XHQgKi9cblx0XHRjaGVja1NoYWRlckVycm9yczogdHJ1ZVxuXHR9O1xuXG5cdC8vIGNsZWFyaW5nXG5cblx0dGhpcy5hdXRvQ2xlYXIgPSB0cnVlO1xuXHR0aGlzLmF1dG9DbGVhckNvbG9yID0gdHJ1ZTtcblx0dGhpcy5hdXRvQ2xlYXJEZXB0aCA9IHRydWU7XG5cdHRoaXMuYXV0b0NsZWFyU3RlbmNpbCA9IHRydWU7XG5cblx0Ly8gc2NlbmUgZ3JhcGhcblxuXHR0aGlzLnNvcnRPYmplY3RzID0gdHJ1ZTtcblxuXHQvLyB1c2VyLWRlZmluZWQgY2xpcHBpbmdcblxuXHR0aGlzLmNsaXBwaW5nUGxhbmVzID0gW107XG5cdHRoaXMubG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZTtcblxuXHQvLyBwaHlzaWNhbGx5IGJhc2VkIHNoYWRpbmdcblxuXHR0aGlzLmdhbW1hRmFjdG9yID0gMi4wO1x0Ly8gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdHRoaXMub3V0cHV0RW5jb2RpbmcgPSBMaW5lYXJFbmNvZGluZztcblxuXHQvLyBwaHlzaWNhbCBsaWdodHNcblxuXHR0aGlzLnBoeXNpY2FsbHlDb3JyZWN0TGlnaHRzID0gZmFsc2U7XG5cblx0Ly8gdG9uZSBtYXBwaW5nXG5cblx0dGhpcy50b25lTWFwcGluZyA9IExpbmVhclRvbmVNYXBwaW5nO1xuXHR0aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7XG5cdHRoaXMudG9uZU1hcHBpbmdXaGl0ZVBvaW50ID0gMS4wO1xuXG5cdC8vIG1vcnBoc1xuXG5cdHRoaXMubWF4TW9ycGhUYXJnZXRzID0gODtcblx0dGhpcy5tYXhNb3JwaE5vcm1hbHMgPSA0O1xuXG5cdC8vIGludGVybmFsIHByb3BlcnRpZXNcblxuXHR2YXIgX3RoaXMgPSB0aGlzLFxuXG5cdFx0X2lzQ29udGV4dExvc3QgPSBmYWxzZSxcblxuXHRcdC8vIGludGVybmFsIHN0YXRlIGNhY2hlXG5cblx0XHRfZnJhbWVidWZmZXIgPSBudWxsLFxuXG5cdFx0X2N1cnJlbnRBY3RpdmVDdWJlRmFjZSA9IDAsXG5cdFx0X2N1cnJlbnRBY3RpdmVNaXBtYXBMZXZlbCA9IDAsXG5cdFx0X2N1cnJlbnRSZW5kZXJUYXJnZXQgPSBudWxsLFxuXHRcdF9jdXJyZW50RnJhbWVidWZmZXIgPSBudWxsLFxuXHRcdF9jdXJyZW50TWF0ZXJpYWxJZCA9IC0gMSxcblxuXHRcdC8vIGdlb21ldHJ5IGFuZCBwcm9ncmFtIGNhY2hpbmdcblxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtID0ge1xuXHRcdFx0Z2VvbWV0cnk6IG51bGwsXG5cdFx0XHRwcm9ncmFtOiBudWxsLFxuXHRcdFx0d2lyZWZyYW1lOiBmYWxzZVxuXHRcdH0sXG5cblx0XHRfY3VycmVudENhbWVyYSA9IG51bGwsXG5cdFx0X2N1cnJlbnRBcnJheUNhbWVyYSA9IG51bGwsXG5cblx0XHRfY3VycmVudFZpZXdwb3J0ID0gbmV3IFZlY3RvcjQoKSxcblx0XHRfY3VycmVudFNjaXNzb3IgPSBuZXcgVmVjdG9yNCgpLFxuXHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSBudWxsLFxuXG5cdFx0Ly9cblxuXHRcdF93aWR0aCA9IF9jYW52YXMud2lkdGgsXG5cdFx0X2hlaWdodCA9IF9jYW52YXMuaGVpZ2h0LFxuXG5cdFx0X3BpeGVsUmF0aW8gPSAxLFxuXHRcdF9vcGFxdWVTb3J0ID0gbnVsbCxcblx0XHRfdHJhbnNwYXJlbnRTb3J0ID0gbnVsbCxcblxuXHRcdF92aWV3cG9ydCA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKSxcblx0XHRfc2Npc3NvciA9IG5ldyBWZWN0b3I0KCAwLCAwLCBfd2lkdGgsIF9oZWlnaHQgKSxcblx0XHRfc2Npc3NvclRlc3QgPSBmYWxzZSxcblxuXHRcdC8vIGZydXN0dW1cblxuXHRcdF9mcnVzdHVtID0gbmV3IEZydXN0dW0oKSxcblxuXHRcdC8vIGNsaXBwaW5nXG5cblx0XHRfY2xpcHBpbmcgPSBuZXcgV2ViR0xDbGlwcGluZygpLFxuXHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSBmYWxzZSxcblxuXHRcdC8vIGNhbWVyYSBtYXRyaWNlcyBjYWNoZVxuXG5cdFx0X3Byb2pTY3JlZW5NYXRyaXggPSBuZXcgTWF0cml4NCgpLFxuXG5cdFx0X3ZlY3RvcjMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdGZ1bmN0aW9uIGdldFRhcmdldFBpeGVsUmF0aW8oKSB7XG5cblx0XHRyZXR1cm4gX2N1cnJlbnRSZW5kZXJUYXJnZXQgPT09IG51bGwgPyBfcGl4ZWxSYXRpbyA6IDE7XG5cblx0fVxuXG5cdC8vIGluaXRpYWxpemVcblxuXHR2YXIgX2dsO1xuXG5cdHRyeSB7XG5cblx0XHR2YXIgY29udGV4dEF0dHJpYnV0ZXMgPSB7XG5cdFx0XHRhbHBoYTogX2FscGhhLFxuXHRcdFx0ZGVwdGg6IF9kZXB0aCxcblx0XHRcdHN0ZW5jaWw6IF9zdGVuY2lsLFxuXHRcdFx0YW50aWFsaWFzOiBfYW50aWFsaWFzLFxuXHRcdFx0cHJlbXVsdGlwbGllZEFscGhhOiBfcHJlbXVsdGlwbGllZEFscGhhLFxuXHRcdFx0cHJlc2VydmVEcmF3aW5nQnVmZmVyOiBfcHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuXHRcdFx0cG93ZXJQcmVmZXJlbmNlOiBfcG93ZXJQcmVmZXJlbmNlLFxuXHRcdFx0ZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdDogX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQsXG5cdFx0XHR4ckNvbXBhdGlibGU6IHRydWVcblx0XHR9O1xuXG5cdFx0Ly8gZXZlbnQgbGlzdGVuZXJzIG11c3QgYmUgcmVnaXN0ZXJlZCBiZWZvcmUgV2ViR0wgY29udGV4dCBpcyBjcmVhdGVkLCBzZWUgIzEyNzUzXG5cblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRsb3N0Jywgb25Db250ZXh0TG9zdCwgZmFsc2UgKTtcblx0XHRfY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIG9uQ29udGV4dFJlc3RvcmUsIGZhbHNlICk7XG5cblx0XHRfZ2wgPSBfY29udGV4dCB8fCBfY2FudmFzLmdldENvbnRleHQoICd3ZWJnbCcsIGNvbnRleHRBdHRyaWJ1dGVzICkgfHwgX2NhbnZhcy5nZXRDb250ZXh0KCAnZXhwZXJpbWVudGFsLXdlYmdsJywgY29udGV4dEF0dHJpYnV0ZXMgKTtcblxuXHRcdGlmICggX2dsID09PSBudWxsICkge1xuXG5cdFx0XHRpZiAoIF9jYW52YXMuZ2V0Q29udGV4dCggJ3dlYmdsJyApICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQgd2l0aCB5b3VyIHNlbGVjdGVkIGF0dHJpYnV0ZXMuJyApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggJ0Vycm9yIGNyZWF0aW5nIFdlYkdMIGNvbnRleHQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBTb21lIGV4cGVyaW1lbnRhbC13ZWJnbCBpbXBsZW1lbnRhdGlvbnMgZG8gbm90IGhhdmUgZ2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0XG5cblx0XHRpZiAoIF9nbC5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0X2dsLmdldFNoYWRlclByZWNpc2lvbkZvcm1hdCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRyZXR1cm4geyAncmFuZ2VNaW4nOiAxLCAncmFuZ2VNYXgnOiAxLCAncHJlY2lzaW9uJzogMSB9O1xuXG5cdFx0XHR9O1xuXG5cdFx0fVxuXG5cdH0gY2F0Y2ggKCBlcnJvciApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAnICsgZXJyb3IubWVzc2FnZSApO1xuXHRcdHRocm93IGVycm9yO1xuXG5cdH1cblxuXHR2YXIgZXh0ZW5zaW9ucywgY2FwYWJpbGl0aWVzLCBzdGF0ZSwgaW5mbztcblx0dmFyIHByb3BlcnRpZXMsIHRleHR1cmVzLCBhdHRyaWJ1dGVzLCBnZW9tZXRyaWVzLCBvYmplY3RzO1xuXHR2YXIgcHJvZ3JhbUNhY2hlLCByZW5kZXJMaXN0cywgcmVuZGVyU3RhdGVzO1xuXG5cdHZhciBiYWNrZ3JvdW5kLCBtb3JwaHRhcmdldHMsIGJ1ZmZlclJlbmRlcmVyLCBpbmRleGVkQnVmZmVyUmVuZGVyZXI7XG5cblx0dmFyIHV0aWxzO1xuXG5cdGZ1bmN0aW9uIGluaXRHTENvbnRleHQoKSB7XG5cblx0XHRleHRlbnNpb25zID0gbmV3IFdlYkdMRXh0ZW5zaW9ucyggX2dsICk7XG5cblx0XHRjYXBhYmlsaXRpZXMgPSBuZXcgV2ViR0xDYXBhYmlsaXRpZXMoIF9nbCwgZXh0ZW5zaW9ucywgcGFyYW1ldGVycyApO1xuXG5cdFx0aWYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPT09IGZhbHNlICkge1xuXG5cdFx0XHRleHRlbnNpb25zLmdldCggJ1dFQkdMX2RlcHRoX3RleHR1cmUnICk7XG5cdFx0XHRleHRlbnNpb25zLmdldCggJ09FU190ZXh0dXJlX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicgKTtcblx0XHRcdGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3N0YW5kYXJkX2Rlcml2YXRpdmVzJyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfZWxlbWVudF9pbmRleF91aW50JyApO1xuXHRcdFx0ZXh0ZW5zaW9ucy5nZXQoICdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzJyApO1xuXG5cdFx0fVxuXG5cdFx0ZXh0ZW5zaW9ucy5nZXQoICdPRVNfdGV4dHVyZV9mbG9hdF9saW5lYXInICk7XG5cblx0XHR1dGlscyA9IG5ldyBXZWJHTFV0aWxzKCBfZ2wsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0c3RhdGUgPSBuZXcgV2ViR0xTdGF0ZSggX2dsLCBleHRlbnNpb25zLCBjYXBhYmlsaXRpZXMgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7XG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQuY29weSggX3ZpZXdwb3J0ICkubXVsdGlwbHlTY2FsYXIoIF9waXhlbFJhdGlvICkuZmxvb3IoKSApO1xuXG5cdFx0aW5mbyA9IG5ldyBXZWJHTEluZm8oIF9nbCApO1xuXHRcdHByb3BlcnRpZXMgPSBuZXcgV2ViR0xQcm9wZXJ0aWVzKCk7XG5cdFx0dGV4dHVyZXMgPSBuZXcgV2ViR0xUZXh0dXJlcyggX2dsLCBleHRlbnNpb25zLCBzdGF0ZSwgcHJvcGVydGllcywgY2FwYWJpbGl0aWVzLCB1dGlscywgaW5mbyApO1xuXHRcdGF0dHJpYnV0ZXMgPSBuZXcgV2ViR0xBdHRyaWJ1dGVzKCBfZ2wsIGNhcGFiaWxpdGllcyApO1xuXHRcdGdlb21ldHJpZXMgPSBuZXcgV2ViR0xHZW9tZXRyaWVzKCBfZ2wsIGF0dHJpYnV0ZXMsIGluZm8gKTtcblx0XHRvYmplY3RzID0gbmV3IFdlYkdMT2JqZWN0cyggX2dsLCBnZW9tZXRyaWVzLCBhdHRyaWJ1dGVzLCBpbmZvICk7XG5cdFx0bW9ycGh0YXJnZXRzID0gbmV3IFdlYkdMTW9ycGh0YXJnZXRzKCBfZ2wgKTtcblx0XHRwcm9ncmFtQ2FjaGUgPSBuZXcgV2ViR0xQcm9ncmFtcyggX3RoaXMsIGV4dGVuc2lvbnMsIGNhcGFiaWxpdGllcyApO1xuXHRcdHJlbmRlckxpc3RzID0gbmV3IFdlYkdMUmVuZGVyTGlzdHMoKTtcblx0XHRyZW5kZXJTdGF0ZXMgPSBuZXcgV2ViR0xSZW5kZXJTdGF0ZXMoKTtcblxuXHRcdGJhY2tncm91bmQgPSBuZXcgV2ViR0xCYWNrZ3JvdW5kKCBfdGhpcywgc3RhdGUsIG9iamVjdHMsIF9wcmVtdWx0aXBsaWVkQWxwaGEgKTtcblxuXHRcdGJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMQnVmZmVyUmVuZGVyZXIoIF9nbCwgZXh0ZW5zaW9ucywgaW5mbywgY2FwYWJpbGl0aWVzICk7XG5cdFx0aW5kZXhlZEJ1ZmZlclJlbmRlcmVyID0gbmV3IFdlYkdMSW5kZXhlZEJ1ZmZlclJlbmRlcmVyKCBfZ2wsIGV4dGVuc2lvbnMsIGluZm8sIGNhcGFiaWxpdGllcyApO1xuXG5cdFx0aW5mby5wcm9ncmFtcyA9IHByb2dyYW1DYWNoZS5wcm9ncmFtcztcblxuXHRcdF90aGlzLmNhcGFiaWxpdGllcyA9IGNhcGFiaWxpdGllcztcblx0XHRfdGhpcy5leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblx0XHRfdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcztcblx0XHRfdGhpcy5yZW5kZXJMaXN0cyA9IHJlbmRlckxpc3RzO1xuXHRcdF90aGlzLnN0YXRlID0gc3RhdGU7XG5cdFx0X3RoaXMuaW5mbyA9IGluZm87XG5cblx0fVxuXG5cdGluaXRHTENvbnRleHQoKTtcblxuXHQvLyB4clxuXG5cdHZhciB4ciA9IG5ldyBXZWJYUk1hbmFnZXIoIF90aGlzLCBfZ2wgKTtcblxuXHR0aGlzLnhyID0geHI7XG5cblx0Ly8gc2hhZG93IG1hcFxuXG5cdHZhciBzaGFkb3dNYXAgPSBuZXcgV2ViR0xTaGFkb3dNYXAoIF90aGlzLCBvYmplY3RzLCBjYXBhYmlsaXRpZXMubWF4VGV4dHVyZVNpemUgKTtcblxuXHR0aGlzLnNoYWRvd01hcCA9IHNoYWRvd01hcDtcblxuXHQvLyBBUElcblxuXHR0aGlzLmdldENvbnRleHQgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX2dsO1xuXG5cdH07XG5cblx0dGhpcy5nZXRDb250ZXh0QXR0cmlidXRlcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfZ2wuZ2V0Q29udGV4dEF0dHJpYnV0ZXMoKTtcblxuXHR9O1xuXG5cdHRoaXMuZm9yY2VDb250ZXh0TG9zcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBleHRlbnNpb24gPSBleHRlbnNpb25zLmdldCggJ1dFQkdMX2xvc2VfY29udGV4dCcgKTtcblx0XHRpZiAoIGV4dGVuc2lvbiApIGV4dGVuc2lvbi5sb3NlQ29udGV4dCgpO1xuXG5cdH07XG5cblx0dGhpcy5mb3JjZUNvbnRleHRSZXN0b3JlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGV4dGVuc2lvbiA9IGV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfbG9zZV9jb250ZXh0JyApO1xuXHRcdGlmICggZXh0ZW5zaW9uICkgZXh0ZW5zaW9uLnJlc3RvcmVDb250ZXh0KCk7XG5cblx0fTtcblxuXHR0aGlzLmdldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX3BpeGVsUmF0aW87XG5cblx0fTtcblxuXHR0aGlzLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuO1xuXG5cdFx0X3BpeGVsUmF0aW8gPSB2YWx1ZTtcblxuXHRcdHRoaXMuc2V0U2l6ZSggX3dpZHRoLCBfaGVpZ2h0LCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdXZWJHTFJlbmRlcmVyOiAuZ2V0c2l6ZSgpIG5vdyByZXF1aXJlcyBhIFZlY3RvcjIgYXMgYW4gYXJndW1lbnQnICk7XG5cblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LnNldCggX3dpZHRoLCBfaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFNpemUgPSBmdW5jdGlvbiAoIHdpZHRoLCBoZWlnaHQsIHVwZGF0ZVN0eWxlICkge1xuXG5cdFx0aWYgKCB4ci5pc1ByZXNlbnRpbmcgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENhblxcJ3QgY2hhbmdlIHNpemUgd2hpbGUgVlIgZGV2aWNlIGlzIHByZXNlbnRpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblxuXHRcdF9jYW52YXMud2lkdGggPSBNYXRoLmZsb29yKCB3aWR0aCAqIF9waXhlbFJhdGlvICk7XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBfcGl4ZWxSYXRpbyApO1xuXG5cdFx0aWYgKCB1cGRhdGVTdHlsZSAhPT0gZmFsc2UgKSB7XG5cblx0XHRcdF9jYW52YXMuc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG5cdFx0XHRfY2FudmFzLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHR9XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldERyYXdpbmdCdWZmZXJTaXplID0gZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdXZWJHTFJlbmRlcmVyOiAuZ2V0ZHJhd2luZ0J1ZmZlclNpemUoKSBub3cgcmVxdWlyZXMgYSBWZWN0b3IyIGFzIGFuIGFyZ3VtZW50JyApO1xuXG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5zZXQoIF93aWR0aCAqIF9waXhlbFJhdGlvLCBfaGVpZ2h0ICogX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXG5cdH07XG5cblx0dGhpcy5zZXREcmF3aW5nQnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICggd2lkdGgsIGhlaWdodCwgcGl4ZWxSYXRpbyApIHtcblxuXHRcdF93aWR0aCA9IHdpZHRoO1xuXHRcdF9oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHRfcGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG5cblx0XHRfY2FudmFzLndpZHRoID0gTWF0aC5mbG9vciggd2lkdGggKiBwaXhlbFJhdGlvICk7XG5cdFx0X2NhbnZhcy5oZWlnaHQgPSBNYXRoLmZsb29yKCBoZWlnaHQgKiBwaXhlbFJhdGlvICk7XG5cblx0XHR0aGlzLnNldFZpZXdwb3J0KCAwLCAwLCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0fTtcblxuXHR0aGlzLmdldEN1cnJlbnRWaWV3cG9ydCA9IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnV2ViR0xSZW5kZXJlcjogLmdldEN1cnJlbnRWaWV3cG9ydCgpIG5vdyByZXF1aXJlcyBhIFZlY3RvcjQgYXMgYW4gYXJndW1lbnQnICk7XG5cblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3I0KCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIF9jdXJyZW50Vmlld3BvcnQgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0Vmlld3BvcnQgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggX3ZpZXdwb3J0ICk7XG5cblx0fTtcblxuXHR0aGlzLnNldFZpZXdwb3J0ID0gZnVuY3Rpb24gKCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0aWYgKCB4LmlzVmVjdG9yNCApIHtcblxuXHRcdFx0X3ZpZXdwb3J0LnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfdmlld3BvcnQuc2V0KCB4LCB5LCB3aWR0aCwgaGVpZ2h0ICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBfdmlld3BvcnQgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpICk7XG5cblx0fTtcblxuXHR0aGlzLmdldFNjaXNzb3IgPSBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdHJldHVybiB0YXJnZXQuY29weSggX3NjaXNzb3IgKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0U2Npc3NvciA9IGZ1bmN0aW9uICggeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggeC5pc1ZlY3RvcjQgKSB7XG5cblx0XHRcdF9zY2lzc29yLnNldCggeC54LCB4LnksIHgueiwgeC53ICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfc2Npc3Nvci5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxuXHRcdH1cblxuXHRcdHN0YXRlLnNjaXNzb3IoIF9jdXJyZW50U2Npc3Nvci5jb3B5KCBfc2Npc3NvciApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCkgKTtcblxuXHR9O1xuXG5cdHRoaXMuZ2V0U2Npc3NvclRlc3QgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gX3NjaXNzb3JUZXN0O1xuXG5cdH07XG5cblx0dGhpcy5zZXRTY2lzc29yVGVzdCA9IGZ1bmN0aW9uICggYm9vbGVhbiApIHtcblxuXHRcdHN0YXRlLnNldFNjaXNzb3JUZXN0KCBfc2Npc3NvclRlc3QgPSBib29sZWFuICk7XG5cblx0fTtcblxuXHR0aGlzLnNldE9wYXF1ZVNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdF9vcGFxdWVTb3J0ID0gbWV0aG9kO1xuXG5cdH07XG5cblx0dGhpcy5zZXRUcmFuc3BhcmVudFNvcnQgPSBmdW5jdGlvbiAoIG1ldGhvZCApIHtcblxuXHRcdF90cmFuc3BhcmVudFNvcnQgPSBtZXRob2Q7XG5cblx0fTtcblxuXHQvLyBDbGVhcmluZ1xuXG5cdHRoaXMuZ2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBiYWNrZ3JvdW5kLmdldENsZWFyQ29sb3IoKTtcblxuXHR9O1xuXG5cdHRoaXMuc2V0Q2xlYXJDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdGJhY2tncm91bmQuc2V0Q2xlYXJDb2xvci5hcHBseSggYmFja2dyb3VuZCwgYXJndW1lbnRzICk7XG5cblx0fTtcblxuXHR0aGlzLmdldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gYmFja2dyb3VuZC5nZXRDbGVhckFscGhhKCk7XG5cblx0fTtcblxuXHR0aGlzLnNldENsZWFyQWxwaGEgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHRiYWNrZ3JvdW5kLnNldENsZWFyQWxwaGEuYXBwbHkoIGJhY2tncm91bmQsIGFyZ3VtZW50cyApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhciA9IGZ1bmN0aW9uICggY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdFx0dmFyIGJpdHMgPSAwO1xuXG5cdFx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkIHx8IGNvbG9yICkgYml0cyB8PSAxNjM4NDtcblx0XHRpZiAoIGRlcHRoID09PSB1bmRlZmluZWQgfHwgZGVwdGggKSBiaXRzIHw9IDI1Njtcblx0XHRpZiAoIHN0ZW5jaWwgPT09IHVuZGVmaW5lZCB8fCBzdGVuY2lsICkgYml0cyB8PSAxMDI0O1xuXG5cdFx0X2dsLmNsZWFyKCBiaXRzICk7XG5cblx0fTtcblxuXHR0aGlzLmNsZWFyQ29sb3IgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCB0cnVlLCBmYWxzZSwgZmFsc2UgKTtcblxuXHR9O1xuXG5cdHRoaXMuY2xlYXJEZXB0aCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuY2xlYXIoIGZhbHNlLCB0cnVlLCBmYWxzZSApO1xuXG5cdH07XG5cblx0dGhpcy5jbGVhclN0ZW5jaWwgPSBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmNsZWFyKCBmYWxzZSwgZmFsc2UsIHRydWUgKTtcblxuXHR9O1xuXG5cdC8vXG5cblx0dGhpcy5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0X2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0bG9zdCcsIG9uQ29udGV4dExvc3QsIGZhbHNlICk7XG5cdFx0X2NhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCBvbkNvbnRleHRSZXN0b3JlLCBmYWxzZSApO1xuXG5cdFx0cmVuZGVyTGlzdHMuZGlzcG9zZSgpO1xuXHRcdHJlbmRlclN0YXRlcy5kaXNwb3NlKCk7XG5cdFx0cHJvcGVydGllcy5kaXNwb3NlKCk7XG5cdFx0b2JqZWN0cy5kaXNwb3NlKCk7XG5cblx0XHR4ci5kaXNwb3NlKCk7XG5cblx0XHRhbmltYXRpb24uc3RvcCgpO1xuXG5cdFx0dGhpcy5mb3JjZUNvbnRleHRMb3NzKCk7XG5cblx0fTtcblxuXHQvLyBFdmVudHNcblxuXHRmdW5jdGlvbiBvbkNvbnRleHRMb3N0KCBldmVudCApIHtcblxuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRjb25zb2xlLmxvZyggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IENvbnRleHQgTG9zdC4nICk7XG5cblx0XHRfaXNDb250ZXh0TG9zdCA9IHRydWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uQ29udGV4dFJlc3RvcmUoIC8qIGV2ZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5sb2coICdUSFJFRS5XZWJHTFJlbmRlcmVyOiBDb250ZXh0IFJlc3RvcmVkLicgKTtcblxuXHRcdF9pc0NvbnRleHRMb3N0ID0gZmFsc2U7XG5cblx0XHRpbml0R0xDb250ZXh0KCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIG9uTWF0ZXJpYWxEaXNwb3NlKCBldmVudCApIHtcblxuXHRcdHZhciBtYXRlcmlhbCA9IGV2ZW50LnRhcmdldDtcblxuXHRcdG1hdGVyaWFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdkaXNwb3NlJywgb25NYXRlcmlhbERpc3Bvc2UgKTtcblxuXHRcdGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHR9XG5cblx0Ly8gQnVmZmVyIGRlYWxsb2NhdGlvblxuXG5cdGZ1bmN0aW9uIGRlYWxsb2NhdGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0XHRyZWxlYXNlTWF0ZXJpYWxQcm9ncmFtUmVmZXJlbmNlKCBtYXRlcmlhbCApO1xuXG5cdFx0cHJvcGVydGllcy5yZW1vdmUoIG1hdGVyaWFsICk7XG5cblx0fVxuXG5cblx0ZnVuY3Rpb24gcmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKSB7XG5cblx0XHR2YXIgcHJvZ3JhbUluZm8gPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKS5wcm9ncmFtO1xuXG5cdFx0bWF0ZXJpYWwucHJvZ3JhbSA9IHVuZGVmaW5lZDtcblxuXHRcdGlmICggcHJvZ3JhbUluZm8gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0cHJvZ3JhbUNhY2hlLnJlbGVhc2VQcm9ncmFtKCBwcm9ncmFtSW5mbyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBCdWZmZXIgcmVuZGVyaW5nXG5cblx0ZnVuY3Rpb24gcmVuZGVyT2JqZWN0SW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKSB7XG5cblx0XHRvYmplY3QucmVuZGVyKCBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRcdFx0X3RoaXMucmVuZGVyQnVmZmVySW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKTtcblxuXHRcdH0gKTtcblxuXHR9XG5cblx0dGhpcy5yZW5kZXJCdWZmZXJJbW1lZGlhdGUgPSBmdW5jdGlvbiAoIG9iamVjdCwgcHJvZ3JhbSApIHtcblxuXHRcdHN0YXRlLmluaXRBdHRyaWJ1dGVzKCk7XG5cblx0XHR2YXIgYnVmZmVycyA9IHByb3BlcnRpZXMuZ2V0KCBvYmplY3QgKTtcblxuXHRcdGlmICggb2JqZWN0Lmhhc1Bvc2l0aW9ucyAmJiAhIGJ1ZmZlcnMucG9zaXRpb24gKSBidWZmZXJzLnBvc2l0aW9uID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc05vcm1hbHMgJiYgISBidWZmZXJzLm5vcm1hbCApIGJ1ZmZlcnMubm9ybWFsID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc1V2cyAmJiAhIGJ1ZmZlcnMudXYgKSBidWZmZXJzLnV2ID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdGlmICggb2JqZWN0Lmhhc0NvbG9ycyAmJiAhIGJ1ZmZlcnMuY29sb3IgKSBidWZmZXJzLmNvbG9yID0gX2dsLmNyZWF0ZUJ1ZmZlcigpO1xuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRpZiAoIG9iamVjdC5oYXNQb3NpdGlvbnMgKSB7XG5cblx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MiwgYnVmZmVycy5wb3NpdGlvbiApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3QucG9zaXRpb25BcnJheSwgMzUwNDggKTtcblxuXHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlcy5wb3NpdGlvbiApO1xuXHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGVzLnBvc2l0aW9uLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzTm9ybWFscyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLm5vcm1hbCApO1xuXHRcdFx0X2dsLmJ1ZmZlckRhdGEoIDM0OTYyLCBvYmplY3Qubm9ybWFsQXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMubm9ybWFsLCAzLCA1MTI2LCBmYWxzZSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaGFzVXZzICkge1xuXG5cdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlcnMudXYgKTtcblx0XHRcdF9nbC5idWZmZXJEYXRhKCAzNDk2Miwgb2JqZWN0LnV2QXJyYXksIDM1MDQ4ICk7XG5cblx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZSggcHJvZ3JhbUF0dHJpYnV0ZXMudXYgKTtcblx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlcy51diwgMiwgNTEyNiwgZmFsc2UsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdGlmICggb2JqZWN0Lmhhc0NvbG9ycyApIHtcblxuXHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXJzLmNvbG9yICk7XG5cdFx0XHRfZ2wuYnVmZmVyRGF0YSggMzQ5NjIsIG9iamVjdC5jb2xvckFycmF5LCAzNTA0OCApO1xuXG5cdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGVzLmNvbG9yICk7XG5cdFx0XHRfZ2wudmVydGV4QXR0cmliUG9pbnRlciggcHJvZ3JhbUF0dHJpYnV0ZXMuY29sb3IsIDMsIDUxMjYsIGZhbHNlLCAwLCAwICk7XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5kaXNhYmxlVW51c2VkQXR0cmlidXRlcygpO1xuXG5cdFx0X2dsLmRyYXdBcnJheXMoIDQsIDAsIG9iamVjdC5jb3VudCApO1xuXG5cdFx0b2JqZWN0LmNvdW50ID0gMDtcblxuXHR9O1xuXG5cdHZhciB0ZW1wU2NlbmUgPSBuZXcgU2NlbmUoKTtcblxuXHR0aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCA9IGZ1bmN0aW9uICggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICkge1xuXG5cdFx0aWYgKCBzY2VuZSA9PT0gbnVsbCApIHNjZW5lID0gdGVtcFNjZW5lOyAvLyByZW5kZXJCdWZmZXJEaXJlY3Qgc2Vjb25kIHBhcmFtZXRlciB1c2VkIHRvIGJlIGZvZyAoY291bGQgYmUgbnVsbClcblxuXHRcdHZhciBmcm9udEZhY2VDVyA9ICggb2JqZWN0LmlzTWVzaCAmJiBvYmplY3QubWF0cml4V29ybGQuZGV0ZXJtaW5hbnQoKSA8IDAgKTtcblxuXHRcdHZhciBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgbWF0ZXJpYWwsIG9iamVjdCApO1xuXG5cdFx0c3RhdGUuc2V0TWF0ZXJpYWwoIG1hdGVyaWFsLCBmcm9udEZhY2VDVyApO1xuXG5cdFx0dmFyIHVwZGF0ZUJ1ZmZlcnMgPSBmYWxzZTtcblxuXHRcdGlmICggX2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgIT09IGdlb21ldHJ5LmlkIHx8XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtICE9PSBwcm9ncmFtLmlkIHx8XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgIT09ICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkgKSB7XG5cblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gZ2VvbWV0cnkuaWQ7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gcHJvZ3JhbS5pZDtcblx0XHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLndpcmVmcmFtZSA9IG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZTtcblx0XHRcdHVwZGF0ZUJ1ZmZlcnMgPSB0cnVlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5tb3JwaFRhcmdldHMgfHwgbWF0ZXJpYWwubW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRtb3JwaHRhcmdldHMudXBkYXRlKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApO1xuXG5cdFx0XHR1cGRhdGVCdWZmZXJzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgaW5kZXggPSBnZW9tZXRyeS5pbmRleDtcblx0XHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0Ly9cblxuXHRcdGlmICggaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdGlmICggcG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbi5jb3VudCA9PT0gMCApIHJldHVybjtcblxuXHRcdH0gZWxzZSBpZiAoIGluZGV4LmNvdW50ID09PSAwICkge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIHJhbmdlRmFjdG9yID0gMTtcblxuXHRcdGlmICggbWF0ZXJpYWwud2lyZWZyYW1lID09PSB0cnVlICkge1xuXG5cdFx0XHRpbmRleCA9IGdlb21ldHJpZXMuZ2V0V2lyZWZyYW1lQXR0cmlidXRlKCBnZW9tZXRyeSApO1xuXHRcdFx0cmFuZ2VGYWN0b3IgPSAyO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZTtcblx0XHR2YXIgcmVuZGVyZXIgPSBidWZmZXJSZW5kZXJlcjtcblxuXHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXMuZ2V0KCBpbmRleCApO1xuXG5cdFx0XHRyZW5kZXJlciA9IGluZGV4ZWRCdWZmZXJSZW5kZXJlcjtcblx0XHRcdHJlbmRlcmVyLnNldEluZGV4KCBhdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdXBkYXRlQnVmZmVycyApIHtcblxuXHRcdFx0c2V0dXBWZXJ0ZXhBdHRyaWJ1dGVzKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgcHJvZ3JhbSApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdF9nbC5iaW5kQnVmZmVyKCAzNDk2MywgYXR0cmlidXRlLmJ1ZmZlciApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0dmFyIGRhdGFDb3VudCA9ICggaW5kZXggIT09IG51bGwgKSA/IGluZGV4LmNvdW50IDogcG9zaXRpb24uY291bnQ7XG5cblx0XHR2YXIgcmFuZ2VTdGFydCA9IGdlb21ldHJ5LmRyYXdSYW5nZS5zdGFydCAqIHJhbmdlRmFjdG9yO1xuXHRcdHZhciByYW5nZUNvdW50ID0gZ2VvbWV0cnkuZHJhd1JhbmdlLmNvdW50ICogcmFuZ2VGYWN0b3I7XG5cblx0XHR2YXIgZ3JvdXBTdGFydCA9IGdyb3VwICE9PSBudWxsID8gZ3JvdXAuc3RhcnQgKiByYW5nZUZhY3RvciA6IDA7XG5cdFx0dmFyIGdyb3VwQ291bnQgPSBncm91cCAhPT0gbnVsbCA/IGdyb3VwLmNvdW50ICogcmFuZ2VGYWN0b3IgOiBJbmZpbml0eTtcblxuXHRcdHZhciBkcmF3U3RhcnQgPSBNYXRoLm1heCggcmFuZ2VTdGFydCwgZ3JvdXBTdGFydCApO1xuXHRcdHZhciBkcmF3RW5kID0gTWF0aC5taW4oIGRhdGFDb3VudCwgcmFuZ2VTdGFydCArIHJhbmdlQ291bnQsIGdyb3VwU3RhcnQgKyBncm91cENvdW50ICkgLSAxO1xuXG5cdFx0dmFyIGRyYXdDb3VudCA9IE1hdGgubWF4KCAwLCBkcmF3RW5kIC0gZHJhd1N0YXJ0ICsgMSApO1xuXG5cdFx0aWYgKCBkcmF3Q291bnQgPT09IDAgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0aWYgKCBvYmplY3QuaXNNZXNoICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLndpcmVmcmFtZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRzdGF0ZS5zZXRMaW5lV2lkdGgoIG1hdGVyaWFsLndpcmVmcmFtZUxpbmV3aWR0aCAqIGdldFRhcmdldFBpeGVsUmF0aW8oKSApO1xuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNCApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lICkge1xuXG5cdFx0XHR2YXIgbGluZVdpZHRoID0gbWF0ZXJpYWwubGluZXdpZHRoO1xuXG5cdFx0XHRpZiAoIGxpbmVXaWR0aCA9PT0gdW5kZWZpbmVkICkgbGluZVdpZHRoID0gMTsgLy8gTm90IHVzaW5nIExpbmUqTWF0ZXJpYWxcblxuXHRcdFx0c3RhdGUuc2V0TGluZVdpZHRoKCBsaW5lV2lkdGggKiBnZXRUYXJnZXRQaXhlbFJhdGlvKCkgKTtcblxuXHRcdFx0aWYgKCBvYmplY3QuaXNMaW5lU2VnbWVudHMgKSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNMaW5lTG9vcCApIHtcblxuXHRcdFx0XHRyZW5kZXJlci5zZXRNb2RlKCAyICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggMyApO1xuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNQb2ludHMgKSB7XG5cblx0XHRcdHJlbmRlcmVyLnNldE1vZGUoIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0cmVuZGVyZXIuc2V0TW9kZSggNCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoICkge1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgb2JqZWN0LmNvdW50ICk7XG5cblx0XHR9IGVsc2UgaWYgKCBnZW9tZXRyeS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRyZW5kZXJlci5yZW5kZXJJbnN0YW5jZXMoIGdlb21ldHJ5LCBkcmF3U3RhcnQsIGRyYXdDb3VudCwgZ2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJlbmRlcmVyLnJlbmRlciggZHJhd1N0YXJ0LCBkcmF3Q291bnQgKTtcblxuXHRcdH1cblxuXHR9O1xuXG5cdGZ1bmN0aW9uIHNldHVwVmVydGV4QXR0cmlidXRlcyggb2JqZWN0LCBnZW9tZXRyeSwgbWF0ZXJpYWwsIHByb2dyYW0gKSB7XG5cblx0XHRpZiAoIGNhcGFiaWxpdGllcy5pc1dlYkdMMiA9PT0gZmFsc2UgJiYgKCBvYmplY3QuaXNJbnN0YW5jZWRNZXNoIHx8IGdlb21ldHJ5LmlzSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkgKSApIHtcblxuXHRcdFx0aWYgKCBleHRlbnNpb25zLmdldCggJ0FOR0xFX2luc3RhbmNlZF9hcnJheXMnICkgPT09IG51bGwgKSByZXR1cm47XG5cblx0XHR9XG5cblx0XHRzdGF0ZS5pbml0QXR0cmlidXRlcygpO1xuXG5cdFx0dmFyIGdlb21ldHJ5QXR0cmlidXRlcyA9IGdlb21ldHJ5LmF0dHJpYnV0ZXM7XG5cblx0XHR2YXIgcHJvZ3JhbUF0dHJpYnV0ZXMgPSBwcm9ncmFtLmdldEF0dHJpYnV0ZXMoKTtcblxuXHRcdHZhciBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSBtYXRlcmlhbC5kZWZhdWx0QXR0cmlidXRlVmFsdWVzO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gcHJvZ3JhbUF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdHZhciBwcm9ncmFtQXR0cmlidXRlID0gcHJvZ3JhbUF0dHJpYnV0ZXNbIG5hbWUgXTtcblxuXHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlID49IDAgKSB7XG5cblx0XHRcdFx0dmFyIGdlb21ldHJ5QXR0cmlidXRlID0gZ2VvbWV0cnlBdHRyaWJ1dGVzWyBuYW1lIF07XG5cblx0XHRcdFx0aWYgKCBnZW9tZXRyeUF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0dmFyIG5vcm1hbGl6ZWQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5ub3JtYWxpemVkO1xuXHRcdFx0XHRcdHZhciBzaXplID0gZ2VvbWV0cnlBdHRyaWJ1dGUuaXRlbVNpemU7XG5cblx0XHRcdFx0XHR2YXIgYXR0cmlidXRlID0gYXR0cmlidXRlcy5nZXQoIGdlb21ldHJ5QXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdHZhciBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xuXHRcdFx0XHRcdHZhciB0eXBlID0gYXR0cmlidXRlLnR5cGU7XG5cdFx0XHRcdFx0dmFyIGJ5dGVzUGVyRWxlbWVudCA9IGF0dHJpYnV0ZS5ieXRlc1BlckVsZW1lbnQ7XG5cblx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBkYXRhID0gZ2VvbWV0cnlBdHRyaWJ1dGUuZGF0YTtcblx0XHRcdFx0XHRcdHZhciBzdHJpZGUgPSBkYXRhLnN0cmlkZTtcblx0XHRcdFx0XHRcdHZhciBvZmZzZXQgPSBnZW9tZXRyeUF0dHJpYnV0ZS5vZmZzZXQ7XG5cblx0XHRcdFx0XHRcdGlmICggZGF0YSAmJiBkYXRhLmlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXIgKSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSwgZGF0YS5tZXNoUGVyQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Z2VvbWV0cnkubWF4SW5zdGFuY2VkQ291bnQgPSBkYXRhLm1lc2hQZXJBdHRyaWJ1dGUgKiBkYXRhLmNvdW50O1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGUoIHByb2dyYW1BdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRfZ2wuYmluZEJ1ZmZlciggMzQ5NjIsIGJ1ZmZlciApO1xuXHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUsIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSAqIGJ5dGVzUGVyRWxlbWVudCwgb2Zmc2V0ICogYnl0ZXNQZXJFbGVtZW50ICk7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5QXR0cmlidXRlLmlzSW5zdGFuY2VkQnVmZmVyQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUsIGdlb21ldHJ5QXR0cmlidXRlLm1lc2hQZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIGdlb21ldHJ5Lm1heEluc3RhbmNlZENvdW50ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRnZW9tZXRyeS5tYXhJbnN0YW5jZWRDb3VudCA9IGdlb21ldHJ5QXR0cmlidXRlLm1lc2hQZXJBdHRyaWJ1dGUgKiBnZW9tZXRyeUF0dHJpYnV0ZS5jb3VudDtcblxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlKCBwcm9ncmFtQXR0cmlidXRlICk7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblx0XHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlLCBzaXplLCB0eXBlLCBub3JtYWxpemVkLCAwLCAwICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbmFtZSA9PT0gJ2luc3RhbmNlTWF0cml4JyApIHtcblxuXHRcdFx0XHRcdHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzLmdldCggb2JqZWN0Lmluc3RhbmNlTWF0cml4ICk7XG5cblx0XHRcdFx0XHQvLyBUT0RPIEF0dHJpYnV0ZSBtYXkgbm90IGJlIGF2YWlsYWJsZSBvbiBjb250ZXh0IHJlc3RvcmVcblxuXHRcdFx0XHRcdGlmICggYXR0cmlidXRlID09PSB1bmRlZmluZWQgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdHZhciBidWZmZXIgPSBhdHRyaWJ1dGUuYnVmZmVyO1xuXHRcdFx0XHRcdHZhciB0eXBlID0gYXR0cmlidXRlLnR5cGU7XG5cblx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlICsgMCwgMSApO1xuXHRcdFx0XHRcdHN0YXRlLmVuYWJsZUF0dHJpYnV0ZUFuZERpdmlzb3IoIHByb2dyYW1BdHRyaWJ1dGUgKyAxLCAxICk7XG5cdFx0XHRcdFx0c3RhdGUuZW5hYmxlQXR0cmlidXRlQW5kRGl2aXNvciggcHJvZ3JhbUF0dHJpYnV0ZSArIDIsIDEgKTtcblx0XHRcdFx0XHRzdGF0ZS5lbmFibGVBdHRyaWJ1dGVBbmREaXZpc29yKCBwcm9ncmFtQXR0cmlidXRlICsgMywgMSApO1xuXG5cdFx0XHRcdFx0X2dsLmJpbmRCdWZmZXIoIDM0OTYyLCBidWZmZXIgKTtcblxuXHRcdFx0XHRcdF9nbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKCBwcm9ncmFtQXR0cmlidXRlICsgMCwgNCwgdHlwZSwgZmFsc2UsIDY0LCAwICk7XG5cdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUgKyAxLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDE2ICk7XG5cdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUgKyAyLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDMyICk7XG5cdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYlBvaW50ZXIoIHByb2dyYW1BdHRyaWJ1dGUgKyAzLCA0LCB0eXBlLCBmYWxzZSwgNjQsIDQ4ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxEZWZhdWx0QXR0cmlidXRlVmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR2YXIgdmFsdWUgPSBtYXRlcmlhbERlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbIG5hbWUgXTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0c3dpdGNoICggdmFsdWUubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMjpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliMmZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgMzpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliM2Z2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGNhc2UgNDpcblx0XHRcdFx0XHRcdFx0XHRfZ2wudmVydGV4QXR0cmliNGZ2KCBwcm9ncmFtQXR0cmlidXRlLCB2YWx1ZSApO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdFx0X2dsLnZlcnRleEF0dHJpYjFmdiggcHJvZ3JhbUF0dHJpYnV0ZSwgdmFsdWUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0c3RhdGUuZGlzYWJsZVVudXNlZEF0dHJpYnV0ZXMoKTtcblxuXHR9XG5cblx0Ly8gQ29tcGlsZVxuXG5cdHRoaXMuY29tcGlsZSA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpO1xuXG5cdFx0c2NlbmUudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5pc0xpZ2h0ICkge1xuXG5cdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoTGlnaHQoIG9iamVjdCApO1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmNhc3RTaGFkb3cgKSB7XG5cblx0XHRcdFx0XHRjdXJyZW50UmVuZGVyU3RhdGUucHVzaFNoYWRvdyggb2JqZWN0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9ICk7XG5cblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuc2V0dXBMaWdodHMoIGNhbWVyYSApO1xuXG5cdFx0dmFyIGNvbXBpbGVkID0ge307XG5cblx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0Lm1hdGVyaWFsICkge1xuXG5cdFx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggb2JqZWN0Lm1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmplY3QubWF0ZXJpYWwubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG9iamVjdC5tYXRlcmlhbFsgaSBdLnV1aWQgaW4gY29tcGlsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdGluaXRNYXRlcmlhbCggb2JqZWN0Lm1hdGVyaWFsWyBpIF0sIHNjZW5lLCBvYmplY3QgKTtcblx0XHRcdFx0XHRcdFx0Y29tcGlsZWRbIG9iamVjdC5tYXRlcmlhbFsgaSBdLnV1aWQgXSA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QubWF0ZXJpYWwudXVpZCBpbiBjb21waWxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpbml0TWF0ZXJpYWwoIG9iamVjdC5tYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXHRcdFx0XHRcdGNvbXBpbGVkWyBvYmplY3QubWF0ZXJpYWwudXVpZCBdID0gdHJ1ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9O1xuXG5cdC8vIEFuaW1hdGlvbiBMb29wXG5cblx0dmFyIG9uQW5pbWF0aW9uRnJhbWVDYWxsYmFjayA9IG51bGw7XG5cblx0ZnVuY3Rpb24gb25BbmltYXRpb25GcmFtZSggdGltZSApIHtcblxuXHRcdGlmICggeHIuaXNQcmVzZW50aW5nICkgcmV0dXJuO1xuXHRcdGlmICggb25BbmltYXRpb25GcmFtZUNhbGxiYWNrICkgb25BbmltYXRpb25GcmFtZUNhbGxiYWNrKCB0aW1lICk7XG5cblx0fVxuXG5cdHZhciBhbmltYXRpb24gPSBuZXcgV2ViR0xBbmltYXRpb24oKTtcblx0YW5pbWF0aW9uLnNldEFuaW1hdGlvbkxvb3AoIG9uQW5pbWF0aW9uRnJhbWUgKTtcblxuXHRpZiAoIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICkgYW5pbWF0aW9uLnNldENvbnRleHQoIHdpbmRvdyApO1xuXG5cdHRoaXMuc2V0QW5pbWF0aW9uTG9vcCA9IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRvbkFuaW1hdGlvbkZyYW1lQ2FsbGJhY2sgPSBjYWxsYmFjaztcblx0XHR4ci5zZXRBbmltYXRpb25Mb29wKCBjYWxsYmFjayApO1xuXG5cdFx0YW5pbWF0aW9uLnN0YXJ0KCk7XG5cblx0fTtcblxuXHQvLyBSZW5kZXJpbmdcblxuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggc2NlbmUsIGNhbWVyYSApIHtcblxuXHRcdHZhciByZW5kZXJUYXJnZXQsIGZvcmNlQ2xlYXI7XG5cblx0XHRpZiAoIGFyZ3VtZW50c1sgMiBdICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVuZGVyKCk6IHRoZSByZW5kZXJUYXJnZXQgYXJndW1lbnQgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5zZXRSZW5kZXJUYXJnZXQoKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJlbmRlclRhcmdldCA9IGFyZ3VtZW50c1sgMiBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHNbIDMgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcigpOiB0aGUgZm9yY2VDbGVhciBhcmd1bWVudCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmNsZWFyKCkgaW5zdGVhZC4nICk7XG5cdFx0XHRmb3JjZUNsZWFyID0gYXJndW1lbnRzWyAzIF07XG5cblx0XHR9XG5cblx0XHRpZiAoICEgKCBjYW1lcmEgJiYgY2FtZXJhLmlzQ2FtZXJhICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlbmRlcjogY2FtZXJhIGlzIG5vdCBhbiBpbnN0YW5jZSBvZiBUSFJFRS5DYW1lcmEuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBfaXNDb250ZXh0TG9zdCApIHJldHVybjtcblxuXHRcdC8vIHJlc2V0IGNhY2hpbmcgZm9yIHRoaXMgZnJhbWVcblxuXHRcdF9jdXJyZW50R2VvbWV0cnlQcm9ncmFtLmdlb21ldHJ5ID0gbnVsbDtcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS5wcm9ncmFtID0gbnVsbDtcblx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgPSBmYWxzZTtcblx0XHRfY3VycmVudE1hdGVyaWFsSWQgPSAtIDE7XG5cdFx0X2N1cnJlbnRDYW1lcmEgPSBudWxsO1xuXG5cdFx0Ly8gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRpZiAoIHNjZW5lLmF1dG9VcGRhdGUgPT09IHRydWUgKSBzY2VuZS51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdFx0Ly8gdXBkYXRlIGNhbWVyYSBtYXRyaWNlcyBhbmQgZnJ1c3R1bVxuXG5cdFx0aWYgKCBjYW1lcmEucGFyZW50ID09PSBudWxsICkgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRpZiAoIHhyLmVuYWJsZWQgJiYgeHIuaXNQcmVzZW50aW5nICkge1xuXG5cdFx0XHRjYW1lcmEgPSB4ci5nZXRDYW1lcmEoIGNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0Ly9cblxuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBjYW1lcmEgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUuaW5pdCgpO1xuXG5cdFx0c2NlbmUub25CZWZvcmVSZW5kZXIoIF90aGlzLCBzY2VuZSwgY2FtZXJhLCByZW5kZXJUYXJnZXQgfHwgX2N1cnJlbnRSZW5kZXJUYXJnZXQgKTtcblxuXHRcdF9wcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0X2ZydXN0dW0uc2V0RnJvbVByb2plY3Rpb25NYXRyaXgoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRfbG9jYWxDbGlwcGluZ0VuYWJsZWQgPSB0aGlzLmxvY2FsQ2xpcHBpbmdFbmFibGVkO1xuXHRcdF9jbGlwcGluZ0VuYWJsZWQgPSBfY2xpcHBpbmcuaW5pdCggdGhpcy5jbGlwcGluZ1BsYW5lcywgX2xvY2FsQ2xpcHBpbmdFbmFibGVkLCBjYW1lcmEgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJMaXN0ID0gcmVuZGVyTGlzdHMuZ2V0KCBzY2VuZSwgY2FtZXJhICk7XG5cdFx0Y3VycmVudFJlbmRlckxpc3QuaW5pdCgpO1xuXG5cdFx0cHJvamVjdE9iamVjdCggc2NlbmUsIGNhbWVyYSwgMCwgX3RoaXMuc29ydE9iamVjdHMgKTtcblxuXHRcdGN1cnJlbnRSZW5kZXJMaXN0LmZpbmlzaCgpO1xuXG5cdFx0aWYgKCBfdGhpcy5zb3J0T2JqZWN0cyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0Y3VycmVudFJlbmRlckxpc3Quc29ydCggX29wYXF1ZVNvcnQsIF90cmFuc3BhcmVudFNvcnQgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRpZiAoIF9jbGlwcGluZ0VuYWJsZWQgKSBfY2xpcHBpbmcuYmVnaW5TaGFkb3dzKCk7XG5cblx0XHR2YXIgc2hhZG93c0FycmF5ID0gY3VycmVudFJlbmRlclN0YXRlLnN0YXRlLnNoYWRvd3NBcnJheTtcblxuXHRcdHNoYWRvd01hcC5yZW5kZXIoIHNoYWRvd3NBcnJheSwgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEgKTtcblxuXHRcdGlmICggX2NsaXBwaW5nRW5hYmxlZCApIF9jbGlwcGluZy5lbmRTaGFkb3dzKCk7XG5cblx0XHQvL1xuXG5cdFx0aWYgKCB0aGlzLmluZm8uYXV0b1Jlc2V0ICkgdGhpcy5pbmZvLnJlc2V0KCk7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR0aGlzLnNldFJlbmRlclRhcmdldCggcmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0YmFja2dyb3VuZC5yZW5kZXIoIGN1cnJlbnRSZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCBmb3JjZUNsZWFyICk7XG5cblx0XHQvLyByZW5kZXIgc2NlbmVcblxuXHRcdHZhciBvcGFxdWVPYmplY3RzID0gY3VycmVudFJlbmRlckxpc3Qub3BhcXVlO1xuXHRcdHZhciB0cmFuc3BhcmVudE9iamVjdHMgPSBjdXJyZW50UmVuZGVyTGlzdC50cmFuc3BhcmVudDtcblxuXHRcdGlmICggc2NlbmUub3ZlcnJpZGVNYXRlcmlhbCApIHtcblxuXHRcdFx0dmFyIG92ZXJyaWRlTWF0ZXJpYWwgPSBzY2VuZS5vdmVycmlkZU1hdGVyaWFsO1xuXG5cdFx0XHRpZiAoIG9wYXF1ZU9iamVjdHMubGVuZ3RoICkgcmVuZGVyT2JqZWN0cyggb3BhcXVlT2JqZWN0cywgc2NlbmUsIGNhbWVyYSwgb3ZlcnJpZGVNYXRlcmlhbCApO1xuXHRcdFx0aWYgKCB0cmFuc3BhcmVudE9iamVjdHMubGVuZ3RoICkgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBvcGFxdWUgcGFzcyAoZnJvbnQtdG8tYmFjayBvcmRlcilcblxuXHRcdFx0aWYgKCBvcGFxdWVPYmplY3RzLmxlbmd0aCApIHJlbmRlck9iamVjdHMoIG9wYXF1ZU9iamVjdHMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdFx0Ly8gdHJhbnNwYXJlbnQgcGFzcyAoYmFjay10by1mcm9udCBvcmRlcilcblxuXHRcdFx0aWYgKCB0cmFuc3BhcmVudE9iamVjdHMubGVuZ3RoICkgcmVuZGVyT2JqZWN0cyggdHJhbnNwYXJlbnRPYmplY3RzLCBzY2VuZSwgY2FtZXJhICk7XG5cblx0XHR9XG5cblx0XHQvL1xuXG5cdFx0c2NlbmUub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdC8vXG5cblx0XHRpZiAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBHZW5lcmF0ZSBtaXBtYXAgaWYgd2UncmUgdXNpbmcgYW55IGtpbmQgb2YgbWlwbWFwIGZpbHRlcmluZ1xuXG5cdFx0XHR0ZXh0dXJlcy51cGRhdGVSZW5kZXJUYXJnZXRNaXBtYXAoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHRcdC8vIHJlc29sdmUgbXVsdGlzYW1wbGUgcmVuZGVyYnVmZmVycyB0byBhIHNpbmdsZS1zYW1wbGUgdGV4dHVyZSBpZiBuZWNlc3NhcnlcblxuXHRcdFx0dGV4dHVyZXMudXBkYXRlTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQoIF9jdXJyZW50UmVuZGVyVGFyZ2V0ICk7XG5cblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgZGVwdGggYnVmZmVyIHdyaXRpbmcgaXMgZW5hYmxlZCBzbyBpdCBjYW4gYmUgY2xlYXJlZCBvbiBuZXh0IHJlbmRlclxuXG5cdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRUZXN0KCB0cnVlICk7XG5cdFx0c3RhdGUuYnVmZmVycy5kZXB0aC5zZXRNYXNrKCB0cnVlICk7XG5cdFx0c3RhdGUuYnVmZmVycy5jb2xvci5zZXRNYXNrKCB0cnVlICk7XG5cblx0XHRzdGF0ZS5zZXRQb2x5Z29uT2Zmc2V0KCBmYWxzZSApO1xuXG5cdFx0Ly8gX2dsLmZpbmlzaCgpO1xuXG5cdFx0Y3VycmVudFJlbmRlckxpc3QgPSBudWxsO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IG51bGw7XG5cblx0fTtcblxuXHRmdW5jdGlvbiBwcm9qZWN0T2JqZWN0KCBvYmplY3QsIGNhbWVyYSwgZ3JvdXBPcmRlciwgc29ydE9iamVjdHMgKSB7XG5cblx0XHRpZiAoIG9iamVjdC52aXNpYmxlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdHZhciB2aXNpYmxlID0gb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEubGF5ZXJzICk7XG5cblx0XHRpZiAoIHZpc2libGUgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0LmlzR3JvdXAgKSB7XG5cblx0XHRcdFx0Z3JvdXBPcmRlciA9IG9iamVjdC5yZW5kZXJPcmRlcjtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTE9EICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmF1dG9VcGRhdGUgPT09IHRydWUgKSBvYmplY3QudXBkYXRlKCBjYW1lcmEgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzTGlnaHQgKSB7XG5cblx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnB1c2hMaWdodCggb2JqZWN0ICk7XG5cblx0XHRcdFx0aWYgKCBvYmplY3QuY2FzdFNoYWRvdyApIHtcblxuXHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJTdGF0ZS5wdXNoU2hhZG93KCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG9iamVjdC5pc1Nwcml0ZSApIHtcblxuXHRcdFx0XHRpZiAoICEgb2JqZWN0LmZydXN0dW1DdWxsZWQgfHwgX2ZydXN0dW0uaW50ZXJzZWN0c1Nwcml0ZSggb2JqZWN0ICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNvcnRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHRcdC5hcHBseU1hdHJpeDQoIF9wcm9qU2NyZWVuTWF0cml4ICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBvYmplY3RzLnVwZGF0ZSggb2JqZWN0ICk7XG5cdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gb2JqZWN0Lm1hdGVyaWFsO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0LmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ICkge1xuXG5cdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRfdmVjdG9yMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIG9iamVjdC5tYXRyaXhXb3JsZCApXG5cdFx0XHRcdFx0XHQuYXBwbHlNYXRyaXg0KCBfcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIG51bGwsIG9iamVjdC5tYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBvYmplY3QuaXNNZXNoIHx8IG9iamVjdC5pc0xpbmUgfHwgb2JqZWN0LmlzUG9pbnRzICkge1xuXG5cdFx0XHRcdGlmICggb2JqZWN0LmlzU2tpbm5lZE1lc2ggKSB7XG5cblx0XHRcdFx0XHQvLyB1cGRhdGUgc2tlbGV0b24gb25seSBvbmNlIGluIGEgZnJhbWVcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LnNrZWxldG9uLmZyYW1lICE9PSBpbmZvLnJlbmRlci5mcmFtZSApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LnNrZWxldG9uLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdFx0b2JqZWN0LnNrZWxldG9uLmZyYW1lID0gaW5mby5yZW5kZXIuZnJhbWU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggISBvYmplY3QuZnJ1c3R1bUN1bGxlZCB8fCBfZnJ1c3R1bS5pbnRlcnNlY3RzT2JqZWN0KCBvYmplY3QgKSApIHtcblxuXHRcdFx0XHRcdGlmICggc29ydE9iamVjdHMgKSB7XG5cblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Lm1hdHJpeFdvcmxkIClcblx0XHRcdFx0XHRcdFx0LmFwcGx5TWF0cml4NCggX3Byb2pTY3JlZW5NYXRyaXggKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHZhciBnZW9tZXRyeSA9IG9iamVjdHMudXBkYXRlKCBvYmplY3QgKTtcblx0XHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBvYmplY3QubWF0ZXJpYWw7XG5cblx0XHRcdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG1hdGVyaWFsICkgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBncm91cHMgPSBnZW9tZXRyeS5ncm91cHM7XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGdyb3Vwcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdHZhciBncm91cCA9IGdyb3Vwc1sgaSBdO1xuXHRcdFx0XHRcdFx0XHR2YXIgZ3JvdXBNYXRlcmlhbCA9IG1hdGVyaWFsWyBncm91cC5tYXRlcmlhbEluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCBncm91cE1hdGVyaWFsICYmIGdyb3VwTWF0ZXJpYWwudmlzaWJsZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGN1cnJlbnRSZW5kZXJMaXN0LnB1c2goIG9iamVjdCwgZ2VvbWV0cnksIGdyb3VwTWF0ZXJpYWwsIGdyb3VwT3JkZXIsIF92ZWN0b3IzLnosIGdyb3VwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC52aXNpYmxlICkge1xuXG5cdFx0XHRcdFx0XHRjdXJyZW50UmVuZGVyTGlzdC5wdXNoKCBvYmplY3QsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXBPcmRlciwgX3ZlY3RvcjMueiwgbnVsbCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIGNoaWxkcmVuID0gb2JqZWN0LmNoaWxkcmVuO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0cHJvamVjdE9iamVjdCggY2hpbGRyZW5bIGkgXSwgY2FtZXJhLCBncm91cE9yZGVyLCBzb3J0T2JqZWN0cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3RzKCByZW5kZXJMaXN0LCBzY2VuZSwgY2FtZXJhLCBvdmVycmlkZU1hdGVyaWFsICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcmVuZGVyTGlzdC5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgcmVuZGVySXRlbSA9IHJlbmRlckxpc3RbIGkgXTtcblxuXHRcdFx0dmFyIG9iamVjdCA9IHJlbmRlckl0ZW0ub2JqZWN0O1xuXHRcdFx0dmFyIGdlb21ldHJ5ID0gcmVuZGVySXRlbS5nZW9tZXRyeTtcblx0XHRcdHZhciBtYXRlcmlhbCA9IG92ZXJyaWRlTWF0ZXJpYWwgPT09IHVuZGVmaW5lZCA/IHJlbmRlckl0ZW0ubWF0ZXJpYWwgOiBvdmVycmlkZU1hdGVyaWFsO1xuXHRcdFx0dmFyIGdyb3VwID0gcmVuZGVySXRlbS5ncm91cDtcblxuXHRcdFx0aWYgKCBjYW1lcmEuaXNBcnJheUNhbWVyYSApIHtcblxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gY2FtZXJhO1xuXG5cdFx0XHRcdHZhciBjYW1lcmFzID0gY2FtZXJhLmNhbWVyYXM7XG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IGNhbWVyYXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FtZXJhMiA9IGNhbWVyYXNbIGogXTtcblxuXHRcdFx0XHRcdGlmICggb2JqZWN0LmxheWVycy50ZXN0KCBjYW1lcmEyLmxheWVycyApICkge1xuXG5cdFx0XHRcdFx0XHRzdGF0ZS52aWV3cG9ydCggX2N1cnJlbnRWaWV3cG9ydC5jb3B5KCBjYW1lcmEyLnZpZXdwb3J0ICkgKTtcblxuXHRcdFx0XHRcdFx0Y3VycmVudFJlbmRlclN0YXRlLnNldHVwTGlnaHRzKCBjYW1lcmEyICk7XG5cblx0XHRcdFx0XHRcdHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhMiwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRfY3VycmVudEFycmF5Q2FtZXJhID0gbnVsbDtcblxuXHRcdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlbmRlck9iamVjdCggb2JqZWN0LCBzY2VuZSwgY2FtZXJhLCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGdyb3VwICkge1xuXG5cdFx0b2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBncm91cCApO1xuXHRcdGN1cnJlbnRSZW5kZXJTdGF0ZSA9IHJlbmRlclN0YXRlcy5nZXQoIHNjZW5lLCBfY3VycmVudEFycmF5Q2FtZXJhIHx8IGNhbWVyYSApO1xuXG5cdFx0b2JqZWN0Lm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlLCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRvYmplY3Qubm9ybWFsTWF0cml4LmdldE5vcm1hbE1hdHJpeCggb2JqZWN0Lm1vZGVsVmlld01hdHJpeCApO1xuXG5cdFx0aWYgKCBvYmplY3QuaXNJbW1lZGlhdGVSZW5kZXJPYmplY3QgKSB7XG5cblx0XHRcdHZhciBwcm9ncmFtID0gc2V0UHJvZ3JhbSggY2FtZXJhLCBzY2VuZSwgbWF0ZXJpYWwsIG9iamVjdCApO1xuXG5cdFx0XHRzdGF0ZS5zZXRNYXRlcmlhbCggbWF0ZXJpYWwgKTtcblxuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdFx0X2N1cnJlbnRHZW9tZXRyeVByb2dyYW0ucHJvZ3JhbSA9IG51bGw7XG5cdFx0XHRfY3VycmVudEdlb21ldHJ5UHJvZ3JhbS53aXJlZnJhbWUgPSBmYWxzZTtcblxuXHRcdFx0cmVuZGVyT2JqZWN0SW1tZWRpYXRlKCBvYmplY3QsIHByb2dyYW0gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdF90aGlzLnJlbmRlckJ1ZmZlckRpcmVjdCggY2FtZXJhLCBzY2VuZSwgZ2VvbWV0cnksIG1hdGVyaWFsLCBvYmplY3QsIGdyb3VwICk7XG5cblx0XHR9XG5cblx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEsIGdlb21ldHJ5LCBtYXRlcmlhbCwgZ3JvdXAgKTtcblx0XHRjdXJyZW50UmVuZGVyU3RhdGUgPSByZW5kZXJTdGF0ZXMuZ2V0KCBzY2VuZSwgX2N1cnJlbnRBcnJheUNhbWVyYSB8fCBjYW1lcmEgKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gaW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApIHtcblxuXHRcdHZhciBtYXRlcmlhbFByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzLmdldCggbWF0ZXJpYWwgKTtcblxuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXHRcdHZhciBzaGFkb3dzQXJyYXkgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUuc2hhZG93c0FycmF5O1xuXG5cdFx0dmFyIGxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0cy5zdGF0ZS52ZXJzaW9uO1xuXG5cdFx0dmFyIHBhcmFtZXRlcnMgPSBwcm9ncmFtQ2FjaGUuZ2V0UGFyYW1ldGVycyggbWF0ZXJpYWwsIGxpZ2h0cy5zdGF0ZSwgc2hhZG93c0FycmF5LCBzY2VuZSwgX2NsaXBwaW5nLm51bVBsYW5lcywgX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbiwgb2JqZWN0ICk7XG5cdFx0dmFyIHByb2dyYW1DYWNoZUtleSA9IHByb2dyYW1DYWNoZS5nZXRQcm9ncmFtQ2FjaGVLZXkoIHBhcmFtZXRlcnMgKTtcblxuXHRcdHZhciBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW07XG5cdFx0dmFyIHByb2dyYW1DaGFuZ2UgPSB0cnVlO1xuXG5cdFx0aWYgKCBwcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIG5ldyBtYXRlcmlhbFxuXHRcdFx0bWF0ZXJpYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2Rpc3Bvc2UnLCBvbk1hdGVyaWFsRGlzcG9zZSApO1xuXG5cdFx0fSBlbHNlIGlmICggcHJvZ3JhbS5jYWNoZUtleSAhPT0gcHJvZ3JhbUNhY2hlS2V5ICkge1xuXG5cdFx0XHQvLyBjaGFuZ2VkIGdsc2wgb3IgcGFyYW1ldGVyc1xuXHRcdFx0cmVsZWFzZU1hdGVyaWFsUHJvZ3JhbVJlZmVyZW5jZSggbWF0ZXJpYWwgKTtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gIT09IGxpZ2h0c1N0YXRlVmVyc2lvbiApIHtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLmxpZ2h0c1N0YXRlVmVyc2lvbiA9IGxpZ2h0c1N0YXRlVmVyc2lvbjtcblxuXHRcdFx0cHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0fSBlbHNlIGlmICggcGFyYW1ldGVycy5zaGFkZXJJRCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBzYW1lIGdsc2wgYW5kIHVuaWZvcm0gbGlzdFxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb25seSByZWJ1aWxkIHVuaWZvcm0gbGlzdFxuXHRcdFx0cHJvZ3JhbUNoYW5nZSA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9ncmFtQ2hhbmdlICkge1xuXG5cdFx0XHRwcm9ncmFtID0gcHJvZ3JhbUNhY2hlLmFjcXVpcmVQcm9ncmFtKCBwYXJhbWV0ZXJzLCBwcm9ncmFtQ2FjaGVLZXkgKTtcblxuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0gPSBwcm9ncmFtO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zID0gcGFyYW1ldGVycy51bmlmb3Jtcztcblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5lbnZpcm9ubWVudCA9IG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgPyBzY2VuZS5lbnZpcm9ubWVudCA6IG51bGw7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0RW5jb2RpbmcgPSBfdGhpcy5vdXRwdXRFbmNvZGluZztcblx0XHRcdG1hdGVyaWFsLnByb2dyYW0gPSBwcm9ncmFtO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByb2dyYW1BdHRyaWJ1dGVzID0gcHJvZ3JhbS5nZXRBdHRyaWJ1dGVzKCk7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhUYXJnZXRzID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgX3RoaXMubWF4TW9ycGhUYXJnZXRzOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggcHJvZ3JhbUF0dHJpYnV0ZXNbICdtb3JwaFRhcmdldCcgKyBpIF0gPj0gMCApIHtcblxuXHRcdFx0XHRcdG1hdGVyaWFsLm51bVN1cHBvcnRlZE1vcnBoVGFyZ2V0cyArKztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubW9ycGhOb3JtYWxzICkge1xuXG5cdFx0XHRtYXRlcmlhbC5udW1TdXBwb3J0ZWRNb3JwaE5vcm1hbHMgPSAwO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBfdGhpcy5tYXhNb3JwaE5vcm1hbHM7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBwcm9ncmFtQXR0cmlidXRlc1sgJ21vcnBoTm9ybWFsJyArIGkgXSA+PSAwICkge1xuXG5cdFx0XHRcdFx0bWF0ZXJpYWwubnVtU3VwcG9ydGVkTW9ycGhOb3JtYWxzICsrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIHVuaWZvcm1zID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnVuaWZvcm1zO1xuXG5cdFx0aWYgKCAhIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgJiZcblx0XHRcdCEgbWF0ZXJpYWwuaXNSYXdTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0bWF0ZXJpYWwuY2xpcHBpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyA9IF9jbGlwcGluZy5udW1QbGFuZXM7XG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uID0gX2NsaXBwaW5nLm51bUludGVyc2VjdGlvbjtcblx0XHRcdHVuaWZvcm1zLmNsaXBwaW5nUGxhbmVzID0gX2NsaXBwaW5nLnVuaWZvcm07XG5cblx0XHR9XG5cblx0XHRtYXRlcmlhbFByb3BlcnRpZXMuZm9nID0gc2NlbmUuZm9nO1xuXG5cdFx0Ly8gc3RvcmUgdGhlIGxpZ2h0IHNldHVwIGl0IHdhcyBjcmVhdGVkIGZvclxuXG5cdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLm5lZWRzTGlnaHRzID0gbWF0ZXJpYWxOZWVkc0xpZ2h0cyggbWF0ZXJpYWwgKTtcblx0XHRtYXRlcmlhbFByb3BlcnRpZXMubGlnaHRzU3RhdGVWZXJzaW9uID0gbGlnaHRzU3RhdGVWZXJzaW9uO1xuXG5cdFx0aWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubmVlZHNMaWdodHMgKSB7XG5cblx0XHRcdC8vIHdpcmUgdXAgdGhlIG1hdGVyaWFsIHRvIHRoaXMgcmVuZGVyZXIncyBsaWdodGluZyBzdGF0ZVxuXG5cdFx0XHR1bmlmb3Jtcy5hbWJpZW50TGlnaHRDb2xvci52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5hbWJpZW50O1xuXHRcdFx0dW5pZm9ybXMubGlnaHRQcm9iZS52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wcm9iZTtcblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsO1xuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3c7XG5cdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3Q7XG5cdFx0XHR1bmlmb3Jtcy5zcG90TGlnaHRTaGFkb3dzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3c7XG5cdFx0XHR1bmlmb3Jtcy5yZWN0QXJlYUxpZ2h0cy52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5yZWN0QXJlYTtcblx0XHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50O1xuXHRcdFx0dW5pZm9ybXMucG9pbnRMaWdodFNoYWRvd3MudmFsdWUgPSBsaWdodHMuc3RhdGUucG9pbnRTaGFkb3c7XG5cdFx0XHR1bmlmb3Jtcy5oZW1pc3BoZXJlTGlnaHRzLnZhbHVlID0gbGlnaHRzLnN0YXRlLmhlbWk7XG5cblx0XHRcdHVuaWZvcm1zLmRpcmVjdGlvbmFsU2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLmRpcmVjdGlvbmFsU2hhZG93TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXgudmFsdWUgPSBsaWdodHMuc3RhdGUuZGlyZWN0aW9uYWxTaGFkb3dNYXRyaXg7XG5cdFx0XHR1bmlmb3Jtcy5zcG90U2hhZG93TWFwLnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXA7XG5cdFx0XHR1bmlmb3Jtcy5zcG90U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnNwb3RTaGFkb3dNYXRyaXg7XG5cdFx0XHR1bmlmb3Jtcy5wb2ludFNoYWRvd01hcC52YWx1ZSA9IGxpZ2h0cy5zdGF0ZS5wb2ludFNoYWRvd01hcDtcblx0XHRcdHVuaWZvcm1zLnBvaW50U2hhZG93TWF0cml4LnZhbHVlID0gbGlnaHRzLnN0YXRlLnBvaW50U2hhZG93TWF0cml4O1xuXHRcdFx0Ly8gVE9ETyAoYWJlbG5hdGlvbik6IGFkZCBhcmVhIGxpZ2h0cyBzaGFkb3cgaW5mbyB0byB1bmlmb3Jtc1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByb2dVbmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtLmdldFVuaWZvcm1zKCksXG5cdFx0XHR1bmlmb3Jtc0xpc3QgPVxuXHRcdFx0XHRXZWJHTFVuaWZvcm1zLnNlcVdpdGhWYWx1ZSggcHJvZ1VuaWZvcm1zLnNlcSwgdW5pZm9ybXMgKTtcblxuXHRcdG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QgPSB1bmlmb3Jtc0xpc3Q7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHNldFByb2dyYW0oIGNhbWVyYSwgc2NlbmUsIG1hdGVyaWFsLCBvYmplY3QgKSB7XG5cblx0XHR0ZXh0dXJlcy5yZXNldFRleHR1cmVVbml0cygpO1xuXG5cdFx0dmFyIGZvZyA9IHNjZW5lLmZvZztcblx0XHR2YXIgZW52aXJvbm1lbnQgPSBtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsID8gc2NlbmUuZW52aXJvbm1lbnQgOiBudWxsO1xuXG5cdFx0dmFyIG1hdGVyaWFsUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCBtYXRlcmlhbCApO1xuXHRcdHZhciBsaWdodHMgPSBjdXJyZW50UmVuZGVyU3RhdGUuc3RhdGUubGlnaHRzO1xuXG5cdFx0aWYgKCBfY2xpcHBpbmdFbmFibGVkICkge1xuXG5cdFx0XHRpZiAoIF9sb2NhbENsaXBwaW5nRW5hYmxlZCB8fCBjYW1lcmEgIT09IF9jdXJyZW50Q2FtZXJhICkge1xuXG5cdFx0XHRcdHZhciB1c2VDYWNoZSA9XG5cdFx0XHRcdFx0Y2FtZXJhID09PSBfY3VycmVudENhbWVyYSAmJlxuXHRcdFx0XHRcdG1hdGVyaWFsLmlkID09PSBfY3VycmVudE1hdGVyaWFsSWQ7XG5cblx0XHRcdFx0Ly8gd2UgbWlnaHQgd2FudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gd2l0aCBzb21lIENsaXBwaW5nR3JvdXBcblx0XHRcdFx0Ly8gb2JqZWN0IGluc3RlYWQgb2YgdGhlIG1hdGVyaWFsLCBvbmNlIGl0IGJlY29tZXMgZmVhc2libGVcblx0XHRcdFx0Ly8gKCM4NDY1LCAjODM3OSlcblx0XHRcdFx0X2NsaXBwaW5nLnNldFN0YXRlKFxuXHRcdFx0XHRcdG1hdGVyaWFsLmNsaXBwaW5nUGxhbmVzLCBtYXRlcmlhbC5jbGlwSW50ZXJzZWN0aW9uLCBtYXRlcmlhbC5jbGlwU2hhZG93cyxcblx0XHRcdFx0XHRjYW1lcmEsIG1hdGVyaWFsUHJvcGVydGllcywgdXNlQ2FjaGUgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC52ZXJzaW9uID09PSBtYXRlcmlhbFByb3BlcnRpZXMuX192ZXJzaW9uICkge1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5wcm9ncmFtID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5mb2cgJiYgbWF0ZXJpYWxQcm9wZXJ0aWVzLmZvZyAhPT0gZm9nICkge1xuXG5cdFx0XHRcdGluaXRNYXRlcmlhbCggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWxQcm9wZXJ0aWVzLmVudmlyb25tZW50ICE9PSBlbnZpcm9ubWVudCApIHtcblxuXHRcdFx0XHRpbml0TWF0ZXJpYWwoIG1hdGVyaWFsLCBzY2VuZSwgb2JqZWN0ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyAmJiAoIG1hdGVyaWFsUHJvcGVydGllcy5saWdodHNTdGF0ZVZlcnNpb24gIT09IGxpZ2h0cy5zdGF0ZS52ZXJzaW9uICkgKSB7XG5cblx0XHRcdFx0aW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMubnVtQ2xpcHBpbmdQbGFuZXMgIT09IHVuZGVmaW5lZCAmJlxuXHRcdFx0XHQoIG1hdGVyaWFsUHJvcGVydGllcy5udW1DbGlwcGluZ1BsYW5lcyAhPT0gX2NsaXBwaW5nLm51bVBsYW5lcyB8fFxuXHRcdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMubnVtSW50ZXJzZWN0aW9uICE9PSBfY2xpcHBpbmcubnVtSW50ZXJzZWN0aW9uICkgKSB7XG5cblx0XHRcdFx0aW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbFByb3BlcnRpZXMub3V0cHV0RW5jb2RpbmcgIT09IF90aGlzLm91dHB1dEVuY29kaW5nICkge1xuXG5cdFx0XHRcdGluaXRNYXRlcmlhbCggbWF0ZXJpYWwsIHNjZW5lLCBvYmplY3QgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0aW5pdE1hdGVyaWFsKCBtYXRlcmlhbCwgc2NlbmUsIG9iamVjdCApO1xuXHRcdFx0bWF0ZXJpYWxQcm9wZXJ0aWVzLl9fdmVyc2lvbiA9IG1hdGVyaWFsLnZlcnNpb247XG5cblx0XHR9XG5cblx0XHR2YXIgcmVmcmVzaFByb2dyYW0gPSBmYWxzZTtcblx0XHR2YXIgcmVmcmVzaE1hdGVyaWFsID0gZmFsc2U7XG5cdFx0dmFyIHJlZnJlc2hMaWdodHMgPSBmYWxzZTtcblxuXHRcdHZhciBwcm9ncmFtID0gbWF0ZXJpYWxQcm9wZXJ0aWVzLnByb2dyYW0sXG5cdFx0XHRwX3VuaWZvcm1zID0gcHJvZ3JhbS5nZXRVbmlmb3JtcygpLFxuXHRcdFx0bV91bmlmb3JtcyA9IG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3JtcztcblxuXHRcdGlmICggc3RhdGUudXNlUHJvZ3JhbSggcHJvZ3JhbS5wcm9ncmFtICkgKSB7XG5cblx0XHRcdHJlZnJlc2hQcm9ncmFtID0gdHJ1ZTtcblx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cdFx0XHRyZWZyZXNoTGlnaHRzID0gdHJ1ZTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaWQgIT09IF9jdXJyZW50TWF0ZXJpYWxJZCApIHtcblxuXHRcdFx0X2N1cnJlbnRNYXRlcmlhbElkID0gbWF0ZXJpYWwuaWQ7XG5cblx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hQcm9ncmFtIHx8IF9jdXJyZW50Q2FtZXJhICE9PSBjYW1lcmEgKSB7XG5cblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3Byb2plY3Rpb25NYXRyaXgnLCBjYW1lcmEucHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0XHRpZiAoIGNhcGFiaWxpdGllcy5sb2dhcml0aG1pY0RlcHRoQnVmZmVyICkge1xuXG5cdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2xvZ0RlcHRoQnVmRkMnLFxuXHRcdFx0XHRcdDIuMCAvICggTWF0aC5sb2coIGNhbWVyYS5mYXIgKyAxLjAgKSAvIE1hdGguTE4yICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIF9jdXJyZW50Q2FtZXJhICE9PSBjYW1lcmEgKSB7XG5cblx0XHRcdFx0X2N1cnJlbnRDYW1lcmEgPSBjYW1lcmE7XG5cblx0XHRcdFx0Ly8gbGlnaHRpbmcgdW5pZm9ybXMgZGVwZW5kIG9uIHRoZSBjYW1lcmEgc28gZW5mb3JjZSBhbiB1cGRhdGVcblx0XHRcdFx0Ly8gbm93LCBpbiBjYXNlIHRoaXMgbWF0ZXJpYWwgc3VwcG9ydHMgbGlnaHRzIC0gb3IgbGF0ZXIsIHdoZW5cblx0XHRcdFx0Ly8gdGhlIG5leHQgbWF0ZXJpYWwgdGhhdCBkb2VzIGdldHMgYWN0aXZhdGVkOlxuXG5cdFx0XHRcdHJlZnJlc2hNYXRlcmlhbCA9IHRydWU7XHRcdC8vIHNldCB0byB0cnVlIG9uIG1hdGVyaWFsIGNoYW5nZVxuXHRcdFx0XHRyZWZyZXNoTGlnaHRzID0gdHJ1ZTtcdFx0Ly8gcmVtYWlucyBzZXQgdW50aWwgdXBkYXRlIGRvbmVcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb2FkIG1hdGVyaWFsIHNwZWNpZmljIHVuaWZvcm1zXG5cdFx0XHQvLyAoc2hhZGVyIG1hdGVyaWFsIGFsc28gZ2V0cyB0aGVtIGZvciB0aGUgc2FrZSBvZiBnZW5lcmljaXR5KVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoUGhvbmdNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5lbnZNYXAgKSB7XG5cblx0XHRcdFx0dmFyIHVDYW1Qb3MgPSBwX3VuaWZvcm1zLm1hcC5jYW1lcmFQb3NpdGlvbjtcblxuXHRcdFx0XHRpZiAoIHVDYW1Qb3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHVDYW1Qb3Muc2V0VmFsdWUoIF9nbCxcblx0XHRcdFx0XHRcdF92ZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFRvb25NYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoQmFzaWNNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hTdGFuZGFyZE1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzU2hhZGVyTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnaXNPcnRob2dyYXBoaWMnLCBjYW1lcmEuaXNPcnRob2dyYXBoaWNDYW1lcmEgPT09IHRydWUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaExhbWJlcnRNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5pc01lc2hCYXNpY01hdGVyaWFsIHx8XG5cdFx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHxcblx0XHRcdFx0bWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCB8fFxuXHRcdFx0XHRtYXRlcmlhbC5za2lubmluZyApIHtcblxuXHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICd2aWV3TWF0cml4JywgY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBza2lubmluZyB1bmlmb3JtcyBtdXN0IGJlIHNldCBldmVuIGlmIG1hdGVyaWFsIGRpZG4ndCBjaGFuZ2Vcblx0XHQvLyBhdXRvLXNldHRpbmcgb2YgdGV4dHVyZSB1bml0IGZvciBib25lIHRleHR1cmUgbXVzdCBnbyBiZWZvcmUgb3RoZXIgdGV4dHVyZXNcblx0XHQvLyBvdGhlcndpc2UgdGV4dHVyZXMgdXNlZCBmb3Igc2tpbm5pbmcgY2FuIHRha2Ugb3ZlciB0ZXh0dXJlIHVuaXRzIHJlc2VydmVkIGZvciBvdGhlciBtYXRlcmlhbCB0ZXh0dXJlc1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5za2lubmluZyApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4JyApO1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRPcHRpb25hbCggX2dsLCBvYmplY3QsICdiaW5kTWF0cml4SW52ZXJzZScgKTtcblxuXHRcdFx0dmFyIHNrZWxldG9uID0gb2JqZWN0LnNrZWxldG9uO1xuXG5cdFx0XHRpZiAoIHNrZWxldG9uICkge1xuXG5cdFx0XHRcdHZhciBib25lcyA9IHNrZWxldG9uLmJvbmVzO1xuXG5cdFx0XHRcdGlmICggY2FwYWJpbGl0aWVzLmZsb2F0VmVydGV4VGV4dHVyZXMgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHNrZWxldG9uLmJvbmVUZXh0dXJlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGxheW91dCAoMSBtYXRyaXggPSA0IHBpeGVscylcblx0XHRcdFx0XHRcdC8vICAgICAgUkdCQSBSR0JBIFJHQkEgUkdCQSAoPT4gY29sdW1uMSwgY29sdW1uMiwgY29sdW1uMywgY29sdW1uNClcblx0XHRcdFx0XHRcdC8vICB3aXRoICA4eDggIHBpeGVsIHRleHR1cmUgbWF4ICAgMTYgYm9uZXMgKiA0IHBpeGVscyA9ICAoOCAqIDgpXG5cdFx0XHRcdFx0XHQvLyAgICAgICAxNngxNiBwaXhlbCB0ZXh0dXJlIG1heCAgIDY0IGJvbmVzICogNCBwaXhlbHMgPSAoMTYgKiAxNilcblx0XHRcdFx0XHRcdC8vICAgICAgIDMyeDMyIHBpeGVsIHRleHR1cmUgbWF4ICAyNTYgYm9uZXMgKiA0IHBpeGVscyA9ICgzMiAqIDMyKVxuXHRcdFx0XHRcdFx0Ly8gICAgICAgNjR4NjQgcGl4ZWwgdGV4dHVyZSBtYXggMTAyNCBib25lcyAqIDQgcGl4ZWxzID0gKDY0ICogNjQpXG5cblxuXHRcdFx0XHRcdFx0dmFyIHNpemUgPSBNYXRoLnNxcnQoIGJvbmVzLmxlbmd0aCAqIDQgKTsgLy8gNCBwaXhlbHMgbmVlZGVkIGZvciAxIG1hdHJpeFxuXHRcdFx0XHRcdFx0c2l6ZSA9IE1hdGhVdGlscy5jZWlsUG93ZXJPZlR3byggc2l6ZSApO1xuXHRcdFx0XHRcdFx0c2l6ZSA9IE1hdGgubWF4KCBzaXplLCA0ICk7XG5cblx0XHRcdFx0XHRcdHZhciBib25lTWF0cmljZXMgPSBuZXcgRmxvYXQzMkFycmF5KCBzaXplICogc2l6ZSAqIDQgKTsgLy8gNCBmbG9hdHMgcGVyIFJHQkEgcGl4ZWxcblx0XHRcdFx0XHRcdGJvbmVNYXRyaWNlcy5zZXQoIHNrZWxldG9uLmJvbmVNYXRyaWNlcyApOyAvLyBjb3B5IGN1cnJlbnQgdmFsdWVzXG5cblx0XHRcdFx0XHRcdHZhciBib25lVGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSggYm9uZU1hdHJpY2VzLCBzaXplLCBzaXplLCBSR0JBRm9ybWF0LCBGbG9hdFR5cGUgKTtcblxuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZU1hdHJpY2VzID0gYm9uZU1hdHJpY2VzO1xuXHRcdFx0XHRcdFx0c2tlbGV0b24uYm9uZVRleHR1cmUgPSBib25lVGV4dHVyZTtcblx0XHRcdFx0XHRcdHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSA9IHNpemU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdib25lVGV4dHVyZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlLCB0ZXh0dXJlcyApO1xuXHRcdFx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ2JvbmVUZXh0dXJlU2l6ZScsIHNrZWxldG9uLmJvbmVUZXh0dXJlU2l6ZSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRwX3VuaWZvcm1zLnNldE9wdGlvbmFsKCBfZ2wsIHNrZWxldG9uLCAnYm9uZU1hdHJpY2VzJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCByZWZyZXNoTWF0ZXJpYWwgfHwgbWF0ZXJpYWxQcm9wZXJ0aWVzLnJlY2VpdmVTaGFkb3cgIT09IG9iamVjdC5yZWNlaXZlU2hhZG93ICkge1xuXG5cdFx0XHRtYXRlcmlhbFByb3BlcnRpZXMucmVjZWl2ZVNoYWRvdyA9IG9iamVjdC5yZWNlaXZlU2hhZG93O1xuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAncmVjZWl2ZVNoYWRvdycsIG9iamVjdC5yZWNlaXZlU2hhZG93ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlZnJlc2hNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAndG9uZU1hcHBpbmdFeHBvc3VyZScsIF90aGlzLnRvbmVNYXBwaW5nRXhwb3N1cmUgKTtcblx0XHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ3RvbmVNYXBwaW5nV2hpdGVQb2ludCcsIF90aGlzLnRvbmVNYXBwaW5nV2hpdGVQb2ludCApO1xuXG5cdFx0XHRpZiAoIG1hdGVyaWFsUHJvcGVydGllcy5uZWVkc0xpZ2h0cyApIHtcblxuXHRcdFx0XHQvLyB0aGUgY3VycmVudCBtYXRlcmlhbCByZXF1aXJlcyBsaWdodGluZyBpbmZvXG5cblx0XHRcdFx0Ly8gbm90ZTogYWxsIGxpZ2h0aW5nIHVuaWZvcm1zIGFyZSBhbHdheXMgc2V0IGNvcnJlY3RseVxuXHRcdFx0XHQvLyB0aGV5IHNpbXBseSByZWZlcmVuY2UgdGhlIHJlbmRlcmVyJ3Mgc3RhdGUgZm9yIHRoZWlyXG5cdFx0XHRcdC8vIHZhbHVlc1xuXHRcdFx0XHQvL1xuXHRcdFx0XHQvLyB1c2UgdGhlIGN1cnJlbnQgbWF0ZXJpYWwncyAubmVlZHNVcGRhdGUgZmxhZ3MgdG8gc2V0XG5cdFx0XHRcdC8vIHRoZSBHTCBzdGF0ZSB3aGVuIHJlcXVpcmVkXG5cblx0XHRcdFx0bWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIG1fdW5pZm9ybXMsIHJlZnJlc2hMaWdodHMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHQvLyByZWZyZXNoIHVuaWZvcm1zIGNvbW1vbiB0byBzZXZlcmFsIG1hdGVyaWFsc1xuXG5cdFx0XHRpZiAoIGZvZyAmJiBtYXRlcmlhbC5mb2cgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRm9nKCBtX3VuaWZvcm1zLCBmb2cgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaEJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNMYW1iZXJ0KCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hUb29uTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNUb29uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hQaG9uZ01hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUGhvbmcoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCwgZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNQaHlzaWNhbCggbV91bmlmb3JtcywgbWF0ZXJpYWwsIGVudmlyb25tZW50ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCwgZW52aXJvbm1lbnQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaE1hdGNhcE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTWF0Y2FwKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc01lc2hEZXB0aE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc0NvbW1vbiggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGVwdGgoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTWVzaERpc3RhbmNlTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zQ29tbW9uKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXHRcdFx0XHRyZWZyZXNoVW5pZm9ybXNOb3JtYWwoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzTGluZUJhc2ljTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zTGluZSggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRpZiAoIG1hdGVyaWFsLmlzTGluZURhc2hlZE1hdGVyaWFsICkge1xuXG5cdFx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zRGFzaCggbV91bmlmb3JtcywgbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzUG9pbnRzTWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0cmVmcmVzaFVuaWZvcm1zUG9pbnRzKCBtX3VuaWZvcm1zLCBtYXRlcmlhbCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5pc1Nwcml0ZU1hdGVyaWFsICkge1xuXG5cdFx0XHRcdHJlZnJlc2hVbmlmb3Jtc1Nwcml0ZXMoIG1fdW5pZm9ybXMsIG1hdGVyaWFsICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmlzU2hhZG93TWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0bV91bmlmb3Jtcy5jb2xvci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5jb2xvciApO1xuXHRcdFx0XHRtX3VuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSBtYXRlcmlhbC5vcGFjaXR5O1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlY3RBcmVhTGlnaHQgVGV4dHVyZVxuXHRcdFx0Ly8gVE9ETyAobXJkb29iKTogRmluZCBhIG5pY2VyIGltcGxlbWVudGF0aW9uXG5cblx0XHRcdGlmICggbV91bmlmb3Jtcy5sdGNfMSAhPT0gdW5kZWZpbmVkICkgbV91bmlmb3Jtcy5sdGNfMS52YWx1ZSA9IFVuaWZvcm1zTGliLkxUQ18xO1xuXHRcdFx0aWYgKCBtX3VuaWZvcm1zLmx0Y18yICE9PSB1bmRlZmluZWQgKSBtX3VuaWZvcm1zLmx0Y18yLnZhbHVlID0gVW5pZm9ybXNMaWIuTFRDXzI7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cblx0XHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTsgLy8gIzE1NTgxXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaXNTaGFkZXJNYXRlcmlhbCAmJiBtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFdlYkdMVW5pZm9ybXMudXBsb2FkKCBfZ2wsIG1hdGVyaWFsUHJvcGVydGllcy51bmlmb3Jtc0xpc3QsIG1fdW5pZm9ybXMsIHRleHR1cmVzICk7XG5cdFx0XHRtYXRlcmlhbC51bmlmb3Jtc05lZWRVcGRhdGUgPSBmYWxzZTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuaXNTcHJpdGVNYXRlcmlhbCApIHtcblxuXHRcdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnY2VudGVyJywgb2JqZWN0LmNlbnRlciApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gY29tbW9uIG1hdHJpY2VzXG5cblx0XHRwX3VuaWZvcm1zLnNldFZhbHVlKCBfZ2wsICdtb2RlbFZpZXdNYXRyaXgnLCBvYmplY3QubW9kZWxWaWV3TWF0cml4ICk7XG5cdFx0cF91bmlmb3Jtcy5zZXRWYWx1ZSggX2dsLCAnbm9ybWFsTWF0cml4Jywgb2JqZWN0Lm5vcm1hbE1hdHJpeCApO1xuXHRcdHBfdW5pZm9ybXMuc2V0VmFsdWUoIF9nbCwgJ21vZGVsTWF0cml4Jywgb2JqZWN0Lm1hdHJpeFdvcmxkICk7XG5cblx0XHRyZXR1cm4gcHJvZ3JhbTtcblxuXHR9XG5cblx0Ly8gVW5pZm9ybXMgKHJlZnJlc2ggdW5pZm9ybXMgb2JqZWN0cylcblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNDb21tb24oIHVuaWZvcm1zLCBtYXRlcmlhbCwgZW52aXJvbm1lbnQgKSB7XG5cblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHRcdGlmICggbWF0ZXJpYWwuY29sb3IgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmUgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmVtaXNzaXZlICkubXVsdGlwbHlTY2FsYXIoIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuc3BlY3VsYXJNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLnNwZWN1bGFyTWFwLnZhbHVlID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9XG5cblx0XHR2YXIgZW52TWFwID0gbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50O1xuXG5cdFx0aWYgKCBlbnZNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVudk1hcC52YWx1ZSA9IGVudk1hcDtcblxuXHRcdFx0dW5pZm9ybXMuZmxpcEVudk1hcC52YWx1ZSA9IGVudk1hcC5pc0N1YmVUZXh0dXJlID8gLSAxIDogMTtcblxuXHRcdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5O1xuXHRcdFx0dW5pZm9ybXMucmVmcmFjdGlvblJhdGlvLnZhbHVlID0gbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvO1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXhNaXBMZXZlbC52YWx1ZSA9IHByb3BlcnRpZXMuZ2V0KCBlbnZNYXAgKS5fX21heE1pcExldmVsO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5saWdodE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubGlnaHRNYXAudmFsdWUgPSBtYXRlcmlhbC5saWdodE1hcDtcblx0XHRcdHVuaWZvcm1zLmxpZ2h0TWFwSW50ZW5zaXR5LnZhbHVlID0gbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hb01hcC52YWx1ZSA9IG1hdGVyaWFsLmFvTWFwO1xuXHRcdFx0dW5pZm9ybXMuYW9NYXBJbnRlbnNpdHkudmFsdWUgPSBtYXRlcmlhbC5hb01hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllc1xuXHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdC8vIDIuIHNwZWN1bGFyIG1hcFxuXHRcdC8vIDMuIG5vcm1hbCBtYXBcblx0XHQvLyA0LiBidW1wIG1hcFxuXHRcdC8vIDUuIGFscGhhIG1hcFxuXHRcdC8vIDYuIGVtaXNzaXZlIG1hcFxuXG5cdFx0dmFyIHV2U2NhbGVNYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnNwZWN1bGFyTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuc3BlY3VsYXJNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYnVtcE1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLnJvdWdobmVzc01hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLnJvdWdobmVzc01hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1ldGFsbmVzc01hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHR9IGVsc2UgaWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLmVtaXNzaXZlTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB1dlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAuaXNXZWJHTFJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwID0gdXZTY2FsZU1hcC50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXZTY2FsZU1hcC5tYXRyaXhBdXRvVXBkYXRlID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHV2U2NhbGVNYXAudXBkYXRlTWF0cml4KCk7XG5cblx0XHRcdH1cblxuXHRcdFx0dW5pZm9ybXMudXZUcmFuc2Zvcm0udmFsdWUuY29weSggdXZTY2FsZU1hcC5tYXRyaXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllcyBmb3IgdXYyXG5cdFx0Ly8gMS4gYW8gbWFwXG5cdFx0Ly8gMi4gbGlnaHQgbWFwXG5cblx0XHR2YXIgdXYyU2NhbGVNYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFvTWFwICkge1xuXG5cdFx0XHR1djJTY2FsZU1hcCA9IG1hdGVyaWFsLmFvTWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwubGlnaHRNYXAgKSB7XG5cblx0XHRcdHV2MlNjYWxlTWFwID0gbWF0ZXJpYWwubGlnaHRNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2MlNjYWxlTWFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRpZiAoIHV2MlNjYWxlTWFwLmlzV2ViR0xSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0dXYyU2NhbGVNYXAgPSB1djJTY2FsZU1hcC50ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggdXYyU2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1djJTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51djJUcmFuc2Zvcm0udmFsdWUuY29weSggdXYyU2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xpbmUoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLmRpZmZ1c2UudmFsdWUuY29weSggbWF0ZXJpYWwuY29sb3IgKTtcblx0XHR1bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gbWF0ZXJpYWwub3BhY2l0eTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zRGFzaCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0dW5pZm9ybXMuZGFzaFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZTtcblx0XHR1bmlmb3Jtcy50b3RhbFNpemUudmFsdWUgPSBtYXRlcmlhbC5kYXNoU2l6ZSArIG1hdGVyaWFsLmdhcFNpemU7XG5cdFx0dW5pZm9ybXMuc2NhbGUudmFsdWUgPSBtYXRlcmlhbC5zY2FsZTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUG9pbnRzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMuc2l6ZS52YWx1ZSA9IG1hdGVyaWFsLnNpemUgKiBfcGl4ZWxSYXRpbztcblx0XHR1bmlmb3Jtcy5zY2FsZS52YWx1ZSA9IF9oZWlnaHQgKiAwLjU7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWFwLnZhbHVlID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5hbHBoYU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYWxwaGFNYXAudmFsdWUgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdC8vIHV2IHJlcGVhdCBhbmQgb2Zmc2V0IHNldHRpbmcgcHJpb3JpdGllc1xuXHRcdC8vIDEuIGNvbG9yIG1hcFxuXHRcdC8vIDIuIGFscGhhIG1hcFxuXG5cdFx0dmFyIHV2U2NhbGVNYXA7XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1hcCApIHtcblxuXHRcdFx0dXZTY2FsZU1hcCA9IG1hdGVyaWFsLm1hcDtcblxuXHRcdH0gZWxzZSBpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwuYWxwaGFNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIHV2U2NhbGVNYXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB1dlNjYWxlTWFwLm1hdHJpeEF1dG9VcGRhdGUgPT09IHRydWUgKSB7XG5cblx0XHRcdFx0dXZTY2FsZU1hcC51cGRhdGVNYXRyaXgoKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR1bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZS5jb3B5KCB1dlNjYWxlTWFwLm1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNTcHJpdGVzKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5kaWZmdXNlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLmNvbG9yICk7XG5cdFx0dW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IG1hdGVyaWFsLm9wYWNpdHk7XG5cdFx0dW5pZm9ybXMucm90YXRpb24udmFsdWUgPSBtYXRlcmlhbC5yb3RhdGlvbjtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXAudmFsdWUgPSBtYXRlcmlhbC5tYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmFscGhhTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5hbHBoYU1hcC52YWx1ZSA9IG1hdGVyaWFsLmFscGhhTWFwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdXYgcmVwZWF0IGFuZCBvZmZzZXQgc2V0dGluZyBwcmlvcml0aWVzXG5cdFx0Ly8gMS4gY29sb3IgbWFwXG5cdFx0Ly8gMi4gYWxwaGEgbWFwXG5cblx0XHR2YXIgdXZTY2FsZU1hcDtcblxuXHRcdGlmICggbWF0ZXJpYWwubWFwICkge1xuXG5cdFx0XHR1dlNjYWxlTWFwID0gbWF0ZXJpYWwubWFwO1xuXG5cdFx0fSBlbHNlIGlmICggbWF0ZXJpYWwuYWxwaGFNYXAgKSB7XG5cblx0XHRcdHV2U2NhbGVNYXAgPSBtYXRlcmlhbC5hbHBoYU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggdXZTY2FsZU1hcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHV2U2NhbGVNYXAubWF0cml4QXV0b1VwZGF0ZSA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHR1dlNjYWxlTWFwLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHR9XG5cblx0XHRcdHVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlLmNvcHkoIHV2U2NhbGVNYXAubWF0cml4ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0ZvZyggdW5pZm9ybXMsIGZvZyApIHtcblxuXHRcdHVuaWZvcm1zLmZvZ0NvbG9yLnZhbHVlLmNvcHkoIGZvZy5jb2xvciApO1xuXG5cdFx0aWYgKCBmb2cuaXNGb2cgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmZvZ05lYXIudmFsdWUgPSBmb2cubmVhcjtcblx0XHRcdHVuaWZvcm1zLmZvZ0Zhci52YWx1ZSA9IGZvZy5mYXI7XG5cblx0XHR9IGVsc2UgaWYgKCBmb2cuaXNGb2dFeHAyICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5mb2dEZW5zaXR5LnZhbHVlID0gZm9nLmRlbnNpdHk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0xhbWJlcnQoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Bob25nKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHR1bmlmb3Jtcy5zcGVjdWxhci52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zcGVjdWxhciApO1xuXHRcdHVuaWZvcm1zLnNoaW5pbmVzcy52YWx1ZSA9IE1hdGgubWF4KCBtYXRlcmlhbC5zaGluaW5lc3MsIDFlLTQgKTsgLy8gdG8gcHJldmVudCBwb3coIDAuMCwgMC4wIClcblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1Rvb24oIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdHVuaWZvcm1zLnNwZWN1bGFyLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnNwZWN1bGFyICk7XG5cdFx0dW5pZm9ybXMuc2hpbmluZXNzLnZhbHVlID0gTWF0aC5tYXgoIG1hdGVyaWFsLnNoaW5pbmVzcywgMWUtNCApOyAvLyB0byBwcmV2ZW50IHBvdyggMC4wLCAwLjAgKVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ncmFkaWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZ3JhZGllbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5ncmFkaWVudE1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW1pc3NpdmVNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmVtaXNzaXZlTWFwLnZhbHVlID0gbWF0ZXJpYWwuZW1pc3NpdmVNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc1N0YW5kYXJkKCB1bmlmb3JtcywgbWF0ZXJpYWwsIGVudmlyb25tZW50ICkge1xuXG5cdFx0dW5pZm9ybXMucm91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwucm91Z2huZXNzO1xuXHRcdHVuaWZvcm1zLm1ldGFsbmVzcy52YWx1ZSA9IG1hdGVyaWFsLm1ldGFsbmVzcztcblxuXHRcdGlmICggbWF0ZXJpYWwucm91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5yb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5yb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm1ldGFsbmVzc01hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubWV0YWxuZXNzTWFwLnZhbHVlID0gbWF0ZXJpYWwubWV0YWxuZXNzTWFwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5lbWlzc2l2ZU1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZW1pc3NpdmVNYXAudmFsdWUgPSBtYXRlcmlhbC5lbWlzc2l2ZU1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuYnVtcE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuYnVtcE1hcC52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBNYXA7XG5cdFx0XHR1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgPSBtYXRlcmlhbC5idW1wU2NhbGU7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlICo9IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwubm9ybWFsTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxNYXAudmFsdWUgPSBtYXRlcmlhbC5ub3JtYWxNYXA7XG5cdFx0XHR1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5jb3B5KCBtYXRlcmlhbC5ub3JtYWxTY2FsZSApO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLm5lZ2F0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZW52TWFwIHx8IGVudmlyb25tZW50ICkge1xuXG5cdFx0XHQvL3VuaWZvcm1zLmVudk1hcC52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcDsgLy8gcGFydCBvZiB1bmlmb3JtcyBjb21tb25cblx0XHRcdHVuaWZvcm1zLmVudk1hcEludGVuc2l0eS52YWx1ZSA9IG1hdGVyaWFsLmVudk1hcEludGVuc2l0eTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcmVmcmVzaFVuaWZvcm1zUGh5c2ljYWwoIHVuaWZvcm1zLCBtYXRlcmlhbCwgZW52aXJvbm1lbnQgKSB7XG5cblx0XHRyZWZyZXNoVW5pZm9ybXNTdGFuZGFyZCggdW5pZm9ybXMsIG1hdGVyaWFsLCBlbnZpcm9ubWVudCApO1xuXG5cdFx0dW5pZm9ybXMucmVmbGVjdGl2aXR5LnZhbHVlID0gbWF0ZXJpYWwucmVmbGVjdGl2aXR5OyAvLyBhbHNvIHBhcnQgb2YgdW5pZm9ybXMgY29tbW9uXG5cblx0XHR1bmlmb3Jtcy5jbGVhcmNvYXQudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXQ7XG5cdFx0dW5pZm9ybXMuY2xlYXJjb2F0Um91Z2huZXNzLnZhbHVlID0gbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzO1xuXHRcdGlmICggbWF0ZXJpYWwuc2hlZW4gKSB1bmlmb3Jtcy5zaGVlbi52YWx1ZS5jb3B5KCBtYXRlcmlhbC5zaGVlbiApO1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE1hcDtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuY2xlYXJjb2F0Um91Z2huZXNzTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXRSb3VnaG5lc3NNYXAudmFsdWUgPSBtYXRlcmlhbC5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuY2xlYXJjb2F0Tm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblx0XHRcdHVuaWZvcm1zLmNsZWFyY29hdE5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbE1hcDtcblxuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHtcblxuXHRcdFx0XHR1bmlmb3Jtcy5jbGVhcmNvYXROb3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dW5pZm9ybXMudHJhbnNwYXJlbmN5LnZhbHVlID0gbWF0ZXJpYWwudHJhbnNwYXJlbmN5O1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNNYXRjYXAoIHVuaWZvcm1zLCBtYXRlcmlhbCApIHtcblxuXHRcdGlmICggbWF0ZXJpYWwubWF0Y2FwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5tYXRjYXAudmFsdWUgPSBtYXRlcmlhbC5tYXRjYXA7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmJ1bXBNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmJ1bXBNYXAudmFsdWUgPSBtYXRlcmlhbC5idW1wTWFwO1xuXHRcdFx0dW5pZm9ybXMuYnVtcFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuYnVtcFNjYWxlO1xuXHRcdFx0aWYgKCBtYXRlcmlhbC5zaWRlID09PSBCYWNrU2lkZSApIHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSAqPSAtIDE7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLm5vcm1hbE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMubm9ybWFsTWFwLnZhbHVlID0gbWF0ZXJpYWwubm9ybWFsTWFwO1xuXHRcdFx0dW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUuY29weSggbWF0ZXJpYWwubm9ybWFsU2NhbGUgKTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5ub3JtYWxTY2FsZS52YWx1ZS5uZWdhdGUoKTtcblxuXHRcdH1cblxuXHRcdGlmICggbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRNYXAudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXA7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50Qmlhcy52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudEJpYXM7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc0RlcHRoKCB1bmlmb3JtcywgbWF0ZXJpYWwgKSB7XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiByZWZyZXNoVW5pZm9ybXNEaXN0YW5jZSggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudE1hcC52YWx1ZSA9IG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcDtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudFNjYWxlLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGU7XG5cdFx0XHR1bmlmb3Jtcy5kaXNwbGFjZW1lbnRCaWFzLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50QmlhcztcblxuXHRcdH1cblxuXHRcdHVuaWZvcm1zLnJlZmVyZW5jZVBvc2l0aW9uLnZhbHVlLmNvcHkoIG1hdGVyaWFsLnJlZmVyZW5jZVBvc2l0aW9uICk7XG5cdFx0dW5pZm9ybXMubmVhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwubmVhckRpc3RhbmNlO1xuXHRcdHVuaWZvcm1zLmZhckRpc3RhbmNlLnZhbHVlID0gbWF0ZXJpYWwuZmFyRGlzdGFuY2U7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIHJlZnJlc2hVbmlmb3Jtc05vcm1hbCggdW5pZm9ybXMsIG1hdGVyaWFsICkge1xuXG5cdFx0aWYgKCBtYXRlcmlhbC5idW1wTWFwICkge1xuXG5cdFx0XHR1bmlmb3Jtcy5idW1wTWFwLnZhbHVlID0gbWF0ZXJpYWwuYnVtcE1hcDtcblx0XHRcdHVuaWZvcm1zLmJ1bXBTY2FsZS52YWx1ZSA9IG1hdGVyaWFsLmJ1bXBTY2FsZTtcblx0XHRcdGlmICggbWF0ZXJpYWwuc2lkZSA9PT0gQmFja1NpZGUgKSB1bmlmb3Jtcy5idW1wU2NhbGUudmFsdWUgKj0gLSAxO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBtYXRlcmlhbC5ub3JtYWxNYXAgKSB7XG5cblx0XHRcdHVuaWZvcm1zLm5vcm1hbE1hcC52YWx1ZSA9IG1hdGVyaWFsLm5vcm1hbE1hcDtcblx0XHRcdHVuaWZvcm1zLm5vcm1hbFNjYWxlLnZhbHVlLmNvcHkoIG1hdGVyaWFsLm5vcm1hbFNjYWxlICk7XG5cdFx0XHRpZiAoIG1hdGVyaWFsLnNpZGUgPT09IEJhY2tTaWRlICkgdW5pZm9ybXMubm9ybWFsU2NhbGUudmFsdWUubmVnYXRlKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG1hdGVyaWFsLmRpc3BsYWNlbWVudE1hcCApIHtcblxuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50TWFwLnZhbHVlID0gbWF0ZXJpYWwuZGlzcGxhY2VtZW50TWFwO1xuXHRcdFx0dW5pZm9ybXMuZGlzcGxhY2VtZW50U2NhbGUudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRTY2FsZTtcblx0XHRcdHVuaWZvcm1zLmRpc3BsYWNlbWVudEJpYXMudmFsdWUgPSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBJZiB1bmlmb3JtcyBhcmUgbWFya2VkIGFzIGNsZWFuLCB0aGV5IGRvbid0IG5lZWQgdG8gYmUgbG9hZGVkIHRvIHRoZSBHUFUuXG5cblx0ZnVuY3Rpb24gbWFya1VuaWZvcm1zTGlnaHRzTmVlZHNVcGRhdGUoIHVuaWZvcm1zLCB2YWx1ZSApIHtcblxuXHRcdHVuaWZvcm1zLmFtYmllbnRMaWdodENvbG9yLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMubGlnaHRQcm9iZS5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdFx0dW5pZm9ybXMuZGlyZWN0aW9uYWxMaWdodHMubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5kaXJlY3Rpb25hbExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnBvaW50TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMucG9pbnRMaWdodFNoYWRvd3MubmVlZHNVcGRhdGUgPSB2YWx1ZTtcblx0XHR1bmlmb3Jtcy5zcG90TGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuc3BvdExpZ2h0U2hhZG93cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXHRcdHVuaWZvcm1zLnJlY3RBcmVhTGlnaHRzLm5lZWRzVXBkYXRlID0gdmFsdWU7XG5cdFx0dW5pZm9ybXMuaGVtaXNwaGVyZUxpZ2h0cy5uZWVkc1VwZGF0ZSA9IHZhbHVlO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBtYXRlcmlhbE5lZWRzTGlnaHRzKCBtYXRlcmlhbCApIHtcblxuXHRcdHJldHVybiBtYXRlcmlhbC5pc01lc2hMYW1iZXJ0TWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNNZXNoVG9vbk1hdGVyaWFsIHx8IG1hdGVyaWFsLmlzTWVzaFBob25nTWF0ZXJpYWwgfHxcblx0XHRcdG1hdGVyaWFsLmlzTWVzaFN0YW5kYXJkTWF0ZXJpYWwgfHwgbWF0ZXJpYWwuaXNTaGFkb3dNYXRlcmlhbCB8fFxuXHRcdFx0KCBtYXRlcmlhbC5pc1NoYWRlck1hdGVyaWFsICYmIG1hdGVyaWFsLmxpZ2h0cyA9PT0gdHJ1ZSApO1xuXG5cdH1cblxuXHQvL1xuXHR0aGlzLnNldEZyYW1lYnVmZmVyID0gZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggX2ZyYW1lYnVmZmVyICE9PSB2YWx1ZSAmJiBfY3VycmVudFJlbmRlclRhcmdldCA9PT0gbnVsbCApIF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCB2YWx1ZSApO1xuXG5cdFx0X2ZyYW1lYnVmZmVyID0gdmFsdWU7XG5cblx0fTtcblxuXHR0aGlzLmdldEFjdGl2ZUN1YmVGYWNlID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlQ3ViZUZhY2U7XG5cblx0fTtcblxuXHR0aGlzLmdldEFjdGl2ZU1pcG1hcExldmVsID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIF9jdXJyZW50QWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0fTtcblxuXHR0aGlzLmdldFJlbmRlclRhcmdldCA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBfY3VycmVudFJlbmRlclRhcmdldDtcblxuXHR9O1xuXG5cdHRoaXMuc2V0UmVuZGVyVGFyZ2V0ID0gZnVuY3Rpb24gKCByZW5kZXJUYXJnZXQsIGFjdGl2ZUN1YmVGYWNlLCBhY3RpdmVNaXBtYXBMZXZlbCApIHtcblxuXHRcdF9jdXJyZW50UmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuXHRcdF9jdXJyZW50QWN0aXZlQ3ViZUZhY2UgPSBhY3RpdmVDdWJlRmFjZTtcblx0XHRfY3VycmVudEFjdGl2ZU1pcG1hcExldmVsID0gYWN0aXZlTWlwbWFwTGV2ZWw7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCAmJiBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbEZyYW1lYnVmZmVyID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRleHR1cmVzLnNldHVwUmVuZGVyVGFyZ2V0KCByZW5kZXJUYXJnZXQgKTtcblxuXHRcdH1cblxuXHRcdHZhciBmcmFtZWJ1ZmZlciA9IF9mcmFtZWJ1ZmZlcjtcblx0XHR2YXIgaXNDdWJlID0gZmFsc2U7XG5cblx0XHRpZiAoIHJlbmRlclRhcmdldCApIHtcblxuXHRcdFx0dmFyIF9fd2ViZ2xGcmFtZWJ1ZmZlciA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQgKS5fX3dlYmdsRnJhbWVidWZmZXI7XG5cblx0XHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICkge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyWyBhY3RpdmVDdWJlRmFjZSB8fCAwIF07XG5cdFx0XHRcdGlzQ3ViZSA9IHRydWU7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHJlbmRlclRhcmdldC5pc1dlYkdMTXVsdGlzYW1wbGVSZW5kZXJUYXJnZXQgKSB7XG5cblx0XHRcdFx0ZnJhbWVidWZmZXIgPSBwcm9wZXJ0aWVzLmdldCggcmVuZGVyVGFyZ2V0ICkuX193ZWJnbE11bHRpc2FtcGxlZEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZyYW1lYnVmZmVyID0gX193ZWJnbEZyYW1lYnVmZmVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdF9jdXJyZW50Vmlld3BvcnQuY29weSggcmVuZGVyVGFyZ2V0LnZpZXdwb3J0ICk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggcmVuZGVyVGFyZ2V0LnNjaXNzb3IgKTtcblx0XHRcdF9jdXJyZW50U2Npc3NvclRlc3QgPSByZW5kZXJUYXJnZXQuc2Npc3NvclRlc3Q7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfY3VycmVudFZpZXdwb3J0LmNvcHkoIF92aWV3cG9ydCApLm11bHRpcGx5U2NhbGFyKCBfcGl4ZWxSYXRpbyApLmZsb29yKCk7XG5cdFx0XHRfY3VycmVudFNjaXNzb3IuY29weSggX3NjaXNzb3IgKS5tdWx0aXBseVNjYWxhciggX3BpeGVsUmF0aW8gKS5mbG9vcigpO1xuXHRcdFx0X2N1cnJlbnRTY2lzc29yVGVzdCA9IF9zY2lzc29yVGVzdDtcblxuXHRcdH1cblxuXHRcdGlmICggX2N1cnJlbnRGcmFtZWJ1ZmZlciAhPT0gZnJhbWVidWZmZXIgKSB7XG5cblx0XHRcdF9nbC5iaW5kRnJhbWVidWZmZXIoIDM2MTYwLCBmcmFtZWJ1ZmZlciApO1xuXHRcdFx0X2N1cnJlbnRGcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudmlld3BvcnQoIF9jdXJyZW50Vmlld3BvcnQgKTtcblx0XHRzdGF0ZS5zY2lzc29yKCBfY3VycmVudFNjaXNzb3IgKTtcblx0XHRzdGF0ZS5zZXRTY2lzc29yVGVzdCggX2N1cnJlbnRTY2lzc29yVGVzdCApO1xuXG5cdFx0aWYgKCBpc0N1YmUgKSB7XG5cblx0XHRcdHZhciB0ZXh0dXJlUHJvcGVydGllcyA9IHByb3BlcnRpZXMuZ2V0KCByZW5kZXJUYXJnZXQudGV4dHVyZSApO1xuXHRcdFx0X2dsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKCAzNjE2MCwgMzYwNjQsIDM0MDY5ICsgKCBhY3RpdmVDdWJlRmFjZSB8fCAwICksIHRleHR1cmVQcm9wZXJ0aWVzLl9fd2ViZ2xUZXh0dXJlLCBhY3RpdmVNaXBtYXBMZXZlbCB8fCAwICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHMgPSBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgYnVmZmVyLCBhY3RpdmVDdWJlRmFjZUluZGV4ICkge1xuXG5cdFx0aWYgKCAhICggcmVuZGVyVGFyZ2V0ICYmIHJlbmRlclRhcmdldC5pc1dlYkdMUmVuZGVyVGFyZ2V0ICkgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlbmRlclRhcmdldCBpcyBub3QgVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGZyYW1lYnVmZmVyID0gcHJvcGVydGllcy5nZXQoIHJlbmRlclRhcmdldCApLl9fd2ViZ2xGcmFtZWJ1ZmZlcjtcblxuXHRcdGlmICggcmVuZGVyVGFyZ2V0LmlzV2ViR0xDdWJlUmVuZGVyVGFyZ2V0ICYmIGFjdGl2ZUN1YmVGYWNlSW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0ZnJhbWVidWZmZXIgPSBmcmFtZWJ1ZmZlclsgYWN0aXZlQ3ViZUZhY2VJbmRleCBdO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0dmFyIHJlc3RvcmUgPSBmYWxzZTtcblxuXHRcdFx0aWYgKCBmcmFtZWJ1ZmZlciAhPT0gX2N1cnJlbnRGcmFtZWJ1ZmZlciApIHtcblxuXHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgZnJhbWVidWZmZXIgKTtcblxuXHRcdFx0XHRyZXN0b3JlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXG5cdFx0XHRcdHZhciB0ZXh0dXJlID0gcmVuZGVyVGFyZ2V0LnRleHR1cmU7XG5cdFx0XHRcdHZhciB0ZXh0dXJlRm9ybWF0ID0gdGV4dHVyZS5mb3JtYXQ7XG5cdFx0XHRcdHZhciB0ZXh0dXJlVHlwZSA9IHRleHR1cmUudHlwZTtcblxuXHRcdFx0XHRpZiAoIHRleHR1cmVGb3JtYXQgIT09IFJHQkFGb3JtYXQgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZUZvcm1hdCApICE9PSBfZ2wuZ2V0UGFyYW1ldGVyKCAzNTczOSApICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLldlYkdMUmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVsczogcmVuZGVyVGFyZ2V0IGlzIG5vdCBpbiBSR0JBIG9yIGltcGxlbWVudGF0aW9uIGRlZmluZWQgZm9ybWF0LicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdGV4dHVyZVR5cGUgIT09IFVuc2lnbmVkQnl0ZVR5cGUgJiYgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSAhPT0gX2dsLmdldFBhcmFtZXRlciggMzU3MzggKSAmJiAvLyBJRTExLCBFZGdlIGFuZCBDaHJvbWUgTWFjIDwgNTIgKCM5NTEzKVxuXHRcdFx0XHRcdCEgKCB0ZXh0dXJlVHlwZSA9PT0gRmxvYXRUeXBlICYmICggY2FwYWJpbGl0aWVzLmlzV2ViR0wyIHx8IGV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICkgfHwgZXh0ZW5zaW9ucy5nZXQoICdXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXQnICkgKSApICYmIC8vIENocm9tZSBNYWMgPj0gNTIgYW5kIEZpcmVmb3hcblx0XHRcdFx0XHQhICggdGV4dHVyZVR5cGUgPT09IEhhbGZGbG9hdFR5cGUgJiYgKCBjYXBhYmlsaXRpZXMuaXNXZWJHTDIgPyBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnICkgOiBleHRlbnNpb25zLmdldCggJ0VYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCcgKSApICkgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuV2ViR0xSZW5kZXJlci5yZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzOiByZW5kZXJUYXJnZXQgaXMgbm90IGluIFVuc2lnbmVkQnl0ZVR5cGUgb3IgaW1wbGVtZW50YXRpb24gZGVmaW5lZCB0eXBlLicgKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggX2dsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoIDM2MTYwICkgPT09IDM2MDUzICkge1xuXG5cdFx0XHRcdFx0Ly8gdGhlIGZvbGxvd2luZyBpZiBzdGF0ZW1lbnQgZW5zdXJlcyB2YWxpZCByZWFkIHJlcXVlc3RzIChubyBvdXQtb2YtYm91bmRzIHBpeGVscywgc2VlICM4NjA0KVxuXG5cdFx0XHRcdFx0aWYgKCAoIHggPj0gMCAmJiB4IDw9ICggcmVuZGVyVGFyZ2V0LndpZHRoIC0gd2lkdGggKSApICYmICggeSA+PSAwICYmIHkgPD0gKCByZW5kZXJUYXJnZXQuaGVpZ2h0IC0gaGVpZ2h0ICkgKSApIHtcblxuXHRcdFx0XHRcdFx0X2dsLnJlYWRQaXhlbHMoIHgsIHksIHdpZHRoLCBoZWlnaHQsIHV0aWxzLmNvbnZlcnQoIHRleHR1cmVGb3JtYXQgKSwgdXRpbHMuY29udmVydCggdGV4dHVyZVR5cGUgKSwgYnVmZmVyICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5XZWJHTFJlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHM6IHJlYWRQaXhlbHMgZnJvbSByZW5kZXJUYXJnZXQgZmFpbGVkLiBGcmFtZWJ1ZmZlciBub3QgY29tcGxldGUuJyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBmaW5hbGx5IHtcblxuXHRcdFx0XHRpZiAoIHJlc3RvcmUgKSB7XG5cblx0XHRcdFx0XHRfZ2wuYmluZEZyYW1lYnVmZmVyKCAzNjE2MCwgX2N1cnJlbnRGcmFtZWJ1ZmZlciApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH07XG5cblx0dGhpcy5jb3B5RnJhbWVidWZmZXJUb1RleHR1cmUgPSBmdW5jdGlvbiAoIHBvc2l0aW9uLCB0ZXh0dXJlLCBsZXZlbCApIHtcblxuXHRcdGlmICggbGV2ZWwgPT09IHVuZGVmaW5lZCApIGxldmVsID0gMDtcblxuXHRcdHZhciBsZXZlbFNjYWxlID0gTWF0aC5wb3coIDIsIC0gbGV2ZWwgKTtcblx0XHR2YXIgd2lkdGggPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLndpZHRoICogbGV2ZWxTY2FsZSApO1xuXHRcdHZhciBoZWlnaHQgPSBNYXRoLmZsb29yKCB0ZXh0dXJlLmltYWdlLmhlaWdodCAqIGxldmVsU2NhbGUgKTtcblx0XHR2YXIgZ2xGb3JtYXQgPSB1dGlscy5jb252ZXJ0KCB0ZXh0dXJlLmZvcm1hdCApO1xuXG5cdFx0dGV4dHVyZXMuc2V0VGV4dHVyZTJEKCB0ZXh0dXJlLCAwICk7XG5cblx0XHRfZ2wuY29weVRleEltYWdlMkQoIDM1NTMsIGxldmVsLCBnbEZvcm1hdCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgMCApO1xuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0dGhpcy5jb3B5VGV4dHVyZVRvVGV4dHVyZSA9IGZ1bmN0aW9uICggcG9zaXRpb24sIHNyY1RleHR1cmUsIGRzdFRleHR1cmUsIGxldmVsICkge1xuXG5cdFx0dmFyIHdpZHRoID0gc3JjVGV4dHVyZS5pbWFnZS53aWR0aDtcblx0XHR2YXIgaGVpZ2h0ID0gc3JjVGV4dHVyZS5pbWFnZS5oZWlnaHQ7XG5cdFx0dmFyIGdsRm9ybWF0ID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS5mb3JtYXQgKTtcblx0XHR2YXIgZ2xUeXBlID0gdXRpbHMuY29udmVydCggZHN0VGV4dHVyZS50eXBlICk7XG5cblx0XHR0ZXh0dXJlcy5zZXRUZXh0dXJlMkQoIGRzdFRleHR1cmUsIDAgKTtcblxuXHRcdGlmICggc3JjVGV4dHVyZS5pc0RhdGFUZXh0dXJlICkge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgd2lkdGgsIGhlaWdodCwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZS5kYXRhICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRfZ2wudGV4U3ViSW1hZ2UyRCggMzU1MywgbGV2ZWwgfHwgMCwgcG9zaXRpb24ueCwgcG9zaXRpb24ueSwgZ2xGb3JtYXQsIGdsVHlwZSwgc3JjVGV4dHVyZS5pbWFnZSApO1xuXG5cdFx0fVxuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0dGhpcy5pbml0VGV4dHVyZSA9IGZ1bmN0aW9uICggdGV4dHVyZSApIHtcblxuXHRcdHRleHR1cmVzLnNldFRleHR1cmUyRCggdGV4dHVyZSwgMCApO1xuXG5cdFx0c3RhdGUudW5iaW5kVGV4dHVyZSgpO1xuXG5cdH07XG5cblx0aWYgKCB0eXBlb2YgX19USFJFRV9ERVZUT09MU19fICE9PSAndW5kZWZpbmVkJyApIHtcblxuXHRcdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdvYnNlcnZlJywgeyBkZXRhaWw6IHRoaXMgfSApICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGb2dFeHAyKCBjb2xvciwgZGVuc2l0eSApIHtcblxuXHR0aGlzLm5hbWUgPSAnJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCBjb2xvciApO1xuXHR0aGlzLmRlbnNpdHkgPSAoIGRlbnNpdHkgIT09IHVuZGVmaW5lZCApID8gZGVuc2l0eSA6IDAuMDAwMjU7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRm9nRXhwMi5wcm90b3R5cGUsIHtcblxuXHRpc0ZvZ0V4cDI6IHRydWUsXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgRm9nRXhwMiggdGhpcy5jb2xvciwgdGhpcy5kZW5zaXR5ICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggLyogbWV0YSAqLyApIHtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiAnRm9nRXhwMicsXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRcdGRlbnNpdHk6IHRoaXMuZGVuc2l0eVxuXHRcdH07XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRm9nKCBjb2xvciwgbmVhciwgZmFyICkge1xuXG5cdHRoaXMubmFtZSA9ICcnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIGNvbG9yICk7XG5cblx0dGhpcy5uZWFyID0gKCBuZWFyICE9PSB1bmRlZmluZWQgKSA/IG5lYXIgOiAxO1xuXHR0aGlzLmZhciA9ICggZmFyICE9PSB1bmRlZmluZWQgKSA/IGZhciA6IDEwMDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRm9nLnByb3RvdHlwZSwge1xuXG5cdGlzRm9nOiB0cnVlLFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvZyggdGhpcy5jb2xvciwgdGhpcy5uZWFyLCB0aGlzLmZhciApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoIC8qIG1ldGEgKi8gKSB7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogJ0ZvZycsXG5cdFx0XHRjb2xvcjogdGhpcy5jb2xvci5nZXRIZXgoKSxcblx0XHRcdG5lYXI6IHRoaXMubmVhcixcblx0XHRcdGZhcjogdGhpcy5mYXJcblx0XHR9O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEludGVybGVhdmVkQnVmZmVyKCBhcnJheSwgc3RyaWRlICkge1xuXG5cdHRoaXMuYXJyYXkgPSBhcnJheTtcblx0dGhpcy5zdHJpZGUgPSBzdHJpZGU7XG5cdHRoaXMuY291bnQgPSBhcnJheSAhPT0gdW5kZWZpbmVkID8gYXJyYXkubGVuZ3RoIC8gc3RyaWRlIDogMDtcblxuXHR0aGlzLnVzYWdlID0gU3RhdGljRHJhd1VzYWdlO1xuXHR0aGlzLnVwZGF0ZVJhbmdlID0geyBvZmZzZXQ6IDAsIGNvdW50OiAtIDEgfTtcblxuXHR0aGlzLnZlcnNpb24gPSAwO1xuXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eSggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLCAnbmVlZHNVcGRhdGUnLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB2YWx1ZSA9PT0gdHJ1ZSApIHRoaXMudmVyc2lvbiArKztcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggSW50ZXJsZWF2ZWRCdWZmZXIucHJvdG90eXBlLCB7XG5cblx0aXNJbnRlcmxlYXZlZEJ1ZmZlcjogdHJ1ZSxcblxuXHRvblVwbG9hZENhbGxiYWNrOiBmdW5jdGlvbiAoKSB7fSxcblxuXHRzZXRVc2FnZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMudXNhZ2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmFycmF5ID0gbmV3IHNvdXJjZS5hcnJheS5jb25zdHJ1Y3Rvciggc291cmNlLmFycmF5ICk7XG5cdFx0dGhpcy5jb3VudCA9IHNvdXJjZS5jb3VudDtcblx0XHR0aGlzLnN0cmlkZSA9IHNvdXJjZS5zdHJpZGU7XG5cdFx0dGhpcy51c2FnZSA9IHNvdXJjZS51c2FnZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y29weUF0OiBmdW5jdGlvbiAoIGluZGV4MSwgYXR0cmlidXRlLCBpbmRleDIgKSB7XG5cblx0XHRpbmRleDEgKj0gdGhpcy5zdHJpZGU7XG5cdFx0aW5kZXgyICo9IGF0dHJpYnV0ZS5zdHJpZGU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnN0cmlkZTsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuYXJyYXlbIGluZGV4MSArIGkgXSA9IGF0dHJpYnV0ZS5hcnJheVsgaW5kZXgyICsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUsIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dGhpcy5hcnJheS5zZXQoIHZhbHVlLCBvZmZzZXQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdG9uVXBsb2FkOiBmdW5jdGlvbiAoIGNhbGxiYWNrICkge1xuXG5cdFx0dGhpcy5vblVwbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG52YXIgX3ZlY3RvciQ2ID0gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCBpdGVtU2l6ZSwgb2Zmc2V0LCBub3JtYWxpemVkICkge1xuXG5cdHRoaXMuZGF0YSA9IGludGVybGVhdmVkQnVmZmVyO1xuXHR0aGlzLml0ZW1TaXplID0gaXRlbVNpemU7XG5cdHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuXG5cdHRoaXMubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQgPT09IHRydWU7XG5cbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXG5cdGNvdW50OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5jb3VudDtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGFycmF5OiB7XG5cblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlLCB7XG5cblx0aXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbSApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMuZGF0YS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdF92ZWN0b3IkNi54ID0gdGhpcy5nZXRYKCBpICk7XG5cdFx0XHRfdmVjdG9yJDYueSA9IHRoaXMuZ2V0WSggaSApO1xuXHRcdFx0X3ZlY3RvciQ2LnogPSB0aGlzLmdldFooIGkgKTtcblxuXHRcdFx0X3ZlY3RvciQ2LmFwcGx5TWF0cml4NCggbSApO1xuXG5cdFx0XHR0aGlzLnNldFhZWiggaSwgX3ZlY3RvciQ2LngsIF92ZWN0b3IkNi55LCBfdmVjdG9yJDYueiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYOiBmdW5jdGlvbiAoIGluZGV4LCB4ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCBdID0geDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WTogZnVuY3Rpb24gKCBpbmRleCwgeSApIHtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF0gPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRaOiBmdW5jdGlvbiAoIGluZGV4LCB6ICkge1xuXG5cdFx0dGhpcy5kYXRhLmFycmF5WyBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldCArIDIgXSA9IHo7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFc6IGZ1bmN0aW9uICggaW5kZXgsIHcgKSB7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0ICsgMyBdID0gdztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0WDogZnVuY3Rpb24gKCBpbmRleCApIHtcblxuXHRcdHJldHVybiB0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICogdGhpcy5kYXRhLnN0cmlkZSArIHRoaXMub2Zmc2V0IF07XG5cblx0fSxcblxuXHRnZXRZOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAxIF07XG5cblx0fSxcblxuXHRnZXRaOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAyIF07XG5cblx0fSxcblxuXHRnZXRXOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQgKyAzIF07XG5cblx0fSxcblxuXHRzZXRYWTogZnVuY3Rpb24gKCBpbmRleCwgeCwgeSApIHtcblxuXHRcdGluZGV4ID0gaW5kZXggKiB0aGlzLmRhdGEuc3RyaWRlICsgdGhpcy5vZmZzZXQ7XG5cblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMCBdID0geDtcblx0XHR0aGlzLmRhdGEuYXJyYXlbIGluZGV4ICsgMSBdID0geTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0WFlaOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRYWVpXOiBmdW5jdGlvbiAoIGluZGV4LCB4LCB5LCB6LCB3ICkge1xuXG5cdFx0aW5kZXggPSBpbmRleCAqIHRoaXMuZGF0YS5zdHJpZGUgKyB0aGlzLm9mZnNldDtcblxuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAwIF0gPSB4O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAxIF0gPSB5O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAyIF0gPSB6O1xuXHRcdHRoaXMuZGF0YS5hcnJheVsgaW5kZXggKyAzIF0gPSB3O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgcm90YXRpb246IDxmbG9hdD4sXG4gKiAgc2l6ZUF0dGVudWF0aW9uOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBTcHJpdGVNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZU1hdGVyaWFsJztcblxuXHR0aGlzLmNvbG9yID0gbmV3IENvbG9yKCAweGZmZmZmZiApO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLnJvdGF0aW9uID0gMDtcblxuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHRydWU7XG5cblx0dGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblNwcml0ZU1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwcml0ZU1hdGVyaWFsO1xuU3ByaXRlTWF0ZXJpYWwucHJvdG90eXBlLmlzU3ByaXRlTWF0ZXJpYWwgPSB0cnVlO1xuXG5TcHJpdGVNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXAgPSBzb3VyY2UubWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5yb3RhdGlvbiA9IHNvdXJjZS5yb3RhdGlvbjtcblxuXHR0aGlzLnNpemVBdHRlbnVhdGlvbiA9IHNvdXJjZS5zaXplQXR0ZW51YXRpb247XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxudmFyIF9nZW9tZXRyeTtcblxudmFyIF9pbnRlcnNlY3RQb2ludCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3dvcmxkU2NhbGUgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9tdlBvc2l0aW9uID0gbmV3IFZlY3RvcjMoKTtcblxudmFyIF9hbGlnbmVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xudmFyIF9yb3RhdGVkUG9zaXRpb24gPSBuZXcgVmVjdG9yMigpO1xudmFyIF92aWV3V29ybGRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG52YXIgX3ZBJDEgPSBuZXcgVmVjdG9yMygpO1xudmFyIF92QiQxID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdkMkMSA9IG5ldyBWZWN0b3IzKCk7XG5cbnZhciBfdXZBJDEgPSBuZXcgVmVjdG9yMigpO1xudmFyIF91dkIkMSA9IG5ldyBWZWN0b3IyKCk7XG52YXIgX3V2QyQxID0gbmV3IFZlY3RvcjIoKTtcblxuZnVuY3Rpb24gU3ByaXRlKCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwcml0ZSc7XG5cblx0aWYgKCBfZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9nZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdFx0dmFyIGZsb2F0MzJBcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoIFtcblx0XHRcdC0gMC41LCAtIDAuNSwgMCwgMCwgMCxcblx0XHRcdDAuNSwgLSAwLjUsIDAsIDEsIDAsXG5cdFx0XHQwLjUsIDAuNSwgMCwgMSwgMSxcblx0XHRcdC0gMC41LCAwLjUsIDAsIDAsIDFcblx0XHRdICk7XG5cblx0XHR2YXIgaW50ZXJsZWF2ZWRCdWZmZXIgPSBuZXcgSW50ZXJsZWF2ZWRCdWZmZXIoIGZsb2F0MzJBcnJheSwgNSApO1xuXG5cdFx0X2dlb21ldHJ5LnNldEluZGV4KCBbIDAsIDEsIDIsXHQwLCAyLCAzIF0gKTtcblx0XHRfZ2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgSW50ZXJsZWF2ZWRCdWZmZXJBdHRyaWJ1dGUoIGludGVybGVhdmVkQnVmZmVyLCAzLCAwLCBmYWxzZSApICk7XG5cdFx0X2dlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlKCBpbnRlcmxlYXZlZEJ1ZmZlciwgMiwgMywgZmFsc2UgKSApO1xuXG5cdH1cblxuXHR0aGlzLmdlb21ldHJ5ID0gX2dlb21ldHJ5O1xuXHR0aGlzLm1hdGVyaWFsID0gKCBtYXRlcmlhbCAhPT0gdW5kZWZpbmVkICkgPyBtYXRlcmlhbCA6IG5ldyBTcHJpdGVNYXRlcmlhbCgpO1xuXG5cdHRoaXMuY2VudGVyID0gbmV3IFZlY3RvcjIoIDAuNSwgMC41ICk7XG5cbn1cblxuU3ByaXRlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNwcml0ZSxcblxuXHRpc1Nwcml0ZTogdHJ1ZSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdGlmICggcmF5Y2FzdGVyLmNhbWVyYSA9PT0gbnVsbCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwcml0ZTogXCJSYXljYXN0ZXIuY2FtZXJhXCIgbmVlZHMgdG8gYmUgc2V0IGluIG9yZGVyIHRvIHJheWNhc3QgYWdhaW5zdCBzcHJpdGVzLicgKTtcblxuXHRcdH1cblxuXHRcdF93b3JsZFNjYWxlLnNldEZyb21NYXRyaXhTY2FsZSggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0X3ZpZXdXb3JsZE1hdHJpeC5jb3B5KCByYXljYXN0ZXIuY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0dGhpcy5tb2RlbFZpZXdNYXRyaXgubXVsdGlwbHlNYXRyaWNlcyggcmF5Y2FzdGVyLmNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UsIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdF9tdlBvc2l0aW9uLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tb2RlbFZpZXdNYXRyaXggKTtcblxuXHRcdGlmICggcmF5Y2FzdGVyLmNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICYmIHRoaXMubWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID09PSBmYWxzZSApIHtcblxuXHRcdFx0X3dvcmxkU2NhbGUubXVsdGlwbHlTY2FsYXIoIC0gX212UG9zaXRpb24ueiApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHJvdGF0aW9uID0gdGhpcy5tYXRlcmlhbC5yb3RhdGlvbjtcblx0XHR2YXIgc2luLCBjb3M7XG5cdFx0aWYgKCByb3RhdGlvbiAhPT0gMCApIHtcblxuXHRcdFx0Y29zID0gTWF0aC5jb3MoIHJvdGF0aW9uICk7XG5cdFx0XHRzaW4gPSBNYXRoLnNpbiggcm90YXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHZhciBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcblxuXHRcdHRyYW5zZm9ybVZlcnRleCggX3ZBJDEuc2V0KCAtIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkIkMS5zZXQoIDAuNSwgLSAwLjUsIDAgKSwgX212UG9zaXRpb24sIGNlbnRlciwgX3dvcmxkU2NhbGUsIHNpbiwgY29zICk7XG5cdFx0dHJhbnNmb3JtVmVydGV4KCBfdkMkMS5zZXQoIDAuNSwgMC41LCAwICksIF9tdlBvc2l0aW9uLCBjZW50ZXIsIF93b3JsZFNjYWxlLCBzaW4sIGNvcyApO1xuXG5cdFx0X3V2QSQxLnNldCggMCwgMCApO1xuXHRcdF91dkIkMS5zZXQoIDEsIDAgKTtcblx0XHRfdXZDJDEuc2V0KCAxLCAxICk7XG5cblx0XHQvLyBjaGVjayBmaXJzdCB0cmlhbmdsZVxuXHRcdHZhciBpbnRlcnNlY3QgPSByYXljYXN0ZXIucmF5LmludGVyc2VjdFRyaWFuZ2xlKCBfdkEkMSwgX3ZCJDEsIF92QyQxLCBmYWxzZSwgX2ludGVyc2VjdFBvaW50ICk7XG5cblx0XHRpZiAoIGludGVyc2VjdCA9PT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgc2Vjb25kIHRyaWFuZ2xlXG5cdFx0XHR0cmFuc2Zvcm1WZXJ0ZXgoIF92QiQxLnNldCggLSAwLjUsIDAuNSwgMCApLCBfbXZQb3NpdGlvbiwgY2VudGVyLCBfd29ybGRTY2FsZSwgc2luLCBjb3MgKTtcblx0XHRcdF91dkIkMS5zZXQoIDAsIDEgKTtcblxuXHRcdFx0aW50ZXJzZWN0ID0gcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RUcmlhbmdsZSggX3ZBJDEsIF92QyQxLCBfdkIkMSwgZmFsc2UsIF9pbnRlcnNlY3RQb2ludCApO1xuXHRcdFx0aWYgKCBpbnRlcnNlY3QgPT09IG51bGwgKSB7XG5cblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfaW50ZXJzZWN0UG9pbnQgKTtcblxuXHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSByZXR1cm47XG5cblx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0cG9pbnQ6IF9pbnRlcnNlY3RQb2ludC5jbG9uZSgpLFxuXHRcdFx0dXY6IFRyaWFuZ2xlLmdldFVWKCBfaW50ZXJzZWN0UG9pbnQsIF92QSQxLCBfdkIkMSwgX3ZDJDEsIF91dkEkMSwgX3V2QiQxLCBfdXZDJDEsIG5ldyBWZWN0b3IyKCkgKSxcblx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdH0gKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0aWYgKCBzb3VyY2UuY2VudGVyICE9PSB1bmRlZmluZWQgKSB0aGlzLmNlbnRlci5jb3B5KCBzb3VyY2UuY2VudGVyICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cblxufSApO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1WZXJ0ZXgoIHZlcnRleFBvc2l0aW9uLCBtdlBvc2l0aW9uLCBjZW50ZXIsIHNjYWxlLCBzaW4sIGNvcyApIHtcblxuXHQvLyBjb21wdXRlIHBvc2l0aW9uIGluIGNhbWVyYSBzcGFjZVxuXHRfYWxpZ25lZFBvc2l0aW9uLnN1YlZlY3RvcnMoIHZlcnRleFBvc2l0aW9uLCBjZW50ZXIgKS5hZGRTY2FsYXIoIDAuNSApLm11bHRpcGx5KCBzY2FsZSApO1xuXG5cdC8vIHRvIGNoZWNrIGlmIHJvdGF0aW9uIGlzIG5vdCB6ZXJvXG5cdGlmICggc2luICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRfcm90YXRlZFBvc2l0aW9uLnggPSAoIGNvcyAqIF9hbGlnbmVkUG9zaXRpb24ueCApIC0gKCBzaW4gKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTtcblx0XHRfcm90YXRlZFBvc2l0aW9uLnkgPSAoIHNpbiAqIF9hbGlnbmVkUG9zaXRpb24ueCApICsgKCBjb3MgKiBfYWxpZ25lZFBvc2l0aW9uLnkgKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0X3JvdGF0ZWRQb3NpdGlvbi5jb3B5KCBfYWxpZ25lZFBvc2l0aW9uICk7XG5cblx0fVxuXG5cblx0dmVydGV4UG9zaXRpb24uY29weSggbXZQb3NpdGlvbiApO1xuXHR2ZXJ0ZXhQb3NpdGlvbi54ICs9IF9yb3RhdGVkUG9zaXRpb24ueDtcblx0dmVydGV4UG9zaXRpb24ueSArPSBfcm90YXRlZFBvc2l0aW9uLnk7XG5cblx0Ly8gdHJhbnNmb3JtIHRvIHdvcmxkIHNwYWNlXG5cdHZlcnRleFBvc2l0aW9uLmFwcGx5TWF0cml4NCggX3ZpZXdXb3JsZE1hdHJpeCApO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBfdjEkNCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3YyJDIgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBMT0QoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuX2N1cnJlbnRMZXZlbCA9IDA7XG5cblx0dGhpcy50eXBlID0gJ0xPRCc7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMsIHtcblx0XHRsZXZlbHM6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogW11cblx0XHR9XG5cdH0gKTtcblxuXHR0aGlzLmF1dG9VcGRhdGUgPSB0cnVlO1xuXG59XG5cbkxPRC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMT0QsXG5cblx0aXNMT0Q6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIGZhbHNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gc291cmNlLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcblxuXHRcdFx0dGhpcy5hZGRMZXZlbCggbGV2ZWwub2JqZWN0LmNsb25lKCksIGxldmVsLmRpc3RhbmNlICk7XG5cblx0XHR9XG5cblx0XHR0aGlzLmF1dG9VcGRhdGUgPSBzb3VyY2UuYXV0b1VwZGF0ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWRkTGV2ZWw6IGZ1bmN0aW9uICggb2JqZWN0LCBkaXN0YW5jZSApIHtcblxuXHRcdGlmICggZGlzdGFuY2UgPT09IHVuZGVmaW5lZCApIGRpc3RhbmNlID0gMDtcblxuXHRcdGRpc3RhbmNlID0gTWF0aC5hYnMoIGRpc3RhbmNlICk7XG5cblx0XHR2YXIgbGV2ZWxzID0gdGhpcy5sZXZlbHM7XG5cblx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRpZiAoIGRpc3RhbmNlIDwgbGV2ZWxzWyBsIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGxldmVscy5zcGxpY2UoIGwsIDAsIHsgZGlzdGFuY2U6IGRpc3RhbmNlLCBvYmplY3Q6IG9iamVjdCB9ICk7XG5cblx0XHR0aGlzLmFkZCggb2JqZWN0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEN1cnJlbnRMZXZlbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnRMZXZlbDtcblxuXHR9LFxuXG5cdGdldE9iamVjdEZvckRpc3RhbmNlOiBmdW5jdGlvbiAoIGRpc3RhbmNlICkge1xuXG5cdFx0dmFyIGxldmVscyA9IHRoaXMubGV2ZWxzO1xuXG5cdFx0aWYgKCBsZXZlbHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAxLCBsID0gbGV2ZWxzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IGxldmVsc1sgaSBdLmRpc3RhbmNlICkge1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBsZXZlbHNbIGkgLSAxIF0ub2JqZWN0O1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdF92MSQ0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBfdjEkNCApO1xuXG5cdFx0XHR0aGlzLmdldE9iamVjdEZvckRpc3RhbmNlKCBkaXN0YW5jZSApLnJheWNhc3QoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbiAoIGNhbWVyYSApIHtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGlmICggbGV2ZWxzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdF92MSQ0LnNldEZyb21NYXRyaXhQb3NpdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRfdjIkMi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubWF0cml4V29ybGQgKTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gX3YxJDQuZGlzdGFuY2VUbyggX3YyJDIgKSAvIGNhbWVyYS56b29tO1xuXG5cdFx0XHRsZXZlbHNbIDAgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPj0gbGV2ZWxzWyBpIF0uZGlzdGFuY2UgKSB7XG5cblx0XHRcdFx0XHRsZXZlbHNbIGkgLSAxIF0ub2JqZWN0LnZpc2libGUgPSBmYWxzZTtcblx0XHRcdFx0XHRsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSA9IHRydWU7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9jdXJyZW50TGV2ZWwgPSBpIC0gMTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRsZXZlbHNbIGkgXS5vYmplY3QudmlzaWJsZSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRpZiAoIHRoaXMuYXV0b1VwZGF0ZSA9PT0gZmFsc2UgKSBkYXRhLm9iamVjdC5hdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0XHRkYXRhLm9iamVjdC5sZXZlbHMgPSBbXTtcblxuXHRcdHZhciBsZXZlbHMgPSB0aGlzLmxldmVscztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGxldmVscy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbGV2ZWwgPSBsZXZlbHNbIGkgXTtcblxuXHRcdFx0ZGF0YS5vYmplY3QubGV2ZWxzLnB1c2goIHtcblx0XHRcdFx0b2JqZWN0OiBsZXZlbC5vYmplY3QudXVpZCxcblx0XHRcdFx0ZGlzdGFuY2U6IGxldmVsLmRpc3RhbmNlXG5cdFx0XHR9ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1pa2FlbCBlbXRpbmdlciAvIGh0dHA6Ly9nb21vLnNlL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgaWtlcnIgLyBodHRwOi8vdmVyb2xkLmNvbVxuICovXG5cbmZ1bmN0aW9uIFNraW5uZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0aWYgKCBnZW9tZXRyeSAmJiBnZW9tZXRyeS5pc0dlb21ldHJ5ICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNraW5uZWRNZXNoIG5vIGxvbmdlciBzdXBwb3J0cyBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdH1cblxuXHRNZXNoLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdTa2lubmVkTWVzaCc7XG5cblx0dGhpcy5iaW5kTW9kZSA9ICdhdHRhY2hlZCc7XG5cdHRoaXMuYmluZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cdHRoaXMuYmluZE1hdHJpeEludmVyc2UgPSBuZXcgTWF0cml4NCgpO1xuXG59XG5cblNraW5uZWRNZXNoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU2tpbm5lZE1lc2gsXG5cblx0aXNTa2lubmVkTWVzaDogdHJ1ZSxcblxuXHRiaW5kOiBmdW5jdGlvbiAoIHNrZWxldG9uLCBiaW5kTWF0cml4ICkge1xuXG5cdFx0dGhpcy5za2VsZXRvbiA9IHNrZWxldG9uO1xuXG5cdFx0aWYgKCBiaW5kTWF0cml4ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHRoaXMudXBkYXRlTWF0cml4V29ybGQoIHRydWUgKTtcblxuXHRcdFx0dGhpcy5za2VsZXRvbi5jYWxjdWxhdGVJbnZlcnNlcygpO1xuXG5cdFx0XHRiaW5kTWF0cml4ID0gdGhpcy5tYXRyaXhXb3JsZDtcblxuXHRcdH1cblxuXHRcdHRoaXMuYmluZE1hdHJpeC5jb3B5KCBiaW5kTWF0cml4ICk7XG5cdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCBiaW5kTWF0cml4ICk7XG5cblx0fSxcblxuXHRwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnNrZWxldG9uLnBvc2UoKTtcblxuXHR9LFxuXG5cdG5vcm1hbGl6ZVNraW5XZWlnaHRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmVjdG9yID0gbmV3IFZlY3RvcjQoKTtcblxuXHRcdHZhciBza2luV2VpZ2h0ID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnNraW5XZWlnaHQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBza2luV2VpZ2h0LmNvdW50OyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmVjdG9yLnggPSBza2luV2VpZ2h0LmdldFgoIGkgKTtcblx0XHRcdHZlY3Rvci55ID0gc2tpbldlaWdodC5nZXRZKCBpICk7XG5cdFx0XHR2ZWN0b3IueiA9IHNraW5XZWlnaHQuZ2V0WiggaSApO1xuXHRcdFx0dmVjdG9yLncgPSBza2luV2VpZ2h0LmdldFcoIGkgKTtcblxuXHRcdFx0dmFyIHNjYWxlID0gMS4wIC8gdmVjdG9yLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdFx0XHRpZiAoIHNjYWxlICE9PSBJbmZpbml0eSApIHtcblxuXHRcdFx0XHR2ZWN0b3IubXVsdGlwbHlTY2FsYXIoIHNjYWxlICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmVjdG9yLnNldCggMSwgMCwgMCwgMCApOyAvLyBkbyBzb21ldGhpbmcgcmVhc29uYWJsZVxuXG5cdFx0XHR9XG5cblx0XHRcdHNraW5XZWlnaHQuc2V0WFlaVyggaSwgdmVjdG9yLngsIHZlY3Rvci55LCB2ZWN0b3IueiwgdmVjdG9yLncgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiBmdW5jdGlvbiAoIGZvcmNlICkge1xuXG5cdFx0TWVzaC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5iaW5kTW9kZSA9PT0gJ2F0dGFjaGVkJyApIHtcblxuXHRcdFx0dGhpcy5iaW5kTWF0cml4SW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLm1hdHJpeFdvcmxkICk7XG5cblx0XHR9IGVsc2UgaWYgKCB0aGlzLmJpbmRNb2RlID09PSAnZGV0YWNoZWQnICkge1xuXG5cdFx0XHR0aGlzLmJpbmRNYXRyaXhJbnZlcnNlLmdldEludmVyc2UoIHRoaXMuYmluZE1hdHJpeCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tpbm5lZE1lc2g6IFVucmVjb2duaXplZCBiaW5kTW9kZTogJyArIHRoaXMuYmluZE1vZGUgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoIHRoaXMuZ2VvbWV0cnksIHRoaXMubWF0ZXJpYWwgKS5jb3B5KCB0aGlzICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtaWthZWwgZW10aW5nZXIgLyBodHRwOi8vZ29tby5zZS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1pY2hhZWwgZ3VlcnJlcm8gLyBodHRwOi8vcmVhbGl0eW1lbHRkb3duLmNvbVxuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxudmFyIF9vZmZzZXRNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xudmFyIF9pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cbmZ1bmN0aW9uIFNrZWxldG9uKCBib25lcywgYm9uZUludmVyc2VzICkge1xuXG5cdC8vIGNvcHkgdGhlIGJvbmUgYXJyYXlcblxuXHRib25lcyA9IGJvbmVzIHx8IFtdO1xuXG5cdHRoaXMuYm9uZXMgPSBib25lcy5zbGljZSggMCApO1xuXHR0aGlzLmJvbmVNYXRyaWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoIHRoaXMuYm9uZXMubGVuZ3RoICogMTYgKTtcblxuXHR0aGlzLmZyYW1lID0gLSAxO1xuXG5cdC8vIHVzZSB0aGUgc3VwcGxpZWQgYm9uZSBpbnZlcnNlcyBvciBjYWxjdWxhdGUgdGhlIGludmVyc2VzXG5cblx0aWYgKCBib25lSW52ZXJzZXMgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMuY2FsY3VsYXRlSW52ZXJzZXMoKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0aWYgKCB0aGlzLmJvbmVzLmxlbmd0aCA9PT0gYm9uZUludmVyc2VzLmxlbmd0aCApIHtcblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBib25lSW52ZXJzZXMuc2xpY2UoIDAgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlNrZWxldG9uIGJvbmVJbnZlcnNlcyBpcyB0aGUgd3JvbmcgbGVuZ3RoLicgKTtcblxuXHRcdFx0dGhpcy5ib25lSW52ZXJzZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGhpcy5ib25lSW52ZXJzZXMucHVzaCggbmV3IE1hdHJpeDQoKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIFNrZWxldG9uLnByb3RvdHlwZSwge1xuXG5cdGNhbGN1bGF0ZUludmVyc2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmJvbmVJbnZlcnNlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBpbnZlcnNlID0gbmV3IE1hdHJpeDQoKTtcblxuXHRcdFx0aWYgKCB0aGlzLmJvbmVzWyBpIF0gKSB7XG5cblx0XHRcdFx0aW52ZXJzZS5nZXRJbnZlcnNlKCB0aGlzLmJvbmVzWyBpIF0ubWF0cml4V29ybGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmJvbmVJbnZlcnNlcy5wdXNoKCBpbnZlcnNlICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHRwb3NlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgYm9uZSwgaSwgaWw7XG5cblx0XHQvLyByZWNvdmVyIHRoZSBiaW5kLXRpbWUgd29ybGQgbWF0cmljZXNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRib25lLm1hdHJpeFdvcmxkLmdldEludmVyc2UoIHRoaXMuYm9uZUludmVyc2VzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgbG9jYWwgbWF0cmljZXMsIHBvc2l0aW9ucywgcm90YXRpb25zIGFuZCBzY2FsZXNcblxuXHRcdGZvciAoIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdGJvbmUgPSB0aGlzLmJvbmVzWyBpIF07XG5cblx0XHRcdGlmICggYm9uZSApIHtcblxuXHRcdFx0XHRpZiAoIGJvbmUucGFyZW50ICYmIGJvbmUucGFyZW50LmlzQm9uZSApIHtcblxuXHRcdFx0XHRcdGJvbmUubWF0cml4LmdldEludmVyc2UoIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXgubXVsdGlwbHkoIGJvbmUubWF0cml4V29ybGQgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ym9uZS5tYXRyaXguY29weSggYm9uZS5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRib25lLm1hdHJpeC5kZWNvbXBvc2UoIGJvbmUucG9zaXRpb24sIGJvbmUucXVhdGVybmlvbiwgYm9uZS5zY2FsZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHR1cGRhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBib25lcyA9IHRoaXMuYm9uZXM7XG5cdFx0dmFyIGJvbmVJbnZlcnNlcyA9IHRoaXMuYm9uZUludmVyc2VzO1xuXHRcdHZhciBib25lTWF0cmljZXMgPSB0aGlzLmJvbmVNYXRyaWNlcztcblx0XHR2YXIgYm9uZVRleHR1cmUgPSB0aGlzLmJvbmVUZXh0dXJlO1xuXG5cdFx0Ly8gZmxhdHRlbiBib25lIG1hdHJpY2VzIHRvIGFycmF5XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGUgdGhlIG9mZnNldCBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCB0aGUgb3JpZ2luYWwgdHJhbnNmb3JtXG5cblx0XHRcdHZhciBtYXRyaXggPSBib25lc1sgaSBdID8gYm9uZXNbIGkgXS5tYXRyaXhXb3JsZCA6IF9pZGVudGl0eU1hdHJpeDtcblxuXHRcdFx0X29mZnNldE1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBtYXRyaXgsIGJvbmVJbnZlcnNlc1sgaSBdICk7XG5cdFx0XHRfb2Zmc2V0TWF0cml4LnRvQXJyYXkoIGJvbmVNYXRyaWNlcywgaSAqIDE2ICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGJvbmVUZXh0dXJlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGJvbmVUZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IFNrZWxldG9uKCB0aGlzLmJvbmVzLCB0aGlzLmJvbmVJbnZlcnNlcyApO1xuXG5cdH0sXG5cblx0Z2V0Qm9uZUJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IHRoaXMuYm9uZXMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBib25lID0gdGhpcy5ib25lc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGJvbmUubmFtZSA9PT0gbmFtZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gYm9uZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHR9LFxuXG5cdGRpc3Bvc2U6IGZ1bmN0aW9uICggKSB7XG5cblx0XHRpZiAoIHRoaXMuYm9uZVRleHR1cmUgKSB7XG5cblx0XHRcdHRoaXMuYm9uZVRleHR1cmUuZGlzcG9zZSgpO1xuXG5cdFx0XHR0aGlzLmJvbmVUZXh0dXJlID0gdW5kZWZpbmVkO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbWlrYWVsIGVtdGluZ2VyIC8gaHR0cDovL2dvbW8uc2UvXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBpa2VyciAvIGh0dHA6Ly92ZXJvbGQuY29tXG4gKi9cblxuZnVuY3Rpb24gQm9uZSgpIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0JvbmUnO1xuXG59XG5cbkJvbmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQm9uZSxcblxuXHRpc0JvbmU6IHRydWVcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF9pbnN0YW5jZUxvY2FsTWF0cml4ID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfaW5zdGFuY2VXb3JsZE1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cbnZhciBfaW5zdGFuY2VJbnRlcnNlY3RzID0gW107XG5cbnZhciBfbWVzaCA9IG5ldyBNZXNoKCk7XG5cbmZ1bmN0aW9uIEluc3RhbmNlZE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCwgY291bnQgKSB7XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLmluc3RhbmNlTWF0cml4ID0gbmV3IEJ1ZmZlckF0dHJpYnV0ZSggbmV3IEZsb2F0MzJBcnJheSggY291bnQgKiAxNiApLCAxNiApO1xuXG5cdHRoaXMuY291bnQgPSBjb3VudDtcblxuXHR0aGlzLmZydXN0dW1DdWxsZWQgPSBmYWxzZTtcblxufVxuXG5JbnN0YW5jZWRNZXNoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE1lc2gucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkTWVzaCxcblxuXHRpc0luc3RhbmNlZE1lc2g6IHRydWUsXG5cblx0Z2V0TWF0cml4QXQ6IGZ1bmN0aW9uICggaW5kZXgsIG1hdHJpeCApIHtcblxuXHRcdG1hdHJpeC5mcm9tQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9LFxuXG5cdHJheWNhc3Q6IGZ1bmN0aW9uICggcmF5Y2FzdGVyLCBpbnRlcnNlY3RzICkge1xuXG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHR2YXIgcmF5Y2FzdFRpbWVzID0gdGhpcy5jb3VudDtcblxuXHRcdF9tZXNoLmdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHRfbWVzaC5tYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWw7XG5cblx0XHRpZiAoIF9tZXNoLm1hdGVyaWFsID09PSB1bmRlZmluZWQgKSByZXR1cm47XG5cblx0XHRmb3IgKCB2YXIgaW5zdGFuY2VJZCA9IDA7IGluc3RhbmNlSWQgPCByYXljYXN0VGltZXM7IGluc3RhbmNlSWQgKysgKSB7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgd29ybGQgbWF0cml4IGZvciBlYWNoIGluc3RhbmNlXG5cblx0XHRcdHRoaXMuZ2V0TWF0cml4QXQoIGluc3RhbmNlSWQsIF9pbnN0YW5jZUxvY2FsTWF0cml4ICk7XG5cblx0XHRcdF9pbnN0YW5jZVdvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIG1hdHJpeFdvcmxkLCBfaW5zdGFuY2VMb2NhbE1hdHJpeCApO1xuXG5cdFx0XHQvLyB0aGUgbWVzaCByZXByZXNlbnRzIHRoaXMgc2luZ2xlIGluc3RhbmNlXG5cblx0XHRcdF9tZXNoLm1hdHJpeFdvcmxkID0gX2luc3RhbmNlV29ybGRNYXRyaXg7XG5cblx0XHRcdF9tZXNoLnJheWNhc3QoIHJheWNhc3RlciwgX2luc3RhbmNlSW50ZXJzZWN0cyApO1xuXG5cdFx0XHQvLyBwcm9jZXNzIHRoZSByZXN1bHQgb2YgcmF5Y2FzdFxuXG5cdFx0XHRpZiAoIF9pbnN0YW5jZUludGVyc2VjdHMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHRfaW5zdGFuY2VJbnRlcnNlY3RzWyAwIF0uaW5zdGFuY2VJZCA9IGluc3RhbmNlSWQ7XG5cdFx0XHRcdF9pbnN0YW5jZUludGVyc2VjdHNbIDAgXS5vYmplY3QgPSB0aGlzO1xuXG5cdFx0XHRcdGludGVyc2VjdHMucHVzaCggX2luc3RhbmNlSW50ZXJzZWN0c1sgMCBdICk7XG5cblx0XHRcdFx0X2luc3RhbmNlSW50ZXJzZWN0cy5sZW5ndGggPSAwO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRzZXRNYXRyaXhBdDogZnVuY3Rpb24gKCBpbmRleCwgbWF0cml4ICkge1xuXG5cdFx0bWF0cml4LnRvQXJyYXkoIHRoaXMuaW5zdGFuY2VNYXRyaXguYXJyYXksIGluZGV4ICogMTYgKTtcblxuXHR9LFxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkge1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGxpbmV3aWR0aDogPGZsb2F0PixcbiAqICBsaW5lY2FwOiBcInJvdW5kXCIsXG4gKiAgbGluZWpvaW46IFwicm91bmRcIlxuICogfVxuICovXG5cbmZ1bmN0aW9uIExpbmVCYXNpY01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUJhc2ljTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cblx0dGhpcy5saW5ld2lkdGggPSAxO1xuXHR0aGlzLmxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLmxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUJhc2ljTWF0ZXJpYWw7XG5cbkxpbmVCYXNpY01hdGVyaWFsLnByb3RvdHlwZS5pc0xpbmVCYXNpY01hdGVyaWFsID0gdHJ1ZTtcblxuTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubGluZXdpZHRoID0gc291cmNlLmxpbmV3aWR0aDtcblx0dGhpcy5saW5lY2FwID0gc291cmNlLmxpbmVjYXA7XG5cdHRoaXMubGluZWpvaW4gPSBzb3VyY2UubGluZWpvaW47XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgX3N0YXJ0ID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfZW5kID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfaW52ZXJzZU1hdHJpeCQxID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfcmF5JDEgPSBuZXcgUmF5KCk7XG52YXIgX3NwaGVyZSQyID0gbmV3IFNwaGVyZSgpO1xuXG5mdW5jdGlvbiBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIG1vZGUgKSB7XG5cblx0aWYgKCBtb2RlID09PSAxICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkxpbmU6IHBhcmFtZXRlciBUSFJFRS5MaW5lUGllY2VzIG5vIGxvbmdlciBzdXBwb3J0ZWQuIFVzZSBUSFJFRS5MaW5lU2VnbWVudHMgaW5zdGVhZC4nICk7XG5cblx0fVxuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZSc7XG5cblx0dGhpcy5nZW9tZXRyeSA9IGdlb21ldHJ5ICE9PSB1bmRlZmluZWQgPyBnZW9tZXRyeSA6IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHR0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWwgIT09IHVuZGVmaW5lZCA/IG1hdGVyaWFsIDogbmV3IExpbmVCYXNpY01hdGVyaWFsKCk7XG5cbn1cblxuTGluZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBMaW5lLFxuXG5cdGlzTGluZTogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbIDAgXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRfc3RhcnQuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25BdHRyaWJ1dGUsIGkgLSAxICk7XG5cdFx0XHRcdFx0X2VuZC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbkF0dHJpYnV0ZSwgaSApO1xuXG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpIF0gKz0gX3N0YXJ0LmRpc3RhbmNlVG8oIF9lbmQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnbGluZURpc3RhbmNlJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGxpbmVEaXN0YW5jZXMsIDEgKSApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7XG5cblx0XHRcdGxpbmVEaXN0YW5jZXNbIDAgXSA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdICs9IHZlcnRpY2VzWyBpIC0gMSBdLmRpc3RhbmNlVG8oIHZlcnRpY2VzWyBpIF0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHR2YXIgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5MaW5lLnRocmVzaG9sZDtcblxuXHRcdC8vIENoZWNraW5nIGJvdW5kaW5nU3BoZXJlIGRpc3RhbmNlIHRvIHJheVxuXG5cdFx0aWYgKCBnZW9tZXRyeS5ib3VuZGluZ1NwaGVyZSA9PT0gbnVsbCApIGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdFx0X3NwaGVyZSQyLmNvcHkoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlICk7XG5cdFx0X3NwaGVyZSQyLmFwcGx5TWF0cml4NCggbWF0cml4V29ybGQgKTtcblx0XHRfc3BoZXJlJDIucmFkaXVzICs9IHRocmVzaG9sZDtcblxuXHRcdGlmICggcmF5Y2FzdGVyLnJheS5pbnRlcnNlY3RzU3BoZXJlKCBfc3BoZXJlJDIgKSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvL1xuXG5cdFx0X2ludmVyc2VNYXRyaXgkMS5nZXRJbnZlcnNlKCBtYXRyaXhXb3JsZCApO1xuXHRcdF9yYXkkMS5jb3B5KCByYXljYXN0ZXIucmF5ICkuYXBwbHlNYXRyaXg0KCBfaW52ZXJzZU1hdHJpeCQxICk7XG5cblx0XHR2YXIgbG9jYWxUaHJlc2hvbGQgPSB0aHJlc2hvbGQgLyAoICggdGhpcy5zY2FsZS54ICsgdGhpcy5zY2FsZS55ICsgdGhpcy5zY2FsZS56ICkgLyAzICk7XG5cdFx0dmFyIGxvY2FsVGhyZXNob2xkU3EgPSBsb2NhbFRocmVzaG9sZCAqIGxvY2FsVGhyZXNob2xkO1xuXG5cdFx0dmFyIHZTdGFydCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHZFbmQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBpbnRlclNlZ21lbnQgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBpbnRlclJheSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIHN0ZXAgPSAoIHRoaXMgJiYgdGhpcy5pc0xpbmVTZWdtZW50cyApID8gMiA6IDE7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBpbmRpY2VzLmxlbmd0aCAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHR2YXIgYSA9IGluZGljZXNbIGkgXTtcblx0XHRcdFx0XHR2YXIgYiA9IGluZGljZXNbIGkgKyAxIF07XG5cblx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7XG5cdFx0XHRcdFx0dkVuZC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgYiAqIDMgKTtcblxuXHRcdFx0XHRcdHZhciBkaXN0U3EgPSBfcmF5JDEuZGlzdGFuY2VTcVRvU2VnbWVudCggdlN0YXJ0LCB2RW5kLCBpbnRlclJheSwgaW50ZXJTZWdtZW50ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RTcSA+IGxvY2FsVGhyZXNob2xkU3EgKSBjb250aW51ZTtcblxuXHRcdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHRcdHZhciBkaXN0YW5jZSA9IHJheWNhc3Rlci5yYXkub3JpZ2luLmRpc3RhbmNlVG8oIGludGVyUmF5ICk7XG5cblx0XHRcdFx0XHRpZiAoIGRpc3RhbmNlIDwgcmF5Y2FzdGVyLm5lYXIgfHwgZGlzdGFuY2UgPiByYXljYXN0ZXIuZmFyICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdFx0ZGlzdGFuY2U6IGRpc3RhbmNlLFxuXHRcdFx0XHRcdFx0Ly8gV2hhdCBkbyB3ZSB3YW50PyBpbnRlcnNlY3Rpb24gcG9pbnQgb24gdGhlIHJheSBvciBvbiB0aGUgc2VnbWVudD8/XG5cdFx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRcdHBvaW50OiBpbnRlclNlZ21lbnQuY2xvbmUoKS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKSxcblx0XHRcdFx0XHRcdGluZGV4OiBpLFxuXHRcdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRcdGZhY2VJbmRleDogbnVsbCxcblx0XHRcdFx0XHRcdG9iamVjdDogdGhpc1xuXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbnMubGVuZ3RoIC8gMyAtIDE7IGkgPCBsOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0XHR2U3RhcnQuZnJvbUFycmF5KCBwb3NpdGlvbnMsIDMgKiBpICk7XG5cdFx0XHRcdFx0dkVuZC5mcm9tQXJyYXkoIHBvc2l0aW9ucywgMyAqIGkgKyAzICk7XG5cblx0XHRcdFx0XHR2YXIgZGlzdFNxID0gX3JheSQxLmRpc3RhbmNlU3FUb1NlZ21lbnQoIHZTdGFydCwgdkVuZCwgaW50ZXJSYXksIGludGVyU2VnbWVudCApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0U3EgPiBsb2NhbFRocmVzaG9sZFNxICkgY29udGludWU7XG5cblx0XHRcdFx0XHRpbnRlclJheS5hcHBseU1hdHJpeDQoIHRoaXMubWF0cml4V29ybGQgKTsgLy9Nb3ZlIGJhY2sgdG8gd29ybGQgc3BhY2UgZm9yIGRpc3RhbmNlIGNhbGN1bGF0aW9uXG5cblx0XHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlclJheSApO1xuXG5cdFx0XHRcdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdFx0aW50ZXJzZWN0cy5wdXNoKCB7XG5cblx0XHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0XHRcdC8vIFdoYXQgZG8gd2Ugd2FudD8gaW50ZXJzZWN0aW9uIHBvaW50IG9uIHRoZSByYXkgb3Igb24gdGhlIHNlZ21lbnQ/P1xuXHRcdFx0XHRcdFx0Ly8gcG9pbnQ6IHJheWNhc3Rlci5yYXkuYXQoIGRpc3RhbmNlICksXG5cdFx0XHRcdFx0XHRwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICksXG5cdFx0XHRcdFx0XHRpbmRleDogaSxcblx0XHRcdFx0XHRcdGZhY2U6IG51bGwsXG5cdFx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0XHRcdFx0XHRvYmplY3Q6IHRoaXNcblxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGdlb21ldHJ5LmlzR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciB2ZXJ0aWNlcyA9IGdlb21ldHJ5LnZlcnRpY2VzO1xuXHRcdFx0dmFyIG5iVmVydGljZXMgPSB2ZXJ0aWNlcy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG5iVmVydGljZXMgLSAxOyBpICs9IHN0ZXAgKSB7XG5cblx0XHRcdFx0dmFyIGRpc3RTcSA9IF9yYXkkMS5kaXN0YW5jZVNxVG9TZWdtZW50KCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc1sgaSArIDEgXSwgaW50ZXJSYXksIGludGVyU2VnbWVudCApO1xuXG5cdFx0XHRcdGlmICggZGlzdFNxID4gbG9jYWxUaHJlc2hvbGRTcSApIGNvbnRpbnVlO1xuXG5cdFx0XHRcdGludGVyUmF5LmFwcGx5TWF0cml4NCggdGhpcy5tYXRyaXhXb3JsZCApOyAvL01vdmUgYmFjayB0byB3b3JsZCBzcGFjZSBmb3IgZGlzdGFuY2UgY2FsY3VsYXRpb25cblxuXHRcdFx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlclJheSApO1xuXG5cdFx0XHRcdGlmICggZGlzdGFuY2UgPCByYXljYXN0ZXIubmVhciB8fCBkaXN0YW5jZSA+IHJheWNhc3Rlci5mYXIgKSBjb250aW51ZTtcblxuXHRcdFx0XHRpbnRlcnNlY3RzLnB1c2goIHtcblxuXHRcdFx0XHRcdGRpc3RhbmNlOiBkaXN0YW5jZSxcblx0XHRcdFx0XHQvLyBXaGF0IGRvIHdlIHdhbnQ/IGludGVyc2VjdGlvbiBwb2ludCBvbiB0aGUgcmF5IG9yIG9uIHRoZSBzZWdtZW50Pz9cblx0XHRcdFx0XHQvLyBwb2ludDogcmF5Y2FzdGVyLnJheS5hdCggZGlzdGFuY2UgKSxcblx0XHRcdFx0XHRwb2ludDogaW50ZXJTZWdtZW50LmNsb25lKCkuYXBwbHlNYXRyaXg0KCB0aGlzLm1hdHJpeFdvcmxkICksXG5cdFx0XHRcdFx0aW5kZXg6IGksXG5cdFx0XHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdFx0XHRmYWNlSW5kZXg6IG51bGwsXG5cdFx0XHRcdFx0b2JqZWN0OiB0aGlzXG5cblx0XHRcdFx0fSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxudmFyIF9zdGFydCQxID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfZW5kJDEgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRMaW5lLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lU2VnbWVudHMnO1xuXG59XG5cbkxpbmVTZWdtZW50cy5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpbmVTZWdtZW50cyxcblxuXHRpc0xpbmVTZWdtZW50czogdHJ1ZSxcblxuXHRjb21wdXRlTGluZURpc3RhbmNlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblxuXHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdFx0Ly8gd2UgYXNzdW1lIG5vbi1pbmRleGVkIGdlb21ldHJ5XG5cblx0XHRcdGlmICggZ2VvbWV0cnkuaW5kZXggPT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIHBvc2l0aW9uQXR0cmlidXRlID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdFx0dmFyIGxpbmVEaXN0YW5jZXMgPSBbXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBwb3NpdGlvbkF0dHJpYnV0ZS5jb3VudDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0XHRcdF9zdGFydCQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICk7XG5cdFx0XHRcdFx0X2VuZCQxLmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uQXR0cmlidXRlLCBpICsgMSApO1xuXG5cdFx0XHRcdFx0bGluZURpc3RhbmNlc1sgaSBdID0gKCBpID09PSAwICkgPyAwIDogbGluZURpc3RhbmNlc1sgaSAtIDEgXTtcblx0XHRcdFx0XHRsaW5lRGlzdGFuY2VzWyBpICsgMSBdID0gbGluZURpc3RhbmNlc1sgaSBdICsgX3N0YXJ0JDEuZGlzdGFuY2VUbyggX2VuZCQxICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2xpbmVEaXN0YW5jZScsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBsaW5lRGlzdGFuY2VzLCAxICkgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lU2VnbWVudHMuY29tcHV0ZUxpbmVEaXN0YW5jZXMoKTogQ29tcHV0YXRpb24gb25seSBwb3NzaWJsZSB3aXRoIG5vbi1pbmRleGVkIEJ1ZmZlckdlb21ldHJ5LicgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cdFx0XHR2YXIgbGluZURpc3RhbmNlcyA9IGdlb21ldHJ5LmxpbmVEaXN0YW5jZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMiApIHtcblxuXHRcdFx0XHRfc3RhcnQkMS5jb3B5KCB2ZXJ0aWNlc1sgaSBdICk7XG5cdFx0XHRcdF9lbmQkMS5jb3B5KCB2ZXJ0aWNlc1sgaSArIDEgXSApO1xuXG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgXSA9ICggaSA9PT0gMCApID8gMCA6IGxpbmVEaXN0YW5jZXNbIGkgLSAxIF07XG5cdFx0XHRcdGxpbmVEaXN0YW5jZXNbIGkgKyAxIF0gPSBsaW5lRGlzdGFuY2VzWyBpIF0gKyBfc3RhcnQkMS5kaXN0YW5jZVRvKCBfZW5kJDEgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtZ3JldGVyIC8gaHR0cDovL2dpdGh1Yi5jb20vbWdyZXRlclxuICovXG5cbmZ1bmN0aW9uIExpbmVMb29wKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0TGluZS5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZUxvb3AnO1xuXG59XG5cbkxpbmVMb29wLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpbmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZUxvb3AsXG5cblx0aXNMaW5lTG9vcDogdHJ1ZSxcblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzaXplOiA8ZmxvYXQ+LFxuICogIHNpemVBdHRlbnVhdGlvbjogPGJvb2w+XG4gKlxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludHNNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5zaXplID0gMTtcblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSB0cnVlO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvaW50c01hdGVyaWFsO1xuXG5Qb2ludHNNYXRlcmlhbC5wcm90b3R5cGUuaXNQb2ludHNNYXRlcmlhbCA9IHRydWU7XG5cblBvaW50c01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblxuXHR0aGlzLm1hcCA9IHNvdXJjZS5tYXA7XG5cblx0dGhpcy5hbHBoYU1hcCA9IHNvdXJjZS5hbHBoYU1hcDtcblxuXHR0aGlzLnNpemUgPSBzb3VyY2Uuc2l6ZTtcblx0dGhpcy5zaXplQXR0ZW51YXRpb24gPSBzb3VyY2Uuc2l6ZUF0dGVudWF0aW9uO1xuXG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbnZhciBfaW52ZXJzZU1hdHJpeCQyID0gbmV3IE1hdHJpeDQoKTtcbnZhciBfcmF5JDIgPSBuZXcgUmF5KCk7XG52YXIgX3NwaGVyZSQzID0gbmV3IFNwaGVyZSgpO1xudmFyIF9wb3NpdGlvbiQxID0gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gUG9pbnRzKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludHMnO1xuXG5cdHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeSAhPT0gdW5kZWZpbmVkID8gZ2VvbWV0cnkgOiBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsICE9PSB1bmRlZmluZWQgPyBtYXRlcmlhbCA6IG5ldyBQb2ludHNNYXRlcmlhbCgpO1xuXG5cdHRoaXMudXBkYXRlTW9ycGhUYXJnZXRzKCk7XG5cbn1cblxuUG9pbnRzLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvaW50cyxcblxuXHRpc1BvaW50czogdHJ1ZSxcblxuXHRyYXljYXN0OiBmdW5jdGlvbiAoIHJheWNhc3RlciwgaW50ZXJzZWN0cyApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdFx0dmFyIG1hdHJpeFdvcmxkID0gdGhpcy5tYXRyaXhXb3JsZDtcblx0XHR2YXIgdGhyZXNob2xkID0gcmF5Y2FzdGVyLnBhcmFtcy5Qb2ludHMudGhyZXNob2xkO1xuXG5cdFx0Ly8gQ2hlY2tpbmcgYm91bmRpbmdTcGhlcmUgZGlzdGFuY2UgdG8gcmF5XG5cblx0XHRpZiAoIGdlb21ldHJ5LmJvdW5kaW5nU3BoZXJlID09PSBudWxsICkgZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblx0XHRfc3BoZXJlJDMuY29weSggZ2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgKTtcblx0XHRfc3BoZXJlJDMuYXBwbHlNYXRyaXg0KCBtYXRyaXhXb3JsZCApO1xuXHRcdF9zcGhlcmUkMy5yYWRpdXMgKz0gdGhyZXNob2xkO1xuXG5cdFx0aWYgKCByYXljYXN0ZXIucmF5LmludGVyc2VjdHNTcGhlcmUoIF9zcGhlcmUkMyApID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vXG5cblx0XHRfaW52ZXJzZU1hdHJpeCQyLmdldEludmVyc2UoIG1hdHJpeFdvcmxkICk7XG5cdFx0X3JheSQyLmNvcHkoIHJheWNhc3Rlci5yYXkgKS5hcHBseU1hdHJpeDQoIF9pbnZlcnNlTWF0cml4JDIgKTtcblxuXHRcdHZhciBsb2NhbFRocmVzaG9sZCA9IHRocmVzaG9sZCAvICggKCB0aGlzLnNjYWxlLnggKyB0aGlzLnNjYWxlLnkgKyB0aGlzLnNjYWxlLnogKSAvIDMgKTtcblx0XHR2YXIgbG9jYWxUaHJlc2hvbGRTcSA9IGxvY2FsVGhyZXNob2xkICogbG9jYWxUaHJlc2hvbGQ7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBpbmRleCA9IGdlb21ldHJ5LmluZGV4O1xuXHRcdFx0dmFyIGF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzO1xuXHRcdFx0dmFyIHBvc2l0aW9ucyA9IGF0dHJpYnV0ZXMucG9zaXRpb24uYXJyYXk7XG5cblx0XHRcdGlmICggaW5kZXggIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGluZGljZXMgPSBpbmRleC5hcnJheTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gaW5kaWNlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBhID0gaW5kaWNlc1sgaSBdO1xuXG5cdFx0XHRcdFx0X3Bvc2l0aW9uJDEuZnJvbUFycmF5KCBwb3NpdGlvbnMsIGEgKiAzICk7XG5cblx0XHRcdFx0XHR0ZXN0UG9pbnQoIF9wb3NpdGlvbiQxLCBhLCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0aGlzICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHBvc2l0aW9ucy5sZW5ndGggLyAzOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdF9wb3NpdGlvbiQxLmZyb21BcnJheSggcG9zaXRpb25zLCBpICogMyApO1xuXG5cdFx0XHRcdFx0dGVzdFBvaW50KCBfcG9zaXRpb24kMSwgaSwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdGhpcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIHZlcnRpY2VzID0gZ2VvbWV0cnkudmVydGljZXM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dGVzdFBvaW50KCB2ZXJ0aWNlc1sgaSBdLCBpLCBsb2NhbFRocmVzaG9sZFNxLCBtYXRyaXhXb3JsZCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCB0aGlzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdHVwZGF0ZU1vcnBoVGFyZ2V0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0XHR2YXIgbSwgbWwsIG5hbWU7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmlzQnVmZmVyR2VvbWV0cnkgKSB7XG5cblx0XHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXM7XG5cdFx0XHR2YXIga2V5cyA9IE9iamVjdC5rZXlzKCBtb3JwaEF0dHJpYnV0ZXMgKTtcblxuXHRcdFx0aWYgKCBrZXlzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdFx0dmFyIG1vcnBoQXR0cmlidXRlID0gbW9ycGhBdHRyaWJ1dGVzWyBrZXlzWyAwIF0gXTtcblxuXHRcdFx0XHRpZiAoIG1vcnBoQXR0cmlidXRlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aGlzLm1vcnBoVGFyZ2V0SW5mbHVlbmNlcyA9IFtdO1xuXHRcdFx0XHRcdHRoaXMubW9ycGhUYXJnZXREaWN0aW9uYXJ5ID0ge307XG5cblx0XHRcdFx0XHRmb3IgKCBtID0gMCwgbWwgPSBtb3JwaEF0dHJpYnV0ZS5sZW5ndGg7IG0gPCBtbDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0bmFtZSA9IG1vcnBoQXR0cmlidXRlWyBtIF0ubmFtZSB8fCBTdHJpbmcoIG0gKTtcblxuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldEluZmx1ZW5jZXMucHVzaCggMCApO1xuXHRcdFx0XHRcdFx0dGhpcy5tb3JwaFRhcmdldERpY3Rpb25hcnlbIG5hbWUgXSA9IG07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXRzID0gZ2VvbWV0cnkubW9ycGhUYXJnZXRzO1xuXG5cdFx0XHRpZiAoIG1vcnBoVGFyZ2V0cyAhPT0gdW5kZWZpbmVkICYmIG1vcnBoVGFyZ2V0cy5sZW5ndGggPiAwICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qb2ludHMudXBkYXRlTW9ycGhUYXJnZXRzKCkgZG9lcyBub3Qgc3VwcG9ydCBUSFJFRS5HZW9tZXRyeS4gVXNlIFRIUkVFLkJ1ZmZlckdlb21ldHJ5IGluc3RlYWQuJyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCB0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkuY29weSggdGhpcyApO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiB0ZXN0UG9pbnQoIHBvaW50LCBpbmRleCwgbG9jYWxUaHJlc2hvbGRTcSwgbWF0cml4V29ybGQsIHJheWNhc3RlciwgaW50ZXJzZWN0cywgb2JqZWN0ICkge1xuXG5cdHZhciByYXlQb2ludERpc3RhbmNlU3EgPSBfcmF5JDIuZGlzdGFuY2VTcVRvUG9pbnQoIHBvaW50ICk7XG5cblx0aWYgKCByYXlQb2ludERpc3RhbmNlU3EgPCBsb2NhbFRocmVzaG9sZFNxICkge1xuXG5cdFx0dmFyIGludGVyc2VjdFBvaW50ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdF9yYXkkMi5jbG9zZXN0UG9pbnRUb1BvaW50KCBwb2ludCwgaW50ZXJzZWN0UG9pbnQgKTtcblx0XHRpbnRlcnNlY3RQb2ludC5hcHBseU1hdHJpeDQoIG1hdHJpeFdvcmxkICk7XG5cblx0XHR2YXIgZGlzdGFuY2UgPSByYXljYXN0ZXIucmF5Lm9yaWdpbi5kaXN0YW5jZVRvKCBpbnRlcnNlY3RQb2ludCApO1xuXG5cdFx0aWYgKCBkaXN0YW5jZSA8IHJheWNhc3Rlci5uZWFyIHx8IGRpc3RhbmNlID4gcmF5Y2FzdGVyLmZhciApIHJldHVybjtcblxuXHRcdGludGVyc2VjdHMucHVzaCgge1xuXG5cdFx0XHRkaXN0YW5jZTogZGlzdGFuY2UsXG5cdFx0XHRkaXN0YW5jZVRvUmF5OiBNYXRoLnNxcnQoIHJheVBvaW50RGlzdGFuY2VTcSApLFxuXHRcdFx0cG9pbnQ6IGludGVyc2VjdFBvaW50LFxuXHRcdFx0aW5kZXg6IGluZGV4LFxuXHRcdFx0ZmFjZTogbnVsbCxcblx0XHRcdG9iamVjdDogb2JqZWN0XG5cblx0XHR9ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBWaWRlb1RleHR1cmUoIHZpZGVvLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKSB7XG5cblx0VGV4dHVyZS5jYWxsKCB0aGlzLCB2aWRlbywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5mb3JtYXQgPSBmb3JtYXQgIT09IHVuZGVmaW5lZCA/IGZvcm1hdCA6IFJHQkZvcm1hdDtcblxuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXHR0aGlzLm1hZ0ZpbHRlciA9IG1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWFnRmlsdGVyIDogTGluZWFyRmlsdGVyO1xuXG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzID0gZmFsc2U7XG5cbn1cblxuVmlkZW9UZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogVmlkZW9UZXh0dXJlLFxuXG5cdGlzVmlkZW9UZXh0dXJlOiB0cnVlLFxuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZpZGVvID0gdGhpcy5pbWFnZTtcblxuXHRcdGlmICggdmlkZW8ucmVhZHlTdGF0ZSA+PSB2aWRlby5IQVZFX0NVUlJFTlRfREFUQSApIHtcblxuXHRcdFx0dGhpcy5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDb21wcmVzc2VkVGV4dHVyZSggbWlwbWFwcywgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBlbmNvZGluZyApIHtcblxuXHRUZXh0dXJlLmNhbGwoIHRoaXMsIG51bGwsIG1hcHBpbmcsIHdyYXBTLCB3cmFwVCwgbWFnRmlsdGVyLCBtaW5GaWx0ZXIsIGZvcm1hdCwgdHlwZSwgYW5pc290cm9weSwgZW5jb2RpbmcgKTtcblxuXHR0aGlzLmltYWdlID0geyB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH07XG5cdHRoaXMubWlwbWFwcyA9IG1pcG1hcHM7XG5cblx0Ly8gbm8gZmxpcHBpbmcgZm9yIGN1YmUgdGV4dHVyZXNcblx0Ly8gKGFsc28gZmxpcHBpbmcgZG9lc24ndCB3b3JrIGZvciBjb21wcmVzc2VkIHRleHR1cmVzIClcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cblx0Ly8gY2FuJ3QgZ2VuZXJhdGUgbWlwbWFwcyBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlc1xuXHQvLyBtaXBzIG11c3QgYmUgZW1iZWRkZWQgaW4gRERTIGZpbGVzXG5cblx0dGhpcy5nZW5lcmF0ZU1pcG1hcHMgPSBmYWxzZTtcblxufVxuXG5Db21wcmVzc2VkVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuQ29tcHJlc3NlZFRleHR1cmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29tcHJlc3NlZFRleHR1cmU7XG5cbkNvbXByZXNzZWRUZXh0dXJlLnByb3RvdHlwZS5pc0NvbXByZXNzZWRUZXh0dXJlID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIENhbnZhc1RleHR1cmUoIGNhbnZhcywgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICkge1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgY2FudmFzLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBmb3JtYXQsIHR5cGUsIGFuaXNvdHJvcHkgKTtcblxuXHR0aGlzLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxufVxuXG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFRleHR1cmUucHJvdG90eXBlICk7XG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbnZhc1RleHR1cmU7XG5DYW52YXNUZXh0dXJlLnByb3RvdHlwZS5pc0NhbnZhc1RleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgTWF0dCBEZXNMYXVyaWVycyAvIEBtYXR0ZGVzbFxuICogQGF1dGhvciBhdGl4IC8gYXJ0aHVyc2lsYmVyLmRlXG4gKi9cblxuZnVuY3Rpb24gRGVwdGhUZXh0dXJlKCB3aWR0aCwgaGVpZ2h0LCB0eXBlLCBtYXBwaW5nLCB3cmFwUywgd3JhcFQsIG1hZ0ZpbHRlciwgbWluRmlsdGVyLCBhbmlzb3Ryb3B5LCBmb3JtYXQgKSB7XG5cblx0Zm9ybWF0ID0gZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBmb3JtYXQgOiBEZXB0aEZvcm1hdDtcblxuXHRpZiAoIGZvcm1hdCAhPT0gRGVwdGhGb3JtYXQgJiYgZm9ybWF0ICE9PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdEZXB0aFRleHR1cmUgZm9ybWF0IG11c3QgYmUgZWl0aGVyIFRIUkVFLkRlcHRoRm9ybWF0IG9yIFRIUkVFLkRlcHRoU3RlbmNpbEZvcm1hdCcgKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aEZvcm1hdCApIHR5cGUgPSBVbnNpZ25lZFNob3J0VHlwZTtcblx0aWYgKCB0eXBlID09PSB1bmRlZmluZWQgJiYgZm9ybWF0ID09PSBEZXB0aFN0ZW5jaWxGb3JtYXQgKSB0eXBlID0gVW5zaWduZWRJbnQyNDhUeXBlO1xuXG5cdFRleHR1cmUuY2FsbCggdGhpcywgbnVsbCwgbWFwcGluZywgd3JhcFMsIHdyYXBULCBtYWdGaWx0ZXIsIG1pbkZpbHRlciwgZm9ybWF0LCB0eXBlLCBhbmlzb3Ryb3B5ICk7XG5cblx0dGhpcy5pbWFnZSA9IHsgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xuXG5cdHRoaXMubWFnRmlsdGVyID0gbWFnRmlsdGVyICE9PSB1bmRlZmluZWQgPyBtYWdGaWx0ZXIgOiBOZWFyZXN0RmlsdGVyO1xuXHR0aGlzLm1pbkZpbHRlciA9IG1pbkZpbHRlciAhPT0gdW5kZWZpbmVkID8gbWluRmlsdGVyIDogTmVhcmVzdEZpbHRlcjtcblxuXHR0aGlzLmZsaXBZID0gZmFsc2U7XG5cdHRoaXMuZ2VuZXJhdGVNaXBtYXBzXHQ9IGZhbHNlO1xuXG59XG5cbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUZXh0dXJlLnByb3RvdHlwZSApO1xuRGVwdGhUZXh0dXJlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERlcHRoVGV4dHVyZTtcbkRlcHRoVGV4dHVyZS5wcm90b3R5cGUuaXNEZXB0aFRleHR1cmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIFdpcmVmcmFtZUdlb21ldHJ5KCBnZW9tZXRyeSApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1dpcmVmcmFtZUdlb21ldHJ5JztcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGosIGwsIG8sIG9sO1xuXHR2YXIgZWRnZSA9IFsgMCwgMCBdLCBlZGdlcyA9IHt9LCBlLCBlZGdlMSwgZWRnZTI7XG5cdHZhciBrZXksIGtleXMgPSBbICdhJywgJ2InLCAnYycgXTtcblx0dmFyIHZlcnRleDtcblxuXHQvLyBkaWZmZXJlbnQgbG9naWMgZm9yIEdlb21ldHJ5IGFuZCBCdWZmZXJHZW9tZXRyeVxuXG5cdGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNHZW9tZXRyeSApIHtcblxuXHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVkZ2VzIHdpdGhvdXQgZHVwbGljYXRlc1xuXG5cdFx0dmFyIGZhY2VzID0gZ2VvbWV0cnkuZmFjZXM7XG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IGZhY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAzOyBqICsrICkge1xuXG5cdFx0XHRcdGVkZ2UxID0gZmFjZVsga2V5c1sgaiBdIF07XG5cdFx0XHRcdGVkZ2UyID0gZmFjZVsga2V5c1sgKCBqICsgMSApICUgMyBdIF07XG5cdFx0XHRcdGVkZ2VbIDAgXSA9IE1hdGgubWluKCBlZGdlMSwgZWRnZTIgKTsgLy8gc29ydGluZyBwcmV2ZW50cyBkdXBsaWNhdGVzXG5cdFx0XHRcdGVkZ2VbIDEgXSA9IE1hdGgubWF4KCBlZGdlMSwgZWRnZTIgKTtcblxuXHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0aWYgKCBlZGdlc1sga2V5IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGVkZ2VzWyBrZXkgXSA9IHsgaW5kZXgxOiBlZGdlWyAwIF0sIGluZGV4MjogZWRnZVsgMSBdIH07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0Zm9yICgga2V5IGluIGVkZ2VzICkge1xuXG5cdFx0XHRlID0gZWRnZXNbIGtleSBdO1xuXG5cdFx0XHR2ZXJ0ZXggPSBnZW9tZXRyeS52ZXJ0aWNlc1sgZS5pbmRleDEgXTtcblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0dmVydGV4ID0gZ2VvbWV0cnkudmVydGljZXNbIGUuaW5kZXgyIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIGlmICggZ2VvbWV0cnkgJiYgZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdHZhciBwb3NpdGlvbiwgaW5kaWNlcywgZ3JvdXBzO1xuXHRcdHZhciBncm91cCwgc3RhcnQsIGNvdW50O1xuXHRcdHZhciBpbmRleDEsIGluZGV4MjtcblxuXHRcdHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRpZiAoIGdlb21ldHJ5LmluZGV4ICE9PSBudWxsICkge1xuXG5cdFx0XHQvLyBpbmRleGVkIEJ1ZmZlckdlb21ldHJ5XG5cblx0XHRcdHBvc2l0aW9uID0gZ2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbjtcblx0XHRcdGluZGljZXMgPSBnZW9tZXRyeS5pbmRleDtcblx0XHRcdGdyb3VwcyA9IGdlb21ldHJ5Lmdyb3VwcztcblxuXHRcdFx0aWYgKCBncm91cHMubGVuZ3RoID09PSAwICkge1xuXG5cdFx0XHRcdGdyb3VwcyA9IFsgeyBzdGFydDogMCwgY291bnQ6IGluZGljZXMuY291bnQsIG1hdGVyaWFsSW5kZXg6IDAgfSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGNyZWF0ZSBhIGRhdGEgc3RydWN0dXJlIHRoYXQgY29udGFpbnMgYWxsIGVnZXMgd2l0aG91dCBkdXBsaWNhdGVzXG5cblx0XHRcdGZvciAoIG8gPSAwLCBvbCA9IGdyb3Vwcy5sZW5ndGg7IG8gPCBvbDsgKysgbyApIHtcblxuXHRcdFx0XHRncm91cCA9IGdyb3Vwc1sgbyBdO1xuXG5cdFx0XHRcdHN0YXJ0ID0gZ3JvdXAuc3RhcnQ7XG5cdFx0XHRcdGNvdW50ID0gZ3JvdXAuY291bnQ7XG5cblx0XHRcdFx0Zm9yICggaSA9IHN0YXJ0LCBsID0gKCBzdGFydCArIGNvdW50ICk7IGkgPCBsOyBpICs9IDMgKSB7XG5cblx0XHRcdFx0XHRmb3IgKCBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdGVkZ2UxID0gaW5kaWNlcy5nZXRYKCBpICsgaiApO1xuXHRcdFx0XHRcdFx0ZWRnZTIgPSBpbmRpY2VzLmdldFgoIGkgKyAoIGogKyAxICkgJSAzICk7XG5cdFx0XHRcdFx0XHRlZGdlWyAwIF0gPSBNYXRoLm1pbiggZWRnZTEsIGVkZ2UyICk7IC8vIHNvcnRpbmcgcHJldmVudHMgZHVwbGljYXRlc1xuXHRcdFx0XHRcdFx0ZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApO1xuXG5cdFx0XHRcdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdFx0XHRcdGlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0ZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0gfTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdFx0XHRmb3IgKCBrZXkgaW4gZWRnZXMgKSB7XG5cblx0XHRcdFx0ZSA9IGVkZ2VzWyBrZXkgXTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgxICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0XHR2ZXJ0ZXguZnJvbUJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb24sIGUuaW5kZXgyICk7XG5cdFx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gbm9uLWluZGV4ZWQgQnVmZmVyR2VvbWV0cnlcblxuXHRcdFx0cG9zaXRpb24gPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9ICggcG9zaXRpb24uY291bnQgLyAzICk7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdGZvciAoIGogPSAwOyBqIDwgMzsgaiArKyApIHtcblxuXHRcdFx0XHRcdC8vIHRocmVlIGVkZ2VzIHBlciB0cmlhbmdsZSwgYW4gZWRnZSBpcyByZXByZXNlbnRlZCBhcyAoaW5kZXgxLCBpbmRleDIpXG5cdFx0XHRcdFx0Ly8gZS5nLiB0aGUgZmlyc3QgdHJpYW5nbGUgaGFzIHRoZSBmb2xsb3dpbmcgZWRnZXM6ICgwLDEpLCgxLDIpLCgyLDApXG5cblx0XHRcdFx0XHRpbmRleDEgPSAzICogaSArIGo7XG5cdFx0XHRcdFx0dmVydGV4LmZyb21CdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9uLCBpbmRleDEgKTtcblx0XHRcdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdFx0XHRpbmRleDIgPSAzICogaSArICggKCBqICsgMSApICUgMyApO1xuXHRcdFx0XHRcdHZlcnRleC5mcm9tQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgaW5kZXgyICk7XG5cdFx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG59XG5cbldpcmVmcmFtZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuV2lyZWZyYW1lR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2lyZWZyYW1lR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cHM6Ly9naXRodWIuY29tL3p6ODVcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICogUGFyYW1ldHJpYyBTdXJmYWNlcyBHZW9tZXRyeVxuICogYmFzZWQgb24gdGhlIGJyaWxsaWFudCBhcnRpY2xlIGJ5IEBwcmlkZW91dCBodHRwczovL3ByaWRlb3V0Lm5ldC9ibG9nL29sZC9ibG9nL2luZGV4Lmh0bWxAcD00NC5odG1sXG4gKi9cblxuLy8gUGFyYW1ldHJpY0dlb21ldHJ5XG5cbmZ1bmN0aW9uIFBhcmFtZXRyaWNHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXJhbWV0cmljR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRmdW5jOiBmdW5jLFxuXHRcdHNsaWNlczogc2xpY2VzLFxuXHRcdHN0YWNrczogc3RhY2tzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkoIGZ1bmMsIHNsaWNlcywgc3RhY2tzICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuUGFyYW1ldHJpY0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBhcmFtZXRyaWNHZW9tZXRyeTtcblxuLy8gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSggZnVuYywgc2xpY2VzLCBzdGFja3MgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRmdW5jOiBmdW5jLFxuXHRcdHNsaWNlczogc2xpY2VzLFxuXHRcdHN0YWNrczogc3RhY2tzXG5cdH07XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0dmFyIEVQUyA9IDAuMDAwMDE7XG5cblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHAwID0gbmV3IFZlY3RvcjMoKSwgcDEgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgcHUgPSBuZXcgVmVjdG9yMygpLCBwdiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGksIGo7XG5cblx0aWYgKCBmdW5jLmxlbmd0aCA8IDMgKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuUGFyYW1ldHJpY0dlb21ldHJ5OiBGdW5jdGlvbiBtdXN0IG5vdyBtb2RpZnkgYSBWZWN0b3IzIGFzIHRoaXJkIHBhcmFtZXRlci4nICk7XG5cblx0fVxuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHR2YXIgc2xpY2VDb3VudCA9IHNsaWNlcyArIDE7XG5cblx0Zm9yICggaSA9IDA7IGkgPD0gc3RhY2tzOyBpICsrICkge1xuXG5cdFx0dmFyIHYgPSBpIC8gc3RhY2tzO1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPD0gc2xpY2VzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGogLyBzbGljZXM7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRmdW5jKCB1LCB2LCBwMCApO1xuXHRcdFx0dmVydGljZXMucHVzaCggcDAueCwgcDAueSwgcDAueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0Ly8gYXBwcm94aW1hdGUgdGFuZ2VudCB2ZWN0b3JzIHZpYSBmaW5pdGUgZGlmZmVyZW5jZXNcblxuXHRcdFx0aWYgKCB1IC0gRVBTID49IDAgKSB7XG5cblx0XHRcdFx0ZnVuYyggdSAtIEVQUywgdiwgcDEgKTtcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyggcDAsIHAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZnVuYyggdSArIEVQUywgdiwgcDEgKTtcblx0XHRcdFx0cHUuc3ViVmVjdG9ycyggcDEsIHAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2IC0gRVBTID49IDAgKSB7XG5cblx0XHRcdFx0ZnVuYyggdSwgdiAtIEVQUywgcDEgKTtcblx0XHRcdFx0cHYuc3ViVmVjdG9ycyggcDAsIHAxICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZnVuYyggdSwgdiArIEVQUywgcDEgKTtcblx0XHRcdFx0cHYuc3ViVmVjdG9ycyggcDEsIHAwICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gY3Jvc3MgcHJvZHVjdCBvZiB0YW5nZW50IHZlY3RvcnMgcmV0dXJucyBzdXJmYWNlIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwuY3Jvc3NWZWN0b3JzKCBwdSwgcHYgKS5ub3JtYWxpemUoKTtcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggdSwgdiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0Zm9yICggaSA9IDA7IGkgPCBzdGFja3M7IGkgKysgKSB7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8IHNsaWNlczsgaiArKyApIHtcblxuXHRcdFx0dmFyIGEgPSBpICogc2xpY2VDb3VudCArIGo7XG5cdFx0XHR2YXIgYiA9IGkgKiBzbGljZUNvdW50ICsgaiArIDE7XG5cdFx0XHR2YXIgYyA9ICggaSArIDEgKSAqIHNsaWNlQ291bnQgKyBqICsgMTtcblx0XHRcdHZhciBkID0gKCBpICsgMSApICogc2xpY2VDb3VudCArIGo7XG5cblx0XHRcdC8vIGZhY2VzIG9uZSBhbmQgdHdvXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5QYXJhbWV0cmljQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGFyYW1ldHJpY0J1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgY2xvY2t3b3JrZ2VlayAvIGh0dHBzOi8vZ2l0aHViLmNvbS9jbG9ja3dvcmtnZWVrXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gUG9seWhlZHJvbkdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBvbHloZWRyb25HZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxuXHRcdGluZGljZXM6IGluZGljZXMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuUG9seWhlZHJvbkdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25HZW9tZXRyeTtcblxuLy8gUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeSggdmVydGljZXMsIGluZGljZXMsIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0dmVydGljZXM6IHZlcnRpY2VzLFxuXHRcdGluZGljZXM6IGluZGljZXMsXG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTtcblx0ZGV0YWlsID0gZGV0YWlsIHx8IDA7XG5cblx0Ly8gZGVmYXVsdCBidWZmZXIgZGF0YVxuXG5cdHZhciB2ZXJ0ZXhCdWZmZXIgPSBbXTtcblx0dmFyIHV2QnVmZmVyID0gW107XG5cblx0Ly8gdGhlIHN1YmRpdmlzaW9uIGNyZWF0ZXMgdGhlIHZlcnRleCBidWZmZXIgZGF0YVxuXG5cdHN1YmRpdmlkZSggZGV0YWlsICk7XG5cblx0Ly8gYWxsIHZlcnRpY2VzIHNob3VsZCBsaWUgb24gYSBjb25jZXB0dWFsIHNwaGVyZSB3aXRoIGEgZ2l2ZW4gcmFkaXVzXG5cblx0YXBwbHlSYWRpdXMoIHJhZGl1cyApO1xuXG5cdC8vIGZpbmFsbHksIGNyZWF0ZSB0aGUgdXYgZGF0YVxuXG5cdGdlbmVyYXRlVVZzKCk7XG5cblx0Ly8gYnVpbGQgbm9uLWluZGV4ZWQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlciwgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRleEJ1ZmZlci5zbGljZSgpLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dkJ1ZmZlciwgMiApICk7XG5cblx0aWYgKCBkZXRhaWwgPT09IDAgKSB7XG5cblx0XHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7IC8vIGZsYXQgbm9ybWFsc1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLm5vcm1hbGl6ZU5vcm1hbHMoKTsgLy8gc21vb3RoIG5vcm1hbHNcblxuXHR9XG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIHN1YmRpdmlkZSggZGV0YWlsICkge1xuXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBiID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYyA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHQvLyBpdGVyYXRlIG92ZXIgYWxsIGZhY2VzIGFuZCBhcHBseSBhIHN1YmRpdmlzb24gd2l0aCB0aGUgZ2l2ZW4gZGV0YWlsIHZhbHVlXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHQvLyBnZXQgdGhlIHZlcnRpY2VzIG9mIHRoZSBmYWNlXG5cblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAwIF0sIGEgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAxIF0sIGIgKTtcblx0XHRcdGdldFZlcnRleEJ5SW5kZXgoIGluZGljZXNbIGkgKyAyIF0sIGMgKTtcblxuXHRcdFx0Ly8gcGVyZm9ybSBzdWJkaXZpc2lvblxuXG5cdFx0XHRzdWJkaXZpZGVGYWNlKCBhLCBiLCBjLCBkZXRhaWwgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gc3ViZGl2aWRlRmFjZSggYSwgYiwgYywgZGV0YWlsICkge1xuXG5cdFx0dmFyIGNvbHMgPSBNYXRoLnBvdyggMiwgZGV0YWlsICk7XG5cblx0XHQvLyB3ZSB1c2UgdGhpcyBtdWx0aWRpbWVuc2lvbmFsIGFycmF5IGFzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIGNyZWF0aW5nIHRoZSBzdWJkaXZpc2lvblxuXG5cdFx0dmFyIHYgPSBbXTtcblxuXHRcdHZhciBpLCBqO1xuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgdmVydGljZXMgZm9yIHRoaXMgc3ViZGl2aXNpb25cblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IGNvbHM7IGkgKysgKSB7XG5cblx0XHRcdHZbIGkgXSA9IFtdO1xuXG5cdFx0XHR2YXIgYWogPSBhLmNsb25lKCkubGVycCggYywgaSAvIGNvbHMgKTtcblx0XHRcdHZhciBiaiA9IGIuY2xvbmUoKS5sZXJwKCBjLCBpIC8gY29scyApO1xuXG5cdFx0XHR2YXIgcm93cyA9IGNvbHMgLSBpO1xuXG5cdFx0XHRmb3IgKCBqID0gMDsgaiA8PSByb3dzOyBqICsrICkge1xuXG5cdFx0XHRcdGlmICggaiA9PT0gMCAmJiBpID09PSBjb2xzICkge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhajtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dlsgaSBdWyBqIF0gPSBhai5jbG9uZSgpLmxlcnAoIGJqLCBqIC8gcm93cyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gY29uc3RydWN0IGFsbCBvZiB0aGUgZmFjZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgY29sczsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPCAyICogKCBjb2xzIC0gaSApIC0gMTsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgayA9IE1hdGguZmxvb3IoIGogLyAyICk7XG5cblx0XHRcdFx0aWYgKCBqICUgMiA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayBdICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgXVsgayArIDEgXSApO1xuXHRcdFx0XHRcdHB1c2hWZXJ0ZXgoIHZbIGkgKyAxIF1bIGsgKyAxIF0gKTtcblx0XHRcdFx0XHRwdXNoVmVydGV4KCB2WyBpICsgMSBdWyBrIF0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gYXBwbHlSYWRpdXMoIHJhZGl1cyApIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gaXRlcmF0ZSBvdmVyIHRoZSBlbnRpcmUgYnVmZmVyIGFuZCBhcHBseSB0aGUgcmFkaXVzIHRvIGVhY2ggdmVydGV4XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdHZlcnRleC54ID0gdmVydGV4QnVmZmVyWyBpICsgMCBdO1xuXHRcdFx0dmVydGV4LnkgPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF07XG5cdFx0XHR2ZXJ0ZXgueiA9IHZlcnRleEJ1ZmZlclsgaSArIDIgXTtcblxuXHRcdFx0dmVydGV4Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKCByYWRpdXMgKTtcblxuXHRcdFx0dmVydGV4QnVmZmVyWyBpICsgMCBdID0gdmVydGV4Lng7XG5cdFx0XHR2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0gPSB2ZXJ0ZXgueTtcblx0XHRcdHZlcnRleEJ1ZmZlclsgaSArIDIgXSA9IHZlcnRleC56O1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdmVydGV4QnVmZmVyLmxlbmd0aDsgaSArPSAzICkge1xuXG5cdFx0XHR2ZXJ0ZXgueCA9IHZlcnRleEJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZlcnRleC55ID0gdmVydGV4QnVmZmVyWyBpICsgMSBdO1xuXHRcdFx0dmVydGV4LnogPSB2ZXJ0ZXhCdWZmZXJbIGkgKyAyIF07XG5cblx0XHRcdHZhciB1ID0gYXppbXV0aCggdmVydGV4ICkgLyAyIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHZhciB2ID0gaW5jbGluYXRpb24oIHZlcnRleCApIC8gTWF0aC5QSSArIDAuNTtcblx0XHRcdHV2QnVmZmVyLnB1c2goIHUsIDEgLSB2ICk7XG5cblx0XHR9XG5cblx0XHRjb3JyZWN0VVZzKCk7XG5cblx0XHRjb3JyZWN0U2VhbSgpO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0U2VhbSgpIHtcblxuXHRcdC8vIGhhbmRsZSBjYXNlIHdoZW4gZmFjZSBzdHJhZGRsZXMgdGhlIHNlYW0sIHNlZSAjMzI2OVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXZCdWZmZXIubGVuZ3RoOyBpICs9IDYgKSB7XG5cblx0XHRcdC8vIHV2IGRhdGEgb2YgYSBzaW5nbGUgZmFjZVxuXG5cdFx0XHR2YXIgeDAgPSB1dkJ1ZmZlclsgaSArIDAgXTtcblx0XHRcdHZhciB4MSA9IHV2QnVmZmVyWyBpICsgMiBdO1xuXHRcdFx0dmFyIHgyID0gdXZCdWZmZXJbIGkgKyA0IF07XG5cblx0XHRcdHZhciBtYXggPSBNYXRoLm1heCggeDAsIHgxLCB4MiApO1xuXHRcdFx0dmFyIG1pbiA9IE1hdGgubWluKCB4MCwgeDEsIHgyICk7XG5cblx0XHRcdC8vIDAuOSBpcyBzb21ld2hhdCBhcmJpdHJhcnlcblxuXHRcdFx0aWYgKCBtYXggPiAwLjkgJiYgbWluIDwgMC4xICkge1xuXG5cdFx0XHRcdGlmICggeDAgPCAwLjIgKSB1dkJ1ZmZlclsgaSArIDAgXSArPSAxO1xuXHRcdFx0XHRpZiAoIHgxIDwgMC4yICkgdXZCdWZmZXJbIGkgKyAyIF0gKz0gMTtcblx0XHRcdFx0aWYgKCB4MiA8IDAuMiApIHV2QnVmZmVyWyBpICsgNCBdICs9IDE7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9XG5cblx0ZnVuY3Rpb24gcHVzaFZlcnRleCggdmVydGV4ICkge1xuXG5cdFx0dmVydGV4QnVmZmVyLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VmVydGV4QnlJbmRleCggaW5kZXgsIHZlcnRleCApIHtcblxuXHRcdHZhciBzdHJpZGUgPSBpbmRleCAqIDM7XG5cblx0XHR2ZXJ0ZXgueCA9IHZlcnRpY2VzWyBzdHJpZGUgKyAwIF07XG5cdFx0dmVydGV4LnkgPSB2ZXJ0aWNlc1sgc3RyaWRlICsgMSBdO1xuXHRcdHZlcnRleC56ID0gdmVydGljZXNbIHN0cmlkZSArIDIgXTtcblxuXHR9XG5cblx0ZnVuY3Rpb24gY29ycmVjdFVWcygpIHtcblxuXHRcdHZhciBhID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgYiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIGMgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGNlbnRyb2lkID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciB1dkEgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkIgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB1dkMgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBqID0gMDsgaSA8IHZlcnRleEJ1ZmZlci5sZW5ndGg7IGkgKz0gOSwgaiArPSA2ICkge1xuXG5cdFx0XHRhLnNldCggdmVydGV4QnVmZmVyWyBpICsgMCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyAxIF0sIHZlcnRleEJ1ZmZlclsgaSArIDIgXSApO1xuXHRcdFx0Yi5zZXQoIHZlcnRleEJ1ZmZlclsgaSArIDMgXSwgdmVydGV4QnVmZmVyWyBpICsgNCBdLCB2ZXJ0ZXhCdWZmZXJbIGkgKyA1IF0gKTtcblx0XHRcdGMuc2V0KCB2ZXJ0ZXhCdWZmZXJbIGkgKyA2IF0sIHZlcnRleEJ1ZmZlclsgaSArIDcgXSwgdmVydGV4QnVmZmVyWyBpICsgOCBdICk7XG5cblx0XHRcdHV2QS5zZXQoIHV2QnVmZmVyWyBqICsgMCBdLCB1dkJ1ZmZlclsgaiArIDEgXSApO1xuXHRcdFx0dXZCLnNldCggdXZCdWZmZXJbIGogKyAyIF0sIHV2QnVmZmVyWyBqICsgMyBdICk7XG5cdFx0XHR1dkMuc2V0KCB1dkJ1ZmZlclsgaiArIDQgXSwgdXZCdWZmZXJbIGogKyA1IF0gKTtcblxuXHRcdFx0Y2VudHJvaWQuY29weSggYSApLmFkZCggYiApLmFkZCggYyApLmRpdmlkZVNjYWxhciggMyApO1xuXG5cdFx0XHR2YXIgYXppID0gYXppbXV0aCggY2VudHJvaWQgKTtcblxuXHRcdFx0Y29ycmVjdFVWKCB1dkEsIGogKyAwLCBhLCBhemkgKTtcblx0XHRcdGNvcnJlY3RVViggdXZCLCBqICsgMiwgYiwgYXppICk7XG5cdFx0XHRjb3JyZWN0VVYoIHV2QywgaiArIDQsIGMsIGF6aSApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBjb3JyZWN0VVYoIHV2LCBzdHJpZGUsIHZlY3RvciwgYXppbXV0aCApIHtcblxuXHRcdGlmICggKCBhemltdXRoIDwgMCApICYmICggdXYueCA9PT0gMSApICkge1xuXG5cdFx0XHR1dkJ1ZmZlclsgc3RyaWRlIF0gPSB1di54IC0gMTtcblxuXHRcdH1cblxuXHRcdGlmICggKCB2ZWN0b3IueCA9PT0gMCApICYmICggdmVjdG9yLnogPT09IDAgKSApIHtcblxuXHRcdFx0dXZCdWZmZXJbIHN0cmlkZSBdID0gYXppbXV0aCAvIDIgLyBNYXRoLlBJICsgMC41O1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBBbmdsZSBhcm91bmQgdGhlIFkgYXhpcywgY291bnRlci1jbG9ja3dpc2Ugd2hlbiBsb29raW5nIGZyb20gYWJvdmUuXG5cblx0ZnVuY3Rpb24gYXppbXV0aCggdmVjdG9yICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYXRhbjIoIHZlY3Rvci56LCAtIHZlY3Rvci54ICk7XG5cblx0fVxuXG5cblx0Ly8gQW5nbGUgYWJvdmUgdGhlIFhaIHBsYW5lLlxuXG5cdGZ1bmN0aW9uIGluY2xpbmF0aW9uKCB2ZWN0b3IgKSB7XG5cblx0XHRyZXR1cm4gTWF0aC5hdGFuMiggLSB2ZWN0b3IueSwgTWF0aC5zcXJ0KCAoIHZlY3Rvci54ICogdmVjdG9yLnggKSArICggdmVjdG9yLnogKiB2ZWN0b3IueiApICkgKTtcblxuXHR9XG5cbn1cblxuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRldHJhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gVGV0cmFoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVGV0cmFoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25HZW9tZXRyeTtcblxuLy8gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMSwgMSwgXHQtIDEsIC0gMSwgMSwgXHQtIDEsIDEsIC0gMSwgXHQxLCAtIDEsIC0gMVxuXHRdO1xuXG5cdHZhciBpbmRpY2VzID0gW1xuXHRcdDIsIDEsIDAsIFx0MCwgMywgMixcdDEsIDMsIDAsXHQyLCAzLCAxXG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5UZXRyYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIE9jdGFoZWRyb25HZW9tZXRyeVxuXG5mdW5jdGlvbiBPY3RhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5PY3RhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT2N0YWhlZHJvbkdlb21ldHJ5O1xuXG4vLyBPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdmVydGljZXMgPSBbXG5cdFx0MSwgMCwgMCwgXHQtIDEsIDAsIDAsXHQwLCAxLCAwLFxuXHRcdDAsIC0gMSwgMCwgXHQwLCAwLCAxLFx0MCwgMCwgLSAxXG5cdF07XG5cblx0dmFyIGluZGljZXMgPSBbXG5cdFx0MCwgMiwgNCxcdDAsIDQsIDMsXHQwLCAzLCA1LFxuXHRcdDAsIDUsIDIsXHQxLCAyLCA1LFx0MSwgNSwgMyxcblx0XHQxLCAzLCA0LFx0MSwgNCwgMlxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxufVxuXG5PY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHRpbW90aHlwcmF0bGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL3RpbW90aHlwcmF0bGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIEljb3NhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gSWNvc2FoZWRyb25HZW9tZXRyeSggcmFkaXVzLCBkZXRhaWwgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJY29zYWhlZHJvbkdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0ZGV0YWlsOiBkZXRhaWxcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuSWNvc2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkljb3NhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSWNvc2FoZWRyb25HZW9tZXRyeTtcblxuLy8gSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIGRldGFpbCApIHtcblxuXHR2YXIgdCA9ICggMSArIE1hdGguc3FydCggNSApICkgLyAyO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtcblx0XHQtIDEsIHQsIDAsIFx0MSwgdCwgMCwgXHQtIDEsIC0gdCwgMCwgXHQxLCAtIHQsIDAsXG5cdFx0IDAsIC0gMSwgdCwgXHQwLCAxLCB0LFx0MCwgLSAxLCAtIHQsIFx0MCwgMSwgLSB0LFxuXHRcdCB0LCAwLCAtIDEsIFx0dCwgMCwgMSwgXHQtIHQsIDAsIC0gMSwgXHQtIHQsIDAsIDFcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQgMCwgMTEsIDUsIFx0MCwgNSwgMSwgXHQwLCAxLCA3LCBcdDAsIDcsIDEwLCBcdDAsIDEwLCAxMSxcblx0XHQgMSwgNSwgOSwgXHQ1LCAxMSwgNCxcdDExLCAxMCwgMixcdDEwLCA3LCA2LFx0NywgMSwgOCxcblx0XHQgMywgOSwgNCwgXHQzLCA0LCAyLFx0MywgMiwgNixcdDMsIDYsIDgsXHQzLCA4LCA5LFxuXHRcdCA0LCA5LCA1LCBcdDIsIDQsIDExLFx0NiwgMiwgMTAsXHQ4LCA2LCA3LFx0OSwgOCwgMVxuXHRdO1xuXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCB2ZXJ0aWNlcywgaW5kaWNlcywgcmFkaXVzLCBkZXRhaWwgKTtcblxuXHR0aGlzLnR5cGUgPSAnSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBBYmUgUGF6b3MgLyBodHRwczovL2hhbW9pZC5jb21cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gRG9kZWNhaGVkcm9uR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRG9kZWNhaGVkcm9uR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRkZXRhaWw6IGRldGFpbFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuRG9kZWNhaGVkcm9uR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5Eb2RlY2FoZWRyb25HZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEb2RlY2FoZWRyb25HZW9tZXRyeTtcblxuLy8gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgZGV0YWlsICkge1xuXG5cdHZhciB0ID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG5cdHZhciByID0gMSAvIHQ7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXG5cdFx0Ly8gKMKxMSwgwrExLCDCsTEpXG5cdFx0LSAxLCAtIDEsIC0gMSxcdC0gMSwgLSAxLCAxLFxuXHRcdC0gMSwgMSwgLSAxLCAtIDEsIDEsIDEsXG5cdFx0MSwgLSAxLCAtIDEsIDEsIC0gMSwgMSxcblx0XHQxLCAxLCAtIDEsIDEsIDEsIDEsXG5cblx0XHQvLyAoMCwgwrExL8+GLCDCsc+GKVxuXHRcdCAwLCAtIHIsIC0gdCwgMCwgLSByLCB0LFxuXHRcdCAwLCByLCAtIHQsIDAsIHIsIHQsXG5cblx0XHQvLyAowrExL8+GLCDCsc+GLCAwKVxuXHRcdC0gciwgLSB0LCAwLCAtIHIsIHQsIDAsXG5cdFx0IHIsIC0gdCwgMCwgciwgdCwgMCxcblxuXHRcdC8vICjCsc+GLCAwLCDCsTEvz4YpXG5cdFx0LSB0LCAwLCAtIHIsIHQsIDAsIC0gcixcblx0XHQtIHQsIDAsIHIsIHQsIDAsIHJcblx0XTtcblxuXHR2YXIgaW5kaWNlcyA9IFtcblx0XHQzLCAxMSwgNywgXHQzLCA3LCAxNSwgXHQzLCAxNSwgMTMsXG5cdFx0NywgMTksIDE3LCBcdDcsIDE3LCA2LCBcdDcsIDYsIDE1LFxuXHRcdDE3LCA0LCA4LCBcdDE3LCA4LCAxMCwgXHQxNywgMTAsIDYsXG5cdFx0OCwgMCwgMTYsIFx0OCwgMTYsIDIsIFx0OCwgMiwgMTAsXG5cdFx0MCwgMTIsIDEsIFx0MCwgMSwgMTgsIFx0MCwgMTgsIDE2LFxuXHRcdDYsIDEwLCAyLCBcdDYsIDIsIDEzLCBcdDYsIDEzLCAxNSxcblx0XHQyLCAxNiwgMTgsIFx0MiwgMTgsIDMsIFx0MiwgMywgMTMsXG5cdFx0MTgsIDEsIDksIFx0MTgsIDksIDExLCBcdDE4LCAxMSwgMyxcblx0XHQ0LCAxNCwgMTIsIFx0NCwgMTIsIDAsIFx0NCwgMCwgOCxcblx0XHQxMSwgOSwgNSwgXHQxMSwgNSwgMTksIFx0MTEsIDE5LCA3LFxuXHRcdDE5LCA1LCAxNCwgXHQxOSwgMTQsIDQsIFx0MTksIDQsIDE3LFxuXHRcdDEsIDEyLCAxNCwgXHQxLCAxNCwgNSwgXHQxLCA1LCA5XG5cdF07XG5cblx0UG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIHZlcnRpY2VzLCBpbmRpY2VzLCByYWRpdXMsIGRldGFpbCApO1xuXG5cdHRoaXMudHlwZSA9ICdEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdGRldGFpbDogZGV0YWlsXG5cdH07XG5cbn1cblxuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRG9kZWNhaGVkcm9uQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGUgLyBodHRwczovL2dpdGh1Yi5jb20vb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cHM6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBtaW5pbmdvbGQgLyBodHRwczovL2dpdGh1Yi5jb20vbWluaW5nb2xkXG4gKiBAYXV0aG9yIGpvbm9icjEgLyBodHRwczovL2dpdGh1Yi5jb20vam9ub2JyMVxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKi9cblxuLy8gVHViZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFR1YmVHZW9tZXRyeSggcGF0aCwgdHVidWxhclNlZ21lbnRzLCByYWRpdXMsIHJhZGlhbFNlZ21lbnRzLCBjbG9zZWQsIHRhcGVyICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHRpZiAoIHRhcGVyICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5UdWJlR2VvbWV0cnk6IHRhcGVyIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdHZhciBidWZmZXJHZW9tZXRyeSA9IG5ldyBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICk7XG5cblx0Ly8gZXhwb3NlIGludGVybmFsc1xuXG5cdHRoaXMudGFuZ2VudHMgPSBidWZmZXJHZW9tZXRyeS50YW5nZW50cztcblx0dGhpcy5ub3JtYWxzID0gYnVmZmVyR2VvbWV0cnkubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBidWZmZXJHZW9tZXRyeS5iaW5vcm1hbHM7XG5cblx0Ly8gY3JlYXRlIGdlb21ldHJ5XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIGJ1ZmZlckdlb21ldHJ5ICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblR1YmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblR1YmVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUdWJlR2VvbWV0cnk7XG5cbi8vIFR1YmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUdWJlQnVmZmVyR2VvbWV0cnkoIHBhdGgsIHR1YnVsYXJTZWdtZW50cywgcmFkaXVzLCByYWRpYWxTZWdtZW50cywgY2xvc2VkICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVHViZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cGF0aDogcGF0aCxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0Y2xvc2VkOiBjbG9zZWRcblx0fTtcblxuXHR0dWJ1bGFyU2VnbWVudHMgPSB0dWJ1bGFyU2VnbWVudHMgfHwgNjQ7XG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRyYWRpYWxTZWdtZW50cyA9IHJhZGlhbFNlZ21lbnRzIHx8IDg7XG5cdGNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcblxuXHR2YXIgZnJhbWVzID0gcGF0aC5jb21wdXRlRnJlbmV0RnJhbWVzKCB0dWJ1bGFyU2VnbWVudHMsIGNsb3NlZCApO1xuXG5cdC8vIGV4cG9zZSBpbnRlcm5hbHNcblxuXHR0aGlzLnRhbmdlbnRzID0gZnJhbWVzLnRhbmdlbnRzO1xuXHR0aGlzLm5vcm1hbHMgPSBmcmFtZXMubm9ybWFscztcblx0dGhpcy5iaW5vcm1hbHMgPSBmcmFtZXMuYmlub3JtYWxzO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBQID0gbmV3IFZlY3RvcjMoKTtcblxuXHR2YXIgaSwgajtcblxuXHQvLyBidWZmZXJcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXG5cdC8vIGNyZWF0ZSBidWZmZXIgZGF0YVxuXG5cdGdlbmVyYXRlQnVmZmVyRGF0YSgpO1xuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyBmdW5jdGlvbnNcblxuXHRmdW5jdGlvbiBnZW5lcmF0ZUJ1ZmZlckRhdGEoKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Z2VuZXJhdGVTZWdtZW50KCBpICk7XG5cblx0XHR9XG5cblx0XHQvLyBpZiB0aGUgZ2VvbWV0cnkgaXMgbm90IGNsb3NlZCwgZ2VuZXJhdGUgdGhlIGxhc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzXG5cdFx0Ly8gYXQgdGhlIHJlZ3VsYXIgcG9zaXRpb24gb24gdGhlIGdpdmVuIHBhdGhcblx0XHQvL1xuXHRcdC8vIGlmIHRoZSBnZW9tZXRyeSBpcyBjbG9zZWQsIGR1cGxpY2F0ZSB0aGUgZmlyc3Qgcm93IG9mIHZlcnRpY2VzIGFuZCBub3JtYWxzICh1dnMgd2lsbCBkaWZmZXIpXG5cblx0XHRnZW5lcmF0ZVNlZ21lbnQoICggY2xvc2VkID09PSBmYWxzZSApID8gdHVidWxhclNlZ21lbnRzIDogMCApO1xuXG5cdFx0Ly8gdXZzIGFyZSBnZW5lcmF0ZWQgaW4gYSBzZXBhcmF0ZSBmdW5jdGlvbi5cblx0XHQvLyB0aGlzIG1ha2VzIGl0IGVhc3kgY29tcHV0ZSBjb3JyZWN0IHZhbHVlcyBmb3IgY2xvc2VkIGdlb21ldHJpZXNcblxuXHRcdGdlbmVyYXRlVVZzKCk7XG5cblx0XHQvLyBmaW5hbGx5IGNyZWF0ZSBmYWNlc1xuXG5cdFx0Z2VuZXJhdGVJbmRpY2VzKCk7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlU2VnbWVudCggaSApIHtcblxuXHRcdC8vIHdlIHVzZSBnZXRQb2ludEF0IHRvIHNhbXBsZSBldmVubHkgZGlzdHJpYnV0ZWQgcG9pbnRzIGZyb20gdGhlIGdpdmVuIHBhdGhcblxuXHRcdFAgPSBwYXRoLmdldFBvaW50QXQoIGkgLyB0dWJ1bGFyU2VnbWVudHMsIFAgKTtcblxuXHRcdC8vIHJldHJpZXZlIGNvcnJlc3BvbmRpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbFxuXG5cdFx0dmFyIE4gPSBmcmFtZXMubm9ybWFsc1sgaSBdO1xuXHRcdHZhciBCID0gZnJhbWVzLmJpbm9ybWFsc1sgaSBdO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgbm9ybWFscyBhbmQgdmVydGljZXMgZm9yIHRoZSBjdXJyZW50IHNlZ21lbnRcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHYgKTtcblx0XHRcdHZhciBjb3MgPSAtIE1hdGguY29zKCB2ICk7XG5cblx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRub3JtYWwueCA9ICggY29zICogTi54ICsgc2luICogQi54ICk7XG5cdFx0XHRub3JtYWwueSA9ICggY29zICogTi55ICsgc2luICogQi55ICk7XG5cdFx0XHRub3JtYWwueiA9ICggY29zICogTi56ICsgc2luICogQi56ICk7XG5cdFx0XHRub3JtYWwubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSBQLnggKyByYWRpdXMgKiBub3JtYWwueDtcblx0XHRcdHZlcnRleC55ID0gUC55ICsgcmFkaXVzICogbm9ybWFsLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IFAueiArIHJhZGl1cyAqIG5vcm1hbC56O1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlSW5kaWNlcygpIHtcblxuXHRcdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPD0gcmFkaWFsU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIGEgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYiA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgKCBpIC0gMSApO1xuXHRcdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdFx0dmFyIGQgPSAoIHJhZGlhbFNlZ21lbnRzICsgMSApICogKCBqIC0gMSApICsgaTtcblxuXHRcdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGIsIGMsIGQgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRmdW5jdGlvbiBnZW5lcmF0ZVVWcygpIHtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDw9IHR1YnVsYXJTZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0Zm9yICggaiA9IDA7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRcdFx0dXYueCA9IGkgLyB0dWJ1bGFyU2VnbWVudHM7XG5cdFx0XHRcdHV2LnkgPSBqIC8gcmFkaWFsU2VnbWVudHM7XG5cblx0XHRcdFx0dXZzLnB1c2goIHV2LngsIHV2LnkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHViZUJ1ZmZlckdlb21ldHJ5O1xuXG5UdWJlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEucGF0aCA9IHRoaXMucGFyYW1ldGVycy5wYXRoLnRvSlNPTigpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igb29zbW94aWVjb2RlXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICpcbiAqIGJhc2VkIG9uIGh0dHA6Ly93d3cuYmxhY2twYXduLmNvbS90ZXh0cy9wcXRvcnVzL1xuICovXG5cbi8vIFRvcnVzS25vdEdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEsIGhlaWdodFNjYWxlICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVG9ydXNLbm90R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHR1YnVsYXJTZWdtZW50czogdHVidWxhclNlZ21lbnRzLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHRwOiBwLFxuXHRcdHE6IHFcblx0fTtcblxuXHRpZiAoIGhlaWdodFNjYWxlICE9PSB1bmRlZmluZWQgKSBjb25zb2xlLndhcm4oICdUSFJFRS5Ub3J1c0tub3RHZW9tZXRyeTogaGVpZ2h0U2NhbGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zY2FsZSggeCwgeSwgeiApIGluc3RlYWQuJyApO1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgdHVidWxhclNlZ21lbnRzLCByYWRpYWxTZWdtZW50cywgcCwgcSApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRvcnVzS25vdEdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90R2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90R2VvbWV0cnk7XG5cbi8vIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHR1YnVsYXJTZWdtZW50cywgcmFkaWFsU2VnbWVudHMsIHAsIHEgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHR1YmU6IHR1YmUsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdHA6IHAsXG5cdFx0cTogcVxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHR1YnVsYXJTZWdtZW50cyA9IE1hdGguZmxvb3IoIHR1YnVsYXJTZWdtZW50cyApIHx8IDY0O1xuXHRyYWRpYWxTZWdtZW50cyA9IE1hdGguZmxvb3IoIHJhZGlhbFNlZ21lbnRzICkgfHwgODtcblx0cCA9IHAgfHwgMjtcblx0cSA9IHEgfHwgMztcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGksIGo7XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciBQMSA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBQMiA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIEIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgVCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBOID0gbmV3IFZlY3RvcjMoKTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyArKyBpICkge1xuXG5cdFx0Ly8gdGhlIHJhZGlhbiBcInVcIiBpcyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlIG9mIHRoZSBjdXJyZW50IHR1YnVsYXIgc2VnZW1lbnRcblxuXHRcdHZhciB1ID0gaSAvIHR1YnVsYXJTZWdtZW50cyAqIHAgKiBNYXRoLlBJICogMjtcblxuXHRcdC8vIG5vdyB3ZSBjYWxjdWxhdGUgdHdvIHBvaW50cy4gUDEgaXMgb3VyIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIGN1cnZlLCBQMiBpcyBhIGxpdHRsZSBmYXJ0aGVyIGFoZWFkLlxuXHRcdC8vIHRoZXNlIHBvaW50cyBhcmUgdXNlZCB0byBjcmVhdGUgYSBzcGVjaWFsIFwiY29vcmRpbmF0ZSBzcGFjZVwiLCB3aGljaCBpcyBuZWNlc3NhcnkgdG8gY2FsY3VsYXRlIHRoZSBjb3JyZWN0IHZlcnRleCBwb3NpdGlvbnNcblxuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSwgcCwgcSwgcmFkaXVzLCBQMSApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uT25DdXJ2ZSggdSArIDAuMDEsIHAsIHEsIHJhZGl1cywgUDIgKTtcblxuXHRcdC8vIGNhbGN1bGF0ZSBvcnRob25vcm1hbCBiYXNpc1xuXG5cdFx0VC5zdWJWZWN0b3JzKCBQMiwgUDEgKTtcblx0XHROLmFkZFZlY3RvcnMoIFAyLCBQMSApO1xuXHRcdEIuY3Jvc3NWZWN0b3JzKCBULCBOICk7XG5cdFx0Ti5jcm9zc1ZlY3RvcnMoIEIsIFQgKTtcblxuXHRcdC8vIG5vcm1hbGl6ZSBCLCBOLiBUIGNhbiBiZSBpZ25vcmVkLCB3ZSBkb24ndCB1c2UgaXRcblxuXHRcdEIubm9ybWFsaXplKCk7XG5cdFx0Ti5ub3JtYWxpemUoKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyArKyBqICkge1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSB2ZXJ0aWNlcy4gdGhleSBhcmUgbm90aGluZyBtb3JlIHRoYW4gYW4gZXh0cnVzaW9uIG9mIHRoZSB0b3J1cyBjdXJ2ZS5cblx0XHRcdC8vIGJlY2F1c2Ugd2UgZXh0cnVkZSBhIHNoYXBlIGluIHRoZSB4eS1wbGFuZSwgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxjdWxhdGUgYSB6LXZhbHVlLlxuXG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXHRcdFx0dmFyIGN4ID0gLSB0dWJlICogTWF0aC5jb3MoIHYgKTtcblx0XHRcdHZhciBjeSA9IHR1YmUgKiBNYXRoLnNpbiggdiApO1xuXG5cdFx0XHQvLyBub3cgY2FsY3VsYXRlIHRoZSBmaW5hbCB2ZXJ0ZXggcG9zaXRpb24uXG5cdFx0XHQvLyBmaXJzdCB3ZSBvcmllbnQgdGhlIGV4dHJ1c2lvbiB3aXRoIG91ciBiYXNpcyB2ZWN0b3MsIHRoZW4gd2UgYWRkIGl0IHRvIHRoZSBjdXJyZW50IHBvc2l0aW9uIG9uIHRoZSBjdXJ2ZVxuXG5cdFx0XHR2ZXJ0ZXgueCA9IFAxLnggKyAoIGN4ICogTi54ICsgY3kgKiBCLnggKTtcblx0XHRcdHZlcnRleC55ID0gUDEueSArICggY3ggKiBOLnkgKyBjeSAqIEIueSApO1xuXHRcdFx0dmVydGV4LnogPSBQMS56ICsgKCBjeCAqIE4ueiArIGN5ICogQi56ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsIChQMSBpcyBhbHdheXMgdGhlIGNlbnRlci9vcmlnaW4gb2YgdGhlIGV4dHJ1c2lvbiwgdGh1cyB3ZSBjYW4gdXNlIGl0IHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsKVxuXG5cdFx0XHRub3JtYWwuc3ViVmVjdG9ycyggdmVydGV4LCBQMSApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0XHRub3JtYWxzLnB1c2goIG5vcm1hbC54LCBub3JtYWwueSwgbm9ybWFsLnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXZzLnB1c2goIGkgLyB0dWJ1bGFyU2VnbWVudHMgKTtcblx0XHRcdHV2cy5wdXNoKCBqIC8gcmFkaWFsU2VnbWVudHMgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdGZvciAoIGogPSAxOyBqIDw9IHR1YnVsYXJTZWdtZW50czsgaiArKyApIHtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDw9IHJhZGlhbFNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyBpbmRpY2VzXG5cblx0XHRcdHZhciBhID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArICggaSAtIDEgKTtcblx0XHRcdHZhciBiID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqIGogKyAoIGkgLSAxICk7XG5cdFx0XHR2YXIgYyA9ICggcmFkaWFsU2VnbWVudHMgKyAxICkgKiBqICsgaTtcblx0XHRcdHZhciBkID0gKCByYWRpYWxTZWdtZW50cyArIDEgKSAqICggaiAtIDEgKSArIGk7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxuXHQvLyB0aGlzIGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gb24gdGhlIHRvcnVzIGN1cnZlXG5cblx0ZnVuY3Rpb24gY2FsY3VsYXRlUG9zaXRpb25PbkN1cnZlKCB1LCBwLCBxLCByYWRpdXMsIHBvc2l0aW9uICkge1xuXG5cdFx0dmFyIGN1ID0gTWF0aC5jb3MoIHUgKTtcblx0XHR2YXIgc3UgPSBNYXRoLnNpbiggdSApO1xuXHRcdHZhciBxdU92ZXJQID0gcSAvIHAgKiB1O1xuXHRcdHZhciBjcyA9IE1hdGguY29zKCBxdU92ZXJQICk7XG5cblx0XHRwb3NpdGlvbi54ID0gcmFkaXVzICogKCAyICsgY3MgKSAqIDAuNSAqIGN1O1xuXHRcdHBvc2l0aW9uLnkgPSByYWRpdXMgKiAoIDIgKyBjcyApICogc3UgKiAwLjU7XG5cdFx0cG9zaXRpb24ueiA9IHJhZGl1cyAqIE1hdGguc2luKCBxdU92ZXJQICkgKiAwLjU7XG5cblx0fVxuXG59XG5cblRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVG9ydXNLbm90QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNLbm90QnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBvb3Ntb3hpZWNvZGVcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFRvcnVzR2VvbWV0cnlcblxuZnVuY3Rpb24gVG9ydXNHZW9tZXRyeSggcmFkaXVzLCB0dWJlLCByYWRpYWxTZWdtZW50cywgdHVidWxhclNlZ21lbnRzLCBhcmMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUb3J1c0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0dHViZTogdHViZSxcblx0XHRyYWRpYWxTZWdtZW50czogcmFkaWFsU2VnbWVudHMsXG5cdFx0dHVidWxhclNlZ21lbnRzOiB0dWJ1bGFyU2VnbWVudHMsXG5cdFx0YXJjOiBhcmNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRvcnVzQnVmZmVyR2VvbWV0cnkoIHJhZGl1cywgdHViZSwgcmFkaWFsU2VnbWVudHMsIHR1YnVsYXJTZWdtZW50cywgYXJjICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuVG9ydXNHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNHZW9tZXRyeTtcblxuLy8gVG9ydXNCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUb3J1c0J1ZmZlckdlb21ldHJ5KCByYWRpdXMsIHR1YmUsIHJhZGlhbFNlZ21lbnRzLCB0dWJ1bGFyU2VnbWVudHMsIGFyYyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1RvcnVzQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRyYWRpdXM6IHJhZGl1cyxcblx0XHR0dWJlOiB0dWJlLFxuXHRcdHJhZGlhbFNlZ21lbnRzOiByYWRpYWxTZWdtZW50cyxcblx0XHR0dWJ1bGFyU2VnbWVudHM6IHR1YnVsYXJTZWdtZW50cyxcblx0XHRhcmM6IGFyY1xuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHR0dWJlID0gdHViZSB8fCAwLjQ7XG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4O1xuXHR0dWJ1bGFyU2VnbWVudHMgPSBNYXRoLmZsb29yKCB0dWJ1bGFyU2VnbWVudHMgKSB8fCA2O1xuXHRhcmMgPSBhcmMgfHwgTWF0aC5QSSAqIDI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBjZW50ZXIgPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIGosIGk7XG5cblx0Ly8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG5cdGZvciAoIGogPSAwOyBqIDw9IHJhZGlhbFNlZ21lbnRzOyBqICsrICkge1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPD0gdHVidWxhclNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHR2YXIgdSA9IGkgLyB0dWJ1bGFyU2VnbWVudHMgKiBhcmM7XG5cdFx0XHR2YXIgdiA9IGogLyByYWRpYWxTZWdtZW50cyAqIE1hdGguUEkgKiAyO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0dmVydGV4LnkgPSAoIHJhZGl1cyArIHR1YmUgKiBNYXRoLmNvcyggdiApICkgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0dmVydGV4LnogPSB0dWJlICogTWF0aC5zaW4oIHYgKTtcblxuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0Y2VudGVyLnggPSByYWRpdXMgKiBNYXRoLmNvcyggdSApO1xuXHRcdFx0Y2VudGVyLnkgPSByYWRpdXMgKiBNYXRoLnNpbiggdSApO1xuXHRcdFx0bm9ybWFsLnN1YlZlY3RvcnMoIHZlcnRleCwgY2VudGVyICkubm9ybWFsaXplKCk7XG5cblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggaSAvIHR1YnVsYXJTZWdtZW50cyApO1xuXHRcdFx0dXZzLnB1c2goIGogLyByYWRpYWxTZWdtZW50cyApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDE7IGogPD0gcmFkaWFsU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSB0dWJ1bGFyU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdC8vIGluZGljZXNcblxuXHRcdFx0dmFyIGEgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpIC0gMTtcblx0XHRcdHZhciBiID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpIC0gMTtcblx0XHRcdHZhciBjID0gKCB0dWJ1bGFyU2VnbWVudHMgKyAxICkgKiAoIGogLSAxICkgKyBpO1xuXHRcdFx0dmFyIGQgPSAoIHR1YnVsYXJTZWdtZW50cyArIDEgKSAqIGogKyBpO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuVG9ydXNCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRvcnVzQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9ydXNCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogUG9ydCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvZWFyY3V0ICh2Mi4xLjUpXG4gKi9cblxudmFyIEVhcmN1dCA9IHtcblxuXHR0cmlhbmd1bGF0ZTogZnVuY3Rpb24gKCBkYXRhLCBob2xlSW5kaWNlcywgZGltICkge1xuXG5cdFx0ZGltID0gZGltIHx8IDI7XG5cblx0XHR2YXIgaGFzSG9sZXMgPSBob2xlSW5kaWNlcyAmJiBob2xlSW5kaWNlcy5sZW5ndGgsXG5cdFx0XHRvdXRlckxlbiA9IGhhc0hvbGVzID8gaG9sZUluZGljZXNbIDAgXSAqIGRpbSA6IGRhdGEubGVuZ3RoLFxuXHRcdFx0b3V0ZXJOb2RlID0gbGlua2VkTGlzdCggZGF0YSwgMCwgb3V0ZXJMZW4sIGRpbSwgdHJ1ZSApLFxuXHRcdFx0dHJpYW5nbGVzID0gW107XG5cblx0XHRpZiAoICEgb3V0ZXJOb2RlIHx8IG91dGVyTm9kZS5uZXh0ID09PSBvdXRlck5vZGUucHJldiApIHJldHVybiB0cmlhbmdsZXM7XG5cblx0XHR2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgeCwgeSwgaW52U2l6ZTtcblxuXHRcdGlmICggaGFzSG9sZXMgKSBvdXRlck5vZGUgPSBlbGltaW5hdGVIb2xlcyggZGF0YSwgaG9sZUluZGljZXMsIG91dGVyTm9kZSwgZGltICk7XG5cblx0XHQvLyBpZiB0aGUgc2hhcGUgaXMgbm90IHRvbyBzaW1wbGUsIHdlJ2xsIHVzZSB6LW9yZGVyIGN1cnZlIGhhc2ggbGF0ZXI7IGNhbGN1bGF0ZSBwb2x5Z29uIGJib3hcblx0XHRpZiAoIGRhdGEubGVuZ3RoID4gODAgKiBkaW0gKSB7XG5cblx0XHRcdG1pblggPSBtYXhYID0gZGF0YVsgMCBdO1xuXHRcdFx0bWluWSA9IG1heFkgPSBkYXRhWyAxIF07XG5cblx0XHRcdGZvciAoIHZhciBpID0gZGltOyBpIDwgb3V0ZXJMZW47IGkgKz0gZGltICkge1xuXG5cdFx0XHRcdHggPSBkYXRhWyBpIF07XG5cdFx0XHRcdHkgPSBkYXRhWyBpICsgMSBdO1xuXHRcdFx0XHRpZiAoIHggPCBtaW5YICkgbWluWCA9IHg7XG5cdFx0XHRcdGlmICggeSA8IG1pblkgKSBtaW5ZID0geTtcblx0XHRcdFx0aWYgKCB4ID4gbWF4WCApIG1heFggPSB4O1xuXHRcdFx0XHRpZiAoIHkgPiBtYXhZICkgbWF4WSA9IHk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbWluWCwgbWluWSBhbmQgaW52U2l6ZSBhcmUgbGF0ZXIgdXNlZCB0byB0cmFuc2Zvcm0gY29vcmRzIGludG8gaW50ZWdlcnMgZm9yIHotb3JkZXIgY2FsY3VsYXRpb25cblx0XHRcdGludlNpemUgPSBNYXRoLm1heCggbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZICk7XG5cdFx0XHRpbnZTaXplID0gaW52U2l6ZSAhPT0gMCA/IDEgLyBpbnZTaXplIDogMDtcblxuXHRcdH1cblxuXHRcdGVhcmN1dExpbmtlZCggb3V0ZXJOb2RlLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRyaWFuZ2xlcztcblxuXHR9XG5cbn07XG5cbi8vIGNyZWF0ZSBhIGNpcmN1bGFyIGRvdWJseSBsaW5rZWQgbGlzdCBmcm9tIHBvbHlnb24gcG9pbnRzIGluIHRoZSBzcGVjaWZpZWQgd2luZGluZyBvcmRlclxuZnVuY3Rpb24gbGlua2VkTGlzdCggZGF0YSwgc3RhcnQsIGVuZCwgZGltLCBjbG9ja3dpc2UgKSB7XG5cblx0dmFyIGksIGxhc3Q7XG5cblx0aWYgKCBjbG9ja3dpc2UgPT09ICggc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkgPiAwICkgKSB7XG5cblx0XHRmb3IgKCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gZGltICkgbGFzdCA9IGluc2VydE5vZGUoIGksIGRhdGFbIGkgXSwgZGF0YVsgaSArIDEgXSwgbGFzdCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCBpID0gZW5kIC0gZGltOyBpID49IHN0YXJ0OyBpIC09IGRpbSApIGxhc3QgPSBpbnNlcnROb2RlKCBpLCBkYXRhWyBpIF0sIGRhdGFbIGkgKyAxIF0sIGxhc3QgKTtcblxuXHR9XG5cblx0aWYgKCBsYXN0ICYmIGVxdWFscyggbGFzdCwgbGFzdC5uZXh0ICkgKSB7XG5cblx0XHRyZW1vdmVOb2RlKCBsYXN0ICk7XG5cdFx0bGFzdCA9IGxhc3QubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIGxhc3Q7XG5cbn1cblxuLy8gZWxpbWluYXRlIGNvbGluZWFyIG9yIGR1cGxpY2F0ZSBwb2ludHNcbmZ1bmN0aW9uIGZpbHRlclBvaW50cyggc3RhcnQsIGVuZCApIHtcblxuXHRpZiAoICEgc3RhcnQgKSByZXR1cm4gc3RhcnQ7XG5cdGlmICggISBlbmQgKSBlbmQgPSBzdGFydDtcblxuXHR2YXIgcCA9IHN0YXJ0LFxuXHRcdGFnYWluO1xuXHRkbyB7XG5cblx0XHRhZ2FpbiA9IGZhbHNlO1xuXG5cdFx0aWYgKCAhIHAuc3RlaW5lciAmJiAoIGVxdWFscyggcCwgcC5uZXh0ICkgfHwgYXJlYSggcC5wcmV2LCBwLCBwLm5leHQgKSA9PT0gMCApICkge1xuXG5cdFx0XHRyZW1vdmVOb2RlKCBwICk7XG5cdFx0XHRwID0gZW5kID0gcC5wcmV2O1xuXHRcdFx0aWYgKCBwID09PSBwLm5leHQgKSBicmVhaztcblx0XHRcdGFnYWluID0gdHJ1ZTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHAgPSBwLm5leHQ7XG5cblx0XHR9XG5cblx0fSB3aGlsZSAoIGFnYWluIHx8IHAgIT09IGVuZCApO1xuXG5cdHJldHVybiBlbmQ7XG5cbn1cblxuLy8gbWFpbiBlYXIgc2xpY2luZyBsb29wIHdoaWNoIHRyaWFuZ3VsYXRlcyBhIHBvbHlnb24gKGdpdmVuIGFzIGEgbGlua2VkIGxpc3QpXG5mdW5jdGlvbiBlYXJjdXRMaW5rZWQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUsIHBhc3MgKSB7XG5cblx0aWYgKCAhIGVhciApIHJldHVybjtcblxuXHQvLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5cdGlmICggISBwYXNzICYmIGludlNpemUgKSBpbmRleEN1cnZlKCBlYXIsIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHR2YXIgc3RvcCA9IGVhcixcblx0XHRwcmV2LCBuZXh0O1xuXG5cdC8vIGl0ZXJhdGUgdGhyb3VnaCBlYXJzLCBzbGljaW5nIHRoZW0gb25lIGJ5IG9uZVxuXHR3aGlsZSAoIGVhci5wcmV2ICE9PSBlYXIubmV4dCApIHtcblxuXHRcdHByZXYgPSBlYXIucHJldjtcblx0XHRuZXh0ID0gZWFyLm5leHQ7XG5cblx0XHRpZiAoIGludlNpemUgPyBpc0Vhckhhc2hlZCggZWFyLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkgOiBpc0VhciggZWFyICkgKSB7XG5cblx0XHRcdC8vIGN1dCBvZmYgdGhlIHRyaWFuZ2xlXG5cdFx0XHR0cmlhbmdsZXMucHVzaCggcHJldi5pIC8gZGltICk7XG5cdFx0XHR0cmlhbmdsZXMucHVzaCggZWFyLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBuZXh0LmkgLyBkaW0gKTtcblxuXHRcdFx0cmVtb3ZlTm9kZSggZWFyICk7XG5cblx0XHRcdC8vIHNraXBwaW5nIHRoZSBuZXh0IHZlcnRleCBsZWFkcyB0byBsZXNzIHNsaXZlciB0cmlhbmdsZXNcblx0XHRcdGVhciA9IG5leHQubmV4dDtcblx0XHRcdHN0b3AgPSBuZXh0Lm5leHQ7XG5cblx0XHRcdGNvbnRpbnVlO1xuXG5cdFx0fVxuXG5cdFx0ZWFyID0gbmV4dDtcblxuXHRcdC8vIGlmIHdlIGxvb3BlZCB0aHJvdWdoIHRoZSB3aG9sZSByZW1haW5pbmcgcG9seWdvbiBhbmQgY2FuJ3QgZmluZCBhbnkgbW9yZSBlYXJzXG5cdFx0aWYgKCBlYXIgPT09IHN0b3AgKSB7XG5cblx0XHRcdC8vIHRyeSBmaWx0ZXJpbmcgcG9pbnRzIGFuZCBzbGljaW5nIGFnYWluXG5cdFx0XHRpZiAoICEgcGFzcyApIHtcblxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGZpbHRlclBvaW50cyggZWFyICksIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplLCAxICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhpcyBkaWRuJ3Qgd29yaywgdHJ5IGN1cmluZyBhbGwgc21hbGwgc2VsZi1pbnRlcnNlY3Rpb25zIGxvY2FsbHlcblxuXHRcdFx0fSBlbHNlIGlmICggcGFzcyA9PT0gMSApIHtcblxuXHRcdFx0XHRlYXIgPSBjdXJlTG9jYWxJbnRlcnNlY3Rpb25zKCBlYXIsIHRyaWFuZ2xlcywgZGltICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggZWFyLCB0cmlhbmdsZXMsIGRpbSwgbWluWCwgbWluWSwgaW52U2l6ZSwgMiApO1xuXG5cdFx0XHRcdC8vIGFzIGEgbGFzdCByZXNvcnQsIHRyeSBzcGxpdHRpbmcgdGhlIHJlbWFpbmluZyBwb2x5Z29uIGludG8gdHdvXG5cblx0XHRcdH0gZWxzZSBpZiAoIHBhc3MgPT09IDIgKSB7XG5cblx0XHRcdFx0c3BsaXRFYXJjdXQoIGVhciwgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRicmVhaztcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLy8gY2hlY2sgd2hldGhlciBhIHBvbHlnb24gbm9kZSBmb3JtcyBhIHZhbGlkIGVhciB3aXRoIGFkamFjZW50IG5vZGVzXG5mdW5jdGlvbiBpc0VhciggZWFyICkge1xuXG5cdHZhciBhID0gZWFyLnByZXYsXG5cdFx0YiA9IGVhcixcblx0XHRjID0gZWFyLm5leHQ7XG5cblx0aWYgKCBhcmVhKCBhLCBiLCBjICkgPj0gMCApIHJldHVybiBmYWxzZTsgLy8gcmVmbGV4LCBjYW4ndCBiZSBhbiBlYXJcblxuXHQvLyBub3cgbWFrZSBzdXJlIHdlIGRvbid0IGhhdmUgb3RoZXIgcG9pbnRzIGluc2lkZSB0aGUgcG90ZW50aWFsIGVhclxuXHR2YXIgcCA9IGVhci5uZXh0Lm5leHQ7XG5cblx0d2hpbGUgKCBwICE9PSBlYXIucHJldiApIHtcblxuXHRcdGlmICggcG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn1cblxuZnVuY3Rpb24gaXNFYXJIYXNoZWQoIGVhciwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgYSA9IGVhci5wcmV2LFxuXHRcdGIgPSBlYXIsXG5cdFx0YyA9IGVhci5uZXh0O1xuXG5cdGlmICggYXJlYSggYSwgYiwgYyApID49IDAgKSByZXR1cm4gZmFsc2U7IC8vIHJlZmxleCwgY2FuJ3QgYmUgYW4gZWFyXG5cblx0Ly8gdHJpYW5nbGUgYmJveDsgbWluICYgbWF4IGFyZSBjYWxjdWxhdGVkIGxpa2UgdGhpcyBmb3Igc3BlZWRcblx0dmFyIG1pblRYID0gYS54IDwgYi54ID8gKCBhLnggPCBjLnggPyBhLnggOiBjLnggKSA6ICggYi54IDwgYy54ID8gYi54IDogYy54ICksXG5cdFx0bWluVFkgPSBhLnkgPCBiLnkgPyAoIGEueSA8IGMueSA/IGEueSA6IGMueSApIDogKCBiLnkgPCBjLnkgPyBiLnkgOiBjLnkgKSxcblx0XHRtYXhUWCA9IGEueCA+IGIueCA/ICggYS54ID4gYy54ID8gYS54IDogYy54ICkgOiAoIGIueCA+IGMueCA/IGIueCA6IGMueCApLFxuXHRcdG1heFRZID0gYS55ID4gYi55ID8gKCBhLnkgPiBjLnkgPyBhLnkgOiBjLnkgKSA6ICggYi55ID4gYy55ID8gYi55IDogYy55ICk7XG5cblx0Ly8gei1vcmRlciByYW5nZSBmb3IgdGhlIGN1cnJlbnQgdHJpYW5nbGUgYmJveDtcblx0dmFyIG1pblogPSB6T3JkZXIoIG1pblRYLCBtaW5UWSwgbWluWCwgbWluWSwgaW52U2l6ZSApLFxuXHRcdG1heFogPSB6T3JkZXIoIG1heFRYLCBtYXhUWSwgbWluWCwgbWluWSwgaW52U2l6ZSApO1xuXG5cdHZhciBwID0gZWFyLnByZXZaLFxuXHRcdG4gPSBlYXIubmV4dFo7XG5cblx0Ly8gbG9vayBmb3IgcG9pbnRzIGluc2lkZSB0aGUgdHJpYW5nbGUgaW4gYm90aCBkaXJlY3Rpb25zXG5cdHdoaWxlICggcCAmJiBwLnogPj0gbWluWiAmJiBuICYmIG4ueiA8PSBtYXhaICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0XHRpZiAoIG4gIT09IGVhci5wcmV2ICYmIG4gIT09IGVhci5uZXh0ICYmXG5cdFx0XHRwb2ludEluVHJpYW5nbGUoIGEueCwgYS55LCBiLngsIGIueSwgYy54LCBjLnksIG4ueCwgbi55ICkgJiZcblx0XHRcdGFyZWEoIG4ucHJldiwgbiwgbi5uZXh0ICkgPj0gMCApIHJldHVybiBmYWxzZTtcblx0XHRuID0gbi5uZXh0WjtcblxuXHR9XG5cblx0Ly8gbG9vayBmb3IgcmVtYWluaW5nIHBvaW50cyBpbiBkZWNyZWFzaW5nIHotb3JkZXJcblx0d2hpbGUgKCBwICYmIHAueiA+PSBtaW5aICkge1xuXG5cdFx0aWYgKCBwICE9PSBlYXIucHJldiAmJiBwICE9PSBlYXIubmV4dCAmJlxuXHRcdFx0cG9pbnRJblRyaWFuZ2xlKCBhLngsIGEueSwgYi54LCBiLnksIGMueCwgYy55LCBwLngsIHAueSApICYmXG5cdFx0XHRhcmVhKCBwLnByZXYsIHAsIHAubmV4dCApID49IDAgKSByZXR1cm4gZmFsc2U7XG5cdFx0cCA9IHAucHJldlo7XG5cblx0fVxuXG5cdC8vIGxvb2sgZm9yIHJlbWFpbmluZyBwb2ludHMgaW4gaW5jcmVhc2luZyB6LW9yZGVyXG5cdHdoaWxlICggbiAmJiBuLnogPD0gbWF4WiApIHtcblxuXHRcdGlmICggbiAhPT0gZWFyLnByZXYgJiYgbiAhPT0gZWFyLm5leHQgJiZcblx0XHRcdHBvaW50SW5UcmlhbmdsZSggYS54LCBhLnksIGIueCwgYi55LCBjLngsIGMueSwgbi54LCBuLnkgKSAmJlxuXHRcdFx0YXJlYSggbi5wcmV2LCBuLCBuLm5leHQgKSA+PSAwICkgcmV0dXJuIGZhbHNlO1xuXHRcdG4gPSBuLm5leHRaO1xuXG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcblxufVxuXG4vLyBnbyB0aHJvdWdoIGFsbCBwb2x5Z29uIG5vZGVzIGFuZCBjdXJlIHNtYWxsIGxvY2FsIHNlbGYtaW50ZXJzZWN0aW9uc1xuZnVuY3Rpb24gY3VyZUxvY2FsSW50ZXJzZWN0aW9ucyggc3RhcnQsIHRyaWFuZ2xlcywgZGltICkge1xuXG5cdHZhciBwID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdHZhciBhID0gcC5wcmV2LFxuXHRcdFx0YiA9IHAubmV4dC5uZXh0O1xuXG5cdFx0aWYgKCAhIGVxdWFscyggYSwgYiApICYmIGludGVyc2VjdHMoIGEsIHAsIHAubmV4dCwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSAmJiBsb2NhbGx5SW5zaWRlKCBiLCBhICkgKSB7XG5cblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBhLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBwLmkgLyBkaW0gKTtcblx0XHRcdHRyaWFuZ2xlcy5wdXNoKCBiLmkgLyBkaW0gKTtcblxuXHRcdFx0Ly8gcmVtb3ZlIHR3byBub2RlcyBpbnZvbHZlZFxuXHRcdFx0cmVtb3ZlTm9kZSggcCApO1xuXHRcdFx0cmVtb3ZlTm9kZSggcC5uZXh0ICk7XG5cblx0XHRcdHAgPSBzdGFydCA9IGI7XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBwO1xuXG59XG5cbi8vIHRyeSBzcGxpdHRpbmcgcG9seWdvbiBpbnRvIHR3byBhbmQgdHJpYW5ndWxhdGUgdGhlbSBpbmRlcGVuZGVudGx5XG5mdW5jdGlvbiBzcGxpdEVhcmN1dCggc3RhcnQsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGxvb2sgZm9yIGEgdmFsaWQgZGlhZ29uYWwgdGhhdCBkaXZpZGVzIHRoZSBwb2x5Z29uIGludG8gdHdvXG5cdHZhciBhID0gc3RhcnQ7XG5cdGRvIHtcblxuXHRcdHZhciBiID0gYS5uZXh0Lm5leHQ7XG5cdFx0d2hpbGUgKCBiICE9PSBhLnByZXYgKSB7XG5cblx0XHRcdGlmICggYS5pICE9PSBiLmkgJiYgaXNWYWxpZERpYWdvbmFsKCBhLCBiICkgKSB7XG5cblx0XHRcdFx0Ly8gc3BsaXQgdGhlIHBvbHlnb24gaW4gdHdvIGJ5IHRoZSBkaWFnb25hbFxuXHRcdFx0XHR2YXIgYyA9IHNwbGl0UG9seWdvbiggYSwgYiApO1xuXG5cdFx0XHRcdC8vIGZpbHRlciBjb2xpbmVhciBwb2ludHMgYXJvdW5kIHRoZSBjdXRzXG5cdFx0XHRcdGEgPSBmaWx0ZXJQb2ludHMoIGEsIGEubmV4dCApO1xuXHRcdFx0XHRjID0gZmlsdGVyUG9pbnRzKCBjLCBjLm5leHQgKTtcblxuXHRcdFx0XHQvLyBydW4gZWFyY3V0IG9uIGVhY2ggaGFsZlxuXHRcdFx0XHRlYXJjdXRMaW5rZWQoIGEsIHRyaWFuZ2xlcywgZGltLCBtaW5YLCBtaW5ZLCBpbnZTaXplICk7XG5cdFx0XHRcdGVhcmN1dExpbmtlZCggYywgdHJpYW5nbGVzLCBkaW0sIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdGIgPSBiLm5leHQ7XG5cblx0XHR9XG5cblx0XHRhID0gYS5uZXh0O1xuXG5cdH0gd2hpbGUgKCBhICE9PSBzdGFydCApO1xuXG59XG5cbi8vIGxpbmsgZXZlcnkgaG9sZSBpbnRvIHRoZSBvdXRlciBsb29wLCBwcm9kdWNpbmcgYSBzaW5nbGUtcmluZyBwb2x5Z29uIHdpdGhvdXQgaG9sZXNcbmZ1bmN0aW9uIGVsaW1pbmF0ZUhvbGVzKCBkYXRhLCBob2xlSW5kaWNlcywgb3V0ZXJOb2RlLCBkaW0gKSB7XG5cblx0dmFyIHF1ZXVlID0gW10sXG5cdFx0aSwgbGVuLCBzdGFydCwgZW5kLCBsaXN0O1xuXG5cdGZvciAoIGkgPSAwLCBsZW4gPSBob2xlSW5kaWNlcy5sZW5ndGg7IGkgPCBsZW47IGkgKysgKSB7XG5cblx0XHRzdGFydCA9IGhvbGVJbmRpY2VzWyBpIF0gKiBkaW07XG5cdFx0ZW5kID0gaSA8IGxlbiAtIDEgPyBob2xlSW5kaWNlc1sgaSArIDEgXSAqIGRpbSA6IGRhdGEubGVuZ3RoO1xuXHRcdGxpc3QgPSBsaW5rZWRMaXN0KCBkYXRhLCBzdGFydCwgZW5kLCBkaW0sIGZhbHNlICk7XG5cdFx0aWYgKCBsaXN0ID09PSBsaXN0Lm5leHQgKSBsaXN0LnN0ZWluZXIgPSB0cnVlO1xuXHRcdHF1ZXVlLnB1c2goIGdldExlZnRtb3N0KCBsaXN0ICkgKTtcblxuXHR9XG5cblx0cXVldWUuc29ydCggY29tcGFyZVggKTtcblxuXHQvLyBwcm9jZXNzIGhvbGVzIGZyb20gbGVmdCB0byByaWdodFxuXHRmb3IgKCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdGVsaW1pbmF0ZUhvbGUoIHF1ZXVlWyBpIF0sIG91dGVyTm9kZSApO1xuXHRcdG91dGVyTm9kZSA9IGZpbHRlclBvaW50cyggb3V0ZXJOb2RlLCBvdXRlck5vZGUubmV4dCApO1xuXG5cdH1cblxuXHRyZXR1cm4gb3V0ZXJOb2RlO1xuXG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVYKCBhLCBiICkge1xuXG5cdHJldHVybiBhLnggLSBiLng7XG5cbn1cblxuLy8gZmluZCBhIGJyaWRnZSBiZXR3ZWVuIHZlcnRpY2VzIHRoYXQgY29ubmVjdHMgaG9sZSB3aXRoIGFuIG91dGVyIHJpbmcgYW5kIGFuZCBsaW5rIGl0XG5mdW5jdGlvbiBlbGltaW5hdGVIb2xlKCBob2xlLCBvdXRlck5vZGUgKSB7XG5cblx0b3V0ZXJOb2RlID0gZmluZEhvbGVCcmlkZ2UoIGhvbGUsIG91dGVyTm9kZSApO1xuXHRpZiAoIG91dGVyTm9kZSApIHtcblxuXHRcdHZhciBiID0gc3BsaXRQb2x5Z29uKCBvdXRlck5vZGUsIGhvbGUgKTtcblx0XHRmaWx0ZXJQb2ludHMoIGIsIGIubmV4dCApO1xuXG5cdH1cblxufVxuXG4vLyBEYXZpZCBFYmVybHkncyBhbGdvcml0aG0gZm9yIGZpbmRpbmcgYSBicmlkZ2UgYmV0d2VlbiBob2xlIGFuZCBvdXRlciBwb2x5Z29uXG5mdW5jdGlvbiBmaW5kSG9sZUJyaWRnZSggaG9sZSwgb3V0ZXJOb2RlICkge1xuXG5cdHZhciBwID0gb3V0ZXJOb2RlLFxuXHRcdGh4ID0gaG9sZS54LFxuXHRcdGh5ID0gaG9sZS55LFxuXHRcdHF4ID0gLSBJbmZpbml0eSxcblx0XHRtO1xuXG5cdC8vIGZpbmQgYSBzZWdtZW50IGludGVyc2VjdGVkIGJ5IGEgcmF5IGZyb20gdGhlIGhvbGUncyBsZWZ0bW9zdCBwb2ludCB0byB0aGUgbGVmdDtcblx0Ly8gc2VnbWVudCdzIGVuZHBvaW50IHdpdGggbGVzc2VyIHggd2lsbCBiZSBwb3RlbnRpYWwgY29ubmVjdGlvbiBwb2ludFxuXHRkbyB7XG5cblx0XHRpZiAoIGh5IDw9IHAueSAmJiBoeSA+PSBwLm5leHQueSAmJiBwLm5leHQueSAhPT0gcC55ICkge1xuXG5cdFx0XHR2YXIgeCA9IHAueCArICggaHkgLSBwLnkgKSAqICggcC5uZXh0LnggLSBwLnggKSAvICggcC5uZXh0LnkgLSBwLnkgKTtcblx0XHRcdGlmICggeCA8PSBoeCAmJiB4ID4gcXggKSB7XG5cblx0XHRcdFx0cXggPSB4O1xuXHRcdFx0XHRpZiAoIHggPT09IGh4ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC55ICkgcmV0dXJuIHA7XG5cdFx0XHRcdFx0aWYgKCBoeSA9PT0gcC5uZXh0LnkgKSByZXR1cm4gcC5uZXh0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtID0gcC54IDwgcC5uZXh0LnggPyBwIDogcC5uZXh0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBvdXRlck5vZGUgKTtcblxuXHRpZiAoICEgbSApIHJldHVybiBudWxsO1xuXG5cdGlmICggaHggPT09IHF4ICkgcmV0dXJuIG0ucHJldjsgLy8gaG9sZSB0b3VjaGVzIG91dGVyIHNlZ21lbnQ7IHBpY2sgbG93ZXIgZW5kcG9pbnRcblxuXHQvLyBsb29rIGZvciBwb2ludHMgaW5zaWRlIHRoZSB0cmlhbmdsZSBvZiBob2xlIHBvaW50LCBzZWdtZW50IGludGVyc2VjdGlvbiBhbmQgZW5kcG9pbnQ7XG5cdC8vIGlmIHRoZXJlIGFyZSBubyBwb2ludHMgZm91bmQsIHdlIGhhdmUgYSB2YWxpZCBjb25uZWN0aW9uO1xuXHQvLyBvdGhlcndpc2UgY2hvb3NlIHRoZSBwb2ludCBvZiB0aGUgbWluaW11bSBhbmdsZSB3aXRoIHRoZSByYXkgYXMgY29ubmVjdGlvbiBwb2ludFxuXG5cdHZhciBzdG9wID0gbSxcblx0XHRteCA9IG0ueCxcblx0XHRteSA9IG0ueSxcblx0XHR0YW5NaW4gPSBJbmZpbml0eSxcblx0XHR0YW47XG5cblx0cCA9IG0ubmV4dDtcblxuXHR3aGlsZSAoIHAgIT09IHN0b3AgKSB7XG5cblx0XHRpZiAoIGh4ID49IHAueCAmJiBwLnggPj0gbXggJiYgaHggIT09IHAueCAmJlxuXHRcdFx0XHRwb2ludEluVHJpYW5nbGUoIGh5IDwgbXkgPyBoeCA6IHF4LCBoeSwgbXgsIG15LCBoeSA8IG15ID8gcXggOiBoeCwgaHksIHAueCwgcC55ICkgKSB7XG5cblx0XHRcdHRhbiA9IE1hdGguYWJzKCBoeSAtIHAueSApIC8gKCBoeCAtIHAueCApOyAvLyB0YW5nZW50aWFsXG5cblx0XHRcdGlmICggKCB0YW4gPCB0YW5NaW4gfHwgKCB0YW4gPT09IHRhbk1pbiAmJiBwLnggPiBtLnggKSApICYmIGxvY2FsbHlJbnNpZGUoIHAsIGhvbGUgKSApIHtcblxuXHRcdFx0XHRtID0gcDtcblx0XHRcdFx0dGFuTWluID0gdGFuO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRwID0gcC5uZXh0O1xuXG5cdH1cblxuXHRyZXR1cm4gbTtcblxufVxuXG4vLyBpbnRlcmxpbmsgcG9seWdvbiBub2RlcyBpbiB6LW9yZGVyXG5mdW5jdGlvbiBpbmRleEN1cnZlKCBzdGFydCwgbWluWCwgbWluWSwgaW52U2l6ZSApIHtcblxuXHR2YXIgcCA9IHN0YXJ0O1xuXHRkbyB7XG5cblx0XHRpZiAoIHAueiA9PT0gbnVsbCApIHAueiA9IHpPcmRlciggcC54LCBwLnksIG1pblgsIG1pblksIGludlNpemUgKTtcblx0XHRwLnByZXZaID0gcC5wcmV2O1xuXHRcdHAubmV4dFogPSBwLm5leHQ7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gc3RhcnQgKTtcblxuXHRwLnByZXZaLm5leHRaID0gbnVsbDtcblx0cC5wcmV2WiA9IG51bGw7XG5cblx0c29ydExpbmtlZCggcCApO1xuXG59XG5cbi8vIFNpbW9uIFRhdGhhbSdzIGxpbmtlZCBsaXN0IG1lcmdlIHNvcnQgYWxnb3JpdGhtXG4vLyBodHRwOi8vd3d3LmNoaWFyay5ncmVlbmVuZC5vcmcudWsvfnNndGF0aGFtL2FsZ29yaXRobXMvbGlzdHNvcnQuaHRtbFxuZnVuY3Rpb24gc29ydExpbmtlZCggbGlzdCApIHtcblxuXHR2YXIgaSwgcCwgcSwgZSwgdGFpbCwgbnVtTWVyZ2VzLCBwU2l6ZSwgcVNpemUsXG5cdFx0aW5TaXplID0gMTtcblxuXHRkbyB7XG5cblx0XHRwID0gbGlzdDtcblx0XHRsaXN0ID0gbnVsbDtcblx0XHR0YWlsID0gbnVsbDtcblx0XHRudW1NZXJnZXMgPSAwO1xuXG5cdFx0d2hpbGUgKCBwICkge1xuXG5cdFx0XHRudW1NZXJnZXMgKys7XG5cdFx0XHRxID0gcDtcblx0XHRcdHBTaXplID0gMDtcblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaW5TaXplOyBpICsrICkge1xuXG5cdFx0XHRcdHBTaXplICsrO1xuXHRcdFx0XHRxID0gcS5uZXh0Wjtcblx0XHRcdFx0aWYgKCAhIHEgKSBicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0XHRxU2l6ZSA9IGluU2l6ZTtcblxuXHRcdFx0d2hpbGUgKCBwU2l6ZSA+IDAgfHwgKCBxU2l6ZSA+IDAgJiYgcSApICkge1xuXG5cdFx0XHRcdGlmICggcFNpemUgIT09IDAgJiYgKCBxU2l6ZSA9PT0gMCB8fCAhIHEgfHwgcC56IDw9IHEueiApICkge1xuXG5cdFx0XHRcdFx0ZSA9IHA7XG5cdFx0XHRcdFx0cCA9IHAubmV4dFo7XG5cdFx0XHRcdFx0cFNpemUgLS07XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGUgPSBxO1xuXHRcdFx0XHRcdHEgPSBxLm5leHRaO1xuXHRcdFx0XHRcdHFTaXplIC0tO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhaWwgKSB0YWlsLm5leHRaID0gZTtcblx0XHRcdFx0ZWxzZSBsaXN0ID0gZTtcblxuXHRcdFx0XHRlLnByZXZaID0gdGFpbDtcblx0XHRcdFx0dGFpbCA9IGU7XG5cblx0XHRcdH1cblxuXHRcdFx0cCA9IHE7XG5cblx0XHR9XG5cblx0XHR0YWlsLm5leHRaID0gbnVsbDtcblx0XHRpblNpemUgKj0gMjtcblxuXHR9IHdoaWxlICggbnVtTWVyZ2VzID4gMSApO1xuXG5cdHJldHVybiBsaXN0O1xuXG59XG5cbi8vIHotb3JkZXIgb2YgYSBwb2ludCBnaXZlbiBjb29yZHMgYW5kIGludmVyc2Ugb2YgdGhlIGxvbmdlciBzaWRlIG9mIGRhdGEgYmJveFxuZnVuY3Rpb24gek9yZGVyKCB4LCB5LCBtaW5YLCBtaW5ZLCBpbnZTaXplICkge1xuXG5cdC8vIGNvb3JkcyBhcmUgdHJhbnNmb3JtZWQgaW50byBub24tbmVnYXRpdmUgMTUtYml0IGludGVnZXIgcmFuZ2Vcblx0eCA9IDMyNzY3ICogKCB4IC0gbWluWCApICogaW52U2l6ZTtcblx0eSA9IDMyNzY3ICogKCB5IC0gbWluWSApICogaW52U2l6ZTtcblxuXHR4ID0gKCB4IHwgKCB4IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eCA9ICggeCB8ICggeCA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHggPSAoIHggfCAoIHggPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR4ID0gKCB4IHwgKCB4IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHR5ID0gKCB5IHwgKCB5IDw8IDggKSApICYgMHgwMEZGMDBGRjtcblx0eSA9ICggeSB8ICggeSA8PCA0ICkgKSAmIDB4MEYwRjBGMEY7XG5cdHkgPSAoIHkgfCAoIHkgPDwgMiApICkgJiAweDMzMzMzMzMzO1xuXHR5ID0gKCB5IHwgKCB5IDw8IDEgKSApICYgMHg1NTU1NTU1NTtcblxuXHRyZXR1cm4geCB8ICggeSA8PCAxICk7XG5cbn1cblxuLy8gZmluZCB0aGUgbGVmdG1vc3Qgbm9kZSBvZiBhIHBvbHlnb24gcmluZ1xuZnVuY3Rpb24gZ2V0TGVmdG1vc3QoIHN0YXJ0ICkge1xuXG5cdHZhciBwID0gc3RhcnQsXG5cdFx0bGVmdG1vc3QgPSBzdGFydDtcblx0ZG8ge1xuXG5cdFx0aWYgKCBwLnggPCBsZWZ0bW9zdC54IHx8ICggcC54ID09PSBsZWZ0bW9zdC54ICYmIHAueSA8IGxlZnRtb3N0LnkgKSApIGxlZnRtb3N0ID0gcDtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBzdGFydCApO1xuXG5cdHJldHVybiBsZWZ0bW9zdDtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvaW50IGxpZXMgd2l0aGluIGEgY29udmV4IHRyaWFuZ2xlXG5mdW5jdGlvbiBwb2ludEluVHJpYW5nbGUoIGF4LCBheSwgYngsIGJ5LCBjeCwgY3ksIHB4LCBweSApIHtcblxuXHRyZXR1cm4gKCBjeCAtIHB4ICkgKiAoIGF5IC0gcHkgKSAtICggYXggLSBweCApICogKCBjeSAtIHB5ICkgPj0gMCAmJlxuXHRcdCAgICggYXggLSBweCApICogKCBieSAtIHB5ICkgLSAoIGJ4IC0gcHggKSAqICggYXkgLSBweSApID49IDAgJiZcblx0XHQgICAoIGJ4IC0gcHggKSAqICggY3kgLSBweSApIC0gKCBjeCAtIHB4ICkgKiAoIGJ5IC0gcHkgKSA+PSAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgZGlhZ29uYWwgYmV0d2VlbiB0d28gcG9seWdvbiBub2RlcyBpcyB2YWxpZCAobGllcyBpbiBwb2x5Z29uIGludGVyaW9yKVxuZnVuY3Rpb24gaXNWYWxpZERpYWdvbmFsKCBhLCBiICkge1xuXG5cdHJldHVybiBhLm5leHQuaSAhPT0gYi5pICYmIGEucHJldi5pICE9PSBiLmkgJiYgISBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApICYmXG5cdFx0ICAgbG9jYWxseUluc2lkZSggYSwgYiApICYmIGxvY2FsbHlJbnNpZGUoIGIsIGEgKSAmJiBtaWRkbGVJbnNpZGUoIGEsIGIgKTtcblxufVxuXG4vLyBzaWduZWQgYXJlYSBvZiBhIHRyaWFuZ2xlXG5mdW5jdGlvbiBhcmVhKCBwLCBxLCByICkge1xuXG5cdHJldHVybiAoIHEueSAtIHAueSApICogKCByLnggLSBxLnggKSAtICggcS54IC0gcC54ICkgKiAoIHIueSAtIHEueSApO1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBwb2ludHMgYXJlIGVxdWFsXG5mdW5jdGlvbiBlcXVhbHMoIHAxLCBwMiApIHtcblxuXHRyZXR1cm4gcDEueCA9PT0gcDIueCAmJiBwMS55ID09PSBwMi55O1xuXG59XG5cbi8vIGNoZWNrIGlmIHR3byBzZWdtZW50cyBpbnRlcnNlY3RcbmZ1bmN0aW9uIGludGVyc2VjdHMoIHAxLCBxMSwgcDIsIHEyICkge1xuXG5cdGlmICggKCBlcXVhbHMoIHAxLCBwMiApICYmIGVxdWFscyggcTEsIHEyICkgKSB8fFxuXHRcdCggZXF1YWxzKCBwMSwgcTIgKSAmJiBlcXVhbHMoIHAyLCBxMSApICkgKSByZXR1cm4gdHJ1ZTtcblx0cmV0dXJuIGFyZWEoIHAxLCBxMSwgcDIgKSA+IDAgIT09IGFyZWEoIHAxLCBxMSwgcTIgKSA+IDAgJiZcblx0XHQgICBhcmVhKCBwMiwgcTIsIHAxICkgPiAwICE9PSBhcmVhKCBwMiwgcTIsIHExICkgPiAwO1xuXG59XG5cbi8vIGNoZWNrIGlmIGEgcG9seWdvbiBkaWFnb25hbCBpbnRlcnNlY3RzIGFueSBwb2x5Z29uIHNlZ21lbnRzXG5mdW5jdGlvbiBpbnRlcnNlY3RzUG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgcCA9IGE7XG5cdGRvIHtcblxuXHRcdGlmICggcC5pICE9PSBhLmkgJiYgcC5uZXh0LmkgIT09IGEuaSAmJiBwLmkgIT09IGIuaSAmJiBwLm5leHQuaSAhPT0gYi5pICYmXG5cdFx0XHRcdGludGVyc2VjdHMoIHAsIHAubmV4dCwgYSwgYiApICkgcmV0dXJuIHRydWU7XG5cdFx0cCA9IHAubmV4dDtcblxuXHR9IHdoaWxlICggcCAhPT0gYSApO1xuXG5cdHJldHVybiBmYWxzZTtcblxufVxuXG4vLyBjaGVjayBpZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgbG9jYWxseSBpbnNpZGUgdGhlIHBvbHlnb25cbmZ1bmN0aW9uIGxvY2FsbHlJbnNpZGUoIGEsIGIgKSB7XG5cblx0cmV0dXJuIGFyZWEoIGEucHJldiwgYSwgYS5uZXh0ICkgPCAwID9cblx0XHRhcmVhKCBhLCBiLCBhLm5leHQgKSA+PSAwICYmIGFyZWEoIGEsIGEucHJldiwgYiApID49IDAgOlxuXHRcdGFyZWEoIGEsIGIsIGEucHJldiApIDwgMCB8fCBhcmVhKCBhLCBhLm5leHQsIGIgKSA8IDA7XG5cbn1cblxuLy8gY2hlY2sgaWYgdGhlIG1pZGRsZSBwb2ludCBvZiBhIHBvbHlnb24gZGlhZ29uYWwgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG5mdW5jdGlvbiBtaWRkbGVJbnNpZGUoIGEsIGIgKSB7XG5cblx0dmFyIHAgPSBhLFxuXHRcdGluc2lkZSA9IGZhbHNlLFxuXHRcdHB4ID0gKCBhLnggKyBiLnggKSAvIDIsXG5cdFx0cHkgPSAoIGEueSArIGIueSApIC8gMjtcblx0ZG8ge1xuXG5cdFx0aWYgKCAoICggcC55ID4gcHkgKSAhPT0gKCBwLm5leHQueSA+IHB5ICkgKSAmJiBwLm5leHQueSAhPT0gcC55ICYmXG5cdFx0XHRcdCggcHggPCAoIHAubmV4dC54IC0gcC54ICkgKiAoIHB5IC0gcC55ICkgLyAoIHAubmV4dC55IC0gcC55ICkgKyBwLnggKSApXG5cdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcblx0XHRwID0gcC5uZXh0O1xuXG5cdH0gd2hpbGUgKCBwICE9PSBhICk7XG5cblx0cmV0dXJuIGluc2lkZTtcblxufVxuXG4vLyBsaW5rIHR3byBwb2x5Z29uIHZlcnRpY2VzIHdpdGggYSBicmlkZ2U7IGlmIHRoZSB2ZXJ0aWNlcyBiZWxvbmcgdG8gdGhlIHNhbWUgcmluZywgaXQgc3BsaXRzIHBvbHlnb24gaW50byB0d287XG4vLyBpZiBvbmUgYmVsb25ncyB0byB0aGUgb3V0ZXIgcmluZyBhbmQgYW5vdGhlciB0byBhIGhvbGUsIGl0IG1lcmdlcyBpdCBpbnRvIGEgc2luZ2xlIHJpbmdcbmZ1bmN0aW9uIHNwbGl0UG9seWdvbiggYSwgYiApIHtcblxuXHR2YXIgYTIgPSBuZXcgTm9kZSggYS5pLCBhLngsIGEueSApLFxuXHRcdGIyID0gbmV3IE5vZGUoIGIuaSwgYi54LCBiLnkgKSxcblx0XHRhbiA9IGEubmV4dCxcblx0XHRicCA9IGIucHJldjtcblxuXHRhLm5leHQgPSBiO1xuXHRiLnByZXYgPSBhO1xuXG5cdGEyLm5leHQgPSBhbjtcblx0YW4ucHJldiA9IGEyO1xuXG5cdGIyLm5leHQgPSBhMjtcblx0YTIucHJldiA9IGIyO1xuXG5cdGJwLm5leHQgPSBiMjtcblx0YjIucHJldiA9IGJwO1xuXG5cdHJldHVybiBiMjtcblxufVxuXG4vLyBjcmVhdGUgYSBub2RlIGFuZCBvcHRpb25hbGx5IGxpbmsgaXQgd2l0aCBwcmV2aW91cyBvbmUgKGluIGEgY2lyY3VsYXIgZG91Ymx5IGxpbmtlZCBsaXN0KVxuZnVuY3Rpb24gaW5zZXJ0Tm9kZSggaSwgeCwgeSwgbGFzdCApIHtcblxuXHR2YXIgcCA9IG5ldyBOb2RlKCBpLCB4LCB5ICk7XG5cblx0aWYgKCAhIGxhc3QgKSB7XG5cblx0XHRwLnByZXYgPSBwO1xuXHRcdHAubmV4dCA9IHA7XG5cblx0fSBlbHNlIHtcblxuXHRcdHAubmV4dCA9IGxhc3QubmV4dDtcblx0XHRwLnByZXYgPSBsYXN0O1xuXHRcdGxhc3QubmV4dC5wcmV2ID0gcDtcblx0XHRsYXN0Lm5leHQgPSBwO1xuXG5cdH1cblxuXHRyZXR1cm4gcDtcblxufVxuXG5mdW5jdGlvbiByZW1vdmVOb2RlKCBwICkge1xuXG5cdHAubmV4dC5wcmV2ID0gcC5wcmV2O1xuXHRwLnByZXYubmV4dCA9IHAubmV4dDtcblxuXHRpZiAoIHAucHJldlogKSBwLnByZXZaLm5leHRaID0gcC5uZXh0Wjtcblx0aWYgKCBwLm5leHRaICkgcC5uZXh0Wi5wcmV2WiA9IHAucHJldlo7XG5cbn1cblxuZnVuY3Rpb24gTm9kZSggaSwgeCwgeSApIHtcblxuXHQvLyB2ZXJ0ZXggaW5kZXggaW4gY29vcmRpbmF0ZXMgYXJyYXlcblx0dGhpcy5pID0gaTtcblxuXHQvLyB2ZXJ0ZXggY29vcmRpbmF0ZXNcblx0dGhpcy54ID0geDtcblx0dGhpcy55ID0geTtcblxuXHQvLyBwcmV2aW91cyBhbmQgbmV4dCB2ZXJ0ZXggbm9kZXMgaW4gYSBwb2x5Z29uIHJpbmdcblx0dGhpcy5wcmV2ID0gbnVsbDtcblx0dGhpcy5uZXh0ID0gbnVsbDtcblxuXHQvLyB6LW9yZGVyIGN1cnZlIHZhbHVlXG5cdHRoaXMueiA9IG51bGw7XG5cblx0Ly8gcHJldmlvdXMgYW5kIG5leHQgbm9kZXMgaW4gei1vcmRlclxuXHR0aGlzLnByZXZaID0gbnVsbDtcblx0dGhpcy5uZXh0WiA9IG51bGw7XG5cblx0Ly8gaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBpcyBhIHN0ZWluZXIgcG9pbnRcblx0dGhpcy5zdGVpbmVyID0gZmFsc2U7XG5cbn1cblxuZnVuY3Rpb24gc2lnbmVkQXJlYSggZGF0YSwgc3RhcnQsIGVuZCwgZGltICkge1xuXG5cdHZhciBzdW0gPSAwO1xuXHRmb3IgKCB2YXIgaSA9IHN0YXJ0LCBqID0gZW5kIC0gZGltOyBpIDwgZW5kOyBpICs9IGRpbSApIHtcblxuXHRcdHN1bSArPSAoIGRhdGFbIGogXSAtIGRhdGFbIGkgXSApICogKCBkYXRhWyBpICsgMSBdICsgZGF0YVsgaiArIDEgXSApO1xuXHRcdGogPSBpO1xuXG5cdH1cblxuXHRyZXR1cm4gc3VtO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICovXG5cbnZhciBTaGFwZVV0aWxzID0ge1xuXG5cdC8vIGNhbGN1bGF0ZSBhcmVhIG9mIHRoZSBjb250b3VyIHBvbHlnb25cblxuXHRhcmVhOiBmdW5jdGlvbiAoIGNvbnRvdXIgKSB7XG5cblx0XHR2YXIgbiA9IGNvbnRvdXIubGVuZ3RoO1xuXHRcdHZhciBhID0gMC4wO1xuXG5cdFx0Zm9yICggdmFyIHAgPSBuIC0gMSwgcSA9IDA7IHEgPCBuOyBwID0gcSArKyApIHtcblxuXHRcdFx0YSArPSBjb250b3VyWyBwIF0ueCAqIGNvbnRvdXJbIHEgXS55IC0gY29udG91clsgcSBdLnggKiBjb250b3VyWyBwIF0ueTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhICogMC41O1xuXG5cdH0sXG5cblx0aXNDbG9ja1dpc2U6IGZ1bmN0aW9uICggcHRzICkge1xuXG5cdFx0cmV0dXJuIFNoYXBlVXRpbHMuYXJlYSggcHRzICkgPCAwO1xuXG5cdH0sXG5cblx0dHJpYW5ndWxhdGVTaGFwZTogZnVuY3Rpb24gKCBjb250b3VyLCBob2xlcyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlcyA9IFtdOyAvLyBmbGF0IGFycmF5IG9mIHZlcnRpY2VzIGxpa2UgWyB4MCx5MCwgeDEseTEsIHgyLHkyLCAuLi4gXVxuXHRcdHZhciBob2xlSW5kaWNlcyA9IFtdOyAvLyBhcnJheSBvZiBob2xlIGluZGljZXNcblx0XHR2YXIgZmFjZXMgPSBbXTsgLy8gZmluYWwgYXJyYXkgb2YgdmVydGV4IGluZGljZXMgbGlrZSBbIFsgYSxiLGQgXSwgWyBiLGMsZCBdIF1cblxuXHRcdHJlbW92ZUR1cEVuZFB0cyggY29udG91ciApO1xuXHRcdGFkZENvbnRvdXIoIHZlcnRpY2VzLCBjb250b3VyICk7XG5cblx0XHQvL1xuXG5cdFx0dmFyIGhvbGVJbmRleCA9IGNvbnRvdXIubGVuZ3RoO1xuXG5cdFx0aG9sZXMuZm9yRWFjaCggcmVtb3ZlRHVwRW5kUHRzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBob2xlcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdGhvbGVJbmRpY2VzLnB1c2goIGhvbGVJbmRleCApO1xuXHRcdFx0aG9sZUluZGV4ICs9IGhvbGVzWyBpIF0ubGVuZ3RoO1xuXHRcdFx0YWRkQ29udG91ciggdmVydGljZXMsIGhvbGVzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgdHJpYW5nbGVzID0gRWFyY3V0LnRyaWFuZ3VsYXRlKCB2ZXJ0aWNlcywgaG9sZUluZGljZXMgKTtcblxuXHRcdC8vXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0cmlhbmdsZXMubGVuZ3RoOyBpICs9IDMgKSB7XG5cblx0XHRcdGZhY2VzLnB1c2goIHRyaWFuZ2xlcy5zbGljZSggaSwgaSArIDMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhY2VzO1xuXG5cdH1cblxufTtcblxuZnVuY3Rpb24gcmVtb3ZlRHVwRW5kUHRzKCBwb2ludHMgKSB7XG5cblx0dmFyIGwgPSBwb2ludHMubGVuZ3RoO1xuXG5cdGlmICggbCA+IDIgJiYgcG9pbnRzWyBsIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdHBvaW50cy5wb3AoKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gYWRkQ29udG91ciggdmVydGljZXMsIGNvbnRvdXIgKSB7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY29udG91ci5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCBjb250b3VyWyBpIF0ueCApO1xuXHRcdHZlcnRpY2VzLnB1c2goIGNvbnRvdXJbIGkgXS55ICk7XG5cblx0fVxuXG59XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICpcbiAqIENyZWF0ZXMgZXh0cnVkZWQgZ2VvbWV0cnkgZnJvbSBhIHBhdGggc2hhcGUuXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqXG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICogIHN0ZXBzOiA8aW50PiwgLy8gbnVtYmVyIG9mIHBvaW50cyBmb3Igei1zaWRlIGV4dHJ1c2lvbnMgLyB1c2VkIGZvciBzdWJkaXZpZGluZyBzZWdtZW50cyBvZiBleHRydWRlIHNwbGluZSB0b29cbiAqICBkZXB0aDogPGZsb2F0PiwgLy8gRGVwdGggdG8gZXh0cnVkZSB0aGUgc2hhcGVcbiAqXG4gKiAgYmV2ZWxFbmFibGVkOiA8Ym9vbD4sIC8vIHR1cm4gb24gYmV2ZWxcbiAqICBiZXZlbFRoaWNrbmVzczogPGZsb2F0PiwgLy8gaG93IGRlZXAgaW50byB0aGUgb3JpZ2luYWwgc2hhcGUgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHNoYXBlIG91dGxpbmUgKGluY2x1ZGluZyBiZXZlbE9mZnNldCkgaXMgYmV2ZWxcbiAqICBiZXZlbE9mZnNldDogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHNoYXBlIG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydFxuICogIGJldmVsU2VnbWVudHM6IDxpbnQ+LCAvLyBudW1iZXIgb2YgYmV2ZWwgbGF5ZXJzXG4gKlxuICogIGV4dHJ1ZGVQYXRoOiA8VEhSRUUuQ3VydmU+IC8vIGN1cnZlIHRvIGV4dHJ1ZGUgc2hhcGUgYWxvbmdcbiAqXG4gKiAgVVZHZW5lcmF0b3I6IDxPYmplY3Q+IC8vIG9iamVjdCB0aGF0IHByb3ZpZGVzIFVWIGdlbmVyYXRvciBmdW5jdGlvbnNcbiAqXG4gKiB9XG4gKi9cblxuLy8gRXh0cnVkZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIEV4dHJ1ZGVHZW9tZXRyeSggc2hhcGVzLCBvcHRpb25zICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRXh0cnVkZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0c2hhcGVzOiBzaGFwZXMsXG5cdFx0b3B0aW9uczogb3B0aW9uc1xuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRXh0cnVkZUdlb21ldHJ5O1xuXG5FeHRydWRlR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXHR2YXIgb3B0aW9ucyA9IHRoaXMucGFyYW1ldGVycy5vcHRpb25zO1xuXG5cdHJldHVybiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApO1xuXG59O1xuXG4vLyBFeHRydWRlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gRXh0cnVkZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIG9wdGlvbnMgKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdFeHRydWRlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRvcHRpb25zOiBvcHRpb25zXG5cdH07XG5cblx0c2hhcGVzID0gQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPyBzaGFwZXMgOiBbIHNoYXBlcyBdO1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0dmFyIHZlcnRpY2VzQXJyYXkgPSBbXTtcblx0dmFyIHV2QXJyYXkgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzaGFwZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXHRcdGFkZFNoYXBlKCBzaGFwZSApO1xuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXNBcnJheSwgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZBcnJheSwgMiApICk7XG5cblx0dGhpcy5jb21wdXRlVmVydGV4Tm9ybWFscygpO1xuXG5cdC8vIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBwbGFjZWhvbGRlciA9IFtdO1xuXG5cdFx0Ly8gb3B0aW9uc1xuXG5cdFx0dmFyIGN1cnZlU2VnbWVudHMgPSBvcHRpb25zLmN1cnZlU2VnbWVudHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY3VydmVTZWdtZW50cyA6IDEyO1xuXHRcdHZhciBzdGVwcyA9IG9wdGlvbnMuc3RlcHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuc3RlcHMgOiAxO1xuXHRcdHZhciBkZXB0aCA9IG9wdGlvbnMuZGVwdGggIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZGVwdGggOiAxMDA7XG5cblx0XHR2YXIgYmV2ZWxFbmFibGVkID0gb3B0aW9ucy5iZXZlbEVuYWJsZWQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxFbmFibGVkIDogdHJ1ZTtcblx0XHR2YXIgYmV2ZWxUaGlja25lc3MgPSBvcHRpb25zLmJldmVsVGhpY2tuZXNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsVGhpY2tuZXNzIDogNjtcblx0XHR2YXIgYmV2ZWxTaXplID0gb3B0aW9ucy5iZXZlbFNpemUgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxTaXplIDogYmV2ZWxUaGlja25lc3MgLSAyO1xuXHRcdHZhciBiZXZlbE9mZnNldCA9IG9wdGlvbnMuYmV2ZWxPZmZzZXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuYmV2ZWxPZmZzZXQgOiAwO1xuXHRcdHZhciBiZXZlbFNlZ21lbnRzID0gb3B0aW9ucy5iZXZlbFNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJldmVsU2VnbWVudHMgOiAzO1xuXG5cdFx0dmFyIGV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdHZhciB1dmdlbiA9IG9wdGlvbnMuVVZHZW5lcmF0b3IgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuVVZHZW5lcmF0b3IgOiBXb3JsZFVWR2VuZXJhdG9yO1xuXG5cdFx0Ly8gZGVwcmVjYXRlZCBvcHRpb25zXG5cblx0XHRpZiAoIG9wdGlvbnMuYW1vdW50ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeTogYW1vdW50IGhhcyBiZWVuIHJlbmFtZWQgdG8gZGVwdGguJyApO1xuXHRcdFx0ZGVwdGggPSBvcHRpb25zLmFtb3VudDtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHR2YXIgZXh0cnVkZVB0cywgZXh0cnVkZUJ5UGF0aCA9IGZhbHNlO1xuXHRcdHZhciBzcGxpbmVUdWJlLCBiaW5vcm1hbCwgbm9ybWFsLCBwb3NpdGlvbjI7XG5cblx0XHRpZiAoIGV4dHJ1ZGVQYXRoICkge1xuXG5cdFx0XHRleHRydWRlUHRzID0gZXh0cnVkZVBhdGguZ2V0U3BhY2VkUG9pbnRzKCBzdGVwcyApO1xuXG5cdFx0XHRleHRydWRlQnlQYXRoID0gdHJ1ZTtcblx0XHRcdGJldmVsRW5hYmxlZCA9IGZhbHNlOyAvLyBiZXZlbHMgbm90IHN1cHBvcnRlZCBmb3IgcGF0aCBleHRydXNpb25cblxuXHRcdFx0Ly8gU0VUVVAgVE5CIHZhcmlhYmxlc1xuXG5cdFx0XHQvLyBUT0RPMSAtIGhhdmUgYSAuaXNDbG9zZWQgaW4gc3BsaW5lP1xuXG5cdFx0XHRzcGxpbmVUdWJlID0gZXh0cnVkZVBhdGguY29tcHV0ZUZyZW5ldEZyYW1lcyggc3RlcHMsIGZhbHNlICk7XG5cblx0XHRcdC8vIGNvbnNvbGUubG9nKHNwbGluZVR1YmUsICdzcGxpbmVUdWJlJywgc3BsaW5lVHViZS5ub3JtYWxzLmxlbmd0aCwgJ3N0ZXBzJywgc3RlcHMsICdleHRydWRlUHRzJywgZXh0cnVkZVB0cy5sZW5ndGgpO1xuXG5cdFx0XHRiaW5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0XHRub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXHRcdFx0cG9zaXRpb24yID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdC8vIFNhZmVndWFyZHMgaWYgYmV2ZWxzIGFyZSBub3QgZW5hYmxlZFxuXG5cdFx0aWYgKCAhIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0YmV2ZWxTZWdtZW50cyA9IDA7XG5cdFx0XHRiZXZlbFRoaWNrbmVzcyA9IDA7XG5cdFx0XHRiZXZlbFNpemUgPSAwO1xuXHRcdFx0YmV2ZWxPZmZzZXQgPSAwO1xuXG5cdFx0fVxuXG5cdFx0Ly8gVmFyaWFibGVzIGluaXRpYWxpemF0aW9uXG5cblx0XHR2YXIgYWhvbGUsIGgsIGhsOyAvLyBsb29waW5nIG9mIGhvbGVzXG5cblx0XHR2YXIgc2hhcGVQb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgdmVydGljZXMgPSBzaGFwZVBvaW50cy5zaGFwZTtcblx0XHR2YXIgaG9sZXMgPSBzaGFwZVBvaW50cy5ob2xlcztcblxuXHRcdHZhciByZXZlcnNlID0gISBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCB2ZXJ0aWNlcyApO1xuXG5cdFx0aWYgKCByZXZlcnNlICkge1xuXG5cdFx0XHR2ZXJ0aWNlcyA9IHZlcnRpY2VzLnJldmVyc2UoKTtcblxuXHRcdFx0Ly8gTWF5YmUgd2Ugc2hvdWxkIGFsc28gY2hlY2sgaWYgaG9sZXMgYXJlIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24sIGp1c3QgdG8gYmUgc2FmZSAuLi5cblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXG5cdFx0XHRcdGlmICggU2hhcGVVdGlscy5pc0Nsb2NrV2lzZSggYWhvbGUgKSApIHtcblxuXHRcdFx0XHRcdGhvbGVzWyBoIF0gPSBhaG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblxuXHRcdHZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggdmVydGljZXMsIGhvbGVzICk7XG5cblx0XHQvKiBWZXJ0aWNlcyAqL1xuXG5cdFx0dmFyIGNvbnRvdXIgPSB2ZXJ0aWNlczsgLy8gdmVydGljZXMgaGFzIGFsbCBwb2ludHMgYnV0IGNvbnRvdXIgaGFzIG9ubHkgcG9pbnRzIG9mIGNpcmN1bWZlcmVuY2VcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KCBhaG9sZSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBzY2FsZVB0MiggcHQsIHZlYywgc2l6ZSApIHtcblxuXHRcdFx0aWYgKCAhIHZlYyApIGNvbnNvbGUuZXJyb3IoIFwiVEhSRUUuRXh0cnVkZUdlb21ldHJ5OiB2ZWMgZG9lcyBub3QgZXhpc3RcIiApO1xuXG5cdFx0XHRyZXR1cm4gdmVjLmNsb25lKCkubXVsdGlwbHlTY2FsYXIoIHNpemUgKS5hZGQoIHB0ICk7XG5cblx0XHR9XG5cblx0XHR2YXIgYiwgYnMsIHQsIHosXG5cdFx0XHR2ZXJ0LCB2bGVuID0gdmVydGljZXMubGVuZ3RoLFxuXHRcdFx0ZmFjZSwgZmxlbiA9IGZhY2VzLmxlbmd0aDtcblxuXG5cdFx0Ly8gRmluZCBkaXJlY3Rpb25zIGZvciBwb2ludCBtb3ZlbWVudFxuXG5cblx0XHRmdW5jdGlvbiBnZXRCZXZlbFZlYyggaW5QdCwgaW5QcmV2LCBpbk5leHQgKSB7XG5cblx0XHRcdC8vIGNvbXB1dGVzIGZvciBpblB0IHRoZSBjb3JyZXNwb25kaW5nIHBvaW50IGluUHQnIG9uIGEgbmV3IGNvbnRvdXJcblx0XHRcdC8vICAgc2hpZnRlZCBieSAxIHVuaXQgKGxlbmd0aCBvZiBub3JtYWxpemVkIHZlY3RvcikgdG8gdGhlIGxlZnRcblx0XHRcdC8vIGlmIHdlIHdhbGsgYWxvbmcgY29udG91ciBjbG9ja3dpc2UsIHRoaXMgbmV3IGNvbnRvdXIgaXMgb3V0c2lkZSB0aGUgb2xkIG9uZVxuXHRcdFx0Ly9cblx0XHRcdC8vIGluUHQnIGlzIHRoZSBpbnRlcnNlY3Rpb24gb2YgdGhlIHR3byBsaW5lcyBwYXJhbGxlbCB0byB0aGUgdHdvXG5cdFx0XHQvLyAgYWRqYWNlbnQgZWRnZXMgb2YgaW5QdCBhdCBhIGRpc3RhbmNlIG9mIDEgdW5pdCBvbiB0aGUgbGVmdCBzaWRlLlxuXG5cdFx0XHR2YXIgdl90cmFuc194LCB2X3RyYW5zX3ksIHNocmlua19ieTsgLy8gcmVzdWx0aW5nIHRyYW5zbGF0aW9uIHZlY3RvciBmb3IgaW5QdFxuXG5cdFx0XHQvLyBnb29kIHJlYWRpbmcgZm9yIGdlb21ldHJ5IGFsZ29yaXRobXMgKGhlcmU6IGxpbmUtbGluZSBpbnRlcnNlY3Rpb24pXG5cdFx0XHQvLyBodHRwOi8vZ2VvbWFsZ29yaXRobXMuY29tL2EwNS1faW50ZXJzZWN0LTEuaHRtbFxuXG5cdFx0XHR2YXIgdl9wcmV2X3ggPSBpblB0LnggLSBpblByZXYueCxcblx0XHRcdFx0dl9wcmV2X3kgPSBpblB0LnkgLSBpblByZXYueTtcblx0XHRcdHZhciB2X25leHRfeCA9IGluTmV4dC54IC0gaW5QdC54LFxuXHRcdFx0XHR2X25leHRfeSA9IGluTmV4dC55IC0gaW5QdC55O1xuXG5cdFx0XHR2YXIgdl9wcmV2X2xlbnNxID0gKCB2X3ByZXZfeCAqIHZfcHJldl94ICsgdl9wcmV2X3kgKiB2X3ByZXZfeSApO1xuXG5cdFx0XHQvLyBjaGVjayBmb3IgY29sbGluZWFyIGVkZ2VzXG5cdFx0XHR2YXIgY29sbGluZWFyMCA9ICggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0aWYgKCBNYXRoLmFicyggY29sbGluZWFyMCApID4gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0Ly8gbm90IGNvbGxpbmVhclxuXG5cdFx0XHRcdC8vIGxlbmd0aCBvZiB2ZWN0b3JzIGZvciBub3JtYWxpemluZ1xuXG5cdFx0XHRcdHZhciB2X3ByZXZfbGVuID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgKTtcblx0XHRcdFx0dmFyIHZfbmV4dF9sZW4gPSBNYXRoLnNxcnQoIHZfbmV4dF94ICogdl9uZXh0X3ggKyB2X25leHRfeSAqIHZfbmV4dF95ICk7XG5cblx0XHRcdFx0Ly8gc2hpZnQgYWRqYWNlbnQgcG9pbnRzIGJ5IHVuaXQgdmVjdG9ycyB0byB0aGUgbGVmdFxuXG5cdFx0XHRcdHZhciBwdFByZXZTaGlmdF94ID0gKCBpblByZXYueCAtIHZfcHJldl95IC8gdl9wcmV2X2xlbiApO1xuXHRcdFx0XHR2YXIgcHRQcmV2U2hpZnRfeSA9ICggaW5QcmV2LnkgKyB2X3ByZXZfeCAvIHZfcHJldl9sZW4gKTtcblxuXHRcdFx0XHR2YXIgcHROZXh0U2hpZnRfeCA9ICggaW5OZXh0LnggLSB2X25leHRfeSAvIHZfbmV4dF9sZW4gKTtcblx0XHRcdFx0dmFyIHB0TmV4dFNoaWZ0X3kgPSAoIGluTmV4dC55ICsgdl9uZXh0X3ggLyB2X25leHRfbGVuICk7XG5cblx0XHRcdFx0Ly8gc2NhbGluZyBmYWN0b3IgZm9yIHZfcHJldiB0byBpbnRlcnNlY3Rpb24gcG9pbnRcblxuXHRcdFx0XHR2YXIgc2YgPSAoICggcHROZXh0U2hpZnRfeCAtIHB0UHJldlNoaWZ0X3ggKSAqIHZfbmV4dF95IC1cblx0XHRcdFx0XHRcdCggcHROZXh0U2hpZnRfeSAtIHB0UHJldlNoaWZ0X3kgKSAqIHZfbmV4dF94ICkgL1xuXHRcdFx0XHRcdCggdl9wcmV2X3ggKiB2X25leHRfeSAtIHZfcHJldl95ICogdl9uZXh0X3ggKTtcblxuXHRcdFx0XHQvLyB2ZWN0b3IgZnJvbSBpblB0IHRvIGludGVyc2VjdGlvbiBwb2ludFxuXG5cdFx0XHRcdHZfdHJhbnNfeCA9ICggcHRQcmV2U2hpZnRfeCArIHZfcHJldl94ICogc2YgLSBpblB0LnggKTtcblx0XHRcdFx0dl90cmFuc195ID0gKCBwdFByZXZTaGlmdF95ICsgdl9wcmV2X3kgKiBzZiAtIGluUHQueSApO1xuXG5cdFx0XHRcdC8vIERvbid0IG5vcm1hbGl6ZSEsIG90aGVyd2lzZSBzaGFycCBjb3JuZXJzIGJlY29tZSB1Z2x5XG5cdFx0XHRcdC8vICBidXQgcHJldmVudCBjcmF6eSBzcGlrZXNcblx0XHRcdFx0dmFyIHZfdHJhbnNfbGVuc3EgPSAoIHZfdHJhbnNfeCAqIHZfdHJhbnNfeCArIHZfdHJhbnNfeSAqIHZfdHJhbnNfeSApO1xuXHRcdFx0XHRpZiAoIHZfdHJhbnNfbGVuc3EgPD0gMiApIHtcblxuXHRcdFx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194LCB2X3RyYW5zX3kgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3RyYW5zX2xlbnNxIC8gMiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBoYW5kbGUgc3BlY2lhbCBjYXNlIG9mIGNvbGxpbmVhciBlZGdlc1xuXG5cdFx0XHRcdHZhciBkaXJlY3Rpb25fZXEgPSBmYWxzZTsgLy8gYXNzdW1lczogb3Bwb3NpdGVcblx0XHRcdFx0aWYgKCB2X3ByZXZfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0aWYgKCB2X25leHRfeCA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRpZiAoIHZfcHJldl94IDwgLSBOdW1iZXIuRVBTSUxPTiApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCB2X25leHRfeCA8IC0gTnVtYmVyLkVQU0lMT04gKSB7XG5cblx0XHRcdFx0XHRcdFx0ZGlyZWN0aW9uX2VxID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBNYXRoLnNpZ24oIHZfcHJldl95ICkgPT09IE1hdGguc2lnbiggdl9uZXh0X3kgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRkaXJlY3Rpb25fZXEgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggZGlyZWN0aW9uX2VxICkge1xuXG5cdFx0XHRcdFx0Ly8gY29uc29sZS5sb2coXCJXYXJuaW5nOiBsaW5lcyBhcmUgYSBzdHJhaWdodCBzZXF1ZW5jZVwiKTtcblx0XHRcdFx0XHR2X3RyYW5zX3ggPSAtIHZfcHJldl95O1xuXHRcdFx0XHRcdHZfdHJhbnNfeSA9IHZfcHJldl94O1xuXHRcdFx0XHRcdHNocmlua19ieSA9IE1hdGguc3FydCggdl9wcmV2X2xlbnNxICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwiV2FybmluZzogbGluZXMgYXJlIGEgc3RyYWlnaHQgc3Bpa2VcIik7XG5cdFx0XHRcdFx0dl90cmFuc194ID0gdl9wcmV2X3g7XG5cdFx0XHRcdFx0dl90cmFuc195ID0gdl9wcmV2X3k7XG5cdFx0XHRcdFx0c2hyaW5rX2J5ID0gTWF0aC5zcXJ0KCB2X3ByZXZfbGVuc3EgLyAyICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBuZXcgVmVjdG9yMiggdl90cmFuc194IC8gc2hyaW5rX2J5LCB2X3RyYW5zX3kgLyBzaHJpbmtfYnkgKTtcblxuXHRcdH1cblxuXG5cdFx0dmFyIGNvbnRvdXJNb3ZlbWVudHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aCwgaiA9IGlsIC0gMSwgayA9IGkgKyAxOyBpIDwgaWw7IGkgKyssIGogKyssIGsgKysgKSB7XG5cblx0XHRcdGlmICggaiA9PT0gaWwgKSBqID0gMDtcblx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0Ly8gIChqKS0tLShpKS0tLShrKVxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ2ksaixrJywgaSwgaiAsIGspXG5cblx0XHRcdGNvbnRvdXJNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBjb250b3VyWyBpIF0sIGNvbnRvdXJbIGogXSwgY29udG91clsgayBdICk7XG5cblx0XHR9XG5cblx0XHR2YXIgaG9sZXNNb3ZlbWVudHMgPSBbXSxcblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMsIHZlcnRpY2VzTW92ZW1lbnRzID0gY29udG91ck1vdmVtZW50cy5jb25jYXQoKTtcblxuXHRcdGZvciAoIGggPSAwLCBobCA9IGhvbGVzLmxlbmd0aDsgaCA8IGhsOyBoICsrICkge1xuXG5cdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cblx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBbXTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGlsID0gYWhvbGUubGVuZ3RoLCBqID0gaWwgLSAxLCBrID0gaSArIDE7IGkgPCBpbDsgaSArKywgaiArKywgayArKyApIHtcblxuXHRcdFx0XHRpZiAoIGogPT09IGlsICkgaiA9IDA7XG5cdFx0XHRcdGlmICggayA9PT0gaWwgKSBrID0gMDtcblxuXHRcdFx0XHQvLyAgKGopLS0tKGkpLS0tKGspXG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHNbIGkgXSA9IGdldEJldmVsVmVjKCBhaG9sZVsgaSBdLCBhaG9sZVsgaiBdLCBhaG9sZVsgayBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0aG9sZXNNb3ZlbWVudHMucHVzaCggb25lSG9sZU1vdmVtZW50cyApO1xuXHRcdFx0dmVydGljZXNNb3ZlbWVudHMgPSB2ZXJ0aWNlc01vdmVtZW50cy5jb25jYXQoIG9uZUhvbGVNb3ZlbWVudHMgKTtcblxuXHRcdH1cblxuXG5cdFx0Ly8gTG9vcCBiZXZlbFNlZ21lbnRzLCAxIGZvciB0aGUgZnJvbnQsIDEgZm9yIHRoZSBiYWNrXG5cblx0XHRmb3IgKCBiID0gMDsgYiA8IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cblx0XHRcdC8vZm9yICggYiA9IGJldmVsU2VnbWVudHM7IGIgPiAwOyBiIC0tICkge1xuXG5cdFx0XHR0ID0gYiAvIGJldmVsU2VnbWVudHM7XG5cdFx0XHR6ID0gYmV2ZWxUaGlja25lc3MgKiBNYXRoLmNvcyggdCAqIE1hdGguUEkgLyAyICk7XG5cdFx0XHRicyA9IGJldmVsU2l6ZSAqIE1hdGguc2luKCB0ICogTWF0aC5QSSAvIDIgKSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0XHQvLyBjb250cmFjdCBzaGFwZVxuXG5cdFx0XHRmb3IgKCBpID0gMCwgaWwgPSBjb250b3VyLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdHZlcnQgPSBzY2FsZVB0MiggY29udG91clsgaSBdLCBjb250b3VyTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIC0geiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHR2KCB2ZXJ0LngsIHZlcnQueSwgLSB6ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRicyA9IGJldmVsU2l6ZSArIGJldmVsT2Zmc2V0O1xuXG5cdFx0Ly8gQmFjayBmYWNpbmcgdmVydGljZXNcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0dmVydCA9IGJldmVsRW5hYmxlZCA/IHNjYWxlUHQyKCB2ZXJ0aWNlc1sgaSBdLCB2ZXJ0aWNlc01vdmVtZW50c1sgaSBdLCBicyApIDogdmVydGljZXNbIGkgXTtcblxuXHRcdFx0aWYgKCAhIGV4dHJ1ZGVCeVBhdGggKSB7XG5cblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIDAgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyB2KCB2ZXJ0LngsIHZlcnQueSArIGV4dHJ1ZGVQdHNbIDAgXS55LCBleHRydWRlUHRzWyAwIF0ueCApO1xuXG5cdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0Ymlub3JtYWwuY29weSggc3BsaW5lVHViZS5iaW5vcm1hbHNbIDAgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnkgKTtcblxuXHRcdFx0XHRwb3NpdGlvbjIuY29weSggZXh0cnVkZVB0c1sgMCBdICkuYWRkKCBub3JtYWwgKS5hZGQoIGJpbm9ybWFsICk7XG5cblx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBBZGQgc3RlcHBlZCB2ZXJ0aWNlcy4uLlxuXHRcdC8vIEluY2x1ZGluZyBmcm9udCBmYWNpbmcgdmVydGljZXNcblxuXHRcdHZhciBzO1xuXG5cdFx0Zm9yICggcyA9IDE7IHMgPD0gc3RlcHM7IHMgKysgKSB7XG5cblx0XHRcdGZvciAoIGkgPSAwOyBpIDwgdmxlbjsgaSArKyApIHtcblxuXHRcdFx0XHR2ZXJ0ID0gYmV2ZWxFbmFibGVkID8gc2NhbGVQdDIoIHZlcnRpY2VzWyBpIF0sIHZlcnRpY2VzTW92ZW1lbnRzWyBpIF0sIGJzICkgOiB2ZXJ0aWNlc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggISBleHRydWRlQnlQYXRoICkge1xuXG5cdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoIC8gc3RlcHMgKiBzICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHYoIHZlcnQueCwgdmVydC55ICsgZXh0cnVkZVB0c1sgcyAtIDEgXS55LCBleHRydWRlUHRzWyBzIC0gMSBdLnggKTtcblxuXHRcdFx0XHRcdG5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLm5vcm1hbHNbIHMgXSApLm11bHRpcGx5U2NhbGFyKCB2ZXJ0LnggKTtcblx0XHRcdFx0XHRiaW5vcm1hbC5jb3B5KCBzcGxpbmVUdWJlLmJpbm9ybWFsc1sgcyBdICkubXVsdGlwbHlTY2FsYXIoIHZlcnQueSApO1xuXG5cdFx0XHRcdFx0cG9zaXRpb24yLmNvcHkoIGV4dHJ1ZGVQdHNbIHMgXSApLmFkZCggbm9ybWFsICkuYWRkKCBiaW5vcm1hbCApO1xuXG5cdFx0XHRcdFx0diggcG9zaXRpb24yLngsIHBvc2l0aW9uMi55LCBwb3NpdGlvbjIueiApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cblx0XHQvLyBBZGQgYmV2ZWwgc2VnbWVudHMgcGxhbmVzXG5cblx0XHQvL2ZvciAoIGIgPSAxOyBiIDw9IGJldmVsU2VnbWVudHM7IGIgKysgKSB7XG5cdFx0Zm9yICggYiA9IGJldmVsU2VnbWVudHMgLSAxOyBiID49IDA7IGIgLS0gKSB7XG5cblx0XHRcdHQgPSBiIC8gYmV2ZWxTZWdtZW50cztcblx0XHRcdHogPSBiZXZlbFRoaWNrbmVzcyAqIE1hdGguY29zKCB0ICogTWF0aC5QSSAvIDIgKTtcblx0XHRcdGJzID0gYmV2ZWxTaXplICogTWF0aC5zaW4oIHQgKiBNYXRoLlBJIC8gMiApICsgYmV2ZWxPZmZzZXQ7XG5cblx0XHRcdC8vIGNvbnRyYWN0IHNoYXBlXG5cblx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGNvbnRvdXIubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBjb250b3VyWyBpIF0sIGNvbnRvdXJNb3ZlbWVudHNbIGkgXSwgYnMgKTtcblx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGV4cGFuZCBob2xlc1xuXG5cdFx0XHRmb3IgKCBoID0gMCwgaGwgPSBob2xlcy5sZW5ndGg7IGggPCBobDsgaCArKyApIHtcblxuXHRcdFx0XHRhaG9sZSA9IGhvbGVzWyBoIF07XG5cdFx0XHRcdG9uZUhvbGVNb3ZlbWVudHMgPSBob2xlc01vdmVtZW50c1sgaCBdO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBpbCA9IGFob2xlLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmVydCA9IHNjYWxlUHQyKCBhaG9sZVsgaSBdLCBvbmVIb2xlTW92ZW1lbnRzWyBpIF0sIGJzICk7XG5cblx0XHRcdFx0XHRpZiAoICEgZXh0cnVkZUJ5UGF0aCApIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnksIGRlcHRoICsgeiApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0diggdmVydC54LCB2ZXJ0LnkgKyBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS55LCBleHRydWRlUHRzWyBzdGVwcyAtIDEgXS54ICsgeiApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0LyogRmFjZXMgKi9cblxuXHRcdC8vIFRvcCBhbmQgYm90dG9tIGZhY2VzXG5cblx0XHRidWlsZExpZEZhY2VzKCk7XG5cblx0XHQvLyBTaWRlcyBmYWNlc1xuXG5cdFx0YnVpbGRTaWRlRmFjZXMoKTtcblxuXG5cdFx0Ly8vLy8gIEludGVybmFsIGZ1bmN0aW9uc1xuXG5cdFx0ZnVuY3Rpb24gYnVpbGRMaWRGYWNlcygpIHtcblxuXHRcdFx0dmFyIHN0YXJ0ID0gdmVydGljZXNBcnJheS5sZW5ndGggLyAzO1xuXG5cdFx0XHRpZiAoIGJldmVsRW5hYmxlZCApIHtcblxuXHRcdFx0XHR2YXIgbGF5ZXIgPSAwOyAvLyBzdGVwcyArIDFcblx0XHRcdFx0dmFyIG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDAgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsYXllciA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cdFx0XHRcdG9mZnNldCA9IHZsZW4gKiBsYXllcjtcblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgb2Zmc2V0LCBmYWNlWyAxIF0gKyBvZmZzZXQsIGZhY2VbIDIgXSArIG9mZnNldCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBCb3R0b20gZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMiBdLCBmYWNlWyAxIF0sIGZhY2VbIDAgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUb3AgZmFjZXNcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGZsZW47IGkgKysgKSB7XG5cblx0XHRcdFx0XHRmYWNlID0gZmFjZXNbIGkgXTtcblx0XHRcdFx0XHRmMyggZmFjZVsgMCBdICsgdmxlbiAqIHN0ZXBzLCBmYWNlWyAxIF0gKyB2bGVuICogc3RlcHMsIGZhY2VbIDIgXSArIHZsZW4gKiBzdGVwcyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRzY29wZS5hZGRHcm91cCggc3RhcnQsIHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMyAtIHN0YXJ0LCAwICk7XG5cblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgZmFjZXMgZm9yIHRoZSB6LXNpZGVzIG9mIHRoZSBzaGFwZVxuXG5cdFx0ZnVuY3Rpb24gYnVpbGRTaWRlRmFjZXMoKSB7XG5cblx0XHRcdHZhciBzdGFydCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciBsYXllcm9mZnNldCA9IDA7XG5cdFx0XHRzaWRld2FsbHMoIGNvbnRvdXIsIGxheWVyb2Zmc2V0ICk7XG5cdFx0XHRsYXllcm9mZnNldCArPSBjb250b3VyLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggaCA9IDAsIGhsID0gaG9sZXMubGVuZ3RoOyBoIDwgaGw7IGggKysgKSB7XG5cblx0XHRcdFx0YWhvbGUgPSBob2xlc1sgaCBdO1xuXHRcdFx0XHRzaWRld2FsbHMoIGFob2xlLCBsYXllcm9mZnNldCApO1xuXG5cdFx0XHRcdC8vLCB0cnVlXG5cdFx0XHRcdGxheWVyb2Zmc2V0ICs9IGFob2xlLmxlbmd0aDtcblxuXHRcdFx0fVxuXG5cblx0XHRcdHNjb3BlLmFkZEdyb3VwKCBzdGFydCwgdmVydGljZXNBcnJheS5sZW5ndGggLyAzIC0gc3RhcnQsIDEgKTtcblxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gc2lkZXdhbGxzKCBjb250b3VyLCBsYXllcm9mZnNldCApIHtcblxuXHRcdFx0dmFyIGosIGs7XG5cdFx0XHRpID0gY29udG91ci5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggLS0gaSA+PSAwICkge1xuXG5cdFx0XHRcdGogPSBpO1xuXHRcdFx0XHRrID0gaSAtIDE7XG5cdFx0XHRcdGlmICggayA8IDAgKSBrID0gY29udG91ci5sZW5ndGggLSAxO1xuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coJ2InLCBpLGosIGktMSwgayx2ZXJ0aWNlcy5sZW5ndGgpO1xuXG5cdFx0XHRcdHZhciBzID0gMCxcblx0XHRcdFx0XHRzbCA9IHN0ZXBzICsgYmV2ZWxTZWdtZW50cyAqIDI7XG5cblx0XHRcdFx0Zm9yICggcyA9IDA7IHMgPCBzbDsgcyArKyApIHtcblxuXHRcdFx0XHRcdHZhciBzbGVuMSA9IHZsZW4gKiBzO1xuXHRcdFx0XHRcdHZhciBzbGVuMiA9IHZsZW4gKiAoIHMgKyAxICk7XG5cblx0XHRcdFx0XHR2YXIgYSA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YiA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4xLFxuXHRcdFx0XHRcdFx0YyA9IGxheWVyb2Zmc2V0ICsgayArIHNsZW4yLFxuXHRcdFx0XHRcdFx0ZCA9IGxheWVyb2Zmc2V0ICsgaiArIHNsZW4yO1xuXG5cdFx0XHRcdFx0ZjQoIGEsIGIsIGMsIGQgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHYoIHgsIHksIHogKSB7XG5cblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHggKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHkgKTtcblx0XHRcdHBsYWNlaG9sZGVyLnB1c2goIHogKTtcblxuXHRcdH1cblxuXG5cdFx0ZnVuY3Rpb24gZjMoIGEsIGIsIGMgKSB7XG5cblx0XHRcdGFkZFZlcnRleCggYSApO1xuXHRcdFx0YWRkVmVydGV4KCBiICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGMgKTtcblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVRvcFVWKCBzY29wZSwgdmVydGljZXNBcnJheSwgbmV4dEluZGV4IC0gMywgbmV4dEluZGV4IC0gMiwgbmV4dEluZGV4IC0gMSApO1xuXG5cdFx0XHRhZGRVViggdXZzWyAwIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDEgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMiBdICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBmNCggYSwgYiwgYywgZCApIHtcblxuXHRcdFx0YWRkVmVydGV4KCBhICk7XG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggZCApO1xuXG5cdFx0XHRhZGRWZXJ0ZXgoIGIgKTtcblx0XHRcdGFkZFZlcnRleCggYyApO1xuXHRcdFx0YWRkVmVydGV4KCBkICk7XG5cblxuXHRcdFx0dmFyIG5leHRJbmRleCA9IHZlcnRpY2VzQXJyYXkubGVuZ3RoIC8gMztcblx0XHRcdHZhciB1dnMgPSB1dmdlbi5nZW5lcmF0ZVNpZGVXYWxsVVYoIHNjb3BlLCB2ZXJ0aWNlc0FycmF5LCBuZXh0SW5kZXggLSA2LCBuZXh0SW5kZXggLSAzLCBuZXh0SW5kZXggLSAyLCBuZXh0SW5kZXggLSAxICk7XG5cblx0XHRcdGFkZFVWKCB1dnNbIDAgXSApO1xuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAzIF0gKTtcblxuXHRcdFx0YWRkVVYoIHV2c1sgMSBdICk7XG5cdFx0XHRhZGRVViggdXZzWyAyIF0gKTtcblx0XHRcdGFkZFVWKCB1dnNbIDMgXSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gYWRkVmVydGV4KCBpbmRleCApIHtcblxuXHRcdFx0dmVydGljZXNBcnJheS5wdXNoKCBwbGFjZWhvbGRlclsgaW5kZXggKiAzICsgMCBdICk7XG5cdFx0XHR2ZXJ0aWNlc0FycmF5LnB1c2goIHBsYWNlaG9sZGVyWyBpbmRleCAqIDMgKyAxIF0gKTtcblx0XHRcdHZlcnRpY2VzQXJyYXkucHVzaCggcGxhY2Vob2xkZXJbIGluZGV4ICogMyArIDIgXSApO1xuXG5cdFx0fVxuXG5cblx0XHRmdW5jdGlvbiBhZGRVViggdmVjdG9yMiApIHtcblxuXHRcdFx0dXZBcnJheS5wdXNoKCB2ZWN0b3IyLnggKTtcblx0XHRcdHV2QXJyYXkucHVzaCggdmVjdG9yMi55ICk7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBFeHRydWRlQnVmZmVyR2VvbWV0cnk7XG5cbkV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0dmFyIHNoYXBlcyA9IHRoaXMucGFyYW1ldGVycy5zaGFwZXM7XG5cdHZhciBvcHRpb25zID0gdGhpcy5wYXJhbWV0ZXJzLm9wdGlvbnM7XG5cblx0cmV0dXJuIHRvSlNPTiggc2hhcGVzLCBvcHRpb25zLCBkYXRhICk7XG5cbn07XG5cbi8vXG5cbnZhciBXb3JsZFVWR2VuZXJhdG9yID0ge1xuXG5cdGdlbmVyYXRlVG9wVVY6IGZ1bmN0aW9uICggZ2VvbWV0cnksIHZlcnRpY2VzLCBpbmRleEEsIGluZGV4QiwgaW5kZXhDICkge1xuXG5cdFx0dmFyIGFfeCA9IHZlcnRpY2VzWyBpbmRleEEgKiAzIF07XG5cdFx0dmFyIGFfeSA9IHZlcnRpY2VzWyBpbmRleEEgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ggPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyBdO1xuXHRcdHZhciBiX3kgPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDEgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0bmV3IFZlY3RvcjIoIGFfeCwgYV95ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYl94LCBiX3kgKSxcblx0XHRcdG5ldyBWZWN0b3IyKCBjX3gsIGNfeSApXG5cdFx0XTtcblxuXHR9LFxuXG5cdGdlbmVyYXRlU2lkZVdhbGxVVjogZnVuY3Rpb24gKCBnZW9tZXRyeSwgdmVydGljZXMsIGluZGV4QSwgaW5kZXhCLCBpbmRleEMsIGluZGV4RCApIHtcblxuXHRcdHZhciBhX3ggPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyBdO1xuXHRcdHZhciBhX3kgPSB2ZXJ0aWNlc1sgaW5kZXhBICogMyArIDEgXTtcblx0XHR2YXIgYV96ID0gdmVydGljZXNbIGluZGV4QSAqIDMgKyAyIF07XG5cdFx0dmFyIGJfeCA9IHZlcnRpY2VzWyBpbmRleEIgKiAzIF07XG5cdFx0dmFyIGJfeSA9IHZlcnRpY2VzWyBpbmRleEIgKiAzICsgMSBdO1xuXHRcdHZhciBiX3ogPSB2ZXJ0aWNlc1sgaW5kZXhCICogMyArIDIgXTtcblx0XHR2YXIgY194ID0gdmVydGljZXNbIGluZGV4QyAqIDMgXTtcblx0XHR2YXIgY195ID0gdmVydGljZXNbIGluZGV4QyAqIDMgKyAxIF07XG5cdFx0dmFyIGNfeiA9IHZlcnRpY2VzWyBpbmRleEMgKiAzICsgMiBdO1xuXHRcdHZhciBkX3ggPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyBdO1xuXHRcdHZhciBkX3kgPSB2ZXJ0aWNlc1sgaW5kZXhEICogMyArIDEgXTtcblx0XHR2YXIgZF96ID0gdmVydGljZXNbIGluZGV4RCAqIDMgKyAyIF07XG5cblx0XHRpZiAoIE1hdGguYWJzKCBhX3kgLSBiX3kgKSA8IDAuMDEgKSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3gsIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeCwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY194LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3gsIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBhX3ksIDEgLSBhX3ogKSxcblx0XHRcdFx0bmV3IFZlY3RvcjIoIGJfeSwgMSAtIGJfeiApLFxuXHRcdFx0XHRuZXcgVmVjdG9yMiggY195LCAxIC0gY196ICksXG5cdFx0XHRcdG5ldyBWZWN0b3IyKCBkX3ksIDEgLSBkX3ogKVxuXHRcdFx0XTtcblxuXHRcdH1cblxuXHR9XG59O1xuXG5mdW5jdGlvbiB0b0pTT04oIHNoYXBlcywgb3B0aW9ucywgZGF0YSApIHtcblxuXHQvL1xuXG5cdGRhdGEuc2hhcGVzID0gW107XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBzaGFwZXMgKSApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IHNoYXBlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGkgXTtcblxuXHRcdFx0ZGF0YS5zaGFwZXMucHVzaCggc2hhcGUudXVpZCApO1xuXG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZXMudXVpZCApO1xuXG5cdH1cblxuXHQvL1xuXG5cdGlmICggb3B0aW9ucy5leHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkgZGF0YS5vcHRpb25zLmV4dHJ1ZGVQYXRoID0gb3B0aW9ucy5leHRydWRlUGF0aC50b0pTT04oKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufVxuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogVGV4dCA9IDNEIFRleHRcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGZvbnQ6IDxUSFJFRS5Gb250PiwgLy8gZm9udFxuICpcbiAqICBzaXplOiA8ZmxvYXQ+LCAvLyBzaXplIG9mIHRoZSB0ZXh0XG4gKiAgaGVpZ2h0OiA8ZmxvYXQ+LCAvLyB0aGlja25lc3MgdG8gZXh0cnVkZSB0ZXh0XG4gKiAgY3VydmVTZWdtZW50czogPGludD4sIC8vIG51bWJlciBvZiBwb2ludHMgb24gdGhlIGN1cnZlc1xuICpcbiAqICBiZXZlbEVuYWJsZWQ6IDxib29sPiwgLy8gdHVybiBvbiBiZXZlbFxuICogIGJldmVsVGhpY2tuZXNzOiA8ZmxvYXQ+LCAvLyBob3cgZGVlcCBpbnRvIHRleHQgYmV2ZWwgZ29lc1xuICogIGJldmVsU2l6ZTogPGZsb2F0PiwgLy8gaG93IGZhciBmcm9tIHRleHQgb3V0bGluZSAoaW5jbHVkaW5nIGJldmVsT2Zmc2V0KSBpcyBiZXZlbFxuICogIGJldmVsT2Zmc2V0OiA8ZmxvYXQ+IC8vIGhvdyBmYXIgZnJvbSB0ZXh0IG91dGxpbmUgZG9lcyBiZXZlbCBzdGFydFxuICogfVxuICovXG5cbi8vIFRleHRHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0R2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdUZXh0R2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR0ZXh0OiB0ZXh0LFxuXHRcdHBhcmFtZXRlcnM6IHBhcmFtZXRlcnNcblx0fTtcblxuXHR0aGlzLmZyb21CdWZmZXJHZW9tZXRyeSggbmV3IFRleHRCdWZmZXJHZW9tZXRyeSggdGV4dCwgcGFyYW1ldGVycyApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblRleHRHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblRleHRHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUZXh0R2VvbWV0cnk7XG5cbi8vIFRleHRCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBUZXh0QnVmZmVyR2VvbWV0cnkoIHRleHQsIHBhcmFtZXRlcnMgKSB7XG5cblx0cGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgfHwge307XG5cblx0dmFyIGZvbnQgPSBwYXJhbWV0ZXJzLmZvbnQ7XG5cblx0aWYgKCAhICggZm9udCAmJiBmb250LmlzRm9udCApICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlRleHRHZW9tZXRyeTogZm9udCBwYXJhbWV0ZXIgaXMgbm90IGFuIGluc3RhbmNlIG9mIFRIUkVFLkZvbnQuJyApO1xuXHRcdHJldHVybiBuZXcgR2VvbWV0cnkoKTtcblxuXHR9XG5cblx0dmFyIHNoYXBlcyA9IGZvbnQuZ2VuZXJhdGVTaGFwZXMoIHRleHQsIHBhcmFtZXRlcnMuc2l6ZSApO1xuXG5cdC8vIHRyYW5zbGF0ZSBwYXJhbWV0ZXJzIHRvIEV4dHJ1ZGVHZW9tZXRyeSBBUElcblxuXHRwYXJhbWV0ZXJzLmRlcHRoID0gcGFyYW1ldGVycy5oZWlnaHQgIT09IHVuZGVmaW5lZCA/IHBhcmFtZXRlcnMuaGVpZ2h0IDogNTA7XG5cblx0Ly8gZGVmYXVsdHNcblxuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPT09IHVuZGVmaW5lZCApIHBhcmFtZXRlcnMuYmV2ZWxUaGlja25lc3MgPSAxMDtcblx0aWYgKCBwYXJhbWV0ZXJzLmJldmVsU2l6ZSA9PT0gdW5kZWZpbmVkICkgcGFyYW1ldGVycy5iZXZlbFNpemUgPSA4O1xuXHRpZiAoIHBhcmFtZXRlcnMuYmV2ZWxFbmFibGVkID09PSB1bmRlZmluZWQgKSBwYXJhbWV0ZXJzLmJldmVsRW5hYmxlZCA9IGZhbHNlO1xuXG5cdEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzLCBzaGFwZXMsIHBhcmFtZXRlcnMgKTtcblxuXHR0aGlzLnR5cGUgPSAnVGV4dEJ1ZmZlckdlb21ldHJ5JztcblxufVxuXG5UZXh0QnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggRXh0cnVkZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuVGV4dEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNwaGVyZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNwaGVyZUdlb21ldHJ5KCByYWRpdXMsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBwaGlTdGFydCwgcGhpTGVuZ3RoLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NwaGVyZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0d2lkdGhTZWdtZW50czogd2lkdGhTZWdtZW50cyxcblx0XHRoZWlnaHRTZWdtZW50czogaGVpZ2h0U2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TcGhlcmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUdlb21ldHJ5O1xuXG4vLyBTcGhlcmVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBTcGhlcmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHdpZHRoU2VnbWVudHM6IHdpZHRoU2VnbWVudHMsXG5cdFx0aGVpZ2h0U2VnbWVudHM6IGhlaWdodFNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXG5cdHdpZHRoU2VnbWVudHMgPSBNYXRoLm1heCggMywgTWF0aC5mbG9vciggd2lkdGhTZWdtZW50cyApIHx8IDggKTtcblx0aGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCggMiwgTWF0aC5mbG9vciggaGVpZ2h0U2VnbWVudHMgKSB8fCA2ICk7XG5cblx0cGhpU3RhcnQgPSBwaGlTdGFydCAhPT0gdW5kZWZpbmVkID8gcGhpU3RhcnQgOiAwO1xuXHRwaGlMZW5ndGggPSBwaGlMZW5ndGggIT09IHVuZGVmaW5lZCA/IHBoaUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU3RhcnQgPSB0aGV0YVN0YXJ0ICE9PSB1bmRlZmluZWQgPyB0aGV0YVN0YXJ0IDogMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJO1xuXG5cdHZhciB0aGV0YUVuZCA9IE1hdGgubWluKCB0aGV0YVN0YXJ0ICsgdGhldGFMZW5ndGgsIE1hdGguUEkgKTtcblxuXHR2YXIgaXgsIGl5O1xuXG5cdHZhciBpbmRleCA9IDA7XG5cdHZhciBncmlkID0gW107XG5cblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciBub3JtYWwgPSBuZXcgVmVjdG9yMygpO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDw9IGhlaWdodFNlZ21lbnRzOyBpeSArKyApIHtcblxuXHRcdHZhciB2ZXJ0aWNlc1JvdyA9IFtdO1xuXG5cdFx0dmFyIHYgPSBpeSAvIGhlaWdodFNlZ21lbnRzO1xuXG5cdFx0Ly8gc3BlY2lhbCBjYXNlIGZvciB0aGUgcG9sZXNcblxuXHRcdHZhciB1T2Zmc2V0ID0gMDtcblxuXHRcdGlmICggaXkgPT0gMCAmJiB0aGV0YVN0YXJ0ID09IDAgKSB7XG5cblx0XHRcdHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0fSBlbHNlIGlmICggaXkgPT0gaGVpZ2h0U2VnbWVudHMgJiYgdGhldGFFbmQgPT0gTWF0aC5QSSApIHtcblxuXHRcdFx0dU9mZnNldCA9IC0gMC41IC8gd2lkdGhTZWdtZW50cztcblxuXHRcdH1cblxuXHRcdGZvciAoIGl4ID0gMDsgaXggPD0gd2lkdGhTZWdtZW50czsgaXggKysgKSB7XG5cblx0XHRcdHZhciB1ID0gaXggLyB3aWR0aFNlZ21lbnRzO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSAtIHJhZGl1cyAqIE1hdGguY29zKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguY29zKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKCBwaGlTdGFydCArIHUgKiBwaGlMZW5ndGggKSAqIE1hdGguc2luKCB0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbC5jb3B5KCB2ZXJ0ZXggKS5ub3JtYWxpemUoKTtcblx0XHRcdG5vcm1hbHMucHVzaCggbm9ybWFsLngsIG5vcm1hbC55LCBub3JtYWwueiApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggdSArIHVPZmZzZXQsIDEgLSB2ICk7XG5cblx0XHRcdHZlcnRpY2VzUm93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHR9XG5cblx0XHRncmlkLnB1c2goIHZlcnRpY2VzUm93ICk7XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpeSA9IDA7IGl5IDwgaGVpZ2h0U2VnbWVudHM7IGl5ICsrICkge1xuXG5cdFx0Zm9yICggaXggPSAwOyBpeCA8IHdpZHRoU2VnbWVudHM7IGl4ICsrICkge1xuXG5cdFx0XHR2YXIgYSA9IGdyaWRbIGl5IF1bIGl4ICsgMSBdO1xuXHRcdFx0dmFyIGIgPSBncmlkWyBpeSBdWyBpeCBdO1xuXHRcdFx0dmFyIGMgPSBncmlkWyBpeSArIDEgXVsgaXggXTtcblx0XHRcdHZhciBkID0gZ3JpZFsgaXkgKyAxIF1bIGl4ICsgMSBdO1xuXG5cdFx0XHRpZiAoIGl5ICE9PSAwIHx8IHRoZXRhU3RhcnQgPiAwICkgaW5kaWNlcy5wdXNoKCBhLCBiLCBkICk7XG5cdFx0XHRpZiAoIGl5ICE9PSBoZWlnaHRTZWdtZW50cyAtIDEgfHwgdGhldGFFbmQgPCBNYXRoLlBJICkgaW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdub3JtYWwnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggbm9ybWFscywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdXZzLCAyICkgKTtcblxufVxuXG5TcGhlcmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcblNwaGVyZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNwaGVyZUJ1ZmZlckdlb21ldHJ5O1xuXG4vKipcbiAqIEBhdXRob3IgS2FsZWIgTXVycGh5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFJpbmdHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0dlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgUmluZ0J1ZmZlckdlb21ldHJ5KCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIHRoZXRhU2VnbWVudHMsIHBoaVNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cblJpbmdHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcblJpbmdHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSaW5nR2VvbWV0cnk7XG5cbi8vIFJpbmdCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBSaW5nQnVmZmVyR2VvbWV0cnkoIGlubmVyUmFkaXVzLCBvdXRlclJhZGl1cywgdGhldGFTZWdtZW50cywgcGhpU2VnbWVudHMsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkge1xuXG5cdEJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUmluZ0J1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0aW5uZXJSYWRpdXM6IGlubmVyUmFkaXVzLFxuXHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHR0aGV0YVNlZ21lbnRzOiB0aGV0YVNlZ21lbnRzLFxuXHRcdHBoaVNlZ21lbnRzOiBwaGlTZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdGlubmVyUmFkaXVzID0gaW5uZXJSYWRpdXMgfHwgMC41O1xuXHRvdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIHx8IDE7XG5cblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdHRoZXRhU2VnbWVudHMgPSB0aGV0YVNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMywgdGhldGFTZWdtZW50cyApIDogODtcblx0cGhpU2VnbWVudHMgPSBwaGlTZWdtZW50cyAhPT0gdW5kZWZpbmVkID8gTWF0aC5tYXgoIDEsIHBoaVNlZ21lbnRzICkgOiAxO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIHNvbWUgaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBzZWdtZW50O1xuXHR2YXIgcmFkaXVzID0gaW5uZXJSYWRpdXM7XG5cdHZhciByYWRpdXNTdGVwID0gKCAoIG91dGVyUmFkaXVzIC0gaW5uZXJSYWRpdXMgKSAvIHBoaVNlZ21lbnRzICk7XG5cdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHR2YXIgaiwgaTtcblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0Zm9yICggaiA9IDA7IGogPD0gcGhpU2VnbWVudHM7IGogKysgKSB7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSB0aGV0YVNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0XHQvLyB2YWx1ZXMgYXJlIGdlbmVyYXRlIGZyb20gdGhlIGluc2lkZSBvZiB0aGUgcmluZyB0byB0aGUgb3V0c2lkZVxuXG5cdFx0XHRzZWdtZW50ID0gdGhldGFTdGFydCArIGkgLyB0aGV0YVNlZ21lbnRzICogdGhldGFMZW5ndGg7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHJhZGl1cyAqIE1hdGguY29zKCBzZWdtZW50ICk7XG5cdFx0XHR2ZXJ0ZXgueSA9IHJhZGl1cyAqIE1hdGguc2luKCBzZWdtZW50ICk7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgMCwgMSApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1di54ID0gKCB2ZXJ0ZXgueCAvIG91dGVyUmFkaXVzICsgMSApIC8gMjtcblx0XHRcdHV2LnkgPSAoIHZlcnRleC55IC8gb3V0ZXJSYWRpdXMgKyAxICkgLyAyO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5jcmVhc2UgdGhlIHJhZGl1cyBmb3IgbmV4dCByb3cgb2YgdmVydGljZXNcblxuXHRcdHJhZGl1cyArPSByYWRpdXNTdGVwO1xuXG5cdH1cblxuXHQvLyBpbmRpY2VzXG5cblx0Zm9yICggaiA9IDA7IGogPCBwaGlTZWdtZW50czsgaiArKyApIHtcblxuXHRcdHZhciB0aGV0YVNlZ21lbnRMZXZlbCA9IGogKiAoIHRoZXRhU2VnbWVudHMgKyAxICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IHRoZXRhU2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdHNlZ21lbnQgPSBpICsgdGhldGFTZWdtZW50TGV2ZWw7XG5cblx0XHRcdHZhciBhID0gc2VnbWVudDtcblx0XHRcdHZhciBiID0gc2VnbWVudCArIHRoZXRhU2VnbWVudHMgKyAxO1xuXHRcdFx0dmFyIGMgPSBzZWdtZW50ICsgdGhldGFTZWdtZW50cyArIDI7XG5cdFx0XHR2YXIgZCA9IHNlZ21lbnQgKyAxO1xuXG5cdFx0XHQvLyBmYWNlc1xuXG5cdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdGluZGljZXMucHVzaCggYiwgYywgZCApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0SW5kZXgoIGluZGljZXMgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAnbm9ybWFsJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIG5vcm1hbHMsIDMgKSApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3V2JywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHV2cywgMiApICk7XG5cbn1cblxuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuUmluZ0J1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJpbmdCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqL1xuXG4vLyBMYXRoZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIExhdGhlR2VvbWV0cnkoIHBvaW50cywgc2VnbWVudHMsIHBoaVN0YXJ0LCBwaGlMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMYXRoZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cG9pbnRzOiBwb2ludHMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHBoaVN0YXJ0OiBwaGlTdGFydCxcblx0XHRwaGlMZW5ndGg6IHBoaUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgTGF0aGVCdWZmZXJHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApICk7XG5cdHRoaXMubWVyZ2VWZXJ0aWNlcygpO1xuXG59XG5cbkxhdGhlR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggR2VvbWV0cnkucHJvdG90eXBlICk7XG5MYXRoZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlR2VvbWV0cnk7XG5cbi8vIExhdGhlQnVmZmVyR2VvbWV0cnlcblxuZnVuY3Rpb24gTGF0aGVCdWZmZXJHZW9tZXRyeSggcG9pbnRzLCBzZWdtZW50cywgcGhpU3RhcnQsIHBoaUxlbmd0aCApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0xhdGhlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRwb2ludHM6IHBvaW50cyxcblx0XHRzZWdtZW50czogc2VnbWVudHMsXG5cdFx0cGhpU3RhcnQ6IHBoaVN0YXJ0LFxuXHRcdHBoaUxlbmd0aDogcGhpTGVuZ3RoXG5cdH07XG5cblx0c2VnbWVudHMgPSBNYXRoLmZsb29yKCBzZWdtZW50cyApIHx8IDEyO1xuXHRwaGlTdGFydCA9IHBoaVN0YXJ0IHx8IDA7XG5cdHBoaUxlbmd0aCA9IHBoaUxlbmd0aCB8fCBNYXRoLlBJICogMjtcblxuXHQvLyBjbGFtcCBwaGlMZW5ndGggc28gaXQncyBpbiByYW5nZSBvZiBbIDAsIDJQSSBdXG5cblx0cGhpTGVuZ3RoID0gTWF0aFV0aWxzLmNsYW1wKCBwaGlMZW5ndGgsIDAsIE1hdGguUEkgKiAyICk7XG5cblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGJhc2U7XG5cdHZhciBpbnZlcnNlU2VnbWVudHMgPSAxLjAgLyBzZWdtZW50cztcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cdHZhciBpLCBqO1xuXG5cdC8vIGdlbmVyYXRlIHZlcnRpY2VzIGFuZCB1dnNcblxuXHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdHZhciBwaGkgPSBwaGlTdGFydCArIGkgKiBpbnZlcnNlU2VnbWVudHMgKiBwaGlMZW5ndGg7XG5cblx0XHR2YXIgc2luID0gTWF0aC5zaW4oIHBoaSApO1xuXHRcdHZhciBjb3MgPSBNYXRoLmNvcyggcGhpICk7XG5cblx0XHRmb3IgKCBqID0gMDsgaiA8PSAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHR2ZXJ0ZXgueCA9IHBvaW50c1sgaiBdLnggKiBzaW47XG5cdFx0XHR2ZXJ0ZXgueSA9IHBvaW50c1sgaiBdLnk7XG5cdFx0XHR2ZXJ0ZXgueiA9IHBvaW50c1sgaiBdLnggKiBjb3M7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdFx0Ly8gdXZcblxuXHRcdFx0dXYueCA9IGkgLyBzZWdtZW50cztcblx0XHRcdHV2LnkgPSBqIC8gKCBwb2ludHMubGVuZ3RoIC0gMSApO1xuXG5cdFx0XHR1dnMucHVzaCggdXYueCwgdXYueSApO1xuXG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpID0gMDsgaSA8IHNlZ21lbnRzOyBpICsrICkge1xuXG5cdFx0Zm9yICggaiA9IDA7IGogPCAoIHBvaW50cy5sZW5ndGggLSAxICk7IGogKysgKSB7XG5cblx0XHRcdGJhc2UgPSBqICsgaSAqIHBvaW50cy5sZW5ndGg7XG5cblx0XHRcdHZhciBhID0gYmFzZTtcblx0XHRcdHZhciBiID0gYmFzZSArIHBvaW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgYyA9IGJhc2UgKyBwb2ludHMubGVuZ3RoICsgMTtcblx0XHRcdHZhciBkID0gYmFzZSArIDE7XG5cblx0XHRcdC8vIGZhY2VzXG5cblx0XHRcdGluZGljZXMucHVzaCggYSwgYiwgZCApO1xuXHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHR9XG5cblx0fVxuXG5cdC8vIGJ1aWxkIGdlb21ldHJ5XG5cblx0dGhpcy5zZXRJbmRleCggaW5kaWNlcyApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdC8vIGdlbmVyYXRlIG5vcm1hbHNcblxuXHR0aGlzLmNvbXB1dGVWZXJ0ZXhOb3JtYWxzKCk7XG5cblx0Ly8gaWYgdGhlIGdlb21ldHJ5IGlzIGNsb3NlZCwgd2UgbmVlZCB0byBhdmVyYWdlIHRoZSBub3JtYWxzIGFsb25nIHRoZSBzZWFtLlxuXHQvLyBiZWNhdXNlIHRoZSBjb3JyZXNwb25kaW5nIHZlcnRpY2VzIGFyZSBpZGVudGljYWwgKGJ1dCBzdGlsbCBoYXZlIGRpZmZlcmVudCBVVnMpLlxuXG5cdGlmICggcGhpTGVuZ3RoID09PSBNYXRoLlBJICogMiApIHtcblxuXHRcdHZhciBub3JtYWxzID0gdGhpcy5hdHRyaWJ1dGVzLm5vcm1hbC5hcnJheTtcblx0XHR2YXIgbjEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBuMiA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0dmFyIG4gPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0Ly8gdGhpcyBpcyB0aGUgYnVmZmVyIG9mZnNldCBmb3IgdGhlIGxhc3QgbGluZSBvZiB2ZXJ0aWNlc1xuXG5cdFx0YmFzZSA9IHNlZ21lbnRzICogcG9pbnRzLmxlbmd0aCAqIDM7XG5cblx0XHRmb3IgKCBpID0gMCwgaiA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICsrLCBqICs9IDMgKSB7XG5cblx0XHRcdC8vIHNlbGVjdCB0aGUgbm9ybWFsIG9mIHRoZSB2ZXJ0ZXggaW4gdGhlIGZpcnN0IGxpbmVcblxuXHRcdFx0bjEueCA9IG5vcm1hbHNbIGogKyAwIF07XG5cdFx0XHRuMS55ID0gbm9ybWFsc1sgaiArIDEgXTtcblx0XHRcdG4xLnogPSBub3JtYWxzWyBqICsgMiBdO1xuXG5cdFx0XHQvLyBzZWxlY3QgdGhlIG5vcm1hbCBvZiB0aGUgdmVydGV4IGluIHRoZSBsYXN0IGxpbmVcblxuXHRcdFx0bjIueCA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMCBdO1xuXHRcdFx0bjIueSA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMSBdO1xuXHRcdFx0bjIueiA9IG5vcm1hbHNbIGJhc2UgKyBqICsgMiBdO1xuXG5cdFx0XHQvLyBhdmVyYWdlIG5vcm1hbHNcblxuXHRcdFx0bi5hZGRWZWN0b3JzKCBuMSwgbjIgKS5ub3JtYWxpemUoKTtcblxuXHRcdFx0Ly8gYXNzaWduIHRoZSBuZXcgdmFsdWVzIHRvIGJvdGggbm9ybWFsc1xuXG5cdFx0XHRub3JtYWxzWyBqICsgMCBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAwIF0gPSBuLng7XG5cdFx0XHRub3JtYWxzWyBqICsgMSBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAxIF0gPSBuLnk7XG5cdFx0XHRub3JtYWxzWyBqICsgMiBdID0gbm9ybWFsc1sgYmFzZSArIGogKyAyIF0gPSBuLno7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cbkxhdGhlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5MYXRoZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhdGhlQnVmZmVyR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBqb25vYnIxIC8gaHR0cDovL2pvbm9icjEuY29tXG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbi8vIFNoYXBlR2VvbWV0cnlcblxuZnVuY3Rpb24gU2hhcGVHZW9tZXRyeSggc2hhcGVzLCBjdXJ2ZVNlZ21lbnRzICkge1xuXG5cdEdlb21ldHJ5LmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGVHZW9tZXRyeSc7XG5cblx0aWYgKCB0eXBlb2YgY3VydmVTZWdtZW50cyA9PT0gJ29iamVjdCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZUdlb21ldHJ5OiBPcHRpb25zIHBhcmFtZXRlciBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdGN1cnZlU2VnbWVudHMgPSBjdXJ2ZVNlZ21lbnRzLmN1cnZlU2VnbWVudHM7XG5cblx0fVxuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBTaGFwZUJ1ZmZlckdlb21ldHJ5KCBzaGFwZXMsIGN1cnZlU2VnbWVudHMgKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEdlb21ldHJ5LnByb3RvdHlwZSApO1xuU2hhcGVHZW9tZXRyeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFwZUdlb21ldHJ5O1xuXG5TaGFwZUdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHR2YXIgc2hhcGVzID0gdGhpcy5wYXJhbWV0ZXJzLnNoYXBlcztcblxuXHRyZXR1cm4gdG9KU09OJDEoIHNoYXBlcywgZGF0YSApO1xuXG59O1xuXG4vLyBTaGFwZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIFNoYXBlQnVmZmVyR2VvbWV0cnkoIHNoYXBlcywgY3VydmVTZWdtZW50cyApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlQnVmZmVyR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHRzaGFwZXM6IHNoYXBlcyxcblx0XHRjdXJ2ZVNlZ21lbnRzOiBjdXJ2ZVNlZ21lbnRzXG5cdH07XG5cblx0Y3VydmVTZWdtZW50cyA9IGN1cnZlU2VnbWVudHMgfHwgMTI7XG5cblx0Ly8gYnVmZmVyc1xuXG5cdHZhciBpbmRpY2VzID0gW107XG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgbm9ybWFscyA9IFtdO1xuXHR2YXIgdXZzID0gW107XG5cblx0Ly8gaGVscGVyIHZhcmlhYmxlc1xuXG5cdHZhciBncm91cFN0YXJ0ID0gMDtcblx0dmFyIGdyb3VwQ291bnQgPSAwO1xuXG5cdC8vIGFsbG93IHNpbmdsZSBhbmQgYXJyYXkgdmFsdWVzIGZvciBcInNoYXBlc1wiIHBhcmFtZXRlclxuXG5cdGlmICggQXJyYXkuaXNBcnJheSggc2hhcGVzICkgPT09IGZhbHNlICkge1xuXG5cdFx0YWRkU2hhcGUoIHNoYXBlcyApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBzaGFwZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRhZGRTaGFwZSggc2hhcGVzWyBpIF0gKTtcblxuXHRcdFx0dGhpcy5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgaSApOyAvLyBlbmFibGVzIE11bHRpTWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cdFx0XHRncm91cENvdW50ID0gMDtcblxuXHRcdH1cblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cblx0Ly8gaGVscGVyIGZ1bmN0aW9uc1xuXG5cdGZ1bmN0aW9uIGFkZFNoYXBlKCBzaGFwZSApIHtcblxuXHRcdHZhciBpLCBsLCBzaGFwZUhvbGU7XG5cblx0XHR2YXIgaW5kZXhPZmZzZXQgPSB2ZXJ0aWNlcy5sZW5ndGggLyAzO1xuXHRcdHZhciBwb2ludHMgPSBzaGFwZS5leHRyYWN0UG9pbnRzKCBjdXJ2ZVNlZ21lbnRzICk7XG5cblx0XHR2YXIgc2hhcGVWZXJ0aWNlcyA9IHBvaW50cy5zaGFwZTtcblx0XHR2YXIgc2hhcGVIb2xlcyA9IHBvaW50cy5ob2xlcztcblxuXHRcdC8vIGNoZWNrIGRpcmVjdGlvbiBvZiB2ZXJ0aWNlc1xuXG5cdFx0aWYgKCBTaGFwZVV0aWxzLmlzQ2xvY2tXaXNlKCBzaGFwZVZlcnRpY2VzICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5yZXZlcnNlKCk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCBpID0gMCwgbCA9IHNoYXBlSG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0c2hhcGVIb2xlID0gc2hhcGVIb2xlc1sgaSBdO1xuXG5cdFx0XHRpZiAoIFNoYXBlVXRpbHMuaXNDbG9ja1dpc2UoIHNoYXBlSG9sZSApID09PSB0cnVlICkge1xuXG5cdFx0XHRcdHNoYXBlSG9sZXNbIGkgXSA9IHNoYXBlSG9sZS5yZXZlcnNlKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBmYWNlcyA9IFNoYXBlVXRpbHMudHJpYW5ndWxhdGVTaGFwZSggc2hhcGVWZXJ0aWNlcywgc2hhcGVIb2xlcyApO1xuXG5cdFx0Ly8gam9pbiB2ZXJ0aWNlcyBvZiBpbm5lciBhbmQgb3V0ZXIgcGF0aHMgdG8gYSBzaW5nbGUgYXJyYXlcblxuXHRcdGZvciAoIGkgPSAwLCBsID0gc2hhcGVIb2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzaGFwZUhvbGUgPSBzaGFwZUhvbGVzWyBpIF07XG5cdFx0XHRzaGFwZVZlcnRpY2VzID0gc2hhcGVWZXJ0aWNlcy5jb25jYXQoIHNoYXBlSG9sZSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gdmVydGljZXMsIG5vcm1hbHMsIHV2c1xuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBzaGFwZVZlcnRpY2VzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciB2ZXJ0ZXggPSBzaGFwZVZlcnRpY2VzWyBpIF07XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgMCApO1xuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cdFx0XHR1dnMucHVzaCggdmVydGV4LngsIHZlcnRleC55ICk7IC8vIHdvcmxkIHV2c1xuXG5cdFx0fVxuXG5cdFx0Ly8gaW5jaWRlc1xuXG5cdFx0Zm9yICggaSA9IDAsIGwgPSBmYWNlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgZmFjZSA9IGZhY2VzWyBpIF07XG5cblx0XHRcdHZhciBhID0gZmFjZVsgMCBdICsgaW5kZXhPZmZzZXQ7XG5cdFx0XHR2YXIgYiA9IGZhY2VbIDEgXSArIGluZGV4T2Zmc2V0O1xuXHRcdFx0dmFyIGMgPSBmYWNlWyAyIF0gKyBpbmRleE9mZnNldDtcblxuXHRcdFx0aW5kaWNlcy5wdXNoKCBhLCBiLCBjICk7XG5cdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHR9XG5cblx0fVxuXG59XG5cblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5TaGFwZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNoYXBlQnVmZmVyR2VvbWV0cnk7XG5cblNoYXBlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdHZhciBzaGFwZXMgPSB0aGlzLnBhcmFtZXRlcnMuc2hhcGVzO1xuXG5cdHJldHVybiB0b0pTT04kMSggc2hhcGVzLCBkYXRhICk7XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIHRvSlNPTiQxKCBzaGFwZXMsIGRhdGEgKSB7XG5cblx0ZGF0YS5zaGFwZXMgPSBbXTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHNoYXBlcyApICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc2hhcGVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBzaGFwZSA9IHNoYXBlc1sgaSBdO1xuXG5cdFx0XHRkYXRhLnNoYXBlcy5wdXNoKCBzaGFwZS51dWlkICk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGRhdGEuc2hhcGVzLnB1c2goIHNoYXBlcy51dWlkICk7XG5cblx0fVxuXG5cdHJldHVybiBkYXRhO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIE11Z2VuODcgLyBodHRwczovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbmZ1bmN0aW9uIEVkZ2VzR2VvbWV0cnkoIGdlb21ldHJ5LCB0aHJlc2hvbGRBbmdsZSApIHtcblxuXHRCdWZmZXJHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0VkZ2VzR2VvbWV0cnknO1xuXG5cdHRoaXMucGFyYW1ldGVycyA9IHtcblx0XHR0aHJlc2hvbGRBbmdsZTogdGhyZXNob2xkQW5nbGVcblx0fTtcblxuXHR0aHJlc2hvbGRBbmdsZSA9ICggdGhyZXNob2xkQW5nbGUgIT09IHVuZGVmaW5lZCApID8gdGhyZXNob2xkQW5nbGUgOiAxO1xuXG5cdC8vIGJ1ZmZlclxuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgdGhyZXNob2xkRG90ID0gTWF0aC5jb3MoIE1hdGhVdGlscy5ERUcyUkFEICogdGhyZXNob2xkQW5nbGUgKTtcblx0dmFyIGVkZ2UgPSBbIDAsIDAgXSwgZWRnZXMgPSB7fSwgZWRnZTEsIGVkZ2UyO1xuXHR2YXIga2V5LCBrZXlzID0gWyAnYScsICdiJywgJ2MnIF07XG5cblx0Ly8gcHJlcGFyZSBzb3VyY2UgZ2VvbWV0cnlcblxuXHR2YXIgZ2VvbWV0cnkyO1xuXG5cdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSApIHtcblxuXHRcdGdlb21ldHJ5MiA9IG5ldyBHZW9tZXRyeSgpO1xuXHRcdGdlb21ldHJ5Mi5mcm9tQnVmZmVyR2VvbWV0cnkoIGdlb21ldHJ5ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdGdlb21ldHJ5MiA9IGdlb21ldHJ5LmNsb25lKCk7XG5cblx0fVxuXG5cdGdlb21ldHJ5Mi5tZXJnZVZlcnRpY2VzKCk7XG5cdGdlb21ldHJ5Mi5jb21wdXRlRmFjZU5vcm1hbHMoKTtcblxuXHR2YXIgc291cmNlVmVydGljZXMgPSBnZW9tZXRyeTIudmVydGljZXM7XG5cdHZhciBmYWNlcyA9IGdlb21ldHJ5Mi5mYWNlcztcblxuXHQvLyBub3cgY3JlYXRlIGEgZGF0YSBzdHJ1Y3R1cmUgd2hlcmUgZWFjaCBlbnRyeSByZXByZXNlbnRzIGFuIGVkZ2Ugd2l0aCBpdHMgYWRqb2luaW5nIGZhY2VzXG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0gZmFjZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBmYWNlID0gZmFjZXNbIGkgXTtcblxuXHRcdGZvciAoIHZhciBqID0gMDsgaiA8IDM7IGogKysgKSB7XG5cblx0XHRcdGVkZ2UxID0gZmFjZVsga2V5c1sgaiBdIF07XG5cdFx0XHRlZGdlMiA9IGZhY2VbIGtleXNbICggaiArIDEgKSAlIDMgXSBdO1xuXHRcdFx0ZWRnZVsgMCBdID0gTWF0aC5taW4oIGVkZ2UxLCBlZGdlMiApO1xuXHRcdFx0ZWRnZVsgMSBdID0gTWF0aC5tYXgoIGVkZ2UxLCBlZGdlMiApO1xuXG5cdFx0XHRrZXkgPSBlZGdlWyAwIF0gKyAnLCcgKyBlZGdlWyAxIF07XG5cblx0XHRcdGlmICggZWRnZXNbIGtleSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0ZWRnZXNbIGtleSBdID0geyBpbmRleDE6IGVkZ2VbIDAgXSwgaW5kZXgyOiBlZGdlWyAxIF0sIGZhY2UxOiBpLCBmYWNlMjogdW5kZWZpbmVkIH07XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0ZWRnZXNbIGtleSBdLmZhY2UyID0gaTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBnZW5lcmF0ZSB2ZXJ0aWNlc1xuXG5cdGZvciAoIGtleSBpbiBlZGdlcyApIHtcblxuXHRcdHZhciBlID0gZWRnZXNbIGtleSBdO1xuXG5cdFx0Ly8gYW4gZWRnZSBpcyBvbmx5IHJlbmRlcmVkIGlmIHRoZSBhbmdsZSAoaW4gZGVncmVlcykgYmV0d2VlbiB0aGUgZmFjZSBub3JtYWxzIG9mIHRoZSBhZGpvaW5pbmcgZmFjZXMgZXhjZWVkcyB0aGlzIHZhbHVlLiBkZWZhdWx0ID0gMSBkZWdyZWUuXG5cblx0XHRpZiAoIGUuZmFjZTIgPT09IHVuZGVmaW5lZCB8fCBmYWNlc1sgZS5mYWNlMSBdLm5vcm1hbC5kb3QoIGZhY2VzWyBlLmZhY2UyIF0ubm9ybWFsICkgPD0gdGhyZXNob2xkRG90ICkge1xuXG5cdFx0XHR2YXIgdmVydGV4ID0gc291cmNlVmVydGljZXNbIGUuaW5kZXgxIF07XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCB2ZXJ0ZXgueCwgdmVydGV4LnksIHZlcnRleC56ICk7XG5cblx0XHRcdHZlcnRleCA9IHNvdXJjZVZlcnRpY2VzWyBlLmluZGV4MiBdO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0fVxuXG5cdH1cblxuXHQvLyBidWlsZCBnZW9tZXRyeVxuXG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXG59XG5cbkVkZ2VzR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICk7XG5FZGdlc0dlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEVkZ2VzR2VvbWV0cnk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxuLy8gQ3lsaW5kZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDeWxpbmRlckdlb21ldHJ5KCByYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0R2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDeWxpbmRlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzVG9wOiByYWRpdXNUb3AsXG5cdFx0cmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHRoaXMuZnJvbUJ1ZmZlckdlb21ldHJ5KCBuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggcmFkaXVzVG9wLCByYWRpdXNCb3R0b20sIGhlaWdodCwgcmFkaWFsU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzLCBvcGVuRW5kZWQsIHRoZXRhU3RhcnQsIHRoZXRhTGVuZ3RoICkgKTtcblx0dGhpcy5tZXJnZVZlcnRpY2VzKCk7XG5cbn1cblxuQ3lsaW5kZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkN5bGluZGVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3lsaW5kZXJHZW9tZXRyeTtcblxuLy8gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5KCByYWRpdXNUb3AsIHJhZGl1c0JvdHRvbSwgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDeWxpbmRlckJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzVG9wOiByYWRpdXNUb3AsXG5cdFx0cmFkaXVzQm90dG9tOiByYWRpdXNCb3R0b20sXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHZhciBzY29wZSA9IHRoaXM7XG5cblx0cmFkaXVzVG9wID0gcmFkaXVzVG9wICE9PSB1bmRlZmluZWQgPyByYWRpdXNUb3AgOiAxO1xuXHRyYWRpdXNCb3R0b20gPSByYWRpdXNCb3R0b20gIT09IHVuZGVmaW5lZCA/IHJhZGl1c0JvdHRvbSA6IDE7XG5cdGhlaWdodCA9IGhlaWdodCB8fCAxO1xuXG5cdHJhZGlhbFNlZ21lbnRzID0gTWF0aC5mbG9vciggcmFkaWFsU2VnbWVudHMgKSB8fCA4O1xuXHRoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoIGhlaWdodFNlZ21lbnRzICkgfHwgMTtcblxuXHRvcGVuRW5kZWQgPSBvcGVuRW5kZWQgIT09IHVuZGVmaW5lZCA/IG9wZW5FbmRlZCA6IGZhbHNlO1xuXHR0aGV0YVN0YXJ0ID0gdGhldGFTdGFydCAhPT0gdW5kZWZpbmVkID8gdGhldGFTdGFydCA6IDAuMDtcblx0dGhldGFMZW5ndGggPSB0aGV0YUxlbmd0aCAhPT0gdW5kZWZpbmVkID8gdGhldGFMZW5ndGggOiBNYXRoLlBJICogMjtcblxuXHQvLyBidWZmZXJzXG5cblx0dmFyIGluZGljZXMgPSBbXTtcblx0dmFyIHZlcnRpY2VzID0gW107XG5cdHZhciBub3JtYWxzID0gW107XG5cdHZhciB1dnMgPSBbXTtcblxuXHQvLyBoZWxwZXIgdmFyaWFibGVzXG5cblx0dmFyIGluZGV4ID0gMDtcblx0dmFyIGluZGV4QXJyYXkgPSBbXTtcblx0dmFyIGhhbGZIZWlnaHQgPSBoZWlnaHQgLyAyO1xuXHR2YXIgZ3JvdXBTdGFydCA9IDA7XG5cblx0Ly8gZ2VuZXJhdGUgZ2VvbWV0cnlcblxuXHRnZW5lcmF0ZVRvcnNvKCk7XG5cblx0aWYgKCBvcGVuRW5kZWQgPT09IGZhbHNlICkge1xuXG5cdFx0aWYgKCByYWRpdXNUb3AgPiAwICkgZ2VuZXJhdGVDYXAoIHRydWUgKTtcblx0XHRpZiAoIHJhZGl1c0JvdHRvbSA+IDAgKSBnZW5lcmF0ZUNhcCggZmFsc2UgKTtcblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlVG9yc28oKSB7XG5cblx0XHR2YXIgeCwgeTtcblx0XHR2YXIgbm9ybWFsID0gbmV3IFZlY3RvcjMoKTtcblx0XHR2YXIgdmVydGV4ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHZhciBncm91cENvdW50ID0gMDtcblxuXHRcdC8vIHRoaXMgd2lsbCBiZSB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgbm9ybWFsXG5cdFx0dmFyIHNsb3BlID0gKCByYWRpdXNCb3R0b20gLSByYWRpdXNUb3AgKSAvIGhlaWdodDtcblxuXHRcdC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuXHRcdGZvciAoIHkgPSAwOyB5IDw9IGhlaWdodFNlZ21lbnRzOyB5ICsrICkge1xuXG5cdFx0XHR2YXIgaW5kZXhSb3cgPSBbXTtcblxuXHRcdFx0dmFyIHYgPSB5IC8gaGVpZ2h0U2VnbWVudHM7XG5cblx0XHRcdC8vIGNhbGN1bGF0ZSB0aGUgcmFkaXVzIG9mIHRoZSBjdXJyZW50IHJvd1xuXG5cdFx0XHR2YXIgcmFkaXVzID0gdiAqICggcmFkaXVzQm90dG9tIC0gcmFkaXVzVG9wICkgKyByYWRpdXNUb3A7XG5cblx0XHRcdGZvciAoIHggPSAwOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHRcdHZhciB1ID0geCAvIHJhZGlhbFNlZ21lbnRzO1xuXG5cdFx0XHRcdHZhciB0aGV0YSA9IHUgKiB0aGV0YUxlbmd0aCArIHRoZXRhU3RhcnQ7XG5cblx0XHRcdFx0dmFyIHNpblRoZXRhID0gTWF0aC5zaW4oIHRoZXRhICk7XG5cdFx0XHRcdHZhciBjb3NUaGV0YSA9IE1hdGguY29zKCB0aGV0YSApO1xuXG5cdFx0XHRcdC8vIHZlcnRleFxuXG5cdFx0XHRcdHZlcnRleC54ID0gcmFkaXVzICogc2luVGhldGE7XG5cdFx0XHRcdHZlcnRleC55ID0gLSB2ICogaGVpZ2h0ICsgaGFsZkhlaWdodDtcblx0XHRcdFx0dmVydGV4LnogPSByYWRpdXMgKiBjb3NUaGV0YTtcblx0XHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHRcdC8vIG5vcm1hbFxuXG5cdFx0XHRcdG5vcm1hbC5zZXQoIHNpblRoZXRhLCBzbG9wZSwgY29zVGhldGEgKS5ub3JtYWxpemUoKTtcblx0XHRcdFx0bm9ybWFscy5wdXNoKCBub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56ICk7XG5cblx0XHRcdFx0Ly8gdXZcblxuXHRcdFx0XHR1dnMucHVzaCggdSwgMSAtIHYgKTtcblxuXHRcdFx0XHQvLyBzYXZlIGluZGV4IG9mIHZlcnRleCBpbiByZXNwZWN0aXZlIHJvd1xuXG5cdFx0XHRcdGluZGV4Um93LnB1c2goIGluZGV4ICsrICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gbm93IHNhdmUgdmVydGljZXMgb2YgdGhlIHJvdyBpbiBvdXIgaW5kZXggYXJyYXlcblxuXHRcdFx0aW5kZXhBcnJheS5wdXNoKCBpbmRleFJvdyApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0Zm9yICggeSA9IDA7IHkgPCBoZWlnaHRTZWdtZW50czsgeSArKyApIHtcblxuXHRcdFx0XHQvLyB3ZSB1c2UgdGhlIGluZGV4IGFycmF5IHRvIGFjY2VzcyB0aGUgY29ycmVjdCBpbmRpY2VzXG5cblx0XHRcdFx0dmFyIGEgPSBpbmRleEFycmF5WyB5IF1bIHggXTtcblx0XHRcdFx0dmFyIGIgPSBpbmRleEFycmF5WyB5ICsgMSBdWyB4IF07XG5cdFx0XHRcdHZhciBjID0gaW5kZXhBcnJheVsgeSArIDEgXVsgeCArIDEgXTtcblx0XHRcdFx0dmFyIGQgPSBpbmRleEFycmF5WyB5IF1bIHggKyAxIF07XG5cblx0XHRcdFx0Ly8gZmFjZXNcblxuXHRcdFx0XHRpbmRpY2VzLnB1c2goIGEsIGIsIGQgKTtcblx0XHRcdFx0aW5kaWNlcy5wdXNoKCBiLCBjLCBkICk7XG5cblx0XHRcdFx0Ly8gdXBkYXRlIGdyb3VwIGNvdW50ZXJcblxuXHRcdFx0XHRncm91cENvdW50ICs9IDY7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGFkZCBhIGdyb3VwIHRvIHRoZSBnZW9tZXRyeS4gdGhpcyB3aWxsIGVuc3VyZSBtdWx0aSBtYXRlcmlhbCBzdXBwb3J0XG5cblx0XHRzY29wZS5hZGRHcm91cCggZ3JvdXBTdGFydCwgZ3JvdXBDb3VudCwgMCApO1xuXG5cdFx0Ly8gY2FsY3VsYXRlIG5ldyBzdGFydCB2YWx1ZSBmb3IgZ3JvdXBzXG5cblx0XHRncm91cFN0YXJ0ICs9IGdyb3VwQ291bnQ7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdlbmVyYXRlQ2FwKCB0b3AgKSB7XG5cblx0XHR2YXIgeCwgY2VudGVySW5kZXhTdGFydCwgY2VudGVySW5kZXhFbmQ7XG5cblx0XHR2YXIgdXYgPSBuZXcgVmVjdG9yMigpO1xuXHRcdHZhciB2ZXJ0ZXggPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0dmFyIGdyb3VwQ291bnQgPSAwO1xuXG5cdFx0dmFyIHJhZGl1cyA9ICggdG9wID09PSB0cnVlICkgPyByYWRpdXNUb3AgOiByYWRpdXNCb3R0b207XG5cdFx0dmFyIHNpZ24gPSAoIHRvcCA9PT0gdHJ1ZSApID8gMSA6IC0gMTtcblxuXHRcdC8vIHNhdmUgdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBjZW50ZXIgdmVydGV4XG5cdFx0Y2VudGVySW5kZXhTdGFydCA9IGluZGV4O1xuXG5cdFx0Ly8gZmlyc3Qgd2UgZ2VuZXJhdGUgdGhlIGNlbnRlciB2ZXJ0ZXggZGF0YSBvZiB0aGUgY2FwLlxuXHRcdC8vIGJlY2F1c2UgdGhlIGdlb21ldHJ5IG5lZWRzIG9uZSBzZXQgb2YgdXZzIHBlciBmYWNlLFxuXHRcdC8vIHdlIG11c3QgZ2VuZXJhdGUgYSBjZW50ZXIgdmVydGV4IHBlciBmYWNlL3NlZ21lbnRcblxuXHRcdGZvciAoIHggPSAxOyB4IDw9IHJhZGlhbFNlZ21lbnRzOyB4ICsrICkge1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGljZXMucHVzaCggMCwgaGFsZkhlaWdodCAqIHNpZ24sIDAgKTtcblxuXHRcdFx0Ly8gbm9ybWFsXG5cblx0XHRcdG5vcm1hbHMucHVzaCggMCwgc2lnbiwgMCApO1xuXG5cdFx0XHQvLyB1dlxuXG5cdFx0XHR1dnMucHVzaCggMC41LCAwLjUgKTtcblxuXHRcdFx0Ly8gaW5jcmVhc2UgaW5kZXhcblxuXHRcdFx0aW5kZXggKys7XG5cblx0XHR9XG5cblx0XHQvLyBzYXZlIHRoZSBpbmRleCBvZiB0aGUgbGFzdCBjZW50ZXIgdmVydGV4XG5cblx0XHRjZW50ZXJJbmRleEVuZCA9IGluZGV4O1xuXG5cdFx0Ly8gbm93IHdlIGdlbmVyYXRlIHRoZSBzdXJyb3VuZGluZyB2ZXJ0aWNlcywgbm9ybWFscyBhbmQgdXZzXG5cblx0XHRmb3IgKCB4ID0gMDsgeCA8PSByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0dmFyIHUgPSB4IC8gcmFkaWFsU2VnbWVudHM7XG5cdFx0XHR2YXIgdGhldGEgPSB1ICogdGhldGFMZW5ndGggKyB0aGV0YVN0YXJ0O1xuXG5cdFx0XHR2YXIgY29zVGhldGEgPSBNYXRoLmNvcyggdGhldGEgKTtcblx0XHRcdHZhciBzaW5UaGV0YSA9IE1hdGguc2luKCB0aGV0YSApO1xuXG5cdFx0XHQvLyB2ZXJ0ZXhcblxuXHRcdFx0dmVydGV4LnggPSByYWRpdXMgKiBzaW5UaGV0YTtcblx0XHRcdHZlcnRleC55ID0gaGFsZkhlaWdodCAqIHNpZ247XG5cdFx0XHR2ZXJ0ZXgueiA9IHJhZGl1cyAqIGNvc1RoZXRhO1xuXHRcdFx0dmVydGljZXMucHVzaCggdmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueiApO1xuXG5cdFx0XHQvLyBub3JtYWxcblxuXHRcdFx0bm9ybWFscy5wdXNoKCAwLCBzaWduLCAwICk7XG5cblx0XHRcdC8vIHV2XG5cblx0XHRcdHV2LnggPSAoIGNvc1RoZXRhICogMC41ICkgKyAwLjU7XG5cdFx0XHR1di55ID0gKCBzaW5UaGV0YSAqIDAuNSAqIHNpZ24gKSArIDAuNTtcblx0XHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0XHRcdC8vIGluY3JlYXNlIGluZGV4XG5cblx0XHRcdGluZGV4ICsrO1xuXG5cdFx0fVxuXG5cdFx0Ly8gZ2VuZXJhdGUgaW5kaWNlc1xuXG5cdFx0Zm9yICggeCA9IDA7IHggPCByYWRpYWxTZWdtZW50czsgeCArKyApIHtcblxuXHRcdFx0dmFyIGMgPSBjZW50ZXJJbmRleFN0YXJ0ICsgeDtcblx0XHRcdHZhciBpID0gY2VudGVySW5kZXhFbmQgKyB4O1xuXG5cdFx0XHRpZiAoIHRvcCA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0XHQvLyBmYWNlIHRvcFxuXG5cdFx0XHRcdGluZGljZXMucHVzaCggaSwgaSArIDEsIGMgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBmYWNlIGJvdHRvbVxuXG5cdFx0XHRcdGluZGljZXMucHVzaCggaSArIDEsIGksIGMgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRncm91cENvdW50ICs9IDM7XG5cblx0XHR9XG5cblx0XHQvLyBhZGQgYSBncm91cCB0byB0aGUgZ2VvbWV0cnkuIHRoaXMgd2lsbCBlbnN1cmUgbXVsdGkgbWF0ZXJpYWwgc3VwcG9ydFxuXG5cdFx0c2NvcGUuYWRkR3JvdXAoIGdyb3VwU3RhcnQsIGdyb3VwQ291bnQsIHRvcCA9PT0gdHJ1ZSA/IDEgOiAyICk7XG5cblx0XHQvLyBjYWxjdWxhdGUgbmV3IHN0YXJ0IHZhbHVlIGZvciBncm91cHNcblxuXHRcdGdyb3VwU3RhcnQgKz0gZ3JvdXBDb3VudDtcblxuXHR9XG5cbn1cblxuQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkN5bGluZGVyQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIGFiZWxuYXRpb24gLyBodHRwOi8vZ2l0aHViLmNvbS9hYmVsbmF0aW9uXG4gKi9cblxuLy8gQ29uZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIENvbmVHZW9tZXRyeSggcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRDeWxpbmRlckdlb21ldHJ5LmNhbGwoIHRoaXMsIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKTtcblxuXHR0aGlzLnR5cGUgPSAnQ29uZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG59XG5cbkNvbmVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDeWxpbmRlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ29uZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbmVHZW9tZXRyeTtcblxuLy8gQ29uZUJ1ZmZlckdlb21ldHJ5XG5cbmZ1bmN0aW9uIENvbmVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBoZWlnaHQsIHJhZGlhbFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgb3BlbkVuZGVkLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LmNhbGwoIHRoaXMsIDAsIHJhZGl1cywgaGVpZ2h0LCByYWRpYWxTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIG9wZW5FbmRlZCwgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKTtcblxuXHR0aGlzLnR5cGUgPSAnQ29uZUJ1ZmZlckdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0aGVpZ2h0OiBoZWlnaHQsXG5cdFx0cmFkaWFsU2VnbWVudHM6IHJhZGlhbFNlZ21lbnRzLFxuXHRcdGhlaWdodFNlZ21lbnRzOiBoZWlnaHRTZWdtZW50cyxcblx0XHRvcGVuRW5kZWQ6IG9wZW5FbmRlZCxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG59XG5cbkNvbmVCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ29uZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbmVCdWZmZXJHZW9tZXRyeTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKiBAYXV0aG9yIGh1Z2hlc1xuICovXG5cbi8vIENpcmNsZUdlb21ldHJ5XG5cbmZ1bmN0aW9uIENpcmNsZUdlb21ldHJ5KCByYWRpdXMsIHNlZ21lbnRzLCB0aGV0YVN0YXJ0LCB0aGV0YUxlbmd0aCApIHtcblxuXHRHZW9tZXRyeS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NpcmNsZUdlb21ldHJ5JztcblxuXHR0aGlzLnBhcmFtZXRlcnMgPSB7XG5cdFx0cmFkaXVzOiByYWRpdXMsXG5cdFx0c2VnbWVudHM6IHNlZ21lbnRzLFxuXHRcdHRoZXRhU3RhcnQ6IHRoZXRhU3RhcnQsXG5cdFx0dGhldGFMZW5ndGg6IHRoZXRhTGVuZ3RoXG5cdH07XG5cblx0dGhpcy5mcm9tQnVmZmVyR2VvbWV0cnkoIG5ldyBDaXJjbGVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSApO1xuXHR0aGlzLm1lcmdlVmVydGljZXMoKTtcblxufVxuXG5DaXJjbGVHZW9tZXRyeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBHZW9tZXRyeS5wcm90b3R5cGUgKTtcbkNpcmNsZUdlb21ldHJ5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENpcmNsZUdlb21ldHJ5O1xuXG4vLyBDaXJjbGVCdWZmZXJHZW9tZXRyeVxuXG5mdW5jdGlvbiBDaXJjbGVCdWZmZXJHZW9tZXRyeSggcmFkaXVzLCBzZWdtZW50cywgdGhldGFTdGFydCwgdGhldGFMZW5ndGggKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDaXJjbGVCdWZmZXJHZW9tZXRyeSc7XG5cblx0dGhpcy5wYXJhbWV0ZXJzID0ge1xuXHRcdHJhZGl1czogcmFkaXVzLFxuXHRcdHNlZ21lbnRzOiBzZWdtZW50cyxcblx0XHR0aGV0YVN0YXJ0OiB0aGV0YVN0YXJ0LFxuXHRcdHRoZXRhTGVuZ3RoOiB0aGV0YUxlbmd0aFxuXHR9O1xuXG5cdHJhZGl1cyA9IHJhZGl1cyB8fCAxO1xuXHRzZWdtZW50cyA9IHNlZ21lbnRzICE9PSB1bmRlZmluZWQgPyBNYXRoLm1heCggMywgc2VnbWVudHMgKSA6IDg7XG5cblx0dGhldGFTdGFydCA9IHRoZXRhU3RhcnQgIT09IHVuZGVmaW5lZCA/IHRoZXRhU3RhcnQgOiAwO1xuXHR0aGV0YUxlbmd0aCA9IHRoZXRhTGVuZ3RoICE9PSB1bmRlZmluZWQgPyB0aGV0YUxlbmd0aCA6IE1hdGguUEkgKiAyO1xuXG5cdC8vIGJ1ZmZlcnNcblxuXHR2YXIgaW5kaWNlcyA9IFtdO1xuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIG5vcm1hbHMgPSBbXTtcblx0dmFyIHV2cyA9IFtdO1xuXG5cdC8vIGhlbHBlciB2YXJpYWJsZXNcblxuXHR2YXIgaSwgcztcblx0dmFyIHZlcnRleCA9IG5ldyBWZWN0b3IzKCk7XG5cdHZhciB1diA9IG5ldyBWZWN0b3IyKCk7XG5cblx0Ly8gY2VudGVyIHBvaW50XG5cblx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRub3JtYWxzLnB1c2goIDAsIDAsIDEgKTtcblx0dXZzLnB1c2goIDAuNSwgMC41ICk7XG5cblx0Zm9yICggcyA9IDAsIGkgPSAzOyBzIDw9IHNlZ21lbnRzOyBzICsrLCBpICs9IDMgKSB7XG5cblx0XHR2YXIgc2VnbWVudCA9IHRoZXRhU3RhcnQgKyBzIC8gc2VnbWVudHMgKiB0aGV0YUxlbmd0aDtcblxuXHRcdC8vIHZlcnRleFxuXG5cdFx0dmVydGV4LnggPSByYWRpdXMgKiBNYXRoLmNvcyggc2VnbWVudCApO1xuXHRcdHZlcnRleC55ID0gcmFkaXVzICogTWF0aC5zaW4oIHNlZ21lbnQgKTtcblxuXHRcdHZlcnRpY2VzLnB1c2goIHZlcnRleC54LCB2ZXJ0ZXgueSwgdmVydGV4LnogKTtcblxuXHRcdC8vIG5vcm1hbFxuXG5cdFx0bm9ybWFscy5wdXNoKCAwLCAwLCAxICk7XG5cblx0XHQvLyB1dnNcblxuXHRcdHV2LnggPSAoIHZlcnRpY2VzWyBpIF0gLyByYWRpdXMgKyAxICkgLyAyO1xuXHRcdHV2LnkgPSAoIHZlcnRpY2VzWyBpICsgMSBdIC8gcmFkaXVzICsgMSApIC8gMjtcblxuXHRcdHV2cy5wdXNoKCB1di54LCB1di55ICk7XG5cblx0fVxuXG5cdC8vIGluZGljZXNcblxuXHRmb3IgKCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdGluZGljZXMucHVzaCggaSwgaSArIDEsIDAgKTtcblxuXHR9XG5cblx0Ly8gYnVpbGQgZ2VvbWV0cnlcblxuXHR0aGlzLnNldEluZGV4KCBpbmRpY2VzICk7XG5cdHRoaXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHR0aGlzLnNldEF0dHJpYnV0ZSggJ25vcm1hbCcsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBub3JtYWxzLCAzICkgKTtcblx0dGhpcy5zZXRBdHRyaWJ1dGUoICd1dicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB1dnMsIDIgKSApO1xuXG59XG5cbkNpcmNsZUJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZSApO1xuQ2lyY2xlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2lyY2xlQnVmZmVyR2VvbWV0cnk7XG5cblxuXG52YXIgR2VvbWV0cmllcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRXaXJlZnJhbWVHZW9tZXRyeTogV2lyZWZyYW1lR2VvbWV0cnksXG5cdFBhcmFtZXRyaWNHZW9tZXRyeTogUGFyYW1ldHJpY0dlb21ldHJ5LFxuXHRQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnk6IFBhcmFtZXRyaWNCdWZmZXJHZW9tZXRyeSxcblx0VGV0cmFoZWRyb25HZW9tZXRyeTogVGV0cmFoZWRyb25HZW9tZXRyeSxcblx0VGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeTogVGV0cmFoZWRyb25CdWZmZXJHZW9tZXRyeSxcblx0T2N0YWhlZHJvbkdlb21ldHJ5OiBPY3RhaGVkcm9uR2VvbWV0cnksXG5cdE9jdGFoZWRyb25CdWZmZXJHZW9tZXRyeTogT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRJY29zYWhlZHJvbkdlb21ldHJ5OiBJY29zYWhlZHJvbkdlb21ldHJ5LFxuXHRJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBJY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHREb2RlY2FoZWRyb25HZW9tZXRyeTogRG9kZWNhaGVkcm9uR2VvbWV0cnksXG5cdERvZGVjYWhlZHJvbkJ1ZmZlckdlb21ldHJ5OiBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSxcblx0UG9seWhlZHJvbkdlb21ldHJ5OiBQb2x5aGVkcm9uR2VvbWV0cnksXG5cdFBvbHloZWRyb25CdWZmZXJHZW9tZXRyeTogUG9seWhlZHJvbkJ1ZmZlckdlb21ldHJ5LFxuXHRUdWJlR2VvbWV0cnk6IFR1YmVHZW9tZXRyeSxcblx0VHViZUJ1ZmZlckdlb21ldHJ5OiBUdWJlQnVmZmVyR2VvbWV0cnksXG5cdFRvcnVzS25vdEdlb21ldHJ5OiBUb3J1c0tub3RHZW9tZXRyeSxcblx0VG9ydXNLbm90QnVmZmVyR2VvbWV0cnk6IFRvcnVzS25vdEJ1ZmZlckdlb21ldHJ5LFxuXHRUb3J1c0dlb21ldHJ5OiBUb3J1c0dlb21ldHJ5LFxuXHRUb3J1c0J1ZmZlckdlb21ldHJ5OiBUb3J1c0J1ZmZlckdlb21ldHJ5LFxuXHRUZXh0R2VvbWV0cnk6IFRleHRHZW9tZXRyeSxcblx0VGV4dEJ1ZmZlckdlb21ldHJ5OiBUZXh0QnVmZmVyR2VvbWV0cnksXG5cdFNwaGVyZUdlb21ldHJ5OiBTcGhlcmVHZW9tZXRyeSxcblx0U3BoZXJlQnVmZmVyR2VvbWV0cnk6IFNwaGVyZUJ1ZmZlckdlb21ldHJ5LFxuXHRSaW5nR2VvbWV0cnk6IFJpbmdHZW9tZXRyeSxcblx0UmluZ0J1ZmZlckdlb21ldHJ5OiBSaW5nQnVmZmVyR2VvbWV0cnksXG5cdFBsYW5lR2VvbWV0cnk6IFBsYW5lR2VvbWV0cnksXG5cdFBsYW5lQnVmZmVyR2VvbWV0cnk6IFBsYW5lQnVmZmVyR2VvbWV0cnksXG5cdExhdGhlR2VvbWV0cnk6IExhdGhlR2VvbWV0cnksXG5cdExhdGhlQnVmZmVyR2VvbWV0cnk6IExhdGhlQnVmZmVyR2VvbWV0cnksXG5cdFNoYXBlR2VvbWV0cnk6IFNoYXBlR2VvbWV0cnksXG5cdFNoYXBlQnVmZmVyR2VvbWV0cnk6IFNoYXBlQnVmZmVyR2VvbWV0cnksXG5cdEV4dHJ1ZGVHZW9tZXRyeTogRXh0cnVkZUdlb21ldHJ5LFxuXHRFeHRydWRlQnVmZmVyR2VvbWV0cnk6IEV4dHJ1ZGVCdWZmZXJHZW9tZXRyeSxcblx0RWRnZXNHZW9tZXRyeTogRWRnZXNHZW9tZXRyeSxcblx0Q29uZUdlb21ldHJ5OiBDb25lR2VvbWV0cnksXG5cdENvbmVCdWZmZXJHZW9tZXRyeTogQ29uZUJ1ZmZlckdlb21ldHJ5LFxuXHRDeWxpbmRlckdlb21ldHJ5OiBDeWxpbmRlckdlb21ldHJ5LFxuXHRDeWxpbmRlckJ1ZmZlckdlb21ldHJ5OiBDeWxpbmRlckJ1ZmZlckdlb21ldHJ5LFxuXHRDaXJjbGVHZW9tZXRyeTogQ2lyY2xlR2VvbWV0cnksXG5cdENpcmNsZUJ1ZmZlckdlb21ldHJ5OiBDaXJjbGVCdWZmZXJHZW9tZXRyeSxcblx0Qm94R2VvbWV0cnk6IEJveEdlb21ldHJ5LFxuXHRCb3hCdWZmZXJHZW9tZXRyeTogQm94QnVmZmVyR2VvbWV0cnlcbn0pO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPFRIUkVFLkNvbG9yPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIFNoYWRvd01hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhZG93TWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4MDAwMDAwICk7XG5cdHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTaGFkb3dNYXRlcmlhbDtcblxuU2hhZG93TWF0ZXJpYWwucHJvdG90eXBlLmlzU2hhZG93TWF0ZXJpYWwgPSB0cnVlO1xuXG5TaGFkb3dNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBSYXdTaGFkZXJNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRTaGFkZXJNYXRlcmlhbC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJzICk7XG5cblx0dGhpcy50eXBlID0gJ1Jhd1NoYWRlck1hdGVyaWFsJztcblxufVxuXG5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUgKTtcblJhd1NoYWRlck1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJhd1NoYWRlck1hdGVyaWFsO1xuXG5SYXdTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUuaXNSYXdTaGFkZXJNYXRlcmlhbCA9IHRydWU7XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgcm91Z2huZXNzOiA8ZmxvYXQ+LFxuICogIG1ldGFsbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgcm91Z2huZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBtZXRhbG5lc3NNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgZW52TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFN0YW5kYXJkTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ1NUQU5EQVJEJzogJycgfTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaFN0YW5kYXJkTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7IC8vIGRpZmZ1c2Vcblx0dGhpcy5yb3VnaG5lc3MgPSAxLjA7XG5cdHRoaXMubWV0YWxuZXNzID0gMC4wO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5yb3VnaG5lc3NNYXAgPSBudWxsO1xuXG5cdHRoaXMubWV0YWxuZXNzTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuZW52TWFwSW50ZW5zaXR5ID0gMS4wO1xuXG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnZlcnRleFRhbmdlbnRzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hTdGFuZGFyZE1hdGVyaWFsO1xuXG5NZXNoU3RhbmRhcmRNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoU3RhbmRhcmRNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnU1RBTkRBUkQnOiAnJyB9O1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdHRoaXMucm91Z2huZXNzID0gc291cmNlLnJvdWdobmVzcztcblx0dGhpcy5tZXRhbG5lc3MgPSBzb3VyY2UubWV0YWxuZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnJvdWdobmVzc01hcCA9IHNvdXJjZS5yb3VnaG5lc3NNYXA7XG5cblx0dGhpcy5tZXRhbG5lc3NNYXAgPSBzb3VyY2UubWV0YWxuZXNzTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmVudk1hcEludGVuc2l0eSA9IHNvdXJjZS5lbnZNYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5yZWZyYWN0aW9uUmF0aW8gPSBzb3VyY2UucmVmcmFjdGlvblJhdGlvO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gc291cmNlLndpcmVmcmFtZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSBzb3VyY2Uud2lyZWZyYW1lTGluZXdpZHRoO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSBzb3VyY2Uud2lyZWZyYW1lTGluZWNhcDtcblx0dGhpcy53aXJlZnJhbWVMaW5lam9pbiA9IHNvdXJjZS53aXJlZnJhbWVMaW5lam9pbjtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHR0aGlzLnZlcnRleFRhbmdlbnRzID0gc291cmNlLnZlcnRleFRhbmdlbnRzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY2xlYXJjb2F0OiA8ZmxvYXQ+LFxuICogIGNsZWFyY29hdE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBjbGVhcmNvYXRSb3VnaG5lc3M6IDxmbG9hdD4sXG4gKiAgY2xlYXJjb2F0Um91Z2huZXNzTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGNsZWFyY29hdE5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKiAgY2xlYXJjb2F0Tm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKlxuICogIHNoZWVuOiA8Q29sb3I+LFxuICpcbiAqICB0cmFuc3BhcmVuY3k6IDxmbG9hdD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoUGh5c2ljYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNZXNoU3RhbmRhcmRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0ge1xuXG5cdFx0J1NUQU5EQVJEJzogJycsXG5cdFx0J1BIWVNJQ0FMJzogJydcblxuXHR9O1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGh5c2ljYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5jbGVhcmNvYXQgPSAwLjA7XG5cdHRoaXMuY2xlYXJjb2F0TWFwID0gbnVsbDtcblx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSAwLjA7XG5cdHRoaXMuY2xlYXJjb2F0Um91Z2huZXNzTWFwID0gbnVsbDtcblx0dGhpcy5jbGVhcmNvYXROb3JtYWxTY2FsZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gbnVsbDtcblxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDAuNTsgLy8gbWFwcyB0byBGMCA9IDAuMDRcblxuXHR0aGlzLnNoZWVuID0gbnVsbDsgLy8gbnVsbCB3aWxsIGRpc2FibGUgc2hlZW4gYnNkZlxuXG5cdHRoaXMudHJhbnNwYXJlbmN5ID0gMC4wO1xuXG5cdHRoaXMuc2V0VmFsdWVzKCBwYXJhbWV0ZXJzICk7XG5cbn1cblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaFN0YW5kYXJkTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoUGh5c2ljYWxNYXRlcmlhbDtcblxuTWVzaFBoeXNpY2FsTWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaFBoeXNpY2FsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoUGh5c2ljYWxNYXRlcmlhbC5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHtcblxuXHRcdCdTVEFOREFSRCc6ICcnLFxuXHRcdCdQSFlTSUNBTCc6ICcnXG5cblx0fTtcblxuXHR0aGlzLmNsZWFyY29hdCA9IHNvdXJjZS5jbGVhcmNvYXQ7XG5cdHRoaXMuY2xlYXJjb2F0TWFwID0gc291cmNlLmNsZWFyY29hdE1hcDtcblx0dGhpcy5jbGVhcmNvYXRSb3VnaG5lc3MgPSBzb3VyY2UuY2xlYXJjb2F0Um91Z2huZXNzO1xuXHR0aGlzLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IHNvdXJjZS5jbGVhcmNvYXRSb3VnaG5lc3NNYXA7XG5cdHRoaXMuY2xlYXJjb2F0Tm9ybWFsTWFwID0gc291cmNlLmNsZWFyY29hdE5vcm1hbE1hcDtcblx0dGhpcy5jbGVhcmNvYXROb3JtYWxTY2FsZS5jb3B5KCBzb3VyY2UuY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblxuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IHNvdXJjZS5yZWZsZWN0aXZpdHk7XG5cblx0aWYgKCBzb3VyY2Uuc2hlZW4gKSB7XG5cblx0XHR0aGlzLnNoZWVuID0gKCB0aGlzLnNoZWVuIHx8IG5ldyBDb2xvcigpICkuY29weSggc291cmNlLnNoZWVuICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMuc2hlZW4gPSBudWxsO1xuXG5cdH1cblxuXHR0aGlzLnRyYW5zcGFyZW5jeSA9IHNvdXJjZS50cmFuc3BhcmVuY3k7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgc3BlY3VsYXI6IDxoZXg+LFxuICogIHNoaW5pbmVzczogPGZsb2F0PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgc3BlY3VsYXJNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGFscGhhTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBlbnZNYXA6IG5ldyBUSFJFRS5DdWJlVGV4dHVyZSggW3Bvc3gsIG5lZ3gsIHBvc3ksIG5lZ3ksIHBvc3osIG5lZ3pdICksXG4gKiAgY29tYmluZTogVEhSRUUuTXVsdGlwbHlPcGVyYXRpb24sXG4gKiAgcmVmbGVjdGl2aXR5OiA8ZmxvYXQ+LFxuICogIHJlZnJhY3Rpb25SYXRpbzogPGZsb2F0PixcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFBob25nTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdNZXNoUGhvbmdNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXHR0aGlzLnNwZWN1bGFyID0gbmV3IENvbG9yKCAweDExMTExMSApO1xuXHR0aGlzLnNoaW5pbmVzcyA9IDMwO1xuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy5lbnZNYXAgPSBudWxsO1xuXHR0aGlzLmNvbWJpbmUgPSBNdWx0aXBseU9wZXJhdGlvbjtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSAxO1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IDAuOTg7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hQaG9uZ01hdGVyaWFsO1xuXG5NZXNoUGhvbmdNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoUGhvbmdNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgdGFrYWhpcm94IC8gaHR0cDovL2dpdGh1Yi5jb20vdGFrYWhpcm94XG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgc3BlY3VsYXI6IDxoZXg+LFxuICogIHNoaW5pbmVzczogPGZsb2F0PixcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGdyYWRpZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBsaWdodE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBsaWdodE1hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBhb01hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBhb01hcEludGVuc2l0eTogPGZsb2F0PlxuICpcbiAqICBlbWlzc2l2ZTogPGhleD4sXG4gKiAgZW1pc3NpdmVJbnRlbnNpdHk6IDxmbG9hdD5cbiAqICBlbWlzc2l2ZU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYnVtcE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBidW1wU2NhbGU6IDxmbG9hdD4sXG4gKlxuICogIG5vcm1hbE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBub3JtYWxNYXBUeXBlOiBUSFJFRS5UYW5nZW50U3BhY2VOb3JtYWxNYXAsXG4gKiAgbm9ybWFsU2NhbGU6IDxWZWN0b3IyPixcbiAqXG4gKiAgZGlzcGxhY2VtZW50TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGRpc3BsYWNlbWVudFNjYWxlOiA8ZmxvYXQ+LFxuICogIGRpc3BsYWNlbWVudEJpYXM6IDxmbG9hdD4sXG4gKlxuICogIHNwZWN1bGFyTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBhbHBoYU1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgd2lyZWZyYW1lOiA8Ym9vbGVhbj4sXG4gKiAgd2lyZWZyYW1lTGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBza2lubmluZzogPGJvb2w+LFxuICogIG1vcnBoVGFyZ2V0czogPGJvb2w+LFxuICogIG1vcnBoTm9ybWFsczogPGJvb2w+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTWVzaFRvb25NYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5kZWZpbmVzID0geyAnVE9PTic6ICcnIH07XG5cblx0dGhpcy50eXBlID0gJ01lc2hUb29uTWF0ZXJpYWwnO1xuXG5cdHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoIDB4ZmZmZmZmICk7XG5cdHRoaXMuc3BlY3VsYXIgPSBuZXcgQ29sb3IoIDB4MTExMTExICk7XG5cdHRoaXMuc2hpbmluZXNzID0gMzA7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXHR0aGlzLmdyYWRpZW50TWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBudWxsO1xuXHR0aGlzLmJ1bXBTY2FsZSA9IDE7XG5cblx0dGhpcy5ub3JtYWxNYXAgPSBudWxsO1xuXHR0aGlzLm5vcm1hbE1hcFR5cGUgPSBUYW5nZW50U3BhY2VOb3JtYWxNYXA7XG5cdHRoaXMubm9ybWFsU2NhbGUgPSBuZXcgVmVjdG9yMiggMSwgMSApO1xuXG5cdHRoaXMuZGlzcGxhY2VtZW50TWFwID0gbnVsbDtcblx0dGhpcy5kaXNwbGFjZW1lbnRTY2FsZSA9IDE7XG5cdHRoaXMuZGlzcGxhY2VtZW50QmlhcyA9IDA7XG5cblx0dGhpcy5zcGVjdWxhck1hcCA9IG51bGw7XG5cblx0dGhpcy5hbHBoYU1hcCA9IG51bGw7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBmYWxzZTtcblx0dGhpcy53aXJlZnJhbWVMaW5ld2lkdGggPSAxO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVjYXAgPSAncm91bmQnO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gJ3JvdW5kJztcblxuXHR0aGlzLnNraW5uaW5nID0gZmFsc2U7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gZmFsc2U7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gZmFsc2U7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE1hdGVyaWFsLnByb3RvdHlwZSApO1xuTWVzaFRvb25NYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoVG9vbk1hdGVyaWFsO1xuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5pc01lc2hUb29uTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoVG9vbk1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5jb2xvci5jb3B5KCBzb3VyY2UuY29sb3IgKTtcblx0dGhpcy5zcGVjdWxhci5jb3B5KCBzb3VyY2Uuc3BlY3VsYXIgKTtcblx0dGhpcy5zaGluaW5lc3MgPSBzb3VyY2Uuc2hpbmluZXNzO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblx0dGhpcy5ncmFkaWVudE1hcCA9IHNvdXJjZS5ncmFkaWVudE1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIGJ1bXBNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgYnVtcFNjYWxlOiA8ZmxvYXQ+LFxuICpcbiAqICBub3JtYWxNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgbm9ybWFsTWFwVHlwZTogVEhSRUUuVGFuZ2VudFNwYWNlTm9ybWFsTWFwLFxuICogIG5vcm1hbFNjYWxlOiA8VmVjdG9yMj4sXG4gKlxuICogIGRpc3BsYWNlbWVudE1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqICBkaXNwbGFjZW1lbnRTY2FsZTogPGZsb2F0PixcbiAqICBkaXNwbGFjZW1lbnRCaWFzOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD5cbiAqXG4gKiAgc2tpbm5pbmc6IDxib29sPixcbiAqICBtb3JwaFRhcmdldHM6IDxib29sPixcbiAqICBtb3JwaE5vcm1hbHM6IDxib29sPlxuICogfVxuICovXG5cbmZ1bmN0aW9uIE1lc2hOb3JtYWxNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRNYXRlcmlhbC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ01lc2hOb3JtYWxNYXRlcmlhbCc7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMud2lyZWZyYW1lID0gZmFsc2U7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gMTtcblxuXHR0aGlzLmZvZyA9IGZhbHNlO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTm9ybWFsTWF0ZXJpYWw7XG5cbk1lc2hOb3JtYWxNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTm9ybWFsTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTm9ybWFsTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLndpcmVmcmFtZSA9IHNvdXJjZS53aXJlZnJhbWU7XG5cdHRoaXMud2lyZWZyYW1lTGluZXdpZHRoID0gc291cmNlLndpcmVmcmFtZUxpbmV3aWR0aDtcblxuXHR0aGlzLnNraW5uaW5nID0gc291cmNlLnNraW5uaW5nO1xuXHR0aGlzLm1vcnBoVGFyZ2V0cyA9IHNvdXJjZS5tb3JwaFRhcmdldHM7XG5cdHRoaXMubW9ycGhOb3JtYWxzID0gc291cmNlLm1vcnBoTm9ybWFscztcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqXG4gKiBwYXJhbWV0ZXJzID0ge1xuICogIGNvbG9yOiA8aGV4PixcbiAqICBvcGFjaXR5OiA8ZmxvYXQ+LFxuICpcbiAqICBtYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGxpZ2h0TWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGxpZ2h0TWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGFvTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGFvTWFwSW50ZW5zaXR5OiA8ZmxvYXQ+XG4gKlxuICogIGVtaXNzaXZlOiA8aGV4PixcbiAqICBlbWlzc2l2ZUludGVuc2l0eTogPGZsb2F0PlxuICogIGVtaXNzaXZlTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBzcGVjdWxhck1hcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIGVudk1hcDogbmV3IFRIUkVFLkN1YmVUZXh0dXJlKCBbcG9zeCwgbmVneCwgcG9zeSwgbmVneSwgcG9zeiwgbmVnel0gKSxcbiAqICBjb21iaW5lOiBUSFJFRS5NdWx0aXBseSxcbiAqICByZWZsZWN0aXZpdHk6IDxmbG9hdD4sXG4gKiAgcmVmcmFjdGlvblJhdGlvOiA8ZmxvYXQ+LFxuICpcbiAqICB3aXJlZnJhbWU6IDxib29sZWFuPixcbiAqICB3aXJlZnJhbWVMaW5ld2lkdGg6IDxmbG9hdD4sXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTGFtYmVydE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdE1hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTWVzaExhbWJlcnRNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWFwID0gbnVsbDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gbnVsbDtcblx0dGhpcy5saWdodE1hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmFvTWFwID0gbnVsbDtcblx0dGhpcy5hb01hcEludGVuc2l0eSA9IDEuMDtcblxuXHR0aGlzLmVtaXNzaXZlID0gbmV3IENvbG9yKCAweDAwMDAwMCApO1xuXHR0aGlzLmVtaXNzaXZlSW50ZW5zaXR5ID0gMS4wO1xuXHR0aGlzLmVtaXNzaXZlTWFwID0gbnVsbDtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gbnVsbDtcblxuXHR0aGlzLmFscGhhTWFwID0gbnVsbDtcblxuXHR0aGlzLmVudk1hcCA9IG51bGw7XG5cdHRoaXMuY29tYmluZSA9IE11bHRpcGx5T3BlcmF0aW9uO1xuXHR0aGlzLnJlZmxlY3Rpdml0eSA9IDE7XG5cdHRoaXMucmVmcmFjdGlvblJhdGlvID0gMC45ODtcblxuXHR0aGlzLndpcmVmcmFtZSA9IGZhbHNlO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IDE7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9ICdyb3VuZCc7XG5cdHRoaXMud2lyZWZyYW1lTGluZWpvaW4gPSAncm91bmQnO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWF0ZXJpYWwucHJvdG90eXBlICk7XG5NZXNoTGFtYmVydE1hdGVyaWFsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1lc2hMYW1iZXJ0TWF0ZXJpYWw7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmlzTWVzaExhbWJlcnRNYXRlcmlhbCA9IHRydWU7XG5cbk1lc2hMYW1iZXJ0TWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmNvbG9yLmNvcHkoIHNvdXJjZS5jb2xvciApO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmxpZ2h0TWFwID0gc291cmNlLmxpZ2h0TWFwO1xuXHR0aGlzLmxpZ2h0TWFwSW50ZW5zaXR5ID0gc291cmNlLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdHRoaXMuYW9NYXAgPSBzb3VyY2UuYW9NYXA7XG5cdHRoaXMuYW9NYXBJbnRlbnNpdHkgPSBzb3VyY2UuYW9NYXBJbnRlbnNpdHk7XG5cblx0dGhpcy5lbWlzc2l2ZS5jb3B5KCBzb3VyY2UuZW1pc3NpdmUgKTtcblx0dGhpcy5lbWlzc2l2ZU1hcCA9IHNvdXJjZS5lbWlzc2l2ZU1hcDtcblx0dGhpcy5lbWlzc2l2ZUludGVuc2l0eSA9IHNvdXJjZS5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHR0aGlzLnNwZWN1bGFyTWFwID0gc291cmNlLnNwZWN1bGFyTWFwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBzb3VyY2UuYWxwaGFNYXA7XG5cblx0dGhpcy5lbnZNYXAgPSBzb3VyY2UuZW52TWFwO1xuXHR0aGlzLmNvbWJpbmUgPSBzb3VyY2UuY29tYmluZTtcblx0dGhpcy5yZWZsZWN0aXZpdHkgPSBzb3VyY2UucmVmbGVjdGl2aXR5O1xuXHR0aGlzLnJlZnJhY3Rpb25SYXRpbyA9IHNvdXJjZS5yZWZyYWN0aW9uUmF0aW87XG5cblx0dGhpcy53aXJlZnJhbWUgPSBzb3VyY2Uud2lyZWZyYW1lO1xuXHR0aGlzLndpcmVmcmFtZUxpbmV3aWR0aCA9IHNvdXJjZS53aXJlZnJhbWVMaW5ld2lkdGg7XG5cdHRoaXMud2lyZWZyYW1lTGluZWNhcCA9IHNvdXJjZS53aXJlZnJhbWVMaW5lY2FwO1xuXHR0aGlzLndpcmVmcmFtZUxpbmVqb2luID0gc291cmNlLndpcmVmcmFtZUxpbmVqb2luO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIHBhcmFtZXRlcnMgPSB7XG4gKiAgY29sb3I6IDxoZXg+LFxuICogIG9wYWNpdHk6IDxmbG9hdD4sXG4gKlxuICogIG1hdGNhcDogbmV3IFRIUkVFLlRleHR1cmUoIDxJbWFnZT4gKSxcbiAqXG4gKiAgbWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICpcbiAqICBidW1wTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIGJ1bXBTY2FsZTogPGZsb2F0PixcbiAqXG4gKiAgbm9ybWFsTWFwOiBuZXcgVEhSRUUuVGV4dHVyZSggPEltYWdlPiApLFxuICogIG5vcm1hbE1hcFR5cGU6IFRIUkVFLlRhbmdlbnRTcGFjZU5vcm1hbE1hcCxcbiAqICBub3JtYWxTY2FsZTogPFZlY3RvcjI+LFxuICpcbiAqICBkaXNwbGFjZW1lbnRNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKiAgZGlzcGxhY2VtZW50U2NhbGU6IDxmbG9hdD4sXG4gKiAgZGlzcGxhY2VtZW50QmlhczogPGZsb2F0PixcbiAqXG4gKiAgYWxwaGFNYXA6IG5ldyBUSFJFRS5UZXh0dXJlKCA8SW1hZ2U+ICksXG4gKlxuICogIHNraW5uaW5nOiA8Ym9vbD4sXG4gKiAgbW9ycGhUYXJnZXRzOiA8Ym9vbD4sXG4gKiAgbW9ycGhOb3JtYWxzOiA8Ym9vbD5cbiAqIH1cbiAqL1xuXG5mdW5jdGlvbiBNZXNoTWF0Y2FwTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKSB7XG5cblx0TWF0ZXJpYWwuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZGVmaW5lcyA9IHsgJ01BVENBUCc6ICcnIH07XG5cblx0dGhpcy50eXBlID0gJ01lc2hNYXRjYXBNYXRlcmlhbCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTsgLy8gZGlmZnVzZVxuXG5cdHRoaXMubWF0Y2FwID0gbnVsbDtcblxuXHR0aGlzLm1hcCA9IG51bGw7XG5cblx0dGhpcy5idW1wTWFwID0gbnVsbDtcblx0dGhpcy5idW1wU2NhbGUgPSAxO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gbnVsbDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gVGFuZ2VudFNwYWNlTm9ybWFsTWFwO1xuXHR0aGlzLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoIDEsIDEgKTtcblxuXHR0aGlzLmRpc3BsYWNlbWVudE1hcCA9IG51bGw7XG5cdHRoaXMuZGlzcGxhY2VtZW50U2NhbGUgPSAxO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSAwO1xuXG5cdHRoaXMuYWxwaGFNYXAgPSBudWxsO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBmYWxzZTtcblx0dGhpcy5tb3JwaFRhcmdldHMgPSBmYWxzZTtcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBmYWxzZTtcblxuXHR0aGlzLnNldFZhbHVlcyggcGFyYW1ldGVycyApO1xuXG59XG5cbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBNYXRlcmlhbC5wcm90b3R5cGUgKTtcbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNZXNoTWF0Y2FwTWF0ZXJpYWw7XG5cbk1lc2hNYXRjYXBNYXRlcmlhbC5wcm90b3R5cGUuaXNNZXNoTWF0Y2FwTWF0ZXJpYWwgPSB0cnVlO1xuXG5NZXNoTWF0Y2FwTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRNYXRlcmlhbC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLmRlZmluZXMgPSB7ICdNQVRDQVAnOiAnJyB9O1xuXG5cdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cblx0dGhpcy5tYXRjYXAgPSBzb3VyY2UubWF0Y2FwO1xuXG5cdHRoaXMubWFwID0gc291cmNlLm1hcDtcblxuXHR0aGlzLmJ1bXBNYXAgPSBzb3VyY2UuYnVtcE1hcDtcblx0dGhpcy5idW1wU2NhbGUgPSBzb3VyY2UuYnVtcFNjYWxlO1xuXG5cdHRoaXMubm9ybWFsTWFwID0gc291cmNlLm5vcm1hbE1hcDtcblx0dGhpcy5ub3JtYWxNYXBUeXBlID0gc291cmNlLm5vcm1hbE1hcFR5cGU7XG5cdHRoaXMubm9ybWFsU2NhbGUuY29weSggc291cmNlLm5vcm1hbFNjYWxlICk7XG5cblx0dGhpcy5kaXNwbGFjZW1lbnRNYXAgPSBzb3VyY2UuZGlzcGxhY2VtZW50TWFwO1xuXHR0aGlzLmRpc3BsYWNlbWVudFNjYWxlID0gc291cmNlLmRpc3BsYWNlbWVudFNjYWxlO1xuXHR0aGlzLmRpc3BsYWNlbWVudEJpYXMgPSBzb3VyY2UuZGlzcGxhY2VtZW50QmlhcztcblxuXHR0aGlzLmFscGhhTWFwID0gc291cmNlLmFscGhhTWFwO1xuXG5cdHRoaXMuc2tpbm5pbmcgPSBzb3VyY2Uuc2tpbm5pbmc7XG5cdHRoaXMubW9ycGhUYXJnZXRzID0gc291cmNlLm1vcnBoVGFyZ2V0cztcblx0dGhpcy5tb3JwaE5vcm1hbHMgPSBzb3VyY2UubW9ycGhOb3JtYWxzO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKlxuICogcGFyYW1ldGVycyA9IHtcbiAqICBjb2xvcjogPGhleD4sXG4gKiAgb3BhY2l0eTogPGZsb2F0PixcbiAqXG4gKiAgbGluZXdpZHRoOiA8ZmxvYXQ+LFxuICpcbiAqICBzY2FsZTogPGZsb2F0PixcbiAqICBkYXNoU2l6ZTogPGZsb2F0PixcbiAqICBnYXBTaXplOiA8ZmxvYXQ+XG4gKiB9XG4gKi9cblxuZnVuY3Rpb24gTGluZURhc2hlZE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdExpbmVCYXNpY01hdGVyaWFsLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnTGluZURhc2hlZE1hdGVyaWFsJztcblxuXHR0aGlzLnNjYWxlID0gMTtcblx0dGhpcy5kYXNoU2l6ZSA9IDM7XG5cdHRoaXMuZ2FwU2l6ZSA9IDE7XG5cblx0dGhpcy5zZXRWYWx1ZXMoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlICk7XG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZURhc2hlZE1hdGVyaWFsO1xuXG5MaW5lRGFzaGVkTWF0ZXJpYWwucHJvdG90eXBlLmlzTGluZURhc2hlZE1hdGVyaWFsID0gdHJ1ZTtcblxuTGluZURhc2hlZE1hdGVyaWFsLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0TGluZUJhc2ljTWF0ZXJpYWwucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5zY2FsZSA9IHNvdXJjZS5zY2FsZTtcblx0dGhpcy5kYXNoU2l6ZSA9IHNvdXJjZS5kYXNoU2l6ZTtcblx0dGhpcy5nYXBTaXplID0gc291cmNlLmdhcFNpemU7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblxuXG52YXIgTWF0ZXJpYWxzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdFNoYWRvd01hdGVyaWFsOiBTaGFkb3dNYXRlcmlhbCxcblx0U3ByaXRlTWF0ZXJpYWw6IFNwcml0ZU1hdGVyaWFsLFxuXHRSYXdTaGFkZXJNYXRlcmlhbDogUmF3U2hhZGVyTWF0ZXJpYWwsXG5cdFNoYWRlck1hdGVyaWFsOiBTaGFkZXJNYXRlcmlhbCxcblx0UG9pbnRzTWF0ZXJpYWw6IFBvaW50c01hdGVyaWFsLFxuXHRNZXNoUGh5c2ljYWxNYXRlcmlhbDogTWVzaFBoeXNpY2FsTWF0ZXJpYWwsXG5cdE1lc2hTdGFuZGFyZE1hdGVyaWFsOiBNZXNoU3RhbmRhcmRNYXRlcmlhbCxcblx0TWVzaFBob25nTWF0ZXJpYWw6IE1lc2hQaG9uZ01hdGVyaWFsLFxuXHRNZXNoVG9vbk1hdGVyaWFsOiBNZXNoVG9vbk1hdGVyaWFsLFxuXHRNZXNoTm9ybWFsTWF0ZXJpYWw6IE1lc2hOb3JtYWxNYXRlcmlhbCxcblx0TWVzaExhbWJlcnRNYXRlcmlhbDogTWVzaExhbWJlcnRNYXRlcmlhbCxcblx0TWVzaERlcHRoTWF0ZXJpYWw6IE1lc2hEZXB0aE1hdGVyaWFsLFxuXHRNZXNoRGlzdGFuY2VNYXRlcmlhbDogTWVzaERpc3RhbmNlTWF0ZXJpYWwsXG5cdE1lc2hCYXNpY01hdGVyaWFsOiBNZXNoQmFzaWNNYXRlcmlhbCxcblx0TWVzaE1hdGNhcE1hdGVyaWFsOiBNZXNoTWF0Y2FwTWF0ZXJpYWwsXG5cdExpbmVEYXNoZWRNYXRlcmlhbDogTGluZURhc2hlZE1hdGVyaWFsLFxuXHRMaW5lQmFzaWNNYXRlcmlhbDogTGluZUJhc2ljTWF0ZXJpYWwsXG5cdE1hdGVyaWFsOiBNYXRlcmlhbFxufSk7XG5cbi8qKlxuICogQGF1dGhvciB0c2Nod1xuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbnZhciBBbmltYXRpb25VdGlscyA9IHtcblxuXHQvLyBzYW1lIGFzIEFycmF5LnByb3RvdHlwZS5zbGljZSwgYnV0IGFsc28gd29ya3Mgb24gdHlwZWQgYXJyYXlzXG5cdGFycmF5U2xpY2U6IGZ1bmN0aW9uICggYXJyYXksIGZyb20sIHRvICkge1xuXG5cdFx0aWYgKCBBbmltYXRpb25VdGlscy5pc1R5cGVkQXJyYXkoIGFycmF5ICkgKSB7XG5cblx0XHRcdC8vIGluIGlvczkgYXJyYXkuc3ViYXJyYXkoZnJvbSwgdW5kZWZpbmVkKSB3aWxsIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gYnV0IGFycmF5LnN1YmFycmF5KGZyb20pIG9yIGFycmF5LnN1YmFycmF5KGZyb20sIGxlbikgaXMgY29ycmVjdFxuXHRcdFx0cmV0dXJuIG5ldyBhcnJheS5jb25zdHJ1Y3RvciggYXJyYXkuc3ViYXJyYXkoIGZyb20sIHRvICE9PSB1bmRlZmluZWQgPyB0byA6IGFycmF5Lmxlbmd0aCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXkuc2xpY2UoIGZyb20sIHRvICk7XG5cblx0fSxcblxuXHQvLyBjb252ZXJ0cyBhbiBhcnJheSB0byBhIHNwZWNpZmljIHR5cGVcblx0Y29udmVydEFycmF5OiBmdW5jdGlvbiAoIGFycmF5LCB0eXBlLCBmb3JjZUNsb25lICkge1xuXG5cdFx0aWYgKCAhIGFycmF5IHx8IC8vIGxldCAndW5kZWZpbmVkJyBhbmQgJ251bGwnIHBhc3Ncblx0XHRcdCEgZm9yY2VDbG9uZSAmJiBhcnJheS5jb25zdHJ1Y3RvciA9PT0gdHlwZSApIHJldHVybiBhcnJheTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUuQllURVNfUEVSX0VMRU1FTlQgPT09ICdudW1iZXInICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IHR5cGUoIGFycmF5ICk7IC8vIGNyZWF0ZSB0eXBlZCBhcnJheVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcnJheSApOyAvLyBjcmVhdGUgQXJyYXlcblxuXHR9LFxuXG5cdGlzVHlwZWRBcnJheTogZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRyZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3KCBvYmplY3QgKSAmJlxuXHRcdFx0ISAoIG9iamVjdCBpbnN0YW5jZW9mIERhdGFWaWV3ICk7XG5cblx0fSxcblxuXHQvLyByZXR1cm5zIGFuIGFycmF5IGJ5IHdoaWNoIHRpbWVzIGFuZCB2YWx1ZXMgY2FuIGJlIHNvcnRlZFxuXHRnZXRLZXlmcmFtZU9yZGVyOiBmdW5jdGlvbiAoIHRpbWVzICkge1xuXG5cdFx0ZnVuY3Rpb24gY29tcGFyZVRpbWUoIGksIGogKSB7XG5cblx0XHRcdHJldHVybiB0aW1lc1sgaSBdIC0gdGltZXNbIGogXTtcblxuXHRcdH1cblxuXHRcdHZhciBuID0gdGltZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgQXJyYXkoIG4gKTtcblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG47ICsrIGkgKSByZXN1bHRbIGkgXSA9IGk7XG5cblx0XHRyZXN1bHQuc29ydCggY29tcGFyZVRpbWUgKTtcblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyB1c2VzIHRoZSBhcnJheSBwcmV2aW91c2x5IHJldHVybmVkIGJ5ICdnZXRLZXlmcmFtZU9yZGVyJyB0byBzb3J0IGRhdGFcblx0c29ydGVkQXJyYXk6IGZ1bmN0aW9uICggdmFsdWVzLCBzdHJpZGUsIG9yZGVyICkge1xuXG5cdFx0dmFyIG5WYWx1ZXMgPSB2YWx1ZXMubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBuZXcgdmFsdWVzLmNvbnN0cnVjdG9yKCBuVmFsdWVzICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGRzdE9mZnNldCA9IDA7IGRzdE9mZnNldCAhPT0gblZhbHVlczsgKysgaSApIHtcblxuXHRcdFx0dmFyIHNyY09mZnNldCA9IG9yZGVyWyBpIF0gKiBzdHJpZGU7XG5cblx0XHRcdGZvciAoIHZhciBqID0gMDsgaiAhPT0gc3RyaWRlOyArKyBqICkge1xuXG5cdFx0XHRcdHJlc3VsdFsgZHN0T2Zmc2V0ICsrIF0gPSB2YWx1ZXNbIHNyY09mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9LFxuXG5cdC8vIGZ1bmN0aW9uIGZvciBwYXJzaW5nIEFPUyBrZXlmcmFtZSBmb3JtYXRzXG5cdGZsYXR0ZW5KU09OOiBmdW5jdGlvbiAoIGpzb25LZXlzLCB0aW1lcywgdmFsdWVzLCB2YWx1ZVByb3BlcnR5TmFtZSApIHtcblxuXHRcdHZhciBpID0gMSwga2V5ID0ganNvbktleXNbIDAgXTtcblxuXHRcdHdoaWxlICgga2V5ICE9PSB1bmRlZmluZWQgJiYga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHR9XG5cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHR2YXIgdmFsdWUgPSBrZXlbIHZhbHVlUHJvcGVydHlOYW1lIF07XG5cdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgcmV0dXJuOyAvLyBubyBkYXRhXG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cblx0XHRcdGRvIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGtleVsgdmFsdWVQcm9wZXJ0eU5hbWUgXTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0aW1lcy5wdXNoKCBrZXkudGltZSApO1xuXHRcdFx0XHRcdHZhbHVlcy5wdXNoLmFwcGx5KCB2YWx1ZXMsIHZhbHVlICk7IC8vIHB1c2ggYWxsIGVsZW1lbnRzXG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIGlmICggdmFsdWUudG9BcnJheSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyAuLi5hc3N1bWUgVEhSRUUuTWF0aC1pc2hcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWUudG9BcnJheSggdmFsdWVzLCB2YWx1ZXMubGVuZ3RoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gb3RoZXJ3aXNlIHB1c2ggYXMtaXNcblxuXHRcdFx0ZG8ge1xuXG5cdFx0XHRcdHZhbHVlID0ga2V5WyB2YWx1ZVByb3BlcnR5TmFtZSBdO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRpbWVzLnB1c2goIGtleS50aW1lICk7XG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGtleSA9IGpzb25LZXlzWyBpICsrIF07XG5cblx0XHRcdH0gd2hpbGUgKCBrZXkgIT09IHVuZGVmaW5lZCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0c3ViY2xpcDogZnVuY3Rpb24gKCBzb3VyY2VDbGlwLCBuYW1lLCBzdGFydEZyYW1lLCBlbmRGcmFtZSwgZnBzICkge1xuXG5cdFx0ZnBzID0gZnBzIHx8IDMwO1xuXG5cdFx0dmFyIGNsaXAgPSBzb3VyY2VDbGlwLmNsb25lKCk7XG5cblx0XHRjbGlwLm5hbWUgPSBuYW1lO1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2xpcC50cmFja3MubGVuZ3RoOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSBjbGlwLnRyYWNrc1sgaSBdO1xuXHRcdFx0dmFyIHZhbHVlU2l6ZSA9IHRyYWNrLmdldFZhbHVlU2l6ZSgpO1xuXG5cdFx0XHR2YXIgdGltZXMgPSBbXTtcblx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgdHJhY2sudGltZXMubGVuZ3RoOyArKyBqICkge1xuXG5cdFx0XHRcdHZhciBmcmFtZSA9IHRyYWNrLnRpbWVzWyBqIF0gKiBmcHM7XG5cblx0XHRcdFx0aWYgKCBmcmFtZSA8IHN0YXJ0RnJhbWUgfHwgZnJhbWUgPj0gZW5kRnJhbWUgKSBjb250aW51ZTtcblxuXHRcdFx0XHR0aW1lcy5wdXNoKCB0cmFjay50aW1lc1sgaiBdICk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGsgPSAwOyBrIDwgdmFsdWVTaXplOyArKyBrICkge1xuXG5cdFx0XHRcdFx0dmFsdWVzLnB1c2goIHRyYWNrLnZhbHVlc1sgaiAqIHZhbHVlU2l6ZSArIGsgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHRpbWVzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHR0cmFjay50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRyYWNrLnRpbWVzLmNvbnN0cnVjdG9yICk7XG5cdFx0XHR0cmFjay52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHZhbHVlcywgdHJhY2sudmFsdWVzLmNvbnN0cnVjdG9yICk7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCB0cmFjayApO1xuXG5cdFx0fVxuXG5cdFx0Y2xpcC50cmFja3MgPSB0cmFja3M7XG5cblx0XHQvLyBmaW5kIG1pbmltdW0gLnRpbWVzIHZhbHVlIGFjcm9zcyBhbGwgdHJhY2tzIGluIHRoZSB0cmltbWVkIGNsaXBcblxuXHRcdHZhciBtaW5TdGFydFRpbWUgPSBJbmZpbml0eTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0aWYgKCBtaW5TdGFydFRpbWUgPiBjbGlwLnRyYWNrc1sgaSBdLnRpbWVzWyAwIF0gKSB7XG5cblx0XHRcdFx0bWluU3RhcnRUaW1lID0gY2xpcC50cmFja3NbIGkgXS50aW1lc1sgMCBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvLyBzaGlmdCBhbGwgdHJhY2tzIHN1Y2ggdGhhdCBjbGlwIGJlZ2lucyBhdCB0PTBcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNsaXAudHJhY2tzLmxlbmd0aDsgKysgaSApIHtcblxuXHRcdFx0Y2xpcC50cmFja3NbIGkgXS5zaGlmdCggLSAxICogbWluU3RhcnRUaW1lICk7XG5cblx0XHR9XG5cblx0XHRjbGlwLnJlc2V0RHVyYXRpb24oKTtcblxuXHRcdHJldHVybiBjbGlwO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBBYnN0cmFjdCBiYXNlIGNsYXNzIG9mIGludGVycG9sYW50cyBvdmVyIHBhcmFtZXRyaWMgc2FtcGxlcy5cbiAqXG4gKiBUaGUgcGFyYW1ldGVyIGRvbWFpbiBpcyBvbmUgZGltZW5zaW9uYWwsIHR5cGljYWxseSB0aGUgdGltZSBvciBhIHBhdGhcbiAqIGFsb25nIGEgY3VydmUgZGVmaW5lZCBieSB0aGUgZGF0YS5cbiAqXG4gKiBUaGUgc2FtcGxlIHZhbHVlcyBjYW4gaGF2ZSBhbnkgZGltZW5zaW9uYWxpdHkgYW5kIGRlcml2ZWQgY2xhc3NlcyBtYXlcbiAqIGFwcGx5IHNwZWNpYWwgaW50ZXJwcmV0YXRpb25zIHRvIHRoZSBkYXRhLlxuICpcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgdGhlIGludGVydmFsIHNlZWsgaW4gYSBUZW1wbGF0ZSBNZXRob2QsIGRlZmVycmluZ1xuICogdGhlIGFjdHVhbCBpbnRlcnBvbGF0aW9uIHRvIGRlcml2ZWQgY2xhc3Nlcy5cbiAqXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgTygxKSBmb3IgbGluZWFyIGFjY2VzcyBjcm9zc2luZyBhdCBtb3N0IHR3byBwb2ludHNcbiAqIGFuZCBPKGxvZyBOKSBmb3IgcmFuZG9tIGFjY2Vzcywgd2hlcmUgTiBpcyB0aGUgbnVtYmVyIG9mIHBvc2l0aW9ucy5cbiAqXG4gKiBSZWZlcmVuY2VzOlxuICpcbiAqIFx0XHRodHRwOi8vd3d3Lm9vZGVzaWduLmNvbS90ZW1wbGF0ZS1tZXRob2QtcGF0dGVybi5odG1sXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdHRoaXMucGFyYW1ldGVyUG9zaXRpb25zID0gcGFyYW1ldGVyUG9zaXRpb25zO1xuXHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cblx0dGhpcy5yZXN1bHRCdWZmZXIgPSByZXN1bHRCdWZmZXIgIT09IHVuZGVmaW5lZCA/XG5cdFx0cmVzdWx0QnVmZmVyIDogbmV3IHNhbXBsZVZhbHVlcy5jb25zdHJ1Y3Rvciggc2FtcGxlU2l6ZSApO1xuXHR0aGlzLnNhbXBsZVZhbHVlcyA9IHNhbXBsZVZhbHVlcztcblx0dGhpcy52YWx1ZVNpemUgPSBzYW1wbGVTaXplO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdGV2YWx1YXRlOiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgcHAgPSB0aGlzLnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdGkxID0gdGhpcy5fY2FjaGVkSW5kZXgsXG5cblx0XHRcdHQxID0gcHBbIGkxIF0sXG5cdFx0XHR0MCA9IHBwWyBpMSAtIDEgXTtcblxuXHRcdHZhbGlkYXRlX2ludGVydmFsOiB7XG5cblx0XHRcdHNlZWs6IHtcblxuXHRcdFx0XHR2YXIgcmlnaHQ7XG5cblx0XHRcdFx0bGluZWFyX3NjYW46IHtcblxuXHRcdFx0XHRcdC8vLSBTZWUgaHR0cDovL2pzcGVyZi5jb20vY29tcGFyaXNvbi10by11bmRlZmluZWQvM1xuXHRcdFx0XHRcdC8vLSBzbG93ZXIgY29kZTpcblx0XHRcdFx0XHQvLy1cblx0XHRcdFx0XHQvLy0gXHRcdFx0XHRpZiAoIHQgPj0gdDEgfHwgdDEgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRmb3J3YXJkX3NjYW46IGlmICggISAoIHQgPCB0MSApICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSArIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDAgKSBicmVhayBmb3J3YXJkX3NjYW47XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBhZnRlciBlbmRcblxuXHRcdFx0XHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQsIHQwICk7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmICggaTEgPT09IGdpdmVVcEF0ICkgYnJlYWs7IC8vIHRoaXMgbG9vcFxuXG5cdFx0XHRcdFx0XHRcdHQwID0gdDE7XG5cdFx0XHRcdFx0XHRcdHQxID0gcHBbICsrIGkxIF07XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0IDwgdDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5kZXhcblx0XHRcdFx0XHRcdHJpZ2h0ID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdFx0YnJlYWsgbGluZWFyX3NjYW47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLy0gc2xvd2VyIGNvZGU6XG5cdFx0XHRcdFx0Ly8tXHRcdFx0XHRcdGlmICggdCA8IHQwIHx8IHQwID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aWYgKCAhICggdCA+PSB0MCApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBsb29waW5nP1xuXG5cdFx0XHRcdFx0XHR2YXIgdDFnbG9iYWwgPSBwcFsgMSBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHQgPCB0MWdsb2JhbCApIHtcblxuXHRcdFx0XHRcdFx0XHRpMSA9IDI7IC8vICsgMSwgdXNpbmcgdGhlIHNjYW4gZm9yIHRoZSBkZXRhaWxzXG5cdFx0XHRcdFx0XHRcdHQwID0gdDFnbG9iYWw7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gbGluZWFyIHJldmVyc2Ugc2NhblxuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgZ2l2ZVVwQXQgPSBpMSAtIDI7IDsgKSB7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0MCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYmVmb3JlIHN0YXJ0XG5cblx0XHRcdFx0XHRcdFx0XHR0aGlzLl9jYWNoZWRJbmRleCA9IDA7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYmVmb3JlU3RhcnRfKCAwLCB0LCB0MSApO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAoIGkxID09PSBnaXZlVXBBdCApIGJyZWFrOyAvLyB0aGlzIGxvb3BcblxuXHRcdFx0XHRcdFx0XHR0MSA9IHQwO1xuXHRcdFx0XHRcdFx0XHR0MCA9IHBwWyAtLSBpMSAtIDEgXTtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHQgPj0gdDAgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyB3ZSBoYXZlIGFycml2ZWQgYXQgdGhlIHNvdWdodCBpbnRlcnZhbFxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrIHNlZWs7XG5cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIHByZXBhcmUgYmluYXJ5IHNlYXJjaCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBpbmRleFxuXHRcdFx0XHRcdFx0cmlnaHQgPSBpMTtcblx0XHRcdFx0XHRcdGkxID0gMDtcblx0XHRcdFx0XHRcdGJyZWFrIGxpbmVhcl9zY2FuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gdGhlIGludGVydmFsIGlzIHZhbGlkXG5cblx0XHRcdFx0XHRicmVhayB2YWxpZGF0ZV9pbnRlcnZhbDtcblxuXHRcdFx0XHR9IC8vIGxpbmVhciBzY2FuXG5cblx0XHRcdFx0Ly8gYmluYXJ5IHNlYXJjaFxuXG5cdFx0XHRcdHdoaWxlICggaTEgPCByaWdodCApIHtcblxuXHRcdFx0XHRcdHZhciBtaWQgPSAoIGkxICsgcmlnaHQgKSA+Pj4gMTtcblxuXHRcdFx0XHRcdGlmICggdCA8IHBwWyBtaWQgXSApIHtcblxuXHRcdFx0XHRcdFx0cmlnaHQgPSBtaWQ7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRpMSA9IG1pZCArIDE7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHQxID0gcHBbIGkxIF07XG5cdFx0XHRcdHQwID0gcHBbIGkxIC0gMSBdO1xuXG5cdFx0XHRcdC8vIGNoZWNrIGJvdW5kYXJ5IGNhc2VzLCBhZ2FpblxuXG5cdFx0XHRcdGlmICggdDAgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gMDtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5iZWZvcmVTdGFydF8oIDAsIHQsIHQxICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggdDEgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGkxID0gcHAubGVuZ3RoO1xuXHRcdFx0XHRcdHRoaXMuX2NhY2hlZEluZGV4ID0gaTE7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYWZ0ZXJFbmRfKCBpMSAtIDEsIHQwLCB0ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9IC8vIHNlZWtcblxuXHRcdFx0dGhpcy5fY2FjaGVkSW5kZXggPSBpMTtcblxuXHRcdFx0dGhpcy5pbnRlcnZhbENoYW5nZWRfKCBpMSwgdDAsIHQxICk7XG5cblx0XHR9IC8vIHZhbGlkYXRlX2ludGVydmFsXG5cblx0XHRyZXR1cm4gdGhpcy5pbnRlcnBvbGF0ZV8oIGkxLCB0MCwgdCwgdDEgKTtcblxuXHR9LFxuXG5cdHNldHRpbmdzOiBudWxsLCAvLyBvcHRpb25hbCwgc3ViY2xhc3Mtc3BlY2lmaWMgc2V0dGluZ3Mgc3RydWN0dXJlXG5cdC8vIE5vdGU6IFRoZSBpbmRpcmVjdGlvbiBhbGxvd3MgY2VudHJhbCBjb250cm9sIG9mIG1hbnkgaW50ZXJwb2xhbnRzLlxuXG5cdC8vIC0tLSBQcm90ZWN0ZWQgaW50ZXJmYWNlXG5cblx0RGVmYXVsdFNldHRpbmdzXzoge30sXG5cblx0Z2V0U2V0dGluZ3NfOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXR0aW5ncyB8fCB0aGlzLkRlZmF1bHRTZXR0aW5nc187XG5cblx0fSxcblxuXHRjb3B5U2FtcGxlVmFsdWVfOiBmdW5jdGlvbiAoIGluZGV4ICkge1xuXG5cdFx0Ly8gY29waWVzIGEgc2FtcGxlIHZhbHVlIHRvIHRoZSByZXN1bHQgYnVmZmVyXG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXHRcdFx0b2Zmc2V0ID0gaW5kZXggKiBzdHJpZGU7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0cmVzdWx0WyBpIF0gPSB2YWx1ZXNbIG9mZnNldCArIGkgXTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fSxcblxuXHQvLyBUZW1wbGF0ZSBtZXRob2RzIGZvciBkZXJpdmVkIGNsYXNzZXM6XG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdCwgdDEgKi8gKSB7XG5cblx0XHR0aHJvdyBuZXcgRXJyb3IoICdjYWxsIHRvIGFic3RyYWN0IG1ldGhvZCcgKTtcblx0XHQvLyBpbXBsZW1lbnRhdGlvbnMgc2hhbGwgcmV0dXJuIHRoaXMucmVzdWx0QnVmZmVyXG5cblx0fSxcblxuXHRpbnRlcnZhbENoYW5nZWRfOiBmdW5jdGlvbiAoIC8qIGkxLCB0MCwgdDEgKi8gKSB7XG5cblx0XHQvLyBlbXB0eVxuXG5cdH1cblxufSApO1xuXG4vLyBERUNMQVJFIEFMSUFTIEFGVEVSIGFzc2lnbiBwcm90b3R5cGVcbk9iamVjdC5hc3NpZ24oIEludGVycG9sYW50LnByb3RvdHlwZSwge1xuXG5cdC8vKCAwLCB0LCB0MCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGJlZm9yZVN0YXJ0XzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cblx0Ly8oIE4tMSwgdE4tMSwgdCApLCByZXR1cm5zIHRoaXMucmVzdWx0QnVmZmVyXG5cdGFmdGVyRW5kXzogSW50ZXJwb2xhbnQucHJvdG90eXBlLmNvcHlTYW1wbGVWYWx1ZV8sXG5cbn0gKTtcblxuLyoqXG4gKiBGYXN0IGFuZCBzaW1wbGUgY3ViaWMgc3BsaW5lIGludGVycG9sYW50LlxuICpcbiAqIEl0IHdhcyBkZXJpdmVkIGZyb20gYSBIZXJtaXRpYW4gY29uc3RydWN0aW9uIHNldHRpbmcgdGhlIGZpcnN0IGRlcml2YXRpdmVcbiAqIGF0IGVhY2ggc2FtcGxlIHBvc2l0aW9uIHRvIHRoZSBsaW5lYXIgc2xvcGUgYmV0d2VlbiBuZWlnaGJvcmluZyBwb3NpdGlvbnNcbiAqIG92ZXIgdGhlaXIgcGFyYW1ldGVyIGludGVydmFsLlxuICpcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBDdWJpY0ludGVycG9sYW50KCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICkge1xuXG5cdEludGVycG9sYW50LmNhbGwoIHRoaXMsIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKTtcblxuXHR0aGlzLl93ZWlnaHRQcmV2ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXRQcmV2ID0gLSAwO1xuXHR0aGlzLl93ZWlnaHROZXh0ID0gLSAwO1xuXHR0aGlzLl9vZmZzZXROZXh0ID0gLSAwO1xuXG59XG5cbkN1YmljSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQ3ViaWNJbnRlcnBvbGFudCxcblxuXHREZWZhdWx0U2V0dGluZ3NfOiB7XG5cblx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHR9LFxuXG5cdGludGVydmFsQ2hhbmdlZF86IGZ1bmN0aW9uICggaTEsIHQwLCB0MSApIHtcblxuXHRcdHZhciBwcCA9IHRoaXMucGFyYW1ldGVyUG9zaXRpb25zLFxuXHRcdFx0aVByZXYgPSBpMSAtIDIsXG5cdFx0XHRpTmV4dCA9IGkxICsgMSxcblxuXHRcdFx0dFByZXYgPSBwcFsgaVByZXYgXSxcblx0XHRcdHROZXh0ID0gcHBbIGlOZXh0IF07XG5cblx0XHRpZiAoIHRQcmV2ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHN3aXRjaCAoIHRoaXMuZ2V0U2V0dGluZ3NfKCkuZW5kaW5nU3RhcnQgKSB7XG5cblx0XHRcdFx0Y2FzZSBaZXJvU2xvcGVFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyBmJyh0MCkgPSAwXG5cdFx0XHRcdFx0aVByZXYgPSBpMTtcblx0XHRcdFx0XHR0UHJldiA9IDIgKiB0MCAtIHQxO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBXcmFwQXJvdW5kRW5kaW5nOlxuXG5cdFx0XHRcdFx0Ly8gdXNlIHRoZSBvdGhlciBlbmQgb2YgdGhlIGN1cnZlXG5cdFx0XHRcdFx0aVByZXYgPSBwcC5sZW5ndGggLSAyO1xuXHRcdFx0XHRcdHRQcmV2ID0gdDAgKyBwcFsgaVByZXYgXSAtIHBwWyBpUHJldiArIDEgXTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGRlZmF1bHQ6IC8vIFplcm9DdXJ2YXR1cmVFbmRpbmdcblxuXHRcdFx0XHRcdC8vIGYnJyh0MCkgPSAwIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlQcmV2ID0gaTE7XG5cdFx0XHRcdFx0dFByZXYgPSB0MTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCB0TmV4dCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzd2l0Y2ggKCB0aGlzLmdldFNldHRpbmdzXygpLmVuZGluZ0VuZCApIHtcblxuXHRcdFx0XHRjYXNlIFplcm9TbG9wZUVuZGluZzpcblxuXHRcdFx0XHRcdC8vIGYnKHROKSA9IDBcblx0XHRcdFx0XHRpTmV4dCA9IGkxO1xuXHRcdFx0XHRcdHROZXh0ID0gMiAqIHQxIC0gdDA7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIFdyYXBBcm91bmRFbmRpbmc6XG5cblx0XHRcdFx0XHQvLyB1c2UgdGhlIG90aGVyIGVuZCBvZiB0aGUgY3VydmVcblx0XHRcdFx0XHRpTmV4dCA9IDE7XG5cdFx0XHRcdFx0dE5leHQgPSB0MSArIHBwWyAxIF0gLSBwcFsgMCBdO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDogLy8gWmVyb0N1cnZhdHVyZUVuZGluZ1xuXG5cdFx0XHRcdFx0Ly8gZicnKHROKSA9IDAsIGEuay5hLiBOYXR1cmFsIFNwbGluZVxuXHRcdFx0XHRcdGlOZXh0ID0gaTEgLSAxO1xuXHRcdFx0XHRcdHROZXh0ID0gdDA7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBoYWxmRHQgPSAoIHQxIC0gdDAgKSAqIDAuNSxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplO1xuXG5cdFx0dGhpcy5fd2VpZ2h0UHJldiA9IGhhbGZEdCAvICggdDAgLSB0UHJldiApO1xuXHRcdHRoaXMuX3dlaWdodE5leHQgPSBoYWxmRHQgLyAoIHROZXh0IC0gdDEgKTtcblx0XHR0aGlzLl9vZmZzZXRQcmV2ID0gaVByZXYgKiBzdHJpZGU7XG5cdFx0dGhpcy5fb2Zmc2V0TmV4dCA9IGlOZXh0ICogc3RyaWRlO1xuXG5cdH0sXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvMSA9IGkxICogc3RyaWRlLFx0XHRvMCA9IG8xIC0gc3RyaWRlLFxuXHRcdFx0b1AgPSB0aGlzLl9vZmZzZXRQcmV2LCBcdG9OID0gdGhpcy5fb2Zmc2V0TmV4dCxcblx0XHRcdHdQID0gdGhpcy5fd2VpZ2h0UHJldixcdHdOID0gdGhpcy5fd2VpZ2h0TmV4dCxcblxuXHRcdFx0cCA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHBwID0gcCAqIHAsXG5cdFx0XHRwcHAgPSBwcCAqIHA7XG5cblx0XHQvLyBldmFsdWF0ZSBwb2x5bm9taWFsc1xuXG5cdFx0dmFyIHNQID0gLSB3UCAqIHBwcCArIDIgKiB3UCAqIHBwIC0gd1AgKiBwO1xuXHRcdHZhciBzMCA9ICggMSArIHdQICkgKiBwcHAgKyAoIC0gMS41IC0gMiAqIHdQICkgKiBwcCArICggLSAwLjUgKyB3UCApICogcCArIDE7XG5cdFx0dmFyIHMxID0gKCAtIDEgLSB3TiApICogcHBwICsgKCAxLjUgKyB3TiApICogcHAgKyAwLjUgKiBwO1xuXHRcdHZhciBzTiA9IHdOICogcHBwIC0gd04gKiBwcDtcblxuXHRcdC8vIGNvbWJpbmUgZGF0YSBsaW5lYXJseVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHJlc3VsdFsgaSBdID1cblx0XHRcdFx0XHRzUCAqIHZhbHVlc1sgb1AgKyBpIF0gK1xuXHRcdFx0XHRcdHMwICogdmFsdWVzWyBvMCArIGkgXSArXG5cdFx0XHRcdFx0czEgKiB2YWx1ZXNbIG8xICsgaSBdICtcblx0XHRcdFx0XHRzTiAqIHZhbHVlc1sgb04gKyBpIF07XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBMaW5lYXJJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuTGluZWFySW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGluZWFySW50ZXJwb2xhbnQsXG5cblx0aW50ZXJwb2xhdGVfOiBmdW5jdGlvbiAoIGkxLCB0MCwgdCwgdDEgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gdGhpcy5yZXN1bHRCdWZmZXIsXG5cdFx0XHR2YWx1ZXMgPSB0aGlzLnNhbXBsZVZhbHVlcyxcblx0XHRcdHN0cmlkZSA9IHRoaXMudmFsdWVTaXplLFxuXG5cdFx0XHRvZmZzZXQxID0gaTEgKiBzdHJpZGUsXG5cdFx0XHRvZmZzZXQwID0gb2Zmc2V0MSAtIHN0cmlkZSxcblxuXHRcdFx0d2VpZ2h0MSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKSxcblx0XHRcdHdlaWdodDAgPSAxIC0gd2VpZ2h0MTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gc3RyaWRlOyArKyBpICkge1xuXG5cdFx0XHRyZXN1bHRbIGkgXSA9XG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQwICsgaSBdICogd2VpZ2h0MCArXG5cdFx0XHRcdFx0dmFsdWVzWyBvZmZzZXQxICsgaSBdICogd2VpZ2h0MTtcblxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEludGVycG9sYW50IHRoYXQgZXZhbHVhdGVzIHRvIHRoZSBzYW1wbGUgdmFsdWUgYXQgdGhlIHBvc2l0aW9uIHByZWNlZWRpbmdcbiAqIHRoZSBwYXJhbWV0ZXIuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIERpc2NyZXRlSW50ZXJwb2xhbnQoIHBhcmFtZXRlclBvc2l0aW9ucywgc2FtcGxlVmFsdWVzLCBzYW1wbGVTaXplLCByZXN1bHRCdWZmZXIgKSB7XG5cblx0SW50ZXJwb2xhbnQuY2FsbCggdGhpcywgcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApO1xuXG59XG5cbkRpc2NyZXRlSW50ZXJwb2xhbnQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggSW50ZXJwb2xhbnQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGlzY3JldGVJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEgLyosIHQwLCB0LCB0MSAqLyApIHtcblxuXHRcdHJldHVybiB0aGlzLmNvcHlTYW1wbGVWYWx1ZV8oIGkxIC0gMSApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIHRpbWVkIHNlcXVlbmNlIG9mIGtleWZyYW1lcyBmb3IgYSBzcGVjaWZpYyBwcm9wZXJ0eS5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEtleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0aWYgKCBuYW1lID09PSB1bmRlZmluZWQgKSB0aHJvdyBuZXcgRXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiB0cmFjayBuYW1lIGlzIHVuZGVmaW5lZCcgKTtcblx0aWYgKCB0aW1lcyA9PT0gdW5kZWZpbmVkIHx8IHRpbWVzLmxlbmd0aCA9PT0gMCApIHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IG5vIGtleWZyYW1lcyBpbiB0cmFjayBuYW1lZCAnICsgbmFtZSApO1xuXG5cdHRoaXMubmFtZSA9IG5hbWU7XG5cblx0dGhpcy50aW1lcyA9IEFuaW1hdGlvblV0aWxzLmNvbnZlcnRBcnJheSggdGltZXMsIHRoaXMuVGltZUJ1ZmZlclR5cGUgKTtcblx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHZhbHVlcywgdGhpcy5WYWx1ZUJ1ZmZlclR5cGUgKTtcblxuXHR0aGlzLnNldEludGVycG9sYXRpb24oIGludGVycG9sYXRpb24gfHwgdGhpcy5EZWZhdWx0SW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbi8vIFN0YXRpYyBtZXRob2RzXG5cbk9iamVjdC5hc3NpZ24oIEtleWZyYW1lVHJhY2ssIHtcblxuXHQvLyBTZXJpYWxpemF0aW9uIChpbiBzdGF0aWMgY29udGV4dCwgYmVjYXVzZSBvZiBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uXG5cdC8vIGFuZCBhdXRvbWF0aWMgaW52b2NhdGlvbiBvZiAudG9KU09OKTpcblxuXHR0b0pTT046IGZ1bmN0aW9uICggdHJhY2sgKSB7XG5cblx0XHR2YXIgdHJhY2tUeXBlID0gdHJhY2suY29uc3RydWN0b3I7XG5cblx0XHR2YXIganNvbjtcblxuXHRcdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHRvSlNPTiBtZXRob2Rcblx0XHRpZiAoIHRyYWNrVHlwZS50b0pTT04gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0anNvbiA9IHRyYWNrVHlwZS50b0pTT04oIHRyYWNrICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBieSBkZWZhdWx0LCB3ZSBhc3N1bWUgdGhlIGRhdGEgY2FuIGJlIHNlcmlhbGl6ZWQgYXMtaXNcblx0XHRcdGpzb24gPSB7XG5cblx0XHRcdFx0J25hbWUnOiB0cmFjay5uYW1lLFxuXHRcdFx0XHQndGltZXMnOiBBbmltYXRpb25VdGlscy5jb252ZXJ0QXJyYXkoIHRyYWNrLnRpbWVzLCBBcnJheSApLFxuXHRcdFx0XHQndmFsdWVzJzogQW5pbWF0aW9uVXRpbHMuY29udmVydEFycmF5KCB0cmFjay52YWx1ZXMsIEFycmF5IClcblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIGludGVycG9sYXRpb24gPSB0cmFjay5nZXRJbnRlcnBvbGF0aW9uKCk7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhdGlvbiAhPT0gdHJhY2suRGVmYXVsdEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0anNvbi5pbnRlcnBvbGF0aW9uID0gaW50ZXJwb2xhdGlvbjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0anNvbi50eXBlID0gdHJhY2suVmFsdWVUeXBlTmFtZTsgLy8gbWFuZGF0b3J5XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUsIHtcblxuXHRjb25zdHJ1Y3RvcjogS2V5ZnJhbWVUcmFjayxcblxuXHRUaW1lQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdFZhbHVlQnVmZmVyVHlwZTogRmxvYXQzMkFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhcixcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IERpc2NyZXRlSW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogZnVuY3Rpb24gKCByZXN1bHQgKSB7XG5cblx0XHRyZXR1cm4gbmV3IExpbmVhckludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IGZ1bmN0aW9uICggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBDdWJpY0ludGVycG9sYW50KCB0aGlzLnRpbWVzLCB0aGlzLnZhbHVlcywgdGhpcy5nZXRWYWx1ZVNpemUoKSwgcmVzdWx0ICk7XG5cblx0fSxcblxuXHRzZXRJbnRlcnBvbGF0aW9uOiBmdW5jdGlvbiAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHR2YXIgZmFjdG9yeU1ldGhvZDtcblxuXHRcdHN3aXRjaCAoIGludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVEaXNjcmV0ZTpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2REaXNjcmV0ZTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSBJbnRlcnBvbGF0ZUxpbmVhcjpcblxuXHRcdFx0XHRmYWN0b3J5TWV0aG9kID0gdGhpcy5JbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgSW50ZXJwb2xhdGVTbW9vdGg6XG5cblx0XHRcdFx0ZmFjdG9yeU1ldGhvZCA9IHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBmYWN0b3J5TWV0aG9kID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBtZXNzYWdlID0gXCJ1bnN1cHBvcnRlZCBpbnRlcnBvbGF0aW9uIGZvciBcIiArXG5cdFx0XHRcdHRoaXMuVmFsdWVUeXBlTmFtZSArIFwiIGtleWZyYW1lIHRyYWNrIG5hbWVkIFwiICsgdGhpcy5uYW1lO1xuXG5cdFx0XHRpZiAoIHRoaXMuY3JlYXRlSW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBmYWxsIGJhY2sgdG8gZGVmYXVsdCwgdW5sZXNzIHRoZSBkZWZhdWx0IGl0c2VsZiBpcyBtZXNzZWQgdXBcblx0XHRcdFx0aWYgKCBpbnRlcnBvbGF0aW9uICE9PSB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zZXRJbnRlcnBvbGF0aW9uKCB0aGlzLkRlZmF1bHRJbnRlcnBvbGF0aW9uICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggbWVzc2FnZSApOyAvLyBmYXRhbCwgaW4gdGhpcyBjYXNlXG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLktleWZyYW1lVHJhY2s6JywgbWVzc2FnZSApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNyZWF0ZUludGVycG9sYW50ID0gZmFjdG9yeU1ldGhvZDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0SW50ZXJwb2xhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0c3dpdGNoICggdGhpcy5jcmVhdGVJbnRlcnBvbGFudCApIHtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZERpc2NyZXRlOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZURpc2NyZXRlO1xuXG5cdFx0XHRjYXNlIHRoaXMuSW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOlxuXG5cdFx0XHRcdHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcjtcblxuXHRcdFx0Y2FzZSB0aGlzLkludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDpcblxuXHRcdFx0XHRyZXR1cm4gSW50ZXJwb2xhdGVTbW9vdGg7XG5cblx0XHR9XG5cblx0fSxcblxuXHRnZXRWYWx1ZVNpemU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5sZW5ndGggLyB0aGlzLnRpbWVzLmxlbmd0aDtcblxuXHR9LFxuXG5cdC8vIG1vdmUgYWxsIGtleWZyYW1lcyBlaXRoZXIgZm9yd2FyZHMgb3IgYmFja3dhcmRzIGluIHRpbWVcblx0c2hpZnQ6IGZ1bmN0aW9uICggdGltZU9mZnNldCApIHtcblxuXHRcdGlmICggdGltZU9mZnNldCAhPT0gMC4wICkge1xuXG5cdFx0XHR2YXIgdGltZXMgPSB0aGlzLnRpbWVzO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0aW1lcy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dGltZXNbIGkgXSArPSB0aW1lT2Zmc2V0O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHNjYWxlIGFsbCBrZXlmcmFtZSB0aW1lcyBieSBhIGZhY3RvciAodXNlZnVsIGZvciBmcmFtZSA8LT4gc2Vjb25kcyBjb252ZXJzaW9ucylcblx0c2NhbGU6IGZ1bmN0aW9uICggdGltZVNjYWxlICkge1xuXG5cdFx0aWYgKCB0aW1lU2NhbGUgIT09IDEuMCApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcztcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gdGltZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdHRpbWVzWyBpIF0gKj0gdGltZVNjYWxlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIHJlbW92ZXMga2V5ZnJhbWVzIGJlZm9yZSBhbmQgYWZ0ZXIgYW5pbWF0aW9uIHdpdGhvdXQgY2hhbmdpbmcgYW55IHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtzdGFydFRpbWUsIGVuZFRpbWVdLlxuXHQvLyBJTVBPUlRBTlQ6IFdlIGRvIG5vdCBzaGlmdCBhcm91bmQga2V5cyB0byB0aGUgc3RhcnQgb2YgdGhlIHRyYWNrIHRpbWUsIGJlY2F1c2UgZm9yIGludGVycG9sYXRlZCBrZXlzIHRoaXMgd2lsbCBjaGFuZ2UgdGhlaXIgdmFsdWVzXG5cdHRyaW06IGZ1bmN0aW9uICggc3RhcnRUaW1lLCBlbmRUaW1lICkge1xuXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdG5LZXlzID0gdGltZXMubGVuZ3RoLFxuXHRcdFx0ZnJvbSA9IDAsXG5cdFx0XHR0byA9IG5LZXlzIC0gMTtcblxuXHRcdHdoaWxlICggZnJvbSAhPT0gbktleXMgJiYgdGltZXNbIGZyb20gXSA8IHN0YXJ0VGltZSApIHtcblxuXHRcdFx0KysgZnJvbTtcblxuXHRcdH1cblxuXHRcdHdoaWxlICggdG8gIT09IC0gMSAmJiB0aW1lc1sgdG8gXSA+IGVuZFRpbWUgKSB7XG5cblx0XHRcdC0tIHRvO1xuXG5cdFx0fVxuXG5cdFx0KysgdG87IC8vIGluY2x1c2l2ZSAtPiBleGNsdXNpdmUgYm91bmRcblxuXHRcdGlmICggZnJvbSAhPT0gMCB8fCB0byAhPT0gbktleXMgKSB7XG5cblx0XHRcdC8vIGVtcHR5IHRyYWNrcyBhcmUgZm9yYmlkZGVuLCBzbyBrZWVwIGF0IGxlYXN0IG9uZSBrZXlmcmFtZVxuXHRcdFx0aWYgKCBmcm9tID49IHRvICkge1xuXG5cdFx0XHRcdHRvID0gTWF0aC5tYXgoIHRvLCAxICk7XG5cdFx0XHRcdGZyb20gPSB0byAtIDE7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0XHR0aGlzLnRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGltZXMsIGZyb20sIHRvICk7XG5cdFx0XHR0aGlzLnZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLmFycmF5U2xpY2UoIHRoaXMudmFsdWVzLCBmcm9tICogc3RyaWRlLCB0byAqIHN0cmlkZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBlbnN1cmUgd2UgZG8gbm90IGdldCBhIEdhcmJhZ2VJbkdhcmJhZ2VPdXQgc2l0dWF0aW9uLCBtYWtlIHN1cmUgdHJhY2tzIGFyZSBhdCBsZWFzdCBtaW5pbWFsbHkgdmlhYmxlXG5cdHZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFsaWQgPSB0cnVlO1xuXG5cdFx0dmFyIHZhbHVlU2l6ZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCk7XG5cdFx0aWYgKCB2YWx1ZVNpemUgLSBNYXRoLmZsb29yKCB2YWx1ZVNpemUgKSAhPT0gMCApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IEludmFsaWQgdmFsdWUgc2l6ZSBpbiB0cmFjay4nLCB0aGlzICk7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRpbWVzID0gdGhpcy50aW1lcyxcblx0XHRcdHZhbHVlcyA9IHRoaXMudmFsdWVzLFxuXG5cdFx0XHRuS2V5cyA9IHRpbWVzLmxlbmd0aDtcblxuXHRcdGlmICggbktleXMgPT09IDAgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBUcmFjayBpcyBlbXB0eS4nLCB0aGlzICk7XG5cdFx0XHR2YWxpZCA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHByZXZUaW1lID0gbnVsbDtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbktleXM7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJyVGltZSA9IHRpbWVzWyBpIF07XG5cblx0XHRcdGlmICggdHlwZW9mIGN1cnJUaW1lID09PSAnbnVtYmVyJyAmJiBpc05hTiggY3VyclRpbWUgKSApIHtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVGltZSBpcyBub3QgYSB2YWxpZCBudW1iZXIuJywgdGhpcywgaSwgY3VyclRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBwcmV2VGltZSAhPT0gbnVsbCAmJiBwcmV2VGltZSA+IGN1cnJUaW1lICkge1xuXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5LZXlmcmFtZVRyYWNrOiBPdXQgb2Ygb3JkZXIga2V5cy4nLCB0aGlzLCBpLCBjdXJyVGltZSwgcHJldlRpbWUgKTtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcblxuXHRcdH1cblxuXHRcdGlmICggdmFsdWVzICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGlmICggQW5pbWF0aW9uVXRpbHMuaXNUeXBlZEFycmF5KCB2YWx1ZXMgKSApIHtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB2YWx1ZXMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gdmFsdWVzWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGlzTmFOKCB2YWx1ZSApICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuS2V5ZnJhbWVUcmFjazogVmFsdWUgaXMgbm90IGEgdmFsaWQgbnVtYmVyLicsIHRoaXMsIGksIHZhbHVlICk7XG5cdFx0XHRcdFx0XHR2YWxpZCA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fSxcblxuXHQvLyByZW1vdmVzIGVxdWl2YWxlbnQgc2VxdWVudGlhbCBrZXlzIGFzIGNvbW1vbiBpbiBtb3JwaCB0YXJnZXQgc2VxdWVuY2VzXG5cdC8vICgwLDAsMCwwLDEsMSwxLDAsMCwwLDAsMCwwLDApIC0tPiAoMCwwLDEsMSwwLDApXG5cdG9wdGltaXplOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aW1lcyBvciB2YWx1ZXMgbWF5IGJlIHNoYXJlZCB3aXRoIG90aGVyIHRyYWNrcywgc28gb3ZlcndyaXRpbmcgaXMgdW5zYWZlXG5cdFx0dmFyIHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy50aW1lcyApLFxuXHRcdFx0dmFsdWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy52YWx1ZXMgKSxcblx0XHRcdHN0cmlkZSA9IHRoaXMuZ2V0VmFsdWVTaXplKCksXG5cblx0XHRcdHNtb290aEludGVycG9sYXRpb24gPSB0aGlzLmdldEludGVycG9sYXRpb24oKSA9PT0gSW50ZXJwb2xhdGVTbW9vdGgsXG5cblx0XHRcdHdyaXRlSW5kZXggPSAxLFxuXHRcdFx0bGFzdEluZGV4ID0gdGltZXMubGVuZ3RoIC0gMTtcblxuXHRcdGZvciAoIHZhciBpID0gMTsgaSA8IGxhc3RJbmRleDsgKysgaSApIHtcblxuXHRcdFx0dmFyIGtlZXAgPSBmYWxzZTtcblxuXHRcdFx0dmFyIHRpbWUgPSB0aW1lc1sgaSBdO1xuXHRcdFx0dmFyIHRpbWVOZXh0ID0gdGltZXNbIGkgKyAxIF07XG5cblx0XHRcdC8vIHJlbW92ZSBhZGphY2VudCBrZXlmcmFtZXMgc2NoZWR1bGVkIGF0IHRoZSBzYW1lIHRpbWVcblxuXHRcdFx0aWYgKCB0aW1lICE9PSB0aW1lTmV4dCAmJiAoIGkgIT09IDEgfHwgdGltZSAhPT0gdGltZVsgMCBdICkgKSB7XG5cblx0XHRcdFx0aWYgKCAhIHNtb290aEludGVycG9sYXRpb24gKSB7XG5cblx0XHRcdFx0XHQvLyByZW1vdmUgdW5uZWNlc3Nhcnkga2V5ZnJhbWVzIHNhbWUgYXMgdGhlaXIgbmVpZ2hib3JzXG5cblx0XHRcdFx0XHR2YXIgb2Zmc2V0ID0gaSAqIHN0cmlkZSxcblx0XHRcdFx0XHRcdG9mZnNldFAgPSBvZmZzZXQgLSBzdHJpZGUsXG5cdFx0XHRcdFx0XHRvZmZzZXROID0gb2Zmc2V0ICsgc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IHZhbHVlc1sgb2Zmc2V0ICsgaiBdO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHZhbHVlICE9PSB2YWx1ZXNbIG9mZnNldFAgKyBqIF0gfHxcblx0XHRcdFx0XHRcdFx0dmFsdWUgIT09IHZhbHVlc1sgb2Zmc2V0TiArIGogXSApIHtcblxuXHRcdFx0XHRcdFx0XHRrZWVwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0a2VlcCA9IHRydWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdC8vIGluLXBsYWNlIGNvbXBhY3Rpb25cblxuXHRcdFx0aWYgKCBrZWVwICkge1xuXG5cdFx0XHRcdGlmICggaSAhPT0gd3JpdGVJbmRleCApIHtcblxuXHRcdFx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgaSBdO1xuXG5cdFx0XHRcdFx0dmFyIHJlYWRPZmZzZXQgPSBpICogc3RyaWRlLFxuXHRcdFx0XHRcdFx0d3JpdGVPZmZzZXQgPSB3cml0ZUluZGV4ICogc3RyaWRlO1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhbHVlc1sgd3JpdGVPZmZzZXQgKyBqIF0gPSB2YWx1ZXNbIHJlYWRPZmZzZXQgKyBqIF07XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdCsrIHdyaXRlSW5kZXg7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIGZsdXNoIGxhc3Qga2V5ZnJhbWUgKGNvbXBhY3Rpb24gbG9va3MgYWhlYWQpXG5cblx0XHRpZiAoIGxhc3RJbmRleCA+IDAgKSB7XG5cblx0XHRcdHRpbWVzWyB3cml0ZUluZGV4IF0gPSB0aW1lc1sgbGFzdEluZGV4IF07XG5cblx0XHRcdGZvciAoIHZhciByZWFkT2Zmc2V0ID0gbGFzdEluZGV4ICogc3RyaWRlLCB3cml0ZU9mZnNldCA9IHdyaXRlSW5kZXggKiBzdHJpZGUsIGogPSAwOyBqICE9PSBzdHJpZGU7ICsrIGogKSB7XG5cblx0XHRcdFx0dmFsdWVzWyB3cml0ZU9mZnNldCArIGogXSA9IHZhbHVlc1sgcmVhZE9mZnNldCArIGogXTtcblxuXHRcdFx0fVxuXG5cdFx0XHQrKyB3cml0ZUluZGV4O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB3cml0ZUluZGV4ICE9PSB0aW1lcy5sZW5ndGggKSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aW1lcywgMCwgd3JpdGVJbmRleCApO1xuXHRcdFx0dGhpcy52YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB2YWx1ZXMsIDAsIHdyaXRlSW5kZXggKiBzdHJpZGUgKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMudGltZXMgPSB0aW1lcztcblx0XHRcdHRoaXMudmFsdWVzID0gdmFsdWVzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRpbWVzID0gQW5pbWF0aW9uVXRpbHMuYXJyYXlTbGljZSggdGhpcy50aW1lcywgMCApO1xuXHRcdHZhciB2YWx1ZXMgPSBBbmltYXRpb25VdGlscy5hcnJheVNsaWNlKCB0aGlzLnZhbHVlcywgMCApO1xuXG5cdFx0dmFyIFR5cGVkS2V5ZnJhbWVUcmFjayA9IHRoaXMuY29uc3RydWN0b3I7XG5cdFx0dmFyIHRyYWNrID0gbmV3IFR5cGVkS2V5ZnJhbWVUcmFjayggdGhpcy5uYW1lLCB0aW1lcywgdmFsdWVzICk7XG5cblx0XHQvLyBJbnRlcnBvbGFudCBhcmd1bWVudCB0byBjb25zdHJ1Y3RvciBpcyBub3Qgc2F2ZWQsIHNvIGNvcHkgdGhlIGZhY3RvcnkgbWV0aG9kIGRpcmVjdGx5LlxuXHRcdHRyYWNrLmNyZWF0ZUludGVycG9sYW50ID0gdGhpcy5jcmVhdGVJbnRlcnBvbGFudDtcblxuXHRcdHJldHVybiB0cmFjaztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBCb29sZWFuIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEJvb2xlYW5LZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcyApO1xuXG59XG5cbkJvb2xlYW5LZXlmcmFtZVRyYWNrLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEtleWZyYW1lVHJhY2sucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQm9vbGVhbktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ2Jvb2wnLFxuXHRWYWx1ZUJ1ZmZlclR5cGU6IEFycmF5LFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZURpc2NyZXRlLFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZExpbmVhcjogdW5kZWZpbmVkLFxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RTbW9vdGg6IHVuZGVmaW5lZFxuXG5cdC8vIE5vdGU6IEFjdHVhbGx5IHRoaXMgdHJhY2sgY291bGQgaGF2ZSBhIG9wdGltaXplZCAvIGNvbXByZXNzZWRcblx0Ly8gcmVwcmVzZW50YXRpb24gb2YgYSBzaW5nbGUgdmFsdWUgYW5kIGEgY3VzdG9tIGludGVycG9sYW50IHRoYXRcblx0Ly8gY29tcHV0ZXMgXCJmaXJzdFZhbHVlIF4gaXNPZGQoIGluZGV4IClcIi5cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIGtleWZyYW1lIHZhbHVlcyB0aGF0IHJlcHJlc2VudCBjb2xvci5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIENvbG9yS2V5ZnJhbWVUcmFjayggbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApIHtcblxuXHRLZXlmcmFtZVRyYWNrLmNhbGwoIHRoaXMsIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKTtcblxufVxuXG5Db2xvcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBDb2xvcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ2NvbG9yJ1xuXG5cdC8vIFZhbHVlQnVmZmVyVHlwZSBpcyBpbmhlcml0ZWRcblxuXHQvLyBEZWZhdWx0SW50ZXJwb2xhdGlvbiBpcyBpbmhlcml0ZWRcblxuXHQvLyBOb3RlOiBWZXJ5IGJhc2ljIGltcGxlbWVudGF0aW9uIGFuZCBub3RoaW5nIHNwZWNpYWwgeWV0LlxuXHQvLyBIb3dldmVyLCB0aGlzIGlzIHRoZSBwbGFjZSBmb3IgY29sb3Igc3BhY2UgcGFyYW1ldGVyaXphdGlvbi5cblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIG51bWVyaWMga2V5ZnJhbWUgdmFsdWVzLlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG5mdW5jdGlvbiBOdW1iZXJLZXlmcmFtZVRyYWNrKCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICkge1xuXG5cdEtleWZyYW1lVHJhY2suY2FsbCggdGhpcywgbmFtZSwgdGltZXMsIHZhbHVlcywgaW50ZXJwb2xhdGlvbiApO1xuXG59XG5cbk51bWJlcktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBOdW1iZXJLZXlmcmFtZVRyYWNrLFxuXG5cdFZhbHVlVHlwZU5hbWU6ICdudW1iZXInXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdC8vIERlZmF1bHRJbnRlcnBvbGF0aW9uIGlzIGluaGVyaXRlZFxuXG59ICk7XG5cbi8qKlxuICogU3BoZXJpY2FsIGxpbmVhciB1bml0IHF1YXRlcm5pb24gaW50ZXJwb2xhbnQuXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCggcGFyYW1ldGVyUG9zaXRpb25zLCBzYW1wbGVWYWx1ZXMsIHNhbXBsZVNpemUsIHJlc3VsdEJ1ZmZlciApIHtcblxuXHRJbnRlcnBvbGFudC5jYWxsKCB0aGlzLCBwYXJhbWV0ZXJQb3NpdGlvbnMsIHNhbXBsZVZhbHVlcywgc2FtcGxlU2l6ZSwgcmVzdWx0QnVmZmVyICk7XG5cbn1cblxuUXVhdGVybmlvbkxpbmVhckludGVycG9sYW50LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVycG9sYW50LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFF1YXRlcm5pb25MaW5lYXJJbnRlcnBvbGFudCxcblxuXHRpbnRlcnBvbGF0ZV86IGZ1bmN0aW9uICggaTEsIHQwLCB0LCB0MSApIHtcblxuXHRcdHZhciByZXN1bHQgPSB0aGlzLnJlc3VsdEJ1ZmZlcixcblx0XHRcdHZhbHVlcyA9IHRoaXMuc2FtcGxlVmFsdWVzLFxuXHRcdFx0c3RyaWRlID0gdGhpcy52YWx1ZVNpemUsXG5cblx0XHRcdG9mZnNldCA9IGkxICogc3RyaWRlLFxuXG5cdFx0XHRhbHBoYSA9ICggdCAtIHQwICkgLyAoIHQxIC0gdDAgKTtcblxuXHRcdGZvciAoIHZhciBlbmQgPSBvZmZzZXQgKyBzdHJpZGU7IG9mZnNldCAhPT0gZW5kOyBvZmZzZXQgKz0gNCApIHtcblxuXHRcdFx0UXVhdGVybmlvbi5zbGVycEZsYXQoIHJlc3VsdCwgMCwgdmFsdWVzLCBvZmZzZXQgLSBzdHJpZGUsIHZhbHVlcywgb2Zmc2V0LCBhbHBoYSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQSBUcmFjayBvZiBxdWF0ZXJuaW9uIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKiBAYXV0aG9yIEJlbiBIb3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvL1xuICogQGF1dGhvciBEYXZpZCBTYXJubyAvIGh0dHA6Ly9saWdodGhhdXMudXMvXG4gKiBAYXV0aG9yIHRzY2h3XG4gKi9cblxuZnVuY3Rpb24gUXVhdGVybmlvbktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuUXVhdGVybmlvbktleWZyYW1lVHJhY2sucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBRdWF0ZXJuaW9uS2V5ZnJhbWVUcmFjayxcblxuXHRWYWx1ZVR5cGVOYW1lOiAncXVhdGVybmlvbicsXG5cblx0Ly8gVmFsdWVCdWZmZXJUeXBlIGlzIGluaGVyaXRlZFxuXG5cdERlZmF1bHRJbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0ZUxpbmVhcixcblxuXHRJbnRlcnBvbGFudEZhY3RvcnlNZXRob2RMaW5lYXI6IGZ1bmN0aW9uICggcmVzdWx0ICkge1xuXG5cdFx0cmV0dXJuIG5ldyBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQoIHRoaXMudGltZXMsIHRoaXMudmFsdWVzLCB0aGlzLmdldFZhbHVlU2l6ZSgpLCByZXN1bHQgKTtcblxuXHR9LFxuXG5cdEludGVycG9sYW50RmFjdG9yeU1ldGhvZFNtb290aDogdW5kZWZpbmVkIC8vIG5vdCB5ZXQgaW1wbGVtZW50ZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIHRoYXQgaW50ZXJwb2xhdGVzIFN0cmluZ3NcbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFN0cmluZ0tleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuU3RyaW5nS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFN0cmluZ0tleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3N0cmluZycsXG5cdFZhbHVlQnVmZmVyVHlwZTogQXJyYXksXG5cblx0RGVmYXVsdEludGVycG9sYXRpb246IEludGVycG9sYXRlRGlzY3JldGUsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kTGluZWFyOiB1bmRlZmluZWQsXG5cblx0SW50ZXJwb2xhbnRGYWN0b3J5TWV0aG9kU21vb3RoOiB1bmRlZmluZWRcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIFRyYWNrIG9mIHZlY3RvcmVkIGtleWZyYW1lIHZhbHVlcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFZlY3RvcktleWZyYW1lVHJhY2soIG5hbWUsIHRpbWVzLCB2YWx1ZXMsIGludGVycG9sYXRpb24gKSB7XG5cblx0S2V5ZnJhbWVUcmFjay5jYWxsKCB0aGlzLCBuYW1lLCB0aW1lcywgdmFsdWVzLCBpbnRlcnBvbGF0aW9uICk7XG5cbn1cblxuVmVjdG9yS2V5ZnJhbWVUcmFjay5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBLZXlmcmFtZVRyYWNrLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFZlY3RvcktleWZyYW1lVHJhY2ssXG5cblx0VmFsdWVUeXBlTmFtZTogJ3ZlY3RvcidcblxuXHQvLyBWYWx1ZUJ1ZmZlclR5cGUgaXMgaW5oZXJpdGVkXG5cblx0Ly8gRGVmYXVsdEludGVycG9sYXRpb24gaXMgaW5oZXJpdGVkXG5cbn0gKTtcblxuLyoqXG4gKlxuICogUmV1c2FibGUgc2V0IG9mIFRyYWNrcyB0aGF0IHJlcHJlc2VudCBhbiBhbmltYXRpb24uXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbkNsaXAoIG5hbWUsIGR1cmF0aW9uLCB0cmFja3MgKSB7XG5cblx0dGhpcy5uYW1lID0gbmFtZTtcblx0dGhpcy50cmFja3MgPSB0cmFja3M7XG5cdHRoaXMuZHVyYXRpb24gPSAoIGR1cmF0aW9uICE9PSB1bmRlZmluZWQgKSA/IGR1cmF0aW9uIDogLSAxO1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHQvLyB0aGlzIG1lYW5zIGl0IHNob3VsZCBmaWd1cmUgb3V0IGl0cyBkdXJhdGlvbiBieSBzY2FubmluZyB0aGUgdHJhY2tzXG5cdGlmICggdGhpcy5kdXJhdGlvbiA8IDAgKSB7XG5cblx0XHR0aGlzLnJlc2V0RHVyYXRpb24oKTtcblxuXHR9XG5cbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSggdHlwZU5hbWUgKSB7XG5cblx0c3dpdGNoICggdHlwZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblxuXHRcdGNhc2UgJ3NjYWxhcic6XG5cdFx0Y2FzZSAnZG91YmxlJzpcblx0XHRjYXNlICdmbG9hdCc6XG5cdFx0Y2FzZSAnbnVtYmVyJzpcblx0XHRjYXNlICdpbnRlZ2VyJzpcblxuXHRcdFx0cmV0dXJuIE51bWJlcktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICd2ZWN0b3InOlxuXHRcdGNhc2UgJ3ZlY3RvcjInOlxuXHRcdGNhc2UgJ3ZlY3RvcjMnOlxuXHRcdGNhc2UgJ3ZlY3RvcjQnOlxuXG5cdFx0XHRyZXR1cm4gVmVjdG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ2NvbG9yJzpcblxuXHRcdFx0cmV0dXJuIENvbG9yS2V5ZnJhbWVUcmFjaztcblxuXHRcdGNhc2UgJ3F1YXRlcm5pb24nOlxuXG5cdFx0XHRyZXR1cm4gUXVhdGVybmlvbktleWZyYW1lVHJhY2s7XG5cblx0XHRjYXNlICdib29sJzpcblx0XHRjYXNlICdib29sZWFuJzpcblxuXHRcdFx0cmV0dXJuIEJvb2xlYW5LZXlmcmFtZVRyYWNrO1xuXG5cdFx0Y2FzZSAnc3RyaW5nJzpcblxuXHRcdFx0cmV0dXJuIFN0cmluZ0tleWZyYW1lVHJhY2s7XG5cblx0fVxuXG5cdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IFVuc3VwcG9ydGVkIHR5cGVOYW1lOiAnICsgdHlwZU5hbWUgKTtcblxufVxuXG5mdW5jdGlvbiBwYXJzZUtleWZyYW1lVHJhY2soIGpzb24gKSB7XG5cblx0aWYgKCBqc29uLnR5cGUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRocm93IG5ldyBFcnJvciggJ1RIUkVFLktleWZyYW1lVHJhY2s6IHRyYWNrIHR5cGUgdW5kZWZpbmVkLCBjYW4gbm90IHBhcnNlJyApO1xuXG5cdH1cblxuXHR2YXIgdHJhY2tUeXBlID0gZ2V0VHJhY2tUeXBlRm9yVmFsdWVUeXBlTmFtZSgganNvbi50eXBlICk7XG5cblx0aWYgKCBqc29uLnRpbWVzID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHR2YXIgdGltZXMgPSBbXSwgdmFsdWVzID0gW107XG5cblx0XHRBbmltYXRpb25VdGlscy5mbGF0dGVuSlNPTigganNvbi5rZXlzLCB0aW1lcywgdmFsdWVzLCAndmFsdWUnICk7XG5cblx0XHRqc29uLnRpbWVzID0gdGltZXM7XG5cdFx0anNvbi52YWx1ZXMgPSB2YWx1ZXM7XG5cblx0fVxuXG5cdC8vIGRlcml2ZWQgY2xhc3NlcyBjYW4gZGVmaW5lIGEgc3RhdGljIHBhcnNlIG1ldGhvZFxuXHRpZiAoIHRyYWNrVHlwZS5wYXJzZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0cmV0dXJuIHRyYWNrVHlwZS5wYXJzZSgganNvbiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBieSBkZWZhdWx0LCB3ZSBhc3N1bWUgYSBjb25zdHJ1Y3RvciBjb21wYXRpYmxlIHdpdGggdGhlIGJhc2Vcblx0XHRyZXR1cm4gbmV3IHRyYWNrVHlwZSgganNvbi5uYW1lLCBqc29uLnRpbWVzLCBqc29uLnZhbHVlcywganNvbi5pbnRlcnBvbGF0aW9uICk7XG5cblx0fVxuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAsIHtcblxuXHRwYXJzZTogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdLFxuXHRcdFx0anNvblRyYWNrcyA9IGpzb24udHJhY2tzLFxuXHRcdFx0ZnJhbWVUaW1lID0gMS4wIC8gKCBqc29uLmZwcyB8fCAxLjAgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGpzb25UcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggcGFyc2VLZXlmcmFtZVRyYWNrKCBqc29uVHJhY2tzWyBpIF0gKS5zY2FsZSggZnJhbWVUaW1lICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCgganNvbi5uYW1lLCBqc29uLmR1cmF0aW9uLCB0cmFja3MgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBjbGlwICkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdLFxuXHRcdFx0Y2xpcFRyYWNrcyA9IGNsaXAudHJhY2tzO1xuXG5cdFx0dmFyIGpzb24gPSB7XG5cblx0XHRcdCduYW1lJzogY2xpcC5uYW1lLFxuXHRcdFx0J2R1cmF0aW9uJzogY2xpcC5kdXJhdGlvbixcblx0XHRcdCd0cmFja3MnOiB0cmFja3MsXG5cdFx0XHQndXVpZCc6IGNsaXAudXVpZFxuXG5cdFx0fTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGNsaXBUcmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR0cmFja3MucHVzaCggS2V5ZnJhbWVUcmFjay50b0pTT04oIGNsaXBUcmFja3NbIGkgXSApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4ganNvbjtcblxuXHR9LFxuXG5cdENyZWF0ZUZyb21Nb3JwaFRhcmdldFNlcXVlbmNlOiBmdW5jdGlvbiAoIG5hbWUsIG1vcnBoVGFyZ2V0U2VxdWVuY2UsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIG51bU1vcnBoVGFyZ2V0cyA9IG1vcnBoVGFyZ2V0U2VxdWVuY2UubGVuZ3RoO1xuXHRcdHZhciB0cmFja3MgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IG51bU1vcnBoVGFyZ2V0czsgaSArKyApIHtcblxuXHRcdFx0dmFyIHRpbWVzID0gW107XG5cdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdHRpbWVzLnB1c2goXG5cdFx0XHRcdCggaSArIG51bU1vcnBoVGFyZ2V0cyAtIDEgKSAlIG51bU1vcnBoVGFyZ2V0cyxcblx0XHRcdFx0aSxcblx0XHRcdFx0KCBpICsgMSApICUgbnVtTW9ycGhUYXJnZXRzICk7XG5cblx0XHRcdHZhbHVlcy5wdXNoKCAwLCAxLCAwICk7XG5cblx0XHRcdHZhciBvcmRlciA9IEFuaW1hdGlvblV0aWxzLmdldEtleWZyYW1lT3JkZXIoIHRpbWVzICk7XG5cdFx0XHR0aW1lcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB0aW1lcywgMSwgb3JkZXIgKTtcblx0XHRcdHZhbHVlcyA9IEFuaW1hdGlvblV0aWxzLnNvcnRlZEFycmF5KCB2YWx1ZXMsIDEsIG9yZGVyICk7XG5cblx0XHRcdC8vIGlmIHRoZXJlIGlzIGEga2V5IGF0IHRoZSBmaXJzdCBmcmFtZSwgZHVwbGljYXRlIGl0IGFzIHRoZVxuXHRcdFx0Ly8gbGFzdCBmcmFtZSBhcyB3ZWxsIGZvciBwZXJmZWN0IGxvb3AuXG5cdFx0XHRpZiAoICEgbm9Mb29wICYmIHRpbWVzWyAwIF0gPT09IDAgKSB7XG5cblx0XHRcdFx0dGltZXMucHVzaCggbnVtTW9ycGhUYXJnZXRzICk7XG5cdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZXNbIDAgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRyYWNrcy5wdXNoKFxuXHRcdFx0XHRuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayhcblx0XHRcdFx0XHQnLm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1snICsgbW9ycGhUYXJnZXRTZXF1ZW5jZVsgaSBdLm5hbWUgKyAnXScsXG5cdFx0XHRcdFx0dGltZXMsIHZhbHVlc1xuXHRcdFx0XHQpLnNjYWxlKCAxLjAgLyBmcHMgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBBbmltYXRpb25DbGlwKCBuYW1lLCAtIDEsIHRyYWNrcyApO1xuXG5cdH0sXG5cblx0ZmluZEJ5TmFtZTogZnVuY3Rpb24gKCBvYmplY3RPckNsaXBBcnJheSwgbmFtZSApIHtcblxuXHRcdHZhciBjbGlwQXJyYXkgPSBvYmplY3RPckNsaXBBcnJheTtcblxuXHRcdGlmICggISBBcnJheS5pc0FycmF5KCBvYmplY3RPckNsaXBBcnJheSApICkge1xuXG5cdFx0XHR2YXIgbyA9IG9iamVjdE9yQ2xpcEFycmF5O1xuXHRcdFx0Y2xpcEFycmF5ID0gby5nZW9tZXRyeSAmJiBvLmdlb21ldHJ5LmFuaW1hdGlvbnMgfHwgby5hbmltYXRpb25zO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2xpcEFycmF5Lmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0aWYgKCBjbGlwQXJyYXlbIGkgXS5uYW1lID09PSBuYW1lICkge1xuXG5cdFx0XHRcdHJldHVybiBjbGlwQXJyYXlbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fSxcblxuXHRDcmVhdGVDbGlwc0Zyb21Nb3JwaFRhcmdldFNlcXVlbmNlczogZnVuY3Rpb24gKCBtb3JwaFRhcmdldHMsIGZwcywgbm9Mb29wICkge1xuXG5cdFx0dmFyIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzID0ge307XG5cblx0XHQvLyB0ZXN0ZWQgd2l0aCBodHRwczovL3JlZ2V4MTAxLmNvbS8gb24gdHJpY2sgc2VxdWVuY2VzXG5cdFx0Ly8gc3VjaCBmbGFtaW5nb19mbHlBXzAwMywgZmxhbWluZ29fcnVuMV8wMDMsIGNyZGVhdGgwMDU5XG5cdFx0dmFyIHBhdHRlcm4gPSAvXihbXFx3LV0qPykoW1xcZF0rKSQvO1xuXG5cdFx0Ly8gc29ydCBtb3JwaCB0YXJnZXQgbmFtZXMgaW50byBhbmltYXRpb24gZ3JvdXBzIGJhc2VkXG5cdFx0Ly8gcGF0dGVybnMgbGlrZSBXYWxrXzAwMSwgV2Fsa18wMDIsIFJ1bl8wMDEsIFJ1bl8wMDJcblx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gbW9ycGhUYXJnZXRzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgbW9ycGhUYXJnZXQgPSBtb3JwaFRhcmdldHNbIGkgXTtcblx0XHRcdHZhciBwYXJ0cyA9IG1vcnBoVGFyZ2V0Lm5hbWUubWF0Y2goIHBhdHRlcm4gKTtcblxuXHRcdFx0aWYgKCBwYXJ0cyAmJiBwYXJ0cy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHRcdHZhciBuYW1lID0gcGFydHNbIDEgXTtcblxuXHRcdFx0XHR2YXIgYW5pbWF0aW9uTW9ycGhUYXJnZXRzID0gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHNbIG5hbWUgXTtcblx0XHRcdFx0aWYgKCAhIGFuaW1hdGlvbk1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHRcdGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0gPSBhbmltYXRpb25Nb3JwaFRhcmdldHMgPSBbXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0YW5pbWF0aW9uTW9ycGhUYXJnZXRzLnB1c2goIG1vcnBoVGFyZ2V0ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBjbGlwcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIG5hbWUgaW4gYW5pbWF0aW9uVG9Nb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdGNsaXBzLnB1c2goIEFuaW1hdGlvbkNsaXAuQ3JlYXRlRnJvbU1vcnBoVGFyZ2V0U2VxdWVuY2UoIG5hbWUsIGFuaW1hdGlvblRvTW9ycGhUYXJnZXRzWyBuYW1lIF0sIGZwcywgbm9Mb29wICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBjbGlwcztcblxuXHR9LFxuXG5cdC8vIHBhcnNlIHRoZSBhbmltYXRpb24uaGllcmFyY2h5IGZvcm1hdFxuXHRwYXJzZUFuaW1hdGlvbjogZnVuY3Rpb24gKCBhbmltYXRpb24sIGJvbmVzICkge1xuXG5cdFx0aWYgKCAhIGFuaW1hdGlvbiApIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbkNsaXA6IE5vIGFuaW1hdGlvbiBpbiBKU09OTG9hZGVyIGRhdGEuJyApO1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgYWRkTm9uZW1wdHlUcmFjayA9IGZ1bmN0aW9uICggdHJhY2tUeXBlLCB0cmFja05hbWUsIGFuaW1hdGlvbktleXMsIHByb3BlcnR5TmFtZSwgZGVzdFRyYWNrcyApIHtcblxuXHRcdFx0Ly8gb25seSByZXR1cm4gdHJhY2sgaWYgdGhlcmUgYXJlIGFjdHVhbGx5IGtleXMuXG5cdFx0XHRpZiAoIGFuaW1hdGlvbktleXMubGVuZ3RoICE9PSAwICkge1xuXG5cdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHR2YXIgdmFsdWVzID0gW107XG5cblx0XHRcdFx0QW5pbWF0aW9uVXRpbHMuZmxhdHRlbkpTT04oIGFuaW1hdGlvbktleXMsIHRpbWVzLCB2YWx1ZXMsIHByb3BlcnR5TmFtZSApO1xuXG5cdFx0XHRcdC8vIGVtcHR5IGtleXMgYXJlIGZpbHRlcmVkIG91dCwgc28gY2hlY2sgYWdhaW5cblx0XHRcdFx0aWYgKCB0aW1lcy5sZW5ndGggIT09IDAgKSB7XG5cblx0XHRcdFx0XHRkZXN0VHJhY2tzLnB1c2goIG5ldyB0cmFja1R5cGUoIHRyYWNrTmFtZSwgdGltZXMsIHZhbHVlcyApICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9O1xuXG5cdFx0dmFyIHRyYWNrcyA9IFtdO1xuXG5cdFx0dmFyIGNsaXBOYW1lID0gYW5pbWF0aW9uLm5hbWUgfHwgJ2RlZmF1bHQnO1xuXHRcdC8vIGF1dG9tYXRpYyBsZW5ndGggZGV0ZXJtaW5hdGlvbiBpbiBBbmltYXRpb25DbGlwLlxuXHRcdHZhciBkdXJhdGlvbiA9IGFuaW1hdGlvbi5sZW5ndGggfHwgLSAxO1xuXHRcdHZhciBmcHMgPSBhbmltYXRpb24uZnBzIHx8IDMwO1xuXG5cdFx0dmFyIGhpZXJhcmNoeVRyYWNrcyA9IGFuaW1hdGlvbi5oaWVyYXJjaHkgfHwgW107XG5cblx0XHRmb3IgKCB2YXIgaCA9IDA7IGggPCBoaWVyYXJjaHlUcmFja3MubGVuZ3RoOyBoICsrICkge1xuXG5cdFx0XHR2YXIgYW5pbWF0aW9uS2V5cyA9IGhpZXJhcmNoeVRyYWNrc1sgaCBdLmtleXM7XG5cblx0XHRcdC8vIHNraXAgZW1wdHkgdHJhY2tzXG5cdFx0XHRpZiAoICEgYW5pbWF0aW9uS2V5cyB8fCBhbmltYXRpb25LZXlzLmxlbmd0aCA9PT0gMCApIGNvbnRpbnVlO1xuXG5cdFx0XHQvLyBwcm9jZXNzIG1vcnBoIHRhcmdldHNcblx0XHRcdGlmICggYW5pbWF0aW9uS2V5c1sgMCBdLm1vcnBoVGFyZ2V0cyApIHtcblxuXHRcdFx0XHQvLyBmaWd1cmUgb3V0IGFsbCBtb3JwaCB0YXJnZXRzIHVzZWQgaW4gdGhpcyB0cmFja1xuXHRcdFx0XHR2YXIgbW9ycGhUYXJnZXROYW1lcyA9IHt9O1xuXG5cdFx0XHRcdGZvciAoIHZhciBrID0gMDsgayA8IGFuaW1hdGlvbktleXMubGVuZ3RoOyBrICsrICkge1xuXG5cdFx0XHRcdFx0aWYgKCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzICkge1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgbSA9IDA7IG0gPCBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzLmxlbmd0aDsgbSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHRtb3JwaFRhcmdldE5hbWVzWyBhbmltYXRpb25LZXlzWyBrIF0ubW9ycGhUYXJnZXRzWyBtIF0gXSA9IC0gMTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBjcmVhdGUgYSB0cmFjayBmb3IgZWFjaCBtb3JwaCB0YXJnZXQgd2l0aCBhbGwgemVyb1xuXHRcdFx0XHQvLyBtb3JwaFRhcmdldEluZmx1ZW5jZXMgZXhjZXB0IGZvciB0aGUga2V5cyBpbiB3aGljaFxuXHRcdFx0XHQvLyB0aGUgbW9ycGhUYXJnZXQgaXMgbmFtZWQuXG5cdFx0XHRcdGZvciAoIHZhciBtb3JwaFRhcmdldE5hbWUgaW4gbW9ycGhUYXJnZXROYW1lcyApIHtcblxuXHRcdFx0XHRcdHZhciB0aW1lcyA9IFtdO1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBtID0gMDsgbSAhPT0gYW5pbWF0aW9uS2V5c1sgayBdLm1vcnBoVGFyZ2V0cy5sZW5ndGg7ICsrIG0gKSB7XG5cblx0XHRcdFx0XHRcdHZhciBhbmltYXRpb25LZXkgPSBhbmltYXRpb25LZXlzWyBrIF07XG5cblx0XHRcdFx0XHRcdHRpbWVzLnB1c2goIGFuaW1hdGlvbktleS50aW1lICk7XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggKCBhbmltYXRpb25LZXkubW9ycGhUYXJnZXQgPT09IG1vcnBoVGFyZ2V0TmFtZSApID8gMSA6IDAgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRyYWNrcy5wdXNoKCBuZXcgTnVtYmVyS2V5ZnJhbWVUcmFjayggJy5tb3JwaFRhcmdldEluZmx1ZW5jZVsnICsgbW9ycGhUYXJnZXROYW1lICsgJ10nLCB0aW1lcywgdmFsdWVzICkgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHVyYXRpb24gPSBtb3JwaFRhcmdldE5hbWVzLmxlbmd0aCAqICggZnBzIHx8IDEuMCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIC4uLmFzc3VtZSBza2VsZXRhbCBhbmltYXRpb25cblxuXHRcdFx0XHR2YXIgYm9uZU5hbWUgPSAnLmJvbmVzWycgKyBib25lc1sgaCBdLm5hbWUgKyAnXSc7XG5cblx0XHRcdFx0YWRkTm9uZW1wdHlUcmFjayhcblx0XHRcdFx0XHRWZWN0b3JLZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucG9zaXRpb24nLFxuXHRcdFx0XHRcdGFuaW1hdGlvbktleXMsICdwb3MnLCB0cmFja3MgKTtcblxuXHRcdFx0XHRhZGROb25lbXB0eVRyYWNrKFxuXHRcdFx0XHRcdFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBib25lTmFtZSArICcucXVhdGVybmlvbicsXG5cdFx0XHRcdFx0YW5pbWF0aW9uS2V5cywgJ3JvdCcsIHRyYWNrcyApO1xuXG5cdFx0XHRcdGFkZE5vbmVtcHR5VHJhY2soXG5cdFx0XHRcdFx0VmVjdG9yS2V5ZnJhbWVUcmFjaywgYm9uZU5hbWUgKyAnLnNjYWxlJyxcblx0XHRcdFx0XHRhbmltYXRpb25LZXlzLCAnc2NsJywgdHJhY2tzICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGlmICggdHJhY2tzLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0cmV0dXJuIG51bGw7XG5cblx0XHR9XG5cblx0XHR2YXIgY2xpcCA9IG5ldyBBbmltYXRpb25DbGlwKCBjbGlwTmFtZSwgZHVyYXRpb24sIHRyYWNrcyApO1xuXG5cdFx0cmV0dXJuIGNsaXA7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkNsaXAucHJvdG90eXBlLCB7XG5cblx0cmVzZXREdXJhdGlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHRyYWNrcyA9IHRoaXMudHJhY2tzLCBkdXJhdGlvbiA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSB0cmFja3MubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgdHJhY2sgPSB0aGlzLnRyYWNrc1sgaSBdO1xuXG5cdFx0XHRkdXJhdGlvbiA9IE1hdGgubWF4KCBkdXJhdGlvbiwgdHJhY2sudGltZXNbIHRyYWNrLnRpbWVzLmxlbmd0aCAtIDEgXSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5kdXJhdGlvbiA9IGR1cmF0aW9uO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0cmltOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMudHJhY2tzWyBpIF0udHJpbSggMCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR2YWxpZGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHZhbGlkID0gdHJ1ZTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMudHJhY2tzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsaWQgPSB2YWxpZCAmJiB0aGlzLnRyYWNrc1sgaSBdLnZhbGlkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsaWQ7XG5cblx0fSxcblxuXHRvcHRpbWl6ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy50cmFja3MubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLnRyYWNrc1sgaSBdLm9wdGltaXplKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdHJhY2tzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCB0aGlzLnRyYWNrcy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdHRyYWNrcy5wdXNoKCB0aGlzLnRyYWNrc1sgaSBdLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBuZXcgQW5pbWF0aW9uQ2xpcCggdGhpcy5uYW1lLCB0aGlzLmR1cmF0aW9uLCB0cmFja3MgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBDYWNoZSA9IHtcblxuXHRlbmFibGVkOiBmYWxzZSxcblxuXHRmaWxlczoge30sXG5cblx0YWRkOiBmdW5jdGlvbiAoIGtleSwgZmlsZSApIHtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdC8vIGNvbnNvbGUubG9nKCAnVEhSRUUuQ2FjaGUnLCAnQWRkaW5nIGtleTonLCBrZXkgKTtcblxuXHRcdHRoaXMuZmlsZXNbIGtleSBdID0gZmlsZTtcblxuXHR9LFxuXG5cdGdldDogZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRpZiAoIHRoaXMuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHQvLyBjb25zb2xlLmxvZyggJ1RIUkVFLkNhY2hlJywgJ0NoZWNraW5nIGtleTonLCBrZXkgKTtcblxuXHRcdHJldHVybiB0aGlzLmZpbGVzWyBrZXkgXTtcblxuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24gKCBrZXkgKSB7XG5cblx0XHRkZWxldGUgdGhpcy5maWxlc1sga2V5IF07XG5cblx0fSxcblxuXHRjbGVhcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5maWxlcyA9IHt9O1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIExvYWRpbmdNYW5hZ2VyKCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0dmFyIHNjb3BlID0gdGhpcztcblxuXHR2YXIgaXNMb2FkaW5nID0gZmFsc2U7XG5cdHZhciBpdGVtc0xvYWRlZCA9IDA7XG5cdHZhciBpdGVtc1RvdGFsID0gMDtcblx0dmFyIHVybE1vZGlmaWVyID0gdW5kZWZpbmVkO1xuXHR2YXIgaGFuZGxlcnMgPSBbXTtcblxuXHQvLyBSZWZlciB0byAjNTY4OSBmb3IgdGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3Qgc2V0IC5vblN0YXJ0XG5cdC8vIGluIHRoZSBjb25zdHJ1Y3RvclxuXG5cdHRoaXMub25TdGFydCA9IHVuZGVmaW5lZDtcblx0dGhpcy5vbkxvYWQgPSBvbkxvYWQ7XG5cdHRoaXMub25Qcm9ncmVzcyA9IG9uUHJvZ3Jlc3M7XG5cdHRoaXMub25FcnJvciA9IG9uRXJyb3I7XG5cblx0dGhpcy5pdGVtU3RhcnQgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGl0ZW1zVG90YWwgKys7XG5cblx0XHRpZiAoIGlzTG9hZGluZyA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub25TdGFydCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHNjb3BlLm9uU3RhcnQoIHVybCwgaXRlbXNMb2FkZWQsIGl0ZW1zVG90YWwgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aXNMb2FkaW5nID0gdHJ1ZTtcblxuXHR9O1xuXG5cdHRoaXMuaXRlbUVuZCA9IGZ1bmN0aW9uICggdXJsICkge1xuXG5cdFx0aXRlbXNMb2FkZWQgKys7XG5cblx0XHRpZiAoIHNjb3BlLm9uUHJvZ3Jlc3MgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUub25Qcm9ncmVzcyggdXJsLCBpdGVtc0xvYWRlZCwgaXRlbXNUb3RhbCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBpdGVtc0xvYWRlZCA9PT0gaXRlbXNUb3RhbCApIHtcblxuXHRcdFx0aXNMb2FkaW5nID0gZmFsc2U7XG5cblx0XHRcdGlmICggc2NvcGUub25Mb2FkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0c2NvcGUub25Mb2FkKCk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9O1xuXG5cdHRoaXMuaXRlbUVycm9yID0gZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRpZiAoIHNjb3BlLm9uRXJyb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUub25FcnJvciggdXJsICk7XG5cblx0XHR9XG5cblx0fTtcblxuXHR0aGlzLnJlc29sdmVVUkwgPSBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdGlmICggdXJsTW9kaWZpZXIgKSB7XG5cblx0XHRcdHJldHVybiB1cmxNb2RpZmllciggdXJsICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdXJsO1xuXG5cdH07XG5cblx0dGhpcy5zZXRVUkxNb2RpZmllciA9IGZ1bmN0aW9uICggdHJhbnNmb3JtICkge1xuXG5cdFx0dXJsTW9kaWZpZXIgPSB0cmFuc2Zvcm07XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9O1xuXG5cdHRoaXMuYWRkSGFuZGxlciA9IGZ1bmN0aW9uICggcmVnZXgsIGxvYWRlciApIHtcblxuXHRcdGhhbmRsZXJzLnB1c2goIHJlZ2V4LCBsb2FkZXIgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5yZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKCByZWdleCApIHtcblxuXHRcdHZhciBpbmRleCA9IGhhbmRsZXJzLmluZGV4T2YoIHJlZ2V4ICk7XG5cblx0XHRpZiAoIGluZGV4ICE9PSAtIDEgKSB7XG5cblx0XHRcdGhhbmRsZXJzLnNwbGljZSggaW5kZXgsIDIgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH07XG5cblx0dGhpcy5nZXRIYW5kbGVyID0gZnVuY3Rpb24gKCBmaWxlICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgbDsgaSArPSAyICkge1xuXG5cdFx0XHR2YXIgcmVnZXggPSBoYW5kbGVyc1sgaSBdO1xuXHRcdFx0dmFyIGxvYWRlciA9IGhhbmRsZXJzWyBpICsgMSBdO1xuXG5cdFx0XHRpZiAoIHJlZ2V4Lmdsb2JhbCApIHJlZ2V4Lmxhc3RJbmRleCA9IDA7IC8vIHNlZSAjMTc5MjBcblxuXHRcdFx0aWYgKCByZWdleC50ZXN0KCBmaWxlICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGxvYWRlcjtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0fTtcblxufVxuXG52YXIgRGVmYXVsdExvYWRpbmdNYW5hZ2VyID0gbmV3IExvYWRpbmdNYW5hZ2VyKCk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0dGhpcy5tYW5hZ2VyID0gKCBtYW5hZ2VyICE9PSB1bmRlZmluZWQgKSA/IG1hbmFnZXIgOiBEZWZhdWx0TG9hZGluZ01hbmFnZXI7XG5cblx0dGhpcy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuXHR0aGlzLnBhdGggPSAnJztcblx0dGhpcy5yZXNvdXJjZVBhdGggPSAnJztcblxufVxuXG5PYmplY3QuYXNzaWduKCBMb2FkZXIucHJvdG90eXBlLCB7XG5cblx0bG9hZDogZnVuY3Rpb24gKCAvKiB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciAqLyApIHt9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIC8qIGRhdGEgKi8gKSB7fSxcblxuXHRzZXRDcm9zc09yaWdpbjogZnVuY3Rpb24gKCBjcm9zc09yaWdpbiApIHtcblxuXHRcdHRoaXMuY3Jvc3NPcmlnaW4gPSBjcm9zc09yaWdpbjtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldFBhdGg6IGZ1bmN0aW9uICggcGF0aCApIHtcblxuXHRcdHRoaXMucGF0aCA9IHBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSZXNvdXJjZVBhdGg6IGZ1bmN0aW9uICggcmVzb3VyY2VQYXRoICkge1xuXG5cdFx0dGhpcy5yZXNvdXJjZVBhdGggPSByZXNvdXJjZVBhdGg7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG52YXIgbG9hZGluZyA9IHt9O1xuXG5mdW5jdGlvbiBGaWxlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cbn1cblxuRmlsZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRmlsZUxvYWRlcixcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0aWYgKCB1cmwgPT09IHVuZGVmaW5lZCApIHVybCA9ICcnO1xuXG5cdFx0aWYgKCB0aGlzLnBhdGggIT09IHVuZGVmaW5lZCApIHVybCA9IHRoaXMucGF0aCArIHVybDtcblxuXHRcdHVybCA9IHRoaXMubWFuYWdlci5yZXNvbHZlVVJMKCB1cmwgKTtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgY2FjaGVkID0gQ2FjaGUuZ2V0KCB1cmwgKTtcblxuXHRcdGlmICggY2FjaGVkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbVN0YXJ0KCB1cmwgKTtcblxuXHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCBjYWNoZWQgKTtcblxuXHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0XHR9LCAwICk7XG5cblx0XHRcdHJldHVybiBjYWNoZWQ7XG5cblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiByZXF1ZXN0IGlzIGR1cGxpY2F0ZVxuXG5cdFx0aWYgKCBsb2FkaW5nWyB1cmwgXSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XG5cblx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uRXJyb3I6IG9uRXJyb3JcblxuXHRcdFx0fSApO1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHQvLyBDaGVjayBmb3IgZGF0YTogVVJJXG5cdFx0dmFyIGRhdGFVcmlSZWdleCA9IC9eZGF0YTooLio/KSg7YmFzZTY0KT8sKC4qKSQvO1xuXHRcdHZhciBkYXRhVXJpUmVnZXhSZXN1bHQgPSB1cmwubWF0Y2goIGRhdGFVcmlSZWdleCApO1xuXG5cdFx0Ly8gU2FmYXJpIGNhbiBub3QgaGFuZGxlIERhdGEgVVJJcyB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0IHNvIHByb2Nlc3MgbWFudWFsbHlcblx0XHRpZiAoIGRhdGFVcmlSZWdleFJlc3VsdCApIHtcblxuXHRcdFx0dmFyIG1pbWVUeXBlID0gZGF0YVVyaVJlZ2V4UmVzdWx0WyAxIF07XG5cdFx0XHR2YXIgaXNCYXNlNjQgPSAhISBkYXRhVXJpUmVnZXhSZXN1bHRbIDIgXTtcblx0XHRcdHZhciBkYXRhID0gZGF0YVVyaVJlZ2V4UmVzdWx0WyAzIF07XG5cblx0XHRcdGRhdGEgPSBkZWNvZGVVUklDb21wb25lbnQoIGRhdGEgKTtcblxuXHRcdFx0aWYgKCBpc0Jhc2U2NCApIGRhdGEgPSBhdG9iKCBkYXRhICk7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0dmFyIHJlc3BvbnNlO1xuXHRcdFx0XHR2YXIgcmVzcG9uc2VUeXBlID0gKCB0aGlzLnJlc3BvbnNlVHlwZSB8fCAnJyApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdFx0c3dpdGNoICggcmVzcG9uc2VUeXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAnYXJyYXlidWZmZXInOlxuXHRcdFx0XHRcdGNhc2UgJ2Jsb2InOlxuXG5cdFx0XHRcdFx0XHR2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KCBkYXRhLmxlbmd0aCApO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2aWV3WyBpIF0gPSBkYXRhLmNoYXJDb2RlQXQoIGkgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAoIHJlc3BvbnNlVHlwZSA9PT0gJ2Jsb2InICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gbmV3IEJsb2IoIFsgdmlldy5idWZmZXIgXSwgeyB0eXBlOiBtaW1lVHlwZSB9ICk7XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSB2aWV3LmJ1ZmZlcjtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ2RvY3VtZW50JzpcblxuXHRcdFx0XHRcdFx0dmFyIHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgbWltZVR5cGUgKTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdqc29uJzpcblxuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBKU09OLnBhcnNlKCBkYXRhICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDogLy8gJ3RleHQnIG9yIG90aGVyXG5cblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gZGF0YTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdhaXQgZm9yIG5leHQgYnJvd3NlciB0aWNrIGxpa2Ugc3RhbmRhcmQgWE1MSHR0cFJlcXVlc3QgZXZlbnQgZGlzcGF0Y2hpbmcgZG9lc1xuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggcmVzcG9uc2UgKTtcblxuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdFx0fSwgMCApO1xuXG5cdFx0XHR9IGNhdGNoICggZXJyb3IgKSB7XG5cblx0XHRcdFx0Ly8gV2FpdCBmb3IgbmV4dCBicm93c2VyIHRpY2sgbGlrZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBldmVudCBkaXNwYXRjaGluZyBkb2VzXG5cdFx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRcdGlmICggb25FcnJvciApIG9uRXJyb3IoIGVycm9yICk7XG5cblx0XHRcdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9LCAwICk7XG5cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEluaXRpYWxpc2UgYXJyYXkgZm9yIGR1cGxpY2F0ZSByZXF1ZXN0c1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXSA9IFtdO1xuXG5cdFx0XHRsb2FkaW5nWyB1cmwgXS5wdXNoKCB7XG5cblx0XHRcdFx0b25Mb2FkOiBvbkxvYWQsXG5cdFx0XHRcdG9uUHJvZ3Jlc3M6IG9uUHJvZ3Jlc3MsXG5cdFx0XHRcdG9uRXJyb3I6IG9uRXJyb3JcblxuXHRcdFx0fSApO1xuXG5cdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG5cdFx0XHRyZXF1ZXN0Lm9wZW4oICdHRVQnLCB1cmwsIHRydWUgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnbG9hZCcsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIHJlc3BvbnNlID0gdGhpcy5yZXNwb25zZTtcblxuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0ZGVsZXRlIGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGlmICggdGhpcy5zdGF0dXMgPT09IDIwMCB8fCB0aGlzLnN0YXR1cyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIEhUVFAgU3RhdHVzIDAgd2hlbiB1c2luZyBub24taHR0cCBwcm90b2NvbFxuXHRcdFx0XHRcdC8vIGUuZy4gJ2ZpbGU6Ly8nIG9yICdkYXRhOi8vJy4gSGFuZGxlIGFzIHN1Y2Nlc3MuXG5cblx0XHRcdFx0XHRpZiAoIHRoaXMuc3RhdHVzID09PSAwICkgY29uc29sZS53YXJuKCAnVEhSRUUuRmlsZUxvYWRlcjogSFRUUCBTdGF0dXMgMCByZWNlaXZlZC4nICk7XG5cblx0XHRcdFx0XHQvLyBBZGQgdG8gY2FjaGUgb25seSBvbiBIVFRQIHN1Y2Nlc3MsIHNvIHRoYXQgd2UgZG8gbm90IGNhY2hlXG5cdFx0XHRcdFx0Ly8gZXJyb3IgcmVzcG9uc2UgYm9kaWVzIGFzIHByb3BlciByZXNwb25zZXMgdG8gcmVxdWVzdHMuXG5cdFx0XHRcdFx0Q2FjaGUuYWRkKCB1cmwsIHJlc3BvbnNlICk7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25Mb2FkICkgY2FsbGJhY2sub25Mb2FkKCByZXNwb25zZSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIGNhbGxiYWNrID0gY2FsbGJhY2tzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uRXJyb3IgKSBjYWxsYmFjay5vbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRXJyb3IoIHVybCApO1xuXHRcdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9LCBmYWxzZSApO1xuXG5cdFx0XHRyZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoICdwcm9ncmVzcycsIGZ1bmN0aW9uICggZXZlbnQgKSB7XG5cblx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IGxvYWRpbmdbIHVybCBdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdFx0XHR2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbIGkgXTtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrLm9uUHJvZ3Jlc3MgKSBjYWxsYmFjay5vblByb2dyZXNzKCBldmVudCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0cmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCAnYWJvcnQnLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuXG5cdFx0XHRcdHZhciBjYWxsYmFja3MgPSBsb2FkaW5nWyB1cmwgXTtcblxuXHRcdFx0XHRkZWxldGUgbG9hZGluZ1sgdXJsIF07XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciBjYWxsYmFjayA9IGNhbGxiYWNrc1sgaSBdO1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sub25FcnJvciApIGNhbGxiYWNrLm9uRXJyb3IoIGV2ZW50ICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgZmFsc2UgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnJlc3BvbnNlVHlwZSAhPT0gdW5kZWZpbmVkICkgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSB0aGlzLnJlc3BvbnNlVHlwZTtcblx0XHRcdGlmICggdGhpcy53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCApIHJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdGhpcy53aXRoQ3JlZGVudGlhbHM7XG5cblx0XHRcdGlmICggcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlICkgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKCB0aGlzLm1pbWVUeXBlICE9PSB1bmRlZmluZWQgPyB0aGlzLm1pbWVUeXBlIDogJ3RleHQvcGxhaW4nICk7XG5cblx0XHRcdGZvciAoIHZhciBoZWFkZXIgaW4gdGhpcy5yZXF1ZXN0SGVhZGVyICkge1xuXG5cdFx0XHRcdHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlciggaGVhZGVyLCB0aGlzLnJlcXVlc3RIZWFkZXJbIGhlYWRlciBdICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmVxdWVzdC5zZW5kKCBudWxsICk7XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRyZXR1cm4gcmVxdWVzdDtcblxuXHR9LFxuXG5cdHNldFJlc3BvbnNlVHlwZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucmVzcG9uc2VUeXBlID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRXaXRoQ3JlZGVudGlhbHM6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLndpdGhDcmVkZW50aWFscyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0TWltZVR5cGU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLm1pbWVUeXBlID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5yZXF1ZXN0SGVhZGVyID0gdmFsdWU7XG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25Mb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0TG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTtcblxufVxuXG5BbmltYXRpb25Mb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFuaW1hdGlvbkxvYWRlcixcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBhbmltYXRpb25zID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGNsaXAgPSBBbmltYXRpb25DbGlwLnBhcnNlKCBqc29uWyBpIF0gKTtcblxuXHRcdFx0YW5pbWF0aW9ucy5wdXNoKCBjbGlwICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYW5pbWF0aW9ucztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICpcbiAqIEFic3RyYWN0IEJhc2UgY2xhc3MgdG8gYmxvY2sgYmFzZWQgdGV4dHVyZXMgbG9hZGVyIChkZHMsIHB2ciwgLi4uKVxuICpcbiAqIFN1YiBjbGFzc2VzIGhhdmUgdG8gaW1wbGVtZW50IHRoZSBwYXJzZSgpIG1ldGhvZCB3aGljaCB3aWxsIGJlIHVzZWQgaW4gbG9hZCgpLlxuICovXG5cbmZ1bmN0aW9uIENvbXByZXNzZWRUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cbn1cblxuQ29tcHJlc3NlZFRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IENvbXByZXNzZWRUZXh0dXJlTG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGltYWdlcyA9IFtdO1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ29tcHJlc3NlZFRleHR1cmUoKTtcblx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2VzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLnNldFJlc3BvbnNlVHlwZSggJ2FycmF5YnVmZmVyJyApO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxbIGkgXSwgZnVuY3Rpb24gKCBidWZmZXIgKSB7XG5cblx0XHRcdFx0dmFyIHRleERhdGFzID0gc2NvcGUucGFyc2UoIGJ1ZmZlciwgdHJ1ZSApO1xuXG5cdFx0XHRcdGltYWdlc1sgaSBdID0ge1xuXHRcdFx0XHRcdHdpZHRoOiB0ZXhEYXRhcy53aWR0aCxcblx0XHRcdFx0XHRoZWlnaHQ6IHRleERhdGFzLmhlaWdodCxcblx0XHRcdFx0XHRmb3JtYXQ6IHRleERhdGFzLmZvcm1hdCxcblx0XHRcdFx0XHRtaXBtYXBzOiB0ZXhEYXRhcy5taXBtYXBzXG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bG9hZGVkICs9IDE7XG5cblx0XHRcdFx0aWYgKCBsb2FkZWQgPT09IDYgKSB7XG5cblx0XHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxIClcblx0XHRcdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhcy5mb3JtYXQ7XG5cdFx0XHRcdFx0dGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0dmFyIGxvYWRlZCA9IDA7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSB1cmwubGVuZ3RoOyBpIDwgaWw7ICsrIGkgKSB7XG5cblx0XHRcdFx0bG9hZFRleHR1cmUoIGkgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gY29tcHJlc3NlZCBjdWJlbWFwIHRleHR1cmUgc3RvcmVkIGluIGEgc2luZ2xlIEREUyBmaWxlXG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHRcdHZhciB0ZXhEYXRhcyA9IHNjb3BlLnBhcnNlKCBidWZmZXIsIHRydWUgKTtcblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLmlzQ3ViZW1hcCApIHtcblxuXHRcdFx0XHRcdHZhciBmYWNlcyA9IHRleERhdGFzLm1pcG1hcHMubGVuZ3RoIC8gdGV4RGF0YXMubWlwbWFwQ291bnQ7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgZiA9IDA7IGYgPCBmYWNlczsgZiArKyApIHtcblxuXHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0gPSB7IG1pcG1hcHM6IFtdIH07XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRleERhdGFzLm1pcG1hcENvdW50OyBpICsrICkge1xuXG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLm1pcG1hcHMucHVzaCggdGV4RGF0YXMubWlwbWFwc1sgZiAqIHRleERhdGFzLm1pcG1hcENvdW50ICsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdGltYWdlc1sgZiBdLmZvcm1hdCA9IHRleERhdGFzLmZvcm1hdDtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0ud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHRcdFx0aW1hZ2VzWyBmIF0uaGVpZ2h0ID0gdGV4RGF0YXMuaGVpZ2h0O1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRleHR1cmUuaW1hZ2Uud2lkdGggPSB0ZXhEYXRhcy53aWR0aDtcblx0XHRcdFx0XHR0ZXh0dXJlLmltYWdlLmhlaWdodCA9IHRleERhdGFzLmhlaWdodDtcblx0XHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhcy5taXBtYXBzO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRleERhdGFzLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZS5taW5GaWx0ZXIgPSBMaW5lYXJGaWx0ZXI7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRleHR1cmUuZm9ybWF0ID0gdGV4RGF0YXMuZm9ybWF0O1xuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIE5pa29zIE0uIC8gaHR0cHM6Ly9naXRodWIuY29tL2ZvbzEyMy9cbiAqXG4gKiBBYnN0cmFjdCBCYXNlIGNsYXNzIHRvIGxvYWQgZ2VuZXJpYyBiaW5hcnkgdGV4dHVyZXMgZm9ybWF0cyAocmdiZSwgaGRyLCAuLi4pXG4gKlxuICogU3ViIGNsYXNzZXMgaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHBhcnNlKCkgbWV0aG9kIHdoaWNoIHdpbGwgYmUgdXNlZCBpbiBsb2FkKCkuXG4gKi9cblxuZnVuY3Rpb24gRGF0YVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0TG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTtcblxufVxuXG5EYXRhVGV4dHVyZUxvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogRGF0YVRleHR1cmVMb2FkZXIsXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBEYXRhVGV4dHVyZSgpO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHR2YXIgdGV4RGF0YSA9IHNjb3BlLnBhcnNlKCBidWZmZXIgKTtcblxuXHRcdFx0aWYgKCAhIHRleERhdGEgKSByZXR1cm47XG5cblx0XHRcdGlmICggdGV4RGF0YS5pbWFnZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRleHR1cmUuaW1hZ2UgPSB0ZXhEYXRhLmltYWdlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0ZXhEYXRhLmRhdGEgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLmltYWdlLndpZHRoID0gdGV4RGF0YS53aWR0aDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5oZWlnaHQgPSB0ZXhEYXRhLmhlaWdodDtcblx0XHRcdFx0dGV4dHVyZS5pbWFnZS5kYXRhID0gdGV4RGF0YS5kYXRhO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUud3JhcFMgPSB0ZXhEYXRhLndyYXBTICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBTIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblx0XHRcdHRleHR1cmUud3JhcFQgPSB0ZXhEYXRhLndyYXBUICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZztcblxuXHRcdFx0dGV4dHVyZS5tYWdGaWx0ZXIgPSB0ZXhEYXRhLm1hZ0ZpbHRlciAhPT0gdW5kZWZpbmVkID8gdGV4RGF0YS5tYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXI7XG5cdFx0XHR0ZXh0dXJlLm1pbkZpbHRlciA9IHRleERhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLm1pbkZpbHRlciA6IExpbmVhckZpbHRlcjtcblxuXHRcdFx0dGV4dHVyZS5hbmlzb3Ryb3B5ID0gdGV4RGF0YS5hbmlzb3Ryb3B5ICE9PSB1bmRlZmluZWQgPyB0ZXhEYXRhLmFuaXNvdHJvcHkgOiAxO1xuXG5cdFx0XHRpZiAoIHRleERhdGEuZm9ybWF0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5mb3JtYXQgPSB0ZXhEYXRhLmZvcm1hdDtcblxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0ZXhEYXRhLnR5cGUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLnR5cGUgPSB0ZXhEYXRhLnR5cGU7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHR0ZXh0dXJlLm1pcG1hcHMgPSB0ZXhEYXRhLm1pcG1hcHM7XG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOyAvLyBwcmVzdW1hYmx5Li4uXG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0ZXhEYXRhLm1pcG1hcENvdW50ID09PSAxICkge1xuXG5cdFx0XHRcdHRleHR1cmUubWluRmlsdGVyID0gTGluZWFyRmlsdGVyO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggdGV4dHVyZSwgdGV4RGF0YSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEltYWdlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cbn1cblxuSW1hZ2VMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEltYWdlTG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHRpZiAoIHRoaXMucGF0aCAhPT0gdW5kZWZpbmVkICkgdXJsID0gdGhpcy5wYXRoICsgdXJsO1xuXG5cdFx0dXJsID0gdGhpcy5tYW5hZ2VyLnJlc29sdmVVUkwoIHVybCApO1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBjYWNoZWQgPSBDYWNoZS5nZXQoIHVybCApO1xuXG5cdFx0aWYgKCBjYWNoZWQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGNhY2hlZCApO1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIDAgKTtcblxuXHRcdFx0cmV0dXJuIGNhY2hlZDtcblxuXHRcdH1cblxuXHRcdHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyggJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLCAnaW1nJyApO1xuXG5cdFx0ZnVuY3Rpb24gb25JbWFnZUxvYWQoKSB7XG5cblx0XHRcdGltYWdlLnJlbW92ZUV2ZW50TGlzdGVuZXIoICdsb2FkJywgb25JbWFnZUxvYWQsIGZhbHNlICk7XG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCB0aGlzICk7XG5cblx0XHRcdGlmICggb25Mb2FkICkgb25Mb2FkKCB0aGlzICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkltYWdlRXJyb3IoIGV2ZW50ICkge1xuXG5cdFx0XHRpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCAnbG9hZCcsIG9uSW1hZ2VMb2FkLCBmYWxzZSApO1xuXHRcdFx0aW1hZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ2Vycm9yJywgb25JbWFnZUVycm9yLCBmYWxzZSApO1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBldmVudCApO1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FcnJvciggdXJsICk7XG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1FbmQoIHVybCApO1xuXG5cdFx0fVxuXG5cdFx0aW1hZ2UuYWRkRXZlbnRMaXN0ZW5lciggJ2xvYWQnLCBvbkltYWdlTG9hZCwgZmFsc2UgKTtcblx0XHRpbWFnZS5hZGRFdmVudExpc3RlbmVyKCAnZXJyb3InLCBvbkltYWdlRXJyb3IsIGZhbHNlICk7XG5cblx0XHRpZiAoIHVybC5zdWJzdHIoIDAsIDUgKSAhPT0gJ2RhdGE6JyApIHtcblxuXHRcdFx0aWYgKCB0aGlzLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgKSBpbWFnZS5jcm9zc09yaWdpbiA9IHRoaXMuY3Jvc3NPcmlnaW47XG5cblx0XHR9XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRpbWFnZS5zcmMgPSB1cmw7XG5cblx0XHRyZXR1cm4gaW1hZ2U7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEN1YmVUZXh0dXJlTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cbn1cblxuQ3ViZVRleHR1cmVMb2FkZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTG9hZGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEN1YmVUZXh0dXJlTG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJscywgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHRleHR1cmUgPSBuZXcgQ3ViZVRleHR1cmUoKTtcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIHRoaXMubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCB0aGlzLnBhdGggKTtcblxuXHRcdHZhciBsb2FkZWQgPSAwO1xuXG5cdFx0ZnVuY3Rpb24gbG9hZFRleHR1cmUoIGkgKSB7XG5cblx0XHRcdGxvYWRlci5sb2FkKCB1cmxzWyBpIF0sIGZ1bmN0aW9uICggaW1hZ2UgKSB7XG5cblx0XHRcdFx0dGV4dHVyZS5pbWFnZXNbIGkgXSA9IGltYWdlO1xuXG5cdFx0XHRcdGxvYWRlZCArKztcblxuXHRcdFx0XHRpZiAoIGxvYWRlZCA9PT0gNiApIHtcblxuXHRcdFx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIHRleHR1cmUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgb25FcnJvciApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7ICsrIGkgKSB7XG5cblx0XHRcdGxvYWRUZXh0dXJlKCBpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0TG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTtcblxufVxuXG5UZXh0dXJlTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBUZXh0dXJlTG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKCk7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEltYWdlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cblx0XHRsb2FkZXIubG9hZCggdXJsLCBmdW5jdGlvbiAoIGltYWdlICkge1xuXG5cdFx0XHR0ZXh0dXJlLmltYWdlID0gaW1hZ2U7XG5cblx0XHRcdC8vIEpQRUdzIGNhbid0IGhhdmUgYW4gYWxwaGEgY2hhbm5lbCwgc28gbWVtb3J5IGNhbiBiZSBzYXZlZCBieSBzdG9yaW5nIHRoZW0gYXMgUkdCLlxuXHRcdFx0dmFyIGlzSlBFRyA9IHVybC5zZWFyY2goIC9cXC5qcGU/ZygkfFxcPykvaSApID4gMCB8fCB1cmwuc2VhcmNoKCAvXmRhdGFcXDppbWFnZVxcL2pwZWcvICkgPT09IDA7XG5cblx0XHRcdHRleHR1cmUuZm9ybWF0ID0gaXNKUEVHID8gUkdCRm9ybWF0IDogUkdCQUZvcm1hdDtcblx0XHRcdHRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdG9uTG9hZCggdGV4dHVyZSApO1xuXG5cdFx0XHR9XG5cblx0XHR9LCBvblByb2dyZXNzLCBvbkVycm9yICk7XG5cblx0XHRyZXR1cm4gdGV4dHVyZTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKiBFeHRlbnNpYmxlIGN1cnZlIG9iamVjdFxuICpcbiAqIFNvbWUgY29tbW9uIG9mIGN1cnZlIG1ldGhvZHM6XG4gKiAuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICksIC5nZXRUYW5nZW50KCB0IClcbiAqIC5nZXRQb2ludEF0KCB1LCBvcHRpb25hbFRhcmdldCApLCAuZ2V0VGFuZ2VudEF0KCB1IClcbiAqIC5nZXRQb2ludHMoKSwgLmdldFNwYWNlZFBvaW50cygpXG4gKiAuZ2V0TGVuZ3RoKClcbiAqIC51cGRhdGVBcmNMZW5ndGhzKClcbiAqXG4gKiBUaGlzIGZvbGxvd2luZyBjdXJ2ZXMgaW5oZXJpdCBmcm9tIFRIUkVFLkN1cnZlOlxuICpcbiAqIC0tIDJEIGN1cnZlcyAtLVxuICogVEhSRUUuQXJjQ3VydmVcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmVcbiAqIFRIUkVFLkVsbGlwc2VDdXJ2ZVxuICogVEhSRUUuTGluZUN1cnZlXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZVxuICogVEhSRUUuU3BsaW5lQ3VydmVcbiAqXG4gKiAtLSAzRCBjdXJ2ZXMgLS1cbiAqIFRIUkVFLkNhdG11bGxSb21DdXJ2ZTNcbiAqIFRIUkVFLkN1YmljQmV6aWVyQ3VydmUzXG4gKiBUSFJFRS5MaW5lQ3VydmUzXG4gKiBUSFJFRS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTNcbiAqXG4gKiBBIHNlcmllcyBvZiBjdXJ2ZXMgY2FuIGJlIHJlcHJlc2VudGVkIGFzIGEgVEhSRUUuQ3VydmVQYXRoLlxuICpcbiAqKi9cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKlx0QWJzdHJhY3QgQ3VydmUgYmFzZSBjbGFzc1xuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBDdXJ2ZSgpIHtcblxuXHR0aGlzLnR5cGUgPSAnQ3VydmUnO1xuXG5cdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gMjAwO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEN1cnZlLnByb3RvdHlwZSwge1xuXG5cdC8vIFZpcnR1YWwgYmFzZSBjbGFzcyBtZXRob2QgdG8gb3ZlcndyaXRlIGFuZCBpbXBsZW1lbnQgaW4gc3ViY2xhc3Nlc1xuXHQvL1x0LSB0IFswIC4uIDFdXG5cblx0Z2V0UG9pbnQ6IGZ1bmN0aW9uICggLyogdCwgb3B0aW9uYWxUYXJnZXQgKi8gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZTogLmdldFBvaW50KCkgbm90IGltcGxlbWVudGVkLicgKTtcblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9LFxuXG5cdC8vIEdldCBwb2ludCBhdCByZWxhdGl2ZSBwb3NpdGlvbiBpbiBjdXJ2ZSBhY2NvcmRpbmcgdG8gYXJjIGxlbmd0aFxuXHQvLyAtIHUgWzAgLi4gMV1cblxuXHRnZXRQb2ludEF0OiBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHQsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fSxcblxuXHQvLyBHZXQgc2VxdWVuY2Ugb2YgcG9pbnRzIHVzaW5nIGdldFBvaW50KCB0IClcblxuXHRnZXRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludCggZCAvIGRpdmlzaW9ucyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Ly8gR2V0IHNlcXVlbmNlIG9mIHBvaW50cyB1c2luZyBnZXRQb2ludEF0KCB1IClcblxuXHRnZXRTcGFjZWRQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IDU7XG5cblx0XHR2YXIgcG9pbnRzID0gW107XG5cblx0XHRmb3IgKCB2YXIgZCA9IDA7IGQgPD0gZGl2aXNpb25zOyBkICsrICkge1xuXG5cdFx0XHRwb2ludHMucHVzaCggdGhpcy5nZXRQb2ludEF0KCBkIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBwb2ludHM7XG5cblx0fSxcblxuXHQvLyBHZXQgdG90YWwgY3VydmUgYXJjIGxlbmd0aFxuXG5cdGdldExlbmd0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuZ3Roc1sgbGVuZ3Rocy5sZW5ndGggLSAxIF07XG5cblx0fSxcblxuXHQvLyBHZXQgbGlzdCBvZiBjdW11bGF0aXZlIHNlZ21lbnQgbGVuZ3Roc1xuXG5cdGdldExlbmd0aHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0aWYgKCBkaXZpc2lvbnMgPT09IHVuZGVmaW5lZCApIGRpdmlzaW9ucyA9IHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0aWYgKCB0aGlzLmNhY2hlQXJjTGVuZ3RocyAmJlxuXHRcdFx0KCB0aGlzLmNhY2hlQXJjTGVuZ3Rocy5sZW5ndGggPT09IGRpdmlzaW9ucyArIDEgKSAmJlxuXHRcdFx0ISB0aGlzLm5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUFyY0xlbmd0aHM7XG5cblx0XHR9XG5cblx0XHR0aGlzLm5lZWRzVXBkYXRlID0gZmFsc2U7XG5cblx0XHR2YXIgY2FjaGUgPSBbXTtcblx0XHR2YXIgY3VycmVudCwgbGFzdCA9IHRoaXMuZ2V0UG9pbnQoIDAgKTtcblx0XHR2YXIgcCwgc3VtID0gMDtcblxuXHRcdGNhY2hlLnB1c2goIDAgKTtcblxuXHRcdGZvciAoIHAgPSAxOyBwIDw9IGRpdmlzaW9uczsgcCArKyApIHtcblxuXHRcdFx0Y3VycmVudCA9IHRoaXMuZ2V0UG9pbnQoIHAgLyBkaXZpc2lvbnMgKTtcblx0XHRcdHN1bSArPSBjdXJyZW50LmRpc3RhbmNlVG8oIGxhc3QgKTtcblx0XHRcdGNhY2hlLnB1c2goIHN1bSApO1xuXHRcdFx0bGFzdCA9IGN1cnJlbnQ7XG5cblx0XHR9XG5cblx0XHR0aGlzLmNhY2hlQXJjTGVuZ3RocyA9IGNhY2hlO1xuXG5cdFx0cmV0dXJuIGNhY2hlOyAvLyB7IHN1bXM6IGNhY2hlLCBzdW06IHN1bSB9OyBTdW0gaXMgaW4gdGhlIGxhc3QgZWxlbWVudC5cblxuXHR9LFxuXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuZ2V0TGVuZ3RocygpO1xuXG5cdH0sXG5cblx0Ly8gR2l2ZW4gdSAoIDAgLi4gMSApLCBnZXQgYSB0IHRvIGZpbmQgcC4gVGhpcyBnaXZlcyB5b3UgcG9pbnRzIHdoaWNoIGFyZSBlcXVpZGlzdGFudFxuXG5cdGdldFV0b1RtYXBwaW5nOiBmdW5jdGlvbiAoIHUsIGRpc3RhbmNlICkge1xuXG5cdFx0dmFyIGFyY0xlbmd0aHMgPSB0aGlzLmdldExlbmd0aHMoKTtcblxuXHRcdHZhciBpID0gMCwgaWwgPSBhcmNMZW5ndGhzLmxlbmd0aDtcblxuXHRcdHZhciB0YXJnZXRBcmNMZW5ndGg7IC8vIFRoZSB0YXJnZXRlZCB1IGRpc3RhbmNlIHZhbHVlIHRvIGdldFxuXG5cdFx0aWYgKCBkaXN0YW5jZSApIHtcblxuXHRcdFx0dGFyZ2V0QXJjTGVuZ3RoID0gZGlzdGFuY2U7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0YXJnZXRBcmNMZW5ndGggPSB1ICogYXJjTGVuZ3Roc1sgaWwgLSAxIF07XG5cblx0XHR9XG5cblx0XHQvLyBiaW5hcnkgc2VhcmNoIGZvciB0aGUgaW5kZXggd2l0aCBsYXJnZXN0IHZhbHVlIHNtYWxsZXIgdGhhbiB0YXJnZXQgdSBkaXN0YW5jZVxuXG5cdFx0dmFyIGxvdyA9IDAsIGhpZ2ggPSBpbCAtIDEsIGNvbXBhcmlzb247XG5cblx0XHR3aGlsZSAoIGxvdyA8PSBoaWdoICkge1xuXG5cdFx0XHRpID0gTWF0aC5mbG9vciggbG93ICsgKCBoaWdoIC0gbG93ICkgLyAyICk7IC8vIGxlc3MgbGlrZWx5IHRvIG92ZXJmbG93LCB0aG91Z2ggcHJvYmFibHkgbm90IGlzc3VlIGhlcmUsIEpTIGRvZXNuJ3QgcmVhbGx5IGhhdmUgaW50ZWdlcnMsIGFsbCBudW1iZXJzIGFyZSBmbG9hdHNcblxuXHRcdFx0Y29tcGFyaXNvbiA9IGFyY0xlbmd0aHNbIGkgXSAtIHRhcmdldEFyY0xlbmd0aDtcblxuXHRcdFx0aWYgKCBjb21wYXJpc29uIDwgMCApIHtcblxuXHRcdFx0XHRsb3cgPSBpICsgMTtcblxuXHRcdFx0fSBlbHNlIGlmICggY29tcGFyaXNvbiA+IDAgKSB7XG5cblx0XHRcdFx0aGlnaCA9IGkgLSAxO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGhpZ2ggPSBpO1xuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHQvLyBET05FXG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGkgPSBoaWdoO1xuXG5cdFx0aWYgKCBhcmNMZW5ndGhzWyBpIF0gPT09IHRhcmdldEFyY0xlbmd0aCApIHtcblxuXHRcdFx0cmV0dXJuIGkgLyAoIGlsIC0gMSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gd2UgY291bGQgZ2V0IGZpbmVyIGdyYWluIGF0IGxlbmd0aHMsIG9yIHVzZSBzaW1wbGUgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBwb2ludHNcblxuXHRcdHZhciBsZW5ndGhCZWZvcmUgPSBhcmNMZW5ndGhzWyBpIF07XG5cdFx0dmFyIGxlbmd0aEFmdGVyID0gYXJjTGVuZ3Roc1sgaSArIDEgXTtcblxuXHRcdHZhciBzZWdtZW50TGVuZ3RoID0gbGVuZ3RoQWZ0ZXIgLSBsZW5ndGhCZWZvcmU7XG5cblx0XHQvLyBkZXRlcm1pbmUgd2hlcmUgd2UgYXJlIGJldHdlZW4gdGhlICdiZWZvcmUnIGFuZCAnYWZ0ZXInIHBvaW50c1xuXG5cdFx0dmFyIHNlZ21lbnRGcmFjdGlvbiA9ICggdGFyZ2V0QXJjTGVuZ3RoIC0gbGVuZ3RoQmVmb3JlICkgLyBzZWdtZW50TGVuZ3RoO1xuXG5cdFx0Ly8gYWRkIHRoYXQgZnJhY3Rpb25hbCBhbW91bnQgdG8gdFxuXG5cdFx0dmFyIHQgPSAoIGkgKyBzZWdtZW50RnJhY3Rpb24gKSAvICggaWwgLSAxICk7XG5cblx0XHRyZXR1cm4gdDtcblxuXHR9LFxuXG5cdC8vIFJldHVybnMgYSB1bml0IHZlY3RvciB0YW5nZW50IGF0IHRcblx0Ly8gSW4gY2FzZSBhbnkgc3ViIGN1cnZlIGRvZXMgbm90IGltcGxlbWVudCBpdHMgdGFuZ2VudCBkZXJpdmF0aW9uLFxuXHQvLyAyIHBvaW50cyBhIHNtYWxsIGRlbHRhIGFwYXJ0IHdpbGwgYmUgdXNlZCB0byBmaW5kIGl0cyBncmFkaWVudFxuXHQvLyB3aGljaCBzZWVtcyB0byBnaXZlIGEgcmVhc29uYWJsZSBhcHByb3hpbWF0aW9uXG5cblx0Z2V0VGFuZ2VudDogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0dmFyIGRlbHRhID0gMC4wMDAxO1xuXHRcdHZhciB0MSA9IHQgLSBkZWx0YTtcblx0XHR2YXIgdDIgPSB0ICsgZGVsdGE7XG5cblx0XHQvLyBDYXBwaW5nIGluIGNhc2Ugb2YgZGFuZ2VyXG5cblx0XHRpZiAoIHQxIDwgMCApIHQxID0gMDtcblx0XHRpZiAoIHQyID4gMSApIHQyID0gMTtcblxuXHRcdHZhciBwdDEgPSB0aGlzLmdldFBvaW50KCB0MSApO1xuXHRcdHZhciBwdDIgPSB0aGlzLmdldFBvaW50KCB0MiApO1xuXG5cdFx0dmFyIHZlYyA9IHB0Mi5jbG9uZSgpLnN1YiggcHQxICk7XG5cdFx0cmV0dXJuIHZlYy5ub3JtYWxpemUoKTtcblxuXHR9LFxuXG5cdGdldFRhbmdlbnRBdDogZnVuY3Rpb24gKCB1ICkge1xuXG5cdFx0dmFyIHQgPSB0aGlzLmdldFV0b1RtYXBwaW5nKCB1ICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0VGFuZ2VudCggdCApO1xuXG5cdH0sXG5cblx0Y29tcHV0ZUZyZW5ldEZyYW1lczogZnVuY3Rpb24gKCBzZWdtZW50cywgY2xvc2VkICkge1xuXG5cdFx0Ly8gc2VlIGh0dHA6Ly93d3cuY3MuaW5kaWFuYS5lZHUvcHViL3RlY2hyZXBvcnRzL1RSNDI1LnBkZlxuXG5cdFx0dmFyIG5vcm1hbCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR2YXIgdGFuZ2VudHMgPSBbXTtcblx0XHR2YXIgbm9ybWFscyA9IFtdO1xuXHRcdHZhciBiaW5vcm1hbHMgPSBbXTtcblxuXHRcdHZhciB2ZWMgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtYXQgPSBuZXcgTWF0cml4NCgpO1xuXG5cdFx0dmFyIGksIHUsIHRoZXRhO1xuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgdGFuZ2VudCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMDsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0dSA9IGkgLyBzZWdtZW50cztcblxuXHRcdFx0dGFuZ2VudHNbIGkgXSA9IHRoaXMuZ2V0VGFuZ2VudEF0KCB1ICk7XG5cdFx0XHR0YW5nZW50c1sgaSBdLm5vcm1hbGl6ZSgpO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGFuIGluaXRpYWwgbm9ybWFsIHZlY3RvciBwZXJwZW5kaWN1bGFyIHRvIHRoZSBmaXJzdCB0YW5nZW50IHZlY3Rvcixcblx0XHQvLyBhbmQgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbWluaW11bSB0YW5nZW50IHh5eiBjb21wb25lbnRcblxuXHRcdG5vcm1hbHNbIDAgXSA9IG5ldyBWZWN0b3IzKCk7XG5cdFx0Ymlub3JtYWxzWyAwIF0gPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBtaW4gPSBOdW1iZXIuTUFYX1ZBTFVFO1xuXHRcdHZhciB0eCA9IE1hdGguYWJzKCB0YW5nZW50c1sgMCBdLnggKTtcblx0XHR2YXIgdHkgPSBNYXRoLmFicyggdGFuZ2VudHNbIDAgXS55ICk7XG5cdFx0dmFyIHR6ID0gTWF0aC5hYnMoIHRhbmdlbnRzWyAwIF0ueiApO1xuXG5cdFx0aWYgKCB0eCA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR4O1xuXHRcdFx0bm9ybWFsLnNldCggMSwgMCwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eSA8PSBtaW4gKSB7XG5cblx0XHRcdG1pbiA9IHR5O1xuXHRcdFx0bm9ybWFsLnNldCggMCwgMSwgMCApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0eiA8PSBtaW4gKSB7XG5cblx0XHRcdG5vcm1hbC5zZXQoIDAsIDAsIDEgKTtcblxuXHRcdH1cblxuXHRcdHZlYy5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyAwIF0sIG5vcm1hbCApLm5vcm1hbGl6ZSgpO1xuXG5cdFx0bm9ybWFsc1sgMCBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIDAgXSwgdmVjICk7XG5cdFx0Ymlub3JtYWxzWyAwIF0uY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgMCBdLCBub3JtYWxzWyAwIF0gKTtcblxuXG5cdFx0Ly8gY29tcHV0ZSB0aGUgc2xvd2x5LXZhcnlpbmcgbm9ybWFsIGFuZCBiaW5vcm1hbCB2ZWN0b3JzIGZvciBlYWNoIHNlZ21lbnQgb24gdGhlIGN1cnZlXG5cblx0XHRmb3IgKCBpID0gMTsgaSA8PSBzZWdtZW50czsgaSArKyApIHtcblxuXHRcdFx0bm9ybWFsc1sgaSBdID0gbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXSA9IGJpbm9ybWFsc1sgaSAtIDEgXS5jbG9uZSgpO1xuXG5cdFx0XHR2ZWMuY3Jvc3NWZWN0b3JzKCB0YW5nZW50c1sgaSAtIDEgXSwgdGFuZ2VudHNbIGkgXSApO1xuXG5cdFx0XHRpZiAoIHZlYy5sZW5ndGgoKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdHZlYy5ub3JtYWxpemUoKTtcblxuXHRcdFx0XHR0aGV0YSA9IE1hdGguYWNvcyggTWF0aFV0aWxzLmNsYW1wKCB0YW5nZW50c1sgaSAtIDEgXS5kb3QoIHRhbmdlbnRzWyBpIF0gKSwgLSAxLCAxICkgKTsgLy8gY2xhbXAgZm9yIGZsb2F0aW5nIHB0IGVycm9yc1xuXG5cdFx0XHRcdG5vcm1hbHNbIGkgXS5hcHBseU1hdHJpeDQoIG1hdC5tYWtlUm90YXRpb25BeGlzKCB2ZWMsIHRoZXRhICkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRiaW5vcm1hbHNbIGkgXS5jcm9zc1ZlY3RvcnMoIHRhbmdlbnRzWyBpIF0sIG5vcm1hbHNbIGkgXSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gaWYgdGhlIGN1cnZlIGlzIGNsb3NlZCwgcG9zdHByb2Nlc3MgdGhlIHZlY3RvcnMgc28gdGhlIGZpcnN0IGFuZCBsYXN0IG5vcm1hbCB2ZWN0b3JzIGFyZSB0aGUgc2FtZVxuXG5cdFx0aWYgKCBjbG9zZWQgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoZXRhID0gTWF0aC5hY29zKCBNYXRoVXRpbHMuY2xhbXAoIG5vcm1hbHNbIDAgXS5kb3QoIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSwgLSAxLCAxICkgKTtcblx0XHRcdHRoZXRhIC89IHNlZ21lbnRzO1xuXG5cdFx0XHRpZiAoIHRhbmdlbnRzWyAwIF0uZG90KCB2ZWMuY3Jvc3NWZWN0b3JzKCBub3JtYWxzWyAwIF0sIG5vcm1hbHNbIHNlZ21lbnRzIF0gKSApID4gMCApIHtcblxuXHRcdFx0XHR0aGV0YSA9IC0gdGhldGE7XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaSA9IDE7IGkgPD0gc2VnbWVudHM7IGkgKysgKSB7XG5cblx0XHRcdFx0Ly8gdHdpc3QgYSBsaXR0bGUuLi5cblx0XHRcdFx0bm9ybWFsc1sgaSBdLmFwcGx5TWF0cml4NCggbWF0Lm1ha2VSb3RhdGlvbkF4aXMoIHRhbmdlbnRzWyBpIF0sIHRoZXRhICogaSApICk7XG5cdFx0XHRcdGJpbm9ybWFsc1sgaSBdLmNyb3NzVmVjdG9ycyggdGFuZ2VudHNbIGkgXSwgbm9ybWFsc1sgaSBdICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0YW5nZW50czogdGFuZ2VudHMsXG5cdFx0XHRub3JtYWxzOiBub3JtYWxzLFxuXHRcdFx0Ymlub3JtYWxzOiBiaW5vcm1hbHNcblx0XHR9O1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBzb3VyY2UuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0ge1xuXHRcdFx0bWV0YWRhdGE6IHtcblx0XHRcdFx0dmVyc2lvbjogNC41LFxuXHRcdFx0XHR0eXBlOiAnQ3VydmUnLFxuXHRcdFx0XHRnZW5lcmF0b3I6ICdDdXJ2ZS50b0pTT04nXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdGRhdGEuYXJjTGVuZ3RoRGl2aXNpb25zID0gdGhpcy5hcmNMZW5ndGhEaXZpc2lvbnM7XG5cdFx0ZGF0YS50eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0dGhpcy5hcmNMZW5ndGhEaXZpc2lvbnMgPSBqc29uLmFyY0xlbmd0aERpdmlzaW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBFbGxpcHNlQ3VydmUoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnRWxsaXBzZUN1cnZlJztcblxuXHR0aGlzLmFYID0gYVggfHwgMDtcblx0dGhpcy5hWSA9IGFZIHx8IDA7XG5cblx0dGhpcy54UmFkaXVzID0geFJhZGl1cyB8fCAxO1xuXHR0aGlzLnlSYWRpdXMgPSB5UmFkaXVzIHx8IDE7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IGFTdGFydEFuZ2xlIHx8IDA7XG5cdHRoaXMuYUVuZEFuZ2xlID0gYUVuZEFuZ2xlIHx8IDIgKiBNYXRoLlBJO1xuXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IGFDbG9ja3dpc2UgfHwgZmFsc2U7XG5cblx0dGhpcy5hUm90YXRpb24gPSBhUm90YXRpb24gfHwgMDtcblxufVxuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRWxsaXBzZUN1cnZlO1xuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLmlzRWxsaXBzZUN1cnZlID0gdHJ1ZTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHR2YXIgdHdvUGkgPSBNYXRoLlBJICogMjtcblx0dmFyIGRlbHRhQW5nbGUgPSB0aGlzLmFFbmRBbmdsZSAtIHRoaXMuYVN0YXJ0QW5nbGU7XG5cdHZhciBzYW1lUG9pbnRzID0gTWF0aC5hYnMoIGRlbHRhQW5nbGUgKSA8IE51bWJlci5FUFNJTE9OO1xuXG5cdC8vIGVuc3VyZXMgdGhhdCBkZWx0YUFuZ2xlIGlzIDAgLi4gMiBQSVxuXHR3aGlsZSAoIGRlbHRhQW5nbGUgPCAwICkgZGVsdGFBbmdsZSArPSB0d29QaTtcblx0d2hpbGUgKCBkZWx0YUFuZ2xlID4gdHdvUGkgKSBkZWx0YUFuZ2xlIC09IHR3b1BpO1xuXG5cdGlmICggZGVsdGFBbmdsZSA8IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0aWYgKCBzYW1lUG9pbnRzICkge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gMDtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGRlbHRhQW5nbGUgPSB0d29QaTtcblxuXHRcdH1cblxuXHR9XG5cblx0aWYgKCB0aGlzLmFDbG9ja3dpc2UgPT09IHRydWUgJiYgISBzYW1lUG9pbnRzICkge1xuXG5cdFx0aWYgKCBkZWx0YUFuZ2xlID09PSB0d29QaSApIHtcblxuXHRcdFx0ZGVsdGFBbmdsZSA9IC0gdHdvUGk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRkZWx0YUFuZ2xlID0gZGVsdGFBbmdsZSAtIHR3b1BpO1xuXG5cdFx0fVxuXG5cdH1cblxuXHR2YXIgYW5nbGUgPSB0aGlzLmFTdGFydEFuZ2xlICsgdCAqIGRlbHRhQW5nbGU7XG5cdHZhciB4ID0gdGhpcy5hWCArIHRoaXMueFJhZGl1cyAqIE1hdGguY29zKCBhbmdsZSApO1xuXHR2YXIgeSA9IHRoaXMuYVkgKyB0aGlzLnlSYWRpdXMgKiBNYXRoLnNpbiggYW5nbGUgKTtcblxuXHRpZiAoIHRoaXMuYVJvdGF0aW9uICE9PSAwICkge1xuXG5cdFx0dmFyIGNvcyA9IE1hdGguY29zKCB0aGlzLmFSb3RhdGlvbiApO1xuXHRcdHZhciBzaW4gPSBNYXRoLnNpbiggdGhpcy5hUm90YXRpb24gKTtcblxuXHRcdHZhciB0eCA9IHggLSB0aGlzLmFYO1xuXHRcdHZhciB0eSA9IHkgLSB0aGlzLmFZO1xuXG5cdFx0Ly8gUm90YXRlIHRoZSBwb2ludCBhYm91dCB0aGUgY2VudGVyIG9mIHRoZSBlbGxpcHNlLlxuXHRcdHggPSB0eCAqIGNvcyAtIHR5ICogc2luICsgdGhpcy5hWDtcblx0XHR5ID0gdHggKiBzaW4gKyB0eSAqIGNvcyArIHRoaXMuYVk7XG5cblx0fVxuXG5cdHJldHVybiBwb2ludC5zZXQoIHgsIHkgKTtcblxufTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5hWCA9IHNvdXJjZS5hWDtcblx0dGhpcy5hWSA9IHNvdXJjZS5hWTtcblxuXHR0aGlzLnhSYWRpdXMgPSBzb3VyY2UueFJhZGl1cztcblx0dGhpcy55UmFkaXVzID0gc291cmNlLnlSYWRpdXM7XG5cblx0dGhpcy5hU3RhcnRBbmdsZSA9IHNvdXJjZS5hU3RhcnRBbmdsZTtcblx0dGhpcy5hRW5kQW5nbGUgPSBzb3VyY2UuYUVuZEFuZ2xlO1xuXG5cdHRoaXMuYUNsb2Nrd2lzZSA9IHNvdXJjZS5hQ2xvY2t3aXNlO1xuXG5cdHRoaXMuYVJvdGF0aW9uID0gc291cmNlLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5FbGxpcHNlQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEuYVggPSB0aGlzLmFYO1xuXHRkYXRhLmFZID0gdGhpcy5hWTtcblxuXHRkYXRhLnhSYWRpdXMgPSB0aGlzLnhSYWRpdXM7XG5cdGRhdGEueVJhZGl1cyA9IHRoaXMueVJhZGl1cztcblxuXHRkYXRhLmFTdGFydEFuZ2xlID0gdGhpcy5hU3RhcnRBbmdsZTtcblx0ZGF0YS5hRW5kQW5nbGUgPSB0aGlzLmFFbmRBbmdsZTtcblxuXHRkYXRhLmFDbG9ja3dpc2UgPSB0aGlzLmFDbG9ja3dpc2U7XG5cblx0ZGF0YS5hUm90YXRpb24gPSB0aGlzLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuRWxsaXBzZUN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMuYVggPSBqc29uLmFYO1xuXHR0aGlzLmFZID0ganNvbi5hWTtcblxuXHR0aGlzLnhSYWRpdXMgPSBqc29uLnhSYWRpdXM7XG5cdHRoaXMueVJhZGl1cyA9IGpzb24ueVJhZGl1cztcblxuXHR0aGlzLmFTdGFydEFuZ2xlID0ganNvbi5hU3RhcnRBbmdsZTtcblx0dGhpcy5hRW5kQW5nbGUgPSBqc29uLmFFbmRBbmdsZTtcblxuXHR0aGlzLmFDbG9ja3dpc2UgPSBqc29uLmFDbG9ja3dpc2U7XG5cblx0dGhpcy5hUm90YXRpb24gPSBqc29uLmFSb3RhdGlvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gQXJjQ3VydmUoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRFbGxpcHNlQ3VydmUuY2FsbCggdGhpcywgYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0dGhpcy50eXBlID0gJ0FyY0N1cnZlJztcblxufVxuXG5BcmNDdXJ2ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBFbGxpcHNlQ3VydmUucHJvdG90eXBlICk7XG5BcmNDdXJ2ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBcmNDdXJ2ZTtcblxuQXJjQ3VydmUucHJvdG90eXBlLmlzQXJjQ3VydmUgPSB0cnVlO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSBodHRwczovL2dpdGh1Yi5jb20veno4NVxuICpcbiAqIENlbnRyaXBldGFsIENhdG11bGxSb20gQ3VydmUgLSB3aGljaCBpcyB1c2VmdWwgZm9yIGF2b2lkaW5nXG4gKiBjdXNwcyBhbmQgc2VsZi1pbnRlcnNlY3Rpb25zIGluIG5vbi11bmlmb3JtIGNhdG11bGwgcm9tIGN1cnZlcy5cbiAqIGh0dHA6Ly93d3cuY2VteXVrc2VsLmNvbS9yZXNlYXJjaC9jYXRtdWxscm9tX3BhcmFtL2NhdG11bGxyb20ucGRmXG4gKlxuICogY3VydmUudHlwZSBhY2NlcHRzIGNlbnRyaXBldGFsKGRlZmF1bHQpLCBjaG9yZGFsIGFuZCBjYXRtdWxscm9tXG4gKiBjdXJ2ZS50ZW5zaW9uIGlzIHVzZWQgZm9yIGNhdG11bGxyb20gd2hpY2ggZGVmYXVsdHMgdG8gMC41XG4gKi9cblxuXG4vKlxuQmFzZWQgb24gYW4gb3B0aW1pemVkIGMrKyBzb2x1dGlvbiBpblxuIC0gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NDg5NzM2L2NhdG11bGwtcm9tLWN1cnZlLXdpdGgtbm8tY3VzcHMtYW5kLW5vLXNlbGYtaW50ZXJzZWN0aW9ucy9cbiAtIGh0dHA6Ly9pZGVvbmUuY29tL05vRWJWTVxuXG5UaGlzIEN1YmljUG9seSBjbGFzcyBjb3VsZCBiZSB1c2VkIGZvciByZXVzaW5nIHNvbWUgdmFyaWFibGVzIGFuZCBjYWxjdWxhdGlvbnMsXG5idXQgZm9yIHRocmVlLmpzIGN1cnZlIHVzZSwgaXQgY291bGQgYmUgcG9zc2libGUgaW5saW5lZCBhbmQgZmxhdHRlbiBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIGNhbGxcbndoaWNoIGNhbiBiZSBwbGFjZWQgaW4gQ3VydmVVdGlscy5cbiovXG5cbmZ1bmN0aW9uIEN1YmljUG9seSgpIHtcblxuXHR2YXIgYzAgPSAwLCBjMSA9IDAsIGMyID0gMCwgYzMgPSAwO1xuXG5cdC8qXG5cdCAqIENvbXB1dGUgY29lZmZpY2llbnRzIGZvciBhIGN1YmljIHBvbHlub21pYWxcblx0ICogICBwKHMpID0gYzAgKyBjMSpzICsgYzIqc14yICsgYzMqc14zXG5cdCAqIHN1Y2ggdGhhdFxuXHQgKiAgIHAoMCkgPSB4MCwgcCgxKSA9IHgxXG5cdCAqICBhbmRcblx0ICogICBwJygwKSA9IHQwLCBwJygxKSA9IHQxLlxuXHQgKi9cblx0ZnVuY3Rpb24gaW5pdCggeDAsIHgxLCB0MCwgdDEgKSB7XG5cblx0XHRjMCA9IHgwO1xuXHRcdGMxID0gdDA7XG5cdFx0YzIgPSAtIDMgKiB4MCArIDMgKiB4MSAtIDIgKiB0MCAtIHQxO1xuXHRcdGMzID0gMiAqIHgwIC0gMiAqIHgxICsgdDAgKyB0MTtcblxuXHR9XG5cblx0cmV0dXJuIHtcblxuXHRcdGluaXRDYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCB0ZW5zaW9uICkge1xuXG5cdFx0XHRpbml0KCB4MSwgeDIsIHRlbnNpb24gKiAoIHgyIC0geDAgKSwgdGVuc2lvbiAqICggeDMgLSB4MSApICk7XG5cblx0XHR9LFxuXG5cdFx0aW5pdE5vbnVuaWZvcm1DYXRtdWxsUm9tOiBmdW5jdGlvbiAoIHgwLCB4MSwgeDIsIHgzLCBkdDAsIGR0MSwgZHQyICkge1xuXG5cdFx0XHQvLyBjb21wdXRlIHRhbmdlbnRzIHdoZW4gcGFyYW1ldGVyaXplZCBpbiBbdDEsdDJdXG5cdFx0XHR2YXIgdDEgPSAoIHgxIC0geDAgKSAvIGR0MCAtICggeDIgLSB4MCApIC8gKCBkdDAgKyBkdDEgKSArICggeDIgLSB4MSApIC8gZHQxO1xuXHRcdFx0dmFyIHQyID0gKCB4MiAtIHgxICkgLyBkdDEgLSAoIHgzIC0geDEgKSAvICggZHQxICsgZHQyICkgKyAoIHgzIC0geDIgKSAvIGR0MjtcblxuXHRcdFx0Ly8gcmVzY2FsZSB0YW5nZW50cyBmb3IgcGFyYW1ldHJpemF0aW9uIGluIFswLDFdXG5cdFx0XHR0MSAqPSBkdDE7XG5cdFx0XHR0MiAqPSBkdDE7XG5cblx0XHRcdGluaXQoIHgxLCB4MiwgdDEsIHQyICk7XG5cblx0XHR9LFxuXG5cdFx0Y2FsYzogZnVuY3Rpb24gKCB0ICkge1xuXG5cdFx0XHR2YXIgdDIgPSB0ICogdDtcblx0XHRcdHZhciB0MyA9IHQyICogdDtcblx0XHRcdHJldHVybiBjMCArIGMxICogdCArIGMyICogdDIgKyBjMyAqIHQzO1xuXG5cdFx0fVxuXG5cdH07XG5cbn1cblxuLy9cblxudmFyIHRtcCA9IG5ldyBWZWN0b3IzKCk7XG52YXIgcHggPSBuZXcgQ3ViaWNQb2x5KCksIHB5ID0gbmV3IEN1YmljUG9seSgpLCBweiA9IG5ldyBDdWJpY1BvbHkoKTtcblxuZnVuY3Rpb24gQ2F0bXVsbFJvbUN1cnZlMyggcG9pbnRzLCBjbG9zZWQsIGN1cnZlVHlwZSwgdGVuc2lvbiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0NhdG11bGxSb21DdXJ2ZTMnO1xuXG5cdHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuXHR0aGlzLmNsb3NlZCA9IGNsb3NlZCB8fCBmYWxzZTtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBjdXJ2ZVR5cGUgfHwgJ2NlbnRyaXBldGFsJztcblx0dGhpcy50ZW5zaW9uID0gdGVuc2lvbiB8fCAwLjU7XG5cbn1cblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkNhdG11bGxSb21DdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2F0bXVsbFJvbUN1cnZlMztcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuaXNDYXRtdWxsUm9tQ3VydmUzID0gdHJ1ZTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHBvaW50cyA9IHRoaXMucG9pbnRzO1xuXHR2YXIgbCA9IHBvaW50cy5sZW5ndGg7XG5cblx0dmFyIHAgPSAoIGwgLSAoIHRoaXMuY2xvc2VkID8gMCA6IDEgKSApICogdDtcblx0dmFyIGludFBvaW50ID0gTWF0aC5mbG9vciggcCApO1xuXHR2YXIgd2VpZ2h0ID0gcCAtIGludFBvaW50O1xuXG5cdGlmICggdGhpcy5jbG9zZWQgKSB7XG5cblx0XHRpbnRQb2ludCArPSBpbnRQb2ludCA+IDAgPyAwIDogKCBNYXRoLmZsb29yKCBNYXRoLmFicyggaW50UG9pbnQgKSAvIGwgKSArIDEgKSAqIGw7XG5cblx0fSBlbHNlIGlmICggd2VpZ2h0ID09PSAwICYmIGludFBvaW50ID09PSBsIC0gMSApIHtcblxuXHRcdGludFBvaW50ID0gbCAtIDI7XG5cdFx0d2VpZ2h0ID0gMTtcblxuXHR9XG5cblx0dmFyIHAwLCBwMSwgcDIsIHAzOyAvLyA0IHBvaW50c1xuXG5cdGlmICggdGhpcy5jbG9zZWQgfHwgaW50UG9pbnQgPiAwICkge1xuXG5cdFx0cDAgPSBwb2ludHNbICggaW50UG9pbnQgLSAxICkgJSBsIF07XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIGV4dHJhcG9sYXRlIGZpcnN0IHBvaW50XG5cdFx0dG1wLnN1YlZlY3RvcnMoIHBvaW50c1sgMCBdLCBwb2ludHNbIDEgXSApLmFkZCggcG9pbnRzWyAwIF0gKTtcblx0XHRwMCA9IHRtcDtcblxuXHR9XG5cblx0cDEgPSBwb2ludHNbIGludFBvaW50ICUgbCBdO1xuXHRwMiA9IHBvaW50c1sgKCBpbnRQb2ludCArIDEgKSAlIGwgXTtcblxuXHRpZiAoIHRoaXMuY2xvc2VkIHx8IGludFBvaW50ICsgMiA8IGwgKSB7XG5cblx0XHRwMyA9IHBvaW50c1sgKCBpbnRQb2ludCArIDIgKSAlIGwgXTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gZXh0cmFwb2xhdGUgbGFzdCBwb2ludFxuXHRcdHRtcC5zdWJWZWN0b3JzKCBwb2ludHNbIGwgLSAxIF0sIHBvaW50c1sgbCAtIDIgXSApLmFkZCggcG9pbnRzWyBsIC0gMSBdICk7XG5cdFx0cDMgPSB0bXA7XG5cblx0fVxuXG5cdGlmICggdGhpcy5jdXJ2ZVR5cGUgPT09ICdjZW50cmlwZXRhbCcgfHwgdGhpcy5jdXJ2ZVR5cGUgPT09ICdjaG9yZGFsJyApIHtcblxuXHRcdC8vIGluaXQgQ2VudHJpcGV0YWwgLyBDaG9yZGFsIENhdG11bGwtUm9tXG5cdFx0dmFyIHBvdyA9IHRoaXMuY3VydmVUeXBlID09PSAnY2hvcmRhbCcgPyAwLjUgOiAwLjI1O1xuXHRcdHZhciBkdDAgPSBNYXRoLnBvdyggcDAuZGlzdGFuY2VUb1NxdWFyZWQoIHAxICksIHBvdyApO1xuXHRcdHZhciBkdDEgPSBNYXRoLnBvdyggcDEuZGlzdGFuY2VUb1NxdWFyZWQoIHAyICksIHBvdyApO1xuXHRcdHZhciBkdDIgPSBNYXRoLnBvdyggcDIuZGlzdGFuY2VUb1NxdWFyZWQoIHAzICksIHBvdyApO1xuXG5cdFx0Ly8gc2FmZXR5IGNoZWNrIGZvciByZXBlYXRlZCBwb2ludHNcblx0XHRpZiAoIGR0MSA8IDFlLTQgKSBkdDEgPSAxLjA7XG5cdFx0aWYgKCBkdDAgPCAxZS00ICkgZHQwID0gZHQxO1xuXHRcdGlmICggZHQyIDwgMWUtNCApIGR0MiA9IGR0MTtcblxuXHRcdHB4LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdHB5LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueSwgcDEueSwgcDIueSwgcDMueSwgZHQwLCBkdDEsIGR0MiApO1xuXHRcdHB6LmluaXROb251bmlmb3JtQ2F0bXVsbFJvbSggcDAueiwgcDEueiwgcDIueiwgcDMueiwgZHQwLCBkdDEsIGR0MiApO1xuXG5cdH0gZWxzZSBpZiAoIHRoaXMuY3VydmVUeXBlID09PSAnY2F0bXVsbHJvbScgKSB7XG5cblx0XHRweC5pbml0Q2F0bXVsbFJvbSggcDAueCwgcDEueCwgcDIueCwgcDMueCwgdGhpcy50ZW5zaW9uICk7XG5cdFx0cHkuaW5pdENhdG11bGxSb20oIHAwLnksIHAxLnksIHAyLnksIHAzLnksIHRoaXMudGVuc2lvbiApO1xuXHRcdHB6LmluaXRDYXRtdWxsUm9tKCBwMC56LCBwMS56LCBwMi56LCBwMy56LCB0aGlzLnRlbnNpb24gKTtcblxuXHR9XG5cblx0cG9pbnQuc2V0KFxuXHRcdHB4LmNhbGMoIHdlaWdodCApLFxuXHRcdHB5LmNhbGMoIHdlaWdodCApLFxuXHRcdHB6LmNhbGMoIHdlaWdodCApXG5cdCk7XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSBzb3VyY2UucG9pbnRzWyBpIF07XG5cblx0XHR0aGlzLnBvaW50cy5wdXNoKCBwb2ludC5jbG9uZSgpICk7XG5cblx0fVxuXG5cdHRoaXMuY2xvc2VkID0gc291cmNlLmNsb3NlZDtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBzb3VyY2UuY3VydmVUeXBlO1xuXHR0aGlzLnRlbnNpb24gPSBzb3VyY2UudGVuc2lvbjtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0gdGhpcy5wb2ludHNbIGkgXTtcblx0XHRkYXRhLnBvaW50cy5wdXNoKCBwb2ludC50b0FycmF5KCkgKTtcblxuXHR9XG5cblx0ZGF0YS5jbG9zZWQgPSB0aGlzLmNsb3NlZDtcblx0ZGF0YS5jdXJ2ZVR5cGUgPSB0aGlzLmN1cnZlVHlwZTtcblx0ZGF0YS50ZW5zaW9uID0gdGhpcy50ZW5zaW9uO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5DYXRtdWxsUm9tQ3VydmUzLnByb3RvdHlwZS5mcm9tSlNPTiA9IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdHRoaXMucG9pbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IGpzb24ucG9pbnRzWyBpIF07XG5cdFx0dGhpcy5wb2ludHMucHVzaCggbmV3IFZlY3RvcjMoKS5mcm9tQXJyYXkoIHBvaW50ICkgKTtcblxuXHR9XG5cblx0dGhpcy5jbG9zZWQgPSBqc29uLmNsb3NlZDtcblx0dGhpcy5jdXJ2ZVR5cGUgPSBqc29uLmN1cnZlVHlwZTtcblx0dGhpcy50ZW5zaW9uID0ganNvbi50ZW5zaW9uO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqXG4gKiBCZXppZXIgQ3VydmVzIGZvcm11bGFzIG9idGFpbmVkIGZyb21cbiAqIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQsOpemllcl9jdXJ2ZVxuICovXG5cbmZ1bmN0aW9uIENhdG11bGxSb20oIHQsIHAwLCBwMSwgcDIsIHAzICkge1xuXG5cdHZhciB2MCA9ICggcDIgLSBwMCApICogMC41O1xuXHR2YXIgdjEgPSAoIHAzIC0gcDEgKSAqIDAuNTtcblx0dmFyIHQyID0gdCAqIHQ7XG5cdHZhciB0MyA9IHQgKiB0Mjtcblx0cmV0dXJuICggMiAqIHAxIC0gMiAqIHAyICsgdjAgKyB2MSApICogdDMgKyAoIC0gMyAqIHAxICsgMyAqIHAyIC0gMiAqIHYwIC0gdjEgKSAqIHQyICsgdjAgKiB0ICsgcDE7XG5cbn1cblxuLy9cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyUDAoIHQsIHAgKSB7XG5cblx0dmFyIGsgPSAxIC0gdDtcblx0cmV0dXJuIGsgKiBrICogcDtcblxufVxuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJQMSggdCwgcCApIHtcblxuXHRyZXR1cm4gMiAqICggMSAtIHQgKSAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIFF1YWRyYXRpY0JlemllclAyKCB0LCBwICkge1xuXG5cdHJldHVybiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyKCB0LCBwMCwgcDEsIHAyICkge1xuXG5cdHJldHVybiBRdWFkcmF0aWNCZXppZXJQMCggdCwgcDAgKSArIFF1YWRyYXRpY0JlemllclAxKCB0LCBwMSApICtcblx0XHRRdWFkcmF0aWNCZXppZXJQMiggdCwgcDIgKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBDdWJpY0JlemllclAwKCB0LCBwICkge1xuXG5cdHZhciBrID0gMSAtIHQ7XG5cdHJldHVybiBrICogayAqIGsgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDEoIHQsIHAgKSB7XG5cblx0dmFyIGsgPSAxIC0gdDtcblx0cmV0dXJuIDMgKiBrICogayAqIHQgKiBwO1xuXG59XG5cbmZ1bmN0aW9uIEN1YmljQmV6aWVyUDIoIHQsIHAgKSB7XG5cblx0cmV0dXJuIDMgKiAoIDEgLSB0ICkgKiB0ICogdCAqIHA7XG5cbn1cblxuZnVuY3Rpb24gQ3ViaWNCZXppZXJQMyggdCwgcCApIHtcblxuXHRyZXR1cm4gdCAqIHQgKiB0ICogcDtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllciggdCwgcDAsIHAxLCBwMiwgcDMgKSB7XG5cblx0cmV0dXJuIEN1YmljQmV6aWVyUDAoIHQsIHAwICkgKyBDdWJpY0JlemllclAxKCB0LCBwMSApICsgQ3ViaWNCZXppZXJQMiggdCwgcDIgKSArXG5cdFx0Q3ViaWNCZXppZXJQMyggdCwgcDMgKTtcblxufVxuXG5mdW5jdGlvbiBDdWJpY0JlemllckN1cnZlKCB2MCwgdjEsIHYyLCB2MyApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ0N1YmljQmV6aWVyQ3VydmUnO1xuXG5cdHRoaXMudjAgPSB2MCB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjMgPSB2MyB8fCBuZXcgVmVjdG9yMigpO1xuXG59XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DdWJpY0JlemllckN1cnZlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEN1YmljQmV6aWVyQ3VydmU7XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmlzQ3ViaWNCZXppZXJDdXJ2ZSA9IHRydWU7XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyLCB2MyA9IHRoaXMudjM7XG5cblx0cG9pbnQuc2V0KFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC54LCB2MS54LCB2Mi54LCB2My54ICksXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnksIHYzLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjAuY29weSggc291cmNlLnYwICk7XG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cdHRoaXMudjMuY29weSggc291cmNlLnYzICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYwLmZyb21BcnJheSgganNvbi52MCApO1xuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXHR0aGlzLnYzLmZyb21BcnJheSgganNvbi52MyApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBDdWJpY0JlemllckN1cnZlMyggdjAsIHYxLCB2MiwgdjMgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdWJpY0JlemllckN1cnZlMyc7XG5cblx0dGhpcy52MCA9IHYwIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMygpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MyA9IHYzIHx8IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDdWJpY0JlemllckN1cnZlMztcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmlzQ3ViaWNCZXppZXJDdXJ2ZTMgPSB0cnVlO1xuXG5DdWJpY0JlemllckN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0dmFyIHYwID0gdGhpcy52MCwgdjEgPSB0aGlzLnYxLCB2MiA9IHRoaXMudjIsIHYzID0gdGhpcy52MztcblxuXHRwb2ludC5zZXQoXG5cdFx0Q3ViaWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLngsIHYzLnggKSxcblx0XHRDdWJpY0JlemllciggdCwgdjAueSwgdjEueSwgdjIueSwgdjMueSApLFxuXHRcdEN1YmljQmV6aWVyKCB0LCB2MC56LCB2MS56LCB2Mi56LCB2My56IClcblx0KTtcblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbkN1YmljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblx0dGhpcy52My5jb3B5KCBzb3VyY2UudjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgZGF0YSA9IEN1cnZlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdGRhdGEudjAgPSB0aGlzLnYwLnRvQXJyYXkoKTtcblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cdGRhdGEudjMgPSB0aGlzLnYzLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuQ3ViaWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblx0dGhpcy52My5mcm9tQXJyYXkoIGpzb24udjMgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gTGluZUN1cnZlKCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lQ3VydmUnO1xuXG5cdHRoaXMudjEgPSB2MSB8fCBuZXcgVmVjdG9yMigpO1xuXHR0aGlzLnYyID0gdjIgfHwgbmV3IFZlY3RvcjIoKTtcblxufVxuXG5MaW5lQ3VydmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ3VydmUucHJvdG90eXBlICk7XG5MaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUN1cnZlO1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmlzTGluZUN1cnZlID0gdHJ1ZTtcblxuTGluZUN1cnZlLnByb3RvdHlwZS5nZXRQb2ludCA9IGZ1bmN0aW9uICggdCwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0dmFyIHBvaW50ID0gb3B0aW9uYWxUYXJnZXQgfHwgbmV3IFZlY3RvcjIoKTtcblxuXHRpZiAoIHQgPT09IDEgKSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHBvaW50LmNvcHkoIHRoaXMudjIgKS5zdWIoIHRoaXMudjEgKTtcblx0XHRwb2ludC5tdWx0aXBseVNjYWxhciggdCApLmFkZCggdGhpcy52MSApO1xuXG5cdH1cblxuXHRyZXR1cm4gcG9pbnQ7XG5cbn07XG5cbi8vIExpbmUgY3VydmUgaXMgbGluZWFyLCBzbyB3ZSBjYW4gb3ZlcndyaXRlIGRlZmF1bHQgZ2V0UG9pbnRBdFxuXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50QXQgPSBmdW5jdGlvbiAoIHUsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHJldHVybiB0aGlzLmdldFBvaW50KCB1LCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5MaW5lQ3VydmUucHJvdG90eXBlLmdldFRhbmdlbnQgPSBmdW5jdGlvbiAoIC8qIHQgKi8gKSB7XG5cblx0dmFyIHRhbmdlbnQgPSB0aGlzLnYyLmNsb25lKCkuc3ViKCB0aGlzLnYxICk7XG5cblx0cmV0dXJuIHRhbmdlbnQubm9ybWFsaXplKCk7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdHRoaXMudjEuY29weSggc291cmNlLnYxICk7XG5cdHRoaXMudjIuY29weSggc291cmNlLnYyICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MSA9IHRoaXMudjEudG9BcnJheSgpO1xuXHRkYXRhLnYyID0gdGhpcy52Mi50b0FycmF5KCk7XG5cblx0cmV0dXJuIGRhdGE7XG5cbn07XG5cbkxpbmVDdXJ2ZS5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBMaW5lQ3VydmUzKCB2MSwgdjIgKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaW5lQ3VydmUzJztcblxuXHR0aGlzLnYxID0gdjEgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MiA9IHYyIHx8IG5ldyBWZWN0b3IzKCk7XG5cbn1cblxuTGluZUN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGluZUN1cnZlMztcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuaXNMaW5lQ3VydmUzID0gdHJ1ZTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnQgPSBmdW5jdGlvbiAoIHQsIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdHZhciBwb2ludCA9IG9wdGlvbmFsVGFyZ2V0IHx8IG5ldyBWZWN0b3IzKCk7XG5cblx0aWYgKCB0ID09PSAxICkge1xuXG5cdFx0cG9pbnQuY29weSggdGhpcy52MiApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRwb2ludC5jb3B5KCB0aGlzLnYyICkuc3ViKCB0aGlzLnYxICk7XG5cdFx0cG9pbnQubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMudjEgKTtcblxuXHR9XG5cblx0cmV0dXJuIHBvaW50O1xuXG59O1xuXG4vLyBMaW5lIGN1cnZlIGlzIGxpbmVhciwgc28gd2UgY2FuIG92ZXJ3cml0ZSBkZWZhdWx0IGdldFBvaW50QXRcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZ2V0UG9pbnRBdCA9IGZ1bmN0aW9uICggdSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0cmV0dXJuIHRoaXMuZ2V0UG9pbnQoIHUsIG9wdGlvbmFsVGFyZ2V0ICk7XG5cbn07XG5cbkxpbmVDdXJ2ZTMucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5MaW5lQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuTGluZUN1cnZlMy5wcm90b3R5cGUuZnJvbUpTT04gPSBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHR0aGlzLnYxLmZyb21BcnJheSgganNvbi52MSApO1xuXHR0aGlzLnYyLmZyb21BcnJheSgganNvbi52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5mdW5jdGlvbiBRdWFkcmF0aWNCZXppZXJDdXJ2ZSggdjAsIHYxLCB2MiApIHtcblxuXHRDdXJ2ZS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ1F1YWRyYXRpY0JlemllckN1cnZlJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjIoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IyKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMigpO1xuXG59XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUXVhZHJhdGljQmV6aWVyQ3VydmU7XG5cblF1YWRyYXRpY0JlemllckN1cnZlLnByb3RvdHlwZS5pc1F1YWRyYXRpY0JlemllckN1cnZlID0gdHJ1ZTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdHBvaW50LnNldChcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnYwLmNvcHkoIHNvdXJjZS52MCApO1xuXHR0aGlzLnYxLmNvcHkoIHNvdXJjZS52MSApO1xuXHR0aGlzLnYyLmNvcHkoIHNvdXJjZS52MiApO1xuXG5cdHJldHVybiB0aGlzO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0ZGF0YS52MCA9IHRoaXMudjAudG9BcnJheSgpO1xuXHRkYXRhLnYxID0gdGhpcy52MS50b0FycmF5KCk7XG5cdGRhdGEudjIgPSB0aGlzLnYyLnRvQXJyYXkoKTtcblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gUXVhZHJhdGljQmV6aWVyQ3VydmUzKCB2MCwgdjEsIHYyICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUXVhZHJhdGljQmV6aWVyQ3VydmUzJztcblxuXHR0aGlzLnYwID0gdjAgfHwgbmV3IFZlY3RvcjMoKTtcblx0dGhpcy52MSA9IHYxIHx8IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMudjIgPSB2MiB8fCBuZXcgVmVjdG9yMygpO1xuXG59XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDdXJ2ZS5wcm90b3R5cGUgKTtcblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM7XG5cblF1YWRyYXRpY0JlemllckN1cnZlMy5wcm90b3R5cGUuaXNRdWFkcmF0aWNCZXppZXJDdXJ2ZTMgPSB0cnVlO1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMygpO1xuXG5cdHZhciB2MCA9IHRoaXMudjAsIHYxID0gdGhpcy52MSwgdjIgPSB0aGlzLnYyO1xuXG5cdHBvaW50LnNldChcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLngsIHYxLngsIHYyLnggKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnksIHYxLnksIHYyLnkgKSxcblx0XHRRdWFkcmF0aWNCZXppZXIoIHQsIHYwLnosIHYxLnosIHYyLnogKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0Q3VydmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0dGhpcy52MC5jb3B5KCBzb3VyY2UudjAgKTtcblx0dGhpcy52MS5jb3B5KCBzb3VyY2UudjEgKTtcblx0dGhpcy52Mi5jb3B5KCBzb3VyY2UudjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuUXVhZHJhdGljQmV6aWVyQ3VydmUzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnYwID0gdGhpcy52MC50b0FycmF5KCk7XG5cdGRhdGEudjEgPSB0aGlzLnYxLnRvQXJyYXkoKTtcblx0ZGF0YS52MiA9IHRoaXMudjIudG9BcnJheSgpO1xuXG5cdHJldHVybiBkYXRhO1xuXG59O1xuXG5RdWFkcmF0aWNCZXppZXJDdXJ2ZTMucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy52MC5mcm9tQXJyYXkoIGpzb24udjAgKTtcblx0dGhpcy52MS5mcm9tQXJyYXkoIGpzb24udjEgKTtcblx0dGhpcy52Mi5mcm9tQXJyYXkoIGpzb24udjIgKTtcblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuZnVuY3Rpb24gU3BsaW5lQ3VydmUoIHBvaW50cyAvKiBhcnJheSBvZiBWZWN0b3IyICovICkge1xuXG5cdEN1cnZlLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnU3BsaW5lQ3VydmUnO1xuXG5cdHRoaXMucG9pbnRzID0gcG9pbnRzIHx8IFtdO1xuXG59XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BsaW5lQ3VydmU7XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS5pc1NwbGluZUN1cnZlID0gdHJ1ZTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmdldFBvaW50ID0gZnVuY3Rpb24gKCB0LCBvcHRpb25hbFRhcmdldCApIHtcblxuXHR2YXIgcG9pbnQgPSBvcHRpb25hbFRhcmdldCB8fCBuZXcgVmVjdG9yMigpO1xuXG5cdHZhciBwb2ludHMgPSB0aGlzLnBvaW50cztcblx0dmFyIHAgPSAoIHBvaW50cy5sZW5ndGggLSAxICkgKiB0O1xuXG5cdHZhciBpbnRQb2ludCA9IE1hdGguZmxvb3IoIHAgKTtcblx0dmFyIHdlaWdodCA9IHAgLSBpbnRQb2ludDtcblxuXHR2YXIgcDAgPSBwb2ludHNbIGludFBvaW50ID09PSAwID8gaW50UG9pbnQgOiBpbnRQb2ludCAtIDEgXTtcblx0dmFyIHAxID0gcG9pbnRzWyBpbnRQb2ludCBdO1xuXHR2YXIgcDIgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDIgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMSBdO1xuXHR2YXIgcDMgPSBwb2ludHNbIGludFBvaW50ID4gcG9pbnRzLmxlbmd0aCAtIDMgPyBwb2ludHMubGVuZ3RoIC0gMSA6IGludFBvaW50ICsgMiBdO1xuXG5cdHBvaW50LnNldChcblx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLngsIHAxLngsIHAyLngsIHAzLnggKSxcblx0XHRDYXRtdWxsUm9tKCB3ZWlnaHQsIHAwLnksIHAxLnksIHAyLnksIHAzLnkgKVxuXHQpO1xuXG5cdHJldHVybiBwb2ludDtcblxufTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHNvdXJjZS5wb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdHZhciBwb2ludCA9IHNvdXJjZS5wb2ludHNbIGkgXTtcblxuXHRcdHRoaXMucG9pbnRzLnB1c2goIHBvaW50LmNsb25lKCkgKTtcblxuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cblNwbGluZUN1cnZlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGRhdGEgPSBDdXJ2ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRkYXRhLnBvaW50cyA9IFtdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgbCA9IHRoaXMucG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHR2YXIgcG9pbnQgPSB0aGlzLnBvaW50c1sgaSBdO1xuXHRcdGRhdGEucG9pbnRzLnB1c2goIHBvaW50LnRvQXJyYXkoKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcblxufTtcblxuU3BsaW5lQ3VydmUucHJvdG90eXBlLmZyb21KU09OID0gZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0dGhpcy5wb2ludHMgPSBbXTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLnBvaW50cy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0dmFyIHBvaW50ID0ganNvbi5wb2ludHNbIGkgXTtcblx0XHR0aGlzLnBvaW50cy5wdXNoKCBuZXcgVmVjdG9yMigpLmZyb21BcnJheSggcG9pbnQgKSApO1xuXG5cdH1cblxuXHRyZXR1cm4gdGhpcztcblxufTtcblxuXG5cbnZhciBDdXJ2ZXMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0QXJjQ3VydmU6IEFyY0N1cnZlLFxuXHRDYXRtdWxsUm9tQ3VydmUzOiBDYXRtdWxsUm9tQ3VydmUzLFxuXHRDdWJpY0JlemllckN1cnZlOiBDdWJpY0JlemllckN1cnZlLFxuXHRDdWJpY0JlemllckN1cnZlMzogQ3ViaWNCZXppZXJDdXJ2ZTMsXG5cdEVsbGlwc2VDdXJ2ZTogRWxsaXBzZUN1cnZlLFxuXHRMaW5lQ3VydmU6IExpbmVDdXJ2ZSxcblx0TGluZUN1cnZlMzogTGluZUN1cnZlMyxcblx0UXVhZHJhdGljQmV6aWVyQ3VydmU6IFF1YWRyYXRpY0JlemllckN1cnZlLFxuXHRRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMyxcblx0U3BsaW5lQ3VydmU6IFNwbGluZUN1cnZlXG59KTtcblxuLyoqXG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vd3d3LmxhYjRnYW1lcy5uZXQveno4NS9ibG9nXG4gKlxuICoqL1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqXHRDdXJ2ZWQgUGF0aCAtIGEgY3VydmUgcGF0aCBpcyBzaW1wbHkgYSBhcnJheSBvZiBjb25uZWN0ZWRcbiAqICBjdXJ2ZXMsIGJ1dCByZXRhaW5zIHRoZSBhcGkgb2YgYSBjdXJ2ZVxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBDdXJ2ZVBhdGgoKSB7XG5cblx0Q3VydmUuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdDdXJ2ZVBhdGgnO1xuXG5cdHRoaXMuY3VydmVzID0gW107XG5cdHRoaXMuYXV0b0Nsb3NlID0gZmFsc2U7IC8vIEF1dG9tYXRpY2FsbHkgY2xvc2VzIHRoZSBwYXRoXG5cbn1cblxuQ3VydmVQYXRoLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEN1cnZlUGF0aCxcblxuXHRhZGQ6IGZ1bmN0aW9uICggY3VydmUgKSB7XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdH0sXG5cblx0Y2xvc2VQYXRoOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBBZGQgYSBsaW5lIGN1cnZlIGlmIHN0YXJ0IGFuZCBlbmQgb2YgbGluZXMgYXJlIG5vdCBjb25uZWN0ZWRcblx0XHR2YXIgc3RhcnRQb2ludCA9IHRoaXMuY3VydmVzWyAwIF0uZ2V0UG9pbnQoIDAgKTtcblx0XHR2YXIgZW5kUG9pbnQgPSB0aGlzLmN1cnZlc1sgdGhpcy5jdXJ2ZXMubGVuZ3RoIC0gMSBdLmdldFBvaW50KCAxICk7XG5cblx0XHRpZiAoICEgc3RhcnRQb2ludC5lcXVhbHMoIGVuZFBvaW50ICkgKSB7XG5cblx0XHRcdHRoaXMuY3VydmVzLnB1c2goIG5ldyBMaW5lQ3VydmUoIGVuZFBvaW50LCBzdGFydFBvaW50ICkgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIFRvIGdldCBhY2N1cmF0ZSBwb2ludCB3aXRoIHJlZmVyZW5jZSB0b1xuXHQvLyBlbnRpcmUgcGF0aCBkaXN0YW5jZSBhdCB0aW1lIHQsXG5cdC8vIGZvbGxvd2luZyBoYXMgdG8gYmUgZG9uZTpcblxuXHQvLyAxLiBMZW5ndGggb2YgZWFjaCBzdWIgcGF0aCBoYXZlIHRvIGJlIGtub3duXG5cdC8vIDIuIExvY2F0ZSBhbmQgaWRlbnRpZnkgdHlwZSBvZiBjdXJ2ZVxuXHQvLyAzLiBHZXQgdCBmb3IgdGhlIGN1cnZlXG5cdC8vIDQuIFJldHVybiBjdXJ2ZS5nZXRQb2ludEF0KHQnKVxuXG5cdGdldFBvaW50OiBmdW5jdGlvbiAoIHQgKSB7XG5cblx0XHR2YXIgZCA9IHQgKiB0aGlzLmdldExlbmd0aCgpO1xuXHRcdHZhciBjdXJ2ZUxlbmd0aHMgPSB0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXHRcdHZhciBpID0gMDtcblxuXHRcdC8vIFRvIHRoaW5rIGFib3V0IGJvdW5kYXJpZXMgcG9pbnRzLlxuXG5cdFx0d2hpbGUgKCBpIDwgY3VydmVMZW5ndGhzLmxlbmd0aCApIHtcblxuXHRcdFx0aWYgKCBjdXJ2ZUxlbmd0aHNbIGkgXSA+PSBkICkge1xuXG5cdFx0XHRcdHZhciBkaWZmID0gY3VydmVMZW5ndGhzWyBpIF0gLSBkO1xuXHRcdFx0XHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xuXG5cdFx0XHRcdHZhciBzZWdtZW50TGVuZ3RoID0gY3VydmUuZ2V0TGVuZ3RoKCk7XG5cdFx0XHRcdHZhciB1ID0gc2VnbWVudExlbmd0aCA9PT0gMCA/IDAgOiAxIC0gZGlmZiAvIHNlZ21lbnRMZW5ndGg7XG5cblx0XHRcdFx0cmV0dXJuIGN1cnZlLmdldFBvaW50QXQoIHUgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpICsrO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cblx0XHQvLyBsb29wIHdoZXJlIHN1bSAhPSAwLCBzdW0gPiBkICwgc3VtKzEgPGRcblxuXHR9LFxuXG5cdC8vIFdlIGNhbm5vdCB1c2UgdGhlIGRlZmF1bHQgVEhSRUUuQ3VydmUgZ2V0UG9pbnQoKSB3aXRoIGdldExlbmd0aCgpIGJlY2F1c2UgaW5cblx0Ly8gVEhSRUUuQ3VydmUsIGdldExlbmd0aCgpIGRlcGVuZHMgb24gZ2V0UG9pbnQoKSBidXQgaW4gVEhSRUUuQ3VydmVQYXRoXG5cdC8vIGdldFBvaW50KCkgZGVwZW5kcyBvbiBnZXRMZW5ndGhcblxuXHRnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBsZW5zID0gdGhpcy5nZXRDdXJ2ZUxlbmd0aHMoKTtcblx0XHRyZXR1cm4gbGVuc1sgbGVucy5sZW5ndGggLSAxIF07XG5cblx0fSxcblxuXHQvLyBjYWNoZUxlbmd0aHMgbXVzdCBiZSByZWNhbGN1bGF0ZWQuXG5cdHVwZGF0ZUFyY0xlbmd0aHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbnVsbDtcblx0XHR0aGlzLmdldEN1cnZlTGVuZ3RocygpO1xuXG5cdH0sXG5cblx0Ly8gQ29tcHV0ZSBsZW5ndGhzIGFuZCBjYWNoZSB0aGVtXG5cdC8vIFdlIGNhbm5vdCBvdmVyd3JpdGUgZ2V0TGVuZ3RocygpIGJlY2F1c2UgVXRvVCBtYXBwaW5nIHVzZXMgaXQuXG5cblx0Z2V0Q3VydmVMZW5ndGhzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyBXZSB1c2UgY2FjaGUgdmFsdWVzIGlmIGN1cnZlcyBhbmQgY2FjaGUgYXJyYXkgYXJlIHNhbWUgbGVuZ3RoXG5cblx0XHRpZiAoIHRoaXMuY2FjaGVMZW5ndGhzICYmIHRoaXMuY2FjaGVMZW5ndGhzLmxlbmd0aCA9PT0gdGhpcy5jdXJ2ZXMubGVuZ3RoICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZUxlbmd0aHM7XG5cblx0XHR9XG5cblx0XHQvLyBHZXQgbGVuZ3RoIG9mIHN1Yi1jdXJ2ZVxuXHRcdC8vIFB1c2ggc3VtcyBpbnRvIGNhY2hlZCBhcnJheVxuXG5cdFx0dmFyIGxlbmd0aHMgPSBbXSwgc3VtcyA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRzdW1zICs9IHRoaXMuY3VydmVzWyBpIF0uZ2V0TGVuZ3RoKCk7XG5cdFx0XHRsZW5ndGhzLnB1c2goIHN1bXMgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY2FjaGVMZW5ndGhzID0gbGVuZ3RocztcblxuXHRcdHJldHVybiBsZW5ndGhzO1xuXG5cdH0sXG5cblx0Z2V0U3BhY2VkUG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGlmICggZGl2aXNpb25zID09PSB1bmRlZmluZWQgKSBkaXZpc2lvbnMgPSA0MDtcblxuXHRcdHZhciBwb2ludHMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8PSBkaXZpc2lvbnM7IGkgKysgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCB0aGlzLmdldFBvaW50KCBpIC8gZGl2aXNpb25zICkgKTtcblxuXHRcdH1cblxuXHRcdGlmICggdGhpcy5hdXRvQ2xvc2UgKSB7XG5cblx0XHRcdHBvaW50cy5wdXNoKCBwb2ludHNbIDAgXSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHBvaW50cztcblxuXHR9LFxuXG5cdGdldFBvaW50czogZnVuY3Rpb24gKCBkaXZpc2lvbnMgKSB7XG5cblx0XHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTI7XG5cblx0XHR2YXIgcG9pbnRzID0gW10sIGxhc3Q7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGN1cnZlcyA9IHRoaXMuY3VydmVzOyBpIDwgY3VydmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGN1cnZlID0gY3VydmVzWyBpIF07XG5cdFx0XHR2YXIgcmVzb2x1dGlvbiA9ICggY3VydmUgJiYgY3VydmUuaXNFbGxpcHNlQ3VydmUgKSA/IGRpdmlzaW9ucyAqIDJcblx0XHRcdFx0OiAoIGN1cnZlICYmICggY3VydmUuaXNMaW5lQ3VydmUgfHwgY3VydmUuaXNMaW5lQ3VydmUzICkgKSA/IDFcblx0XHRcdFx0XHQ6ICggY3VydmUgJiYgY3VydmUuaXNTcGxpbmVDdXJ2ZSApID8gZGl2aXNpb25zICogY3VydmUucG9pbnRzLmxlbmd0aFxuXHRcdFx0XHRcdFx0OiBkaXZpc2lvbnM7XG5cblx0XHRcdHZhciBwdHMgPSBjdXJ2ZS5nZXRQb2ludHMoIHJlc29sdXRpb24gKTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwOyBqIDwgcHRzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHR2YXIgcG9pbnQgPSBwdHNbIGogXTtcblxuXHRcdFx0XHRpZiAoIGxhc3QgJiYgbGFzdC5lcXVhbHMoIHBvaW50ICkgKSBjb250aW51ZTsgLy8gZW5zdXJlcyBubyBjb25zZWN1dGl2ZSBwb2ludHMgYXJlIGR1cGxpY2F0ZXNcblxuXHRcdFx0XHRwb2ludHMucHVzaCggcG9pbnQgKTtcblx0XHRcdFx0bGFzdCA9IHBvaW50O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHRoaXMuYXV0b0Nsb3NlICYmIHBvaW50cy5sZW5ndGggPiAxICYmICEgcG9pbnRzWyBwb2ludHMubGVuZ3RoIC0gMSBdLmVxdWFscyggcG9pbnRzWyAwIF0gKSApIHtcblxuXHRcdFx0cG9pbnRzLnB1c2goIHBvaW50c1sgMCBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gcG9pbnRzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRDdXJ2ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UuY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBjdXJ2ZSA9IHNvdXJjZS5jdXJ2ZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUuY2xvbmUoKSApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5hdXRvQ2xvc2UgPSBzb3VyY2UuYXV0b0Nsb3NlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQ3VydmUucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLmF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlO1xuXHRcdGRhdGEuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSB0aGlzLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSB0aGlzLmN1cnZlc1sgaSBdO1xuXHRcdFx0ZGF0YS5jdXJ2ZXMucHVzaCggY3VydmUudG9KU09OKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH0sXG5cblx0ZnJvbUpTT046IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdEN1cnZlLnByb3RvdHlwZS5mcm9tSlNPTi5jYWxsKCB0aGlzLCBqc29uICk7XG5cblx0XHR0aGlzLmF1dG9DbG9zZSA9IGpzb24uYXV0b0Nsb3NlO1xuXHRcdHRoaXMuY3VydmVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmN1cnZlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY3VydmUgPSBqc29uLmN1cnZlc1sgaSBdO1xuXHRcdFx0dGhpcy5jdXJ2ZXMucHVzaCggbmV3IEN1cnZlc1sgY3VydmUudHlwZSBdKCkuZnJvbUpTT04oIGN1cnZlICkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIENyZWF0ZXMgZnJlZSBmb3JtIDJkIHBhdGggdXNpbmcgc2VyaWVzIG9mIHBvaW50cywgbGluZXMgb3IgY3VydmVzLlxuICoqL1xuXG5mdW5jdGlvbiBQYXRoKCBwb2ludHMgKSB7XG5cblx0Q3VydmVQYXRoLmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnUGF0aCc7XG5cblx0dGhpcy5jdXJyZW50UG9pbnQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdGlmICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKTtcblxuXHR9XG5cbn1cblxuUGF0aC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBDdXJ2ZVBhdGgucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUGF0aCxcblxuXHRzZXRGcm9tUG9pbnRzOiBmdW5jdGlvbiAoIHBvaW50cyApIHtcblxuXHRcdHRoaXMubW92ZVRvKCBwb2ludHNbIDAgXS54LCBwb2ludHNbIDAgXS55ICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDEsIGwgPSBwb2ludHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5saW5lVG8oIHBvaW50c1sgaSBdLngsIHBvaW50c1sgaSBdLnkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bW92ZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIHgsIHkgKTsgLy8gVE9ETyBjb25zaWRlciByZWZlcmVuY2luZyB2ZWN0b3JzIGluc3RlYWQgb2YgY29weWluZz9cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGluZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgTGluZUN1cnZlKCB0aGlzLmN1cnJlbnRQb2ludC5jbG9uZSgpLCBuZXcgVmVjdG9yMiggeCwgeSApICk7XG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdHZhciBjdXJ2ZSA9IG5ldyBRdWFkcmF0aWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQeCwgYUNQeSApLFxuXHRcdFx0bmV3IFZlY3RvcjIoIGFYLCBhWSApXG5cdFx0KTtcblxuXHRcdHRoaXMuY3VydmVzLnB1c2goIGN1cnZlICk7XG5cblx0XHR0aGlzLmN1cnJlbnRQb2ludC5zZXQoIGFYLCBhWSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRiZXppZXJDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUDF4LCBhQ1AxeSwgYUNQMngsIGFDUDJ5LCBhWCwgYVkgKSB7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgQ3ViaWNCZXppZXJDdXJ2ZShcblx0XHRcdHRoaXMuY3VycmVudFBvaW50LmNsb25lKCksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMXgsIGFDUDF5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYUNQMngsIGFDUDJ5ICksXG5cdFx0XHRuZXcgVmVjdG9yMiggYVgsIGFZIClcblx0XHQpO1xuXG5cdFx0dGhpcy5jdXJ2ZXMucHVzaCggY3VydmUgKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LnNldCggYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNwbGluZVRocnU6IGZ1bmN0aW9uICggcHRzIC8qQXJyYXkgb2YgVmVjdG9yKi8gKSB7XG5cblx0XHR2YXIgbnB0cyA9IFsgdGhpcy5jdXJyZW50UG9pbnQuY2xvbmUoKSBdLmNvbmNhdCggcHRzICk7XG5cblx0XHR2YXIgY3VydmUgPSBuZXcgU3BsaW5lQ3VydmUoIG5wdHMgKTtcblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggcHRzWyBwdHMubGVuZ3RoIC0gMSBdICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFyYzogZnVuY3Rpb24gKCBhWCwgYVksIGFSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKSB7XG5cblx0XHR2YXIgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdHZhciB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2FyYyggYVggKyB4MCwgYVkgKyB5MCwgYVJhZGl1cyxcblx0XHRcdGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0YWJzYXJjOiBmdW5jdGlvbiAoIGFYLCBhWSwgYVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSApIHtcblxuXHRcdHRoaXMuYWJzZWxsaXBzZSggYVgsIGFZLCBhUmFkaXVzLCBhUmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVsbGlwc2U6IGZ1bmN0aW9uICggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKSB7XG5cblx0XHR2YXIgeDAgPSB0aGlzLmN1cnJlbnRQb2ludC54O1xuXHRcdHZhciB5MCA9IHRoaXMuY3VycmVudFBvaW50Lnk7XG5cblx0XHR0aGlzLmFic2VsbGlwc2UoIGFYICsgeDAsIGFZICsgeTAsIHhSYWRpdXMsIHlSYWRpdXMsIGFTdGFydEFuZ2xlLCBhRW5kQW5nbGUsIGFDbG9ja3dpc2UsIGFSb3RhdGlvbiApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRhYnNlbGxpcHNlOiBmdW5jdGlvbiAoIGFYLCBhWSwgeFJhZGl1cywgeVJhZGl1cywgYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZSwgYUNsb2Nrd2lzZSwgYVJvdGF0aW9uICkge1xuXG5cdFx0dmFyIGN1cnZlID0gbmV3IEVsbGlwc2VDdXJ2ZSggYVgsIGFZLCB4UmFkaXVzLCB5UmFkaXVzLCBhU3RhcnRBbmdsZSwgYUVuZEFuZ2xlLCBhQ2xvY2t3aXNlLCBhUm90YXRpb24gKTtcblxuXHRcdGlmICggdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0Ly8gaWYgYSBwcmV2aW91cyBjdXJ2ZSBpcyBwcmVzZW50LCBhdHRlbXB0IHRvIGpvaW5cblx0XHRcdHZhciBmaXJzdFBvaW50ID0gY3VydmUuZ2V0UG9pbnQoIDAgKTtcblxuXHRcdFx0aWYgKCAhIGZpcnN0UG9pbnQuZXF1YWxzKCB0aGlzLmN1cnJlbnRQb2ludCApICkge1xuXG5cdFx0XHRcdHRoaXMubGluZVRvKCBmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLmN1cnZlcy5wdXNoKCBjdXJ2ZSApO1xuXG5cdFx0dmFyIGxhc3RQb2ludCA9IGN1cnZlLmdldFBvaW50KCAxICk7XG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggbGFzdFBvaW50ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0Q3VydmVQYXRoLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5jdXJyZW50UG9pbnQuY29weSggc291cmNlLmN1cnJlbnRQb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkYXRhID0gQ3VydmVQYXRoLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcyApO1xuXG5cdFx0ZGF0YS5jdXJyZW50UG9pbnQgPSB0aGlzLmN1cnJlbnRQb2ludC50b0FycmF5KCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9LFxuXG5cdGZyb21KU09OOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRDdXJ2ZVBhdGgucHJvdG90eXBlLmZyb21KU09OLmNhbGwoIHRoaXMsIGpzb24gKTtcblxuXHRcdHRoaXMuY3VycmVudFBvaW50LmZyb21BcnJheSgganNvbi5jdXJyZW50UG9pbnQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3Igeno4NSAvIGh0dHA6Ly93d3cubGFiNGdhbWVzLm5ldC96ejg1L2Jsb2dcbiAqIERlZmluZXMgYSAyZCBzaGFwZSBwbGFuZSB1c2luZyBwYXRocy5cbiAqKi9cblxuLy8gU1RFUCAxIENyZWF0ZSBhIHBhdGguXG4vLyBTVEVQIDIgVHVybiBwYXRoIGludG8gc2hhcGUuXG4vLyBTVEVQIDMgRXh0cnVkZUdlb21ldHJ5IHRha2VzIGluIFNoYXBlL1NoYXBlc1xuLy8gU1RFUCAzYSAtIEV4dHJhY3QgcG9pbnRzIGZyb20gZWFjaCBzaGFwZSwgdHVybiB0byB2ZXJ0aWNlc1xuLy8gU1RFUCAzYiAtIFRyaWFuZ3VsYXRlIGVhY2ggc2hhcGUsIGFkZCBmYWNlcy5cblxuZnVuY3Rpb24gU2hhcGUoIHBvaW50cyApIHtcblxuXHRQYXRoLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHR0aGlzLnR5cGUgPSAnU2hhcGUnO1xuXG5cdHRoaXMuaG9sZXMgPSBbXTtcblxufVxuXG5TaGFwZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBQYXRoLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFNoYXBlLFxuXG5cdGdldFBvaW50c0hvbGVzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdHZhciBob2xlc1B0cyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRob2xlc1B0c1sgaSBdID0gdGhpcy5ob2xlc1sgaSBdLmdldFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaG9sZXNQdHM7XG5cblx0fSxcblxuXHQvLyBnZXQgcG9pbnRzIG9mIHNoYXBlIGFuZCBob2xlcyAoa2V5cG9pbnRzIGJhc2VkIG9uIHNlZ21lbnRzIHBhcmFtZXRlcilcblxuXHRleHRyYWN0UG9pbnRzOiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdHJldHVybiB7XG5cblx0XHRcdHNoYXBlOiB0aGlzLmdldFBvaW50cyggZGl2aXNpb25zICksXG5cdFx0XHRob2xlczogdGhpcy5nZXRQb2ludHNIb2xlcyggZGl2aXNpb25zIClcblxuXHRcdH07XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdFBhdGgucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmhvbGVzID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBzb3VyY2UuaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGhvbGUgPSBzb3VyY2UuaG9sZXNbIGkgXTtcblxuXHRcdFx0dGhpcy5ob2xlcy5wdXNoKCBob2xlLmNsb25lKCkgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgZGF0YSA9IFBhdGgucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzICk7XG5cblx0XHRkYXRhLnV1aWQgPSB0aGlzLnV1aWQ7XG5cdFx0ZGF0YS5ob2xlcyA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gdGhpcy5ob2xlcy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgaG9sZSA9IHRoaXMuaG9sZXNbIGkgXTtcblx0XHRcdGRhdGEuaG9sZXMucHVzaCggaG9sZS50b0pTT04oKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fSxcblxuXHRmcm9tSlNPTjogZnVuY3Rpb24gKCBqc29uICkge1xuXG5cdFx0UGF0aC5wcm90b3R5cGUuZnJvbUpTT04uY2FsbCggdGhpcywganNvbiApO1xuXG5cdFx0dGhpcy51dWlkID0ganNvbi51dWlkO1xuXHRcdHRoaXMuaG9sZXMgPSBbXTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGpzb24uaG9sZXMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGhvbGUgPSBqc29uLmhvbGVzWyBpIF07XG5cdFx0XHR0aGlzLmhvbGVzLnB1c2goIG5ldyBQYXRoKCkuZnJvbUpTT04oIGhvbGUgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdMaWdodCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvciggY29sb3IgKTtcblx0dGhpcy5pbnRlbnNpdHkgPSBpbnRlbnNpdHkgIT09IHVuZGVmaW5lZCA/IGludGVuc2l0eSA6IDE7XG5cblx0dGhpcy5yZWNlaXZlU2hhZG93ID0gdW5kZWZpbmVkO1xuXG59XG5cbkxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IExpZ2h0LFxuXG5cdGlzTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuY29sb3IuY29weSggc291cmNlLmNvbG9yICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC5jb2xvciA9IHRoaXMuY29sb3IuZ2V0SGV4KCk7XG5cdFx0ZGF0YS5vYmplY3QuaW50ZW5zaXR5ID0gdGhpcy5pbnRlbnNpdHk7XG5cblx0XHRpZiAoIHRoaXMuZ3JvdW5kQ29sb3IgIT09IHVuZGVmaW5lZCApIGRhdGEub2JqZWN0Lmdyb3VuZENvbG9yID0gdGhpcy5ncm91bmRDb2xvci5nZXRIZXgoKTtcblxuXHRcdGlmICggdGhpcy5kaXN0YW5jZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGlzdGFuY2UgPSB0aGlzLmRpc3RhbmNlO1xuXHRcdGlmICggdGhpcy5hbmdsZSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuYW5nbGUgPSB0aGlzLmFuZ2xlO1xuXHRcdGlmICggdGhpcy5kZWNheSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QuZGVjYXkgPSB0aGlzLmRlY2F5O1xuXHRcdGlmICggdGhpcy5wZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3QucGVudW1icmEgPSB0aGlzLnBlbnVtYnJhO1xuXG5cdFx0aWYgKCB0aGlzLnNoYWRvdyAhPT0gdW5kZWZpbmVkICkgZGF0YS5vYmplY3Quc2hhZG93ID0gdGhpcy5zaGFkb3cudG9KU09OKCk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICovXG5cbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodCggc2t5Q29sb3IsIGdyb3VuZENvbG9yLCBpbnRlbnNpdHkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgc2t5Q29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdIZW1pc3BoZXJlTGlnaHQnO1xuXG5cdHRoaXMuY2FzdFNoYWRvdyA9IHVuZGVmaW5lZDtcblxuXHR0aGlzLnBvc2l0aW9uLmNvcHkoIE9iamVjdDNELkRlZmF1bHRVcCApO1xuXHR0aGlzLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdHRoaXMuZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoIGdyb3VuZENvbG9yICk7XG5cbn1cblxuSGVtaXNwaGVyZUxpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEhlbWlzcGhlcmVMaWdodCxcblxuXHRpc0hlbWlzcGhlcmVMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5ncm91bmRDb2xvci5jb3B5KCBzb3VyY2UuZ3JvdW5kQ29sb3IgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gTGlnaHRTaGFkb3coIGNhbWVyYSApIHtcblxuXHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHR0aGlzLmJpYXMgPSAwO1xuXHR0aGlzLnJhZGl1cyA9IDE7XG5cblx0dGhpcy5tYXBTaXplID0gbmV3IFZlY3RvcjIoIDUxMiwgNTEyICk7XG5cblx0dGhpcy5tYXAgPSBudWxsO1xuXHR0aGlzLm1hcFBhc3MgPSBudWxsO1xuXHR0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXg0KCk7XG5cblx0dGhpcy5fZnJ1c3R1bSA9IG5ldyBGcnVzdHVtKCk7XG5cdHRoaXMuX2ZyYW1lRXh0ZW50cyA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cblx0dGhpcy5fdmlld3BvcnRDb3VudCA9IDE7XG5cblx0dGhpcy5fdmlld3BvcnRzID0gW1xuXG5cdFx0bmV3IFZlY3RvcjQoIDAsIDAsIDEsIDEgKVxuXG5cdF07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggTGlnaHRTaGFkb3cucHJvdG90eXBlLCB7XG5cblx0X3Byb2pTY3JlZW5NYXRyaXg6IG5ldyBNYXRyaXg0KCksXG5cblx0X2xpZ2h0UG9zaXRpb25Xb3JsZDogbmV3IFZlY3RvcjMoKSxcblxuXHRfbG9va1RhcmdldDogbmV3IFZlY3RvcjMoKSxcblxuXHRnZXRWaWV3cG9ydENvdW50OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fdmlld3BvcnRDb3VudDtcblxuXHR9LFxuXG5cdGdldEZydXN0dW06IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9mcnVzdHVtO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cmljZXM6IGZ1bmN0aW9uICggbGlnaHQgKSB7XG5cblx0XHR2YXIgc2hhZG93Q2FtZXJhID0gdGhpcy5jYW1lcmEsXG5cdFx0XHRzaGFkb3dNYXRyaXggPSB0aGlzLm1hdHJpeCxcblx0XHRcdHByb2pTY3JlZW5NYXRyaXggPSB0aGlzLl9wcm9qU2NyZWVuTWF0cml4LFxuXHRcdFx0bG9va1RhcmdldCA9IHRoaXMuX2xvb2tUYXJnZXQsXG5cdFx0XHRsaWdodFBvc2l0aW9uV29ybGQgPSB0aGlzLl9saWdodFBvc2l0aW9uV29ybGQ7XG5cblx0XHRsaWdodFBvc2l0aW9uV29ybGQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC5tYXRyaXhXb3JsZCApO1xuXHRcdHNoYWRvd0NhbWVyYS5wb3NpdGlvbi5jb3B5KCBsaWdodFBvc2l0aW9uV29ybGQgKTtcblxuXHRcdGxvb2tUYXJnZXQuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBsaWdodC50YXJnZXQubWF0cml4V29ybGQgKTtcblx0XHRzaGFkb3dDYW1lcmEubG9va0F0KCBsb29rVGFyZ2V0ICk7XG5cdFx0c2hhZG93Q2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRwcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdFx0c2hhZG93TWF0cml4LnNldChcblx0XHRcdDAuNSwgMC4wLCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC41LCAwLjAsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjUsIDAuNSxcblx0XHRcdDAuMCwgMC4wLCAwLjAsIDEuMFxuXHRcdCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubXVsdGlwbHkoIHNoYWRvd0NhbWVyYS5wcm9qZWN0aW9uTWF0cml4ICk7XG5cdFx0c2hhZG93TWF0cml4Lm11bHRpcGx5KCBzaGFkb3dDYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cblx0fSxcblxuXHRnZXRWaWV3cG9ydDogZnVuY3Rpb24gKCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZpZXdwb3J0c1sgdmlld3BvcnRJbmRleCBdO1xuXG5cdH0sXG5cblx0Z2V0RnJhbWVFeHRlbnRzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZnJhbWVFeHRlbnRzO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHR0aGlzLmNhbWVyYSA9IHNvdXJjZS5jYW1lcmEuY2xvbmUoKTtcblxuXHRcdHRoaXMuYmlhcyA9IHNvdXJjZS5iaWFzO1xuXHRcdHRoaXMucmFkaXVzID0gc291cmNlLnJhZGl1cztcblxuXHRcdHRoaXMubWFwU2l6ZS5jb3B5KCBzb3VyY2UubWFwU2l6ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0dG9KU09OOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0ID0ge307XG5cblx0XHRpZiAoIHRoaXMuYmlhcyAhPT0gMCApIG9iamVjdC5iaWFzID0gdGhpcy5iaWFzO1xuXHRcdGlmICggdGhpcy5yYWRpdXMgIT09IDEgKSBvYmplY3QucmFkaXVzID0gdGhpcy5yYWRpdXM7XG5cdFx0aWYgKCB0aGlzLm1hcFNpemUueCAhPT0gNTEyIHx8IHRoaXMubWFwU2l6ZS55ICE9PSA1MTIgKSBvYmplY3QubWFwU2l6ZSA9IHRoaXMubWFwU2l6ZS50b0FycmF5KCk7XG5cblx0XHRvYmplY3QuY2FtZXJhID0gdGhpcy5jYW1lcmEudG9KU09OKCBmYWxzZSApLm9iamVjdDtcblx0XHRkZWxldGUgb2JqZWN0LmNhbWVyYS5tYXRyaXg7XG5cblx0XHRyZXR1cm4gb2JqZWN0O1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0U2hhZG93KCkge1xuXG5cdExpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggNTAsIDEsIDAuNSwgNTAwICkgKTtcblxufVxuXG5TcG90TGlnaHRTaGFkb3cucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHRTaGFkb3cucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3BvdExpZ2h0U2hhZG93LFxuXG5cdGlzU3BvdExpZ2h0U2hhZG93OiB0cnVlLFxuXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0dmFyIGNhbWVyYSA9IHRoaXMuY2FtZXJhO1xuXG5cdFx0dmFyIGZvdiA9IE1hdGhVdGlscy5SQUQyREVHICogMiAqIGxpZ2h0LmFuZ2xlO1xuXHRcdHZhciBhc3BlY3QgPSB0aGlzLm1hcFNpemUud2lkdGggLyB0aGlzLm1hcFNpemUuaGVpZ2h0O1xuXHRcdHZhciBmYXIgPSBsaWdodC5kaXN0YW5jZSB8fCBjYW1lcmEuZmFyO1xuXG5cdFx0aWYgKCBmb3YgIT09IGNhbWVyYS5mb3YgfHwgYXNwZWN0ICE9PSBjYW1lcmEuYXNwZWN0IHx8IGZhciAhPT0gY2FtZXJhLmZhciApIHtcblxuXHRcdFx0Y2FtZXJhLmZvdiA9IGZvdjtcblx0XHRcdGNhbWVyYS5hc3BlY3QgPSBhc3BlY3Q7XG5cdFx0XHRjYW1lcmEuZmFyID0gZmFyO1xuXHRcdFx0Y2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHRcdH1cblxuXHRcdExpZ2h0U2hhZG93LnByb3RvdHlwZS51cGRhdGVNYXRyaWNlcy5jYWxsKCB0aGlzLCBsaWdodCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gU3BvdExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgYW5nbGUsIHBlbnVtYnJhLCBkZWNheSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ1Nwb3RMaWdodCc7XG5cblx0dGhpcy5wb3NpdGlvbi5jb3B5KCBPYmplY3QzRC5EZWZhdWx0VXAgKTtcblx0dGhpcy51cGRhdGVNYXRyaXgoKTtcblxuXHR0aGlzLnRhcmdldCA9IG5ldyBPYmplY3QzRCgpO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgJ3Bvd2VyJywge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHQvLyBpbnRlbnNpdHkgPSBwb3dlciBwZXIgc29saWQgYW5nbGUuXG5cdFx0XHQvLyByZWY6IGVxdWF0aW9uICgxNykgZnJvbSBodHRwczovL3NlYmxhZ2FyZGUuZmlsZXMud29yZHByZXNzLmNvbS8yMDE1LzA3L2NvdXJzZV9ub3Rlc19tb3ZpbmdfZnJvc3RiaXRlX3RvX3Bicl92MzIucGRmXG5cdFx0XHRyZXR1cm4gdGhpcy5pbnRlbnNpdHkgKiBNYXRoLlBJO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggcG93ZXIgKSB7XG5cblx0XHRcdC8vIGludGVuc2l0eSA9IHBvd2VyIHBlciBzb2xpZCBhbmdsZS5cblx0XHRcdC8vIHJlZjogZXF1YXRpb24gKDE3KSBmcm9tIGh0dHBzOi8vc2VibGFnYXJkZS5maWxlcy53b3JkcHJlc3MuY29tLzIwMTUvMDcvY291cnNlX25vdGVzX21vdmluZ19mcm9zdGJpdGVfdG9fcGJyX3YzMi5wZGZcblx0XHRcdHRoaXMuaW50ZW5zaXR5ID0gcG93ZXIgLyBNYXRoLlBJO1xuXG5cdFx0fVxuXHR9ICk7XG5cblx0dGhpcy5kaXN0YW5jZSA9ICggZGlzdGFuY2UgIT09IHVuZGVmaW5lZCApID8gZGlzdGFuY2UgOiAwO1xuXHR0aGlzLmFuZ2xlID0gKCBhbmdsZSAhPT0gdW5kZWZpbmVkICkgPyBhbmdsZSA6IE1hdGguUEkgLyAzO1xuXHR0aGlzLnBlbnVtYnJhID0gKCBwZW51bWJyYSAhPT0gdW5kZWZpbmVkICkgPyBwZW51bWJyYSA6IDA7XG5cdHRoaXMuZGVjYXkgPSAoIGRlY2F5ICE9PSB1bmRlZmluZWQgKSA/IGRlY2F5IDogMTtcdC8vIGZvciBwaHlzaWNhbGx5IGNvcnJlY3QgbGlnaHRzLCBzaG91bGQgYmUgMi5cblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBTcG90TGlnaHRTaGFkb3coKTtcblxufVxuXG5TcG90TGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogU3BvdExpZ2h0LFxuXG5cdGlzU3BvdExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuYW5nbGUgPSBzb3VyY2UuYW5nbGU7XG5cdFx0dGhpcy5wZW51bWJyYSA9IHNvdXJjZS5wZW51bWJyYTtcblx0XHR0aGlzLmRlY2F5ID0gc291cmNlLmRlY2F5O1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG5mdW5jdGlvbiBQb2ludExpZ2h0U2hhZG93KCkge1xuXG5cdExpZ2h0U2hhZG93LmNhbGwoIHRoaXMsIG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggOTAsIDEsIDAuNSwgNTAwICkgKTtcblxuXHR0aGlzLl9mcmFtZUV4dGVudHMgPSBuZXcgVmVjdG9yMiggNCwgMiApO1xuXG5cdHRoaXMuX3ZpZXdwb3J0Q291bnQgPSA2O1xuXG5cdHRoaXMuX3ZpZXdwb3J0cyA9IFtcblx0XHQvLyBUaGVzZSB2aWV3cG9ydHMgbWFwIGEgY3ViZS1tYXAgb250byBhIDJEIHRleHR1cmUgd2l0aCB0aGVcblx0XHQvLyBmb2xsb3dpbmcgb3JpZW50YXRpb246XG5cdFx0Ly9cblx0XHQvLyAgeHpYWlxuXHRcdC8vICAgeSBZXG5cdFx0Ly9cblx0XHQvLyBYIC0gUG9zaXRpdmUgeCBkaXJlY3Rpb25cblx0XHQvLyB4IC0gTmVnYXRpdmUgeCBkaXJlY3Rpb25cblx0XHQvLyBZIC0gUG9zaXRpdmUgeSBkaXJlY3Rpb25cblx0XHQvLyB5IC0gTmVnYXRpdmUgeSBkaXJlY3Rpb25cblx0XHQvLyBaIC0gUG9zaXRpdmUgeiBkaXJlY3Rpb25cblx0XHQvLyB6IC0gTmVnYXRpdmUgeiBkaXJlY3Rpb25cblxuXHRcdC8vIHBvc2l0aXZlIFhcblx0XHRuZXcgVmVjdG9yNCggMiwgMSwgMSwgMSApLFxuXHRcdC8vIG5lZ2F0aXZlIFhcblx0XHRuZXcgVmVjdG9yNCggMCwgMSwgMSwgMSApLFxuXHRcdC8vIHBvc2l0aXZlIFpcblx0XHRuZXcgVmVjdG9yNCggMywgMSwgMSwgMSApLFxuXHRcdC8vIG5lZ2F0aXZlIFpcblx0XHRuZXcgVmVjdG9yNCggMSwgMSwgMSwgMSApLFxuXHRcdC8vIHBvc2l0aXZlIFlcblx0XHRuZXcgVmVjdG9yNCggMywgMCwgMSwgMSApLFxuXHRcdC8vIG5lZ2F0aXZlIFlcblx0XHRuZXcgVmVjdG9yNCggMSwgMCwgMSwgMSApXG5cdF07XG5cblx0dGhpcy5fY3ViZURpcmVjdGlvbnMgPSBbXG5cdFx0bmV3IFZlY3RvcjMoIDEsIDAsIDAgKSwgbmV3IFZlY3RvcjMoIC0gMSwgMCwgMCApLCBuZXcgVmVjdG9yMyggMCwgMCwgMSApLFxuXHRcdG5ldyBWZWN0b3IzKCAwLCAwLCAtIDEgKSwgbmV3IFZlY3RvcjMoIDAsIDEsIDAgKSwgbmV3IFZlY3RvcjMoIDAsIC0gMSwgMCApXG5cdF07XG5cblx0dGhpcy5fY3ViZVVwcyA9IFtcblx0XHRuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLCBuZXcgVmVjdG9yMyggMCwgMSwgMCApLFxuXHRcdG5ldyBWZWN0b3IzKCAwLCAxLCAwICksIG5ldyBWZWN0b3IzKCAwLCAwLCAxICksXHRuZXcgVmVjdG9yMyggMCwgMCwgLSAxIClcblx0XTtcblxufVxuXG5Qb2ludExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvaW50TGlnaHRTaGFkb3csXG5cblx0aXNQb2ludExpZ2h0U2hhZG93OiB0cnVlLFxuXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAoIGxpZ2h0LCB2aWV3cG9ydEluZGV4ICkge1xuXG5cdFx0aWYgKCB2aWV3cG9ydEluZGV4ID09PSB1bmRlZmluZWQgKSB2aWV3cG9ydEluZGV4ID0gMDtcblxuXHRcdHZhciBjYW1lcmEgPSB0aGlzLmNhbWVyYSxcblx0XHRcdHNoYWRvd01hdHJpeCA9IHRoaXMubWF0cml4LFxuXHRcdFx0bGlnaHRQb3NpdGlvbldvcmxkID0gdGhpcy5fbGlnaHRQb3NpdGlvbldvcmxkLFxuXHRcdFx0bG9va1RhcmdldCA9IHRoaXMuX2xvb2tUYXJnZXQsXG5cdFx0XHRwcm9qU2NyZWVuTWF0cml4ID0gdGhpcy5fcHJvalNjcmVlbk1hdHJpeDtcblxuXHRcdGxpZ2h0UG9zaXRpb25Xb3JsZC5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGxpZ2h0Lm1hdHJpeFdvcmxkICk7XG5cdFx0Y2FtZXJhLnBvc2l0aW9uLmNvcHkoIGxpZ2h0UG9zaXRpb25Xb3JsZCApO1xuXG5cdFx0bG9va1RhcmdldC5jb3B5KCBjYW1lcmEucG9zaXRpb24gKTtcblx0XHRsb29rVGFyZ2V0LmFkZCggdGhpcy5fY3ViZURpcmVjdGlvbnNbIHZpZXdwb3J0SW5kZXggXSApO1xuXHRcdGNhbWVyYS51cC5jb3B5KCB0aGlzLl9jdWJlVXBzWyB2aWV3cG9ydEluZGV4IF0gKTtcblx0XHRjYW1lcmEubG9va0F0KCBsb29rVGFyZ2V0ICk7XG5cdFx0Y2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0XHRzaGFkb3dNYXRyaXgubWFrZVRyYW5zbGF0aW9uKCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC54LCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC55LCAtIGxpZ2h0UG9zaXRpb25Xb3JsZC56ICk7XG5cblx0XHRwcm9qU2NyZWVuTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LCBjYW1lcmEubWF0cml4V29ybGRJbnZlcnNlICk7XG5cdFx0dGhpcy5fZnJ1c3R1bS5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggcHJvalNjcmVlbk1hdHJpeCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBQb2ludExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5LCBkaXN0YW5jZSwgZGVjYXkgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdQb2ludExpZ2h0JztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsICdwb3dlcicsIHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0cmV0dXJuIHRoaXMuaW50ZW5zaXR5ICogNCAqIE1hdGguUEk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCBwb3dlciApIHtcblxuXHRcdFx0Ly8gaW50ZW5zaXR5ID0gcG93ZXIgcGVyIHNvbGlkIGFuZ2xlLlxuXHRcdFx0Ly8gcmVmOiBlcXVhdGlvbiAoMTUpIGZyb20gaHR0cHM6Ly9zZWJsYWdhcmRlLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNy9jb3Vyc2Vfbm90ZXNfbW92aW5nX2Zyb3N0Yml0ZV90b19wYnJfdjMyLnBkZlxuXHRcdFx0dGhpcy5pbnRlbnNpdHkgPSBwb3dlciAvICggNCAqIE1hdGguUEkgKTtcblxuXHRcdH1cblx0fSApO1xuXG5cdHRoaXMuZGlzdGFuY2UgPSAoIGRpc3RhbmNlICE9PSB1bmRlZmluZWQgKSA/IGRpc3RhbmNlIDogMDtcblx0dGhpcy5kZWNheSA9ICggZGVjYXkgIT09IHVuZGVmaW5lZCApID8gZGVjYXkgOiAxO1x0Ly8gZm9yIHBoeXNpY2FsbHkgY29ycmVjdCBsaWdodHMsIHNob3VsZCBiZSAyLlxuXG5cdHRoaXMuc2hhZG93ID0gbmV3IFBvaW50TGlnaHRTaGFkb3coKTtcblxufVxuXG5Qb2ludExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IFBvaW50TGlnaHQsXG5cblx0aXNQb2ludExpZ2h0OiB0cnVlLFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdFx0TGlnaHQucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHR0aGlzLmRpc3RhbmNlID0gc291cmNlLmRpc3RhbmNlO1xuXHRcdHRoaXMuZGVjYXkgPSBzb3VyY2UuZGVjYXk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIGFyb3NlIC8gaHR0cDovL2dpdGh1Yi5jb20vYXJvc2VcbiAqL1xuXG5mdW5jdGlvbiBPcnRob2dyYXBoaWNDYW1lcmEoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkge1xuXG5cdENhbWVyYS5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy50eXBlID0gJ09ydGhvZ3JhcGhpY0NhbWVyYSc7XG5cblx0dGhpcy56b29tID0gMTtcblx0dGhpcy52aWV3ID0gbnVsbDtcblxuXHR0aGlzLmxlZnQgPSAoIGxlZnQgIT09IHVuZGVmaW5lZCApID8gbGVmdCA6IC0gMTtcblx0dGhpcy5yaWdodCA9ICggcmlnaHQgIT09IHVuZGVmaW5lZCApID8gcmlnaHQgOiAxO1xuXHR0aGlzLnRvcCA9ICggdG9wICE9PSB1bmRlZmluZWQgKSA/IHRvcCA6IDE7XG5cdHRoaXMuYm90dG9tID0gKCBib3R0b20gIT09IHVuZGVmaW5lZCApID8gYm90dG9tIDogLSAxO1xuXG5cdHRoaXMubmVhciA9ICggbmVhciAhPT0gdW5kZWZpbmVkICkgPyBuZWFyIDogMC4xO1xuXHR0aGlzLmZhciA9ICggZmFyICE9PSB1bmRlZmluZWQgKSA/IGZhciA6IDIwMDA7XG5cblx0dGhpcy51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cbn1cblxuT3J0aG9ncmFwaGljQ2FtZXJhLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIENhbWVyYS5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBPcnRob2dyYXBoaWNDYW1lcmEsXG5cblx0aXNPcnRob2dyYXBoaWNDYW1lcmE6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UsIHJlY3Vyc2l2ZSApIHtcblxuXHRcdENhbWVyYS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0dGhpcy5sZWZ0ID0gc291cmNlLmxlZnQ7XG5cdFx0dGhpcy5yaWdodCA9IHNvdXJjZS5yaWdodDtcblx0XHR0aGlzLnRvcCA9IHNvdXJjZS50b3A7XG5cdFx0dGhpcy5ib3R0b20gPSBzb3VyY2UuYm90dG9tO1xuXHRcdHRoaXMubmVhciA9IHNvdXJjZS5uZWFyO1xuXHRcdHRoaXMuZmFyID0gc291cmNlLmZhcjtcblxuXHRcdHRoaXMuem9vbSA9IHNvdXJjZS56b29tO1xuXHRcdHRoaXMudmlldyA9IHNvdXJjZS52aWV3ID09PSBudWxsID8gbnVsbCA6IE9iamVjdC5hc3NpZ24oIHt9LCBzb3VyY2UudmlldyApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRWaWV3T2Zmc2V0OiBmdW5jdGlvbiAoIGZ1bGxXaWR0aCwgZnVsbEhlaWdodCwgeCwgeSwgd2lkdGgsIGhlaWdodCApIHtcblxuXHRcdGlmICggdGhpcy52aWV3ID09PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLnZpZXcgPSB7XG5cdFx0XHRcdGVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdGZ1bGxXaWR0aDogMSxcblx0XHRcdFx0ZnVsbEhlaWdodDogMSxcblx0XHRcdFx0b2Zmc2V0WDogMCxcblx0XHRcdFx0b2Zmc2V0WTogMCxcblx0XHRcdFx0d2lkdGg6IDEsXG5cdFx0XHRcdGhlaWdodDogMVxuXHRcdFx0fTtcblxuXHRcdH1cblxuXHRcdHRoaXMudmlldy5lbmFibGVkID0gdHJ1ZTtcblx0XHR0aGlzLnZpZXcuZnVsbFdpZHRoID0gZnVsbFdpZHRoO1xuXHRcdHRoaXMudmlldy5mdWxsSGVpZ2h0ID0gZnVsbEhlaWdodDtcblx0XHR0aGlzLnZpZXcub2Zmc2V0WCA9IHg7XG5cdFx0dGhpcy52aWV3Lm9mZnNldFkgPSB5O1xuXHRcdHRoaXMudmlldy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMudmlldy5oZWlnaHQgPSBoZWlnaHQ7XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdGNsZWFyVmlld09mZnNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0aWYgKCB0aGlzLnZpZXcgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMudmlldy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHR9XG5cblx0XHR0aGlzLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblxuXHR9LFxuXG5cdHVwZGF0ZVByb2plY3Rpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkeCA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gKCAyICogdGhpcy56b29tICk7XG5cdFx0dmFyIGR5ID0gKCB0aGlzLnRvcCAtIHRoaXMuYm90dG9tICkgLyAoIDIgKiB0aGlzLnpvb20gKTtcblx0XHR2YXIgY3ggPSAoIHRoaXMucmlnaHQgKyB0aGlzLmxlZnQgKSAvIDI7XG5cdFx0dmFyIGN5ID0gKCB0aGlzLnRvcCArIHRoaXMuYm90dG9tICkgLyAyO1xuXG5cdFx0dmFyIGxlZnQgPSBjeCAtIGR4O1xuXHRcdHZhciByaWdodCA9IGN4ICsgZHg7XG5cdFx0dmFyIHRvcCA9IGN5ICsgZHk7XG5cdFx0dmFyIGJvdHRvbSA9IGN5IC0gZHk7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCAmJiB0aGlzLnZpZXcuZW5hYmxlZCApIHtcblxuXHRcdFx0dmFyIHNjYWxlVyA9ICggdGhpcy5yaWdodCAtIHRoaXMubGVmdCApIC8gdGhpcy52aWV3LmZ1bGxXaWR0aCAvIHRoaXMuem9vbTtcblx0XHRcdHZhciBzY2FsZUggPSAoIHRoaXMudG9wIC0gdGhpcy5ib3R0b20gKSAvIHRoaXMudmlldy5mdWxsSGVpZ2h0IC8gdGhpcy56b29tO1xuXG5cdFx0XHRsZWZ0ICs9IHNjYWxlVyAqIHRoaXMudmlldy5vZmZzZXRYO1xuXHRcdFx0cmlnaHQgPSBsZWZ0ICsgc2NhbGVXICogdGhpcy52aWV3LndpZHRoO1xuXHRcdFx0dG9wIC09IHNjYWxlSCAqIHRoaXMudmlldy5vZmZzZXRZO1xuXHRcdFx0Ym90dG9tID0gdG9wIC0gc2NhbGVIICogdGhpcy52aWV3LmhlaWdodDtcblxuXHRcdH1cblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeC5tYWtlT3J0aG9ncmFwaGljKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIHRoaXMubmVhciwgdGhpcy5mYXIgKTtcblxuXHRcdHRoaXMucHJvamVjdGlvbk1hdHJpeEludmVyc2UuZ2V0SW52ZXJzZSggdGhpcy5wcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gT2JqZWN0M0QucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC56b29tID0gdGhpcy56b29tO1xuXHRcdGRhdGEub2JqZWN0LmxlZnQgPSB0aGlzLmxlZnQ7XG5cdFx0ZGF0YS5vYmplY3QucmlnaHQgPSB0aGlzLnJpZ2h0O1xuXHRcdGRhdGEub2JqZWN0LnRvcCA9IHRoaXMudG9wO1xuXHRcdGRhdGEub2JqZWN0LmJvdHRvbSA9IHRoaXMuYm90dG9tO1xuXHRcdGRhdGEub2JqZWN0Lm5lYXIgPSB0aGlzLm5lYXI7XG5cdFx0ZGF0YS5vYmplY3QuZmFyID0gdGhpcy5mYXI7XG5cblx0XHRpZiAoIHRoaXMudmlldyAhPT0gbnVsbCApIGRhdGEub2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgdGhpcy52aWV3ICk7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIERpcmVjdGlvbmFsTGlnaHRTaGFkb3coKSB7XG5cblx0TGlnaHRTaGFkb3cuY2FsbCggdGhpcywgbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggLSA1LCA1LCA1LCAtIDUsIDAuNSwgNTAwICkgKTtcblxufVxuXG5EaXJlY3Rpb25hbExpZ2h0U2hhZG93LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0U2hhZG93LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IERpcmVjdGlvbmFsTGlnaHRTaGFkb3csXG5cblx0aXNEaXJlY3Rpb25hbExpZ2h0U2hhZG93OiB0cnVlLFxuXG5cdHVwZGF0ZU1hdHJpY2VzOiBmdW5jdGlvbiAoIGxpZ2h0ICkge1xuXG5cdFx0TGlnaHRTaGFkb3cucHJvdG90eXBlLnVwZGF0ZU1hdHJpY2VzLmNhbGwoIHRoaXMsIGxpZ2h0ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gRGlyZWN0aW9uYWxMaWdodCggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodC5jYWxsKCB0aGlzLCBjb2xvciwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy50eXBlID0gJ0RpcmVjdGlvbmFsTGlnaHQnO1xuXG5cdHRoaXMucG9zaXRpb24uY29weSggT2JqZWN0M0QuRGVmYXVsdFVwICk7XG5cdHRoaXMudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy50YXJnZXQgPSBuZXcgT2JqZWN0M0QoKTtcblxuXHR0aGlzLnNoYWRvdyA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0U2hhZG93KCk7XG5cbn1cblxuRGlyZWN0aW9uYWxMaWdodC5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodC5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBEaXJlY3Rpb25hbExpZ2h0LFxuXG5cdGlzRGlyZWN0aW9uYWxMaWdodDogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpZ2h0LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy50YXJnZXQgPSBzb3VyY2UudGFyZ2V0LmNsb25lKCk7XG5cblx0XHR0aGlzLnNoYWRvdyA9IHNvdXJjZS5zaGFkb3cuY2xvbmUoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQW1iaWVudExpZ2h0KCBjb2xvciwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIGNvbG9yLCBpbnRlbnNpdHkgKTtcblxuXHR0aGlzLnR5cGUgPSAnQW1iaWVudExpZ2h0JztcblxuXHR0aGlzLmNhc3RTaGFkb3cgPSB1bmRlZmluZWQ7XG5cbn1cblxuQW1iaWVudExpZ2h0LnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0LnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFtYmllbnRMaWdodCxcblxuXHRpc0FtYmllbnRMaWdodDogdHJ1ZVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhYmVsbmF0aW9uIC8gaHR0cDovL2dpdGh1Yi5jb20vYWJlbG5hdGlvblxuICovXG5cbmZ1bmN0aW9uIFJlY3RBcmVhTGlnaHQoIGNvbG9yLCBpbnRlbnNpdHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0TGlnaHQuY2FsbCggdGhpcywgY29sb3IsIGludGVuc2l0eSApO1xuXG5cdHRoaXMudHlwZSA9ICdSZWN0QXJlYUxpZ2h0JztcblxuXHR0aGlzLndpZHRoID0gKCB3aWR0aCAhPT0gdW5kZWZpbmVkICkgPyB3aWR0aCA6IDEwO1xuXHR0aGlzLmhlaWdodCA9ICggaGVpZ2h0ICE9PSB1bmRlZmluZWQgKSA/IGhlaWdodCA6IDEwO1xuXG59XG5cblJlY3RBcmVhTGlnaHQucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogUmVjdEFyZWFMaWdodCxcblxuXHRpc1JlY3RBcmVhTGlnaHQ6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMud2lkdGggPSBzb3VyY2Uud2lkdGg7XG5cdFx0dGhpcy5oZWlnaHQgPSBzb3VyY2UuaGVpZ2h0O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gTGlnaHQucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHRkYXRhLm9iamVjdC53aWR0aCA9IHRoaXMud2lkdGg7XG5cdFx0ZGF0YS5vYmplY3QuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIE1hdGVyaWFsTG9hZGVyKCBtYW5hZ2VyICkge1xuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cblx0dGhpcy50ZXh0dXJlcyA9IHt9O1xuXG59XG5cbk1hdGVyaWFsTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBNYXRlcmlhbExvYWRlcixcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciB0ZXh0dXJlcyA9IHRoaXMudGV4dHVyZXM7XG5cblx0XHRmdW5jdGlvbiBnZXRUZXh0dXJlKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIHRleHR1cmVzWyBuYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbExvYWRlcjogVW5kZWZpbmVkIHRleHR1cmUnLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRleHR1cmVzWyBuYW1lIF07XG5cblx0XHR9XG5cblx0XHR2YXIgbWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWxzWyBqc29uLnR5cGUgXSgpO1xuXG5cdFx0aWYgKCBqc29uLnV1aWQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnV1aWQgPSBqc29uLnV1aWQ7XG5cdFx0aWYgKCBqc29uLm5hbWUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5hbWUgPSBqc29uLm5hbWU7XG5cdFx0aWYgKCBqc29uLmNvbG9yICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvci5zZXRIZXgoIGpzb24uY29sb3IgKTtcblx0XHRpZiAoIGpzb24ucm91Z2huZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5yb3VnaG5lc3MgPSBqc29uLnJvdWdobmVzcztcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3MgPSBqc29uLm1ldGFsbmVzcztcblx0XHRpZiAoIGpzb24uc2hlZW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoZWVuID0gbmV3IENvbG9yKCkuc2V0SGV4KCBqc29uLnNoZWVuICk7XG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgoIGpzb24uZW1pc3NpdmUgKTtcblx0XHRpZiAoIGpzb24uc3BlY3VsYXIgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNwZWN1bGFyLnNldEhleCgganNvbi5zcGVjdWxhciApO1xuXHRcdGlmICgganNvbi5zaGluaW5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNoaW5pbmVzcyA9IGpzb24uc2hpbmluZXNzO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdCA9IGpzb24uY2xlYXJjb2F0O1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3MgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzcyA9IGpzb24uY2xlYXJjb2F0Um91Z2huZXNzO1xuXHRcdGlmICgganNvbi5mb2cgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmZvZyA9IGpzb24uZm9nO1xuXHRcdGlmICgganNvbi5mbGF0U2hhZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZmxhdFNoYWRpbmcgPSBqc29uLmZsYXRTaGFkaW5nO1xuXHRcdGlmICgganNvbi5ibGVuZGluZyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuYmxlbmRpbmcgPSBqc29uLmJsZW5kaW5nO1xuXHRcdGlmICgganNvbi5jb21iaW5lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb21iaW5lID0ganNvbi5jb21iaW5lO1xuXHRcdGlmICgganNvbi5zaWRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zaWRlID0ganNvbi5zaWRlO1xuXHRcdGlmICgganNvbi5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5vcGFjaXR5ID0ganNvbi5vcGFjaXR5O1xuXHRcdGlmICgganNvbi50cmFuc3BhcmVudCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudHJhbnNwYXJlbnQgPSBqc29uLnRyYW5zcGFyZW50O1xuXHRcdGlmICgganNvbi5hbHBoYVRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhVGVzdCA9IGpzb24uYWxwaGFUZXN0O1xuXHRcdGlmICgganNvbi5kZXB0aFRlc3QgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlcHRoVGVzdCA9IGpzb24uZGVwdGhUZXN0O1xuXHRcdGlmICgganNvbi5kZXB0aFdyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kZXB0aFdyaXRlID0ganNvbi5kZXB0aFdyaXRlO1xuXHRcdGlmICgganNvbi5jb2xvcldyaXRlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jb2xvcldyaXRlID0ganNvbi5jb2xvcldyaXRlO1xuXG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxXcml0ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFdyaXRlID0ganNvbi5zdGVuY2lsV3JpdGU7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxXcml0ZU1hc2sgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxXcml0ZU1hc2sgPSBqc29uLnN0ZW5jaWxXcml0ZU1hc2s7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxGdW5jICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsRnVuYyA9IGpzb24uc3RlbmNpbEZ1bmM7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxSZWYgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnN0ZW5jaWxSZWYgPSBqc29uLnN0ZW5jaWxSZWY7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxGdW5jTWFzayAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbEZ1bmNNYXNrID0ganNvbi5zdGVuY2lsRnVuY01hc2s7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxGYWlsICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5zdGVuY2lsRmFpbCA9IGpzb24uc3RlbmNpbEZhaWw7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxaRmFpbCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFpGYWlsID0ganNvbi5zdGVuY2lsWkZhaWw7XG5cdFx0aWYgKCBqc29uLnN0ZW5jaWxaUGFzcyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3RlbmNpbFpQYXNzID0ganNvbi5zdGVuY2lsWlBhc3M7XG5cblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWUgPSBqc29uLndpcmVmcmFtZTtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZXdpZHRoICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC53aXJlZnJhbWVMaW5ld2lkdGggPSBqc29uLndpcmVmcmFtZUxpbmV3aWR0aDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWNhcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwud2lyZWZyYW1lTGluZWNhcCA9IGpzb24ud2lyZWZyYW1lTGluZWNhcDtcblx0XHRpZiAoIGpzb24ud2lyZWZyYW1lTGluZWpvaW4gIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLndpcmVmcmFtZUxpbmVqb2luID0ganNvbi53aXJlZnJhbWVMaW5lam9pbjtcblxuXHRcdGlmICgganNvbi5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm90YXRpb24gPSBqc29uLnJvdGF0aW9uO1xuXG5cdFx0aWYgKCBqc29uLmxpbmV3aWR0aCAhPT0gMSApIG1hdGVyaWFsLmxpbmV3aWR0aCA9IGpzb24ubGluZXdpZHRoO1xuXHRcdGlmICgganNvbi5kYXNoU2l6ZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGFzaFNpemUgPSBqc29uLmRhc2hTaXplO1xuXHRcdGlmICgganNvbi5nYXBTaXplICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5nYXBTaXplID0ganNvbi5nYXBTaXplO1xuXHRcdGlmICgganNvbi5zY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2NhbGUgPSBqc29uLnNjYWxlO1xuXG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXQgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXQgPSBqc29uLnBvbHlnb25PZmZzZXQ7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3IgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnBvbHlnb25PZmZzZXRGYWN0b3IgPSBqc29uLnBvbHlnb25PZmZzZXRGYWN0b3I7XG5cdFx0aWYgKCBqc29uLnBvbHlnb25PZmZzZXRVbml0cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucG9seWdvbk9mZnNldFVuaXRzID0ganNvbi5wb2x5Z29uT2Zmc2V0VW5pdHM7XG5cblx0XHRpZiAoIGpzb24uc2tpbm5pbmcgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNraW5uaW5nID0ganNvbi5za2lubmluZztcblx0XHRpZiAoIGpzb24ubW9ycGhUYXJnZXRzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tb3JwaFRhcmdldHMgPSBqc29uLm1vcnBoVGFyZ2V0cztcblx0XHRpZiAoIGpzb24ubW9ycGhOb3JtYWxzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tb3JwaE5vcm1hbHMgPSBqc29uLm1vcnBoTm9ybWFscztcblx0XHRpZiAoIGpzb24uZGl0aGVyaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXRoZXJpbmcgPSBqc29uLmRpdGhlcmluZztcblxuXHRcdGlmICgganNvbi52ZXJ0ZXhUYW5nZW50cyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4VGFuZ2VudHMgPSBqc29uLnZlcnRleFRhbmdlbnRzO1xuXG5cdFx0aWYgKCBqc29uLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnZpc2libGUgPSBqc29uLnZpc2libGU7XG5cblx0XHRpZiAoIGpzb24udG9uZU1hcHBlZCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudG9uZU1hcHBlZCA9IGpzb24udG9uZU1hcHBlZDtcblxuXHRcdGlmICgganNvbi51c2VyRGF0YSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudXNlckRhdGEgPSBqc29uLnVzZXJEYXRhO1xuXG5cdFx0aWYgKCBqc29uLnZlcnRleENvbG9ycyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHR5cGVvZiBqc29uLnZlcnRleENvbG9ycyA9PT0gJ251bWJlcicgKSB7XG5cblx0XHRcdFx0bWF0ZXJpYWwudmVydGV4Q29sb3JzID0gKCBqc29uLnZlcnRleENvbG9ycyA+IDAgKSA/IHRydWUgOiBmYWxzZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRtYXRlcmlhbC52ZXJ0ZXhDb2xvcnMgPSBqc29uLnZlcnRleENvbG9ycztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gU2hhZGVyIE1hdGVyaWFsXG5cblx0XHRpZiAoIGpzb24udW5pZm9ybXMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIG5hbWUgaW4ganNvbi51bmlmb3JtcyApIHtcblxuXHRcdFx0XHR2YXIgdW5pZm9ybSA9IGpzb24udW5pZm9ybXNbIG5hbWUgXTtcblxuXHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdID0ge307XG5cblx0XHRcdFx0c3dpdGNoICggdW5pZm9ybS50eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAndCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gZ2V0VGV4dHVyZSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdjJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgQ29sb3IoKS5zZXRIZXgoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAndjInOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBWZWN0b3IyKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ3YzJzpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSBuZXcgVmVjdG9yMygpLmZyb21BcnJheSggdW5pZm9ybS52YWx1ZSApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICd2NCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IFZlY3RvcjQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnbTMnOlxuXHRcdFx0XHRcdFx0bWF0ZXJpYWwudW5pZm9ybXNbIG5hbWUgXS52YWx1ZSA9IG5ldyBNYXRyaXgzKCkuZnJvbUFycmF5KCB1bmlmb3JtLnZhbHVlICk7XG5cblx0XHRcdFx0XHRjYXNlICdtNCc6XG5cdFx0XHRcdFx0XHRtYXRlcmlhbC51bmlmb3Jtc1sgbmFtZSBdLnZhbHVlID0gbmV3IE1hdHJpeDQoKS5mcm9tQXJyYXkoIHVuaWZvcm0udmFsdWUgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdG1hdGVyaWFsLnVuaWZvcm1zWyBuYW1lIF0udmFsdWUgPSB1bmlmb3JtLnZhbHVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLmRlZmluZXMgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmRlZmluZXMgPSBqc29uLmRlZmluZXM7XG5cdFx0aWYgKCBqc29uLnZlcnRleFNoYWRlciAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwudmVydGV4U2hhZGVyID0ganNvbi52ZXJ0ZXhTaGFkZXI7XG5cdFx0aWYgKCBqc29uLmZyYWdtZW50U2hhZGVyICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mcmFnbWVudFNoYWRlciA9IGpzb24uZnJhZ21lbnRTaGFkZXI7XG5cblx0XHRpZiAoIGpzb24uZXh0ZW5zaW9ucyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIga2V5IGluIGpzb24uZXh0ZW5zaW9ucyApIHtcblxuXHRcdFx0XHRtYXRlcmlhbC5leHRlbnNpb25zWyBrZXkgXSA9IGpzb24uZXh0ZW5zaW9uc1sga2V5IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIERlcHJlY2F0ZWRcblxuXHRcdGlmICgganNvbi5zaGFkaW5nICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5mbGF0U2hhZGluZyA9IGpzb24uc2hhZGluZyA9PT0gMTsgLy8gVEhSRUUuRmxhdFNoYWRpbmdcblxuXHRcdC8vIGZvciBQb2ludHNNYXRlcmlhbFxuXG5cdFx0aWYgKCBqc29uLnNpemUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLnNpemUgPSBqc29uLnNpemU7XG5cdFx0aWYgKCBqc29uLnNpemVBdHRlbnVhdGlvbiAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc2l6ZUF0dGVudWF0aW9uID0ganNvbi5zaXplQXR0ZW51YXRpb247XG5cblx0XHQvLyBtYXBzXG5cblx0XHRpZiAoIGpzb24ubWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1hcCApO1xuXHRcdGlmICgganNvbi5tYXRjYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm1hdGNhcCA9IGdldFRleHR1cmUoIGpzb24ubWF0Y2FwICk7XG5cblx0XHRpZiAoIGpzb24uYWxwaGFNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFscGhhTWFwID0gZ2V0VGV4dHVyZSgganNvbi5hbHBoYU1hcCApO1xuXG5cdFx0aWYgKCBqc29uLmJ1bXBNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmJ1bXBNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmJ1bXBNYXAgKTtcblx0XHRpZiAoIGpzb24uYnVtcFNjYWxlICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5idW1wU2NhbGUgPSBqc29uLmJ1bXBTY2FsZTtcblxuXHRcdGlmICgganNvbi5ub3JtYWxNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5vcm1hbE1hcCA9IGdldFRleHR1cmUoIGpzb24ubm9ybWFsTWFwICk7XG5cdFx0aWYgKCBqc29uLm5vcm1hbE1hcFR5cGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLm5vcm1hbE1hcFR5cGUgPSBqc29uLm5vcm1hbE1hcFR5cGU7XG5cdFx0aWYgKCBqc29uLm5vcm1hbFNjYWxlICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBub3JtYWxTY2FsZSA9IGpzb24ubm9ybWFsU2NhbGU7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbm9ybWFsU2NhbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gQmxlbmRlciBleHBvcnRlciB1c2VkIHRvIGV4cG9ydCBhIHNjYWxhci4gU2VlICM3NDU5XG5cblx0XHRcdFx0bm9ybWFsU2NhbGUgPSBbIG5vcm1hbFNjYWxlLCBub3JtYWxTY2FsZSBdO1xuXG5cdFx0XHR9XG5cblx0XHRcdG1hdGVyaWFsLm5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIG5vcm1hbFNjYWxlICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIGpzb24uZGlzcGxhY2VtZW50TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmRpc3BsYWNlbWVudE1hcCApO1xuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRTY2FsZSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZGlzcGxhY2VtZW50U2NhbGUgPSBqc29uLmRpc3BsYWNlbWVudFNjYWxlO1xuXHRcdGlmICgganNvbi5kaXNwbGFjZW1lbnRCaWFzICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5kaXNwbGFjZW1lbnRCaWFzID0ganNvbi5kaXNwbGFjZW1lbnRCaWFzO1xuXG5cdFx0aWYgKCBqc29uLnJvdWdobmVzc01hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucm91Z2huZXNzTWFwID0gZ2V0VGV4dHVyZSgganNvbi5yb3VnaG5lc3NNYXAgKTtcblx0XHRpZiAoIGpzb24ubWV0YWxuZXNzTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5tZXRhbG5lc3NNYXAgPSBnZXRUZXh0dXJlKCBqc29uLm1ldGFsbmVzc01hcCApO1xuXG5cdFx0aWYgKCBqc29uLmVtaXNzaXZlTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbWlzc2l2ZU1hcCA9IGdldFRleHR1cmUoIGpzb24uZW1pc3NpdmVNYXAgKTtcblx0XHRpZiAoIGpzb24uZW1pc3NpdmVJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVtaXNzaXZlSW50ZW5zaXR5ID0ganNvbi5lbWlzc2l2ZUludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5zcGVjdWxhck1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuc3BlY3VsYXJNYXAgPSBnZXRUZXh0dXJlKCBqc29uLnNwZWN1bGFyTWFwICk7XG5cblx0XHRpZiAoIGpzb24uZW52TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5lbnZNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmVudk1hcCApO1xuXHRcdGlmICgganNvbi5lbnZNYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmVudk1hcEludGVuc2l0eSA9IGpzb24uZW52TWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLnJlZmxlY3Rpdml0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucmVmbGVjdGl2aXR5ID0ganNvbi5yZWZsZWN0aXZpdHk7XG5cdFx0aWYgKCBqc29uLnJlZnJhY3Rpb25SYXRpbyAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwucmVmcmFjdGlvblJhdGlvID0ganNvbi5yZWZyYWN0aW9uUmF0aW87XG5cblx0XHRpZiAoIGpzb24ubGlnaHRNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmxpZ2h0TWFwID0gZ2V0VGV4dHVyZSgganNvbi5saWdodE1hcCApO1xuXHRcdGlmICgganNvbi5saWdodE1hcEludGVuc2l0eSAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwubGlnaHRNYXBJbnRlbnNpdHkgPSBqc29uLmxpZ2h0TWFwSW50ZW5zaXR5O1xuXG5cdFx0aWYgKCBqc29uLmFvTWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5hb01hcCA9IGdldFRleHR1cmUoIGpzb24uYW9NYXAgKTtcblx0XHRpZiAoIGpzb24uYW9NYXBJbnRlbnNpdHkgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmFvTWFwSW50ZW5zaXR5ID0ganNvbi5hb01hcEludGVuc2l0eTtcblxuXHRcdGlmICgganNvbi5ncmFkaWVudE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuZ3JhZGllbnRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmdyYWRpZW50TWFwICk7XG5cblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0TWFwICE9PSB1bmRlZmluZWQgKSBtYXRlcmlhbC5jbGVhcmNvYXRNYXAgPSBnZXRUZXh0dXJlKCBqc29uLmNsZWFyY29hdE1hcCApO1xuXHRcdGlmICgganNvbi5jbGVhcmNvYXRSb3VnaG5lc3NNYXAgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdFJvdWdobmVzc01hcCA9IGdldFRleHR1cmUoIGpzb24uY2xlYXJjb2F0Um91Z2huZXNzTWFwICk7XG5cdFx0aWYgKCBqc29uLmNsZWFyY29hdE5vcm1hbE1hcCAhPT0gdW5kZWZpbmVkICkgbWF0ZXJpYWwuY2xlYXJjb2F0Tm9ybWFsTWFwID0gZ2V0VGV4dHVyZSgganNvbi5jbGVhcmNvYXROb3JtYWxNYXAgKTtcblx0XHRpZiAoIGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgIT09IHVuZGVmaW5lZCApIG1hdGVyaWFsLmNsZWFyY29hdE5vcm1hbFNjYWxlID0gbmV3IFZlY3RvcjIoKS5mcm9tQXJyYXkoIGpzb24uY2xlYXJjb2F0Tm9ybWFsU2NhbGUgKTtcblxuXHRcdHJldHVybiBtYXRlcmlhbDtcblxuXHR9LFxuXG5cdHNldFRleHR1cmVzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy50ZXh0dXJlcyA9IHZhbHVlO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgRG9uIE1jQ3VyZHkgLyBodHRwczovL3d3dy5kb25tY2N1cmR5LmNvbVxuICovXG5cbnZhciBMb2FkZXJVdGlscyA9IHtcblxuXHRkZWNvZGVUZXh0OiBmdW5jdGlvbiAoIGFycmF5ICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgVGV4dERlY29kZXIgIT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKCBhcnJheSApO1xuXG5cdFx0fVxuXG5cdFx0Ly8gQXZvaWQgdGhlIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYXJyYXkpIHNob3J0Y3V0LCB3aGljaFxuXHRcdC8vIHRocm93cyBhIFwibWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIiBlcnJvciBmb3IgbGFyZ2UgYXJyYXlzLlxuXG5cdFx0dmFyIHMgPSAnJztcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBhcnJheS5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0Ly8gSW1wbGljaXRseSBhc3N1bWVzIGxpdHRsZS1lbmRpYW4uXG5cdFx0XHRzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGFycmF5WyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHRyeSB7XG5cblx0XHRcdC8vIG1lcmdlcyBtdWx0aS1ieXRlIHV0Zi04IGNoYXJhY3RlcnMuXG5cblx0XHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoIGVzY2FwZSggcyApICk7XG5cblx0XHR9IGNhdGNoICggZSApIHsgLy8gc2VlICMxNjM1OFxuXG5cdFx0XHRyZXR1cm4gcztcblxuXHRcdH1cblxuXHR9LFxuXG5cdGV4dHJhY3RVcmxCYXNlOiBmdW5jdGlvbiAoIHVybCApIHtcblxuXHRcdHZhciBpbmRleCA9IHVybC5sYXN0SW5kZXhPZiggJy8nICk7XG5cblx0XHRpZiAoIGluZGV4ID09PSAtIDEgKSByZXR1cm4gJy4vJztcblxuXHRcdHJldHVybiB1cmwuc3Vic3RyKCAwLCBpbmRleCArIDEgKTtcblxuXHR9XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBiZW5hYWRhbXMgLyBodHRwczovL3R3aXR0ZXIuY29tL2Jlbl9hX2FkYW1zXG4gKi9cblxuZnVuY3Rpb24gSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkoKSB7XG5cblx0QnVmZmVyR2VvbWV0cnkuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc7XG5cdHRoaXMubWF4SW5zdGFuY2VkQ291bnQgPSB1bmRlZmluZWQ7XG5cbn1cblxuSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksXG5cblx0aXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEJ1ZmZlckdlb21ldHJ5LnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0dGhpcy5tYXhJbnN0YW5jZWRDb3VudCA9IHNvdXJjZS5tYXhJbnN0YW5jZWRDb3VudDtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGRhdGEgPSBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEubWF4SW5zdGFuY2VkQ291bnQgPSB0aGlzLm1heEluc3RhbmNlZENvdW50O1xuXG5cdFx0ZGF0YS5pc0luc3RhbmNlZEJ1ZmZlckdlb21ldHJ5ID0gdHJ1ZTtcblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmVuYWFkYW1zIC8gaHR0cHM6Ly90d2l0dGVyLmNvbS9iZW5fYV9hZGFtc1xuICovXG5cbmZ1bmN0aW9uIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSggYXJyYXksIGl0ZW1TaXplLCBub3JtYWxpemVkLCBtZXNoUGVyQXR0cmlidXRlICkge1xuXG5cdGlmICggdHlwZW9mICggbm9ybWFsaXplZCApID09PSAnbnVtYmVyJyApIHtcblxuXHRcdG1lc2hQZXJBdHRyaWJ1dGUgPSBub3JtYWxpemVkO1xuXG5cdFx0bm9ybWFsaXplZCA9IGZhbHNlO1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTogVGhlIGNvbnN0cnVjdG9yIG5vdyBleHBlY3RzIG5vcm1hbGl6ZWQgYXMgdGhlIHRoaXJkIGFyZ3VtZW50LicgKTtcblxuXHR9XG5cblx0QnVmZmVyQXR0cmlidXRlLmNhbGwoIHRoaXMsIGFycmF5LCBpdGVtU2l6ZSwgbm9ybWFsaXplZCApO1xuXG5cdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IG1lc2hQZXJBdHRyaWJ1dGUgfHwgMTtcblxufVxuXG5JbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSxcblxuXHRpc0luc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICgpXHR7XG5cblx0XHR2YXIgZGF0YSA9IEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMgKTtcblxuXHRcdGRhdGEubWVzaFBlckF0dHJpYnV0ZSA9IHRoaXMubWVzaFBlckF0dHJpYnV0ZTtcblxuXHRcdGRhdGEuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPSB0cnVlO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBCdWZmZXJHZW9tZXRyeUxvYWRlciggbWFuYWdlciApIHtcblxuXHRMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApO1xuXG59XG5cbkJ1ZmZlckdlb21ldHJ5TG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBCdWZmZXJHZW9tZXRyeUxvYWRlcixcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblxuXHRcdHZhciBsb2FkZXIgPSBuZXcgRmlsZUxvYWRlciggc2NvcGUubWFuYWdlciApO1xuXHRcdGxvYWRlci5zZXRQYXRoKCBzY29wZS5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHRvbkxvYWQoIHNjb3BlLnBhcnNlKCBKU09OLnBhcnNlKCB0ZXh0ICkgKSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH0sXG5cblx0cGFyc2U6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBnZW9tZXRyeSA9IGpzb24uaXNJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSA/IG5ldyBJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSgpIDogbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cblx0XHR2YXIgaW5kZXggPSBqc29uLmRhdGEuaW5kZXg7XG5cblx0XHRpZiAoIGluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciB0eXBlZEFycmF5ID0gbmV3IFRZUEVEX0FSUkFZU1sgaW5kZXgudHlwZSBdKCBpbmRleC5hcnJheSApO1xuXHRcdFx0Z2VvbWV0cnkuc2V0SW5kZXgoIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIHR5cGVkQXJyYXksIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSBqc29uLmRhdGEuYXR0cmlidXRlcztcblxuXHRcdGZvciAoIHZhciBrZXkgaW4gYXR0cmlidXRlcyApIHtcblxuXHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbIGtleSBdO1xuXHRcdFx0dmFyIHR5cGVkQXJyYXkgPSBuZXcgVFlQRURfQVJSQVlTWyBhdHRyaWJ1dGUudHlwZSBdKCBhdHRyaWJ1dGUuYXJyYXkgKTtcblx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGVDb25zdHIgPSBhdHRyaWJ1dGUuaXNJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgPyBJbnN0YW5jZWRCdWZmZXJBdHRyaWJ1dGUgOiBCdWZmZXJBdHRyaWJ1dGU7XG5cdFx0XHR2YXIgYnVmZmVyQXR0cmlidXRlID0gbmV3IGJ1ZmZlckF0dHJpYnV0ZUNvbnN0ciggdHlwZWRBcnJheSwgYXR0cmlidXRlLml0ZW1TaXplLCBhdHRyaWJ1dGUubm9ybWFsaXplZCApO1xuXHRcdFx0aWYgKCBhdHRyaWJ1dGUubmFtZSAhPT0gdW5kZWZpbmVkICkgYnVmZmVyQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTtcblx0XHRcdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSgga2V5LCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdH1cblxuXHRcdHZhciBtb3JwaEF0dHJpYnV0ZXMgPSBqc29uLmRhdGEubW9ycGhBdHRyaWJ1dGVzO1xuXG5cdFx0aWYgKCBtb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdGZvciAoIHZhciBrZXkgaW4gbW9ycGhBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdHZhciBhdHRyaWJ1dGVBcnJheSA9IG1vcnBoQXR0cmlidXRlc1sga2V5IF07XG5cblx0XHRcdFx0dmFyIGFycmF5ID0gW107XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IGF0dHJpYnV0ZUFycmF5Lmxlbmd0aDsgaSA8IGlsOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZUFycmF5WyBpIF07XG5cdFx0XHRcdFx0dmFyIHR5cGVkQXJyYXkgPSBuZXcgVFlQRURfQVJSQVlTWyBhdHRyaWJ1dGUudHlwZSBdKCBhdHRyaWJ1dGUuYXJyYXkgKTtcblxuXHRcdFx0XHRcdHZhciBidWZmZXJBdHRyaWJ1dGUgPSBuZXcgQnVmZmVyQXR0cmlidXRlKCB0eXBlZEFycmF5LCBhdHRyaWJ1dGUuaXRlbVNpemUsIGF0dHJpYnV0ZS5ub3JtYWxpemVkICk7XG5cdFx0XHRcdFx0aWYgKCBhdHRyaWJ1dGUubmFtZSAhPT0gdW5kZWZpbmVkICkgYnVmZmVyQXR0cmlidXRlLm5hbWUgPSBhdHRyaWJ1dGUubmFtZTtcblx0XHRcdFx0XHRhcnJheS5wdXNoKCBidWZmZXJBdHRyaWJ1dGUgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Z2VvbWV0cnkubW9ycGhBdHRyaWJ1dGVzWyBrZXkgXSA9IGFycmF5O1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR2YXIgbW9ycGhUYXJnZXRzUmVsYXRpdmUgPSBqc29uLmRhdGEubW9ycGhUYXJnZXRzUmVsYXRpdmU7XG5cblx0XHRpZiAoIG1vcnBoVGFyZ2V0c1JlbGF0aXZlICkge1xuXG5cdFx0XHRnZW9tZXRyeS5tb3JwaFRhcmdldHNSZWxhdGl2ZSA9IHRydWU7XG5cblx0XHR9XG5cblx0XHR2YXIgZ3JvdXBzID0ganNvbi5kYXRhLmdyb3VwcyB8fCBqc29uLmRhdGEuZHJhd2NhbGxzIHx8IGpzb24uZGF0YS5vZmZzZXRzO1xuXG5cdFx0aWYgKCBncm91cHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZ3JvdXBzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR2YXIgZ3JvdXAgPSBncm91cHNbIGkgXTtcblxuXHRcdFx0XHRnZW9tZXRyeS5hZGRHcm91cCggZ3JvdXAuc3RhcnQsIGdyb3VwLmNvdW50LCBncm91cC5tYXRlcmlhbEluZGV4ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBib3VuZGluZ1NwaGVyZSA9IGpzb24uZGF0YS5ib3VuZGluZ1NwaGVyZTtcblxuXHRcdGlmICggYm91bmRpbmdTcGhlcmUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0dmFyIGNlbnRlciA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHRcdGlmICggYm91bmRpbmdTcGhlcmUuY2VudGVyICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y2VudGVyLmZyb21BcnJheSggYm91bmRpbmdTcGhlcmUuY2VudGVyICk7XG5cblx0XHRcdH1cblxuXHRcdFx0Z2VvbWV0cnkuYm91bmRpbmdTcGhlcmUgPSBuZXcgU3BoZXJlKCBjZW50ZXIsIGJvdW5kaW5nU3BoZXJlLnJhZGl1cyApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uLm5hbWUgKSBnZW9tZXRyeS5uYW1lID0ganNvbi5uYW1lO1xuXHRcdGlmICgganNvbi51c2VyRGF0YSApIGdlb21ldHJ5LnVzZXJEYXRhID0ganNvbi51c2VyRGF0YTtcblxuXHRcdHJldHVybiBnZW9tZXRyeTtcblxuXHR9XG5cbn0gKTtcblxudmFyIFRZUEVEX0FSUkFZUyA9IHtcblx0SW50OEFycmF5OiBJbnQ4QXJyYXksXG5cdFVpbnQ4QXJyYXk6IFVpbnQ4QXJyYXksXG5cdC8vIFdvcmthcm91bmQgZm9yIElFMTEgcHJlIEtCMjkyOTQzNy4gU2VlICMxMTQ0MFxuXHRVaW50OENsYW1wZWRBcnJheTogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4Q2xhbXBlZEFycmF5IDogVWludDhBcnJheSxcblx0SW50MTZBcnJheTogSW50MTZBcnJheSxcblx0VWludDE2QXJyYXk6IFVpbnQxNkFycmF5LFxuXHRJbnQzMkFycmF5OiBJbnQzMkFycmF5LFxuXHRVaW50MzJBcnJheTogVWludDMyQXJyYXksXG5cdEZsb2F0MzJBcnJheTogRmxvYXQzMkFycmF5LFxuXHRGbG9hdDY0QXJyYXk6IEZsb2F0NjRBcnJheVxufTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIE9iamVjdExvYWRlciggbWFuYWdlciApIHtcblxuXHRMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApO1xuXG59XG5cbk9iamVjdExvYWRlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMb2FkZXIucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogT2JqZWN0TG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIHBhdGggPSAoIHRoaXMucGF0aCA9PT0gJycgKSA/IExvYWRlclV0aWxzLmV4dHJhY3RVcmxCYXNlKCB1cmwgKSA6IHRoaXMucGF0aDtcblx0XHR0aGlzLnJlc291cmNlUGF0aCA9IHRoaXMucmVzb3VyY2VQYXRoIHx8IHBhdGg7XG5cblx0XHR2YXIgbG9hZGVyID0gbmV3IEZpbGVMb2FkZXIoIHNjb3BlLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR2YXIganNvbiA9IG51bGw7XG5cblx0XHRcdHRyeSB7XG5cblx0XHRcdFx0anNvbiA9IEpTT04ucGFyc2UoIHRleHQgKTtcblxuXHRcdFx0fSBjYXRjaCAoIGVycm9yICkge1xuXG5cdFx0XHRcdGlmICggb25FcnJvciAhPT0gdW5kZWZpbmVkICkgb25FcnJvciggZXJyb3IgKTtcblxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUU6T2JqZWN0TG9hZGVyOiBDYW5cXCd0IHBhcnNlICcgKyB1cmwgKyAnLicsIGVycm9yLm1lc3NhZ2UgKTtcblxuXHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIG1ldGFkYXRhID0ganNvbi5tZXRhZGF0YTtcblxuXHRcdFx0aWYgKCBtZXRhZGF0YSA9PT0gdW5kZWZpbmVkIHx8IG1ldGFkYXRhLnR5cGUgPT09IHVuZGVmaW5lZCB8fCBtZXRhZGF0YS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdnZW9tZXRyeScgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk9iamVjdExvYWRlcjogQ2FuXFwndCBsb2FkICcgKyB1cmwgKTtcblx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnBhcnNlKCBqc29uLCBvbkxvYWQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24sIG9uTG9hZCApIHtcblxuXHRcdHZhciBzaGFwZXMgPSB0aGlzLnBhcnNlU2hhcGUoIGpzb24uc2hhcGVzICk7XG5cdFx0dmFyIGdlb21ldHJpZXMgPSB0aGlzLnBhcnNlR2VvbWV0cmllcygganNvbi5nZW9tZXRyaWVzLCBzaGFwZXMgKTtcblxuXHRcdHZhciBpbWFnZXMgPSB0aGlzLnBhcnNlSW1hZ2VzKCBqc29uLmltYWdlcywgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRpZiAoIG9uTG9hZCAhPT0gdW5kZWZpbmVkICkgb25Mb2FkKCBvYmplY3QgKTtcblxuXHRcdH0gKTtcblxuXHRcdHZhciB0ZXh0dXJlcyA9IHRoaXMucGFyc2VUZXh0dXJlcygganNvbi50ZXh0dXJlcywgaW1hZ2VzICk7XG5cdFx0dmFyIG1hdGVyaWFscyA9IHRoaXMucGFyc2VNYXRlcmlhbHMoIGpzb24ubWF0ZXJpYWxzLCB0ZXh0dXJlcyApO1xuXG5cdFx0dmFyIG9iamVjdCA9IHRoaXMucGFyc2VPYmplY3QoIGpzb24ub2JqZWN0LCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKTtcblxuXHRcdGlmICgganNvbi5hbmltYXRpb25zICkge1xuXG5cdFx0XHRvYmplY3QuYW5pbWF0aW9ucyA9IHRoaXMucGFyc2VBbmltYXRpb25zKCBqc29uLmFuaW1hdGlvbnMgKTtcblxuXHRcdH1cblxuXHRcdGlmICgganNvbi5pbWFnZXMgPT09IHVuZGVmaW5lZCB8fCBqc29uLmltYWdlcy5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGlmICggb25Mb2FkICE9PSB1bmRlZmluZWQgKSBvbkxvYWQoIG9iamVjdCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iamVjdDtcblxuXHR9LFxuXG5cdHBhcnNlU2hhcGU6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBzaGFwZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBqc29uLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdFx0dmFyIHNoYXBlID0gbmV3IFNoYXBlKCkuZnJvbUpTT04oIGpzb25bIGkgXSApO1xuXG5cdFx0XHRcdHNoYXBlc1sgc2hhcGUudXVpZCBdID0gc2hhcGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fSxcblxuXHRwYXJzZUdlb21ldHJpZXM6IGZ1bmN0aW9uICgganNvbiwgc2hhcGVzICkge1xuXG5cdFx0dmFyIGdlb21ldHJpZXMgPSB7fTtcblxuXHRcdGlmICgganNvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgYnVmZmVyR2VvbWV0cnlMb2FkZXIgPSBuZXcgQnVmZmVyR2VvbWV0cnlMb2FkZXIoKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBnZW9tZXRyeTtcblx0XHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdFx0c3dpdGNoICggZGF0YS50eXBlICkge1xuXG5cdFx0XHRcdFx0Y2FzZSAnUGxhbmVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnUGxhbmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodCxcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0JveEdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdCb3hCdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnQ3ViZUdlb21ldHJ5JzogLy8gYmFja3dhcmRzIGNvbXBhdGlibGVcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEud2lkdGgsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRlcHRoLFxuXHRcdFx0XHRcdFx0XHRkYXRhLndpZHRoU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGVwdGhTZWdtZW50c1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdDaXJjbGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnQ2lyY2xlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuc2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTdGFydCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdDeWxpbmRlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDeWxpbmRlckJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzVG9wLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1c0JvdHRvbSxcblx0XHRcdFx0XHRcdFx0ZGF0YS5oZWlnaHQsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaWFsU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0U2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEub3BlbkVuZGVkLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhU3RhcnQsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFMZW5ndGhcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnQ29uZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdDb25lQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuaGVpZ2h0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLm9wZW5FbmRlZCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1NwaGVyZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdTcGhlcmVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS53aWR0aFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmhlaWdodFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aCxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0RvZGVjYWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSWNvc2FoZWRyb25HZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnSWNvc2FoZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnT2N0YWhlZHJvbkdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdPY3RhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RldHJhaGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuZGV0YWlsXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1JpbmdHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnUmluZ0J1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEuaW5uZXJSYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEub3V0ZXJSYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudGhldGFTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5waGlTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50aGV0YVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnRoZXRhTGVuZ3RoXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpdXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEudHViZSxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuYXJjXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ1RvcnVzS25vdEdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGl1cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJlLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnR1YnVsYXJTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5yYWRpYWxTZWdtZW50cyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5wLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnFcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnVHViZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdUdWJlQnVmZmVyR2VvbWV0cnknOlxuXG5cdFx0XHRcdFx0XHQvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGJ1aWx0LWluIGN1cnZlcyAoZS5nLiBDYXRtdWxsUm9tQ3VydmUzKS5cblx0XHRcdFx0XHRcdC8vIFVzZXIgZGVmaW5lZCBjdXJ2ZXMgb3IgaW5zdGFuY2VzIG9mIEN1cnZlUGF0aCB3aWxsIG5vdCBiZSBkZXNlcmlhbGl6ZWQuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0bmV3IEN1cnZlc1sgZGF0YS5wYXRoLnR5cGUgXSgpLmZyb21KU09OKCBkYXRhLnBhdGggKSxcblx0XHRcdFx0XHRcdFx0ZGF0YS50dWJ1bGFyU2VnbWVudHMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnJhZGlhbFNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmNsb3NlZFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdMYXRoZUdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdMYXRoZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0Z2VvbWV0cnkgPSBuZXcgR2VvbWV0cmllc1sgZGF0YS50eXBlIF0oXG5cdFx0XHRcdFx0XHRcdGRhdGEucG9pbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnNlZ21lbnRzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaVN0YXJ0LFxuXHRcdFx0XHRcdFx0XHRkYXRhLnBoaUxlbmd0aFxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdQb2x5aGVkcm9uR2VvbWV0cnknOlxuXHRcdFx0XHRcdGNhc2UgJ1BvbHloZWRyb25CdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRkYXRhLnZlcnRpY2VzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmluZGljZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEucmFkaXVzLFxuXHRcdFx0XHRcdFx0XHRkYXRhLmRldGFpbHNcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnU2hhcGVCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdHZhciBnZW9tZXRyeVNoYXBlcyA9IFtdO1xuXG5cdFx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIGpsID0gZGF0YS5zaGFwZXMubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdFx0dmFyIHNoYXBlID0gc2hhcGVzWyBkYXRhLnNoYXBlc1sgaiBdIF07XG5cblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMucHVzaCggc2hhcGUgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnZW9tZXRyeSA9IG5ldyBHZW9tZXRyaWVzWyBkYXRhLnR5cGUgXShcblx0XHRcdFx0XHRcdFx0Z2VvbWV0cnlTaGFwZXMsXG5cdFx0XHRcdFx0XHRcdGRhdGEuY3VydmVTZWdtZW50c1xuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblxuXHRcdFx0XHRcdGNhc2UgJ0V4dHJ1ZGVHZW9tZXRyeSc6XG5cdFx0XHRcdFx0Y2FzZSAnRXh0cnVkZUJ1ZmZlckdlb21ldHJ5JzpcblxuXHRcdFx0XHRcdFx0dmFyIGdlb21ldHJ5U2hhcGVzID0gW107XG5cblx0XHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSBkYXRhLnNoYXBlcy5sZW5ndGg7IGogPCBqbDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0XHR2YXIgc2hhcGUgPSBzaGFwZXNbIGRhdGEuc2hhcGVzWyBqIF0gXTtcblxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcy5wdXNoKCBzaGFwZSApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBleHRydWRlUGF0aCA9IGRhdGEub3B0aW9ucy5leHRydWRlUGF0aDtcblxuXHRcdFx0XHRcdFx0aWYgKCBleHRydWRlUGF0aCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdGRhdGEub3B0aW9ucy5leHRydWRlUGF0aCA9IG5ldyBDdXJ2ZXNbIGV4dHJ1ZGVQYXRoLnR5cGUgXSgpLmZyb21KU09OKCBleHRydWRlUGF0aCApO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gbmV3IEdlb21ldHJpZXNbIGRhdGEudHlwZSBdKFxuXHRcdFx0XHRcdFx0XHRnZW9tZXRyeVNoYXBlcyxcblx0XHRcdFx0XHRcdFx0ZGF0YS5vcHRpb25zXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdGNhc2UgJ0J1ZmZlckdlb21ldHJ5Jzpcblx0XHRcdFx0XHRjYXNlICdJbnN0YW5jZWRCdWZmZXJHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGdlb21ldHJ5ID0gYnVmZmVyR2VvbWV0cnlMb2FkZXIucGFyc2UoIGRhdGEgKTtcblxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0XHRjYXNlICdHZW9tZXRyeSc6XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5PYmplY3RMb2FkZXI6IExvYWRpbmcgXCJHZW9tZXRyeVwiIGlzIG5vdCBzdXBwb3J0ZWQgYW55bW9yZS4nICk7XG5cblx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbnN1cHBvcnRlZCBnZW9tZXRyeSB0eXBlIFwiJyArIGRhdGEudHlwZSArICdcIicgKTtcblxuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGdlb21ldHJ5LnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIGdlb21ldHJ5Lm5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0XHRcdGlmICggZ2VvbWV0cnkuaXNCdWZmZXJHZW9tZXRyeSA9PT0gdHJ1ZSAmJiBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBnZW9tZXRyeS51c2VyRGF0YSA9IGRhdGEudXNlckRhdGE7XG5cblx0XHRcdFx0Z2VvbWV0cmllc1sgZGF0YS51dWlkIF0gPSBnZW9tZXRyeTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIGdlb21ldHJpZXM7XG5cblx0fSxcblxuXHRwYXJzZU1hdGVyaWFsczogZnVuY3Rpb24gKCBqc29uLCB0ZXh0dXJlcyApIHtcblxuXHRcdHZhciBjYWNoZSA9IHt9OyAvLyBNdWx0aU1hdGVyaWFsXG5cdFx0dmFyIG1hdGVyaWFscyA9IHt9O1xuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBsb2FkZXIgPSBuZXcgTWF0ZXJpYWxMb2FkZXIoKTtcblx0XHRcdGxvYWRlci5zZXRUZXh0dXJlcyggdGV4dHVyZXMgKTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS50eXBlID09PSAnTXVsdGlNYXRlcmlhbCcgKSB7XG5cblx0XHRcdFx0XHQvLyBEZXByZWNhdGVkXG5cblx0XHRcdFx0XHR2YXIgYXJyYXkgPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMDsgaiA8IGRhdGEubWF0ZXJpYWxzLmxlbmd0aDsgaiArKyApIHtcblxuXHRcdFx0XHRcdFx0dmFyIG1hdGVyaWFsID0gZGF0YS5tYXRlcmlhbHNbIGogXTtcblxuXHRcdFx0XHRcdFx0aWYgKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGVbIG1hdGVyaWFsLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggbWF0ZXJpYWwgKTtcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRhcnJheS5wdXNoKCBjYWNoZVsgbWF0ZXJpYWwudXVpZCBdICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtYXRlcmlhbHNbIGRhdGEudXVpZCBdID0gYXJyYXk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGRhdGEudXVpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdGNhY2hlWyBkYXRhLnV1aWQgXSA9IGxvYWRlci5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0bWF0ZXJpYWxzWyBkYXRhLnV1aWQgXSA9IGNhY2hlWyBkYXRhLnV1aWQgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRlcmlhbHM7XG5cblx0fSxcblxuXHRwYXJzZUFuaW1hdGlvbnM6IGZ1bmN0aW9uICgganNvbiApIHtcblxuXHRcdHZhciBhbmltYXRpb25zID0gW107XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBqc29uLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFyIGRhdGEgPSBqc29uWyBpIF07XG5cblx0XHRcdHZhciBjbGlwID0gQW5pbWF0aW9uQ2xpcC5wYXJzZSggZGF0YSApO1xuXG5cdFx0XHRpZiAoIGRhdGEudXVpZCAhPT0gdW5kZWZpbmVkICkgY2xpcC51dWlkID0gZGF0YS51dWlkO1xuXG5cdFx0XHRhbmltYXRpb25zLnB1c2goIGNsaXAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBhbmltYXRpb25zO1xuXG5cdH0sXG5cblx0cGFyc2VJbWFnZXM6IGZ1bmN0aW9uICgganNvbiwgb25Mb2FkICkge1xuXG5cdFx0dmFyIHNjb3BlID0gdGhpcztcblx0XHR2YXIgaW1hZ2VzID0ge307XG5cblx0XHRmdW5jdGlvbiBsb2FkSW1hZ2UoIHVybCApIHtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtU3RhcnQoIHVybCApO1xuXG5cdFx0XHRyZXR1cm4gbG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHRcdH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBqc29uICE9PSB1bmRlZmluZWQgJiYganNvbi5sZW5ndGggPiAwICkge1xuXG5cdFx0XHR2YXIgbWFuYWdlciA9IG5ldyBMb2FkaW5nTWFuYWdlciggb25Mb2FkICk7XG5cblx0XHRcdHZhciBsb2FkZXIgPSBuZXcgSW1hZ2VMb2FkZXIoIG1hbmFnZXIgKTtcblx0XHRcdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGlsID0ganNvbi5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgaW1hZ2UgPSBqc29uWyBpIF07XG5cdFx0XHRcdHZhciB1cmwgPSBpbWFnZS51cmw7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB1cmwgKSApIHtcblxuXHRcdFx0XHRcdC8vIGxvYWQgYXJyYXkgb2YgaW1hZ2VzIGUuZyBDdWJlVGV4dHVyZVxuXG5cdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0gPSBbXTtcblxuXHRcdFx0XHRcdGZvciAoIHZhciBqID0gMCwgamwgPSB1cmwubGVuZ3RoOyBqIDwgamw7IGogKysgKSB7XG5cblx0XHRcdFx0XHRcdHZhciBjdXJyZW50VXJsID0gdXJsWyBqIF07XG5cblx0XHRcdFx0XHRcdHZhciBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCBjdXJyZW50VXJsICkgPyBjdXJyZW50VXJsIDogc2NvcGUucmVzb3VyY2VQYXRoICsgY3VycmVudFVybDtcblxuXHRcdFx0XHRcdFx0aW1hZ2VzWyBpbWFnZS51dWlkIF0ucHVzaCggbG9hZEltYWdlKCBwYXRoICkgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gbG9hZCBzaW5nbGUgaW1hZ2VcblxuXHRcdFx0XHRcdHZhciBwYXRoID0gL14oXFwvXFwvKXwoW2Etel0rOihcXC9cXC8pPykvaS50ZXN0KCBpbWFnZS51cmwgKSA/IGltYWdlLnVybCA6IHNjb3BlLnJlc291cmNlUGF0aCArIGltYWdlLnVybDtcblxuXHRcdFx0XHRcdGltYWdlc1sgaW1hZ2UudXVpZCBdID0gbG9hZEltYWdlKCBwYXRoICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gaW1hZ2VzO1xuXG5cdH0sXG5cblx0cGFyc2VUZXh0dXJlczogZnVuY3Rpb24gKCBqc29uLCBpbWFnZXMgKSB7XG5cblx0XHRmdW5jdGlvbiBwYXJzZUNvbnN0YW50KCB2YWx1ZSwgdHlwZSApIHtcblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICkgcmV0dXJuIHZhbHVlO1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VUZXh0dXJlOiBDb25zdGFudCBzaG91bGQgYmUgaW4gbnVtZXJpYyBmb3JtLicsIHZhbHVlICk7XG5cblx0XHRcdHJldHVybiB0eXBlWyB2YWx1ZSBdO1xuXG5cdFx0fVxuXG5cdFx0dmFyIHRleHR1cmVzID0ge307XG5cblx0XHRpZiAoIGpzb24gIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBsID0ganNvbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHZhciBkYXRhID0ganNvblsgaSBdO1xuXG5cdFx0XHRcdGlmICggZGF0YS5pbWFnZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBObyBcImltYWdlXCIgc3BlY2lmaWVkIGZvcicsIGRhdGEudXVpZCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIGltYWdlc1sgZGF0YS5pbWFnZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBpbWFnZScsIGRhdGEuaW1hZ2UgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHRleHR1cmU7XG5cblx0XHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApICkge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBDdWJlVGV4dHVyZSggaW1hZ2VzWyBkYXRhLmltYWdlIF0gKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0dGV4dHVyZSA9IG5ldyBUZXh0dXJlKCBpbWFnZXNbIGRhdGEuaW1hZ2UgXSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0XHR0ZXh0dXJlLnV1aWQgPSBkYXRhLnV1aWQ7XG5cblx0XHRcdFx0aWYgKCBkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdFx0XHRpZiAoIGRhdGEubWFwcGluZyAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5tYXBwaW5nID0gcGFyc2VDb25zdGFudCggZGF0YS5tYXBwaW5nLCBURVhUVVJFX01BUFBJTkcgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEub2Zmc2V0ICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm9mZnNldC5mcm9tQXJyYXkoIGRhdGEub2Zmc2V0ICk7XG5cdFx0XHRcdGlmICggZGF0YS5yZXBlYXQgIT09IHVuZGVmaW5lZCApIHRleHR1cmUucmVwZWF0LmZyb21BcnJheSggZGF0YS5yZXBlYXQgKTtcblx0XHRcdFx0aWYgKCBkYXRhLmNlbnRlciAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5jZW50ZXIuZnJvbUFycmF5KCBkYXRhLmNlbnRlciApO1xuXHRcdFx0XHRpZiAoIGRhdGEucm90YXRpb24gIT09IHVuZGVmaW5lZCApIHRleHR1cmUucm90YXRpb24gPSBkYXRhLnJvdGF0aW9uO1xuXG5cdFx0XHRcdGlmICggZGF0YS53cmFwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHR0ZXh0dXJlLndyYXBTID0gcGFyc2VDb25zdGFudCggZGF0YS53cmFwWyAwIF0sIFRFWFRVUkVfV1JBUFBJTkcgKTtcblx0XHRcdFx0XHR0ZXh0dXJlLndyYXBUID0gcGFyc2VDb25zdGFudCggZGF0YS53cmFwWyAxIF0sIFRFWFRVUkVfV1JBUFBJTkcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvcm1hdCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mb3JtYXQgPSBkYXRhLmZvcm1hdDtcblx0XHRcdFx0aWYgKCBkYXRhLnR5cGUgIT09IHVuZGVmaW5lZCApIHRleHR1cmUudHlwZSA9IGRhdGEudHlwZTtcblx0XHRcdFx0aWYgKCBkYXRhLmVuY29kaW5nICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLmVuY29kaW5nID0gZGF0YS5lbmNvZGluZztcblxuXHRcdFx0XHRpZiAoIGRhdGEubWluRmlsdGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1pbkZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWluRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApO1xuXHRcdFx0XHRpZiAoIGRhdGEubWFnRmlsdGVyICE9PSB1bmRlZmluZWQgKSB0ZXh0dXJlLm1hZ0ZpbHRlciA9IHBhcnNlQ29uc3RhbnQoIGRhdGEubWFnRmlsdGVyLCBURVhUVVJFX0ZJTFRFUiApO1xuXHRcdFx0XHRpZiAoIGRhdGEuYW5pc290cm9weSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5hbmlzb3Ryb3B5ID0gZGF0YS5hbmlzb3Ryb3B5O1xuXG5cdFx0XHRcdGlmICggZGF0YS5mbGlwWSAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS5mbGlwWSA9IGRhdGEuZmxpcFk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLnByZW11bHRpcGx5QWxwaGEgIT09IHVuZGVmaW5lZCApIHRleHR1cmUucHJlbXVsdGlwbHlBbHBoYSA9IGRhdGEucHJlbXVsdGlwbHlBbHBoYTtcblx0XHRcdFx0aWYgKCBkYXRhLnVucGFja0FsaWdubWVudCAhPT0gdW5kZWZpbmVkICkgdGV4dHVyZS51bnBhY2tBbGlnbm1lbnQgPSBkYXRhLnVucGFja0FsaWdubWVudDtcblxuXHRcdFx0XHR0ZXh0dXJlc1sgZGF0YS51dWlkIF0gPSB0ZXh0dXJlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGV4dHVyZXM7XG5cblx0fSxcblxuXHRwYXJzZU9iamVjdDogZnVuY3Rpb24gKCBkYXRhLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKSB7XG5cblx0XHR2YXIgb2JqZWN0O1xuXG5cdFx0ZnVuY3Rpb24gZ2V0R2VvbWV0cnkoIG5hbWUgKSB7XG5cblx0XHRcdGlmICggZ2VvbWV0cmllc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgZ2VvbWV0cnknLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGdlb21ldHJpZXNbIG5hbWUgXTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldE1hdGVyaWFsKCBuYW1lICkge1xuXG5cdFx0XHRpZiAoIG5hbWUgPT09IHVuZGVmaW5lZCApIHJldHVybiB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXG5cdFx0XHRcdHZhciBhcnJheSA9IFtdO1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHRcdHZhciB1dWlkID0gbmFtZVsgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBtYXRlcmlhbHNbIHV1aWQgXSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXI6IFVuZGVmaW5lZCBtYXRlcmlhbCcsIHV1aWQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFycmF5LnB1c2goIG1hdGVyaWFsc1sgdXVpZCBdICk7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBhcnJheTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG1hdGVyaWFsc1sgbmFtZSBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0TG9hZGVyOiBVbmRlZmluZWQgbWF0ZXJpYWwnLCBuYW1lICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGVyaWFsc1sgbmFtZSBdO1xuXG5cdFx0fVxuXG5cdFx0c3dpdGNoICggZGF0YS50eXBlICkge1xuXG5cdFx0XHRjYXNlICdTY2VuZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNjZW5lKCk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmJhY2tncm91bmQgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGlmICggTnVtYmVyLmlzSW50ZWdlciggZGF0YS5iYWNrZ3JvdW5kICkgKSB7XG5cblx0XHRcdFx0XHRcdG9iamVjdC5iYWNrZ3JvdW5kID0gbmV3IENvbG9yKCBkYXRhLmJhY2tncm91bmQgKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0aWYgKCBkYXRhLmZvZy50eXBlID09PSAnRm9nJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2coIGRhdGEuZm9nLmNvbG9yLCBkYXRhLmZvZy5uZWFyLCBkYXRhLmZvZy5mYXIgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGRhdGEuZm9nLnR5cGUgPT09ICdGb2dFeHAyJyApIHtcblxuXHRcdFx0XHRcdFx0b2JqZWN0LmZvZyA9IG5ldyBGb2dFeHAyKCBkYXRhLmZvZy5jb2xvciwgZGF0YS5mb2cuZGVuc2l0eSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUGVyc3BlY3RpdmVDYW1lcmEnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBQZXJzcGVjdGl2ZUNhbWVyYSggZGF0YS5mb3YsIGRhdGEuYXNwZWN0LCBkYXRhLm5lYXIsIGRhdGEuZmFyICk7XG5cblx0XHRcdFx0aWYgKCBkYXRhLmZvY3VzICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZm9jdXMgPSBkYXRhLmZvY3VzO1xuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS5maWxtR2F1Z2UgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtR2F1Z2UgPSBkYXRhLmZpbG1HYXVnZTtcblx0XHRcdFx0aWYgKCBkYXRhLmZpbG1PZmZzZXQgIT09IHVuZGVmaW5lZCApIG9iamVjdC5maWxtT2Zmc2V0ID0gZGF0YS5maWxtT2Zmc2V0O1xuXHRcdFx0XHRpZiAoIGRhdGEudmlldyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnZpZXcgPSBPYmplY3QuYXNzaWduKCB7fSwgZGF0YS52aWV3ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ09ydGhvZ3JhcGhpY0NhbWVyYSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSggZGF0YS5sZWZ0LCBkYXRhLnJpZ2h0LCBkYXRhLnRvcCwgZGF0YS5ib3R0b20sIGRhdGEubmVhciwgZGF0YS5mYXIgKTtcblxuXHRcdFx0XHRpZiAoIGRhdGEuem9vbSAhPT0gdW5kZWZpbmVkICkgb2JqZWN0Lnpvb20gPSBkYXRhLnpvb207XG5cdFx0XHRcdGlmICggZGF0YS52aWV3ICE9PSB1bmRlZmluZWQgKSBvYmplY3QudmlldyA9IE9iamVjdC5hc3NpZ24oIHt9LCBkYXRhLnZpZXcgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnQW1iaWVudExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgQW1iaWVudExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdEaXJlY3Rpb25hbExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCggZGF0YS5jb2xvciwgZGF0YS5pbnRlbnNpdHkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnUG9pbnRMaWdodCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFBvaW50TGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuaW50ZW5zaXR5LCBkYXRhLmRpc3RhbmNlLCBkYXRhLmRlY2F5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1JlY3RBcmVhTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBSZWN0QXJlYUxpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS53aWR0aCwgZGF0YS5oZWlnaHQgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnU3BvdExpZ2h0JzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgU3BvdExpZ2h0KCBkYXRhLmNvbG9yLCBkYXRhLmludGVuc2l0eSwgZGF0YS5kaXN0YW5jZSwgZGF0YS5hbmdsZSwgZGF0YS5wZW51bWJyYSwgZGF0YS5kZWNheSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdIZW1pc3BoZXJlTGlnaHQnOlxuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBIZW1pc3BoZXJlTGlnaHQoIGRhdGEuY29sb3IsIGRhdGEuZ3JvdW5kQ29sb3IsIGRhdGEuaW50ZW5zaXR5ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1NraW5uZWRNZXNoJzpcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3RMb2FkZXIucGFyc2VPYmplY3QoKSBkb2VzIG5vdCBzdXBwb3J0IFNraW5uZWRNZXNoIHlldC4nICk7XG5cblx0XHRcdGNhc2UgJ01lc2gnOlxuXG5cdFx0XHRcdHZhciBnZW9tZXRyeSA9IGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICk7XG5cdFx0XHRcdHZhciBtYXRlcmlhbCA9IGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICk7XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE1lc2goIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdJbnN0YW5jZWRNZXNoJzpcblxuXHRcdFx0XHR2YXIgZ2VvbWV0cnkgPSBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApO1xuXHRcdFx0XHR2YXIgbWF0ZXJpYWwgPSBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApO1xuXHRcdFx0XHR2YXIgY291bnQgPSBkYXRhLmNvdW50O1xuXHRcdFx0XHR2YXIgaW5zdGFuY2VNYXRyaXggPSBkYXRhLmluc3RhbmNlTWF0cml4O1xuXG5cdFx0XHRcdG9iamVjdCA9IG5ldyBJbnN0YW5jZWRNZXNoKCBnZW9tZXRyeSwgbWF0ZXJpYWwsIGNvdW50ICk7XG5cdFx0XHRcdG9iamVjdC5pbnN0YW5jZU1hdHJpeCA9IG5ldyBCdWZmZXJBdHRyaWJ1dGUoIG5ldyBGbG9hdDMyQXJyYXkoIGluc3RhbmNlTWF0cml4LmFycmF5ICksIDE2ICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xPRCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IExPRCgpO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdMaW5lJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZSggZ2V0R2VvbWV0cnkoIGRhdGEuZ2VvbWV0cnkgKSwgZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSwgZGF0YS5tb2RlICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ0xpbmVMb29wJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZUxvb3AoIGdldEdlb21ldHJ5KCBkYXRhLmdlb21ldHJ5ICksIGdldE1hdGVyaWFsKCBkYXRhLm1hdGVyaWFsICkgKTtcblxuXHRcdFx0XHRicmVhaztcblxuXHRcdFx0Y2FzZSAnTGluZVNlZ21lbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgTGluZVNlZ21lbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1BvaW50Q2xvdWQnOlxuXHRcdFx0Y2FzZSAnUG9pbnRzJzpcblxuXHRcdFx0XHRvYmplY3QgPSBuZXcgUG9pbnRzKCBnZXRHZW9tZXRyeSggZGF0YS5nZW9tZXRyeSApLCBnZXRNYXRlcmlhbCggZGF0YS5tYXRlcmlhbCApICk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGNhc2UgJ1Nwcml0ZSc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IFNwcml0ZSggZ2V0TWF0ZXJpYWwoIGRhdGEubWF0ZXJpYWwgKSApO1xuXG5cdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRjYXNlICdHcm91cCc6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IEdyb3VwKCk7XG5cblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdGRlZmF1bHQ6XG5cblx0XHRcdFx0b2JqZWN0ID0gbmV3IE9iamVjdDNEKCk7XG5cblx0XHR9XG5cblx0XHRvYmplY3QudXVpZCA9IGRhdGEudXVpZDtcblxuXHRcdGlmICggZGF0YS5uYW1lICE9PSB1bmRlZmluZWQgKSBvYmplY3QubmFtZSA9IGRhdGEubmFtZTtcblxuXHRcdGlmICggZGF0YS5tYXRyaXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0b2JqZWN0Lm1hdHJpeC5mcm9tQXJyYXkoIGRhdGEubWF0cml4ICk7XG5cblx0XHRcdGlmICggZGF0YS5tYXRyaXhBdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSBvYmplY3QubWF0cml4QXV0b1VwZGF0ZSA9IGRhdGEubWF0cml4QXV0b1VwZGF0ZTtcblx0XHRcdGlmICggb2JqZWN0Lm1hdHJpeEF1dG9VcGRhdGUgKSBvYmplY3QubWF0cml4LmRlY29tcG9zZSggb2JqZWN0LnBvc2l0aW9uLCBvYmplY3QucXVhdGVybmlvbiwgb2JqZWN0LnNjYWxlICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRpZiAoIGRhdGEucG9zaXRpb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5wb3NpdGlvbi5mcm9tQXJyYXkoIGRhdGEucG9zaXRpb24gKTtcblx0XHRcdGlmICggZGF0YS5yb3RhdGlvbiAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJvdGF0aW9uLmZyb21BcnJheSggZGF0YS5yb3RhdGlvbiApO1xuXHRcdFx0aWYgKCBkYXRhLnF1YXRlcm5pb24gIT09IHVuZGVmaW5lZCApIG9iamVjdC5xdWF0ZXJuaW9uLmZyb21BcnJheSggZGF0YS5xdWF0ZXJuaW9uICk7XG5cdFx0XHRpZiAoIGRhdGEuc2NhbGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zY2FsZS5mcm9tQXJyYXkoIGRhdGEuc2NhbGUgKTtcblxuXHRcdH1cblxuXHRcdGlmICggZGF0YS5jYXN0U2hhZG93ICE9PSB1bmRlZmluZWQgKSBvYmplY3QuY2FzdFNoYWRvdyA9IGRhdGEuY2FzdFNoYWRvdztcblx0XHRpZiAoIGRhdGEucmVjZWl2ZVNoYWRvdyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnJlY2VpdmVTaGFkb3cgPSBkYXRhLnJlY2VpdmVTaGFkb3c7XG5cblx0XHRpZiAoIGRhdGEuc2hhZG93ICkge1xuXG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LmJpYXMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cuYmlhcyA9IGRhdGEuc2hhZG93LmJpYXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93LnJhZGl1cyAhPT0gdW5kZWZpbmVkICkgb2JqZWN0LnNoYWRvdy5yYWRpdXMgPSBkYXRhLnNoYWRvdy5yYWRpdXM7XG5cdFx0XHRpZiAoIGRhdGEuc2hhZG93Lm1hcFNpemUgIT09IHVuZGVmaW5lZCApIG9iamVjdC5zaGFkb3cubWFwU2l6ZS5mcm9tQXJyYXkoIGRhdGEuc2hhZG93Lm1hcFNpemUgKTtcblx0XHRcdGlmICggZGF0YS5zaGFkb3cuY2FtZXJhICE9PSB1bmRlZmluZWQgKSBvYmplY3Quc2hhZG93LmNhbWVyYSA9IHRoaXMucGFyc2VPYmplY3QoIGRhdGEuc2hhZG93LmNhbWVyYSApO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnZpc2libGUgIT09IHVuZGVmaW5lZCApIG9iamVjdC52aXNpYmxlID0gZGF0YS52aXNpYmxlO1xuXHRcdGlmICggZGF0YS5mcnVzdHVtQ3VsbGVkICE9PSB1bmRlZmluZWQgKSBvYmplY3QuZnJ1c3R1bUN1bGxlZCA9IGRhdGEuZnJ1c3R1bUN1bGxlZDtcblx0XHRpZiAoIGRhdGEucmVuZGVyT3JkZXIgIT09IHVuZGVmaW5lZCApIG9iamVjdC5yZW5kZXJPcmRlciA9IGRhdGEucmVuZGVyT3JkZXI7XG5cdFx0aWYgKCBkYXRhLnVzZXJEYXRhICE9PSB1bmRlZmluZWQgKSBvYmplY3QudXNlckRhdGEgPSBkYXRhLnVzZXJEYXRhO1xuXHRcdGlmICggZGF0YS5sYXllcnMgIT09IHVuZGVmaW5lZCApIG9iamVjdC5sYXllcnMubWFzayA9IGRhdGEubGF5ZXJzO1xuXG5cdFx0aWYgKCBkYXRhLmNoaWxkcmVuICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBjaGlsZHJlbiA9IGRhdGEuY2hpbGRyZW47XG5cblx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0XHRvYmplY3QuYWRkKCB0aGlzLnBhcnNlT2JqZWN0KCBjaGlsZHJlblsgaSBdLCBnZW9tZXRyaWVzLCBtYXRlcmlhbHMgKSApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIGRhdGEudHlwZSA9PT0gJ0xPRCcgKSB7XG5cblx0XHRcdGlmICggZGF0YS5hdXRvVXBkYXRlICE9PSB1bmRlZmluZWQgKSBvYmplY3QuYXV0b1VwZGF0ZSA9IGRhdGEuYXV0b1VwZGF0ZTtcblxuXHRcdFx0dmFyIGxldmVscyA9IGRhdGEubGV2ZWxzO1xuXG5cdFx0XHRmb3IgKCB2YXIgbCA9IDA7IGwgPCBsZXZlbHMubGVuZ3RoOyBsICsrICkge1xuXG5cdFx0XHRcdHZhciBsZXZlbCA9IGxldmVsc1sgbCBdO1xuXHRcdFx0XHR2YXIgY2hpbGQgPSBvYmplY3QuZ2V0T2JqZWN0QnlQcm9wZXJ0eSggJ3V1aWQnLCBsZXZlbC5vYmplY3QgKTtcblxuXHRcdFx0XHRpZiAoIGNoaWxkICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRvYmplY3QuYWRkTGV2ZWwoIGNoaWxkLCBsZXZlbC5kaXN0YW5jZSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iamVjdDtcblxuXHR9XG5cbn0gKTtcblxudmFyIFRFWFRVUkVfTUFQUElORyA9IHtcblx0VVZNYXBwaW5nOiBVVk1hcHBpbmcsXG5cdEN1YmVSZWZsZWN0aW9uTWFwcGluZzogQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlUmVmcmFjdGlvbk1hcHBpbmc6IEN1YmVSZWZyYWN0aW9uTWFwcGluZyxcblx0RXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmc6IEVxdWlyZWN0YW5ndWxhclJlZmxlY3Rpb25NYXBwaW5nLFxuXHRFcXVpcmVjdGFuZ3VsYXJSZWZyYWN0aW9uTWFwcGluZzogRXF1aXJlY3Rhbmd1bGFyUmVmcmFjdGlvbk1hcHBpbmcsXG5cdFNwaGVyaWNhbFJlZmxlY3Rpb25NYXBwaW5nOiBTcGhlcmljYWxSZWZsZWN0aW9uTWFwcGluZyxcblx0Q3ViZVVWUmVmbGVjdGlvbk1hcHBpbmc6IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nLFxuXHRDdWJlVVZSZWZyYWN0aW9uTWFwcGluZzogQ3ViZVVWUmVmcmFjdGlvbk1hcHBpbmdcbn07XG5cbnZhciBURVhUVVJFX1dSQVBQSU5HID0ge1xuXHRSZXBlYXRXcmFwcGluZzogUmVwZWF0V3JhcHBpbmcsXG5cdENsYW1wVG9FZGdlV3JhcHBpbmc6IENsYW1wVG9FZGdlV3JhcHBpbmcsXG5cdE1pcnJvcmVkUmVwZWF0V3JhcHBpbmc6IE1pcnJvcmVkUmVwZWF0V3JhcHBpbmdcbn07XG5cbnZhciBURVhUVVJFX0ZJTFRFUiA9IHtcblx0TmVhcmVzdEZpbHRlcjogTmVhcmVzdEZpbHRlcixcblx0TmVhcmVzdE1pcG1hcE5lYXJlc3RGaWx0ZXI6IE5lYXJlc3RNaXBtYXBOZWFyZXN0RmlsdGVyLFxuXHROZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyOiBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLFxuXHRMaW5lYXJGaWx0ZXI6IExpbmVhckZpbHRlcixcblx0TGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcjogTGluZWFyTWlwbWFwTmVhcmVzdEZpbHRlcixcblx0TGluZWFyTWlwbWFwTGluZWFyRmlsdGVyOiBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXJcbn07XG5cbi8qKlxuICogQGF1dGhvciB0aGVzcGl0ZSAvIGh0dHA6Ly9jbGlja3RvcmVsZWFzZS5jb20vXG4gKi9cblxuXG5mdW5jdGlvbiBJbWFnZUJpdG1hcExvYWRlciggbWFuYWdlciApIHtcblxuXHRpZiAoIHR5cGVvZiBjcmVhdGVJbWFnZUJpdG1hcCA9PT0gJ3VuZGVmaW5lZCcgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZUJpdG1hcExvYWRlcjogY3JlYXRlSW1hZ2VCaXRtYXAoKSBub3Qgc3VwcG9ydGVkLicgKTtcblxuXHR9XG5cblx0aWYgKCB0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VCaXRtYXBMb2FkZXI6IGZldGNoKCkgbm90IHN1cHBvcnRlZC4nICk7XG5cblx0fVxuXG5cdExvYWRlci5jYWxsKCB0aGlzLCBtYW5hZ2VyICk7XG5cblx0dGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuXG59XG5cbkltYWdlQml0bWFwTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBJbWFnZUJpdG1hcExvYWRlcixcblxuXHRzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKCBvcHRpb25zICkge1xuXG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bG9hZDogZnVuY3Rpb24gKCB1cmwsIG9uTG9hZCwgb25Qcm9ncmVzcywgb25FcnJvciApIHtcblxuXHRcdGlmICggdXJsID09PSB1bmRlZmluZWQgKSB1cmwgPSAnJztcblxuXHRcdGlmICggdGhpcy5wYXRoICE9PSB1bmRlZmluZWQgKSB1cmwgPSB0aGlzLnBhdGggKyB1cmw7XG5cblx0XHR1cmwgPSB0aGlzLm1hbmFnZXIucmVzb2x2ZVVSTCggdXJsICk7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNhY2hlZCA9IENhY2hlLmdldCggdXJsICk7XG5cblx0XHRpZiAoIGNhY2hlZCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0XHRcdHNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggY2FjaGVkICk7XG5cblx0XHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdFx0fSwgMCApO1xuXG5cdFx0XHRyZXR1cm4gY2FjaGVkO1xuXG5cdFx0fVxuXG5cdFx0ZmV0Y2goIHVybCApLnRoZW4oIGZ1bmN0aW9uICggcmVzICkge1xuXG5cdFx0XHRyZXR1cm4gcmVzLmJsb2IoKTtcblxuXHRcdH0gKS50aGVuKCBmdW5jdGlvbiAoIGJsb2IgKSB7XG5cblx0XHRcdGlmICggc2NvcGUub3B0aW9ucyA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIFdvcmthcm91bmQgZm9yIEZpcmVGb3guIEl0IGNhdXNlcyBhbiBlcnJvciBpZiB5b3UgcGFzcyBvcHRpb25zLlxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRyZXR1cm4gY3JlYXRlSW1hZ2VCaXRtYXAoIGJsb2IsIHNjb3BlLm9wdGlvbnMgKTtcblxuXHRcdFx0fVxuXG5cdFx0fSApLnRoZW4oIGZ1bmN0aW9uICggaW1hZ2VCaXRtYXAgKSB7XG5cblx0XHRcdENhY2hlLmFkZCggdXJsLCBpbWFnZUJpdG1hcCApO1xuXG5cdFx0XHRpZiAoIG9uTG9hZCApIG9uTG9hZCggaW1hZ2VCaXRtYXAgKTtcblxuXHRcdFx0c2NvcGUubWFuYWdlci5pdGVtRW5kKCB1cmwgKTtcblxuXHRcdH0gKS5jYXRjaCggZnVuY3Rpb24gKCBlICkge1xuXG5cdFx0XHRpZiAoIG9uRXJyb3IgKSBvbkVycm9yKCBlICk7XG5cblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVycm9yKCB1cmwgKTtcblx0XHRcdHNjb3BlLm1hbmFnZXIuaXRlbUVuZCggdXJsICk7XG5cblx0XHR9ICk7XG5cblx0XHRzY29wZS5tYW5hZ2VyLml0ZW1TdGFydCggdXJsICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogbWluaW1hbCBjbGFzcyBmb3IgcHJveGluZyBmdW5jdGlvbnMgdG8gUGF0aC4gUmVwbGFjZXMgb2xkIFwiZXh0cmFjdFN1YnBhdGhzKClcIlxuICoqL1xuXG5mdW5jdGlvbiBTaGFwZVBhdGgoKSB7XG5cblx0dGhpcy50eXBlID0gJ1NoYXBlUGF0aCc7XG5cblx0dGhpcy5jb2xvciA9IG5ldyBDb2xvcigpO1xuXG5cdHRoaXMuc3ViUGF0aHMgPSBbXTtcblx0dGhpcy5jdXJyZW50UGF0aCA9IG51bGw7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU2hhcGVQYXRoLnByb3RvdHlwZSwge1xuXG5cdG1vdmVUbzogZnVuY3Rpb24gKCB4LCB5ICkge1xuXG5cdFx0dGhpcy5jdXJyZW50UGF0aCA9IG5ldyBQYXRoKCk7XG5cdFx0dGhpcy5zdWJQYXRocy5wdXNoKCB0aGlzLmN1cnJlbnRQYXRoICk7XG5cdFx0dGhpcy5jdXJyZW50UGF0aC5tb3ZlVG8oIHgsIHkgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bGluZVRvOiBmdW5jdGlvbiAoIHgsIHkgKSB7XG5cblx0XHR0aGlzLmN1cnJlbnRQYXRoLmxpbmVUbyggeCwgeSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRxdWFkcmF0aWNDdXJ2ZVRvOiBmdW5jdGlvbiAoIGFDUHgsIGFDUHksIGFYLCBhWSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGgucXVhZHJhdGljQ3VydmVUbyggYUNQeCwgYUNQeSwgYVgsIGFZICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGJlemllckN1cnZlVG86IGZ1bmN0aW9uICggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGguYmV6aWVyQ3VydmVUbyggYUNQMXgsIGFDUDF5LCBhQ1AyeCwgYUNQMnksIGFYLCBhWSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzcGxpbmVUaHJ1OiBmdW5jdGlvbiAoIHB0cyApIHtcblxuXHRcdHRoaXMuY3VycmVudFBhdGguc3BsaW5lVGhydSggcHRzICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvU2hhcGVzOiBmdW5jdGlvbiAoIGlzQ0NXLCBub0hvbGVzICkge1xuXG5cdFx0ZnVuY3Rpb24gdG9TaGFwZXNOb0hvbGVzKCBpblN1YnBhdGhzICkge1xuXG5cdFx0XHR2YXIgc2hhcGVzID0gW107XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbCA9IGluU3VicGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0XHR2YXIgdG1wUGF0aCA9IGluU3VicGF0aHNbIGkgXTtcblxuXHRcdFx0XHR2YXIgdG1wU2hhcGUgPSBuZXcgU2hhcGUoKTtcblx0XHRcdFx0dG1wU2hhcGUuY3VydmVzID0gdG1wUGF0aC5jdXJ2ZXM7XG5cblx0XHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNoYXBlcztcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBpblB0LCBpblBvbHlnb24gKSB7XG5cblx0XHRcdHZhciBwb2x5TGVuID0gaW5Qb2x5Z29uLmxlbmd0aDtcblxuXHRcdFx0Ly8gaW5QdCBvbiBwb2x5Z29uIGNvbnRvdXIgPT4gaW1tZWRpYXRlIHN1Y2Nlc3MgICAgb3Jcblx0XHRcdC8vIHRvZ2dsaW5nIG9mIGluc2lkZS9vdXRzaWRlIGF0IGV2ZXJ5IHNpbmdsZSEgaW50ZXJzZWN0aW9uIHBvaW50IG9mIGFuIGVkZ2Vcblx0XHRcdC8vICB3aXRoIHRoZSBob3Jpem9udGFsIGxpbmUgdGhyb3VnaCBpblB0LCBsZWZ0IG9mIGluUHRcblx0XHRcdC8vICBub3QgY291bnRpbmcgbG93ZXJZIGVuZHBvaW50cyBvZiBlZGdlcyBhbmQgd2hvbGUgZWRnZXMgb24gdGhhdCBsaW5lXG5cdFx0XHR2YXIgaW5zaWRlID0gZmFsc2U7XG5cdFx0XHRmb3IgKCB2YXIgcCA9IHBvbHlMZW4gLSAxLCBxID0gMDsgcSA8IHBvbHlMZW47IHAgPSBxICsrICkge1xuXG5cdFx0XHRcdHZhciBlZGdlTG93UHQgPSBpblBvbHlnb25bIHAgXTtcblx0XHRcdFx0dmFyIGVkZ2VIaWdoUHQgPSBpblBvbHlnb25bIHEgXTtcblxuXHRcdFx0XHR2YXIgZWRnZUR4ID0gZWRnZUhpZ2hQdC54IC0gZWRnZUxvd1B0Lng7XG5cdFx0XHRcdHZhciBlZGdlRHkgPSBlZGdlSGlnaFB0LnkgLSBlZGdlTG93UHQueTtcblxuXHRcdFx0XHRpZiAoIE1hdGguYWJzKCBlZGdlRHkgKSA+IE51bWJlci5FUFNJTE9OICkge1xuXG5cdFx0XHRcdFx0Ly8gbm90IHBhcmFsbGVsXG5cdFx0XHRcdFx0aWYgKCBlZGdlRHkgPCAwICkge1xuXG5cdFx0XHRcdFx0XHRlZGdlTG93UHQgPSBpblBvbHlnb25bIHEgXTsgZWRnZUR4ID0gLSBlZGdlRHg7XG5cdFx0XHRcdFx0XHRlZGdlSGlnaFB0ID0gaW5Qb2x5Z29uWyBwIF07IGVkZ2VEeSA9IC0gZWRnZUR5O1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggKCBpblB0LnkgPCBlZGdlTG93UHQueSApIHx8ICggaW5QdC55ID4gZWRnZUhpZ2hQdC55ICkgKSBcdFx0Y29udGludWU7XG5cblx0XHRcdFx0XHRpZiAoIGluUHQueSA9PT0gZWRnZUxvd1B0LnkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggaW5QdC54ID09PSBlZGdlTG93UHQueCApXHRcdHJldHVyblx0dHJ1ZTtcdFx0Ly8gaW5QdCBpcyBvbiBjb250b3VyID9cblx0XHRcdFx0XHRcdC8vIGNvbnRpbnVlO1x0XHRcdFx0Ly8gbm8gaW50ZXJzZWN0aW9uIG9yIGVkZ2VMb3dQdCA9PiBkb2Vzbid0IGNvdW50ICEhIVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dmFyIHBlcnBFZGdlID0gZWRnZUR5ICogKCBpblB0LnggLSBlZGdlTG93UHQueCApIC0gZWRnZUR4ICogKCBpblB0LnkgLSBlZGdlTG93UHQueSApO1xuXHRcdFx0XHRcdFx0aWYgKCBwZXJwRWRnZSA9PT0gMCApXHRcdFx0XHRyZXR1cm5cdHRydWU7XHRcdC8vIGluUHQgaXMgb24gY29udG91ciA/XG5cdFx0XHRcdFx0XHRpZiAoIHBlcnBFZGdlIDwgMCApIFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0XHRpbnNpZGUgPSAhIGluc2lkZTtcdFx0Ly8gdHJ1ZSBpbnRlcnNlY3Rpb24gbGVmdCBvZiBpblB0XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHBhcmFsbGVsIG9yIGNvbGxpbmVhclxuXHRcdFx0XHRcdGlmICggaW5QdC55ICE9PSBlZGdlTG93UHQueSApIFx0XHRjb250aW51ZTtcdFx0XHQvLyBwYXJhbGxlbFxuXHRcdFx0XHRcdC8vIGVkZ2UgbGllcyBvbiB0aGUgc2FtZSBob3Jpem9udGFsIGxpbmUgYXMgaW5QdFxuXHRcdFx0XHRcdGlmICggKCAoIGVkZ2VIaWdoUHQueCA8PSBpblB0LnggKSAmJiAoIGluUHQueCA8PSBlZGdlTG93UHQueCApICkgfHxcblx0XHRcdFx0XHRcdCAoICggZWRnZUxvd1B0LnggPD0gaW5QdC54ICkgJiYgKCBpblB0LnggPD0gZWRnZUhpZ2hQdC54ICkgKSApXHRcdHJldHVyblx0dHJ1ZTtcdC8vIGluUHQ6IFBvaW50IG9uIGNvbnRvdXIgIVxuXHRcdFx0XHRcdC8vIGNvbnRpbnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm5cdGluc2lkZTtcblxuXHRcdH1cblxuXHRcdHZhciBpc0Nsb2NrV2lzZSA9IFNoYXBlVXRpbHMuaXNDbG9ja1dpc2U7XG5cblx0XHR2YXIgc3ViUGF0aHMgPSB0aGlzLnN1YlBhdGhzO1xuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAwICkgcmV0dXJuIFtdO1xuXG5cdFx0aWYgKCBub0hvbGVzID09PSB0cnVlIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHR2YXIgc29saWQsIHRtcFBhdGgsIHRtcFNoYXBlLCBzaGFwZXMgPSBbXTtcblxuXHRcdGlmICggc3ViUGF0aHMubGVuZ3RoID09PSAxICkge1xuXG5cdFx0XHR0bXBQYXRoID0gc3ViUGF0aHNbIDAgXTtcblx0XHRcdHRtcFNoYXBlID0gbmV3IFNoYXBlKCk7XG5cdFx0XHR0bXBTaGFwZS5jdXJ2ZXMgPSB0bXBQYXRoLmN1cnZlcztcblx0XHRcdHNoYXBlcy5wdXNoKCB0bXBTaGFwZSApO1xuXHRcdFx0cmV0dXJuIHNoYXBlcztcblxuXHRcdH1cblxuXHRcdHZhciBob2xlc0ZpcnN0ID0gISBpc0Nsb2NrV2lzZSggc3ViUGF0aHNbIDAgXS5nZXRQb2ludHMoKSApO1xuXHRcdGhvbGVzRmlyc3QgPSBpc0NDVyA/ICEgaG9sZXNGaXJzdCA6IGhvbGVzRmlyc3Q7XG5cblx0XHQvLyBjb25zb2xlLmxvZyhcIkhvbGVzIGZpcnN0XCIsIGhvbGVzRmlyc3QpO1xuXG5cdFx0dmFyIGJldHRlclNoYXBlSG9sZXMgPSBbXTtcblx0XHR2YXIgbmV3U2hhcGVzID0gW107XG5cdFx0dmFyIG5ld1NoYXBlSG9sZXMgPSBbXTtcblx0XHR2YXIgbWFpbklkeCA9IDA7XG5cdFx0dmFyIHRtcFBvaW50cztcblxuXHRcdG5ld1NoYXBlc1sgbWFpbklkeCBdID0gdW5kZWZpbmVkO1xuXHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXSA9IFtdO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc3ViUGF0aHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0dG1wUGF0aCA9IHN1YlBhdGhzWyBpIF07XG5cdFx0XHR0bXBQb2ludHMgPSB0bXBQYXRoLmdldFBvaW50cygpO1xuXHRcdFx0c29saWQgPSBpc0Nsb2NrV2lzZSggdG1wUG9pbnRzICk7XG5cdFx0XHRzb2xpZCA9IGlzQ0NXID8gISBzb2xpZCA6IHNvbGlkO1xuXG5cdFx0XHRpZiAoIHNvbGlkICkge1xuXG5cdFx0XHRcdGlmICggKCAhIGhvbGVzRmlyc3QgKSAmJiAoIG5ld1NoYXBlc1sgbWFpbklkeCBdICkgKVx0bWFpbklkeCArKztcblxuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXSA9IHsgczogbmV3IFNoYXBlKCksIHA6IHRtcFBvaW50cyB9O1xuXHRcdFx0XHRuZXdTaGFwZXNbIG1haW5JZHggXS5zLmN1cnZlcyA9IHRtcFBhdGguY3VydmVzO1xuXG5cdFx0XHRcdGlmICggaG9sZXNGaXJzdCApXHRtYWluSWR4ICsrO1xuXHRcdFx0XHRuZXdTaGFwZUhvbGVzWyBtYWluSWR4IF0gPSBbXTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjdycsIGkpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdG5ld1NoYXBlSG9sZXNbIG1haW5JZHggXS5wdXNoKCB7IGg6IHRtcFBhdGgsIHA6IHRtcFBvaW50c1sgMCBdIH0gKTtcblxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKCdjY3cnLCBpKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0Ly8gb25seSBIb2xlcz8gLT4gcHJvYmFibHkgYWxsIFNoYXBlcyB3aXRoIHdyb25nIG9yaWVudGF0aW9uXG5cdFx0aWYgKCAhIG5ld1NoYXBlc1sgMCBdIClcdHJldHVyblx0dG9TaGFwZXNOb0hvbGVzKCBzdWJQYXRocyApO1xuXG5cblx0XHRpZiAoIG5ld1NoYXBlcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHR2YXIgYW1iaWd1b3VzID0gZmFsc2U7XG5cdFx0XHR2YXIgdG9DaGFuZ2UgPSBbXTtcblxuXHRcdFx0Zm9yICggdmFyIHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgc0lkeCBdID0gW107XG5cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggdmFyIHNJZHggPSAwLCBzTGVuID0gbmV3U2hhcGVzLmxlbmd0aDsgc0lkeCA8IHNMZW47IHNJZHggKysgKSB7XG5cblx0XHRcdFx0dmFyIHNobyA9IG5ld1NoYXBlSG9sZXNbIHNJZHggXTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaElkeCA9IDA7IGhJZHggPCBzaG8ubGVuZ3RoOyBoSWR4ICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGhvID0gc2hvWyBoSWR4IF07XG5cdFx0XHRcdFx0dmFyIGhvbGVfdW5hc3NpZ25lZCA9IHRydWU7XG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgczJJZHggPSAwOyBzMklkeCA8IG5ld1NoYXBlcy5sZW5ndGg7IHMySWR4ICsrICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIGlzUG9pbnRJbnNpZGVQb2x5Z29uKCBoby5wLCBuZXdTaGFwZXNbIHMySWR4IF0ucCApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggc0lkeCAhPT0gczJJZHggKVx0dG9DaGFuZ2UucHVzaCggeyBmcm9tczogc0lkeCwgdG9zOiBzMklkeCwgaG9sZTogaElkeCB9ICk7XG5cdFx0XHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0aG9sZV91bmFzc2lnbmVkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0YmV0dGVyU2hhcGVIb2xlc1sgczJJZHggXS5wdXNoKCBobyApO1xuXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRhbWJpZ3VvdXMgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggaG9sZV91bmFzc2lnbmVkICkge1xuXG5cdFx0XHRcdFx0XHRiZXR0ZXJTaGFwZUhvbGVzWyBzSWR4IF0ucHVzaCggaG8gKTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHRcdC8vIGNvbnNvbGUubG9nKFwiYW1iaWd1b3VzOiBcIiwgYW1iaWd1b3VzKTtcblx0XHRcdGlmICggdG9DaGFuZ2UubGVuZ3RoID4gMCApIHtcblxuXHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcInRvIGNoYW5nZTogXCIsIHRvQ2hhbmdlKTtcblx0XHRcdFx0aWYgKCAhIGFtYmlndW91cyApXHRuZXdTaGFwZUhvbGVzID0gYmV0dGVyU2hhcGVIb2xlcztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0dmFyIHRtcEhvbGVzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBpbCA9IG5ld1NoYXBlcy5sZW5ndGg7IGkgPCBpbDsgaSArKyApIHtcblxuXHRcdFx0dG1wU2hhcGUgPSBuZXdTaGFwZXNbIGkgXS5zO1xuXHRcdFx0c2hhcGVzLnB1c2goIHRtcFNoYXBlICk7XG5cdFx0XHR0bXBIb2xlcyA9IG5ld1NoYXBlSG9sZXNbIGkgXTtcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBqbCA9IHRtcEhvbGVzLmxlbmd0aDsgaiA8IGpsOyBqICsrICkge1xuXG5cdFx0XHRcdHRtcFNoYXBlLmhvbGVzLnB1c2goIHRtcEhvbGVzWyBqIF0uaCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL2NvbnNvbGUubG9nKFwic2hhcGVcIiwgc2hhcGVzKTtcblxuXHRcdHJldHVybiBzaGFwZXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciB6ejg1IC8gaHR0cDovL3d3dy5sYWI0Z2FtZXMubmV0L3p6ODUvYmxvZ1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5cbmZ1bmN0aW9uIEZvbnQoIGRhdGEgKSB7XG5cblx0dGhpcy50eXBlID0gJ0ZvbnQnO1xuXG5cdHRoaXMuZGF0YSA9IGRhdGE7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggRm9udC5wcm90b3R5cGUsIHtcblxuXHRpc0ZvbnQ6IHRydWUsXG5cblx0Z2VuZXJhdGVTaGFwZXM6IGZ1bmN0aW9uICggdGV4dCwgc2l6ZSApIHtcblxuXHRcdGlmICggc2l6ZSA9PT0gdW5kZWZpbmVkICkgc2l6ZSA9IDEwMDtcblxuXHRcdHZhciBzaGFwZXMgPSBbXTtcblx0XHR2YXIgcGF0aHMgPSBjcmVhdGVQYXRocyggdGV4dCwgc2l6ZSwgdGhpcy5kYXRhICk7XG5cblx0XHRmb3IgKCB2YXIgcCA9IDAsIHBsID0gcGF0aHMubGVuZ3RoOyBwIDwgcGw7IHAgKysgKSB7XG5cblx0XHRcdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KCBzaGFwZXMsIHBhdGhzWyBwIF0udG9TaGFwZXMoKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNoYXBlcztcblxuXHR9XG5cbn0gKTtcblxuZnVuY3Rpb24gY3JlYXRlUGF0aHMoIHRleHQsIHNpemUsIGRhdGEgKSB7XG5cblx0dmFyIGNoYXJzID0gQXJyYXkuZnJvbSA/IEFycmF5LmZyb20oIHRleHQgKSA6IFN0cmluZyggdGV4dCApLnNwbGl0KCAnJyApOyAvLyB3b3JrYXJvdW5kIGZvciBJRTExLCBzZWUgIzEzOTg4XG5cdHZhciBzY2FsZSA9IHNpemUgLyBkYXRhLnJlc29sdXRpb247XG5cdHZhciBsaW5lX2hlaWdodCA9ICggZGF0YS5ib3VuZGluZ0JveC55TWF4IC0gZGF0YS5ib3VuZGluZ0JveC55TWluICsgZGF0YS51bmRlcmxpbmVUaGlja25lc3MgKSAqIHNjYWxlO1xuXG5cdHZhciBwYXRocyA9IFtdO1xuXG5cdHZhciBvZmZzZXRYID0gMCwgb2Zmc2V0WSA9IDA7XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2hhcnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0dmFyIGNoYXIgPSBjaGFyc1sgaSBdO1xuXG5cdFx0aWYgKCBjaGFyID09PSAnXFxuJyApIHtcblxuXHRcdFx0b2Zmc2V0WCA9IDA7XG5cdFx0XHRvZmZzZXRZIC09IGxpbmVfaGVpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dmFyIHJldCA9IGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICk7XG5cdFx0XHRvZmZzZXRYICs9IHJldC5vZmZzZXRYO1xuXHRcdFx0cGF0aHMucHVzaCggcmV0LnBhdGggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0cmV0dXJuIHBhdGhzO1xuXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoIGNoYXIsIHNjYWxlLCBvZmZzZXRYLCBvZmZzZXRZLCBkYXRhICkge1xuXG5cdHZhciBnbHlwaCA9IGRhdGEuZ2x5cGhzWyBjaGFyIF0gfHwgZGF0YS5nbHlwaHNbICc/JyBdO1xuXG5cdGlmICggISBnbHlwaCApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Gb250OiBjaGFyYWN0ZXIgXCInICsgY2hhciArICdcIiBkb2VzIG5vdCBleGlzdHMgaW4gZm9udCBmYW1pbHkgJyArIGRhdGEuZmFtaWx5TmFtZSArICcuJyApO1xuXG5cdFx0cmV0dXJuO1xuXG5cdH1cblxuXHR2YXIgcGF0aCA9IG5ldyBTaGFwZVBhdGgoKTtcblxuXHR2YXIgeCwgeSwgY3B4LCBjcHksIGNweDEsIGNweTEsIGNweDIsIGNweTI7XG5cblx0aWYgKCBnbHlwaC5vICkge1xuXG5cdFx0dmFyIG91dGxpbmUgPSBnbHlwaC5fY2FjaGVkT3V0bGluZSB8fCAoIGdseXBoLl9jYWNoZWRPdXRsaW5lID0gZ2x5cGguby5zcGxpdCggJyAnICkgKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG91dGxpbmUubGVuZ3RoOyBpIDwgbDsgKSB7XG5cblx0XHRcdHZhciBhY3Rpb24gPSBvdXRsaW5lWyBpICsrIF07XG5cblx0XHRcdHN3aXRjaCAoIGFjdGlvbiApIHtcblxuXHRcdFx0XHRjYXNlICdtJzogLy8gbW92ZVRvXG5cblx0XHRcdFx0XHR4ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdHkgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLm1vdmVUbyggeCwgeSApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAnbCc6IC8vIGxpbmVUb1xuXG5cdFx0XHRcdFx0eCA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WDtcblx0XHRcdFx0XHR5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXG5cdFx0XHRcdFx0cGF0aC5saW5lVG8oIHgsIHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ3EnOiAvLyBxdWFkcmF0aWNDdXJ2ZVRvXG5cblx0XHRcdFx0XHRjcHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXHRcdFx0XHRcdGNweDEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblxuXHRcdFx0XHRcdHBhdGgucXVhZHJhdGljQ3VydmVUbyggY3B4MSwgY3B5MSwgY3B4LCBjcHkgKTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2InOiAvLyBiZXppZXJDdXJ2ZVRvXG5cblx0XHRcdFx0XHRjcHggPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5ID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRZO1xuXHRcdFx0XHRcdGNweDEgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFg7XG5cdFx0XHRcdFx0Y3B5MSA9IG91dGxpbmVbIGkgKysgXSAqIHNjYWxlICsgb2Zmc2V0WTtcblx0XHRcdFx0XHRjcHgyID0gb3V0bGluZVsgaSArKyBdICogc2NhbGUgKyBvZmZzZXRYO1xuXHRcdFx0XHRcdGNweTIgPSBvdXRsaW5lWyBpICsrIF0gKiBzY2FsZSArIG9mZnNldFk7XG5cblx0XHRcdFx0XHRwYXRoLmJlemllckN1cnZlVG8oIGNweDEsIGNweTEsIGNweDIsIGNweTIsIGNweCwgY3B5ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH1cblxuXHRyZXR1cm4geyBvZmZzZXRYOiBnbHlwaC5oYSAqIHNjYWxlLCBwYXRoOiBwYXRoIH07XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIEZvbnRMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0TG9hZGVyLmNhbGwoIHRoaXMsIG1hbmFnZXIgKTtcblxufVxuXG5Gb250TG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBGb250TG9hZGVyLFxuXG5cdGxvYWQ6IGZ1bmN0aW9uICggdXJsLCBvbkxvYWQsIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKSB7XG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UGF0aCggdGhpcy5wYXRoICk7XG5cdFx0bG9hZGVyLmxvYWQoIHVybCwgZnVuY3Rpb24gKCB0ZXh0ICkge1xuXG5cdFx0XHR2YXIganNvbjtcblxuXHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dCApO1xuXG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Gb250TG9hZGVyOiB0eXBlZmFjZS5qcyBzdXBwb3J0IGlzIGJlaW5nIGRlcHJlY2F0ZWQuIFVzZSB0eXBlZmFjZS5qc29uIGluc3RlYWQuJyApO1xuXHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZSggdGV4dC5zdWJzdHJpbmcoIDY1LCB0ZXh0Lmxlbmd0aCAtIDIgKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHZhciBmb250ID0gc2NvcGUucGFyc2UoIGpzb24gKTtcblxuXHRcdFx0aWYgKCBvbkxvYWQgKSBvbkxvYWQoIGZvbnQgKTtcblxuXHRcdH0sIG9uUHJvZ3Jlc3MsIG9uRXJyb3IgKTtcblxuXHR9LFxuXG5cdHBhcnNlOiBmdW5jdGlvbiAoIGpzb24gKSB7XG5cblx0XHRyZXR1cm4gbmV3IEZvbnQoIGpzb24gKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBfY29udGV4dDtcblxudmFyIEF1ZGlvQ29udGV4dCA9IHtcblxuXHRnZXRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIF9jb250ZXh0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdF9jb250ZXh0ID0gbmV3ICggd2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0ICkoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiBfY29udGV4dDtcblxuXHR9LFxuXG5cdHNldENvbnRleHQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRfY29udGV4dCA9IHZhbHVlO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFJlZWNlIEFhcm9uIExlY3JpdmFpbiAvIGh0dHA6Ly9yZWVjZW5vdGVzLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBdWRpb0xvYWRlciggbWFuYWdlciApIHtcblxuXHRMb2FkZXIuY2FsbCggdGhpcywgbWFuYWdlciApO1xuXG59XG5cbkF1ZGlvTG9hZGVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExvYWRlci5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBBdWRpb0xvYWRlcixcblxuXHRsb2FkOiBmdW5jdGlvbiAoIHVybCwgb25Mb2FkLCBvblByb2dyZXNzLCBvbkVycm9yICkge1xuXG5cdFx0dmFyIGxvYWRlciA9IG5ldyBGaWxlTG9hZGVyKCB0aGlzLm1hbmFnZXIgKTtcblx0XHRsb2FkZXIuc2V0UmVzcG9uc2VUeXBlKCAnYXJyYXlidWZmZXInICk7XG5cdFx0bG9hZGVyLnNldFBhdGgoIHRoaXMucGF0aCApO1xuXHRcdGxvYWRlci5sb2FkKCB1cmwsIGZ1bmN0aW9uICggYnVmZmVyICkge1xuXG5cdFx0XHQvLyBDcmVhdGUgYSBjb3B5IG9mIHRoZSBidWZmZXIuIFRoZSBgZGVjb2RlQXVkaW9EYXRhYCBtZXRob2Rcblx0XHRcdC8vIGRldGFjaGVzIHRoZSBidWZmZXIgd2hlbiBjb21wbGV0ZSwgcHJldmVudGluZyByZXVzZS5cblx0XHRcdHZhciBidWZmZXJDb3B5ID0gYnVmZmVyLnNsaWNlKCAwICk7XG5cblx0XHRcdHZhciBjb250ZXh0ID0gQXVkaW9Db250ZXh0LmdldENvbnRleHQoKTtcblx0XHRcdGNvbnRleHQuZGVjb2RlQXVkaW9EYXRhKCBidWZmZXJDb3B5LCBmdW5jdGlvbiAoIGF1ZGlvQnVmZmVyICkge1xuXG5cdFx0XHRcdG9uTG9hZCggYXVkaW9CdWZmZXIgKTtcblxuXHRcdFx0fSApO1xuXG5cdFx0fSwgb25Qcm9ncmVzcywgb25FcnJvciApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICpcbiAqIFByaW1hcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL2dyYXBoaWNzLnN0YW5mb3JkLmVkdS9wYXBlcnMvZW52bWFwL2Vudm1hcC5wZGZcbiAqXG4gKiBTZWNvbmRhcnkgcmVmZXJlbmNlOlxuICogICBodHRwczovL3d3dy5wcHNsb2FuLm9yZy9wdWJsaWNhdGlvbnMvU3R1cGlkU0gzNi5wZGZcbiAqL1xuXG4vLyAzLWJhbmQgU0ggZGVmaW5lZCBieSA5IGNvZWZmaWNpZW50c1xuXG5mdW5jdGlvbiBTcGhlcmljYWxIYXJtb25pY3MzKCkge1xuXG5cdHRoaXMuY29lZmZpY2llbnRzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdHRoaXMuY29lZmZpY2llbnRzLnB1c2goIG5ldyBWZWN0b3IzKCkgKTtcblxuXHR9XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3BoZXJpY2FsSGFybW9uaWNzMy5wcm90b3R5cGUsIHtcblxuXHRpc1NwaGVyaWNhbEhhcm1vbmljczM6IHRydWUsXG5cblx0c2V0OiBmdW5jdGlvbiAoIGNvZWZmaWNpZW50cyApIHtcblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDk7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuY29lZmZpY2llbnRzWyBpIF0uY29weSggY29lZmZpY2llbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0emVybzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gZ2V0IHRoZSByYWRpYW5jZSBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSBub3JtYWxcblx0Ly8gdGFyZ2V0IGlzIGEgVmVjdG9yM1xuXHRnZXRBdDogZnVuY3Rpb24gKCBub3JtYWwsIHRhcmdldCApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHR2YXIgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdHZhciBjb2VmZiA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Ly8gYmFuZCAwXG5cdFx0dGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC4yODIwOTUgKTtcblxuXHRcdC8vIGJhbmQgMVxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAxIF0sIDAuNDg4NjAzICogeSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAyIF0sIDAuNDg4NjAzICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyAzIF0sIDAuNDg4NjAzICogeCApO1xuXG5cdFx0Ly8gYmFuZCAyXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDQgXSwgMS4wOTI1NDggKiAoIHggKiB5ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgNSBdLCAxLjA5MjU0OCAqICggeSAqIHogKSApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA2IF0sIDAuMzE1MzkyICogKCAzLjAgKiB6ICogeiAtIDEuMCApICk7XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDcgXSwgMS4wOTI1NDggKiAoIHggKiB6ICkgKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgOCBdLCAwLjU0NjI3NCAqICggeCAqIHggLSB5ICogeSApICk7XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0Ly8gZ2V0IHRoZSBpcnJhZGlhbmNlIChyYWRpYW5jZSBjb252b2x2ZWQgd2l0aCBjb3NpbmUgbG9iZSkgaW4gdGhlIGRpcmVjdGlvbiBvZiB0aGUgbm9ybWFsXG5cdC8vIHRhcmdldCBpcyBhIFZlY3RvcjNcblx0Ly8gaHR0cHM6Ly9ncmFwaGljcy5zdGFuZm9yZC5lZHUvcGFwZXJzL2Vudm1hcC9lbnZtYXAucGRmXG5cdGdldElycmFkaWFuY2VBdDogZnVuY3Rpb24gKCBub3JtYWwsIHRhcmdldCApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHR2YXIgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdHZhciBjb2VmZiA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Ly8gYmFuZCAwXG5cdFx0dGFyZ2V0LmNvcHkoIGNvZWZmWyAwIF0gKS5tdWx0aXBseVNjYWxhciggMC44ODYyMjcgKTsgLy8gz4AgKiAwLjI4MjA5NVxuXG5cdFx0Ly8gYmFuZCAxXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDEgXSwgMi4wICogMC41MTE2NjQgKiB5ICk7IC8vICggMiAqIM+AIC8gMyApICogMC40ODg2MDNcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMiBdLCAyLjAgKiAwLjUxMTY2NCAqIHogKTtcblx0XHR0YXJnZXQuYWRkU2NhbGVkVmVjdG9yKCBjb2VmZlsgMyBdLCAyLjAgKiAwLjUxMTY2NCAqIHggKTtcblxuXHRcdC8vIGJhbmQgMlxuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA0IF0sIDIuMCAqIDAuNDI5MDQzICogeCAqIHkgKTsgLy8gKCDPgCAvIDQgKSAqIDEuMDkyNTQ4XG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDUgXSwgMi4wICogMC40MjkwNDMgKiB5ICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA2IF0sIDAuNzQzMTI1ICogeiAqIHogLSAwLjI0NzcwOCApOyAvLyAoIM+AIC8gNCApICogMC4zMTUzOTIgKiAzXG5cdFx0dGFyZ2V0LmFkZFNjYWxlZFZlY3RvciggY29lZmZbIDcgXSwgMi4wICogMC40MjkwNDMgKiB4ICogeiApO1xuXHRcdHRhcmdldC5hZGRTY2FsZWRWZWN0b3IoIGNvZWZmWyA4IF0sIDAuNDI5MDQzICogKCB4ICogeCAtIHkgKiB5ICkgKTsgLy8gKCDPgCAvIDQgKSAqIDAuNTQ2Mjc0XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiAoIHNoICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5hZGQoIHNoLmNvZWZmaWNpZW50c1sgaSBdICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGFkZFNjYWxlZFNIOiBmdW5jdGlvbiAoIHNoLCBzICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5hZGRTY2FsZWRWZWN0b3IoIHNoLmNvZWZmaWNpZW50c1sgaSBdLCBzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNjYWxlOiBmdW5jdGlvbiAoIHMgKSB7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHR0aGlzLmNvZWZmaWNpZW50c1sgaSBdLm11bHRpcGx5U2NhbGFyKCBzICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGxlcnA6IGZ1bmN0aW9uICggc2gsIGFscGhhICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0dGhpcy5jb2VmZmljaWVudHNbIGkgXS5sZXJwKCBzaC5jb2VmZmljaWVudHNbIGkgXSwgYWxwaGEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0ZXF1YWxzOiBmdW5jdGlvbiAoIHNoICkge1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0aWYgKCAhIHRoaXMuY29lZmZpY2llbnRzWyBpIF0uZXF1YWxzKCBzaC5jb2VmZmljaWVudHNbIGkgXSApICkge1xuXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNoICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0KCBzaC5jb2VmZmljaWVudHMgKTtcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRmcm9tQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggb2Zmc2V0ID09PSB1bmRlZmluZWQgKSBvZmZzZXQgPSAwO1xuXG5cdFx0dmFyIGNvZWZmaWNpZW50cyA9IHRoaXMuY29lZmZpY2llbnRzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSArKyApIHtcblxuXHRcdFx0Y29lZmZpY2llbnRzWyBpIF0uZnJvbUFycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uICggYXJyYXksIG9mZnNldCApIHtcblxuXHRcdGlmICggYXJyYXkgPT09IHVuZGVmaW5lZCApIGFycmF5ID0gW107XG5cdFx0aWYgKCBvZmZzZXQgPT09IHVuZGVmaW5lZCApIG9mZnNldCA9IDA7XG5cblx0XHR2YXIgY29lZmZpY2llbnRzID0gdGhpcy5jb2VmZmljaWVudHM7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA5OyBpICsrICkge1xuXG5cdFx0XHRjb2VmZmljaWVudHNbIGkgXS50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICsgKCBpICogMyApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYXJyYXk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFNwaGVyaWNhbEhhcm1vbmljczMsIHtcblxuXHQvLyBldmFsdWF0ZSB0aGUgYmFzaXMgZnVuY3Rpb25zXG5cdC8vIHNoQmFzaXMgaXMgYW4gQXJyYXlbIDkgXVxuXHRnZXRCYXNpc0F0OiBmdW5jdGlvbiAoIG5vcm1hbCwgc2hCYXNpcyApIHtcblxuXHRcdC8vIG5vcm1hbCBpcyBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoXG5cblx0XHR2YXIgeCA9IG5vcm1hbC54LCB5ID0gbm9ybWFsLnksIHogPSBub3JtYWwuejtcblxuXHRcdC8vIGJhbmQgMFxuXHRcdHNoQmFzaXNbIDAgXSA9IDAuMjgyMDk1O1xuXG5cdFx0Ly8gYmFuZCAxXG5cdFx0c2hCYXNpc1sgMSBdID0gMC40ODg2MDMgKiB5O1xuXHRcdHNoQmFzaXNbIDIgXSA9IDAuNDg4NjAzICogejtcblx0XHRzaEJhc2lzWyAzIF0gPSAwLjQ4ODYwMyAqIHg7XG5cblx0XHQvLyBiYW5kIDJcblx0XHRzaEJhc2lzWyA0IF0gPSAxLjA5MjU0OCAqIHggKiB5O1xuXHRcdHNoQmFzaXNbIDUgXSA9IDEuMDkyNTQ4ICogeSAqIHo7XG5cdFx0c2hCYXNpc1sgNiBdID0gMC4zMTUzOTIgKiAoIDMgKiB6ICogeiAtIDEgKTtcblx0XHRzaEJhc2lzWyA3IF0gPSAxLjA5MjU0OCAqIHggKiB6O1xuXHRcdHNoQmFzaXNbIDggXSA9IDAuNTQ2Mjc0ICogKCB4ICogeCAtIHkgKiB5ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKlxuICogQSBMaWdodFByb2JlIGlzIGEgc291cmNlIG9mIGluZGlyZWN0LWRpZmZ1c2UgbGlnaHRcbiAqL1xuXG5mdW5jdGlvbiBMaWdodFByb2JlKCBzaCwgaW50ZW5zaXR5ICkge1xuXG5cdExpZ2h0LmNhbGwoIHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7XG5cblx0dGhpcy5zaCA9ICggc2ggIT09IHVuZGVmaW5lZCApID8gc2ggOiBuZXcgU3BoZXJpY2FsSGFybW9uaWNzMygpO1xuXG59XG5cbkxpZ2h0UHJvYmUucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggTGlnaHQucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogTGlnaHRQcm9iZSxcblxuXHRpc0xpZ2h0UHJvYmU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRMaWdodC5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuc2guY29weSggc291cmNlLnNoICk7XG5cdFx0dGhpcy5pbnRlbnNpdHkgPSBzb3VyY2UuaW50ZW5zaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gTGlnaHQucHJvdG90eXBlLnRvSlNPTi5jYWxsKCB0aGlzLCBtZXRhICk7XG5cblx0XHQvLyBkYXRhLnNoID0gdGhpcy5zaC50b0FycmF5KCk7IC8vIHRvZG9cblxuXHRcdHJldHVybiBkYXRhO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEhlbWlzcGhlcmVMaWdodFByb2JlKCBza3lDb2xvciwgZ3JvdW5kQ29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodFByb2JlLmNhbGwoIHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7XG5cblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldCggc2t5Q29sb3IgKTtcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvcigpLnNldCggZ3JvdW5kQ29sb3IgKTtcblxuXHR2YXIgc2t5ID0gbmV3IFZlY3RvcjMoIGNvbG9yMS5yLCBjb2xvcjEuZywgY29sb3IxLmIgKTtcblx0dmFyIGdyb3VuZCA9IG5ldyBWZWN0b3IzKCBjb2xvcjIuciwgY29sb3IyLmcsIGNvbG9yMi5iICk7XG5cblx0Ly8gd2l0aG91dCBleHRyYSBmYWN0b3Igb2YgUEkgaW4gdGhlIHNoYWRlciwgc2hvdWxkID0gMSAvIE1hdGguc3FydCggTWF0aC5QSSApO1xuXHR2YXIgYzAgPSBNYXRoLnNxcnQoIE1hdGguUEkgKTtcblx0dmFyIGMxID0gYzAgKiBNYXRoLnNxcnQoIDAuNzUgKTtcblxuXHR0aGlzLnNoLmNvZWZmaWNpZW50c1sgMCBdLmNvcHkoIHNreSApLmFkZCggZ3JvdW5kICkubXVsdGlwbHlTY2FsYXIoIGMwICk7XG5cdHRoaXMuc2guY29lZmZpY2llbnRzWyAxIF0uY29weSggc2t5ICkuc3ViKCBncm91bmQgKS5tdWx0aXBseVNjYWxhciggYzEgKTtcblxufVxuXG5IZW1pc3BoZXJlTGlnaHRQcm9iZS5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaWdodFByb2JlLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEhlbWlzcGhlcmVMaWdodFByb2JlLFxuXG5cdGlzSGVtaXNwaGVyZUxpZ2h0UHJvYmU6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7IC8vIG1vZGlmeWluZyBjb2xvcnMgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWRcblxuXHRcdExpZ2h0UHJvYmUucHJvdG90eXBlLmNvcHkuY2FsbCggdGhpcywgc291cmNlICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCBtZXRhICkge1xuXG5cdFx0dmFyIGRhdGEgPSBMaWdodFByb2JlLnByb3RvdHlwZS50b0pTT04uY2FsbCggdGhpcywgbWV0YSApO1xuXG5cdFx0Ly8gZGF0YS5zaCA9IHRoaXMuc2gudG9BcnJheSgpOyAvLyB0b2RvXG5cblx0XHRyZXR1cm4gZGF0YTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqL1xuXG5mdW5jdGlvbiBBbWJpZW50TGlnaHRQcm9iZSggY29sb3IsIGludGVuc2l0eSApIHtcblxuXHRMaWdodFByb2JlLmNhbGwoIHRoaXMsIHVuZGVmaW5lZCwgaW50ZW5zaXR5ICk7XG5cblx0dmFyIGNvbG9yMSA9IG5ldyBDb2xvcigpLnNldCggY29sb3IgKTtcblxuXHQvLyB3aXRob3V0IGV4dHJhIGZhY3RvciBvZiBQSSBpbiB0aGUgc2hhZGVyLCB3b3VsZCBiZSAyIC8gTWF0aC5zcXJ0KCBNYXRoLlBJICk7XG5cdHRoaXMuc2guY29lZmZpY2llbnRzWyAwIF0uc2V0KCBjb2xvcjEuciwgY29sb3IxLmcsIGNvbG9yMS5iICkubXVsdGlwbHlTY2FsYXIoIDIgKiBNYXRoLnNxcnQoIE1hdGguUEkgKSApO1xuXG59XG5cbkFtYmllbnRMaWdodFByb2JlLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIExpZ2h0UHJvYmUucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQW1iaWVudExpZ2h0UHJvYmUsXG5cblx0aXNBbWJpZW50TGlnaHRQcm9iZTogdHJ1ZSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHsgLy8gbW9kaWZ5aW5nIGNvbG9yIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkXG5cblx0XHRMaWdodFByb2JlLnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHR0b0pTT046IGZ1bmN0aW9uICggbWV0YSApIHtcblxuXHRcdHZhciBkYXRhID0gTGlnaHRQcm9iZS5wcm90b3R5cGUudG9KU09OLmNhbGwoIHRoaXMsIG1ldGEgKTtcblxuXHRcdC8vIGRhdGEuc2ggPSB0aGlzLnNoLnRvQXJyYXkoKTsgLy8gdG9kb1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cblx0fVxuXG59ICk7XG5cbnZhciBfZXllUmlnaHQgPSBuZXcgTWF0cml4NCgpO1xudmFyIF9leWVMZWZ0ID0gbmV3IE1hdHJpeDQoKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFN0ZXJlb0NhbWVyYSgpIHtcblxuXHR0aGlzLnR5cGUgPSAnU3RlcmVvQ2FtZXJhJztcblxuXHR0aGlzLmFzcGVjdCA9IDE7XG5cblx0dGhpcy5leWVTZXAgPSAwLjA2NDtcblxuXHR0aGlzLmNhbWVyYUwgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0dGhpcy5jYW1lcmFMLmxheWVycy5lbmFibGUoIDEgKTtcblx0dGhpcy5jYW1lcmFMLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLmNhbWVyYVIgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoKTtcblx0dGhpcy5jYW1lcmFSLmxheWVycy5lbmFibGUoIDIgKTtcblx0dGhpcy5jYW1lcmFSLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLl9jYWNoZSA9IHtcblx0XHRmb2N1czogbnVsbCxcblx0XHRmb3Y6IG51bGwsXG5cdFx0YXNwZWN0OiBudWxsLFxuXHRcdG5lYXI6IG51bGwsXG5cdFx0ZmFyOiBudWxsLFxuXHRcdHpvb206IG51bGwsXG5cdFx0ZXllU2VwOiBudWxsXG5cdH07XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3RlcmVvQ2FtZXJhLnByb3RvdHlwZSwge1xuXG5cdHVwZGF0ZTogZnVuY3Rpb24gKCBjYW1lcmEgKSB7XG5cblx0XHR2YXIgY2FjaGUgPSB0aGlzLl9jYWNoZTtcblxuXHRcdHZhciBuZWVkc1VwZGF0ZSA9IGNhY2hlLmZvY3VzICE9PSBjYW1lcmEuZm9jdXMgfHwgY2FjaGUuZm92ICE9PSBjYW1lcmEuZm92IHx8XG5cdFx0XHRjYWNoZS5hc3BlY3QgIT09IGNhbWVyYS5hc3BlY3QgKiB0aGlzLmFzcGVjdCB8fCBjYWNoZS5uZWFyICE9PSBjYW1lcmEubmVhciB8fFxuXHRcdFx0Y2FjaGUuZmFyICE9PSBjYW1lcmEuZmFyIHx8IGNhY2hlLnpvb20gIT09IGNhbWVyYS56b29tIHx8IGNhY2hlLmV5ZVNlcCAhPT0gdGhpcy5leWVTZXA7XG5cblx0XHRpZiAoIG5lZWRzVXBkYXRlICkge1xuXG5cdFx0XHRjYWNoZS5mb2N1cyA9IGNhbWVyYS5mb2N1cztcblx0XHRcdGNhY2hlLmZvdiA9IGNhbWVyYS5mb3Y7XG5cdFx0XHRjYWNoZS5hc3BlY3QgPSBjYW1lcmEuYXNwZWN0ICogdGhpcy5hc3BlY3Q7XG5cdFx0XHRjYWNoZS5uZWFyID0gY2FtZXJhLm5lYXI7XG5cdFx0XHRjYWNoZS5mYXIgPSBjYW1lcmEuZmFyO1xuXHRcdFx0Y2FjaGUuem9vbSA9IGNhbWVyYS56b29tO1xuXHRcdFx0Y2FjaGUuZXllU2VwID0gdGhpcy5leWVTZXA7XG5cblx0XHRcdC8vIE9mZi1heGlzIHN0ZXJlb3Njb3BpYyBlZmZlY3QgYmFzZWQgb25cblx0XHRcdC8vIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9zdGVyZW9ncmFwaGljcy9zdGVyZW9yZW5kZXIvXG5cblx0XHRcdHZhciBwcm9qZWN0aW9uTWF0cml4ID0gY2FtZXJhLnByb2plY3Rpb25NYXRyaXguY2xvbmUoKTtcblx0XHRcdHZhciBleWVTZXBIYWxmID0gY2FjaGUuZXllU2VwIC8gMjtcblx0XHRcdHZhciBleWVTZXBPblByb2plY3Rpb24gPSBleWVTZXBIYWxmICogY2FjaGUubmVhciAvIGNhY2hlLmZvY3VzO1xuXHRcdFx0dmFyIHltYXggPSAoIGNhY2hlLm5lYXIgKiBNYXRoLnRhbiggTWF0aFV0aWxzLkRFRzJSQUQgKiBjYWNoZS5mb3YgKiAwLjUgKSApIC8gY2FjaGUuem9vbTtcblx0XHRcdHZhciB4bWluLCB4bWF4O1xuXG5cdFx0XHQvLyB0cmFuc2xhdGUgeE9mZnNldFxuXG5cdFx0XHRfZXllTGVmdC5lbGVtZW50c1sgMTIgXSA9IC0gZXllU2VwSGFsZjtcblx0XHRcdF9leWVSaWdodC5lbGVtZW50c1sgMTIgXSA9IGV5ZVNlcEhhbGY7XG5cblx0XHRcdC8vIGZvciBsZWZ0IGV5ZVxuXG5cdFx0XHR4bWluID0gLSB5bWF4ICogY2FjaGUuYXNwZWN0ICsgZXllU2VwT25Qcm9qZWN0aW9uO1xuXHRcdFx0eG1heCA9IHltYXggKiBjYWNoZS5hc3BlY3QgKyBleWVTZXBPblByb2plY3Rpb247XG5cblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDAgXSA9IDIgKiBjYWNoZS5uZWFyIC8gKCB4bWF4IC0geG1pbiApO1xuXHRcdFx0cHJvamVjdGlvbk1hdHJpeC5lbGVtZW50c1sgOCBdID0gKCB4bWF4ICsgeG1pbiApIC8gKCB4bWF4IC0geG1pbiApO1xuXG5cdFx0XHR0aGlzLmNhbWVyYUwucHJvamVjdGlvbk1hdHJpeC5jb3B5KCBwcm9qZWN0aW9uTWF0cml4ICk7XG5cblx0XHRcdC8vIGZvciByaWdodCBleWVcblxuXHRcdFx0eG1pbiA9IC0geW1heCAqIGNhY2hlLmFzcGVjdCAtIGV5ZVNlcE9uUHJvamVjdGlvbjtcblx0XHRcdHhtYXggPSB5bWF4ICogY2FjaGUuYXNwZWN0IC0gZXllU2VwT25Qcm9qZWN0aW9uO1xuXG5cdFx0XHRwcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyAwIF0gPSAyICogY2FjaGUubmVhciAvICggeG1heCAtIHhtaW4gKTtcblx0XHRcdHByb2plY3Rpb25NYXRyaXguZWxlbWVudHNbIDggXSA9ICggeG1heCArIHhtaW4gKSAvICggeG1heCAtIHhtaW4gKTtcblxuXHRcdFx0dGhpcy5jYW1lcmFSLnByb2plY3Rpb25NYXRyaXguY29weSggcHJvamVjdGlvbk1hdHJpeCApO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5jYW1lcmFMLm1hdHJpeFdvcmxkLmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZCApLm11bHRpcGx5KCBfZXllTGVmdCApO1xuXHRcdHRoaXMuY2FtZXJhUi5tYXRyaXhXb3JsZC5jb3B5KCBjYW1lcmEubWF0cml4V29ybGQgKS5tdWx0aXBseSggX2V5ZVJpZ2h0ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBDbG9jayggYXV0b1N0YXJ0ICkge1xuXG5cdHRoaXMuYXV0b1N0YXJ0ID0gKCBhdXRvU3RhcnQgIT09IHVuZGVmaW5lZCApID8gYXV0b1N0YXJ0IDogdHJ1ZTtcblxuXHR0aGlzLnN0YXJ0VGltZSA9IDA7XG5cdHRoaXMub2xkVGltZSA9IDA7XG5cdHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuXG5cdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENsb2NrLnByb3RvdHlwZSwge1xuXG5cdHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLnN0YXJ0VGltZSA9ICggdHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJyA/IERhdGUgOiBwZXJmb3JtYW5jZSApLm5vdygpOyAvLyBzZWUgIzEwNzMyXG5cblx0XHR0aGlzLm9sZFRpbWUgPSB0aGlzLnN0YXJ0VGltZTtcblx0XHR0aGlzLmVsYXBzZWRUaW1lID0gMDtcblx0XHR0aGlzLnJ1bm5pbmcgPSB0cnVlO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXRFbGFwc2VkVGltZSgpO1xuXHRcdHRoaXMucnVubmluZyA9IGZhbHNlO1xuXHRcdHRoaXMuYXV0b1N0YXJ0ID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRFbGFwc2VkVGltZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5nZXREZWx0YSgpO1xuXHRcdHJldHVybiB0aGlzLmVsYXBzZWRUaW1lO1xuXG5cdH0sXG5cblx0Z2V0RGVsdGE6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBkaWZmID0gMDtcblxuXHRcdGlmICggdGhpcy5hdXRvU3RhcnQgJiYgISB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHRoaXMuc3RhcnQoKTtcblx0XHRcdHJldHVybiAwO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLnJ1bm5pbmcgKSB7XG5cblx0XHRcdHZhciBuZXdUaW1lID0gKCB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnID8gRGF0ZSA6IHBlcmZvcm1hbmNlICkubm93KCk7XG5cblx0XHRcdGRpZmYgPSAoIG5ld1RpbWUgLSB0aGlzLm9sZFRpbWUgKSAvIDEwMDA7XG5cdFx0XHR0aGlzLm9sZFRpbWUgPSBuZXdUaW1lO1xuXG5cdFx0XHR0aGlzLmVsYXBzZWRUaW1lICs9IGRpZmY7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZGlmZjtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBfcG9zaXRpb24kMiA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3F1YXRlcm5pb24kMyA9IG5ldyBRdWF0ZXJuaW9uKCk7XG52YXIgX3NjYWxlJDEgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9vcmllbnRhdGlvbiA9IG5ldyBWZWN0b3IzKCk7XG5cbmZ1bmN0aW9uIEF1ZGlvTGlzdGVuZXIoKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMudHlwZSA9ICdBdWRpb0xpc3RlbmVyJztcblxuXHR0aGlzLmNvbnRleHQgPSBBdWRpb0NvbnRleHQuZ2V0Q29udGV4dCgpO1xuXG5cdHRoaXMuZ2FpbiA9IHRoaXMuY29udGV4dC5jcmVhdGVHYWluKCk7XG5cdHRoaXMuZ2Fpbi5jb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0dGhpcy50aW1lRGVsdGEgPSAwO1xuXG5cdC8vIHByaXZhdGVcblxuXHR0aGlzLl9jbG9jayA9IG5ldyBDbG9jaygpO1xuXG59XG5cbkF1ZGlvTGlzdGVuZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXVkaW9MaXN0ZW5lcixcblxuXHRnZXRJbnB1dDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2FpbjtcblxuXHR9LFxuXG5cdHJlbW92ZUZpbHRlcjogZnVuY3Rpb24gKCApIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXIgIT09IG51bGwgKSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmZpbHRlciApO1xuXHRcdFx0dGhpcy5maWx0ZXIuZGlzY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmdhaW4uY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cdFx0XHR0aGlzLmZpbHRlciA9IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyO1xuXG5cdH0sXG5cblx0c2V0RmlsdGVyOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCB0aGlzLmZpbHRlciAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5nYWluLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0XHR0aGlzLmZpbHRlci5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZ2Fpbi5kaXNjb25uZWN0KCB0aGlzLmNvbnRleHQuZGVzdGluYXRpb24gKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuZmlsdGVyID0gdmFsdWU7XG5cdFx0dGhpcy5nYWluLmNvbm5lY3QoIHRoaXMuZmlsdGVyICk7XG5cdFx0dGhpcy5maWx0ZXIuY29ubmVjdCggdGhpcy5jb250ZXh0LmRlc3RpbmF0aW9uICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldE1hc3RlclZvbHVtZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH0sXG5cblx0c2V0TWFzdGVyVm9sdW1lOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHVwZGF0ZU1hdHJpeFdvcmxkOiBmdW5jdGlvbiAoIGZvcmNlICkge1xuXG5cdFx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cblx0XHR2YXIgbGlzdGVuZXIgPSB0aGlzLmNvbnRleHQubGlzdGVuZXI7XG5cdFx0dmFyIHVwID0gdGhpcy51cDtcblxuXHRcdHRoaXMudGltZURlbHRhID0gdGhpcy5fY2xvY2suZ2V0RGVsdGEoKTtcblxuXHRcdHRoaXMubWF0cml4V29ybGQuZGVjb21wb3NlKCBfcG9zaXRpb24kMiwgX3F1YXRlcm5pb24kMywgX3NjYWxlJDEgKTtcblxuXHRcdF9vcmllbnRhdGlvbi5zZXQoIDAsIDAsIC0gMSApLmFwcGx5UXVhdGVybmlvbiggX3F1YXRlcm5pb24kMyApO1xuXG5cdFx0aWYgKCBsaXN0ZW5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIChzZWUgIzE0MzkzKVxuXG5cdFx0XHR2YXIgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMudGltZURlbHRhO1xuXG5cdFx0XHRsaXN0ZW5lci5wb3NpdGlvblgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9wb3NpdGlvbiQyLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnBvc2l0aW9uWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX3Bvc2l0aW9uJDIueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMi56LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci5mb3J3YXJkWC5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggX29yaWVudGF0aW9uLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLmZvcndhcmRZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24ueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIuZm9yd2FyZFoubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIF9vcmllbnRhdGlvbi56LCBlbmRUaW1lICk7XG5cdFx0XHRsaXN0ZW5lci51cFgubGluZWFyUmFtcFRvVmFsdWVBdFRpbWUoIHVwLngsIGVuZFRpbWUgKTtcblx0XHRcdGxpc3RlbmVyLnVwWS5saW5lYXJSYW1wVG9WYWx1ZUF0VGltZSggdXAueSwgZW5kVGltZSApO1xuXHRcdFx0bGlzdGVuZXIudXBaLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCB1cC56LCBlbmRUaW1lICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRsaXN0ZW5lci5zZXRQb3NpdGlvbiggX3Bvc2l0aW9uJDIueCwgX3Bvc2l0aW9uJDIueSwgX3Bvc2l0aW9uJDIueiApO1xuXHRcdFx0bGlzdGVuZXIuc2V0T3JpZW50YXRpb24oIF9vcmllbnRhdGlvbi54LCBfb3JpZW50YXRpb24ueSwgX29yaWVudGF0aW9uLnosIHVwLngsIHVwLnksIHVwLnogKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBSZWVjZSBBYXJvbiBMZWNyaXZhaW4gLyBodHRwOi8vcmVlY2Vub3Rlcy5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXVkaW8oIGxpc3RlbmVyICkge1xuXG5cdE9iamVjdDNELmNhbGwoIHRoaXMgKTtcblxuXHR0aGlzLnR5cGUgPSAnQXVkaW8nO1xuXG5cdHRoaXMubGlzdGVuZXIgPSBsaXN0ZW5lcjtcblx0dGhpcy5jb250ZXh0ID0gbGlzdGVuZXIuY29udGV4dDtcblxuXHR0aGlzLmdhaW4gPSB0aGlzLmNvbnRleHQuY3JlYXRlR2FpbigpO1xuXHR0aGlzLmdhaW4uY29ubmVjdCggbGlzdGVuZXIuZ2V0SW5wdXQoKSApO1xuXG5cdHRoaXMuYXV0b3BsYXkgPSBmYWxzZTtcblxuXHR0aGlzLmJ1ZmZlciA9IG51bGw7XG5cdHRoaXMuZGV0dW5lID0gMDtcblx0dGhpcy5sb29wID0gZmFsc2U7XG5cdHRoaXMubG9vcFN0YXJ0ID0gMDtcblx0dGhpcy5sb29wRW5kID0gMDtcblx0dGhpcy5vZmZzZXQgPSAwO1xuXHR0aGlzLmR1cmF0aW9uID0gdW5kZWZpbmVkO1xuXHR0aGlzLnBsYXliYWNrUmF0ZSA9IDE7XG5cdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gdHJ1ZTtcblx0dGhpcy5zb3VyY2VUeXBlID0gJ2VtcHR5JztcblxuXHR0aGlzLl9zdGFydGVkQXQgPSAwO1xuXHR0aGlzLl9wYXVzZWRBdCA9IDA7XG5cblx0dGhpcy5maWx0ZXJzID0gW107XG5cbn1cblxuQXVkaW8ucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogQXVkaW8sXG5cblx0Z2V0T3V0cHV0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nYWluO1xuXG5cdH0sXG5cblx0c2V0Tm9kZVNvdXJjZTogZnVuY3Rpb24gKCBhdWRpb05vZGUgKSB7XG5cblx0XHR0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9IGZhbHNlO1xuXHRcdHRoaXMuc291cmNlVHlwZSA9ICdhdWRpb05vZGUnO1xuXHRcdHRoaXMuc291cmNlID0gYXVkaW9Ob2RlO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRNZWRpYUVsZW1lbnRTb3VyY2U6IGZ1bmN0aW9uICggbWVkaWFFbGVtZW50ICkge1xuXG5cdFx0dGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPSBmYWxzZTtcblx0XHR0aGlzLnNvdXJjZVR5cGUgPSAnbWVkaWFOb2RlJztcblx0XHR0aGlzLnNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UoIG1lZGlhRWxlbWVudCApO1xuXHRcdHRoaXMuY29ubmVjdCgpO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRNZWRpYVN0cmVhbVNvdXJjZTogZnVuY3Rpb24gKCBtZWRpYVN0cmVhbSApIHtcblxuXHRcdHRoaXMuaGFzUGxheWJhY2tDb250cm9sID0gZmFsc2U7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ21lZGlhU3RyZWFtTm9kZSc7XG5cdFx0dGhpcy5zb3VyY2UgPSB0aGlzLmNvbnRleHQuY3JlYXRlTWVkaWFTdHJlYW1Tb3VyY2UoIG1lZGlhU3RyZWFtICk7XG5cdFx0dGhpcy5jb25uZWN0KCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEJ1ZmZlcjogZnVuY3Rpb24gKCBhdWRpb0J1ZmZlciApIHtcblxuXHRcdHRoaXMuYnVmZmVyID0gYXVkaW9CdWZmZXI7XG5cdFx0dGhpcy5zb3VyY2VUeXBlID0gJ2J1ZmZlcic7XG5cblx0XHRpZiAoIHRoaXMuYXV0b3BsYXkgKSB0aGlzLnBsYXkoKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0cGxheTogZnVuY3Rpb24gKCBkZWxheSApIHtcblxuXHRcdGlmICggZGVsYXkgPT09IHVuZGVmaW5lZCApIGRlbGF5ID0gMDtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiBBdWRpbyBpcyBhbHJlYWR5IHBsYXlpbmcuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmhhc1BsYXliYWNrQ29udHJvbCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiB0aGlzIEF1ZGlvIGhhcyBubyBwbGF5YmFjayBjb250cm9sLicgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHRoaXMuX3N0YXJ0ZWRBdCA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIGRlbGF5O1xuXG5cdFx0dmFyIHNvdXJjZSA9IHRoaXMuY29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcblx0XHRzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0c291cmNlLmxvb3AgPSB0aGlzLmxvb3A7XG5cdFx0c291cmNlLmxvb3BTdGFydCA9IHRoaXMubG9vcFN0YXJ0O1xuXHRcdHNvdXJjZS5sb29wRW5kID0gdGhpcy5sb29wRW5kO1xuXHRcdHNvdXJjZS5vbmVuZGVkID0gdGhpcy5vbkVuZGVkLmJpbmQoIHRoaXMgKTtcblx0XHRzb3VyY2Uuc3RhcnQoIHRoaXMuX3N0YXJ0ZWRBdCwgdGhpcy5fcGF1c2VkQXQgKyB0aGlzLm9mZnNldCwgdGhpcy5kdXJhdGlvbiApO1xuXG5cdFx0dGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuXG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2U7XG5cblx0XHR0aGlzLnNldERldHVuZSggdGhpcy5kZXR1bmUgKTtcblx0XHR0aGlzLnNldFBsYXliYWNrUmF0ZSggdGhpcy5wbGF5YmFja1JhdGUgKTtcblxuXHRcdHJldHVybiB0aGlzLmNvbm5lY3QoKTtcblxuXHR9LFxuXG5cdHBhdXNlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5fcGF1c2VkQXQgKz0gTWF0aC5tYXgoIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSAtIHRoaXMuX3N0YXJ0ZWRBdCwgMCApICogdGhpcy5wbGF5YmFja1JhdGU7XG5cblx0XHRcdHRoaXMuc291cmNlLnN0b3AoKTtcblx0XHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXG5cdFx0XHR0aGlzLmlzUGxheWluZyA9IGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzdG9wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fcGF1c2VkQXQgPSAwO1xuXG5cdFx0dGhpcy5zb3VyY2Uuc3RvcCgpO1xuXHRcdHRoaXMuc291cmNlLm9uZW5kZWQgPSBudWxsO1xuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmNvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5jb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5jb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGRpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggdGhpcy5maWx0ZXJzLmxlbmd0aCA+IDAgKSB7XG5cblx0XHRcdHRoaXMuc291cmNlLmRpc2Nvbm5lY3QoIHRoaXMuZmlsdGVyc1sgMCBdICk7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMSwgbCA9IHRoaXMuZmlsdGVycy5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRcdHRoaXMuZmlsdGVyc1sgaSAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmZpbHRlcnNbIGkgXSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmlsdGVyc1sgdGhpcy5maWx0ZXJzLmxlbmd0aCAtIDEgXS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kaXNjb25uZWN0KCB0aGlzLmdldE91dHB1dCgpICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldEZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlcnM7XG5cblx0fSxcblxuXHRzZXRGaWx0ZXJzOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0aWYgKCAhIHZhbHVlICkgdmFsdWUgPSBbXTtcblxuXHRcdGlmICggdGhpcy5pc1BsYXlpbmcgPT09IHRydWUgKSB7XG5cblx0XHRcdHRoaXMuZGlzY29ubmVjdCgpO1xuXHRcdFx0dGhpcy5maWx0ZXJzID0gdmFsdWU7XG5cdFx0XHR0aGlzLmNvbm5lY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMuZmlsdGVycyA9IHZhbHVlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXREZXR1bmU6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmRldHVuZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLnNvdXJjZS5kZXR1bmUgPT09IHVuZGVmaW5lZCApIHJldHVybjsgLy8gb25seSBzZXQgZGV0dW5lIHdoZW4gYXZhaWxhYmxlXG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5kZXR1bmUuc2V0VGFyZ2V0QXRUaW1lKCB0aGlzLmRldHVuZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldERldHVuZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZGV0dW5lO1xuXG5cdH0sXG5cblx0Z2V0RmlsdGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRGaWx0ZXJzKClbIDAgXTtcblxuXHR9LFxuXG5cdHNldEZpbHRlcjogZnVuY3Rpb24gKCBmaWx0ZXIgKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5zZXRGaWx0ZXJzKCBmaWx0ZXIgPyBbIGZpbHRlciBdIDogW10gKTtcblxuXHR9LFxuXG5cdHNldFBsYXliYWNrUmF0ZTogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IGZhbHNlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5BdWRpbzogdGhpcyBBdWRpbyBoYXMgbm8gcGxheWJhY2sgY29udHJvbC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHR0aGlzLnBsYXliYWNrUmF0ZSA9IHZhbHVlO1xuXG5cdFx0aWYgKCB0aGlzLmlzUGxheWluZyA9PT0gdHJ1ZSApIHtcblxuXHRcdFx0dGhpcy5zb3VyY2UucGxheWJhY2tSYXRlLnNldFRhcmdldEF0VGltZSggdGhpcy5wbGF5YmFja1JhdGUsIHRoaXMuY29udGV4dC5jdXJyZW50VGltZSwgMC4wMSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRQbGF5YmFja1JhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBsYXliYWNrUmF0ZTtcblxuXHR9LFxuXG5cdG9uRW5kZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG5cblx0fSxcblxuXHRnZXRMb29wOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMubG9vcDtcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRpZiAoIHRoaXMuaGFzUGxheWJhY2tDb250cm9sID09PSBmYWxzZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXVkaW86IHRoaXMgQXVkaW8gaGFzIG5vIHBsYXliYWNrIGNvbnRyb2wuJyApO1xuXHRcdFx0cmV0dXJuO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5sb29wID0gdmFsdWU7XG5cblx0XHRpZiAoIHRoaXMuaXNQbGF5aW5nID09PSB0cnVlICkge1xuXG5cdFx0XHR0aGlzLnNvdXJjZS5sb29wID0gdGhpcy5sb29wO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRMb29wU3RhcnQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLmxvb3BTdGFydCA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRMb29wRW5kOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5sb29wRW5kID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldFZvbHVtZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuZ2Fpbi5nYWluLnZhbHVlO1xuXG5cdH0sXG5cblx0c2V0Vm9sdW1lOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKCB2YWx1ZSwgdGhpcy5jb250ZXh0LmN1cnJlbnRUaW1lLCAwLjAxICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbnZhciBfcG9zaXRpb24kMyA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3F1YXRlcm5pb24kNCA9IG5ldyBRdWF0ZXJuaW9uKCk7XG52YXIgX3NjYWxlJDIgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9vcmllbnRhdGlvbiQxID0gbmV3IFZlY3RvcjMoKTtcblxuZnVuY3Rpb24gUG9zaXRpb25hbEF1ZGlvKCBsaXN0ZW5lciApIHtcblxuXHRBdWRpby5jYWxsKCB0aGlzLCBsaXN0ZW5lciApO1xuXG5cdHRoaXMucGFubmVyID0gdGhpcy5jb250ZXh0LmNyZWF0ZVBhbm5lcigpO1xuXHR0aGlzLnBhbm5lci5wYW5uaW5nTW9kZWwgPSAnSFJURic7XG5cdHRoaXMucGFubmVyLmNvbm5lY3QoIHRoaXMuZ2FpbiApO1xuXG59XG5cblBvc2l0aW9uYWxBdWRpby5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBBdWRpby5wcm90b3R5cGUgKSwge1xuXG5cdGNvbnN0cnVjdG9yOiBQb3NpdGlvbmFsQXVkaW8sXG5cblx0Z2V0T3V0cHV0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXI7XG5cblx0fSxcblxuXHRnZXRSZWZEaXN0YW5jZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMucGFubmVyLnJlZkRpc3RhbmNlO1xuXG5cdH0sXG5cblx0c2V0UmVmRGlzdGFuY2U6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yZWZEaXN0YW5jZSA9IHZhbHVlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRnZXRSb2xsb2ZmRmFjdG9yOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5wYW5uZXIucm9sbG9mZkZhY3RvcjtcblxuXHR9LFxuXG5cdHNldFJvbGxvZmZGYWN0b3I6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHR0aGlzLnBhbm5lci5yb2xsb2ZmRmFjdG9yID0gdmFsdWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldERpc3RhbmNlTW9kZWw6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5kaXN0YW5jZU1vZGVsO1xuXG5cdH0sXG5cblx0c2V0RGlzdGFuY2VNb2RlbDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdHRoaXMucGFubmVyLmRpc3RhbmNlTW9kZWwgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Z2V0TWF4RGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnBhbm5lci5tYXhEaXN0YW5jZTtcblxuXHR9LFxuXG5cdHNldE1heERpc3RhbmNlOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0dGhpcy5wYW5uZXIubWF4RGlzdGFuY2UgPSB2YWx1ZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RGlyZWN0aW9uYWxDb25lOiBmdW5jdGlvbiAoIGNvbmVJbm5lckFuZ2xlLCBjb25lT3V0ZXJBbmdsZSwgY29uZU91dGVyR2FpbiApIHtcblxuXHRcdHRoaXMucGFubmVyLmNvbmVJbm5lckFuZ2xlID0gY29uZUlubmVyQW5nbGU7XG5cdFx0dGhpcy5wYW5uZXIuY29uZU91dGVyQW5nbGUgPSBjb25lT3V0ZXJBbmdsZTtcblx0XHR0aGlzLnBhbm5lci5jb25lT3V0ZXJHYWluID0gY29uZU91dGVyR2FpbjtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dXBkYXRlTWF0cml4V29ybGQ6IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0XHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxuXHRcdGlmICggdGhpcy5oYXNQbGF5YmFja0NvbnRyb2wgPT09IHRydWUgJiYgdGhpcy5pc1BsYXlpbmcgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0dGhpcy5tYXRyaXhXb3JsZC5kZWNvbXBvc2UoIF9wb3NpdGlvbiQzLCBfcXVhdGVybmlvbiQ0LCBfc2NhbGUkMiApO1xuXG5cdFx0X29yaWVudGF0aW9uJDEuc2V0KCAwLCAwLCAxICkuYXBwbHlRdWF0ZXJuaW9uKCBfcXVhdGVybmlvbiQ0ICk7XG5cblx0XHR2YXIgcGFubmVyID0gdGhpcy5wYW5uZXI7XG5cblx0XHRpZiAoIHBhbm5lci5wb3NpdGlvblggKSB7XG5cblx0XHRcdC8vIGNvZGUgcGF0aCBmb3IgQ2hyb21lIGFuZCBGaXJlZm94IChzZWUgIzE0MzkzKVxuXG5cdFx0XHR2YXIgZW5kVGltZSA9IHRoaXMuY29udGV4dC5jdXJyZW50VGltZSArIHRoaXMubGlzdGVuZXIudGltZURlbHRhO1xuXG5cdFx0XHRwYW5uZXIucG9zaXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIucG9zaXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy55LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIucG9zaXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfcG9zaXRpb24kMy56LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25YLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS54LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25ZLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS55LCBlbmRUaW1lICk7XG5cdFx0XHRwYW5uZXIub3JpZW50YXRpb25aLmxpbmVhclJhbXBUb1ZhbHVlQXRUaW1lKCBfb3JpZW50YXRpb24kMS56LCBlbmRUaW1lICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRwYW5uZXIuc2V0UG9zaXRpb24oIF9wb3NpdGlvbiQzLngsIF9wb3NpdGlvbiQzLnksIF9wb3NpdGlvbiQzLnogKTtcblx0XHRcdHBhbm5lci5zZXRPcmllbnRhdGlvbiggX29yaWVudGF0aW9uJDEueCwgX29yaWVudGF0aW9uJDEueSwgX29yaWVudGF0aW9uJDEueiApO1xuXG5cdFx0fVxuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKi9cblxuZnVuY3Rpb24gQXVkaW9BbmFseXNlciggYXVkaW8sIGZmdFNpemUgKSB7XG5cblx0dGhpcy5hbmFseXNlciA9IGF1ZGlvLmNvbnRleHQuY3JlYXRlQW5hbHlzZXIoKTtcblx0dGhpcy5hbmFseXNlci5mZnRTaXplID0gZmZ0U2l6ZSAhPT0gdW5kZWZpbmVkID8gZmZ0U2l6ZSA6IDIwNDg7XG5cblx0dGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkoIHRoaXMuYW5hbHlzZXIuZnJlcXVlbmN5QmluQ291bnQgKTtcblxuXHRhdWRpby5nZXRPdXRwdXQoKS5jb25uZWN0KCB0aGlzLmFuYWx5c2VyICk7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggQXVkaW9BbmFseXNlci5wcm90b3R5cGUsIHtcblxuXHRnZXRGcmVxdWVuY3lEYXRhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLmFuYWx5c2VyLmdldEJ5dGVGcmVxdWVuY3lEYXRhKCB0aGlzLmRhdGEgKTtcblxuXHRcdHJldHVybiB0aGlzLmRhdGE7XG5cblx0fSxcblxuXHRnZXRBdmVyYWdlRnJlcXVlbmN5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgdmFsdWUgPSAwLCBkYXRhID0gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0dmFsdWUgKz0gZGF0YVsgaSBdO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlIC8gZGF0YS5sZW5ndGg7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEJ1ZmZlcmVkIHNjZW5lIGdyYXBoIHByb3BlcnR5IHRoYXQgYWxsb3dzIHdlaWdodGVkIGFjY3VtdWxhdGlvbi5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIFByb3BlcnR5TWl4ZXIoIGJpbmRpbmcsIHR5cGVOYW1lLCB2YWx1ZVNpemUgKSB7XG5cblx0dGhpcy5iaW5kaW5nID0gYmluZGluZztcblx0dGhpcy52YWx1ZVNpemUgPSB2YWx1ZVNpemU7XG5cblx0dmFyIGJ1ZmZlclR5cGUgPSBGbG9hdDY0QXJyYXksXG5cdFx0bWl4RnVuY3Rpb247XG5cblx0c3dpdGNoICggdHlwZU5hbWUgKSB7XG5cblx0XHRjYXNlICdxdWF0ZXJuaW9uJzpcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fc2xlcnA7XG5cdFx0XHRicmVhaztcblxuXHRcdGNhc2UgJ3N0cmluZyc6XG5cdFx0Y2FzZSAnYm9vbCc6XG5cdFx0XHRidWZmZXJUeXBlID0gQXJyYXk7XG5cdFx0XHRtaXhGdW5jdGlvbiA9IHRoaXMuX3NlbGVjdDtcblx0XHRcdGJyZWFrO1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdG1peEZ1bmN0aW9uID0gdGhpcy5fbGVycDtcblxuXHR9XG5cblx0dGhpcy5idWZmZXIgPSBuZXcgYnVmZmVyVHlwZSggdmFsdWVTaXplICogNCApO1xuXHQvLyBsYXlvdXQ6IFsgaW5jb21pbmcgfCBhY2N1MCB8IGFjY3UxIHwgb3JpZyBdXG5cdC8vXG5cdC8vIGludGVycG9sYXRvcnMgY2FuIHVzZSAuYnVmZmVyIGFzIHRoZWlyIC5yZXN1bHRcblx0Ly8gdGhlIGRhdGEgdGhlbiBnb2VzIHRvICdpbmNvbWluZydcblx0Ly9cblx0Ly8gJ2FjY3UwJyBhbmQgJ2FjY3UxJyBhcmUgdXNlZCBmcmFtZS1pbnRlcmxlYXZlZCBmb3Jcblx0Ly8gdGhlIGN1bXVsYXRpdmUgcmVzdWx0IGFuZCBhcmUgY29tcGFyZWQgdG8gZGV0ZWN0XG5cdC8vIGNoYW5nZXNcblx0Ly9cblx0Ly8gJ29yaWcnIHN0b3JlcyB0aGUgb3JpZ2luYWwgc3RhdGUgb2YgdGhlIHByb3BlcnR5XG5cblx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uID0gbWl4RnVuY3Rpb247XG5cblx0dGhpcy5jdW11bGF0aXZlV2VpZ2h0ID0gMDtcblxuXHR0aGlzLnVzZUNvdW50ID0gMDtcblx0dGhpcy5yZWZlcmVuY2VDb3VudCA9IDA7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggUHJvcGVydHlNaXhlci5wcm90b3R5cGUsIHtcblxuXHQvLyBhY2N1bXVsYXRlIGRhdGEgaW4gdGhlICdpbmNvbWluZycgcmVnaW9uIGludG8gJ2FjY3U8aT4nXG5cdGFjY3VtdWxhdGU6IGZ1bmN0aW9uICggYWNjdUluZGV4LCB3ZWlnaHQgKSB7XG5cblx0XHQvLyBub3RlOiBoYXBwaWx5IGFjY3VtdWxhdGluZyBub3RoaW5nIHdoZW4gd2VpZ2h0ID0gMCwgdGhlIGNhbGxlciBrbm93c1xuXHRcdC8vIHRoZSB3ZWlnaHQgYW5kIHNob3VsZG4ndCBoYXZlIG1hZGUgdGhlIGNhbGwgaW4gdGhlIGZpcnN0IHBsYWNlXG5cblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdG9mZnNldCA9IGFjY3VJbmRleCAqIHN0cmlkZSArIHN0cmlkZSxcblxuXHRcdFx0Y3VycmVudFdlaWdodCA9IHRoaXMuY3VtdWxhdGl2ZVdlaWdodDtcblxuXHRcdGlmICggY3VycmVudFdlaWdodCA9PT0gMCApIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gaW5jb21pbmcgKiB3ZWlnaHRcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdFx0YnVmZmVyWyBvZmZzZXQgKyBpIF0gPSBidWZmZXJbIGkgXTtcblxuXHRcdFx0fVxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gYWNjdU4gOj0gYWNjdU4gKyBpbmNvbWluZyAqIHdlaWdodFxuXG5cdFx0XHRjdXJyZW50V2VpZ2h0ICs9IHdlaWdodDtcblx0XHRcdHZhciBtaXggPSB3ZWlnaHQgLyBjdXJyZW50V2VpZ2h0O1xuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKCBidWZmZXIsIG9mZnNldCwgMCwgbWl4LCBzdHJpZGUgKTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IGN1cnJlbnRXZWlnaHQ7XG5cblx0fSxcblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgb2YgJ2FjY3U8aT4nIHRvIHRoZSBiaW5kaW5nIHdoZW4gYWNjdXMgZGlmZmVyXG5cdGFwcGx5OiBmdW5jdGlvbiAoIGFjY3VJbmRleCApIHtcblxuXHRcdHZhciBzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblx0XHRcdGJ1ZmZlciA9IHRoaXMuYnVmZmVyLFxuXHRcdFx0b2Zmc2V0ID0gYWNjdUluZGV4ICogc3RyaWRlICsgc3RyaWRlLFxuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLmN1bXVsYXRpdmVXZWlnaHQsXG5cblx0XHRcdGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR0aGlzLmN1bXVsYXRpdmVXZWlnaHQgPSAwO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPCAxICkge1xuXG5cdFx0XHQvLyBhY2N1TiA6PSBhY2N1TiArIG9yaWdpbmFsICogKCAxIC0gY3VtdWxhdGl2ZVdlaWdodCApXG5cblx0XHRcdHZhciBvcmlnaW5hbFZhbHVlT2Zmc2V0ID0gc3RyaWRlICogMztcblxuXHRcdFx0dGhpcy5fbWl4QnVmZmVyUmVnaW9uKFxuXHRcdFx0XHRidWZmZXIsIG9mZnNldCwgb3JpZ2luYWxWYWx1ZU9mZnNldCwgMSAtIHdlaWdodCwgc3RyaWRlICk7XG5cblx0XHR9XG5cblx0XHRmb3IgKCB2YXIgaSA9IHN0cmlkZSwgZSA9IHN0cmlkZSArIHN0cmlkZTsgaSAhPT0gZTsgKysgaSApIHtcblxuXHRcdFx0aWYgKCBidWZmZXJbIGkgXSAhPT0gYnVmZmVyWyBpICsgc3RyaWRlIF0gKSB7XG5cblx0XHRcdFx0Ly8gdmFsdWUgaGFzIGNoYW5nZWQgLT4gdXBkYXRlIHNjZW5lIGdyYXBoXG5cblx0XHRcdFx0YmluZGluZy5zZXRWYWx1ZSggYnVmZmVyLCBvZmZzZXQgKTtcblx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9LFxuXG5cdC8vIHJlbWVtYmVyIHRoZSBzdGF0ZSBvZiB0aGUgYm91bmQgcHJvcGVydHkgYW5kIGNvcHkgaXQgdG8gYm90aCBhY2N1c1xuXHRzYXZlT3JpZ2luYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7XG5cblx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXIsXG5cdFx0XHRzdHJpZGUgPSB0aGlzLnZhbHVlU2l6ZSxcblxuXHRcdFx0b3JpZ2luYWxWYWx1ZU9mZnNldCA9IHN0cmlkZSAqIDM7XG5cblx0XHRiaW5kaW5nLmdldFZhbHVlKCBidWZmZXIsIG9yaWdpbmFsVmFsdWVPZmZzZXQgKTtcblxuXHRcdC8vIGFjY3VbMC4uMV0gOj0gb3JpZyAtLSBpbml0aWFsbHkgZGV0ZWN0IGNoYW5nZXMgYWdhaW5zdCB0aGUgb3JpZ2luYWxcblx0XHRmb3IgKCB2YXIgaSA9IHN0cmlkZSwgZSA9IG9yaWdpbmFsVmFsdWVPZmZzZXQ7IGkgIT09IGU7ICsrIGkgKSB7XG5cblx0XHRcdGJ1ZmZlclsgaSBdID0gYnVmZmVyWyBvcmlnaW5hbFZhbHVlT2Zmc2V0ICsgKCBpICUgc3RyaWRlICkgXTtcblxuXHRcdH1cblxuXHRcdHRoaXMuY3VtdWxhdGl2ZVdlaWdodCA9IDA7XG5cblx0fSxcblxuXHQvLyBhcHBseSB0aGUgc3RhdGUgcHJldmlvdXNseSB0YWtlbiB2aWEgJ3NhdmVPcmlnaW5hbFN0YXRlJyB0byB0aGUgYmluZGluZ1xuXHRyZXN0b3JlT3JpZ2luYWxTdGF0ZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIG9yaWdpbmFsVmFsdWVPZmZzZXQgPSB0aGlzLnZhbHVlU2l6ZSAqIDM7XG5cdFx0dGhpcy5iaW5kaW5nLnNldFZhbHVlKCB0aGlzLmJ1ZmZlciwgb3JpZ2luYWxWYWx1ZU9mZnNldCApO1xuXG5cdH0sXG5cblxuXHQvLyBtaXggZnVuY3Rpb25zXG5cblx0X3NlbGVjdDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHRpZiAoIHQgPj0gMC41ICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IHN0cmlkZTsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIGRzdE9mZnNldCArIGkgXSA9IGJ1ZmZlclsgc3JjT2Zmc2V0ICsgaSBdO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfc2xlcnA6IGZ1bmN0aW9uICggYnVmZmVyLCBkc3RPZmZzZXQsIHNyY09mZnNldCwgdCApIHtcblxuXHRcdFF1YXRlcm5pb24uc2xlcnBGbGF0KCBidWZmZXIsIGRzdE9mZnNldCwgYnVmZmVyLCBkc3RPZmZzZXQsIGJ1ZmZlciwgc3JjT2Zmc2V0LCB0ICk7XG5cblx0fSxcblxuXHRfbGVycDogZnVuY3Rpb24gKCBidWZmZXIsIGRzdE9mZnNldCwgc3JjT2Zmc2V0LCB0LCBzdHJpZGUgKSB7XG5cblx0XHR2YXIgcyA9IDEgLSB0O1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwOyBpICE9PSBzdHJpZGU7ICsrIGkgKSB7XG5cblx0XHRcdHZhciBqID0gZHN0T2Zmc2V0ICsgaTtcblxuXHRcdFx0YnVmZmVyWyBqIF0gPSBidWZmZXJbIGogXSAqIHMgKyBidWZmZXJbIHNyY09mZnNldCArIGkgXSAqIHQ7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICpcbiAqIEEgcmVmZXJlbmNlIHRvIGEgcmVhbCBwcm9wZXJ0eSBpbiB0aGUgc2NlbmUgZ3JhcGguXG4gKlxuICpcbiAqIEBhdXRob3IgQmVuIEhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIERhdmlkIFNhcm5vIC8gaHR0cDovL2xpZ2h0aGF1cy51cy9cbiAqIEBhdXRob3IgdHNjaHdcbiAqL1xuXG4vLyBDaGFyYWN0ZXJzIFtdLjovIGFyZSByZXNlcnZlZCBmb3IgdHJhY2sgYmluZGluZyBzeW50YXguXG52YXIgX1JFU0VSVkVEX0NIQVJTX1JFID0gJ1xcXFxbXFxcXF1cXFxcLjpcXFxcLyc7XG52YXIgX3Jlc2VydmVkUmUgPSBuZXcgUmVnRXhwKCAnWycgKyBfUkVTRVJWRURfQ0hBUlNfUkUgKyAnXScsICdnJyApO1xuXG4vLyBBdHRlbXB0cyB0byBhbGxvdyBub2RlIG5hbWVzIGZyb20gYW55IGxhbmd1YWdlLiBFUzUncyBgXFx3YCByZWdleHAgbWF0Y2hlc1xuLy8gb25seSBsYXRpbiBjaGFyYWN0ZXJzLCBhbmQgdGhlIHVuaWNvZGUgXFxwe0x9IGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBTb1xuLy8gaW5zdGVhZCwgd2UgZXhjbHVkZSByZXNlcnZlZCBjaGFyYWN0ZXJzIGFuZCBtYXRjaCBldmVyeXRoaW5nIGVsc2UuXG52YXIgX3dvcmRDaGFyID0gJ1teJyArIF9SRVNFUlZFRF9DSEFSU19SRSArICddJztcbnZhciBfd29yZENoYXJPckRvdCA9ICdbXicgKyBfUkVTRVJWRURfQ0hBUlNfUkUucmVwbGFjZSggJ1xcXFwuJywgJycgKSArICddJztcblxuLy8gUGFyZW50IGRpcmVjdG9yaWVzLCBkZWxpbWl0ZWQgYnkgJy8nIG9yICc6Jy4gQ3VycmVudGx5IHVudXNlZCwgYnV0IG11c3Rcbi8vIGJlIG1hdGNoZWQgdG8gcGFyc2UgdGhlIHJlc3Qgb2YgdGhlIHRyYWNrIG5hbWUuXG52YXIgX2RpcmVjdG9yeVJlID0gLygoPzpXQytbXFwvOl0pKikvLnNvdXJjZS5yZXBsYWNlKCAnV0MnLCBfd29yZENoYXIgKTtcblxuLy8gVGFyZ2V0IG5vZGUuIE1heSBjb250YWluIHdvcmQgY2hhcmFjdGVycyAoYS16QS1aMC05XykgYW5kICcuJyBvciAnLScuXG52YXIgX25vZGVSZSA9IC8oV0NPRCspPy8uc291cmNlLnJlcGxhY2UoICdXQ09EJywgX3dvcmRDaGFyT3JEb3QgKTtcblxuLy8gT2JqZWN0IG9uIHRhcmdldCBub2RlLCBhbmQgYWNjZXNzb3IuIE1heSBub3QgY29udGFpbiByZXNlcnZlZFxuLy8gY2hhcmFjdGVycy4gQWNjZXNzb3IgbWF5IGNvbnRhaW4gYW55IGNoYXJhY3RlciBleGNlcHQgY2xvc2luZyBicmFja2V0LlxudmFyIF9vYmplY3RSZSA9IC8oPzpcXC4oV0MrKSg/OlxcWyguKylcXF0pPyk/Ly5zb3VyY2UucmVwbGFjZSggJ1dDJywgX3dvcmRDaGFyICk7XG5cbi8vIFByb3BlcnR5IGFuZCBhY2Nlc3Nvci4gTWF5IG5vdCBjb250YWluIHJlc2VydmVkIGNoYXJhY3RlcnMuIEFjY2Vzc29yIG1heVxuLy8gY29udGFpbiBhbnkgbm9uLWJyYWNrZXQgY2hhcmFjdGVycy5cbnZhciBfcHJvcGVydHlSZSA9IC9cXC4oV0MrKSg/OlxcWyguKylcXF0pPy8uc291cmNlLnJlcGxhY2UoICdXQycsIF93b3JkQ2hhciApO1xuXG52YXIgX3RyYWNrUmUgPSBuZXcgUmVnRXhwKCAnJ1xuXHQrICdeJ1xuXHQrIF9kaXJlY3RvcnlSZVxuXHQrIF9ub2RlUmVcblx0KyBfb2JqZWN0UmVcblx0KyBfcHJvcGVydHlSZVxuXHQrICckJ1xuKTtcblxudmFyIF9zdXBwb3J0ZWRPYmplY3ROYW1lcyA9IFsgJ21hdGVyaWFsJywgJ21hdGVyaWFscycsICdib25lcycgXTtcblxuZnVuY3Rpb24gQ29tcG9zaXRlKCB0YXJnZXRHcm91cCwgcGF0aCwgb3B0aW9uYWxQYXJzZWRQYXRoICkge1xuXG5cdHZhciBwYXJzZWRQYXRoID0gb3B0aW9uYWxQYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdHRoaXMuX3RhcmdldEdyb3VwID0gdGFyZ2V0R3JvdXA7XG5cdHRoaXMuX2JpbmRpbmdzID0gdGFyZ2V0R3JvdXAuc3Vic2NyaWJlXyggcGF0aCwgcGFyc2VkUGF0aCApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIENvbXBvc2l0ZS5wcm90b3R5cGUsIHtcblxuXHRnZXRWYWx1ZTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dGhpcy5iaW5kKCk7IC8vIGJpbmQgYWxsIGJpbmRpbmdcblxuXHRcdHZhciBmaXJzdFZhbGlkSW5kZXggPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nID0gdGhpcy5fYmluZGluZ3NbIGZpcnN0VmFsaWRJbmRleCBdO1xuXG5cdFx0Ly8gYW5kIG9ubHkgY2FsbCAuZ2V0VmFsdWUgb24gdGhlIGZpcnN0XG5cdFx0aWYgKCBiaW5kaW5nICE9PSB1bmRlZmluZWQgKSBiaW5kaW5nLmdldFZhbHVlKCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblxuXHRzZXRWYWx1ZTogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCB2YXIgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5zZXRWYWx1ZSggYXJyYXksIG9mZnNldCApO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3M7XG5cblx0XHRmb3IgKCB2YXIgaSA9IHRoaXMuX3RhcmdldEdyb3VwLm5DYWNoZWRPYmplY3RzXywgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5iaW5kKCk7XG5cblx0XHR9XG5cblx0fSxcblxuXHR1bmJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzO1xuXG5cdFx0Zm9yICggdmFyIGkgPSB0aGlzLl90YXJnZXRHcm91cC5uQ2FjaGVkT2JqZWN0c18sIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdGJpbmRpbmdzWyBpIF0udW5iaW5kKCk7XG5cblx0XHR9XG5cblx0fVxuXG59ICk7XG5cblxuZnVuY3Rpb24gUHJvcGVydHlCaW5kaW5nKCByb290Tm9kZSwgcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHR0aGlzLnBhdGggPSBwYXRoO1xuXHR0aGlzLnBhcnNlZFBhdGggPSBwYXJzZWRQYXRoIHx8IFByb3BlcnR5QmluZGluZy5wYXJzZVRyYWNrTmFtZSggcGF0aCApO1xuXG5cdHRoaXMubm9kZSA9IFByb3BlcnR5QmluZGluZy5maW5kTm9kZSggcm9vdE5vZGUsIHRoaXMucGFyc2VkUGF0aC5ub2RlTmFtZSApIHx8IHJvb3ROb2RlO1xuXG5cdHRoaXMucm9vdE5vZGUgPSByb290Tm9kZTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcsIHtcblxuXHRDb21wb3NpdGU6IENvbXBvc2l0ZSxcblxuXHRjcmVhdGU6IGZ1bmN0aW9uICggcm9vdCwgcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHRcdGlmICggISAoIHJvb3QgJiYgcm9vdC5pc0FuaW1hdGlvbk9iamVjdEdyb3VwICkgKSB7XG5cblx0XHRcdHJldHVybiBuZXcgUHJvcGVydHlCaW5kaW5nKCByb290LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRyZXR1cm4gbmV3IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGUoIHJvb3QsIHBhdGgsIHBhcnNlZFBhdGggKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXBsYWNlcyBzcGFjZXMgd2l0aCB1bmRlcnNjb3JlcyBhbmQgcmVtb3ZlcyB1bnN1cHBvcnRlZCBjaGFyYWN0ZXJzIGZyb21cblx0ICogbm9kZSBuYW1lcywgdG8gZW5zdXJlIGNvbXBhdGliaWxpdHkgd2l0aCBwYXJzZVRyYWNrTmFtZSgpLlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOb2RlIG5hbWUgdG8gYmUgc2FuaXRpemVkLlxuXHQgKiBAcmV0dXJuIHtzdHJpbmd9XG5cdCAqL1xuXHRzYW5pdGl6ZU5vZGVOYW1lOiBmdW5jdGlvbiAoIG5hbWUgKSB7XG5cblx0XHRyZXR1cm4gbmFtZS5yZXBsYWNlKCAvXFxzL2csICdfJyApLnJlcGxhY2UoIF9yZXNlcnZlZFJlLCAnJyApO1xuXG5cdH0sXG5cblx0cGFyc2VUcmFja05hbWU6IGZ1bmN0aW9uICggdHJhY2tOYW1lICkge1xuXG5cdFx0dmFyIG1hdGNoZXMgPSBfdHJhY2tSZS5leGVjKCB0cmFja05hbWUgKTtcblxuXHRcdGlmICggISBtYXRjaGVzICkge1xuXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoICdQcm9wZXJ0eUJpbmRpbmc6IENhbm5vdCBwYXJzZSB0cmFja05hbWU6ICcgKyB0cmFja05hbWUgKTtcblxuXHRcdH1cblxuXHRcdHZhciByZXN1bHRzID0ge1xuXHRcdFx0Ly8gZGlyZWN0b3J5TmFtZTogbWF0Y2hlc1sgMSBdLCAvLyAodHNjaHcpIGN1cnJlbnRseSB1bnVzZWRcblx0XHRcdG5vZGVOYW1lOiBtYXRjaGVzWyAyIF0sXG5cdFx0XHRvYmplY3ROYW1lOiBtYXRjaGVzWyAzIF0sXG5cdFx0XHRvYmplY3RJbmRleDogbWF0Y2hlc1sgNCBdLFxuXHRcdFx0cHJvcGVydHlOYW1lOiBtYXRjaGVzWyA1IF0sIC8vIHJlcXVpcmVkXG5cdFx0XHRwcm9wZXJ0eUluZGV4OiBtYXRjaGVzWyA2IF1cblx0XHR9O1xuXG5cdFx0dmFyIGxhc3REb3QgPSByZXN1bHRzLm5vZGVOYW1lICYmIHJlc3VsdHMubm9kZU5hbWUubGFzdEluZGV4T2YoICcuJyApO1xuXG5cdFx0aWYgKCBsYXN0RG90ICE9PSB1bmRlZmluZWQgJiYgbGFzdERvdCAhPT0gLSAxICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0TmFtZSA9IHJlc3VsdHMubm9kZU5hbWUuc3Vic3RyaW5nKCBsYXN0RG90ICsgMSApO1xuXG5cdFx0XHQvLyBPYmplY3QgbmFtZXMgbXVzdCBiZSBjaGVja2VkIGFnYWluc3QgYSB3aGl0ZWxpc3QuIE90aGVyd2lzZSwgdGhlcmVcblx0XHRcdC8vIGlzIG5vIHdheSB0byBwYXJzZSAnZm9vLmJhci5iYXonOiAnYmF6JyBtdXN0IGJlIGEgcHJvcGVydHksIGJ1dFxuXHRcdFx0Ly8gJ2JhcicgY291bGQgYmUgdGhlIG9iamVjdE5hbWUsIG9yIHBhcnQgb2YgYSBub2RlTmFtZSAod2hpY2ggY2FuXG5cdFx0XHQvLyBpbmNsdWRlICcuJyBjaGFyYWN0ZXJzKS5cblx0XHRcdGlmICggX3N1cHBvcnRlZE9iamVjdE5hbWVzLmluZGV4T2YoIG9iamVjdE5hbWUgKSAhPT0gLSAxICkge1xuXG5cdFx0XHRcdHJlc3VsdHMubm9kZU5hbWUgPSByZXN1bHRzLm5vZGVOYW1lLnN1YnN0cmluZyggMCwgbGFzdERvdCApO1xuXHRcdFx0XHRyZXN1bHRzLm9iamVjdE5hbWUgPSBvYmplY3ROYW1lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRpZiAoIHJlc3VsdHMucHJvcGVydHlOYW1lID09PSBudWxsIHx8IHJlc3VsdHMucHJvcGVydHlOYW1lLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCAnUHJvcGVydHlCaW5kaW5nOiBjYW4gbm90IHBhcnNlIHByb3BlcnR5TmFtZSBmcm9tIHRyYWNrTmFtZTogJyArIHRyYWNrTmFtZSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0fSxcblxuXHRmaW5kTm9kZTogZnVuY3Rpb24gKCByb290LCBub2RlTmFtZSApIHtcblxuXHRcdGlmICggISBub2RlTmFtZSB8fCBub2RlTmFtZSA9PT0gXCJcIiB8fCBub2RlTmFtZSA9PT0gXCIuXCIgfHwgbm9kZU5hbWUgPT09IC0gMSB8fCBub2RlTmFtZSA9PT0gcm9vdC5uYW1lIHx8IG5vZGVOYW1lID09PSByb290LnV1aWQgKSB7XG5cblx0XHRcdHJldHVybiByb290O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VhcmNoIGludG8gc2tlbGV0b24gYm9uZXMuXG5cdFx0aWYgKCByb290LnNrZWxldG9uICkge1xuXG5cdFx0XHR2YXIgYm9uZSA9IHJvb3Quc2tlbGV0b24uZ2V0Qm9uZUJ5TmFtZSggbm9kZU5hbWUgKTtcblxuXHRcdFx0aWYgKCBib25lICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGJvbmU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHNlYXJjaCBpbnRvIG5vZGUgc3VidHJlZS5cblx0XHRpZiAoIHJvb3QuY2hpbGRyZW4gKSB7XG5cblx0XHRcdHZhciBzZWFyY2hOb2RlU3VidHJlZSA9IGZ1bmN0aW9uICggY2hpbGRyZW4gKSB7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHRcdFx0dmFyIGNoaWxkTm9kZSA9IGNoaWxkcmVuWyBpIF07XG5cblx0XHRcdFx0XHRpZiAoIGNoaWxkTm9kZS5uYW1lID09PSBub2RlTmFtZSB8fCBjaGlsZE5vZGUudXVpZCA9PT0gbm9kZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdHJldHVybiBjaGlsZE5vZGU7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgcmVzdWx0ID0gc2VhcmNoTm9kZVN1YnRyZWUoIGNoaWxkTm9kZS5jaGlsZHJlbiApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXN1bHQgKSByZXR1cm4gcmVzdWx0O1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdFx0fTtcblxuXHRcdFx0dmFyIHN1YlRyZWVOb2RlID0gc2VhcmNoTm9kZVN1YnRyZWUoIHJvb3QuY2hpbGRyZW4gKTtcblxuXHRcdFx0aWYgKCBzdWJUcmVlTm9kZSApIHtcblxuXHRcdFx0XHRyZXR1cm4gc3ViVHJlZU5vZGU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7IC8vIHByb3RvdHlwZSwgY29udGludWVkXG5cblx0Ly8gdGhlc2UgYXJlIHVzZWQgdG8gXCJiaW5kXCIgYSBub25leGlzdGVudCBwcm9wZXJ0eVxuXHRfZ2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHt9LFxuXHRfc2V0VmFsdWVfdW5hdmFpbGFibGU6IGZ1bmN0aW9uICgpIHt9LFxuXG5cdEJpbmRpbmdUeXBlOiB7XG5cdFx0RGlyZWN0OiAwLFxuXHRcdEVudGlyZUFycmF5OiAxLFxuXHRcdEFycmF5RWxlbWVudDogMixcblx0XHRIYXNGcm9tVG9BcnJheTogM1xuXHR9LFxuXG5cdFZlcnNpb25pbmc6IHtcblx0XHROb25lOiAwLFxuXHRcdE5lZWRzVXBkYXRlOiAxLFxuXHRcdE1hdHJpeFdvcmxkTmVlZHNVcGRhdGU6IDJcblx0fSxcblxuXHRHZXR0ZXJCeUJpbmRpbmdUeXBlOiBbXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9kaXJlY3QoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5ub2RlWyB0aGlzLnByb3BlcnR5TmFtZSBdO1xuXG5cdFx0fSxcblxuXHRcdGZ1bmN0aW9uIGdldFZhbHVlX2FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0dmFyIHNvdXJjZSA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gc291cmNlLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRidWZmZXJbIG9mZnNldCArKyBdID0gc291cmNlWyBpIF07XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRidWZmZXJbIG9mZnNldCBdID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5WyB0aGlzLnByb3BlcnR5SW5kZXggXTtcblxuXHRcdH0sXG5cblx0XHRmdW5jdGlvbiBnZXRWYWx1ZV90b0FycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0dGhpcy5yZXNvbHZlZFByb3BlcnR5LnRvQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cblx0XHR9XG5cblx0XSxcblxuXHRTZXR0ZXJCeUJpbmRpbmdUeXBlQW5kVmVyc2lvbmluZzogW1xuXG5cdFx0W1xuXHRcdFx0Ly8gRGlyZWN0XG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2RpcmVjdCggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3Rfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0WyB0aGlzLnByb3BlcnR5TmFtZSBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9kaXJlY3Rfc2V0TWF0cml4V29ybGROZWVkc1VwZGF0ZSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3RbIHRoaXMucHJvcGVydHlOYW1lIF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5tYXRyaXhXb3JsZE5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fVxuXG5cdFx0XSwgW1xuXG5cdFx0XHQvLyBFbnRpcmVBcnJheVxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheSggYnVmZmVyLCBvZmZzZXQgKSB7XG5cblx0XHRcdFx0dmFyIGRlc3QgPSB0aGlzLnJlc29sdmVkUHJvcGVydHk7XG5cblx0XHRcdFx0Zm9yICggdmFyIGkgPSAwLCBuID0gZGVzdC5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0XHRkZXN0WyBpIF0gPSBidWZmZXJbIG9mZnNldCArKyBdO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfYXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHZhciBkZXN0ID0gdGhpcy5yZXNvbHZlZFByb3BlcnR5O1xuXG5cdFx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGRlc3QubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHRcdFx0ZGVzdFsgaSBdID0gYnVmZmVyWyBvZmZzZXQgKysgXTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheV9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR2YXIgZGVzdCA9IHRoaXMucmVzb2x2ZWRQcm9wZXJ0eTtcblxuXHRcdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBkZXN0Lmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHRcdGRlc3RbIGkgXSA9IGJ1ZmZlclsgb2Zmc2V0ICsrIF07XG5cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdLCBbXG5cblx0XHRcdC8vIEFycmF5RWxlbWVudFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnQoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9hcnJheUVsZW1lbnRfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eVsgdGhpcy5wcm9wZXJ0eUluZGV4IF0gPSBidWZmZXJbIG9mZnNldCBdO1xuXHRcdFx0XHR0aGlzLnRhcmdldE9iamVjdC5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH0sXG5cblx0XHRcdGZ1bmN0aW9uIHNldFZhbHVlX2FycmF5RWxlbWVudF9zZXRNYXRyaXhXb3JsZE5lZWRzVXBkYXRlKCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHlbIHRoaXMucHJvcGVydHlJbmRleCBdID0gYnVmZmVyWyBvZmZzZXQgXTtcblx0XHRcdFx0dGhpcy50YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSA9IHRydWU7XG5cblx0XHRcdH1cblxuXHRcdF0sIFtcblxuXHRcdFx0Ly8gSGFzVG9Gcm9tQXJyYXlcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApIHtcblxuXHRcdFx0XHR0aGlzLnJlc29sdmVkUHJvcGVydHkuZnJvbUFycmF5KCBidWZmZXIsIG9mZnNldCApO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRmdW5jdGlvbiBzZXRWYWx1ZV9mcm9tQXJyYXlfc2V0TmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRcdFx0fSxcblxuXHRcdFx0ZnVuY3Rpb24gc2V0VmFsdWVfZnJvbUFycmF5X3NldE1hdHJpeFdvcmxkTmVlZHNVcGRhdGUoIGJ1ZmZlciwgb2Zmc2V0ICkge1xuXG5cdFx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eS5mcm9tQXJyYXkoIGJ1ZmZlciwgb2Zmc2V0ICk7XG5cdFx0XHRcdHRoaXMudGFyZ2V0T2JqZWN0Lm1hdHJpeFdvcmxkTmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdFx0XHR9XG5cblx0XHRdXG5cblx0XSxcblxuXHRnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWVfdW5ib3VuZCggdGFyZ2V0QXJyYXksIG9mZnNldCApIHtcblxuXHRcdHRoaXMuYmluZCgpO1xuXHRcdHRoaXMuZ2V0VmFsdWUoIHRhcmdldEFycmF5LCBvZmZzZXQgKTtcblxuXHRcdC8vIE5vdGU6IFRoaXMgY2xhc3MgdXNlcyBhIFN0YXRlIHBhdHRlcm4gb24gYSBwZXItbWV0aG9kIGJhc2lzOlxuXHRcdC8vICdiaW5kJyBzZXRzICd0aGlzLmdldFZhbHVlJyAvICdzZXRWYWx1ZScgYW5kIHNoYWRvd3MgdGhlXG5cdFx0Ly8gcHJvdG90eXBlIHZlcnNpb24gb2YgdGhlc2UgbWV0aG9kcyB3aXRoIG9uZSB0aGF0IHJlcHJlc2VudHNcblx0XHQvLyB0aGUgYm91bmQgc3RhdGUuIFdoZW4gdGhlIHByb3BlcnR5IGlzIG5vdCBmb3VuZCwgdGhlIG1ldGhvZHNcblx0XHQvLyBiZWNvbWUgbm8tb3BzLlxuXG5cdH0sXG5cblx0c2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlX3VuYm91bmQoIHNvdXJjZUFycmF5LCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLmJpbmQoKTtcblx0XHR0aGlzLnNldFZhbHVlKCBzb3VyY2VBcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblxuXHQvLyBjcmVhdGUgZ2V0dGVyIC8gc2V0dGVyIHBhaXIgZm9yIGEgcHJvcGVydHkgaW4gdGhlIHNjZW5lIGdyYXBoXG5cdGJpbmQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0YXJnZXRPYmplY3QgPSB0aGlzLm5vZGUsXG5cdFx0XHRwYXJzZWRQYXRoID0gdGhpcy5wYXJzZWRQYXRoLFxuXG5cdFx0XHRvYmplY3ROYW1lID0gcGFyc2VkUGF0aC5vYmplY3ROYW1lLFxuXHRcdFx0cHJvcGVydHlOYW1lID0gcGFyc2VkUGF0aC5wcm9wZXJ0eU5hbWUsXG5cdFx0XHRwcm9wZXJ0eUluZGV4ID0gcGFyc2VkUGF0aC5wcm9wZXJ0eUluZGV4O1xuXG5cdFx0aWYgKCAhIHRhcmdldE9iamVjdCApIHtcblxuXHRcdFx0dGFyZ2V0T2JqZWN0ID0gUHJvcGVydHlCaW5kaW5nLmZpbmROb2RlKCB0aGlzLnJvb3ROb2RlLCBwYXJzZWRQYXRoLm5vZGVOYW1lICkgfHwgdGhpcy5yb290Tm9kZTtcblxuXHRcdFx0dGhpcy5ub2RlID0gdGFyZ2V0T2JqZWN0O1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2V0IGZhaWwgc3RhdGUgc28gd2UgY2FuIGp1c3QgJ3JldHVybicgb24gZXJyb3Jcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5hdmFpbGFibGU7XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuX3NldFZhbHVlX3VuYXZhaWxhYmxlO1xuXG5cdFx0Ly8gZW5zdXJlIHRoZXJlIGlzIGEgdmFsdWUgbm9kZVxuXHRcdGlmICggISB0YXJnZXRPYmplY3QgKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgbm9kZSBmb3IgdHJhY2s6ICcgKyB0aGlzLnBhdGggKyAnIGJ1dCBpdCB3YXNuXFwndCBmb3VuZC4nICk7XG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRpZiAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdHZhciBvYmplY3RJbmRleCA9IHBhcnNlZFBhdGgub2JqZWN0SW5kZXg7XG5cblx0XHRcdC8vIHNwZWNpYWwgY2FzZXMgd2VyZSB3ZSBuZWVkIHRvIHJlYWNoIGRlZXBlciBpbnRvIHRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSBmYWNlIG1hdGVyaWFscy4uLi5cblx0XHRcdHN3aXRjaCAoIG9iamVjdE5hbWUgKSB7XG5cblx0XHRcdFx0Y2FzZSAnbWF0ZXJpYWxzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3QubWF0ZXJpYWwgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtYXRlcmlhbCBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbC4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoICEgdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscyApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG1hdGVyaWFsLm1hdGVyaWFscyBhcyBub2RlLm1hdGVyaWFsIGRvZXMgbm90IGhhdmUgYSBtYXRlcmlhbHMgYXJyYXkuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0Lm1hdGVyaWFsLm1hdGVyaWFscztcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgJ2JvbmVzJzpcblxuXHRcdFx0XHRcdGlmICggISB0YXJnZXRPYmplY3Quc2tlbGV0b24gKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBib25lcyBhcyBub2RlIGRvZXMgbm90IGhhdmUgYSBza2VsZXRvbi4nLCB0aGlzICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBwb3RlbnRpYWwgZnV0dXJlIG9wdGltaXphdGlvbjogc2tpcCB0aGlzIGlmIHByb3BlcnR5SW5kZXggaXMgYWxyZWFkeSBhbiBpbnRlZ2VyXG5cdFx0XHRcdFx0Ly8gYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0LnNrZWxldG9uLmJvbmVzO1xuXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydCByZXNvbHZpbmcgbW9ycGhUYXJnZXQgbmFtZXMgaW50byBpbmRpY2VzLlxuXHRcdFx0XHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRhcmdldE9iamVjdC5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBpIF0ubmFtZSA9PT0gb2JqZWN0SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0b2JqZWN0SW5kZXggPSBpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlByb3BlcnR5QmluZGluZzogQ2FuIG5vdCBiaW5kIHRvIG9iamVjdE5hbWUgb2Ygbm9kZSB1bmRlZmluZWQuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGFyZ2V0T2JqZWN0ID0gdGFyZ2V0T2JqZWN0WyBvYmplY3ROYW1lIF07XG5cblx0XHRcdH1cblxuXG5cdFx0XHRpZiAoIG9iamVjdEluZGV4ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF0gPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byBiaW5kIHRvIG9iamVjdEluZGV4IG9mIG9iamVjdE5hbWUsIGJ1dCBpcyB1bmRlZmluZWQuJywgdGhpcywgdGFyZ2V0T2JqZWN0ICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0YXJnZXRPYmplY3QgPSB0YXJnZXRPYmplY3RbIG9iamVjdEluZGV4IF07XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdC8vIHJlc29sdmUgcHJvcGVydHlcblx0XHR2YXIgbm9kZVByb3BlcnR5ID0gdGFyZ2V0T2JqZWN0WyBwcm9wZXJ0eU5hbWUgXTtcblxuXHRcdGlmICggbm9kZVByb3BlcnR5ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBub2RlTmFtZSA9IHBhcnNlZFBhdGgubm9kZU5hbWU7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IFRyeWluZyB0byB1cGRhdGUgcHJvcGVydHkgZm9yIHRyYWNrOiAnICsgbm9kZU5hbWUgK1xuXHRcdFx0XHQnLicgKyBwcm9wZXJ0eU5hbWUgKyAnIGJ1dCBpdCB3YXNuXFwndCBmb3VuZC4nLCB0YXJnZXRPYmplY3QgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdC8vIGRldGVybWluZSB2ZXJzaW9uaW5nIHNjaGVtZVxuXHRcdHZhciB2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk5vbmU7XG5cblx0XHR0aGlzLnRhcmdldE9iamVjdCA9IHRhcmdldE9iamVjdDtcblxuXHRcdGlmICggdGFyZ2V0T2JqZWN0Lm5lZWRzVXBkYXRlICE9PSB1bmRlZmluZWQgKSB7IC8vIG1hdGVyaWFsXG5cblx0XHRcdHZlcnNpb25pbmcgPSB0aGlzLlZlcnNpb25pbmcuTmVlZHNVcGRhdGU7XG5cblx0XHR9IGVsc2UgaWYgKCB0YXJnZXRPYmplY3QubWF0cml4V29ybGROZWVkc1VwZGF0ZSAhPT0gdW5kZWZpbmVkICkgeyAvLyBub2RlIHRyYW5zZm9ybVxuXG5cdFx0XHR2ZXJzaW9uaW5nID0gdGhpcy5WZXJzaW9uaW5nLk1hdHJpeFdvcmxkTmVlZHNVcGRhdGU7XG5cblx0XHR9XG5cblx0XHQvLyBkZXRlcm1pbmUgaG93IHRoZSBwcm9wZXJ0eSBnZXRzIGJvdW5kXG5cdFx0dmFyIGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5EaXJlY3Q7XG5cblx0XHRpZiAoIHByb3BlcnR5SW5kZXggIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gYWNjZXNzIGEgc3ViIGVsZW1lbnQgb2YgdGhlIHByb3BlcnR5IGFycmF5IChvbmx5IHByaW1pdGl2ZXMgYXJlIHN1cHBvcnRlZCByaWdodCBub3cpXG5cblx0XHRcdGlmICggcHJvcGVydHlOYW1lID09PSBcIm1vcnBoVGFyZ2V0SW5mbHVlbmNlc1wiICkge1xuXG5cdFx0XHRcdC8vIHBvdGVudGlhbCBvcHRpbWl6YXRpb24sIHNraXAgdGhpcyBpZiBwcm9wZXJ0eUluZGV4IGlzIGFscmVhZHkgYW4gaW50ZWdlciwgYW5kIGNvbnZlcnQgdGhlIGludGVnZXIgc3RyaW5nIHRvIGEgdHJ1ZSBpbnRlZ2VyLlxuXG5cdFx0XHRcdC8vIHN1cHBvcnQgcmVzb2x2aW5nIG1vcnBoVGFyZ2V0IG5hbWVzIGludG8gaW5kaWNlcy5cblx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeSApIHtcblxuXHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS4nLCB0aGlzICk7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHRhcmdldE9iamVjdC5nZW9tZXRyeS5pc0J1ZmZlckdlb21ldHJ5ICkge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaEF0dHJpYnV0ZXMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvbi5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoQXR0cmlidXRlcy5wb3NpdGlvblsgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0aWYgKCAhIHRhcmdldE9iamVjdC5nZW9tZXRyeS5tb3JwaFRhcmdldHMgKSB7XG5cblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Qcm9wZXJ0eUJpbmRpbmc6IENhbiBub3QgYmluZCB0byBtb3JwaFRhcmdldEluZmx1ZW5jZXMgYmVjYXVzZSBub2RlIGRvZXMgbm90IGhhdmUgYSBnZW9tZXRyeS5tb3JwaFRhcmdldHMuJywgdGhpcyApO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgdGhpcy5ub2RlLmdlb21ldHJ5Lm1vcnBoVGFyZ2V0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggdGFyZ2V0T2JqZWN0Lmdlb21ldHJ5Lm1vcnBoVGFyZ2V0c1sgaSBdLm5hbWUgPT09IHByb3BlcnR5SW5kZXggKSB7XG5cblx0XHRcdFx0XHRcdFx0cHJvcGVydHlJbmRleCA9IGk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHRcdGJpbmRpbmdUeXBlID0gdGhpcy5CaW5kaW5nVHlwZS5BcnJheUVsZW1lbnQ7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblx0XHRcdHRoaXMucHJvcGVydHlJbmRleCA9IHByb3BlcnR5SW5kZXg7XG5cblx0XHR9IGVsc2UgaWYgKCBub2RlUHJvcGVydHkuZnJvbUFycmF5ICE9PSB1bmRlZmluZWQgJiYgbm9kZVByb3BlcnR5LnRvQXJyYXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbXVzdCB1c2UgY29weSBmb3IgT2JqZWN0M0QuRXVsZXIvUXVhdGVybmlvblxuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuSGFzRnJvbVRvQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIG5vZGVQcm9wZXJ0eSApICkge1xuXG5cdFx0XHRiaW5kaW5nVHlwZSA9IHRoaXMuQmluZGluZ1R5cGUuRW50aXJlQXJyYXk7XG5cblx0XHRcdHRoaXMucmVzb2x2ZWRQcm9wZXJ0eSA9IG5vZGVQcm9wZXJ0eTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdHRoaXMucHJvcGVydHlOYW1lID0gcHJvcGVydHlOYW1lO1xuXG5cdFx0fVxuXG5cdFx0Ly8gc2VsZWN0IGdldHRlciAvIHNldHRlclxuXHRcdHRoaXMuZ2V0VmFsdWUgPSB0aGlzLkdldHRlckJ5QmluZGluZ1R5cGVbIGJpbmRpbmdUeXBlIF07XG5cdFx0dGhpcy5zZXRWYWx1ZSA9IHRoaXMuU2V0dGVyQnlCaW5kaW5nVHlwZUFuZFZlcnNpb25pbmdbIGJpbmRpbmdUeXBlIF1bIHZlcnNpb25pbmcgXTtcblxuXHR9LFxuXG5cdHVuYmluZDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5ub2RlID0gbnVsbDtcblxuXHRcdC8vIGJhY2sgdG8gdGhlIHByb3RvdHlwZSB2ZXJzaW9uIG9mIGdldFZhbHVlIC8gc2V0VmFsdWVcblx0XHQvLyBub3RlOiBhdm9pZGluZyB0byBtdXRhdGUgdGhlIHNoYXBlIG9mICd0aGlzJyB2aWEgJ2RlbGV0ZSdcblx0XHR0aGlzLmdldFZhbHVlID0gdGhpcy5fZ2V0VmFsdWVfdW5ib3VuZDtcblx0XHR0aGlzLnNldFZhbHVlID0gdGhpcy5fc2V0VmFsdWVfdW5ib3VuZDtcblxuXHR9XG5cbn0gKTtcblxuLy8gREVDTEFSRSBBTElBUyBBRlRFUiBhc3NpZ24gcHJvdG90eXBlXG5PYmplY3QuYXNzaWduKCBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLCB7XG5cblx0Ly8gaW5pdGlhbCBzdGF0ZSBvZiB0aGVzZSBtZXRob2RzIHRoYXQgY2FsbHMgJ2JpbmQnXG5cdF9nZXRWYWx1ZV91bmJvdW5kOiBQcm9wZXJ0eUJpbmRpbmcucHJvdG90eXBlLmdldFZhbHVlLFxuXHRfc2V0VmFsdWVfdW5ib3VuZDogUHJvcGVydHlCaW5kaW5nLnByb3RvdHlwZS5zZXRWYWx1ZSxcblxufSApO1xuXG4vKipcbiAqXG4gKiBBIGdyb3VwIG9mIG9iamVjdHMgdGhhdCByZWNlaXZlcyBhIHNoYXJlZCBhbmltYXRpb24gc3RhdGUuXG4gKlxuICogVXNhZ2U6XG4gKlxuICogIC0gQWRkIG9iamVjdHMgeW91IHdvdWxkIG90aGVyd2lzZSBwYXNzIGFzICdyb290JyB0byB0aGVcbiAqICAgIGNvbnN0cnVjdG9yIG9yIHRoZSAuY2xpcEFjdGlvbiBtZXRob2Qgb2YgQW5pbWF0aW9uTWl4ZXIuXG4gKlxuICogIC0gSW5zdGVhZCBwYXNzIHRoaXMgb2JqZWN0IGFzICdyb290Jy5cbiAqXG4gKiAgLSBZb3UgY2FuIGFsc28gYWRkIGFuZCByZW1vdmUgb2JqZWN0cyBsYXRlciB3aGVuIHRoZSBtaXhlclxuICogICAgaXMgcnVubmluZy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgIE9iamVjdHMgb2YgdGhpcyBjbGFzcyBhcHBlYXIgYXMgb25lIG9iamVjdCB0byB0aGUgbWl4ZXIsXG4gKiAgICBzbyBjYWNoZSBjb250cm9sIG9mIHRoZSBpbmRpdmlkdWFsIG9iamVjdHMgbXVzdCBiZSBkb25lXG4gKiAgICBvbiB0aGUgZ3JvdXAuXG4gKlxuICogTGltaXRhdGlvbjpcbiAqXG4gKiAgLSBUaGUgYW5pbWF0ZWQgcHJvcGVydGllcyBtdXN0IGJlIGNvbXBhdGlibGUgYW1vbmcgdGhlXG4gKiAgICBhbGwgb2JqZWN0cyBpbiB0aGUgZ3JvdXAuXG4gKlxuICogIC0gQSBzaW5nbGUgcHJvcGVydHkgY2FuIGVpdGhlciBiZSBjb250cm9sbGVkIHRocm91Z2ggYVxuICogICAgdGFyZ2V0IGdyb3VwIG9yIGRpcmVjdGx5LCBidXQgbm90IGJvdGguXG4gKlxuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk9iamVjdEdyb3VwKCkge1xuXG5cdHRoaXMudXVpZCA9IE1hdGhVdGlscy5nZW5lcmF0ZVVVSUQoKTtcblxuXHQvLyBjYWNoZWQgb2JqZWN0cyBmb2xsb3dlZCBieSB0aGUgYWN0aXZlIG9uZXNcblx0dGhpcy5fb2JqZWN0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblxuXHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IDA7IC8vIHRocmVzaG9sZFxuXHQvLyBub3RlOiByZWFkIGJ5IFByb3BlcnR5QmluZGluZy5Db21wb3NpdGVcblxuXHR2YXIgaW5kaWNlcyA9IHt9O1xuXHR0aGlzLl9pbmRpY2VzQnlVVUlEID0gaW5kaWNlczsgLy8gZm9yIGJvb2trZWVwaW5nXG5cblx0Zm9yICggdmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdGluZGljZXNbIGFyZ3VtZW50c1sgaSBdLnV1aWQgXSA9IGk7XG5cblx0fVxuXG5cdHRoaXMuX3BhdGhzID0gW107IC8vIGluc2lkZTogc3RyaW5nXG5cdHRoaXMuX3BhcnNlZFBhdGhzID0gW107IC8vIGluc2lkZTogeyB3ZSBkb24ndCBjYXJlLCBoZXJlIH1cblx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gaW5zaWRlOiBBcnJheTwgUHJvcGVydHlCaW5kaW5nID5cblx0dGhpcy5fYmluZGluZ3NJbmRpY2VzQnlQYXRoID0ge307IC8vIGluc2lkZTogaW5kaWNlcyBpbiB0aGVzZSBhcnJheXNcblxuXHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdHRoaXMuc3RhdHMgPSB7XG5cblx0XHRvYmplY3RzOiB7XG5cdFx0XHRnZXQgdG90YWwoKSB7XG5cblx0XHRcdFx0cmV0dXJuIHNjb3BlLl9vYmplY3RzLmxlbmd0aDtcblxuXHRcdFx0fSxcblx0XHRcdGdldCBpblVzZSgpIHtcblxuXHRcdFx0XHRyZXR1cm4gdGhpcy50b3RhbCAtIHNjb3BlLm5DYWNoZWRPYmplY3RzXztcblxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0IGJpbmRpbmdzUGVyT2JqZWN0KCkge1xuXG5cdFx0XHRyZXR1cm4gc2NvcGUuX2JpbmRpbmdzLmxlbmd0aDtcblxuXHRcdH1cblxuXHR9O1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbk9iamVjdEdyb3VwLnByb3RvdHlwZSwge1xuXG5cdGlzQW5pbWF0aW9uT2JqZWN0R3JvdXA6IHRydWUsXG5cblx0YWRkOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0cGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdHBhcnNlZFBhdGhzID0gdGhpcy5fcGFyc2VkUGF0aHMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gYmluZGluZ3MubGVuZ3RoLFxuXHRcdFx0a25vd25PYmplY3QgPSB1bmRlZmluZWQ7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyB1bmtub3duIG9iamVjdCAtPiBhZGQgaXQgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHRpbmRleCA9IG5PYmplY3RzICsrO1xuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0cy5wdXNoKCBvYmplY3QgKTtcblxuXHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gbkJpbmRpbmdzOyBqICE9PSBtOyArKyBqICkge1xuXG5cdFx0XHRcdFx0YmluZGluZ3NbIGogXS5wdXNoKCBuZXcgUHJvcGVydHlCaW5kaW5nKCBvYmplY3QsIHBhdGhzWyBqIF0sIHBhcnNlZFBhdGhzWyBqIF0gKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggaW5kZXggPCBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHRrbm93bk9iamVjdCA9IG9iamVjdHNbIGluZGV4IF07XG5cblx0XHRcdFx0Ly8gbW92ZSBleGlzdGluZyBvYmplY3QgdG8gdGhlIEFDVElWRSByZWdpb25cblxuXHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdGxhc3RDYWNoZWRPYmplY3QgPSBvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgbGFzdENhY2hlZE9iamVjdC51dWlkIF0gPSBpbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgaW5kZXggXSA9IGxhc3RDYWNoZWRPYmplY3Q7XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgdXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0b2JqZWN0c1sgZmlyc3RBY3RpdmVJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGxhc3RDYWNoZWQgPSBiaW5kaW5nc0ZvclBhdGhbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHNpbmNlIHdlIGRvIG5vdCBib3RoZXIgdG8gY3JlYXRlIG5ldyBiaW5kaW5nc1xuXHRcdFx0XHRcdFx0Ly8gZm9yIG9iamVjdHMgdGhhdCBhcmUgY2FjaGVkLCB0aGUgYmluZGluZyBtYXlcblx0XHRcdFx0XHRcdC8vIG9yIG1heSBub3QgZXhpc3RcblxuXHRcdFx0XHRcdFx0YmluZGluZyA9IG5ldyBQcm9wZXJ0eUJpbmRpbmcoIG9iamVjdCwgcGF0aHNbIGogXSwgcGFyc2VkUGF0aHNbIGogXSApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fSBlbHNlIGlmICggb2JqZWN0c1sgaW5kZXggXSAhPT0ga25vd25PYmplY3QgKSB7XG5cblx0XHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkFuaW1hdGlvbk9iamVjdEdyb3VwOiBEaWZmZXJlbnQgb2JqZWN0cyB3aXRoIHRoZSBzYW1lIFVVSUQgJyArXG5cdFx0XHRcdFx0J2RldGVjdGVkLiBDbGVhbiB0aGUgY2FjaGVzIG9yIHJlY3JlYXRlIHlvdXIgaW5mcmFzdHJ1Y3R1cmUgd2hlbiByZWxvYWRpbmcgc2NlbmVzLicgKTtcblxuXHRcdFx0fSAvLyBlbHNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSB3aGVyZSB3ZSB3YW50IGl0IHRvIGJlXG5cblx0XHR9IC8vIGZvciBhcmd1bWVudHNcblxuXHRcdHRoaXMubkNhY2hlZE9iamVjdHNfID0gbkNhY2hlZE9iamVjdHM7XG5cblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBvYmplY3RzID0gdGhpcy5fb2JqZWN0cyxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRpbmRpY2VzQnlVVUlEID0gdGhpcy5faW5kaWNlc0J5VVVJRCxcblx0XHRcdGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSBiaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpICE9PSBuOyArKyBpICkge1xuXG5cdFx0XHR2YXIgb2JqZWN0ID0gYXJndW1lbnRzWyBpIF0sXG5cdFx0XHRcdHV1aWQgPSBvYmplY3QudXVpZCxcblx0XHRcdFx0aW5kZXggPSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCA+PSBuQ2FjaGVkT2JqZWN0cyApIHtcblxuXHRcdFx0XHQvLyBtb3ZlIGV4aXN0aW5nIG9iamVjdCBpbnRvIHRoZSBDQUNIRUQgcmVnaW9uXG5cblx0XHRcdFx0dmFyIGxhc3RDYWNoZWRJbmRleCA9IG5DYWNoZWRPYmplY3RzICsrLFxuXHRcdFx0XHRcdGZpcnN0QWN0aXZlT2JqZWN0ID0gb2JqZWN0c1sgbGFzdENhY2hlZEluZGV4IF07XG5cblx0XHRcdFx0aW5kaWNlc0J5VVVJRFsgZmlyc3RBY3RpdmVPYmplY3QudXVpZCBdID0gaW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZU9iamVjdDtcblxuXHRcdFx0XHRpbmRpY2VzQnlVVUlEWyB1dWlkIF0gPSBsYXN0Q2FjaGVkSW5kZXg7XG5cdFx0XHRcdG9iamVjdHNbIGxhc3RDYWNoZWRJbmRleCBdID0gb2JqZWN0O1xuXG5cdFx0XHRcdC8vIGFjY291bnRpbmcgaXMgZG9uZSwgbm93IGRvIHRoZSBzYW1lIGZvciBhbGwgYmluZGluZ3NcblxuXHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHR2YXIgYmluZGluZ3NGb3JQYXRoID0gYmluZGluZ3NbIGogXSxcblx0XHRcdFx0XHRcdGZpcnN0QWN0aXZlID0gYmluZGluZ3NGb3JQYXRoWyBsYXN0Q2FjaGVkSW5kZXggXSxcblx0XHRcdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF07XG5cblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBmaXJzdEFjdGl2ZTtcblx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGxhc3RDYWNoZWRJbmRleCBdID0gYmluZGluZztcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH0gLy8gZm9yIGFyZ3VtZW50c1xuXG5cdFx0dGhpcy5uQ2FjaGVkT2JqZWN0c18gPSBuQ2FjaGVkT2JqZWN0cztcblxuXHR9LFxuXG5cdC8vIHJlbW92ZSAmIGZvcmdldFxuXHR1bmNhY2hlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgb2JqZWN0cyA9IHRoaXMuX29iamVjdHMsXG5cdFx0XHRuT2JqZWN0cyA9IG9iamVjdHMubGVuZ3RoLFxuXHRcdFx0bkNhY2hlZE9iamVjdHMgPSB0aGlzLm5DYWNoZWRPYmplY3RzXyxcblx0XHRcdGluZGljZXNCeVVVSUQgPSB0aGlzLl9pbmRpY2VzQnlVVUlELFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdG5CaW5kaW5ncyA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBvYmplY3QgPSBhcmd1bWVudHNbIGkgXSxcblx0XHRcdFx0dXVpZCA9IG9iamVjdC51dWlkLFxuXHRcdFx0XHRpbmRleCA9IGluZGljZXNCeVVVSURbIHV1aWQgXTtcblxuXHRcdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGRlbGV0ZSBpbmRpY2VzQnlVVUlEWyB1dWlkIF07XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IG5DYWNoZWRPYmplY3RzICkge1xuXG5cdFx0XHRcdFx0Ly8gb2JqZWN0IGlzIGNhY2hlZCwgc2hyaW5rIHRoZSBDQUNIRUQgcmVnaW9uXG5cblx0XHRcdFx0XHR2YXIgZmlyc3RBY3RpdmVJbmRleCA9IC0tIG5DYWNoZWRPYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdENhY2hlZE9iamVjdCA9IG9iamVjdHNbIGZpcnN0QWN0aXZlSW5kZXggXSxcblx0XHRcdFx0XHRcdGxhc3RJbmRleCA9IC0tIG5PYmplY3RzLFxuXHRcdFx0XHRcdFx0bGFzdE9iamVjdCA9IG9iamVjdHNbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBjYWNoZWQgb2JqZWN0IHRha2VzIHRoaXMgb2JqZWN0J3MgcGxhY2Vcblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0Q2FjaGVkT2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0Q2FjaGVkT2JqZWN0O1xuXG5cdFx0XHRcdFx0Ly8gbGFzdCBvYmplY3QgZ29lcyB0byB0aGUgYWN0aXZhdGVkIHNsb3QgYW5kIHBvcFxuXHRcdFx0XHRcdGluZGljZXNCeVVVSURbIGxhc3RPYmplY3QudXVpZCBdID0gZmlyc3RBY3RpdmVJbmRleDtcblx0XHRcdFx0XHRvYmplY3RzWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdLFxuXHRcdFx0XHRcdFx0XHRsYXN0Q2FjaGVkID0gYmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0sXG5cdFx0XHRcdFx0XHRcdGxhc3QgPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBsYXN0Q2FjaGVkO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoWyBmaXJzdEFjdGl2ZUluZGV4IF0gPSBsYXN0O1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBvYmplY3QgaXMgYWN0aXZlLCBqdXN0IHN3YXAgd2l0aCB0aGUgbGFzdCBhbmQgcG9wXG5cblx0XHRcdFx0XHR2YXIgbGFzdEluZGV4ID0gLS0gbk9iamVjdHMsXG5cdFx0XHRcdFx0XHRsYXN0T2JqZWN0ID0gb2JqZWN0c1sgbGFzdEluZGV4IF07XG5cblx0XHRcdFx0XHRpbmRpY2VzQnlVVUlEWyBsYXN0T2JqZWN0LnV1aWQgXSA9IGluZGV4O1xuXHRcdFx0XHRcdG9iamVjdHNbIGluZGV4IF0gPSBsYXN0T2JqZWN0O1xuXHRcdFx0XHRcdG9iamVjdHMucG9wKCk7XG5cblx0XHRcdFx0XHQvLyBhY2NvdW50aW5nIGlzIGRvbmUsIG5vdyBkbyB0aGUgc2FtZSBmb3IgYWxsIGJpbmRpbmdzXG5cblx0XHRcdFx0XHRmb3IgKCB2YXIgaiA9IDAsIG0gPSBuQmluZGluZ3M7IGogIT09IG07ICsrIGogKSB7XG5cblx0XHRcdFx0XHRcdHZhciBiaW5kaW5nc0ZvclBhdGggPSBiaW5kaW5nc1sgaiBdO1xuXG5cdFx0XHRcdFx0XHRiaW5kaW5nc0ZvclBhdGhbIGluZGV4IF0gPSBiaW5kaW5nc0ZvclBhdGhbIGxhc3RJbmRleCBdO1xuXHRcdFx0XHRcdFx0YmluZGluZ3NGb3JQYXRoLnBvcCgpO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdH0gLy8gY2FjaGVkIG9yIGFjdGl2ZVxuXG5cdFx0XHR9IC8vIGlmIG9iamVjdCBpcyBrbm93blxuXG5cdFx0fSAvLyBmb3IgYXJndW1lbnRzXG5cblx0XHR0aGlzLm5DYWNoZWRPYmplY3RzXyA9IG5DYWNoZWRPYmplY3RzO1xuXG5cdH0sXG5cblx0Ly8gSW50ZXJuYWwgaW50ZXJmYWNlIHVzZWQgYnkgYmVmcmllbmRlZCBQcm9wZXJ0eUJpbmRpbmcuQ29tcG9zaXRlOlxuXG5cdHN1YnNjcmliZV86IGZ1bmN0aW9uICggcGF0aCwgcGFyc2VkUGF0aCApIHtcblxuXHRcdC8vIHJldHVybnMgYW4gYXJyYXkgb2YgYmluZGluZ3MgZm9yIHRoZSBnaXZlbiBwYXRoIHRoYXQgaXMgY2hhbmdlZFxuXHRcdC8vIGFjY29yZGluZyB0byB0aGUgY29udGFpbmVkIG9iamVjdHMgaW4gdGhlIGdyb3VwXG5cblx0XHR2YXIgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdLFxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggaW5kZXggIT09IHVuZGVmaW5lZCApIHJldHVybiBiaW5kaW5nc1sgaW5kZXggXTtcblxuXHRcdHZhciBwYXRocyA9IHRoaXMuX3BhdGhzLFxuXHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdG9iamVjdHMgPSB0aGlzLl9vYmplY3RzLFxuXHRcdFx0bk9iamVjdHMgPSBvYmplY3RzLmxlbmd0aCxcblx0XHRcdG5DYWNoZWRPYmplY3RzID0gdGhpcy5uQ2FjaGVkT2JqZWN0c18sXG5cdFx0XHRiaW5kaW5nc0ZvclBhdGggPSBuZXcgQXJyYXkoIG5PYmplY3RzICk7XG5cblx0XHRpbmRleCA9IGJpbmRpbmdzLmxlbmd0aDtcblxuXHRcdGluZGljZXNCeVBhdGhbIHBhdGggXSA9IGluZGV4O1xuXG5cdFx0cGF0aHMucHVzaCggcGF0aCApO1xuXHRcdHBhcnNlZFBhdGhzLnB1c2goIHBhcnNlZFBhdGggKTtcblx0XHRiaW5kaW5ncy5wdXNoKCBiaW5kaW5nc0ZvclBhdGggKTtcblxuXHRcdGZvciAoIHZhciBpID0gbkNhY2hlZE9iamVjdHMsIG4gPSBvYmplY3RzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0dmFyIG9iamVjdCA9IG9iamVjdHNbIGkgXTtcblx0XHRcdGJpbmRpbmdzRm9yUGF0aFsgaSBdID0gbmV3IFByb3BlcnR5QmluZGluZyggb2JqZWN0LCBwYXRoLCBwYXJzZWRQYXRoICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gYmluZGluZ3NGb3JQYXRoO1xuXG5cdH0sXG5cblx0dW5zdWJzY3JpYmVfOiBmdW5jdGlvbiAoIHBhdGggKSB7XG5cblx0XHQvLyB0ZWxscyB0aGUgZ3JvdXAgdG8gZm9yZ2V0IGFib3V0IGEgcHJvcGVydHkgcGF0aCBhbmQgbm8gbG9uZ2VyXG5cdFx0Ly8gdXBkYXRlIHRoZSBhcnJheSBwcmV2aW91c2x5IG9idGFpbmVkIHdpdGggJ3N1YnNjcmliZV8nXG5cblx0XHR2YXIgaW5kaWNlc0J5UGF0aCA9IHRoaXMuX2JpbmRpbmdzSW5kaWNlc0J5UGF0aCxcblx0XHRcdGluZGV4ID0gaW5kaWNlc0J5UGF0aFsgcGF0aCBdO1xuXG5cdFx0aWYgKCBpbmRleCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHR2YXIgcGF0aHMgPSB0aGlzLl9wYXRocyxcblx0XHRcdFx0cGFyc2VkUGF0aHMgPSB0aGlzLl9wYXJzZWRQYXRocyxcblx0XHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdFx0bGFzdEJpbmRpbmdzSW5kZXggPSBiaW5kaW5ncy5sZW5ndGggLSAxLFxuXHRcdFx0XHRsYXN0QmluZGluZ3MgPSBiaW5kaW5nc1sgbGFzdEJpbmRpbmdzSW5kZXggXSxcblx0XHRcdFx0bGFzdEJpbmRpbmdzUGF0aCA9IHBhdGhbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cblx0XHRcdGluZGljZXNCeVBhdGhbIGxhc3RCaW5kaW5nc1BhdGggXSA9IGluZGV4O1xuXG5cdFx0XHRiaW5kaW5nc1sgaW5kZXggXSA9IGxhc3RCaW5kaW5ncztcblx0XHRcdGJpbmRpbmdzLnBvcCgpO1xuXG5cdFx0XHRwYXJzZWRQYXRoc1sgaW5kZXggXSA9IHBhcnNlZFBhdGhzWyBsYXN0QmluZGluZ3NJbmRleCBdO1xuXHRcdFx0cGFyc2VkUGF0aHMucG9wKCk7XG5cblx0XHRcdHBhdGhzWyBpbmRleCBdID0gcGF0aHNbIGxhc3RCaW5kaW5nc0luZGV4IF07XG5cdFx0XHRwYXRocy5wb3AoKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogQWN0aW9uIHByb3ZpZGVkIGJ5IEFuaW1hdGlvbk1peGVyIGZvciBzY2hlZHVsaW5nIGNsaXAgcGxheWJhY2sgb24gc3BlY2lmaWNcbiAqIG9iamVjdHMuXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICpcbiAqL1xuXG5mdW5jdGlvbiBBbmltYXRpb25BY3Rpb24oIG1peGVyLCBjbGlwLCBsb2NhbFJvb3QgKSB7XG5cblx0dGhpcy5fbWl4ZXIgPSBtaXhlcjtcblx0dGhpcy5fY2xpcCA9IGNsaXA7XG5cdHRoaXMuX2xvY2FsUm9vdCA9IGxvY2FsUm9vdCB8fCBudWxsO1xuXG5cdHZhciB0cmFja3MgPSBjbGlwLnRyYWNrcyxcblx0XHRuVHJhY2tzID0gdHJhY2tzLmxlbmd0aCxcblx0XHRpbnRlcnBvbGFudHMgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR2YXIgaW50ZXJwb2xhbnRTZXR0aW5ncyA9IHtcblx0XHRlbmRpbmdTdGFydDogWmVyb0N1cnZhdHVyZUVuZGluZyxcblx0XHRlbmRpbmdFbmQ6IFplcm9DdXJ2YXR1cmVFbmRpbmdcblx0fTtcblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5UcmFja3M7ICsrIGkgKSB7XG5cblx0XHR2YXIgaW50ZXJwb2xhbnQgPSB0cmFja3NbIGkgXS5jcmVhdGVJbnRlcnBvbGFudCggbnVsbCApO1xuXHRcdGludGVycG9sYW50c1sgaSBdID0gaW50ZXJwb2xhbnQ7XG5cdFx0aW50ZXJwb2xhbnQuc2V0dGluZ3MgPSBpbnRlcnBvbGFudFNldHRpbmdzO1xuXG5cdH1cblxuXHR0aGlzLl9pbnRlcnBvbGFudFNldHRpbmdzID0gaW50ZXJwb2xhbnRTZXR0aW5ncztcblxuXHR0aGlzLl9pbnRlcnBvbGFudHMgPSBpbnRlcnBvbGFudHM7IC8vIGJvdW5kIGJ5IHRoZSBtaXhlclxuXG5cdC8vIGluc2lkZTogUHJvcGVydHlNaXhlciAobWFuYWdlZCBieSB0aGUgbWl4ZXIpXG5cdHRoaXMuX3Byb3BlcnR5QmluZGluZ3MgPSBuZXcgQXJyYXkoIG5UcmFja3MgKTtcblxuXHR0aGlzLl9jYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXHR0aGlzLl9ieUNsaXBDYWNoZUluZGV4ID0gbnVsbDsgLy8gZm9yIHRoZSBtZW1vcnkgbWFuYWdlclxuXG5cdHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50ID0gbnVsbDtcblx0dGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQgPSBudWxsO1xuXG5cdHRoaXMubG9vcCA9IExvb3BSZXBlYXQ7XG5cdHRoaXMuX2xvb3BDb3VudCA9IC0gMTtcblxuXHQvLyBnbG9iYWwgbWl4ZXIgdGltZSB3aGVuIHRoZSBhY3Rpb24gaXMgdG8gYmUgc3RhcnRlZFxuXHQvLyBpdCdzIHNldCBiYWNrIHRvICdudWxsJyB1cG9uIHN0YXJ0IG9mIHRoZSBhY3Rpb25cblx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDtcblxuXHQvLyBzY2FsZWQgbG9jYWwgdGltZSBvZiB0aGUgYWN0aW9uXG5cdC8vIGdldHMgY2xhbXBlZCBvciB3cmFwcGVkIHRvIDAuLmNsaXAuZHVyYXRpb24gYWNjb3JkaW5nIHRvIGxvb3Bcblx0dGhpcy50aW1lID0gMDtcblxuXHR0aGlzLnRpbWVTY2FsZSA9IDE7XG5cdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IDE7XG5cblx0dGhpcy53ZWlnaHQgPSAxO1xuXHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSAxO1xuXG5cdHRoaXMucmVwZXRpdGlvbnMgPSBJbmZpbml0eTsgLy8gbm8uIG9mIHJlcGV0aXRpb25zIHdoZW4gbG9vcGluZ1xuXG5cdHRoaXMucGF1c2VkID0gZmFsc2U7IC8vIHRydWUgLT4gemVybyBlZmZlY3RpdmUgdGltZSBzY2FsZVxuXHR0aGlzLmVuYWJsZWQgPSB0cnVlOyAvLyBmYWxzZSAtPiB6ZXJvIGVmZmVjdGl2ZSB3ZWlnaHRcblxuXHR0aGlzLmNsYW1wV2hlbkZpbmlzaGVkID0gZmFsc2U7Ly8ga2VlcCBmZWVkaW5nIHRoZSBsYXN0IGZyYW1lP1xuXG5cdHRoaXMuemVyb1Nsb3BlQXRTdGFydCA9IHRydWU7Ly8gZm9yIHNtb290aCBpbnRlcnBvbGF0aW9uIHcvbyBzZXBhcmF0ZVxuXHR0aGlzLnplcm9TbG9wZUF0RW5kID0gdHJ1ZTsvLyBjbGlwcyBmb3Igc3RhcnQsIGxvb3AgYW5kIGVuZFxuXG59XG5cbk9iamVjdC5hc3NpZ24oIEFuaW1hdGlvbkFjdGlvbi5wcm90b3R5cGUsIHtcblxuXHQvLyBTdGF0ZSAmIFNjaGVkdWxpbmdcblxuXHRwbGF5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLl9taXhlci5fYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fbWl4ZXIuX2RlYWN0aXZhdGVBY3Rpb24oIHRoaXMgKTtcblxuXHRcdHJldHVybiB0aGlzLnJlc2V0KCk7XG5cblx0fSxcblxuXHRyZXNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5wYXVzZWQgPSBmYWxzZTtcblx0XHR0aGlzLmVuYWJsZWQgPSB0cnVlO1xuXG5cdFx0dGhpcy50aW1lID0gMDsgLy8gcmVzdGFydCBjbGlwXG5cdFx0dGhpcy5fbG9vcENvdW50ID0gLSAxOy8vIGZvcmdldCBwcmV2aW91cyBsb29wc1xuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IG51bGw7Ly8gZm9yZ2V0IHNjaGVkdWxpbmdcblxuXHRcdHJldHVybiB0aGlzLnN0b3BGYWRpbmcoKS5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aXNSdW5uaW5nOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5lbmFibGVkICYmICEgdGhpcy5wYXVzZWQgJiYgdGhpcy50aW1lU2NhbGUgIT09IDAgJiZcblx0XHRcdHRoaXMuX3N0YXJ0VGltZSA9PT0gbnVsbCAmJiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdC8vIHJldHVybiB0cnVlIHdoZW4gcGxheSBoYXMgYmVlbiBjYWxsZWRcblx0aXNTY2hlZHVsZWQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlci5faXNBY3RpdmVBY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXG5cdHN0YXJ0QXQ6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHRoaXMuX3N0YXJ0VGltZSA9IHRpbWU7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldExvb3A6IGZ1bmN0aW9uICggbW9kZSwgcmVwZXRpdGlvbnMgKSB7XG5cblx0XHR0aGlzLmxvb3AgPSBtb2RlO1xuXHRcdHRoaXMucmVwZXRpdGlvbnMgPSByZXBldGl0aW9ucztcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gV2VpZ2h0XG5cblx0Ly8gc2V0IHRoZSB3ZWlnaHQgc3RvcHBpbmcgYW55IHNjaGVkdWxlZCBmYWRpbmdcblx0Ly8gYWx0aG91Z2ggLmVuYWJsZWQgPSBmYWxzZSB5aWVsZHMgYW4gZWZmZWN0aXZlIHdlaWdodCBvZiB6ZXJvLCB0aGlzXG5cdC8vIG1ldGhvZCBkb2VzICpub3QqIGNoYW5nZSAuZW5hYmxlZCwgYmVjYXVzZSBpdCB3b3VsZCBiZSBjb25mdXNpbmdcblx0c2V0RWZmZWN0aXZlV2VpZ2h0OiBmdW5jdGlvbiAoIHdlaWdodCApIHtcblxuXHRcdHRoaXMud2VpZ2h0ID0gd2VpZ2h0O1xuXG5cdFx0Ly8gbm90ZTogc2FtZSBsb2dpYyBhcyB3aGVuIHVwZGF0ZWQgYXQgcnVudGltZVxuXHRcdHRoaXMuX2VmZmVjdGl2ZVdlaWdodCA9IHRoaXMuZW5hYmxlZCA/IHdlaWdodCA6IDA7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhlIHdlaWdodCBjb25zaWRlcmluZyBmYWRpbmcgYW5kIC5lbmFibGVkXG5cdGdldEVmZmVjdGl2ZVdlaWdodDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2VmZmVjdGl2ZVdlaWdodDtcblxuXHR9LFxuXG5cdGZhZGVJbjogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLl9zY2hlZHVsZUZhZGluZyggZHVyYXRpb24sIDAsIDEgKTtcblxuXHR9LFxuXG5cdGZhZGVPdXQ6IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fc2NoZWR1bGVGYWRpbmcoIGR1cmF0aW9uLCAxLCAwICk7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVGcm9tOiBmdW5jdGlvbiAoIGZhZGVPdXRBY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0ZmFkZU91dEFjdGlvbi5mYWRlT3V0KCBkdXJhdGlvbiApO1xuXHRcdHRoaXMuZmFkZUluKCBkdXJhdGlvbiApO1xuXG5cdFx0aWYgKCB3YXJwICkge1xuXG5cdFx0XHR2YXIgZmFkZUluRHVyYXRpb24gPSB0aGlzLl9jbGlwLmR1cmF0aW9uLFxuXHRcdFx0XHRmYWRlT3V0RHVyYXRpb24gPSBmYWRlT3V0QWN0aW9uLl9jbGlwLmR1cmF0aW9uLFxuXG5cdFx0XHRcdHN0YXJ0RW5kUmF0aW8gPSBmYWRlT3V0RHVyYXRpb24gLyBmYWRlSW5EdXJhdGlvbixcblx0XHRcdFx0ZW5kU3RhcnRSYXRpbyA9IGZhZGVJbkR1cmF0aW9uIC8gZmFkZU91dER1cmF0aW9uO1xuXG5cdFx0XHRmYWRlT3V0QWN0aW9uLndhcnAoIDEuMCwgc3RhcnRFbmRSYXRpbywgZHVyYXRpb24gKTtcblx0XHRcdHRoaXMud2FycCggZW5kU3RhcnRSYXRpbywgMS4wLCBkdXJhdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjcm9zc0ZhZGVUbzogZnVuY3Rpb24gKCBmYWRlSW5BY3Rpb24sIGR1cmF0aW9uLCB3YXJwICkge1xuXG5cdFx0cmV0dXJuIGZhZGVJbkFjdGlvbi5jcm9zc0ZhZGVGcm9tKCB0aGlzLCBkdXJhdGlvbiwgd2FycCApO1xuXG5cdH0sXG5cblx0c3RvcEZhZGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIHdlaWdodEludGVycG9sYW50ID0gdGhpcy5fd2VpZ2h0SW50ZXJwb2xhbnQ7XG5cblx0XHRpZiAoIHdlaWdodEludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl93ZWlnaHRJbnRlcnBvbGFudCA9IG51bGw7XG5cdFx0XHR0aGlzLl9taXhlci5fdGFrZUJhY2tDb250cm9sSW50ZXJwb2xhbnQoIHdlaWdodEludGVycG9sYW50ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIFRpbWUgU2NhbGUgQ29udHJvbFxuXG5cdC8vIHNldCB0aGUgdGltZSBzY2FsZSBzdG9wcGluZyBhbnkgc2NoZWR1bGVkIHdhcnBpbmdcblx0Ly8gYWx0aG91Z2ggLnBhdXNlZCA9IHRydWUgeWllbGRzIGFuIGVmZmVjdGl2ZSB0aW1lIHNjYWxlIG9mIHplcm8sIHRoaXNcblx0Ly8gbWV0aG9kIGRvZXMgKm5vdCogY2hhbmdlIC5wYXVzZWQsIGJlY2F1c2UgaXQgd291bGQgYmUgY29uZnVzaW5nXG5cdHNldEVmZmVjdGl2ZVRpbWVTY2FsZTogZnVuY3Rpb24gKCB0aW1lU2NhbGUgKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHR0aGlzLl9lZmZlY3RpdmVUaW1lU2NhbGUgPSB0aGlzLnBhdXNlZCA/IDAgOiB0aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0Ly8gcmV0dXJuIHRoZSB0aW1lIHNjYWxlIGNvbnNpZGVyaW5nIHdhcnBpbmcgYW5kIC5wYXVzZWRcblx0Z2V0RWZmZWN0aXZlVGltZVNjYWxlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fZWZmZWN0aXZlVGltZVNjYWxlO1xuXG5cdH0sXG5cblx0c2V0RHVyYXRpb246IGZ1bmN0aW9uICggZHVyYXRpb24gKSB7XG5cblx0XHR0aGlzLnRpbWVTY2FsZSA9IHRoaXMuX2NsaXAuZHVyYXRpb24gLyBkdXJhdGlvbjtcblxuXHRcdHJldHVybiB0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0fSxcblxuXHRzeW5jV2l0aDogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR0aGlzLnRpbWUgPSBhY3Rpb24udGltZTtcblx0XHR0aGlzLnRpbWVTY2FsZSA9IGFjdGlvbi50aW1lU2NhbGU7XG5cblx0XHRyZXR1cm4gdGhpcy5zdG9wV2FycGluZygpO1xuXG5cdH0sXG5cblx0aGFsdDogZnVuY3Rpb24gKCBkdXJhdGlvbiApIHtcblxuXHRcdHJldHVybiB0aGlzLndhcnAoIHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSwgMCwgZHVyYXRpb24gKTtcblxuXHR9LFxuXG5cdHdhcnA6IGZ1bmN0aW9uICggc3RhcnRUaW1lU2NhbGUsIGVuZFRpbWVTY2FsZSwgZHVyYXRpb24gKSB7XG5cblx0XHR2YXIgbWl4ZXIgPSB0aGlzLl9taXhlciwgbm93ID0gbWl4ZXIudGltZSxcblx0XHRcdGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQsXG5cblx0XHRcdHRpbWVTY2FsZSA9IHRoaXMudGltZVNjYWxlO1xuXG5cdFx0aWYgKCBpbnRlcnBvbGFudCA9PT0gbnVsbCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBtaXhlci5fbGVuZENvbnRyb2xJbnRlcnBvbGFudCgpO1xuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHZhciB0aW1lcyA9IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9ucyxcblx0XHRcdHZhbHVlcyA9IGludGVycG9sYW50LnNhbXBsZVZhbHVlcztcblxuXHRcdHRpbWVzWyAwIF0gPSBub3c7XG5cdFx0dGltZXNbIDEgXSA9IG5vdyArIGR1cmF0aW9uO1xuXG5cdFx0dmFsdWVzWyAwIF0gPSBzdGFydFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblx0XHR2YWx1ZXNbIDEgXSA9IGVuZFRpbWVTY2FsZSAvIHRpbWVTY2FsZTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c3RvcFdhcnBpbmc6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciB0aW1lU2NhbGVJbnRlcnBvbGFudCA9IHRoaXMuX3RpbWVTY2FsZUludGVycG9sYW50O1xuXG5cdFx0aWYgKCB0aW1lU2NhbGVJbnRlcnBvbGFudCAhPT0gbnVsbCApIHtcblxuXHRcdFx0dGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQgPSBudWxsO1xuXHRcdFx0dGhpcy5fbWl4ZXIuX3Rha2VCYWNrQ29udHJvbEludGVycG9sYW50KCB0aW1lU2NhbGVJbnRlcnBvbGFudCApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyBPYmplY3QgQWNjZXNzb3JzXG5cblx0Z2V0TWl4ZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9taXhlcjtcblxuXHR9LFxuXG5cdGdldENsaXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLl9jbGlwO1xuXG5cdH0sXG5cblx0Z2V0Um9vdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHRoaXMuX2xvY2FsUm9vdCB8fCB0aGlzLl9taXhlci5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIEludGVybmFcblxuXHRfdXBkYXRlOiBmdW5jdGlvbiAoIHRpbWUsIGRlbHRhVGltZSwgdGltZURpcmVjdGlvbiwgYWNjdUluZGV4ICkge1xuXG5cdFx0Ly8gY2FsbGVkIGJ5IHRoZSBtaXhlclxuXG5cdFx0aWYgKCAhIHRoaXMuZW5hYmxlZCApIHtcblxuXHRcdFx0Ly8gY2FsbCAuX3VwZGF0ZVdlaWdodCgpIHRvIHVwZGF0ZSAuX2VmZmVjdGl2ZVdlaWdodFxuXG5cdFx0XHR0aGlzLl91cGRhdGVXZWlnaHQoIHRpbWUgKTtcblx0XHRcdHJldHVybjtcblxuXHRcdH1cblxuXHRcdHZhciBzdGFydFRpbWUgPSB0aGlzLl9zdGFydFRpbWU7XG5cblx0XHRpZiAoIHN0YXJ0VGltZSAhPT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gY2hlY2sgZm9yIHNjaGVkdWxlZCBzdGFydCBvZiBhY3Rpb25cblxuXHRcdFx0dmFyIHRpbWVSdW5uaW5nID0gKCB0aW1lIC0gc3RhcnRUaW1lICkgKiB0aW1lRGlyZWN0aW9uO1xuXHRcdFx0aWYgKCB0aW1lUnVubmluZyA8IDAgfHwgdGltZURpcmVjdGlvbiA9PT0gMCApIHtcblxuXHRcdFx0XHRyZXR1cm47IC8vIHlldCB0byBjb21lIC8gZG9uJ3QgZGVjaWRlIHdoZW4gZGVsdGEgPSAwXG5cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RhcnRcblxuXHRcdFx0dGhpcy5fc3RhcnRUaW1lID0gbnVsbDsgLy8gdW5zY2hlZHVsZVxuXHRcdFx0ZGVsdGFUaW1lID0gdGltZURpcmVjdGlvbiAqIHRpbWVSdW5uaW5nO1xuXG5cdFx0fVxuXG5cdFx0Ly8gYXBwbHkgdGltZSBzY2FsZSBhbmQgYWR2YW5jZSB0aW1lXG5cblx0XHRkZWx0YVRpbWUgKj0gdGhpcy5fdXBkYXRlVGltZVNjYWxlKCB0aW1lICk7XG5cdFx0dmFyIGNsaXBUaW1lID0gdGhpcy5fdXBkYXRlVGltZSggZGVsdGFUaW1lICk7XG5cblx0XHQvLyBub3RlOiBfdXBkYXRlVGltZSBtYXkgZGlzYWJsZSB0aGUgYWN0aW9uIHJlc3VsdGluZyBpblxuXHRcdC8vIGFuIGVmZmVjdGl2ZSB3ZWlnaHQgb2YgMFxuXG5cdFx0dmFyIHdlaWdodCA9IHRoaXMuX3VwZGF0ZVdlaWdodCggdGltZSApO1xuXG5cdFx0aWYgKCB3ZWlnaHQgPiAwICkge1xuXG5cdFx0XHR2YXIgaW50ZXJwb2xhbnRzID0gdGhpcy5faW50ZXJwb2xhbnRzO1xuXHRcdFx0dmFyIHByb3BlcnR5TWl4ZXJzID0gdGhpcy5fcHJvcGVydHlCaW5kaW5ncztcblxuXHRcdFx0Zm9yICggdmFyIGogPSAwLCBtID0gaW50ZXJwb2xhbnRzLmxlbmd0aDsgaiAhPT0gbTsgKysgaiApIHtcblxuXHRcdFx0XHRpbnRlcnBvbGFudHNbIGogXS5ldmFsdWF0ZSggY2xpcFRpbWUgKTtcblx0XHRcdFx0cHJvcGVydHlNaXhlcnNbIGogXS5hY2N1bXVsYXRlKCBhY2N1SW5kZXgsIHdlaWdodCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfdXBkYXRlV2VpZ2h0OiBmdW5jdGlvbiAoIHRpbWUgKSB7XG5cblx0XHR2YXIgd2VpZ2h0ID0gMDtcblxuXHRcdGlmICggdGhpcy5lbmFibGVkICkge1xuXG5cdFx0XHR3ZWlnaHQgPSB0aGlzLndlaWdodDtcblx0XHRcdHZhciBpbnRlcnBvbGFudCA9IHRoaXMuX3dlaWdodEludGVycG9sYW50O1xuXG5cdFx0XHRpZiAoIGludGVycG9sYW50ICE9PSBudWxsICkge1xuXG5cdFx0XHRcdHZhciBpbnRlcnBvbGFudFZhbHVlID0gaW50ZXJwb2xhbnQuZXZhbHVhdGUoIHRpbWUgKVsgMCBdO1xuXG5cdFx0XHRcdHdlaWdodCAqPSBpbnRlcnBvbGFudFZhbHVlO1xuXG5cdFx0XHRcdGlmICggdGltZSA+IGludGVycG9sYW50LnBhcmFtZXRlclBvc2l0aW9uc1sgMSBdICkge1xuXG5cdFx0XHRcdFx0dGhpcy5zdG9wRmFkaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIGludGVycG9sYW50VmFsdWUgPT09IDAgKSB7XG5cblx0XHRcdFx0XHRcdC8vIGZhZGVkIG91dCwgZGlzYWJsZVxuXHRcdFx0XHRcdFx0dGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHR0aGlzLl9lZmZlY3RpdmVXZWlnaHQgPSB3ZWlnaHQ7XG5cdFx0cmV0dXJuIHdlaWdodDtcblxuXHR9LFxuXG5cdF91cGRhdGVUaW1lU2NhbGU6IGZ1bmN0aW9uICggdGltZSApIHtcblxuXHRcdHZhciB0aW1lU2NhbGUgPSAwO1xuXG5cdFx0aWYgKCAhIHRoaXMucGF1c2VkICkge1xuXG5cdFx0XHR0aW1lU2NhbGUgPSB0aGlzLnRpbWVTY2FsZTtcblxuXHRcdFx0dmFyIGludGVycG9sYW50ID0gdGhpcy5fdGltZVNjYWxlSW50ZXJwb2xhbnQ7XG5cblx0XHRcdGlmICggaW50ZXJwb2xhbnQgIT09IG51bGwgKSB7XG5cblx0XHRcdFx0dmFyIGludGVycG9sYW50VmFsdWUgPSBpbnRlcnBvbGFudC5ldmFsdWF0ZSggdGltZSApWyAwIF07XG5cblx0XHRcdFx0dGltZVNjYWxlICo9IGludGVycG9sYW50VmFsdWU7XG5cblx0XHRcdFx0aWYgKCB0aW1lID4gaW50ZXJwb2xhbnQucGFyYW1ldGVyUG9zaXRpb25zWyAxIF0gKSB7XG5cblx0XHRcdFx0XHR0aGlzLnN0b3BXYXJwaW5nKCk7XG5cblx0XHRcdFx0XHRpZiAoIHRpbWVTY2FsZSA9PT0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gbW90aW9uIGhhcyBoYWx0ZWQsIHBhdXNlXG5cdFx0XHRcdFx0XHR0aGlzLnBhdXNlZCA9IHRydWU7XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyB3YXJwIGRvbmUgLSBhcHBseSBmaW5hbCB0aW1lIHNjYWxlXG5cdFx0XHRcdFx0XHR0aGlzLnRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHRoaXMuX2VmZmVjdGl2ZVRpbWVTY2FsZSA9IHRpbWVTY2FsZTtcblx0XHRyZXR1cm4gdGltZVNjYWxlO1xuXG5cdH0sXG5cblx0X3VwZGF0ZVRpbWU6IGZ1bmN0aW9uICggZGVsdGFUaW1lICkge1xuXG5cdFx0dmFyIHRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XG5cdFx0dmFyIGR1cmF0aW9uID0gdGhpcy5fY2xpcC5kdXJhdGlvbjtcblx0XHR2YXIgbG9vcCA9IHRoaXMubG9vcDtcblx0XHR2YXIgbG9vcENvdW50ID0gdGhpcy5fbG9vcENvdW50O1xuXG5cdFx0dmFyIHBpbmdQb25nID0gKCBsb29wID09PSBMb29wUGluZ1BvbmcgKTtcblxuXHRcdGlmICggZGVsdGFUaW1lID09PSAwICkge1xuXG5cdFx0XHRpZiAoIGxvb3BDb3VudCA9PT0gLSAxICkgcmV0dXJuIHRpbWU7XG5cblx0XHRcdHJldHVybiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkgPyBkdXJhdGlvbiAtIHRpbWUgOiB0aW1lO1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBsb29wID09PSBMb29wT25jZSApIHtcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHR0aGlzLl9sb29wQ291bnQgPSAwO1xuXHRcdFx0XHR0aGlzLl9zZXRFbmRpbmdzKCB0cnVlLCB0cnVlLCBmYWxzZSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGhhbmRsZV9zdG9wOiB7XG5cblx0XHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdFx0dGltZSA9IDA7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0XHRicmVhayBoYW5kbGVfc3RvcDtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRlbHNlIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuXG5cdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0dGhpcy5fbWl4ZXIuZGlzcGF0Y2hFdmVudCgge1xuXHRcdFx0XHRcdHR5cGU6ICdmaW5pc2hlZCcsIGFjdGlvbjogdGhpcyxcblx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA8IDAgPyAtIDEgOiAxXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHsgLy8gcmVwZXRpdGl2ZSBSZXBlYXQgb3IgUGluZ1BvbmdcblxuXHRcdFx0aWYgKCBsb29wQ291bnQgPT09IC0gMSApIHtcblxuXHRcdFx0XHQvLyBqdXN0IHN0YXJ0ZWRcblxuXHRcdFx0XHRpZiAoIGRlbHRhVGltZSA+PSAwICkge1xuXG5cdFx0XHRcdFx0bG9vcENvdW50ID0gMDtcblxuXHRcdFx0XHRcdHRoaXMuX3NldEVuZGluZ3MoIHRydWUsIHRoaXMucmVwZXRpdGlvbnMgPT09IDAsIHBpbmdQb25nICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdC8vIHdoZW4gbG9vcGluZyBpbiByZXZlcnNlIGRpcmVjdGlvbiwgdGhlIGluaXRpYWxcblx0XHRcdFx0XHQvLyB0cmFuc2l0aW9uIHRocm91Z2ggemVybyBjb3VudHMgYXMgYSByZXBldGl0aW9uLFxuXHRcdFx0XHRcdC8vIHNvIGxlYXZlIGxvb3BDb3VudCBhdCAtMVxuXG5cdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggdGhpcy5yZXBldGl0aW9ucyA9PT0gMCwgdHJ1ZSwgcGluZ1BvbmcgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0aW1lID49IGR1cmF0aW9uIHx8IHRpbWUgPCAwICkge1xuXG5cdFx0XHRcdC8vIHdyYXAgYXJvdW5kXG5cblx0XHRcdFx0dmFyIGxvb3BEZWx0YSA9IE1hdGguZmxvb3IoIHRpbWUgLyBkdXJhdGlvbiApOyAvLyBzaWduZWRcblx0XHRcdFx0dGltZSAtPSBkdXJhdGlvbiAqIGxvb3BEZWx0YTtcblxuXHRcdFx0XHRsb29wQ291bnQgKz0gTWF0aC5hYnMoIGxvb3BEZWx0YSApO1xuXG5cdFx0XHRcdHZhciBwZW5kaW5nID0gdGhpcy5yZXBldGl0aW9ucyAtIGxvb3BDb3VudDtcblxuXHRcdFx0XHRpZiAoIHBlbmRpbmcgPD0gMCApIHtcblxuXHRcdFx0XHRcdC8vIGhhdmUgdG8gc3RvcCAoc3dpdGNoIHN0YXRlLCBjbGFtcCB0aW1lLCBmaXJlIGV2ZW50KVxuXG5cdFx0XHRcdFx0aWYgKCB0aGlzLmNsYW1wV2hlbkZpbmlzaGVkICkgdGhpcy5wYXVzZWQgPSB0cnVlO1xuXHRcdFx0XHRcdGVsc2UgdGhpcy5lbmFibGVkID0gZmFsc2U7XG5cblx0XHRcdFx0XHR0aW1lID0gZGVsdGFUaW1lID4gMCA/IGR1cmF0aW9uIDogMDtcblxuXHRcdFx0XHRcdHRoaXMudGltZSA9IHRpbWU7XG5cblx0XHRcdFx0XHR0aGlzLl9taXhlci5kaXNwYXRjaEV2ZW50KCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZmluaXNoZWQnLCBhY3Rpb246IHRoaXMsXG5cdFx0XHRcdFx0XHRkaXJlY3Rpb246IGRlbHRhVGltZSA+IDAgPyAxIDogLSAxXG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHQvLyBrZWVwIHJ1bm5pbmdcblxuXHRcdFx0XHRcdGlmICggcGVuZGluZyA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gZW50ZXJpbmcgdGhlIGxhc3Qgcm91bmRcblxuXHRcdFx0XHRcdFx0dmFyIGF0U3RhcnQgPSBkZWx0YVRpbWUgPCAwO1xuXHRcdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggYXRTdGFydCwgISBhdFN0YXJ0LCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0dGhpcy5fc2V0RW5kaW5ncyggZmFsc2UsIGZhbHNlLCBwaW5nUG9uZyApO1xuXG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5fbG9vcENvdW50ID0gbG9vcENvdW50O1xuXG5cdFx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0XHRcdHRoaXMuX21peGVyLmRpc3BhdGNoRXZlbnQoIHtcblx0XHRcdFx0XHRcdHR5cGU6ICdsb29wJywgYWN0aW9uOiB0aGlzLCBsb29wRGVsdGE6IGxvb3BEZWx0YVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dGhpcy50aW1lID0gdGltZTtcblxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHBpbmdQb25nICYmICggbG9vcENvdW50ICYgMSApID09PSAxICkge1xuXG5cdFx0XHRcdC8vIGludmVydCB0aW1lIGZvciB0aGUgXCJwb25nIHJvdW5kXCJcblxuXHRcdFx0XHRyZXR1cm4gZHVyYXRpb24gLSB0aW1lO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGltZTtcblxuXHR9LFxuXG5cdF9zZXRFbmRpbmdzOiBmdW5jdGlvbiAoIGF0U3RhcnQsIGF0RW5kLCBwaW5nUG9uZyApIHtcblxuXHRcdHZhciBzZXR0aW5ncyA9IHRoaXMuX2ludGVycG9sYW50U2V0dGluZ3M7XG5cblx0XHRpZiAoIHBpbmdQb25nICkge1xuXG5cdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFplcm9TbG9wZUVuZGluZztcblx0XHRcdHNldHRpbmdzLmVuZGluZ0VuZCA9IFplcm9TbG9wZUVuZGluZztcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIGFzc3VtaW5nIGZvciBMb29wT25jZSBhdFN0YXJ0ID09IGF0RW5kID09IHRydWVcblxuXHRcdFx0aWYgKCBhdFN0YXJ0ICkge1xuXG5cdFx0XHRcdHNldHRpbmdzLmVuZGluZ1N0YXJ0ID0gdGhpcy56ZXJvU2xvcGVBdFN0YXJ0ID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdTdGFydCA9IFdyYXBBcm91bmRFbmRpbmc7XG5cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBhdEVuZCApIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgPSB0aGlzLnplcm9TbG9wZUF0RW5kID8gWmVyb1Nsb3BlRW5kaW5nIDogWmVyb0N1cnZhdHVyZUVuZGluZztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzZXR0aW5ncy5lbmRpbmdFbmQgXHQgPSBXcmFwQXJvdW5kRW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfc2NoZWR1bGVGYWRpbmc6IGZ1bmN0aW9uICggZHVyYXRpb24sIHdlaWdodE5vdywgd2VpZ2h0VGhlbiApIHtcblxuXHRcdHZhciBtaXhlciA9IHRoaXMuX21peGVyLCBub3cgPSBtaXhlci50aW1lLFxuXHRcdFx0aW50ZXJwb2xhbnQgPSB0aGlzLl93ZWlnaHRJbnRlcnBvbGFudDtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IG51bGwgKSB7XG5cblx0XHRcdGludGVycG9sYW50ID0gbWl4ZXIuX2xlbmRDb250cm9sSW50ZXJwb2xhbnQoKTtcblx0XHRcdHRoaXMuX3dlaWdodEludGVycG9sYW50ID0gaW50ZXJwb2xhbnQ7XG5cblx0XHR9XG5cblx0XHR2YXIgdGltZXMgPSBpbnRlcnBvbGFudC5wYXJhbWV0ZXJQb3NpdGlvbnMsXG5cdFx0XHR2YWx1ZXMgPSBpbnRlcnBvbGFudC5zYW1wbGVWYWx1ZXM7XG5cblx0XHR0aW1lc1sgMCBdID0gbm93O1xuXHRcdHZhbHVlc1sgMCBdID0gd2VpZ2h0Tm93O1xuXHRcdHRpbWVzWyAxIF0gPSBub3cgKyBkdXJhdGlvbjtcblx0XHR2YWx1ZXNbIDEgXSA9IHdlaWdodFRoZW47XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKlxuICogUGxheWVyIGZvciBBbmltYXRpb25DbGlwcy5cbiAqXG4gKlxuICogQGF1dGhvciBCZW4gSG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pby9cbiAqIEBhdXRob3IgRGF2aWQgU2Fybm8gLyBodHRwOi8vbGlnaHRoYXVzLnVzL1xuICogQGF1dGhvciB0c2Nod1xuICovXG5cbmZ1bmN0aW9uIEFuaW1hdGlvbk1peGVyKCByb290ICkge1xuXG5cdHRoaXMuX3Jvb3QgPSByb290O1xuXHR0aGlzLl9pbml0TWVtb3J5TWFuYWdlcigpO1xuXHR0aGlzLl9hY2N1SW5kZXggPSAwO1xuXG5cdHRoaXMudGltZSA9IDA7XG5cblx0dGhpcy50aW1lU2NhbGUgPSAxLjA7XG5cbn1cblxuQW5pbWF0aW9uTWl4ZXIucHJvdG90eXBlID0gT2JqZWN0LmFzc2lnbiggT2JqZWN0LmNyZWF0ZSggRXZlbnREaXNwYXRjaGVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEFuaW1hdGlvbk1peGVyLFxuXG5cdF9iaW5kQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiwgcHJvdG90eXBlQWN0aW9uICkge1xuXG5cdFx0dmFyIHJvb3QgPSBhY3Rpb24uX2xvY2FsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0dHJhY2tzID0gYWN0aW9uLl9jbGlwLnRyYWNrcyxcblx0XHRcdG5UcmFja3MgPSB0cmFja3MubGVuZ3RoLFxuXHRcdFx0YmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3MsXG5cdFx0XHRpbnRlcnBvbGFudHMgPSBhY3Rpb24uX2ludGVycG9sYW50cyxcblx0XHRcdHJvb3RVdWlkID0gcm9vdC51dWlkLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IGJpbmRpbmdzQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBiaW5kaW5nc0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nc0J5TmFtZSA9IHt9O1xuXHRcdFx0YmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0gPSBiaW5kaW5nc0J5TmFtZTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gblRyYWNrczsgKysgaSApIHtcblxuXHRcdFx0dmFyIHRyYWNrID0gdHJhY2tzWyBpIF0sXG5cdFx0XHRcdHRyYWNrTmFtZSA9IHRyYWNrLm5hbWUsXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc0J5TmFtZVsgdHJhY2tOYW1lIF07XG5cblx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZyAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdFx0Ly8gZXhpc3RpbmcgYmluZGluZywgbWFrZSBzdXJlIHRoZSBjYWNoZSBrbm93c1xuXG5cdFx0XHRcdFx0aWYgKCBiaW5kaW5nLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdFx0XHQrKyBiaW5kaW5nLnJlZmVyZW5jZUNvdW50O1xuXHRcdFx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVCaW5kaW5nKCBiaW5kaW5nLCByb290VXVpZCwgdHJhY2tOYW1lICk7XG5cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRjb250aW51ZTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHBhdGggPSBwcm90b3R5cGVBY3Rpb24gJiYgcHJvdG90eXBlQWN0aW9uLlxuXHRcdFx0XHRcdF9wcm9wZXJ0eUJpbmRpbmdzWyBpIF0uYmluZGluZy5wYXJzZWRQYXRoO1xuXG5cdFx0XHRcdGJpbmRpbmcgPSBuZXcgUHJvcGVydHlNaXhlcihcblx0XHRcdFx0XHRQcm9wZXJ0eUJpbmRpbmcuY3JlYXRlKCByb290LCB0cmFja05hbWUsIHBhdGggKSxcblx0XHRcdFx0XHR0cmFjay5WYWx1ZVR5cGVOYW1lLCB0cmFjay5nZXRWYWx1ZVNpemUoKSApO1xuXG5cdFx0XHRcdCsrIGJpbmRpbmcucmVmZXJlbmNlQ291bnQ7XG5cdFx0XHRcdHRoaXMuX2FkZEluYWN0aXZlQmluZGluZyggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApO1xuXG5cdFx0XHRcdGJpbmRpbmdzWyBpIF0gPSBiaW5kaW5nO1xuXG5cdFx0XHR9XG5cblx0XHRcdGludGVycG9sYW50c1sgaSBdLnJlc3VsdEJ1ZmZlciA9IGJpbmRpbmcuYnVmZmVyO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0X2FjdGl2YXRlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdGlmICggISB0aGlzLl9pc0FjdGl2ZUFjdGlvbiggYWN0aW9uICkgKSB7XG5cblx0XHRcdGlmICggYWN0aW9uLl9jYWNoZUluZGV4ID09PSBudWxsICkge1xuXG5cdFx0XHRcdC8vIHRoaXMgYWN0aW9uIGhhcyBiZWVuIGZvcmdvdHRlbiBieSB0aGUgY2FjaGUsIGJ1dCB0aGUgdXNlclxuXHRcdFx0XHQvLyBhcHBlYXJzIHRvIGJlIHN0aWxsIHVzaW5nIGl0IC0+IHJlYmluZFxuXG5cdFx0XHRcdHZhciByb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQsXG5cdFx0XHRcdFx0Y2xpcFV1aWQgPSBhY3Rpb24uX2NsaXAudXVpZCxcblx0XHRcdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRcdFx0dGhpcy5fYmluZEFjdGlvbiggYWN0aW9uLFxuXHRcdFx0XHRcdGFjdGlvbnNGb3JDbGlwICYmIGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdICk7XG5cblx0XHRcdFx0dGhpcy5fYWRkSW5hY3RpdmVBY3Rpb24oIGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICk7XG5cblx0XHRcdH1cblxuXHRcdFx0dmFyIGJpbmRpbmdzID0gYWN0aW9uLl9wcm9wZXJ0eUJpbmRpbmdzO1xuXG5cdFx0XHQvLyBpbmNyZW1lbnQgcmVmZXJlbmNlIGNvdW50cyAvIHNvcnQgb3V0IHN0YXRlXG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nc1sgaSBdO1xuXG5cdFx0XHRcdGlmICggYmluZGluZy51c2VDb3VudCArKyA9PT0gMCApIHtcblxuXHRcdFx0XHRcdHRoaXMuX2xlbmRCaW5kaW5nKCBiaW5kaW5nICk7XG5cdFx0XHRcdFx0YmluZGluZy5zYXZlT3JpZ2luYWxTdGF0ZSgpO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9sZW5kQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdF9kZWFjdGl2YXRlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdGlmICggdGhpcy5faXNBY3RpdmVBY3Rpb24oIGFjdGlvbiApICkge1xuXG5cdFx0XHR2YXIgYmluZGluZ3MgPSBhY3Rpb24uX3Byb3BlcnR5QmluZGluZ3M7XG5cblx0XHRcdC8vIGRlY3JlbWVudCByZWZlcmVuY2UgY291bnRzIC8gc29ydCBvdXQgc3RhdGVcblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGJpbmRpbmdzLmxlbmd0aDsgaSAhPT0gbjsgKysgaSApIHtcblxuXHRcdFx0XHR2YXIgYmluZGluZyA9IGJpbmRpbmdzWyBpIF07XG5cblx0XHRcdFx0aWYgKCAtLSBiaW5kaW5nLnVzZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHRcdHRoaXMuX3Rha2VCYWNrQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl90YWtlQmFja0FjdGlvbiggYWN0aW9uICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlclxuXG5cdF9pbml0TWVtb3J5TWFuYWdlcjogZnVuY3Rpb24gKCkge1xuXG5cdFx0dGhpcy5fYWN0aW9ucyA9IFtdOyAvLyAnbkFjdGl2ZUFjdGlvbnMnIGZvbGxvd2VkIGJ5IGluYWN0aXZlIG9uZXNcblx0XHR0aGlzLl9uQWN0aXZlQWN0aW9ucyA9IDA7XG5cblx0XHR0aGlzLl9hY3Rpb25zQnlDbGlwID0ge307XG5cdFx0Ly8gaW5zaWRlOlxuXHRcdC8vIHtcblx0XHQvLyBcdGtub3duQWN0aW9uczogQXJyYXk8IEFuaW1hdGlvbkFjdGlvbiA+IC0gdXNlZCBhcyBwcm90b3R5cGVzXG5cdFx0Ly8gXHRhY3Rpb25CeVJvb3Q6IEFuaW1hdGlvbkFjdGlvbiAtIGxvb2t1cFxuXHRcdC8vIH1cblxuXG5cdFx0dGhpcy5fYmluZGluZ3MgPSBbXTsgLy8gJ25BY3RpdmVCaW5kaW5ncycgZm9sbG93ZWQgYnkgaW5hY3RpdmUgb25lc1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHR0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUgPSB7fTsgLy8gaW5zaWRlOiBNYXA8IG5hbWUsIFByb3BlcnR5TWl4ZXIgPlxuXG5cblx0XHR0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzID0gW107IC8vIHNhbWUgZ2FtZSBhcyBhYm92ZVxuXHRcdHRoaXMuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzID0gMDtcblxuXHRcdHZhciBzY29wZSA9IHRoaXM7XG5cblx0XHR0aGlzLnN0YXRzID0ge1xuXG5cdFx0XHRhY3Rpb25zOiB7XG5cdFx0XHRcdGdldCB0b3RhbCgpIHtcblxuXHRcdFx0XHRcdHJldHVybiBzY29wZS5fYWN0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQWN0aW9ucztcblxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0YmluZGluZ3M6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9iaW5kaW5ncy5sZW5ndGg7XG5cblx0XHRcdFx0fSxcblx0XHRcdFx0Z2V0IGluVXNlKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGNvbnRyb2xJbnRlcnBvbGFudHM6IHtcblx0XHRcdFx0Z2V0IHRvdGFsKCkge1xuXG5cdFx0XHRcdFx0cmV0dXJuIHNjb3BlLl9jb250cm9sSW50ZXJwb2xhbnRzLmxlbmd0aDtcblxuXHRcdFx0XHR9LFxuXHRcdFx0XHRnZXQgaW5Vc2UoKSB7XG5cblx0XHRcdFx0XHRyZXR1cm4gc2NvcGUuX25BY3RpdmVDb250cm9sSW50ZXJwb2xhbnRzO1xuXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH07XG5cblx0fSxcblxuXHQvLyBNZW1vcnkgbWFuYWdlbWVudCBmb3IgQW5pbWF0aW9uQWN0aW9uIG9iamVjdHNcblxuXHRfaXNBY3RpdmVBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0dmFyIGluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4O1xuXHRcdHJldHVybiBpbmRleCAhPT0gbnVsbCAmJiBpbmRleCA8IHRoaXMuX25BY3RpdmVBY3Rpb25zO1xuXG5cdH0sXG5cblx0X2FkZEluYWN0aXZlQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiwgY2xpcFV1aWQsIHJvb3RVdWlkICkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0YWN0aW9uc0J5Q2xpcCA9IHRoaXMuX2FjdGlvbnNCeUNsaXAsXG5cdFx0XHRhY3Rpb25zRm9yQ2xpcCA9IGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0ge1xuXG5cdFx0XHRcdGtub3duQWN0aW9uczogWyBhY3Rpb24gXSxcblx0XHRcdFx0YWN0aW9uQnlSb290OiB7fVxuXG5cdFx0XHR9O1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSAwO1xuXG5cdFx0XHRhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdID0gYWN0aW9uc0ZvckNsaXA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR2YXIga25vd25BY3Rpb25zID0gYWN0aW9uc0ZvckNsaXAua25vd25BY3Rpb25zO1xuXG5cdFx0XHRhY3Rpb24uX2J5Q2xpcENhY2hlSW5kZXggPSBrbm93bkFjdGlvbnMubGVuZ3RoO1xuXHRcdFx0a25vd25BY3Rpb25zLnB1c2goIGFjdGlvbiApO1xuXG5cdFx0fVxuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gYWN0aW9ucy5sZW5ndGg7XG5cdFx0YWN0aW9ucy5wdXNoKCBhY3Rpb24gKTtcblxuXHRcdGFjdGlvbnNGb3JDbGlwLmFjdGlvbkJ5Um9vdFsgcm9vdFV1aWQgXSA9IGFjdGlvbjtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHR2YXIgYWN0aW9ucyA9IHRoaXMuX2FjdGlvbnMsXG5cdFx0XHRsYXN0SW5hY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBhY3Rpb25zLmxlbmd0aCAtIDEgXSxcblx0XHRcdGNhY2hlSW5kZXggPSBhY3Rpb24uX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBjYWNoZUluZGV4O1xuXHRcdGFjdGlvbnNbIGNhY2hlSW5kZXggXSA9IGxhc3RJbmFjdGl2ZUFjdGlvbjtcblx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbnVsbDtcblxuXG5cdFx0dmFyIGNsaXBVdWlkID0gYWN0aW9uLl9jbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSxcblx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXAgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnMsXG5cblx0XHRcdGxhc3RLbm93bkFjdGlvbiA9XG5cdFx0XHRcdGtub3duQWN0aW9uc0ZvckNsaXBbIGtub3duQWN0aW9uc0ZvckNsaXAubGVuZ3RoIC0gMSBdLFxuXG5cdFx0XHRieUNsaXBDYWNoZUluZGV4ID0gYWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4O1xuXG5cdFx0bGFzdEtub3duQWN0aW9uLl9ieUNsaXBDYWNoZUluZGV4ID0gYnlDbGlwQ2FjaGVJbmRleDtcblx0XHRrbm93bkFjdGlvbnNGb3JDbGlwWyBieUNsaXBDYWNoZUluZGV4IF0gPSBsYXN0S25vd25BY3Rpb247XG5cdFx0a25vd25BY3Rpb25zRm9yQ2xpcC5wb3AoKTtcblxuXHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblxuXHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zRm9yQ2xpcC5hY3Rpb25CeVJvb3QsXG5cdFx0XHRyb290VXVpZCA9ICggYWN0aW9uLl9sb2NhbFJvb3QgfHwgdGhpcy5fcm9vdCApLnV1aWQ7XG5cblx0XHRkZWxldGUgYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0aWYgKCBrbm93bkFjdGlvbnNGb3JDbGlwLmxlbmd0aCA9PT0gMCApIHtcblxuXHRcdFx0ZGVsZXRlIGFjdGlvbnNCeUNsaXBbIGNsaXBVdWlkIF07XG5cblx0XHR9XG5cblx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uKCBhY3Rpb24gKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmdzRm9yQWN0aW9uOiBmdW5jdGlvbiAoIGFjdGlvbiApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IGFjdGlvbi5fcHJvcGVydHlCaW5kaW5ncztcblx0XHRmb3IgKCB2YXIgaSA9IDAsIG4gPSBiaW5kaW5ncy5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdHZhciBiaW5kaW5nID0gYmluZGluZ3NbIGkgXTtcblxuXHRcdFx0aWYgKCAtLSBiaW5kaW5nLnJlZmVyZW5jZUNvdW50ID09PSAwICkge1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZyggYmluZGluZyApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0fSxcblxuXHRfbGVuZEFjdGlvbjogZnVuY3Rpb24gKCBhY3Rpb24gKSB7XG5cblx0XHQvLyBbIGFjdGl2ZSBhY3Rpb25zIHwgIGluYWN0aXZlIGFjdGlvbnMgIF1cblx0XHQvLyBbICBhY3RpdmUgYWN0aW9ucyA+fCBpbmFjdGl2ZSBhY3Rpb25zIF1cblx0XHQvLyAgICAgICAgICAgICAgICAgcyAgICAgICAgYVxuXHRcdC8vICAgICAgICAgICAgICAgICAgPC1zd2FwLT5cblx0XHQvLyAgICAgICAgICAgICAgICAgYSAgICAgICAgc1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0cHJldkluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQWN0aW9ucyArKyxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YWN0aW9uLl9jYWNoZUluZGV4ID0gbGFzdEFjdGl2ZUluZGV4O1xuXHRcdGFjdGlvbnNbIGxhc3RBY3RpdmVJbmRleCBdID0gYWN0aW9uO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUFjdGlvbi5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRhY3Rpb25zWyBwcmV2SW5kZXggXSA9IGZpcnN0SW5hY3RpdmVBY3Rpb247XG5cblx0fSxcblxuXHRfdGFrZUJhY2tBY3Rpb246IGZ1bmN0aW9uICggYWN0aW9uICkge1xuXG5cdFx0Ly8gWyAgYWN0aXZlIGFjdGlvbnMgIHwgaW5hY3RpdmUgYWN0aW9ucyBdXG5cdFx0Ly8gWyBhY3RpdmUgYWN0aW9ucyB8PCBpbmFjdGl2ZSBhY3Rpb25zICBdXG5cdFx0Ly8gICAgICAgIGEgICAgICAgIHNcblx0XHQvLyAgICAgICAgIDwtc3dhcC0+XG5cdFx0Ly8gICAgICAgIHMgICAgICAgIGFcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdHByZXZJbmRleCA9IGFjdGlvbi5fY2FjaGVJbmRleCxcblxuXHRcdFx0Zmlyc3RJbmFjdGl2ZUluZGV4ID0gLS0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdGxhc3RBY3RpdmVBY3Rpb24gPSBhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRhY3Rpb25zWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGFjdGlvbjtcblxuXHRcdGxhc3RBY3RpdmVBY3Rpb24uX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YWN0aW9uc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQWN0aW9uO1xuXG5cdH0sXG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgZm9yIFByb3BlcnR5TWl4ZXIgb2JqZWN0c1xuXG5cdF9hZGRJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZywgcm9vdFV1aWQsIHRyYWNrTmFtZSApIHtcblxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSxcblxuXHRcdFx0YmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncztcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0ge307XG5cdFx0XHRiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXSA9IGJpbmRpbmdCeU5hbWU7XG5cblx0XHR9XG5cblx0XHRiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXSA9IGJpbmRpbmc7XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gYmluZGluZ3MubGVuZ3RoO1xuXHRcdGJpbmRpbmdzLnB1c2goIGJpbmRpbmcgKTtcblxuXHR9LFxuXG5cdF9yZW1vdmVJbmFjdGl2ZUJpbmRpbmc6IGZ1bmN0aW9uICggYmluZGluZyApIHtcblxuXHRcdHZhciBiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0cHJvcEJpbmRpbmcgPSBiaW5kaW5nLmJpbmRpbmcsXG5cdFx0XHRyb290VXVpZCA9IHByb3BCaW5kaW5nLnJvb3ROb2RlLnV1aWQsXG5cdFx0XHR0cmFja05hbWUgPSBwcm9wQmluZGluZy5wYXRoLFxuXHRcdFx0YmluZGluZ3NCeVJvb3QgPSB0aGlzLl9iaW5kaW5nc0J5Um9vdEFuZE5hbWUsXG5cdFx0XHRiaW5kaW5nQnlOYW1lID0gYmluZGluZ3NCeVJvb3RbIHJvb3RVdWlkIF0sXG5cblx0XHRcdGxhc3RJbmFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgYmluZGluZ3MubGVuZ3RoIC0gMSBdLFxuXHRcdFx0Y2FjaGVJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXg7XG5cblx0XHRsYXN0SW5hY3RpdmVCaW5kaW5nLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRiaW5kaW5nc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQmluZGluZztcblx0XHRiaW5kaW5ncy5wb3AoKTtcblxuXHRcdGRlbGV0ZSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblxuXHRcdGlmICggT2JqZWN0LmtleXMoIGJpbmRpbmdCeU5hbWUgKS5sZW5ndGggPT09IDAgKSB7XG5cblx0XHRcdGRlbGV0ZSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdF9sZW5kQmluZGluZzogZnVuY3Rpb24gKCBiaW5kaW5nICkge1xuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRwcmV2SW5kZXggPSBiaW5kaW5nLl9jYWNoZUluZGV4LFxuXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQmluZGluZ3MgKyssXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVCaW5kaW5nID0gYmluZGluZ3NbIGxhc3RBY3RpdmVJbmRleCBdO1xuXG5cdFx0YmluZGluZy5fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRiaW5kaW5nc1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBiaW5kaW5nO1xuXG5cdFx0Zmlyc3RJbmFjdGl2ZUJpbmRpbmcuX2NhY2hlSW5kZXggPSBwcmV2SW5kZXg7XG5cdFx0YmluZGluZ3NbIHByZXZJbmRleCBdID0gZmlyc3RJbmFjdGl2ZUJpbmRpbmc7XG5cblx0fSxcblxuXHRfdGFrZUJhY2tCaW5kaW5nOiBmdW5jdGlvbiAoIGJpbmRpbmcgKSB7XG5cblx0XHR2YXIgYmluZGluZ3MgPSB0aGlzLl9iaW5kaW5ncyxcblx0XHRcdHByZXZJbmRleCA9IGJpbmRpbmcuX2NhY2hlSW5kZXgsXG5cblx0XHRcdGZpcnN0SW5hY3RpdmVJbmRleCA9IC0tIHRoaXMuX25BY3RpdmVCaW5kaW5ncyxcblxuXHRcdFx0bGFzdEFjdGl2ZUJpbmRpbmcgPSBiaW5kaW5nc1sgZmlyc3RJbmFjdGl2ZUluZGV4IF07XG5cblx0XHRiaW5kaW5nLl9jYWNoZUluZGV4ID0gZmlyc3RJbmFjdGl2ZUluZGV4O1xuXHRcdGJpbmRpbmdzWyBmaXJzdEluYWN0aXZlSW5kZXggXSA9IGJpbmRpbmc7XG5cblx0XHRsYXN0QWN0aXZlQmluZGluZy5fY2FjaGVJbmRleCA9IHByZXZJbmRleDtcblx0XHRiaW5kaW5nc1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlQmluZGluZztcblxuXHR9LFxuXG5cblx0Ly8gTWVtb3J5IG1hbmFnZW1lbnQgb2YgSW50ZXJwb2xhbnRzIGZvciB3ZWlnaHQgYW5kIHRpbWUgc2NhbGVcblxuXHRfbGVuZENvbnRyb2xJbnRlcnBvbGFudDogZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGludGVycG9sYW50cyA9IHRoaXMuX2NvbnRyb2xJbnRlcnBvbGFudHMsXG5cdFx0XHRsYXN0QWN0aXZlSW5kZXggPSB0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyArKyxcblx0XHRcdGludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBsYXN0QWN0aXZlSW5kZXggXTtcblxuXHRcdGlmICggaW50ZXJwb2xhbnQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aW50ZXJwb2xhbnQgPSBuZXcgTGluZWFySW50ZXJwb2xhbnQoXG5cdFx0XHRcdG5ldyBGbG9hdDMyQXJyYXkoIDIgKSwgbmV3IEZsb2F0MzJBcnJheSggMiApLFxuXHRcdFx0XHQxLCB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzUmVzdWx0QnVmZmVyICk7XG5cblx0XHRcdGludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IGxhc3RBY3RpdmVJbmRleDtcblx0XHRcdGludGVycG9sYW50c1sgbGFzdEFjdGl2ZUluZGV4IF0gPSBpbnRlcnBvbGFudDtcblxuXHRcdH1cblxuXHRcdHJldHVybiBpbnRlcnBvbGFudDtcblxuXHR9LFxuXG5cdF90YWtlQmFja0NvbnRyb2xJbnRlcnBvbGFudDogZnVuY3Rpb24gKCBpbnRlcnBvbGFudCApIHtcblxuXHRcdHZhciBpbnRlcnBvbGFudHMgPSB0aGlzLl9jb250cm9sSW50ZXJwb2xhbnRzLFxuXHRcdFx0cHJldkluZGV4ID0gaW50ZXJwb2xhbnQuX19jYWNoZUluZGV4LFxuXG5cdFx0XHRmaXJzdEluYWN0aXZlSW5kZXggPSAtLSB0aGlzLl9uQWN0aXZlQ29udHJvbEludGVycG9sYW50cyxcblxuXHRcdFx0bGFzdEFjdGl2ZUludGVycG9sYW50ID0gaW50ZXJwb2xhbnRzWyBmaXJzdEluYWN0aXZlSW5kZXggXTtcblxuXHRcdGludGVycG9sYW50Ll9fY2FjaGVJbmRleCA9IGZpcnN0SW5hY3RpdmVJbmRleDtcblx0XHRpbnRlcnBvbGFudHNbIGZpcnN0SW5hY3RpdmVJbmRleCBdID0gaW50ZXJwb2xhbnQ7XG5cblx0XHRsYXN0QWN0aXZlSW50ZXJwb2xhbnQuX19jYWNoZUluZGV4ID0gcHJldkluZGV4O1xuXHRcdGludGVycG9sYW50c1sgcHJldkluZGV4IF0gPSBsYXN0QWN0aXZlSW50ZXJwb2xhbnQ7XG5cblx0fSxcblxuXHRfY29udHJvbEludGVycG9sYW50c1Jlc3VsdEJ1ZmZlcjogbmV3IEZsb2F0MzJBcnJheSggMSApLFxuXG5cdC8vIHJldHVybiBhbiBhY3Rpb24gZm9yIGEgY2xpcCBvcHRpb25hbGx5IHVzaW5nIGEgY3VzdG9tIHJvb3QgdGFyZ2V0XG5cdC8vIG9iamVjdCAodGhpcyBtZXRob2QgYWxsb2NhdGVzIGEgbG90IG9mIGR5bmFtaWMgbWVtb3J5IGluIGNhc2UgYVxuXHQvLyBwcmV2aW91c2x5IHVua25vd24gY2xpcC9yb290IGNvbWJpbmF0aW9uIGlzIHNwZWNpZmllZClcblx0Y2xpcEFjdGlvbjogZnVuY3Rpb24gKCBjbGlwLCBvcHRpb25hbFJvb3QgKSB7XG5cblx0XHR2YXIgcm9vdCA9IG9wdGlvbmFsUm9vdCB8fCB0aGlzLl9yb290LFxuXHRcdFx0cm9vdFV1aWQgPSByb290LnV1aWQsXG5cblx0XHRcdGNsaXBPYmplY3QgPSB0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycgP1xuXHRcdFx0XHRBbmltYXRpb25DbGlwLmZpbmRCeU5hbWUoIHJvb3QsIGNsaXAgKSA6IGNsaXAsXG5cblx0XHRcdGNsaXBVdWlkID0gY2xpcE9iamVjdCAhPT0gbnVsbCA/IGNsaXBPYmplY3QudXVpZCA6IGNsaXAsXG5cblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXSxcblx0XHRcdHByb3RvdHlwZUFjdGlvbiA9IG51bGw7XG5cblx0XHRpZiAoIGFjdGlvbnNGb3JDbGlwICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHZhciBleGlzdGluZ0FjdGlvbiA9XG5cdFx0XHRcdFx0YWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGV4aXN0aW5nQWN0aW9uICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIGV4aXN0aW5nQWN0aW9uO1xuXG5cdFx0XHR9XG5cblx0XHRcdC8vIHdlIGtub3cgdGhlIGNsaXAsIHNvIHdlIGRvbid0IGhhdmUgdG8gcGFyc2UgYWxsXG5cdFx0XHQvLyB0aGUgYmluZGluZ3MgYWdhaW4gYnV0IGNhbiBqdXN0IGNvcHlcblx0XHRcdHByb3RvdHlwZUFjdGlvbiA9IGFjdGlvbnNGb3JDbGlwLmtub3duQWN0aW9uc1sgMCBdO1xuXG5cdFx0XHQvLyBhbHNvLCB0YWtlIHRoZSBjbGlwIGZyb20gdGhlIHByb3RvdHlwZSBhY3Rpb25cblx0XHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApXG5cdFx0XHRcdGNsaXBPYmplY3QgPSBwcm90b3R5cGVBY3Rpb24uX2NsaXA7XG5cblx0XHR9XG5cblx0XHQvLyBjbGlwIG11c3QgYmUga25vd24gd2hlbiBzcGVjaWZpZWQgdmlhIHN0cmluZ1xuXHRcdGlmICggY2xpcE9iamVjdCA9PT0gbnVsbCApIHJldHVybiBudWxsO1xuXG5cdFx0Ly8gYWxsb2NhdGUgYWxsIHJlc291cmNlcyByZXF1aXJlZCB0byBydW4gaXRcblx0XHR2YXIgbmV3QWN0aW9uID0gbmV3IEFuaW1hdGlvbkFjdGlvbiggdGhpcywgY2xpcE9iamVjdCwgb3B0aW9uYWxSb290ICk7XG5cblx0XHR0aGlzLl9iaW5kQWN0aW9uKCBuZXdBY3Rpb24sIHByb3RvdHlwZUFjdGlvbiApO1xuXG5cdFx0Ly8gYW5kIG1ha2UgdGhlIGFjdGlvbiBrbm93biB0byB0aGUgbWVtb3J5IG1hbmFnZXJcblx0XHR0aGlzLl9hZGRJbmFjdGl2ZUFjdGlvbiggbmV3QWN0aW9uLCBjbGlwVXVpZCwgcm9vdFV1aWQgKTtcblxuXHRcdHJldHVybiBuZXdBY3Rpb247XG5cblx0fSxcblxuXHQvLyBnZXQgYW4gZXhpc3RpbmcgYWN0aW9uXG5cdGV4aXN0aW5nQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciByb290ID0gb3B0aW9uYWxSb290IHx8IHRoaXMuX3Jvb3QsXG5cdFx0XHRyb290VXVpZCA9IHJvb3QudXVpZCxcblxuXHRcdFx0Y2xpcE9iamVjdCA9IHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJyA/XG5cdFx0XHRcdEFuaW1hdGlvbkNsaXAuZmluZEJ5TmFtZSggcm9vdCwgY2xpcCApIDogY2xpcCxcblxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwT2JqZWN0ID8gY2xpcE9iamVjdC51dWlkIDogY2xpcCxcblxuXHRcdFx0YWN0aW9uc0ZvckNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0aWYgKCBhY3Rpb25zRm9yQ2xpcCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRyZXR1cm4gYWN0aW9uc0ZvckNsaXAuYWN0aW9uQnlSb290WyByb290VXVpZCBdIHx8IG51bGw7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gbnVsbDtcblxuXHR9LFxuXG5cdC8vIGRlYWN0aXZhdGVzIGFsbCBwcmV2aW91c2x5IHNjaGVkdWxlZCBhY3Rpb25zXG5cdHN0b3BBbGxBY3Rpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cdFx0XHRiaW5kaW5ncyA9IHRoaXMuX2JpbmRpbmdzLFxuXHRcdFx0bkJpbmRpbmdzID0gdGhpcy5fbkFjdGl2ZUJpbmRpbmdzO1xuXG5cdFx0dGhpcy5fbkFjdGl2ZUFjdGlvbnMgPSAwO1xuXHRcdHRoaXMuX25BY3RpdmVCaW5kaW5ncyA9IDA7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArKyBpICkge1xuXG5cdFx0XHRhY3Rpb25zWyBpIF0ucmVzZXQoKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMDsgaSAhPT0gbkJpbmRpbmdzOyArKyBpICkge1xuXG5cdFx0XHRiaW5kaW5nc1sgaSBdLnVzZUNvdW50ID0gMDtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Ly8gYWR2YW5jZSB0aGUgdGltZSBhbmQgdXBkYXRlIGFwcGx5IHRoZSBhbmltYXRpb25cblx0dXBkYXRlOiBmdW5jdGlvbiAoIGRlbHRhVGltZSApIHtcblxuXHRcdGRlbHRhVGltZSAqPSB0aGlzLnRpbWVTY2FsZTtcblxuXHRcdHZhciBhY3Rpb25zID0gdGhpcy5fYWN0aW9ucyxcblx0XHRcdG5BY3Rpb25zID0gdGhpcy5fbkFjdGl2ZUFjdGlvbnMsXG5cblx0XHRcdHRpbWUgPSB0aGlzLnRpbWUgKz0gZGVsdGFUaW1lLFxuXHRcdFx0dGltZURpcmVjdGlvbiA9IE1hdGguc2lnbiggZGVsdGFUaW1lICksXG5cblx0XHRcdGFjY3VJbmRleCA9IHRoaXMuX2FjY3VJbmRleCBePSAxO1xuXG5cdFx0Ly8gcnVuIGFjdGl2ZSBhY3Rpb25zXG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5BY3Rpb25zOyArKyBpICkge1xuXG5cdFx0XHR2YXIgYWN0aW9uID0gYWN0aW9uc1sgaSBdO1xuXG5cdFx0XHRhY3Rpb24uX3VwZGF0ZSggdGltZSwgZGVsdGFUaW1lLCB0aW1lRGlyZWN0aW9uLCBhY2N1SW5kZXggKTtcblxuXHRcdH1cblxuXHRcdC8vIHVwZGF0ZSBzY2VuZSBncmFwaFxuXG5cdFx0dmFyIGJpbmRpbmdzID0gdGhpcy5fYmluZGluZ3MsXG5cdFx0XHRuQmluZGluZ3MgPSB0aGlzLl9uQWN0aXZlQmluZGluZ3M7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgIT09IG5CaW5kaW5nczsgKysgaSApIHtcblxuXHRcdFx0YmluZGluZ3NbIGkgXS5hcHBseSggYWNjdUluZGV4ICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdC8vIEFsbG93cyB5b3UgdG8gc2VlayB0byBhIHNwZWNpZmljIHRpbWUgaW4gYW4gYW5pbWF0aW9uLlxuXHRzZXRUaW1lOiBmdW5jdGlvbiAoIHRpbWVJblNlY29uZHMgKSB7XG5cblx0XHR0aGlzLnRpbWUgPSAwOyAvLyBaZXJvIG91dCB0aW1lIGF0dHJpYnV0ZSBmb3IgQW5pbWF0aW9uTWl4ZXIgb2JqZWN0O1xuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IHRoaXMuX2FjdGlvbnMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0XHR0aGlzLl9hY3Rpb25zWyBpIF0udGltZSA9IDA7IC8vIFplcm8gb3V0IHRpbWUgYXR0cmlidXRlIGZvciBhbGwgYXNzb2NpYXRlZCBBbmltYXRpb25BY3Rpb24gb2JqZWN0cy5cblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnVwZGF0ZSggdGltZUluU2Vjb25kcyApOyAvLyBVcGRhdGUgdXNlZCB0byBzZXQgZXhhY3QgdGltZS4gUmV0dXJucyBcInRoaXNcIiBBbmltYXRpb25NaXhlciBvYmplY3QuXG5cblx0fSxcblxuXHQvLyByZXR1cm4gdGhpcyBtaXhlcidzIHJvb3QgdGFyZ2V0IG9iamVjdFxuXHRnZXRSb290OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gdGhpcy5fcm9vdDtcblxuXHR9LFxuXG5cdC8vIGZyZWUgYWxsIHJlc291cmNlcyBzcGVjaWZpYyB0byBhIHBhcnRpY3VsYXIgY2xpcFxuXHR1bmNhY2hlQ2xpcDogZnVuY3Rpb24gKCBjbGlwICkge1xuXG5cdFx0dmFyIGFjdGlvbnMgPSB0aGlzLl9hY3Rpb25zLFxuXHRcdFx0Y2xpcFV1aWQgPSBjbGlwLnV1aWQsXG5cdFx0XHRhY3Rpb25zQnlDbGlwID0gdGhpcy5fYWN0aW9uc0J5Q2xpcCxcblx0XHRcdGFjdGlvbnNGb3JDbGlwID0gYWN0aW9uc0J5Q2xpcFsgY2xpcFV1aWQgXTtcblxuXHRcdGlmICggYWN0aW9uc0ZvckNsaXAgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gbm90ZToganVzdCBjYWxsaW5nIF9yZW1vdmVJbmFjdGl2ZUFjdGlvbiB3b3VsZCBtZXNzIHVwIHRoZVxuXHRcdFx0Ly8gaXRlcmF0aW9uIHN0YXRlIGFuZCBhbHNvIHJlcXVpcmUgdXBkYXRpbmcgdGhlIHN0YXRlIHdlIGNhblxuXHRcdFx0Ly8ganVzdCB0aHJvdyBhd2F5XG5cblx0XHRcdHZhciBhY3Rpb25zVG9SZW1vdmUgPSBhY3Rpb25zRm9yQ2xpcC5rbm93bkFjdGlvbnM7XG5cblx0XHRcdGZvciAoIHZhciBpID0gMCwgbiA9IGFjdGlvbnNUb1JlbW92ZS5sZW5ndGg7IGkgIT09IG47ICsrIGkgKSB7XG5cblx0XHRcdFx0dmFyIGFjdGlvbiA9IGFjdGlvbnNUb1JlbW92ZVsgaSBdO1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHRcdHZhciBjYWNoZUluZGV4ID0gYWN0aW9uLl9jYWNoZUluZGV4LFxuXHRcdFx0XHRcdGxhc3RJbmFjdGl2ZUFjdGlvbiA9IGFjdGlvbnNbIGFjdGlvbnMubGVuZ3RoIC0gMSBdO1xuXG5cdFx0XHRcdGFjdGlvbi5fY2FjaGVJbmRleCA9IG51bGw7XG5cdFx0XHRcdGFjdGlvbi5fYnlDbGlwQ2FjaGVJbmRleCA9IG51bGw7XG5cblx0XHRcdFx0bGFzdEluYWN0aXZlQWN0aW9uLl9jYWNoZUluZGV4ID0gY2FjaGVJbmRleDtcblx0XHRcdFx0YWN0aW9uc1sgY2FjaGVJbmRleCBdID0gbGFzdEluYWN0aXZlQWN0aW9uO1xuXHRcdFx0XHRhY3Rpb25zLnBvcCgpO1xuXG5cdFx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQmluZGluZ3NGb3JBY3Rpb24oIGFjdGlvbiApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRlbGV0ZSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdO1xuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gZnJlZSBhbGwgcmVzb3VyY2VzIHNwZWNpZmljIHRvIGEgcGFydGljdWxhciByb290IHRhcmdldCBvYmplY3Rcblx0dW5jYWNoZVJvb3Q6IGZ1bmN0aW9uICggcm9vdCApIHtcblxuXHRcdHZhciByb290VXVpZCA9IHJvb3QudXVpZCxcblx0XHRcdGFjdGlvbnNCeUNsaXAgPSB0aGlzLl9hY3Rpb25zQnlDbGlwO1xuXG5cdFx0Zm9yICggdmFyIGNsaXBVdWlkIGluIGFjdGlvbnNCeUNsaXAgKSB7XG5cblx0XHRcdHZhciBhY3Rpb25CeVJvb3QgPSBhY3Rpb25zQnlDbGlwWyBjbGlwVXVpZCBdLmFjdGlvbkJ5Um9vdCxcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uQnlSb290WyByb290VXVpZCBdO1xuXG5cdFx0XHRpZiAoIGFjdGlvbiAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHRoaXMuX2RlYWN0aXZhdGVBY3Rpb24oIGFjdGlvbiApO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUFjdGlvbiggYWN0aW9uICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdHZhciBiaW5kaW5nc0J5Um9vdCA9IHRoaXMuX2JpbmRpbmdzQnlSb290QW5kTmFtZSxcblx0XHRcdGJpbmRpbmdCeU5hbWUgPSBiaW5kaW5nc0J5Um9vdFsgcm9vdFV1aWQgXTtcblxuXHRcdGlmICggYmluZGluZ0J5TmFtZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRmb3IgKCB2YXIgdHJhY2tOYW1lIGluIGJpbmRpbmdCeU5hbWUgKSB7XG5cblx0XHRcdFx0dmFyIGJpbmRpbmcgPSBiaW5kaW5nQnlOYW1lWyB0cmFja05hbWUgXTtcblx0XHRcdFx0YmluZGluZy5yZXN0b3JlT3JpZ2luYWxTdGF0ZSgpO1xuXHRcdFx0XHR0aGlzLl9yZW1vdmVJbmFjdGl2ZUJpbmRpbmcoIGJpbmRpbmcgKTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gcmVtb3ZlIGEgdGFyZ2V0ZWQgY2xpcCBmcm9tIHRoZSBjYWNoZVxuXHR1bmNhY2hlQWN0aW9uOiBmdW5jdGlvbiAoIGNsaXAsIG9wdGlvbmFsUm9vdCApIHtcblxuXHRcdHZhciBhY3Rpb24gPSB0aGlzLmV4aXN0aW5nQWN0aW9uKCBjbGlwLCBvcHRpb25hbFJvb3QgKTtcblxuXHRcdGlmICggYWN0aW9uICE9PSBudWxsICkge1xuXG5cdFx0XHR0aGlzLl9kZWFjdGl2YXRlQWN0aW9uKCBhY3Rpb24gKTtcblx0XHRcdHRoaXMuX3JlbW92ZUluYWN0aXZlQWN0aW9uKCBhY3Rpb24gKTtcblxuXHRcdH1cblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICovXG5cbmZ1bmN0aW9uIFVuaWZvcm0oIHZhbHVlICkge1xuXG5cdGlmICggdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlVuaWZvcm06IFR5cGUgcGFyYW1ldGVyIGlzIG5vIGxvbmdlciBuZWVkZWQuJyApO1xuXHRcdHZhbHVlID0gYXJndW1lbnRzWyAxIF07XG5cblx0fVxuXG5cdHRoaXMudmFsdWUgPSB2YWx1ZTtcblxufVxuXG5Vbmlmb3JtLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRyZXR1cm4gbmV3IFVuaWZvcm0oIHRoaXMudmFsdWUuY2xvbmUgPT09IHVuZGVmaW5lZCA/IHRoaXMudmFsdWUgOiB0aGlzLnZhbHVlLmNsb25lKCkgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGJlbmFhZGFtcyAvIGh0dHBzOi8vdHdpdHRlci5jb20vYmVuX2FfYWRhbXNcbiAqL1xuXG5mdW5jdGlvbiBJbnN0YW5jZWRJbnRlcmxlYXZlZEJ1ZmZlciggYXJyYXksIHN0cmlkZSwgbWVzaFBlckF0dHJpYnV0ZSApIHtcblxuXHRJbnRlcmxlYXZlZEJ1ZmZlci5jYWxsKCB0aGlzLCBhcnJheSwgc3RyaWRlICk7XG5cblx0dGhpcy5tZXNoUGVyQXR0cmlidXRlID0gbWVzaFBlckF0dHJpYnV0ZSB8fCAxO1xuXG59XG5cbkluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24oIE9iamVjdC5jcmVhdGUoIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSApLCB7XG5cblx0Y29uc3RydWN0b3I6IEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLFxuXG5cdGlzSW5zdGFuY2VkSW50ZXJsZWF2ZWRCdWZmZXI6IHRydWUsXG5cblx0Y29weTogZnVuY3Rpb24gKCBzb3VyY2UgKSB7XG5cblx0XHRJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMubWVzaFBlckF0dHJpYnV0ZSA9IHNvdXJjZS5tZXNoUGVyQXR0cmlidXRlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgYmhvdXN0b24gLyBodHRwOi8vY2xhcmEuaW8vXG4gKiBAYXV0aG9yIHN0ZXBob21pIC8gaHR0cDovL3N0ZXBoYW5lZ2luaWVyLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBSYXljYXN0ZXIoIG9yaWdpbiwgZGlyZWN0aW9uLCBuZWFyLCBmYXIgKSB7XG5cblx0dGhpcy5yYXkgPSBuZXcgUmF5KCBvcmlnaW4sIGRpcmVjdGlvbiApO1xuXHQvLyBkaXJlY3Rpb24gaXMgYXNzdW1lZCB0byBiZSBub3JtYWxpemVkIChmb3IgYWNjdXJhdGUgZGlzdGFuY2UgY2FsY3VsYXRpb25zKVxuXG5cdHRoaXMubmVhciA9IG5lYXIgfHwgMDtcblx0dGhpcy5mYXIgPSBmYXIgfHwgSW5maW5pdHk7XG5cdHRoaXMuY2FtZXJhID0gbnVsbDtcblx0dGhpcy5sYXllcnMgPSBuZXcgTGF5ZXJzKCk7XG5cblx0dGhpcy5wYXJhbXMgPSB7XG5cdFx0TWVzaDoge30sXG5cdFx0TGluZTogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRMT0Q6IHt9LFxuXHRcdFBvaW50czogeyB0aHJlc2hvbGQ6IDEgfSxcblx0XHRTcHJpdGU6IHt9XG5cdH07XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIHRoaXMucGFyYW1zLCB7XG5cdFx0UG9pbnRDbG91ZDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5Y2FzdGVyOiBwYXJhbXMuUG9pbnRDbG91ZCBoYXMgYmVlbiByZW5hbWVkIHRvIHBhcmFtcy5Qb2ludHMuJyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Qb2ludHM7XG5cblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcblxufVxuXG5mdW5jdGlvbiBhc2NTb3J0KCBhLCBiICkge1xuXG5cdHJldHVybiBhLmRpc3RhbmNlIC0gYi5kaXN0YW5jZTtcblxufVxuXG5mdW5jdGlvbiBpbnRlcnNlY3RPYmplY3QoIG9iamVjdCwgcmF5Y2FzdGVyLCBpbnRlcnNlY3RzLCByZWN1cnNpdmUgKSB7XG5cblx0aWYgKCBvYmplY3QubGF5ZXJzLnRlc3QoIHJheWNhc3Rlci5sYXllcnMgKSApIHtcblxuXHRcdG9iamVjdC5yYXljYXN0KCByYXljYXN0ZXIsIGludGVyc2VjdHMgKTtcblxuXHR9XG5cblx0aWYgKCByZWN1cnNpdmUgPT09IHRydWUgKSB7XG5cblx0XHR2YXIgY2hpbGRyZW4gPSBvYmplY3QuY2hpbGRyZW47XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRpbnRlcnNlY3RPYmplY3QoIGNoaWxkcmVuWyBpIF0sIHJheWNhc3RlciwgaW50ZXJzZWN0cywgdHJ1ZSApO1xuXG5cdFx0fVxuXG5cdH1cblxufVxuXG5PYmplY3QuYXNzaWduKCBSYXljYXN0ZXIucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG9yaWdpbiwgZGlyZWN0aW9uICkge1xuXG5cdFx0Ly8gZGlyZWN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZCAoZm9yIGFjY3VyYXRlIGRpc3RhbmNlIGNhbGN1bGF0aW9ucylcblxuXHRcdHRoaXMucmF5LnNldCggb3JpZ2luLCBkaXJlY3Rpb24gKTtcblxuXHR9LFxuXG5cdHNldEZyb21DYW1lcmE6IGZ1bmN0aW9uICggY29vcmRzLCBjYW1lcmEgKSB7XG5cblx0XHRpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkgKSB7XG5cblx0XHRcdHRoaXMucmF5Lm9yaWdpbi5zZXRGcm9tTWF0cml4UG9zaXRpb24oIGNhbWVyYS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0dGhpcy5yYXkuZGlyZWN0aW9uLnNldCggY29vcmRzLngsIGNvb3Jkcy55LCAwLjUgKS51bnByb2plY3QoIGNhbWVyYSApLnN1YiggdGhpcy5yYXkub3JpZ2luICkubm9ybWFsaXplKCk7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSBpZiAoICggY2FtZXJhICYmIGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSApICkge1xuXG5cdFx0XHR0aGlzLnJheS5vcmlnaW4uc2V0KCBjb29yZHMueCwgY29vcmRzLnksICggY2FtZXJhLm5lYXIgKyBjYW1lcmEuZmFyICkgLyAoIGNhbWVyYS5uZWFyIC0gY2FtZXJhLmZhciApICkudW5wcm9qZWN0KCBjYW1lcmEgKTsgLy8gc2V0IG9yaWdpbiBpbiBwbGFuZSBvZiBjYW1lcmFcblx0XHRcdHRoaXMucmF5LmRpcmVjdGlvbi5zZXQoIDAsIDAsIC0gMSApLnRyYW5zZm9ybURpcmVjdGlvbiggY2FtZXJhLm1hdHJpeFdvcmxkICk7XG5cdFx0XHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5SYXljYXN0ZXI6IFVuc3VwcG9ydGVkIGNhbWVyYSB0eXBlLicgKTtcblxuXHRcdH1cblxuXHR9LFxuXG5cdGludGVyc2VjdE9iamVjdDogZnVuY3Rpb24gKCBvYmplY3QsIHJlY3Vyc2l2ZSwgb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHR2YXIgaW50ZXJzZWN0cyA9IG9wdGlvbmFsVGFyZ2V0IHx8IFtdO1xuXG5cdFx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3QsIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9LFxuXG5cdGludGVyc2VjdE9iamVjdHM6IGZ1bmN0aW9uICggb2JqZWN0cywgcmVjdXJzaXZlLCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdHZhciBpbnRlcnNlY3RzID0gb3B0aW9uYWxUYXJnZXQgfHwgW107XG5cblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iamVjdHMgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzOiBvYmplY3RzIGlzIG5vdCBhbiBBcnJheS4nICk7XG5cdFx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG9iamVjdHMubGVuZ3RoOyBpIDwgbDsgaSArKyApIHtcblxuXHRcdFx0aW50ZXJzZWN0T2JqZWN0KCBvYmplY3RzWyBpIF0sIHRoaXMsIGludGVyc2VjdHMsIHJlY3Vyc2l2ZSApO1xuXG5cdFx0fVxuXG5cdFx0aW50ZXJzZWN0cy5zb3J0KCBhc2NTb3J0ICk7XG5cblx0XHRyZXR1cm4gaW50ZXJzZWN0cztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKiBAYXV0aG9yIFdlc3RMYW5nbGV5IC8gaHR0cDovL2dpdGh1Yi5jb20vV2VzdExhbmdsZXlcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NwaGVyaWNhbF9jb29yZGluYXRlX3N5c3RlbVxuICpcbiAqIFRoZSBwb2xhciBhbmdsZSAocGhpKSBpcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB5LWF4aXMuIFRoZSBwb3NpdGl2ZSB5LWF4aXMgaXMgdXAuXG4gKiBUaGUgYXppbXV0aGFsIGFuZ2xlICh0aGV0YSkgaXMgbWVhc3VyZWQgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzLlxuICovXG5cbmZ1bmN0aW9uIFNwaGVyaWNhbCggcmFkaXVzLCBwaGksIHRoZXRhICkge1xuXG5cdHRoaXMucmFkaXVzID0gKCByYWRpdXMgIT09IHVuZGVmaW5lZCApID8gcmFkaXVzIDogMS4wO1xuXHR0aGlzLnBoaSA9ICggcGhpICE9PSB1bmRlZmluZWQgKSA/IHBoaSA6IDA7IC8vIHBvbGFyIGFuZ2xlXG5cdHRoaXMudGhldGEgPSAoIHRoZXRhICE9PSB1bmRlZmluZWQgKSA/IHRoZXRhIDogMDsgLy8gYXppbXV0aGFsIGFuZ2xlXG5cblx0cmV0dXJuIHRoaXM7XG5cbn1cblxuT2JqZWN0LmFzc2lnbiggU3BoZXJpY2FsLnByb3RvdHlwZSwge1xuXG5cdHNldDogZnVuY3Rpb24gKCByYWRpdXMsIHBoaSwgdGhldGEgKSB7XG5cblx0XHR0aGlzLnJhZGl1cyA9IHJhZGl1cztcblx0XHR0aGlzLnBoaSA9IHBoaTtcblx0XHR0aGlzLnRoZXRhID0gdGhldGE7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cblx0fSxcblxuXHRjb3B5OiBmdW5jdGlvbiAoIG90aGVyICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBvdGhlci5yYWRpdXM7XG5cdFx0dGhpcy5waGkgPSBvdGhlci5waGk7XG5cdFx0dGhpcy50aGV0YSA9IG90aGVyLnRoZXRhO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlIEVQUyBhbmQgUEktRVBTXG5cdG1ha2VTYWZlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHR2YXIgRVBTID0gMC4wMDAwMDE7XG5cdFx0dGhpcy5waGkgPSBNYXRoLm1heCggRVBTLCBNYXRoLm1pbiggTWF0aC5QSSAtIEVQUywgdGhpcy5waGkgKSApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeSAqIHkgKyB6ICogeiApO1xuXG5cdFx0aWYgKCB0aGlzLnJhZGl1cyA9PT0gMCApIHtcblxuXHRcdFx0dGhpcy50aGV0YSA9IDA7XG5cdFx0XHR0aGlzLnBoaSA9IDA7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdFx0dGhpcy5waGkgPSBNYXRoLmFjb3MoIE1hdGhVdGlscy5jbGFtcCggeSAvIHRoaXMucmFkaXVzLCAtIDEsIDEgKSApO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cHM6Ly9naXRodWIuY29tL011Z2VuODdcbiAqXG4gKiBSZWY6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0N5bGluZHJpY2FsX2Nvb3JkaW5hdGVfc3lzdGVtXG4gKlxuICovXG5cbmZ1bmN0aW9uIEN5bGluZHJpY2FsKCByYWRpdXMsIHRoZXRhLCB5ICkge1xuXG5cdHRoaXMucmFkaXVzID0gKCByYWRpdXMgIT09IHVuZGVmaW5lZCApID8gcmFkaXVzIDogMS4wOyAvLyBkaXN0YW5jZSBmcm9tIHRoZSBvcmlnaW4gdG8gYSBwb2ludCBpbiB0aGUgeC16IHBsYW5lXG5cdHRoaXMudGhldGEgPSAoIHRoZXRhICE9PSB1bmRlZmluZWQgKSA/IHRoZXRhIDogMDsgLy8gY291bnRlcmNsb2Nrd2lzZSBhbmdsZSBpbiB0aGUgeC16IHBsYW5lIG1lYXN1cmVkIGluIHJhZGlhbnMgZnJvbSB0aGUgcG9zaXRpdmUgei1heGlzXG5cdHRoaXMueSA9ICggeSAhPT0gdW5kZWZpbmVkICkgPyB5IDogMDsgLy8gaGVpZ2h0IGFib3ZlIHRoZSB4LXogcGxhbmVcblxuXHRyZXR1cm4gdGhpcztcblxufVxuXG5PYmplY3QuYXNzaWduKCBDeWxpbmRyaWNhbC5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggcmFkaXVzLCB0aGV0YSwgeSApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gcmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSB0aGV0YTtcblx0XHR0aGlzLnkgPSB5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG5cdH0sXG5cblx0Y29weTogZnVuY3Rpb24gKCBvdGhlciApIHtcblxuXHRcdHRoaXMucmFkaXVzID0gb3RoZXIucmFkaXVzO1xuXHRcdHRoaXMudGhldGEgPSBvdGhlci50aGV0YTtcblx0XHR0aGlzLnkgPSBvdGhlci55O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRzZXRGcm9tVmVjdG9yMzogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbUNhcnRlc2lhbkNvb3Jkcyggdi54LCB2LnksIHYueiApO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNhcnRlc2lhbkNvb3JkczogZnVuY3Rpb24gKCB4LCB5LCB6ICkge1xuXG5cdFx0dGhpcy5yYWRpdXMgPSBNYXRoLnNxcnQoIHggKiB4ICsgeiAqIHogKTtcblx0XHR0aGlzLnRoZXRhID0gTWF0aC5hdGFuMiggeCwgeiApO1xuXHRcdHRoaXMueSA9IHk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKi9cblxudmFyIF92ZWN0b3IkNyA9IG5ldyBWZWN0b3IyKCk7XG5cbmZ1bmN0aW9uIEJveDIoIG1pbiwgbWF4ICkge1xuXG5cdHRoaXMubWluID0gKCBtaW4gIT09IHVuZGVmaW5lZCApID8gbWluIDogbmV3IFZlY3RvcjIoICsgSW5maW5pdHksICsgSW5maW5pdHkgKTtcblx0dGhpcy5tYXggPSAoIG1heCAhPT0gdW5kZWZpbmVkICkgPyBtYXggOiBuZXcgVmVjdG9yMiggLSBJbmZpbml0eSwgLSBJbmZpbml0eSApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIEJveDIucHJvdG90eXBlLCB7XG5cblx0c2V0OiBmdW5jdGlvbiAoIG1pbiwgbWF4ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggbWluICk7XG5cdFx0dGhpcy5tYXguY29weSggbWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHNldEZyb21Qb2ludHM6IGZ1bmN0aW9uICggcG9pbnRzICkge1xuXG5cdFx0dGhpcy5tYWtlRW1wdHkoKTtcblxuXHRcdGZvciAoIHZhciBpID0gMCwgaWwgPSBwb2ludHMubGVuZ3RoOyBpIDwgaWw7IGkgKysgKSB7XG5cblx0XHRcdHRoaXMuZXhwYW5kQnlQb2ludCggcG9pbnRzWyBpIF0gKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0c2V0RnJvbUNlbnRlckFuZFNpemU6IGZ1bmN0aW9uICggY2VudGVyLCBzaXplICkge1xuXG5cdFx0dmFyIGhhbGZTaXplID0gX3ZlY3RvciQ3LmNvcHkoIHNpemUgKS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cdFx0dGhpcy5taW4uY29weSggY2VudGVyICkuc3ViKCBoYWxmU2l6ZSApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGNlbnRlciApLmFkZCggaGFsZlNpemUgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4uY29weSggYm94Lm1pbiApO1xuXHRcdHRoaXMubWF4LmNvcHkoIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0bWFrZUVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHR0aGlzLm1pbi54ID0gdGhpcy5taW4ueSA9ICsgSW5maW5pdHk7XG5cdFx0dGhpcy5tYXgueCA9IHRoaXMubWF4LnkgPSAtIEluZmluaXR5O1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRpc0VtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHQvLyB0aGlzIGlzIGEgbW9yZSByb2J1c3QgY2hlY2sgZm9yIGVtcHR5IHRoYW4gKCB2b2x1bWUgPD0gMCApIGJlY2F1c2Ugdm9sdW1lIGNhbiBnZXQgcG9zaXRpdmUgd2l0aCB0d28gbmVnYXRpdmUgYXhlc1xuXG5cdFx0cmV0dXJuICggdGhpcy5tYXgueCA8IHRoaXMubWluLnggKSB8fCAoIHRoaXMubWF4LnkgPCB0aGlzLm1pbi55ICk7XG5cblx0fSxcblxuXHRnZXRDZW50ZXI6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMigpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuaXNFbXB0eSgpID8gdGFyZ2V0LnNldCggMCwgMCApIDogdGFyZ2V0LmFkZFZlY3RvcnMoIHRoaXMubWluLCB0aGlzLm1heCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9LFxuXG5cdGdldFNpemU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0aWYgKCB0YXJnZXQgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmdldFNpemUoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKSA/IHRhcmdldC5zZXQoIDAsIDAgKSA6IHRhcmdldC5zdWJWZWN0b3JzKCB0aGlzLm1heCwgdGhpcy5taW4gKTtcblxuXHR9LFxuXG5cdGV4cGFuZEJ5UG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQgKSB7XG5cblx0XHR0aGlzLm1pbi5taW4oIHBvaW50ICk7XG5cdFx0dGhpcy5tYXgubWF4KCBwb2ludCApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRleHBhbmRCeVZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHR0aGlzLm1pbi5zdWIoIHZlY3RvciApO1xuXHRcdHRoaXMubWF4LmFkZCggdmVjdG9yICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGV4cGFuZEJ5U2NhbGFyOiBmdW5jdGlvbiAoIHNjYWxhciApIHtcblxuXHRcdHRoaXMubWluLmFkZFNjYWxhciggLSBzY2FsYXIgKTtcblx0XHR0aGlzLm1heC5hZGRTY2FsYXIoIHNjYWxhciApO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cblx0fSxcblxuXHRjb250YWluc1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0cmV0dXJuIHBvaW50LnggPCB0aGlzLm1pbi54IHx8IHBvaW50LnggPiB0aGlzLm1heC54IHx8XG5cdFx0XHRwb2ludC55IDwgdGhpcy5taW4ueSB8fCBwb2ludC55ID4gdGhpcy5tYXgueSA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9LFxuXG5cdGNvbnRhaW5zQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdHJldHVybiB0aGlzLm1pbi54IDw9IGJveC5taW4ueCAmJiBib3gubWF4LnggPD0gdGhpcy5tYXgueCAmJlxuXHRcdFx0dGhpcy5taW4ueSA8PSBib3gubWluLnkgJiYgYm94Lm1heC55IDw9IHRoaXMubWF4Lnk7XG5cblx0fSxcblxuXHRnZXRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdC8vIFRoaXMgY2FuIHBvdGVudGlhbGx5IGhhdmUgYSBkaXZpZGUgYnkgemVybyBpZiB0aGUgYm94XG5cdFx0Ly8gaGFzIGEgc2l6ZSBkaW1lbnNpb24gb2YgMC5cblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5nZXRQYXJhbWV0ZXIoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjIoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc2V0KFxuXHRcdFx0KCBwb2ludC54IC0gdGhpcy5taW4ueCApIC8gKCB0aGlzLm1heC54IC0gdGhpcy5taW4ueCApLFxuXHRcdFx0KCBwb2ludC55IC0gdGhpcy5taW4ueSApIC8gKCB0aGlzLm1heC55IC0gdGhpcy5taW4ueSApXG5cdFx0KTtcblxuXHR9LFxuXG5cdGludGVyc2VjdHNCb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Ly8gdXNpbmcgNCBzcGxpdHRpbmcgcGxhbmVzIHRvIHJ1bGUgb3V0IGludGVyc2VjdGlvbnNcblxuXHRcdHJldHVybiBib3gubWF4LnggPCB0aGlzLm1pbi54IHx8IGJveC5taW4ueCA+IHRoaXMubWF4LnggfHxcblx0XHRcdGJveC5tYXgueSA8IHRoaXMubWluLnkgfHwgYm94Lm1pbi55ID4gdGhpcy5tYXgueSA/IGZhbHNlIDogdHJ1ZTtcblxuXHR9LFxuXG5cdGNsYW1wUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDI6IC5jbGFtcFBvaW50KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IyKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0LmNvcHkoIHBvaW50ICkuY2xhbXAoIHRoaXMubWluLCB0aGlzLm1heCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2VUb1BvaW50OiBmdW5jdGlvbiAoIHBvaW50ICkge1xuXG5cdFx0dmFyIGNsYW1wZWRQb2ludCA9IF92ZWN0b3IkNy5jb3B5KCBwb2ludCApLmNsYW1wKCB0aGlzLm1pbiwgdGhpcy5tYXggKTtcblx0XHRyZXR1cm4gY2xhbXBlZFBvaW50LnN1YiggcG9pbnQgKS5sZW5ndGgoKTtcblxuXHR9LFxuXG5cdGludGVyc2VjdDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHR0aGlzLm1pbi5tYXgoIGJveC5taW4gKTtcblx0XHR0aGlzLm1heC5taW4oIGJveC5tYXggKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0dW5pb246IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0dGhpcy5taW4ubWluKCBib3gubWluICk7XG5cdFx0dGhpcy5tYXgubWF4KCBib3gubWF4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdHRyYW5zbGF0ZTogZnVuY3Rpb24gKCBvZmZzZXQgKSB7XG5cblx0XHR0aGlzLm1pbi5hZGQoIG9mZnNldCApO1xuXHRcdHRoaXMubWF4LmFkZCggb2Zmc2V0ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRyZXR1cm4gYm94Lm1pbi5lcXVhbHMoIHRoaXMubWluICkgJiYgYm94Lm1heC5lcXVhbHMoIHRoaXMubWF4ICk7XG5cblx0fVxuXG59ICk7XG5cbi8qKlxuICogQGF1dGhvciBiaG91c3RvbiAvIGh0dHA6Ly9jbGFyYS5pb1xuICovXG5cbnZhciBfc3RhcnRQID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfc3RhcnRFbmQgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBMaW5lMyggc3RhcnQsIGVuZCApIHtcblxuXHR0aGlzLnN0YXJ0ID0gKCBzdGFydCAhPT0gdW5kZWZpbmVkICkgPyBzdGFydCA6IG5ldyBWZWN0b3IzKCk7XG5cdHRoaXMuZW5kID0gKCBlbmQgIT09IHVuZGVmaW5lZCApID8gZW5kIDogbmV3IFZlY3RvcjMoKTtcblxufVxuXG5PYmplY3QuYXNzaWduKCBMaW5lMy5wcm90b3R5cGUsIHtcblxuXHRzZXQ6IGZ1bmN0aW9uICggc3RhcnQsIGVuZCApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggc3RhcnQgKTtcblx0XHR0aGlzLmVuZC5jb3B5KCBlbmQgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9LFxuXG5cdGNvcHk6IGZ1bmN0aW9uICggbGluZSApIHtcblxuXHRcdHRoaXMuc3RhcnQuY29weSggbGluZS5zdGFydCApO1xuXHRcdHRoaXMuZW5kLmNvcHkoIGxpbmUuZW5kICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGdldENlbnRlcjogZnVuY3Rpb24gKCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmdldENlbnRlcigpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldC5hZGRWZWN0b3JzKCB0aGlzLnN0YXJ0LCB0aGlzLmVuZCApLm11bHRpcGx5U2NhbGFyKCAwLjUgKTtcblxuXHR9LFxuXG5cdGRlbHRhOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuZGVsdGEoKSB0YXJnZXQgaXMgbm93IHJlcXVpcmVkJyApO1xuXHRcdFx0dGFyZ2V0ID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0YXJnZXQuc3ViVmVjdG9ycyggdGhpcy5lbmQsIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGRpc3RhbmNlU3E6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG9TcXVhcmVkKCB0aGlzLmVuZCApO1xuXG5cdH0sXG5cblx0ZGlzdGFuY2U6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiB0aGlzLnN0YXJ0LmRpc3RhbmNlVG8oIHRoaXMuZW5kICk7XG5cblx0fSxcblxuXHRhdDogZnVuY3Rpb24gKCB0LCB0YXJnZXQgKSB7XG5cblx0XHRpZiAoIHRhcmdldCA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmF0KCkgdGFyZ2V0IGlzIG5vdyByZXF1aXJlZCcgKTtcblx0XHRcdHRhcmdldCA9IG5ldyBWZWN0b3IzKCk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5kZWx0YSggdGFyZ2V0ICkubXVsdGlwbHlTY2FsYXIoIHQgKS5hZGQoIHRoaXMuc3RhcnQgKTtcblxuXHR9LFxuXG5cdGNsb3Nlc3RQb2ludFRvUG9pbnRQYXJhbWV0ZXI6IGZ1bmN0aW9uICggcG9pbnQsIGNsYW1wVG9MaW5lICkge1xuXG5cdFx0X3N0YXJ0UC5zdWJWZWN0b3JzKCBwb2ludCwgdGhpcy5zdGFydCApO1xuXHRcdF9zdGFydEVuZC5zdWJWZWN0b3JzKCB0aGlzLmVuZCwgdGhpcy5zdGFydCApO1xuXG5cdFx0dmFyIHN0YXJ0RW5kMiA9IF9zdGFydEVuZC5kb3QoIF9zdGFydEVuZCApO1xuXHRcdHZhciBzdGFydEVuZF9zdGFydFAgPSBfc3RhcnRFbmQuZG90KCBfc3RhcnRQICk7XG5cblx0XHR2YXIgdCA9IHN0YXJ0RW5kX3N0YXJ0UCAvIHN0YXJ0RW5kMjtcblxuXHRcdGlmICggY2xhbXBUb0xpbmUgKSB7XG5cblx0XHRcdHQgPSBNYXRoVXRpbHMuY2xhbXAoIHQsIDAsIDEgKTtcblxuXHRcdH1cblxuXHRcdHJldHVybiB0O1xuXG5cdH0sXG5cblx0Y2xvc2VzdFBvaW50VG9Qb2ludDogZnVuY3Rpb24gKCBwb2ludCwgY2xhbXBUb0xpbmUsIHRhcmdldCApIHtcblxuXHRcdHZhciB0ID0gdGhpcy5jbG9zZXN0UG9pbnRUb1BvaW50UGFyYW1ldGVyKCBwb2ludCwgY2xhbXBUb0xpbmUgKTtcblxuXHRcdGlmICggdGFyZ2V0ID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpbmUzOiAuY2xvc2VzdFBvaW50VG9Qb2ludCgpIHRhcmdldCBpcyBub3cgcmVxdWlyZWQnICk7XG5cdFx0XHR0YXJnZXQgPSBuZXcgVmVjdG9yMygpO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZGVsdGEoIHRhcmdldCApLm11bHRpcGx5U2NhbGFyKCB0ICkuYWRkKCB0aGlzLnN0YXJ0ICk7XG5cblx0fSxcblxuXHRhcHBseU1hdHJpeDQ6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0dGhpcy5zdGFydC5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXHRcdHRoaXMuZW5kLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXG5cdGVxdWFsczogZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdFx0cmV0dXJuIGxpbmUuc3RhcnQuZXF1YWxzKCB0aGlzLnN0YXJ0ICkgJiYgbGluZS5lbmQuZXF1YWxzKCB0aGlzLmVuZCApO1xuXG5cdH1cblxufSApO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKi9cblxuZnVuY3Rpb24gSW1tZWRpYXRlUmVuZGVyT2JqZWN0KCBtYXRlcmlhbCApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHR0aGlzLnJlbmRlciA9IGZ1bmN0aW9uICggLyogcmVuZGVyQ2FsbGJhY2sgKi8gKSB7fTtcblxufVxuXG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW1tZWRpYXRlUmVuZGVyT2JqZWN0O1xuXG5JbW1lZGlhdGVSZW5kZXJPYmplY3QucHJvdG90eXBlLmlzSW1tZWRpYXRlUmVuZGVyT2JqZWN0ID0gdHJ1ZTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbnZhciBfdmVjdG9yJDggPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBTcG90TGlnaHRIZWxwZXIoIGxpZ2h0LCBjb2xvciApIHtcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0dGhpcy5tYXRyaXggPSBsaWdodC5tYXRyaXhXb3JsZDtcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBbXG5cdFx0MCwgMCwgMCwgXHQwLCAwLCAxLFxuXHRcdDAsIDAsIDAsIFx0MSwgMCwgMSxcblx0XHQwLCAwLCAwLFx0LSAxLCAwLCAxLFxuXHRcdDAsIDAsIDAsIFx0MCwgMSwgMSxcblx0XHQwLCAwLCAwLCBcdDAsIC0gMSwgMVxuXHRdO1xuXG5cdGZvciAoIHZhciBpID0gMCwgaiA9IDEsIGwgPSAzMjsgaSA8IGw7IGkgKyssIGogKysgKSB7XG5cblx0XHR2YXIgcDEgPSAoIGkgLyBsICkgKiBNYXRoLlBJICogMjtcblx0XHR2YXIgcDIgPSAoIGogLyBsICkgKiBNYXRoLlBJICogMjtcblxuXHRcdHBvc2l0aW9ucy5wdXNoKFxuXHRcdFx0TWF0aC5jb3MoIHAxICksIE1hdGguc2luKCBwMSApLCAxLFxuXHRcdFx0TWF0aC5jb3MoIHAyICksIE1hdGguc2luKCBwMiApLCAxXG5cdFx0KTtcblxuXHR9XG5cblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggcG9zaXRpb25zLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdHRoaXMuY29uZSA9IG5ldyBMaW5lU2VnbWVudHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3BvdExpZ2h0SGVscGVyO1xuXG5TcG90TGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5jb25lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5jb25lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuU3BvdExpZ2h0SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHZhciBjb25lTGVuZ3RoID0gdGhpcy5saWdodC5kaXN0YW5jZSA/IHRoaXMubGlnaHQuZGlzdGFuY2UgOiAxMDAwO1xuXHR2YXIgY29uZVdpZHRoID0gY29uZUxlbmd0aCAqIE1hdGgudGFuKCB0aGlzLmxpZ2h0LmFuZ2xlICk7XG5cblx0dGhpcy5jb25lLnNjYWxlLnNldCggY29uZVdpZHRoLCBjb25lV2lkdGgsIGNvbmVMZW5ndGggKTtcblxuXHRfdmVjdG9yJDguc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCB0aGlzLmxpZ2h0LnRhcmdldC5tYXRyaXhXb3JsZCApO1xuXG5cdHRoaXMuY29uZS5sb29rQXQoIF92ZWN0b3IkOCApO1xuXG5cdGlmICggdGhpcy5jb2xvciAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0dGhpcy5jb25lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdH1cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIFNlYW4gR3JpZmZpbiAvIGh0dHA6Ly90d2l0dGVyLmNvbS9zZ3JpZlxuICogQGF1dGhvciBNaWNoYWVsIEd1ZXJyZXJvIC8gaHR0cDovL3JlYWxpdHltZWx0ZG93bi5jb21cbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIGlrZXJyIC8gaHR0cDovL3Zlcm9sZC5jb21cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxudmFyIF92ZWN0b3IkOSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2JvbmVNYXRyaXggPSBuZXcgTWF0cml4NCgpO1xudmFyIF9tYXRyaXhXb3JsZEludiA9IG5ldyBNYXRyaXg0KCk7XG5cbmZ1bmN0aW9uIGdldEJvbmVMaXN0KCBvYmplY3QgKSB7XG5cblx0dmFyIGJvbmVMaXN0ID0gW107XG5cblx0aWYgKCBvYmplY3QgJiYgb2JqZWN0LmlzQm9uZSApIHtcblxuXHRcdGJvbmVMaXN0LnB1c2goIG9iamVjdCApO1xuXG5cdH1cblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBvYmplY3QuY2hpbGRyZW4ubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0Ym9uZUxpc3QucHVzaC5hcHBseSggYm9uZUxpc3QsIGdldEJvbmVMaXN0KCBvYmplY3QuY2hpbGRyZW5bIGkgXSApICk7XG5cblx0fVxuXG5cdHJldHVybiBib25lTGlzdDtcblxufVxuXG5mdW5jdGlvbiBTa2VsZXRvbkhlbHBlciggb2JqZWN0ICkge1xuXG5cdHZhciBib25lcyA9IGdldEJvbmVMaXN0KCBvYmplY3QgKTtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIGNvbG9ycyA9IFtdO1xuXG5cdHZhciBjb2xvcjEgPSBuZXcgQ29sb3IoIDAsIDAsIDEgKTtcblx0dmFyIGNvbG9yMiA9IG5ldyBDb2xvciggMCwgMSwgMCApO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IGJvbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdHZhciBib25lID0gYm9uZXNbIGkgXTtcblxuXHRcdGlmICggYm9uZS5wYXJlbnQgJiYgYm9uZS5wYXJlbnQuaXNCb25lICkge1xuXG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHR2ZXJ0aWNlcy5wdXNoKCAwLCAwLCAwICk7XG5cdFx0XHRjb2xvcnMucHVzaCggY29sb3IxLnIsIGNvbG9yMS5nLCBjb2xvcjEuYiApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yMi5yLCBjb2xvcjIuZywgY29sb3IyLmIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIGRlcHRoVGVzdDogZmFsc2UsIGRlcHRoV3JpdGU6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSwgdHJhbnNwYXJlbnQ6IHRydWUgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLnJvb3QgPSBvYmplY3Q7XG5cdHRoaXMuYm9uZXMgPSBib25lcztcblxuXHR0aGlzLm1hdHJpeCA9IG9iamVjdC5tYXRyaXhXb3JsZDtcblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cbn1cblxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU2tlbGV0b25IZWxwZXI7XG5cblNrZWxldG9uSGVscGVyLnByb3RvdHlwZS5pc1NrZWxldG9uSGVscGVyID0gdHJ1ZTtcblxuU2tlbGV0b25IZWxwZXIucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkID0gZnVuY3Rpb24gKCBmb3JjZSApIHtcblxuXHR2YXIgYm9uZXMgPSB0aGlzLmJvbmVzO1xuXG5cdHZhciBnZW9tZXRyeSA9IHRoaXMuZ2VvbWV0cnk7XG5cdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdF9tYXRyaXhXb3JsZEludi5nZXRJbnZlcnNlKCB0aGlzLnJvb3QubWF0cml4V29ybGQgKTtcblxuXHRmb3IgKCB2YXIgaSA9IDAsIGogPSAwOyBpIDwgYm9uZXMubGVuZ3RoOyBpICsrICkge1xuXG5cdFx0dmFyIGJvbmUgPSBib25lc1sgaSBdO1xuXG5cdFx0aWYgKCBib25lLnBhcmVudCAmJiBib25lLnBhcmVudC5pc0JvbmUgKSB7XG5cblx0XHRcdF9ib25lTWF0cml4Lm11bHRpcGx5TWF0cmljZXMoIF9tYXRyaXhXb3JsZEludiwgYm9uZS5tYXRyaXhXb3JsZCApO1xuXHRcdFx0X3ZlY3RvciQ5LnNldEZyb21NYXRyaXhQb3NpdGlvbiggX2JvbmVNYXRyaXggKTtcblx0XHRcdHBvc2l0aW9uLnNldFhZWiggaiwgX3ZlY3RvciQ5LngsIF92ZWN0b3IkOS55LCBfdmVjdG9yJDkueiApO1xuXG5cdFx0XHRfYm9uZU1hdHJpeC5tdWx0aXBseU1hdHJpY2VzKCBfbWF0cml4V29ybGRJbnYsIGJvbmUucGFyZW50Lm1hdHJpeFdvcmxkICk7XG5cdFx0XHRfdmVjdG9yJDkuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBfYm9uZU1hdHJpeCApO1xuXHRcdFx0cG9zaXRpb24uc2V0WFlaKCBqICsgMSwgX3ZlY3RvciQ5LngsIF92ZWN0b3IkOS55LCBfdmVjdG9yJDkueiApO1xuXG5cdFx0XHRqICs9IDI7XG5cblx0XHR9XG5cblx0fVxuXG5cdGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuXHRPYmplY3QzRC5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQuY2FsbCggdGhpcywgZm9yY2UgKTtcblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBQb2ludExpZ2h0SGVscGVyKCBsaWdodCwgc3BoZXJlU2l6ZSwgY29sb3IgKSB7XG5cblx0dGhpcy5saWdodCA9IGxpZ2h0O1xuXHR0aGlzLmxpZ2h0LnVwZGF0ZU1hdHJpeFdvcmxkKCk7XG5cblx0dGhpcy5jb2xvciA9IGNvbG9yO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBTcGhlcmVCdWZmZXJHZW9tZXRyeSggc3BoZXJlU2l6ZSwgNCwgMiApO1xuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgd2lyZWZyYW1lOiB0cnVlLCBmb2c6IGZhbHNlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0TWVzaC5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLm1hdHJpeCA9IHRoaXMubGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMudXBkYXRlKCk7XG5cblxuXHQvKlxuXHR2YXIgZGlzdGFuY2VHZW9tZXRyeSA9IG5ldyBUSFJFRS5JY29zYWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCAxLCAyICk7XG5cdHZhciBkaXN0YW5jZU1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXhDb2xvciwgZm9nOiBmYWxzZSwgd2lyZWZyYW1lOiB0cnVlLCBvcGFjaXR5OiAwLjEsIHRyYW5zcGFyZW50OiB0cnVlIH0gKTtcblxuXHR0aGlzLmxpZ2h0U3BoZXJlID0gbmV3IFRIUkVFLk1lc2goIGJ1bGJHZW9tZXRyeSwgYnVsYk1hdGVyaWFsICk7XG5cdHRoaXMubGlnaHREaXN0YW5jZSA9IG5ldyBUSFJFRS5NZXNoKCBkaXN0YW5jZUdlb21ldHJ5LCBkaXN0YW5jZU1hdGVyaWFsICk7XG5cblx0dmFyIGQgPSBsaWdodC5kaXN0YW5jZTtcblxuXHRpZiAoIGQgPT09IDAuMCApIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS52aXNpYmxlID0gZmFsc2U7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubGlnaHREaXN0YW5jZS5zY2FsZS5zZXQoIGQsIGQsIGQgKTtcblxuXHR9XG5cblx0dGhpcy5hZGQoIHRoaXMubGlnaHREaXN0YW5jZSApO1xuXHQqL1xuXG59XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWVzaC5wcm90b3R5cGUgKTtcblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9pbnRMaWdodEhlbHBlcjtcblxuUG9pbnRMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5tYXRlcmlhbC5kaXNwb3NlKCk7XG5cbn07XG5cblBvaW50TGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXG5cdH1cblxuXHQvKlxuXHR2YXIgZCA9IHRoaXMubGlnaHQuZGlzdGFuY2U7XG5cblx0aWYgKCBkID09PSAwLjAgKSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0RGlzdGFuY2UudmlzaWJsZSA9IHRydWU7XG5cdFx0dGhpcy5saWdodERpc3RhbmNlLnNjYWxlLnNldCggZCwgZCwgZCApO1xuXG5cdH1cblx0Ki9cblxufTtcblxuLyoqXG4gKiBAYXV0aG9yIGFsdGVyZWRxIC8gaHR0cDovL2FsdGVyZWRxdWFsaWEuY29tL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKi9cblxudmFyIF92ZWN0b3IkYSA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2NvbG9yMSA9IG5ldyBDb2xvcigpO1xudmFyIF9jb2xvcjIgPSBuZXcgQ29sb3IoKTtcblxuZnVuY3Rpb24gSGVtaXNwaGVyZUxpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5KCBzaXplICk7XG5cdGdlb21ldHJ5LnJvdGF0ZVkoIE1hdGguUEkgKiAwLjUgKTtcblxuXHR0aGlzLm1hdGVyaWFsID0gbmV3IE1lc2hCYXNpY01hdGVyaWFsKCB7IHdpcmVmcmFtZTogdHJ1ZSwgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXHRpZiAoIHRoaXMuY29sb3IgPT09IHVuZGVmaW5lZCApIHRoaXMubWF0ZXJpYWwudmVydGV4Q29sb3JzID0gdHJ1ZTtcblxuXHR2YXIgcG9zaXRpb24gPSBnZW9tZXRyeS5nZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicgKTtcblx0dmFyIGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoIHBvc2l0aW9uLmNvdW50ICogMyApO1xuXG5cdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR0aGlzLmFkZCggbmV3IE1lc2goIGdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsICkgKTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIZW1pc3BoZXJlTGlnaHRIZWxwZXI7XG5cbkhlbWlzcGhlcmVMaWdodEhlbHBlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR0aGlzLmNoaWxkcmVuWyAwIF0uZ2VvbWV0cnkuZGlzcG9zZSgpO1xuXHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuZGlzcG9zZSgpO1xuXG59O1xuXG5IZW1pc3BoZXJlTGlnaHRIZWxwZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcblxuXHR2YXIgbWVzaCA9IHRoaXMuY2hpbGRyZW5bIDAgXTtcblxuXHRpZiAoIHRoaXMuY29sb3IgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHRoaXMubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdHZhciBjb2xvcnMgPSBtZXNoLmdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ2NvbG9yJyApO1xuXG5cdFx0X2NvbG9yMS5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cdFx0X2NvbG9yMi5jb3B5KCB0aGlzLmxpZ2h0Lmdyb3VuZENvbG9yICk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDAsIGwgPSBjb2xvcnMuY291bnQ7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHR2YXIgY29sb3IgPSAoIGkgPCAoIGwgLyAyICkgKSA/IF9jb2xvcjEgOiBfY29sb3IyO1xuXG5cdFx0XHRjb2xvcnMuc2V0WFlaKCBpLCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHR9XG5cblx0XHRjb2xvcnMubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdH1cblxuXHRtZXNoLmxvb2tBdCggX3ZlY3RvciRhLnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApLm5lZ2F0ZSgpICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBHcmlkSGVscGVyKCBzaXplLCBkaXZpc2lvbnMsIGNvbG9yMSwgY29sb3IyICkge1xuXG5cdHNpemUgPSBzaXplIHx8IDEwO1xuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgMTA7XG5cdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICE9PSB1bmRlZmluZWQgPyBjb2xvcjEgOiAweDQ0NDQ0NCApO1xuXHRjb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gY29sb3IyIDogMHg4ODg4ODggKTtcblxuXHR2YXIgY2VudGVyID0gZGl2aXNpb25zIC8gMjtcblx0dmFyIHN0ZXAgPSBzaXplIC8gZGl2aXNpb25zO1xuXHR2YXIgaGFsZlNpemUgPSBzaXplIC8gMjtcblxuXHR2YXIgdmVydGljZXMgPSBbXSwgY29sb3JzID0gW107XG5cblx0Zm9yICggdmFyIGkgPSAwLCBqID0gMCwgayA9IC0gaGFsZlNpemU7IGkgPD0gZGl2aXNpb25zOyBpICsrLCBrICs9IHN0ZXAgKSB7XG5cblx0XHR2ZXJ0aWNlcy5wdXNoKCAtIGhhbGZTaXplLCAwLCBrLCBoYWxmU2l6ZSwgMCwgayApO1xuXHRcdHZlcnRpY2VzLnB1c2goIGssIDAsIC0gaGFsZlNpemUsIGssIDAsIGhhbGZTaXplICk7XG5cblx0XHR2YXIgY29sb3IgPSBpID09PSBjZW50ZXIgPyBjb2xvcjEgOiBjb2xvcjI7XG5cblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXHRcdGNvbG9yLnRvQXJyYXkoIGNvbG9ycywgaiApOyBqICs9IDM7XG5cdFx0Y29sb3IudG9BcnJheSggY29sb3JzLCBqICk7IGogKz0gMztcblx0XHRjb2xvci50b0FycmF5KCBjb2xvcnMsIGogKTsgaiArPSAzO1xuXG5cdH1cblxuXHR2YXIgZ2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyB2ZXJ0ZXhDb2xvcnM6IHRydWUsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKTtcblxuXHRMaW5lU2VnbWVudHMuY2FsbCggdGhpcywgZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuR3JpZEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuYXNzaWduKCBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICksIHtcblxuXHRjb25zdHJ1Y3RvcjogR3JpZEhlbHBlcixcblxuXHRjb3B5OiBmdW5jdGlvbiAoIHNvdXJjZSApIHtcblxuXHRcdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHRcdHRoaXMuZ2VvbWV0cnkuY29weSggc291cmNlLmdlb21ldHJ5ICk7XG5cdFx0dGhpcy5tYXRlcmlhbC5jb3B5KCBzb3VyY2UubWF0ZXJpYWwgKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3RvcigpLmNvcHkoIHRoaXMgKTtcblxuXHR9XG5cbn0gKTtcblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICogQGF1dGhvciBIZWN0YXRlIC8gaHR0cDovL3d3dy5naXRodWIuY29tL0hlY3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBQb2xhckdyaWRIZWxwZXIoIHJhZGl1cywgcmFkaWFscywgY2lyY2xlcywgZGl2aXNpb25zLCBjb2xvcjEsIGNvbG9yMiApIHtcblxuXHRyYWRpdXMgPSByYWRpdXMgfHwgMTA7XG5cdHJhZGlhbHMgPSByYWRpYWxzIHx8IDE2O1xuXHRjaXJjbGVzID0gY2lyY2xlcyB8fCA4O1xuXHRkaXZpc2lvbnMgPSBkaXZpc2lvbnMgfHwgNjQ7XG5cdGNvbG9yMSA9IG5ldyBDb2xvciggY29sb3IxICE9PSB1bmRlZmluZWQgPyBjb2xvcjEgOiAweDQ0NDQ0NCApO1xuXHRjb2xvcjIgPSBuZXcgQ29sb3IoIGNvbG9yMiAhPT0gdW5kZWZpbmVkID8gY29sb3IyIDogMHg4ODg4ODggKTtcblxuXHR2YXIgdmVydGljZXMgPSBbXTtcblx0dmFyIGNvbG9ycyA9IFtdO1xuXG5cdHZhciB4LCB6O1xuXHR2YXIgdiwgaSwgaiwgciwgY29sb3I7XG5cblx0Ly8gY3JlYXRlIHRoZSByYWRpYWxzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gcmFkaWFsczsgaSArKyApIHtcblxuXHRcdHYgPSAoIGkgLyByYWRpYWxzICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHJhZGl1cztcblx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHJhZGl1cztcblxuXHRcdHZlcnRpY2VzLnB1c2goIDAsIDAsIDAgKTtcblx0XHR2ZXJ0aWNlcy5wdXNoKCB4LCAwLCB6ICk7XG5cblx0XHRjb2xvciA9ICggaSAmIDEgKSA/IGNvbG9yMSA6IGNvbG9yMjtcblxuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHR9XG5cblx0Ly8gY3JlYXRlIHRoZSBjaXJjbGVzXG5cblx0Zm9yICggaSA9IDA7IGkgPD0gY2lyY2xlczsgaSArKyApIHtcblxuXHRcdGNvbG9yID0gKCBpICYgMSApID8gY29sb3IxIDogY29sb3IyO1xuXG5cdFx0ciA9IHJhZGl1cyAtICggcmFkaXVzIC8gY2lyY2xlcyAqIGkgKTtcblxuXHRcdGZvciAoIGogPSAwOyBqIDwgZGl2aXNpb25zOyBqICsrICkge1xuXG5cdFx0XHQvLyBmaXJzdCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggaiAvIGRpdmlzaW9ucyApICogKCBNYXRoLlBJICogMiApO1xuXG5cdFx0XHR4ID0gTWF0aC5zaW4oIHYgKSAqIHI7XG5cdFx0XHR6ID0gTWF0aC5jb3MoIHYgKSAqIHI7XG5cblx0XHRcdHZlcnRpY2VzLnB1c2goIHgsIDAsIHogKTtcblx0XHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRcdC8vIHNlY29uZCB2ZXJ0ZXhcblxuXHRcdFx0diA9ICggKCBqICsgMSApIC8gZGl2aXNpb25zICkgKiAoIE1hdGguUEkgKiAyICk7XG5cblx0XHRcdHggPSBNYXRoLnNpbiggdiApICogcjtcblx0XHRcdHogPSBNYXRoLmNvcyggdiApICogcjtcblxuXHRcdFx0dmVydGljZXMucHVzaCggeCwgMCwgeiApO1xuXHRcdFx0Y29sb3JzLnB1c2goIGNvbG9yLnIsIGNvbG9yLmcsIGNvbG9yLmIgKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHZlcnRpY2VzLCAzICkgKTtcblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAnY29sb3InLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggY29sb3JzLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgdmVydGV4Q29sb3JzOiB0cnVlLCB0b25lTWFwcGVkOiBmYWxzZSB9ICk7XG5cblx0TGluZVNlZ21lbnRzLmNhbGwoIHRoaXMsIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cblBvbGFyR3JpZEhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lU2VnbWVudHMucHJvdG90eXBlICk7XG5Qb2xhckdyaWRIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUG9sYXJHcmlkSGVscGVyO1xuXG4vKipcbiAqIEBhdXRob3IgYWx0ZXJlZHEgLyBodHRwOi8vYWx0ZXJlZHF1YWxpYS5jb20vXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxudmFyIF92MSQ1ID0gbmV3IFZlY3RvcjMoKTtcbnZhciBfdjIkMyA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX3YzJDEgPSBuZXcgVmVjdG9yMygpO1xuXG5mdW5jdGlvbiBEaXJlY3Rpb25hbExpZ2h0SGVscGVyKCBsaWdodCwgc2l6ZSwgY29sb3IgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMubGlnaHQgPSBsaWdodDtcblx0dGhpcy5saWdodC51cGRhdGVNYXRyaXhXb3JsZCgpO1xuXG5cdHRoaXMubWF0cml4ID0gbGlnaHQubWF0cml4V29ybGQ7XG5cdHRoaXMubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG5cdHRoaXMuY29sb3IgPSBjb2xvcjtcblxuXHRpZiAoIHNpemUgPT09IHVuZGVmaW5lZCApIHNpemUgPSAxO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBbXG5cdFx0LSBzaXplLCBzaXplLCAwLFxuXHRcdHNpemUsIHNpemUsIDAsXG5cdFx0c2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgLSBzaXplLCAwLFxuXHRcdC0gc2l6ZSwgc2l6ZSwgMFxuXHRdLCAzICkgKTtcblxuXHR2YXIgbWF0ZXJpYWwgPSBuZXcgTGluZUJhc2ljTWF0ZXJpYWwoIHsgZm9nOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdHRoaXMubGlnaHRQbGFuZSA9IG5ldyBMaW5lKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblx0dGhpcy5hZGQoIHRoaXMubGlnaHRQbGFuZSApO1xuXG5cdGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMCwgMSBdLCAzICkgKTtcblxuXHR0aGlzLnRhcmdldExpbmUgPSBuZXcgTGluZSggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cdHRoaXMuYWRkKCB0aGlzLnRhcmdldExpbmUgKTtcblxuXHR0aGlzLnVwZGF0ZSgpO1xuXG59XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggT2JqZWN0M0QucHJvdG90eXBlICk7XG5EaXJlY3Rpb25hbExpZ2h0SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IERpcmVjdGlvbmFsTGlnaHRIZWxwZXI7XG5cbkRpcmVjdGlvbmFsTGlnaHRIZWxwZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0dGhpcy5saWdodFBsYW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy5saWdodFBsYW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLmdlb21ldHJ5LmRpc3Bvc2UoKTtcblx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmRpc3Bvc2UoKTtcblxufTtcblxuRGlyZWN0aW9uYWxMaWdodEhlbHBlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXG5cdF92MSQ1LnNldEZyb21NYXRyaXhQb3NpdGlvbiggdGhpcy5saWdodC5tYXRyaXhXb3JsZCApO1xuXHRfdjIkMy5zZXRGcm9tTWF0cml4UG9zaXRpb24oIHRoaXMubGlnaHQudGFyZ2V0Lm1hdHJpeFdvcmxkICk7XG5cdF92MyQxLnN1YlZlY3RvcnMoIF92MiQzLCBfdjEkNSApO1xuXG5cdHRoaXMubGlnaHRQbGFuZS5sb29rQXQoIF92MiQzICk7XG5cblx0aWYgKCB0aGlzLmNvbG9yICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCB0aGlzLmNvbG9yICk7XG5cdFx0dGhpcy50YXJnZXRMaW5lLm1hdGVyaWFsLmNvbG9yLnNldCggdGhpcy5jb2xvciApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHR0aGlzLmxpZ2h0UGxhbmUubWF0ZXJpYWwuY29sb3IuY29weSggdGhpcy5saWdodC5jb2xvciApO1xuXHRcdHRoaXMudGFyZ2V0TGluZS5tYXRlcmlhbC5jb2xvci5jb3B5KCB0aGlzLmxpZ2h0LmNvbG9yICk7XG5cblx0fVxuXG5cdHRoaXMudGFyZ2V0TGluZS5sb29rQXQoIF92MiQzICk7XG5cdHRoaXMudGFyZ2V0TGluZS5zY2FsZS56ID0gX3YzJDEubGVuZ3RoKCk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cbiAqIEBhdXRob3IgTXVnZW44NyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9NdWdlbjg3XG4gKlxuICpcdC0gc2hvd3MgZnJ1c3R1bSwgbGluZSBvZiBzaWdodCBhbmQgdXAgb2YgdGhlIGNhbWVyYVxuICpcdC0gc3VpdGFibGUgZm9yIGZhc3QgdXBkYXRlc1xuICogXHQtIGJhc2VkIG9uIGZydXN0dW0gdmlzdWFsaXphdGlvbiBpbiBsaWdodGdsLmpzIHNoYWRvd21hcCBleGFtcGxlXG4gKlx0XHRodHRwOi8vZXZhbncuZ2l0aHViLmNvbS9saWdodGdsLmpzL3Rlc3RzL3NoYWRvd21hcC5odG1sXG4gKi9cblxudmFyIF92ZWN0b3IkYiA9IG5ldyBWZWN0b3IzKCk7XG52YXIgX2NhbWVyYSA9IG5ldyBDYW1lcmEoKTtcblxuZnVuY3Rpb24gQ2FtZXJhSGVscGVyKCBjYW1lcmEgKSB7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdHZhciBtYXRlcmlhbCA9IG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogMHhmZmZmZmYsIHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdHZhciB2ZXJ0aWNlcyA9IFtdO1xuXHR2YXIgY29sb3JzID0gW107XG5cblx0dmFyIHBvaW50TWFwID0ge307XG5cblx0Ly8gY29sb3JzXG5cblx0dmFyIGNvbG9yRnJ1c3R1bSA9IG5ldyBDb2xvciggMHhmZmFhMDAgKTtcblx0dmFyIGNvbG9yQ29uZSA9IG5ldyBDb2xvciggMHhmZjAwMDAgKTtcblx0dmFyIGNvbG9yVXAgPSBuZXcgQ29sb3IoIDB4MDBhYWZmICk7XG5cdHZhciBjb2xvclRhcmdldCA9IG5ldyBDb2xvciggMHhmZmZmZmYgKTtcblx0dmFyIGNvbG9yQ3Jvc3MgPSBuZXcgQ29sb3IoIDB4MzMzMzMzICk7XG5cblx0Ly8gbmVhclxuXG5cdGFkZExpbmUoICduMScsICduMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjInLCAnbjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ24zJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMycsICduMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIGZhclxuXG5cdGFkZExpbmUoICdmMScsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnZjInLCAnZjQnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ2Y0JywgJ2YzJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICdmMycsICdmMScsIGNvbG9yRnJ1c3R1bSApO1xuXG5cdC8vIHNpZGVzXG5cblx0YWRkTGluZSggJ24xJywgJ2YxJywgY29sb3JGcnVzdHVtICk7XG5cdGFkZExpbmUoICduMicsICdmMicsIGNvbG9yRnJ1c3R1bSApO1xuXHRhZGRMaW5lKCAnbjMnLCAnZjMnLCBjb2xvckZydXN0dW0gKTtcblx0YWRkTGluZSggJ240JywgJ2Y0JywgY29sb3JGcnVzdHVtICk7XG5cblx0Ly8gY29uZVxuXG5cdGFkZExpbmUoICdwJywgJ24xJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24yJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ24zJywgY29sb3JDb25lICk7XG5cdGFkZExpbmUoICdwJywgJ240JywgY29sb3JDb25lICk7XG5cblx0Ly8gdXBcblxuXHRhZGRMaW5lKCAndTEnLCAndTInLCBjb2xvclVwICk7XG5cdGFkZExpbmUoICd1MicsICd1MycsIGNvbG9yVXAgKTtcblx0YWRkTGluZSggJ3UzJywgJ3UxJywgY29sb3JVcCApO1xuXG5cdC8vIHRhcmdldFxuXG5cdGFkZExpbmUoICdjJywgJ3QnLCBjb2xvclRhcmdldCApO1xuXHRhZGRMaW5lKCAncCcsICdjJywgY29sb3JDcm9zcyApO1xuXG5cdC8vIGNyb3NzXG5cblx0YWRkTGluZSggJ2NuMScsICdjbjInLCBjb2xvckNyb3NzICk7XG5cdGFkZExpbmUoICdjbjMnLCAnY240JywgY29sb3JDcm9zcyApO1xuXG5cdGFkZExpbmUoICdjZjEnLCAnY2YyJywgY29sb3JDcm9zcyApO1xuXHRhZGRMaW5lKCAnY2YzJywgJ2NmNCcsIGNvbG9yQ3Jvc3MgKTtcblxuXHRmdW5jdGlvbiBhZGRMaW5lKCBhLCBiLCBjb2xvciApIHtcblxuXHRcdGFkZFBvaW50KCBhLCBjb2xvciApO1xuXHRcdGFkZFBvaW50KCBiLCBjb2xvciApO1xuXG5cdH1cblxuXHRmdW5jdGlvbiBhZGRQb2ludCggaWQsIGNvbG9yICkge1xuXG5cdFx0dmVydGljZXMucHVzaCggMCwgMCwgMCApO1xuXHRcdGNvbG9ycy5wdXNoKCBjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iICk7XG5cblx0XHRpZiAoIHBvaW50TWFwWyBpZCBdID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdHBvaW50TWFwWyBpZCBdID0gW107XG5cblx0XHR9XG5cblx0XHRwb2ludE1hcFsgaWQgXS5wdXNoKCAoIHZlcnRpY2VzLmxlbmd0aCAvIDMgKSAtIDEgKTtcblxuXHR9XG5cblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSggdmVydGljZXMsIDMgKSApO1xuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdjb2xvcicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBjb2xvcnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxuXHR0aGlzLmNhbWVyYSA9IGNhbWVyYTtcblx0aWYgKCB0aGlzLmNhbWVyYS51cGRhdGVQcm9qZWN0aW9uTWF0cml4ICkgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuXG5cdHRoaXMubWF0cml4ID0gY2FtZXJhLm1hdHJpeFdvcmxkO1xuXHR0aGlzLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZTtcblxuXHR0aGlzLnBvaW50TWFwID0gcG9pbnRNYXA7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5DYW1lcmFIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENhbWVyYUhlbHBlcjtcblxuQ2FtZXJhSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0dmFyIGdlb21ldHJ5ID0gdGhpcy5nZW9tZXRyeTtcblx0dmFyIHBvaW50TWFwID0gdGhpcy5wb2ludE1hcDtcblxuXHR2YXIgdyA9IDEsIGggPSAxO1xuXG5cdC8vIHdlIG5lZWQganVzdCBjYW1lcmEgcHJvamVjdGlvbiBtYXRyaXggaW52ZXJzZVxuXHQvLyB3b3JsZCBtYXRyaXggbXVzdCBiZSBpZGVudGl0eVxuXG5cdF9jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UuY29weSggdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeEludmVyc2UgKTtcblxuXHQvLyBjZW50ZXIgLyB0YXJnZXRcblxuXHRzZXRQb2ludCggJ2MnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIC0gMSApO1xuXHRzZXRQb2ludCggJ3QnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIDAsIDEgKTtcblxuXHQvLyBuZWFyXG5cblx0c2V0UG9pbnQoICduMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAtIGgsIC0gMSApO1xuXHRzZXRQb2ludCggJ24yJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIC0gMSApO1xuXHRzZXRQb2ludCggJ24zJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIGgsIC0gMSApO1xuXHRzZXRQb2ludCggJ240JywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCBoLCAtIDEgKTtcblxuXHQvLyBmYXJcblxuXHRzZXRQb2ludCggJ2YxJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcsIC0gaCwgMSApO1xuXHRzZXRQb2ludCggJ2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAtIGgsIDEgKTtcblx0c2V0UG9pbnQoICdmMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCBoLCAxICk7XG5cdHNldFBvaW50KCAnZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIGgsIDEgKTtcblxuXHQvLyB1cFxuXG5cdHNldFBvaW50KCAndTEnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRzZXRQb2ludCggJ3UyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAtIHcgKiAwLjcsIGggKiAxLjEsIC0gMSApO1xuXHRzZXRQb2ludCggJ3UzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCBoICogMiwgLSAxICk7XG5cblx0Ly8gY3Jvc3NcblxuXHRzZXRQb2ludCggJ2NmMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAxICk7XG5cdHNldFBvaW50KCAnY2YyJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCB3LCAwLCAxICk7XG5cdHNldFBvaW50KCAnY2YzJywgcG9pbnRNYXAsIGdlb21ldHJ5LCBfY2FtZXJhLCAwLCAtIGgsIDEgKTtcblx0c2V0UG9pbnQoICdjZjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIDEgKTtcblxuXHRzZXRQb2ludCggJ2NuMScsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgLSB3LCAwLCAtIDEgKTtcblx0c2V0UG9pbnQoICdjbjInLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIHcsIDAsIC0gMSApO1xuXHRzZXRQb2ludCggJ2NuMycsIHBvaW50TWFwLCBnZW9tZXRyeSwgX2NhbWVyYSwgMCwgLSBoLCAtIDEgKTtcblx0c2V0UG9pbnQoICdjbjQnLCBwb2ludE1hcCwgZ2VvbWV0cnksIF9jYW1lcmEsIDAsIGgsIC0gMSApO1xuXG5cdGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxufTtcblxuZnVuY3Rpb24gc2V0UG9pbnQoIHBvaW50LCBwb2ludE1hcCwgZ2VvbWV0cnksIGNhbWVyYSwgeCwgeSwgeiApIHtcblxuXHRfdmVjdG9yJGIuc2V0KCB4LCB5LCB6ICkudW5wcm9qZWN0KCBjYW1lcmEgKTtcblxuXHR2YXIgcG9pbnRzID0gcG9pbnRNYXBbIHBvaW50IF07XG5cblx0aWYgKCBwb2ludHMgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdHZhciBwb3NpdGlvbiA9IGdlb21ldHJ5LmdldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJyApO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHBvc2l0aW9uLnNldFhZWiggcG9pbnRzWyBpIF0sIF92ZWN0b3IkYi54LCBfdmVjdG9yJGIueSwgX3ZlY3RvciRiLnogKTtcblxuXHRcdH1cblxuXHR9XG5cbn1cblxuLyoqXG4gKiBAYXV0aG9yIG1yZG9vYiAvIGh0dHA6Ly9tcmRvb2IuY29tL1xuICogQGF1dGhvciBNdWdlbjg3IC8gaHR0cDovL2dpdGh1Yi5jb20vTXVnZW44N1xuICovXG5cbnZhciBfYm94JDMgPSBuZXcgQm94MygpO1xuXG5mdW5jdGlvbiBCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgY29sb3IgPSAweGZmZmYwMDtcblxuXHR2YXIgaW5kaWNlcyA9IG5ldyBVaW50MTZBcnJheSggWyAwLCAxLCAxLCAyLCAyLCAzLCAzLCAwLCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA0LCAwLCA0LCAxLCA1LCAyLCA2LCAzLCA3IF0gKTtcblx0dmFyIHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoIDggKiAzICk7XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblx0Z2VvbWV0cnkuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cblx0dGhpcy5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cblx0dGhpcy51cGRhdGUoKTtcblxufVxuXG5Cb3hIZWxwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTGluZVNlZ21lbnRzLnByb3RvdHlwZSApO1xuQm94SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJveEhlbHBlcjtcblxuQm94SGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoIG9iamVjdCApIHtcblxuXHRpZiAoIG9iamVjdCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94SGVscGVyOiAudXBkYXRlKCkgaGFzIG5vIGxvbmdlciBhcmd1bWVudHMuJyApO1xuXG5cdH1cblxuXHRpZiAoIHRoaXMub2JqZWN0ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRfYm94JDMuc2V0RnJvbU9iamVjdCggdGhpcy5vYmplY3QgKTtcblxuXHR9XG5cblx0aWYgKCBfYm94JDMuaXNFbXB0eSgpICkgcmV0dXJuO1xuXG5cdHZhciBtaW4gPSBfYm94JDMubWluO1xuXHR2YXIgbWF4ID0gX2JveCQzLm1heDtcblxuXHQvKlxuXHQgIDVfX19fNFxuXHQxL19fXzAvfFxuXHR8IDZfX3xfN1xuXHQyL19fXzMvXG5cblx0MDogbWF4LngsIG1heC55LCBtYXguelxuXHQxOiBtaW4ueCwgbWF4LnksIG1heC56XG5cdDI6IG1pbi54LCBtaW4ueSwgbWF4Lnpcblx0MzogbWF4LngsIG1pbi55LCBtYXguelxuXHQ0OiBtYXgueCwgbWF4LnksIG1pbi56XG5cdDU6IG1pbi54LCBtYXgueSwgbWluLnpcblx0NjogbWluLngsIG1pbi55LCBtaW4uelxuXHQ3OiBtYXgueCwgbWluLnksIG1pbi56XG5cdCovXG5cblx0dmFyIHBvc2l0aW9uID0gdGhpcy5nZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uO1xuXHR2YXIgYXJyYXkgPSBwb3NpdGlvbi5hcnJheTtcblxuXHRhcnJheVsgMCBdID0gbWF4Lng7IGFycmF5WyAxIF0gPSBtYXgueTsgYXJyYXlbIDIgXSA9IG1heC56O1xuXHRhcnJheVsgMyBdID0gbWluLng7IGFycmF5WyA0IF0gPSBtYXgueTsgYXJyYXlbIDUgXSA9IG1heC56O1xuXHRhcnJheVsgNiBdID0gbWluLng7IGFycmF5WyA3IF0gPSBtaW4ueTsgYXJyYXlbIDggXSA9IG1heC56O1xuXHRhcnJheVsgOSBdID0gbWF4Lng7IGFycmF5WyAxMCBdID0gbWluLnk7IGFycmF5WyAxMSBdID0gbWF4Lno7XG5cdGFycmF5WyAxMiBdID0gbWF4Lng7IGFycmF5WyAxMyBdID0gbWF4Lnk7IGFycmF5WyAxNCBdID0gbWluLno7XG5cdGFycmF5WyAxNSBdID0gbWluLng7IGFycmF5WyAxNiBdID0gbWF4Lnk7IGFycmF5WyAxNyBdID0gbWluLno7XG5cdGFycmF5WyAxOCBdID0gbWluLng7IGFycmF5WyAxOSBdID0gbWluLnk7IGFycmF5WyAyMCBdID0gbWluLno7XG5cdGFycmF5WyAyMSBdID0gbWF4Lng7IGFycmF5WyAyMiBdID0gbWluLnk7IGFycmF5WyAyMyBdID0gbWluLno7XG5cblx0cG9zaXRpb24ubmVlZHNVcGRhdGUgPSB0cnVlO1xuXG5cdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cblxufTtcblxuQm94SGVscGVyLnByb3RvdHlwZS5zZXRGcm9tT2JqZWN0ID0gZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cdHRoaXMudXBkYXRlKCk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdExpbmVTZWdtZW50cy5wcm90b3R5cGUuY29weS5jYWxsKCB0aGlzLCBzb3VyY2UgKTtcblxuXHR0aGlzLm9iamVjdCA9IHNvdXJjZS5vYmplY3Q7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkJveEhlbHBlci5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0cmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKCkuY29weSggdGhpcyApO1xuXG59O1xuXG4vKipcbiAqIEBhdXRob3IgV2VzdExhbmdsZXkgLyBodHRwOi8vZ2l0aHViLmNvbS9XZXN0TGFuZ2xleVxuICovXG5cbmZ1bmN0aW9uIEJveDNIZWxwZXIoIGJveCwgY29sb3IgKSB7XG5cblx0dGhpcy50eXBlID0gJ0JveDNIZWxwZXInO1xuXG5cdHRoaXMuYm94ID0gYm94O1xuXG5cdGNvbG9yID0gY29sb3IgfHwgMHhmZmZmMDA7XG5cblx0dmFyIGluZGljZXMgPSBuZXcgVWludDE2QXJyYXkoIFsgMCwgMSwgMSwgMiwgMiwgMywgMywgMCwgNCwgNSwgNSwgNiwgNiwgNywgNywgNCwgMCwgNCwgMSwgNSwgMiwgNiwgMywgNyBdICk7XG5cblx0dmFyIHBvc2l0aW9ucyA9IFsgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgLSAxLCAtIDEsIC0gMSwgLSAxLCAxLCAtIDEsIC0gMSBdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXG5cdGdlb21ldHJ5LnNldEluZGV4KCBuZXcgQnVmZmVyQXR0cmlidXRlKCBpbmRpY2VzLCAxICkgKTtcblxuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMsIDMgKSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBjb2xvciwgdG9uZU1hcHBlZDogZmFsc2UgfSApICk7XG5cblx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcblxufVxuXG5Cb3gzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkJveDNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQm94M0hlbHBlcjtcblxuQm94M0hlbHBlci5wcm90b3R5cGUudXBkYXRlTWF0cml4V29ybGQgPSBmdW5jdGlvbiAoIGZvcmNlICkge1xuXG5cdHZhciBib3ggPSB0aGlzLmJveDtcblxuXHRpZiAoIGJveC5pc0VtcHR5KCkgKSByZXR1cm47XG5cblx0Ym94LmdldENlbnRlciggdGhpcy5wb3NpdGlvbiApO1xuXG5cdGJveC5nZXRTaXplKCB0aGlzLnNjYWxlICk7XG5cblx0dGhpcy5zY2FsZS5tdWx0aXBseVNjYWxhciggMC41ICk7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKi9cblxuZnVuY3Rpb24gUGxhbmVIZWxwZXIoIHBsYW5lLCBzaXplLCBoZXggKSB7XG5cblx0dGhpcy50eXBlID0gJ1BsYW5lSGVscGVyJztcblxuXHR0aGlzLnBsYW5lID0gcGxhbmU7XG5cblx0dGhpcy5zaXplID0gKCBzaXplID09PSB1bmRlZmluZWQgKSA/IDEgOiBzaXplO1xuXG5cdHZhciBjb2xvciA9ICggaGV4ICE9PSB1bmRlZmluZWQgKSA/IGhleCA6IDB4ZmZmZjAwO1xuXG5cdHZhciBwb3NpdGlvbnMgPSBbIDEsIC0gMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgMSwgMSwgLSAxLCAxLCAxLCAtIDEsIC0gMSwgMSwgMSwgLSAxLCAxLCAxLCAxLCAxLCAwLCAwLCAxLCAwLCAwLCAwIF07XG5cblx0dmFyIGdlb21ldHJ5ID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIHBvc2l0aW9ucywgMyApICk7XG5cdGdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdExpbmUuY2FsbCggdGhpcywgZ2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXG5cdC8vXG5cblx0dmFyIHBvc2l0aW9uczIgPSBbIDEsIDEsIDEsIC0gMSwgMSwgMSwgLSAxLCAtIDEsIDEsIDEsIDEsIDEsIC0gMSwgLSAxLCAxLCAxLCAtIDEsIDEgXTtcblxuXHR2YXIgZ2VvbWV0cnkyID0gbmV3IEJ1ZmZlckdlb21ldHJ5KCk7XG5cdGdlb21ldHJ5Mi5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbnMyLCAzICkgKTtcblx0Z2VvbWV0cnkyLmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXG5cdHRoaXMuYWRkKCBuZXcgTWVzaCggZ2VvbWV0cnkyLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoIHsgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiAwLjIsIHRyYW5zcGFyZW50OiB0cnVlLCBkZXB0aFdyaXRlOiBmYWxzZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApICkgKTtcblxufVxuXG5QbGFuZUhlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBMaW5lLnByb3RvdHlwZSApO1xuUGxhbmVIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUGxhbmVIZWxwZXI7XG5cblBsYW5lSGVscGVyLnByb3RvdHlwZS51cGRhdGVNYXRyaXhXb3JsZCA9IGZ1bmN0aW9uICggZm9yY2UgKSB7XG5cblx0dmFyIHNjYWxlID0gLSB0aGlzLnBsYW5lLmNvbnN0YW50O1xuXG5cdGlmICggTWF0aC5hYnMoIHNjYWxlICkgPCAxZS04ICkgc2NhbGUgPSAxZS04OyAvLyBzaWduIGRvZXMgbm90IG1hdHRlclxuXG5cdHRoaXMuc2NhbGUuc2V0KCAwLjUgKiB0aGlzLnNpemUsIDAuNSAqIHRoaXMuc2l6ZSwgc2NhbGUgKTtcblxuXHR0aGlzLmNoaWxkcmVuWyAwIF0ubWF0ZXJpYWwuc2lkZSA9ICggc2NhbGUgPCAwICkgPyBCYWNrU2lkZSA6IEZyb250U2lkZTsgLy8gcmVuZGVyZXIgZmxpcHMgc2lkZSB3aGVuIGRldGVybWluYW50IDwgMDsgZmxpcHBpbmcgbm90IHdhbnRlZCBoZXJlXG5cblx0dGhpcy5sb29rQXQoIHRoaXMucGxhbmUubm9ybWFsICk7XG5cblx0T2JqZWN0M0QucHJvdG90eXBlLnVwZGF0ZU1hdHJpeFdvcmxkLmNhbGwoIHRoaXMsIGZvcmNlICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG4gKiBAYXV0aG9yIHp6ODUgLyBodHRwOi8vZ2l0aHViLmNvbS96ejg1XG4gKiBAYXV0aG9yIGJob3VzdG9uIC8gaHR0cDovL2NsYXJhLmlvXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJvdyBmb3IgdmlzdWFsaXppbmcgZGlyZWN0aW9uc1xuICpcbiAqIFBhcmFtZXRlcnM6XG4gKiAgZGlyIC0gVmVjdG9yM1xuICogIG9yaWdpbiAtIFZlY3RvcjNcbiAqICBsZW5ndGggLSBOdW1iZXJcbiAqICBjb2xvciAtIGNvbG9yIGluIGhleCB2YWx1ZVxuICogIGhlYWRMZW5ndGggLSBOdW1iZXJcbiAqICBoZWFkV2lkdGggLSBOdW1iZXJcbiAqL1xuXG52YXIgX2F4aXMgPSBuZXcgVmVjdG9yMygpO1xudmFyIF9saW5lR2VvbWV0cnksIF9jb25lR2VvbWV0cnk7XG5cbmZ1bmN0aW9uIEFycm93SGVscGVyKCBkaXIsIG9yaWdpbiwgbGVuZ3RoLCBjb2xvciwgaGVhZExlbmd0aCwgaGVhZFdpZHRoICkge1xuXG5cdC8vIGRpciBpcyBhc3N1bWVkIHRvIGJlIG5vcm1hbGl6ZWRcblxuXHRPYmplY3QzRC5jYWxsKCB0aGlzICk7XG5cblx0aWYgKCBkaXIgPT09IHVuZGVmaW5lZCApIGRpciA9IG5ldyBWZWN0b3IzKCAwLCAwLCAxICk7XG5cdGlmICggb3JpZ2luID09PSB1bmRlZmluZWQgKSBvcmlnaW4gPSBuZXcgVmVjdG9yMyggMCwgMCwgMCApO1xuXHRpZiAoIGxlbmd0aCA9PT0gdW5kZWZpbmVkICkgbGVuZ3RoID0gMTtcblx0aWYgKCBjb2xvciA9PT0gdW5kZWZpbmVkICkgY29sb3IgPSAweGZmZmYwMDtcblx0aWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSBoZWFkTGVuZ3RoID0gMC4yICogbGVuZ3RoO1xuXHRpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDtcblxuXHRpZiAoIF9saW5lR2VvbWV0cnkgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdF9saW5lR2VvbWV0cnkgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRfbGluZUdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ3Bvc2l0aW9uJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIFsgMCwgMCwgMCwgMCwgMSwgMCBdLCAzICkgKTtcblxuXHRcdF9jb25lR2VvbWV0cnkgPSBuZXcgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSggMCwgMC41LCAxLCA1LCAxICk7XG5cdFx0X2NvbmVHZW9tZXRyeS50cmFuc2xhdGUoIDAsIC0gMC41LCAwICk7XG5cblx0fVxuXG5cdHRoaXMucG9zaXRpb24uY29weSggb3JpZ2luICk7XG5cblx0dGhpcy5saW5lID0gbmV3IExpbmUoIF9saW5lR2VvbWV0cnksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXHR0aGlzLmxpbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmFkZCggdGhpcy5saW5lICk7XG5cblx0dGhpcy5jb25lID0gbmV3IE1lc2goIF9jb25lR2VvbWV0cnksIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogY29sb3IsIHRvbmVNYXBwZWQ6IGZhbHNlIH0gKSApO1xuXHR0aGlzLmNvbmUubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXHR0aGlzLmFkZCggdGhpcy5jb25lICk7XG5cblx0dGhpcy5zZXREaXJlY3Rpb24oIGRpciApO1xuXHR0aGlzLnNldExlbmd0aCggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblxufVxuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBPYmplY3QzRC5wcm90b3R5cGUgKTtcbkFycm93SGVscGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFycm93SGVscGVyO1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuc2V0RGlyZWN0aW9uID0gZnVuY3Rpb24gKCBkaXIgKSB7XG5cblx0Ly8gZGlyIGlzIGFzc3VtZWQgdG8gYmUgbm9ybWFsaXplZFxuXG5cdGlmICggZGlyLnkgPiAwLjk5OTk5ICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMCwgMCwgMCwgMSApO1xuXG5cdH0gZWxzZSBpZiAoIGRpci55IDwgLSAwLjk5OTk5ICkge1xuXG5cdFx0dGhpcy5xdWF0ZXJuaW9uLnNldCggMSwgMCwgMCwgMCApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHRfYXhpcy5zZXQoIGRpci56LCAwLCAtIGRpci54ICkubm9ybWFsaXplKCk7XG5cblx0XHR2YXIgcmFkaWFucyA9IE1hdGguYWNvcyggZGlyLnkgKTtcblxuXHRcdHRoaXMucXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKCBfYXhpcywgcmFkaWFucyApO1xuXG5cdH1cblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldExlbmd0aCA9IGZ1bmN0aW9uICggbGVuZ3RoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKSB7XG5cblx0aWYgKCBoZWFkTGVuZ3RoID09PSB1bmRlZmluZWQgKSBoZWFkTGVuZ3RoID0gMC4yICogbGVuZ3RoO1xuXHRpZiAoIGhlYWRXaWR0aCA9PT0gdW5kZWZpbmVkICkgaGVhZFdpZHRoID0gMC4yICogaGVhZExlbmd0aDtcblxuXHR0aGlzLmxpbmUuc2NhbGUuc2V0KCAxLCBNYXRoLm1heCggMC4wMDAxLCBsZW5ndGggLSBoZWFkTGVuZ3RoICksIDEgKTsgLy8gc2VlICMxNzQ1OFxuXHR0aGlzLmxpbmUudXBkYXRlTWF0cml4KCk7XG5cblx0dGhpcy5jb25lLnNjYWxlLnNldCggaGVhZFdpZHRoLCBoZWFkTGVuZ3RoLCBoZWFkV2lkdGggKTtcblx0dGhpcy5jb25lLnBvc2l0aW9uLnkgPSBsZW5ndGg7XG5cdHRoaXMuY29uZS51cGRhdGVNYXRyaXgoKTtcblxufTtcblxuQXJyb3dIZWxwZXIucHJvdG90eXBlLnNldENvbG9yID0gZnVuY3Rpb24gKCBjb2xvciApIHtcblxuXHR0aGlzLmxpbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xuXHR0aGlzLmNvbmUubWF0ZXJpYWwuY29sb3Iuc2V0KCBjb2xvciApO1xuXG59O1xuXG5BcnJvd0hlbHBlci5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uICggc291cmNlICkge1xuXG5cdE9iamVjdDNELnByb3RvdHlwZS5jb3B5LmNhbGwoIHRoaXMsIHNvdXJjZSwgZmFsc2UgKTtcblxuXHR0aGlzLmxpbmUuY29weSggc291cmNlLmxpbmUgKTtcblx0dGhpcy5jb25lLmNvcHkoIHNvdXJjZS5jb25lICk7XG5cblx0cmV0dXJuIHRoaXM7XG5cbn07XG5cbkFycm93SGVscGVyLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRyZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IoKS5jb3B5KCB0aGlzICk7XG5cbn07XG5cbi8qKlxuICogQGF1dGhvciBzcm91Y2hlcmF5IC8gaHR0cDovL3Nyb3VjaGVyYXkub3JnL1xuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBBeGVzSGVscGVyKCBzaXplICkge1xuXG5cdHNpemUgPSBzaXplIHx8IDE7XG5cblx0dmFyIHZlcnRpY2VzID0gW1xuXHRcdDAsIDAsIDAsXHRzaXplLCAwLCAwLFxuXHRcdDAsIDAsIDAsXHQwLCBzaXplLCAwLFxuXHRcdDAsIDAsIDAsXHQwLCAwLCBzaXplXG5cdF07XG5cblx0dmFyIGNvbG9ycyA9IFtcblx0XHQxLCAwLCAwLFx0MSwgMC42LCAwLFxuXHRcdDAsIDEsIDAsXHQwLjYsIDEsIDAsXG5cdFx0MCwgMCwgMSxcdDAsIDAuNiwgMVxuXHRdO1xuXG5cdHZhciBnZW9tZXRyeSA9IG5ldyBCdWZmZXJHZW9tZXRyeSgpO1xuXHRnZW9tZXRyeS5zZXRBdHRyaWJ1dGUoICdwb3NpdGlvbicsIG5ldyBGbG9hdDMyQnVmZmVyQXR0cmlidXRlKCB2ZXJ0aWNlcywgMyApICk7XG5cdGdlb21ldHJ5LnNldEF0dHJpYnV0ZSggJ2NvbG9yJywgbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGNvbG9ycywgMyApICk7XG5cblx0dmFyIG1hdGVyaWFsID0gbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IHZlcnRleENvbG9yczogdHJ1ZSwgdG9uZU1hcHBlZDogZmFsc2UgfSApO1xuXG5cdExpbmVTZWdtZW50cy5jYWxsKCB0aGlzLCBnZW9tZXRyeSwgbWF0ZXJpYWwgKTtcblxufVxuXG5BeGVzSGVscGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIExpbmVTZWdtZW50cy5wcm90b3R5cGUgKTtcbkF4ZXNIZWxwZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXhlc0hlbHBlcjtcblxuLyoqXG4gKiBAYXV0aG9yIEVtbWV0dCBMYWxpc2ggLyBlbGFsaXNoXG4gKlxuICogVGhpcyBjbGFzcyBnZW5lcmF0ZXMgYSBQcmVmaWx0ZXJlZCwgTWlwbWFwcGVkIFJhZGlhbmNlIEVudmlyb25tZW50IE1hcFxuICogKFBNUkVNKSBmcm9tIGEgY3ViZU1hcCBlbnZpcm9ubWVudCB0ZXh0dXJlLiBUaGlzIGFsbG93cyBkaWZmZXJlbnQgbGV2ZWxzIG9mXG4gKiBibHVyIHRvIGJlIHF1aWNrbHkgYWNjZXNzZWQgYmFzZWQgb24gbWF0ZXJpYWwgcm91Z2huZXNzLiBJdCBpcyBwYWNrZWQgaW50byBhXG4gKiBzcGVjaWFsIEN1YmVVViBmb3JtYXQgdGhhdCBhbGxvd3MgdXMgdG8gcGVyZm9ybSBjdXN0b20gaW50ZXJwb2xhdGlvbiBzbyB0aGF0XG4gKiB3ZSBjYW4gc3VwcG9ydCBub25saW5lYXIgZm9ybWF0cyBzdWNoIGFzIFJHQkUuIFVubGlrZSBhIHRyYWRpdGlvbmFsIG1pcG1hcFxuICogY2hhaW4sIGl0IG9ubHkgZ29lcyBkb3duIHRvIHRoZSBMT0RfTUlOIGxldmVsIChhYm92ZSksIGFuZCB0aGVuIGNyZWF0ZXMgZXh0cmFcbiAqIGV2ZW4gbW9yZSBmaWx0ZXJlZCAnbWlwcycgYXQgdGhlIHNhbWUgTE9EX01JTiByZXNvbHV0aW9uLCBhc3NvY2lhdGVkIHdpdGhcbiAqIGhpZ2hlciByb3VnaG5lc3MgbGV2ZWxzLiBJbiB0aGlzIHdheSB3ZSBtYWludGFpbiByZXNvbHV0aW9uIHRvIHNtb290aGx5XG4gKiBpbnRlcnBvbGF0ZSBkaWZmdXNlIGxpZ2h0aW5nIHdoaWxlIGxpbWl0aW5nIHNhbXBsaW5nIGNvbXB1dGF0aW9uLlxuICovXG5cbnZhciBMT0RfTUlOID0gNDtcbnZhciBMT0RfTUFYID0gODtcbnZhciBTSVpFX01BWCA9IE1hdGgucG93KCAyLCBMT0RfTUFYICk7XG4vLyBUaGUgc3RhbmRhcmQgZGV2aWF0aW9ucyAocmFkaWFucykgYXNzb2NpYXRlZCB3aXRoIHRoZSBleHRyYSBtaXBzLiBUaGVzZSBhcmVcbi8vIGNob3NlbiB0byBhcHByb3hpbWF0ZSBhIFRyb3dicmlkZ2UtUmVpdHogZGlzdHJpYnV0aW9uIGZ1bmN0aW9uIHRpbWVzIHRoZVxuLy8gZ2VvbWV0cmljIHNoYWRvd2luZyBmdW5jdGlvbi4gVGhlc2Ugc2lnbWEgdmFsdWVzIHNxdWFyZWQgbXVzdCBtYXRjaCB0aGVcbi8vIHZhcmlhbmNlICNkZWZpbmVzIGluIGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudC5nbHNsLmpzLlxudmFyIEVYVFJBX0xPRF9TSUdNQSA9IFsgMC4xMjUsIDAuMjE1LCAwLjM1LCAwLjQ0NiwgMC41MjYsIDAuNTgyIF07XG52YXIgVE9UQUxfTE9EUyA9IExPRF9NQVggLSBMT0RfTUlOICsgMSArIEVYVFJBX0xPRF9TSUdNQS5sZW5ndGg7XG4vLyBUaGUgbWF4aW11bSBsZW5ndGggb2YgdGhlIGJsdXIgZm9yIGxvb3AuIFNtYWxsZXIgc2lnbWFzIHdpbGwgdXNlIGZld2VyXG4vLyBzYW1wbGVzIGFuZCBleGl0IGVhcmx5LCBidXQgbm90IHJlY29tcGlsZSB0aGUgc2hhZGVyLlxudmFyIE1BWF9TQU1QTEVTID0gMjA7XG52YXIgRU5DT0RJTkdTID0ge1xuXHRbIExpbmVhckVuY29kaW5nIF06IDAsXG5cdFsgc1JHQkVuY29kaW5nIF06IDEsXG5cdFsgUkdCRUVuY29kaW5nIF06IDIsXG5cdFsgUkdCTTdFbmNvZGluZyBdOiAzLFxuXHRbIFJHQk0xNkVuY29kaW5nIF06IDQsXG5cdFsgUkdCREVuY29kaW5nIF06IDUsXG5cdFsgR2FtbWFFbmNvZGluZyBdOiA2XG59O1xuXG52YXIgX2ZsYXRDYW1lcmEgPSBuZXcgT3J0aG9ncmFwaGljQ2FtZXJhKCk7XG52YXIgX2JsdXJNYXRlcmlhbCA9IF9nZXRCbHVyU2hhZGVyKCBNQVhfU0FNUExFUyApO1xudmFyIF9lcXVpcmVjdFNoYWRlciA9IG51bGw7XG52YXIgX2N1YmVtYXBTaGFkZXIgPSBudWxsO1xuXG52YXIgeyBfbG9kUGxhbmVzLCBfc2l6ZUxvZHMsIF9zaWdtYXMgfSA9IF9jcmVhdGVQbGFuZXMoKTtcbnZhciBfcGluZ1BvbmdSZW5kZXJUYXJnZXQgPSBudWxsO1xudmFyIF9yZW5kZXJlciA9IG51bGw7XG5cbnZhciBfb2xkVGFyZ2V0ID0gbnVsbDtcblxuLy8gR29sZGVuIFJhdGlvXG52YXIgUEhJID0gKCAxICsgTWF0aC5zcXJ0KCA1ICkgKSAvIDI7XG52YXIgSU5WX1BISSA9IDEgLyBQSEk7XG4vLyBWZXJ0aWNlcyBvZiBhIGRvZGVjYWhlZHJvbiAoZXhjZXB0IHRoZSBvcHBvc2l0ZXMsIHdoaWNoIHJlcHJlc2VudCB0aGVcbi8vIHNhbWUgYXhpcyksIHVzZWQgYXMgYXhpcyBkaXJlY3Rpb25zIGV2ZW5seSBzcHJlYWQgb24gYSBzcGhlcmUuXG52YXIgX2F4aXNEaXJlY3Rpb25zID0gW1xuXHRuZXcgVmVjdG9yMyggMSwgMSwgMSApLFxuXHRuZXcgVmVjdG9yMyggLSAxLCAxLCAxICksXG5cdG5ldyBWZWN0b3IzKCAxLCAxLCAtIDEgKSxcblx0bmV3IFZlY3RvcjMoIC0gMSwgMSwgLSAxICksXG5cdG5ldyBWZWN0b3IzKCAwLCBQSEksIElOVl9QSEkgKSxcblx0bmV3IFZlY3RvcjMoIDAsIFBISSwgLSBJTlZfUEhJICksXG5cdG5ldyBWZWN0b3IzKCBJTlZfUEhJLCAwLCBQSEkgKSxcblx0bmV3IFZlY3RvcjMoIC0gSU5WX1BISSwgMCwgUEhJICksXG5cdG5ldyBWZWN0b3IzKCBQSEksIElOVl9QSEksIDAgKSxcblx0bmV3IFZlY3RvcjMoIC0gUEhJLCBJTlZfUEhJLCAwICkgXTtcblxuZnVuY3Rpb24gUE1SRU1HZW5lcmF0b3IoIHJlbmRlcmVyICkge1xuXG5cdF9yZW5kZXJlciA9IHJlbmRlcmVyO1xuXHRfY29tcGlsZU1hdGVyaWFsKCBfYmx1ck1hdGVyaWFsICk7XG5cbn1cblxuUE1SRU1HZW5lcmF0b3IucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBQTVJFTUdlbmVyYXRvcixcblxuXHQvKipcblx0ICogR2VuZXJhdGVzIGEgUE1SRU0gZnJvbSBhIHN1cHBsaWVkIFNjZW5lLCB3aGljaCBjYW4gYmUgZmFzdGVyIHRoYW4gdXNpbmcgYW5cblx0ICogaW1hZ2UgaWYgbmV0d29ya2luZyBiYW5kd2lkdGggaXMgbG93LiBPcHRpb25hbCBzaWdtYSBzcGVjaWZpZXMgYSBibHVyIHJhZGl1c1xuXHQgKiBpbiByYWRpYW5zIHRvIGJlIGFwcGxpZWQgdG8gdGhlIHNjZW5lIGJlZm9yZSBQTVJFTSBnZW5lcmF0aW9uLiBPcHRpb25hbCBuZWFyXG5cdCAqIGFuZCBmYXIgcGxhbmVzIGVuc3VyZSB0aGUgc2NlbmUgaXMgcmVuZGVyZWQgaW4gaXRzIGVudGlyZXR5ICh0aGUgY3ViZUNhbWVyYVxuXHQgKiBpcyBwbGFjZWQgYXQgdGhlIG9yaWdpbikuXG5cdCAqL1xuXHRmcm9tU2NlbmU6IGZ1bmN0aW9uICggc2NlbmUsIHNpZ21hID0gMCwgbmVhciA9IDAuMSwgZmFyID0gMTAwICkge1xuXG5cdFx0X29sZFRhcmdldCA9IF9yZW5kZXJlci5nZXRSZW5kZXJUYXJnZXQoKTtcblx0XHR2YXIgY3ViZVVWUmVuZGVyVGFyZ2V0ID0gX2FsbG9jYXRlVGFyZ2V0cygpO1xuXHRcdF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0XHRpZiAoIHNpZ21hID4gMCApIHtcblxuXHRcdFx0X2JsdXIoIGN1YmVVVlJlbmRlclRhcmdldCwgMCwgMCwgc2lnbWEgKTtcblxuXHRcdH1cblx0XHRfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0X2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZW5lcmF0ZXMgYSBQTVJFTSBmcm9tIGFuIGVxdWlyZWN0YW5ndWxhciB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiAoUkdCRm9ybWF0KSBvciBIRFIgKFJHQkVGb3JtYXQpLiBUaGUgaWRlYWwgaW5wdXQgaW1hZ2Ugc2l6ZSBpcyAxayAoMTAyNCB4IDUxMiksXG5cdCAqIGFzIHRoaXMgbWF0Y2hlcyBiZXN0IHdpdGggdGhlIDI1NiB4IDI1NiBjdWJlbWFwIG91dHB1dC5cblx0ICovXG5cdGZyb21FcXVpcmVjdGFuZ3VsYXI6IGZ1bmN0aW9uICggZXF1aXJlY3Rhbmd1bGFyICkge1xuXG5cdFx0ZXF1aXJlY3Rhbmd1bGFyLm1hZ0ZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdFx0ZXF1aXJlY3Rhbmd1bGFyLm1pbkZpbHRlciA9IE5lYXJlc3RGaWx0ZXI7XG5cdFx0ZXF1aXJlY3Rhbmd1bGFyLmdlbmVyYXRlTWlwbWFwcyA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIHRoaXMuZnJvbUN1YmVtYXAoIGVxdWlyZWN0YW5ndWxhciApO1xuXG5cdH0sXG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBhIFBNUkVNIGZyb20gYW4gY3ViZW1hcCB0ZXh0dXJlLCB3aGljaCBjYW4gYmUgZWl0aGVyIExEUlxuXHQgKiAoUkdCRm9ybWF0KSBvciBIRFIgKFJHQkVGb3JtYXQpLiBUaGUgaWRlYWwgaW5wdXQgY3ViZSBzaXplIGlzIDI1NiB4IDI1Nixcblx0ICogYXMgdGhpcyBtYXRjaGVzIGJlc3Qgd2l0aCB0aGUgMjU2IHggMjU2IGN1YmVtYXAgb3V0cHV0LlxuXHQgKi9cblx0ZnJvbUN1YmVtYXA6IGZ1bmN0aW9uICggY3ViZW1hcCApIHtcblxuXHRcdF9vbGRUYXJnZXQgPSBfcmVuZGVyZXIuZ2V0UmVuZGVyVGFyZ2V0KCk7XG5cdFx0dmFyIGN1YmVVVlJlbmRlclRhcmdldCA9IF9hbGxvY2F0ZVRhcmdldHMoIGN1YmVtYXAgKTtcblx0XHRfdGV4dHVyZVRvQ3ViZVVWKCBjdWJlbWFwLCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0XHRfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICk7XG5cdFx0X2NsZWFudXAoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXG5cdFx0cmV0dXJuIGN1YmVVVlJlbmRlclRhcmdldDtcblxuXHR9LFxuXG5cdC8qKlxuXHQgKiBQcmUtY29tcGlsZXMgdGhlIGN1YmVtYXAgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICovXG5cdGNvbXBpbGVDdWJlbWFwU2hhZGVyOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRpZiAoIF9jdWJlbWFwU2hhZGVyID09IG51bGwgKSB7XG5cblx0XHRcdF9jdWJlbWFwU2hhZGVyID0gX2dldEN1YmVtYXBTaGFkZXIoKTtcblx0XHRcdF9jb21waWxlTWF0ZXJpYWwoIF9jdWJlbWFwU2hhZGVyICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvKipcblx0ICogUHJlLWNvbXBpbGVzIHRoZSBlcXVpcmVjdGFuZ3VsYXIgc2hhZGVyLiBZb3UgY2FuIGdldCBmYXN0ZXIgc3RhcnQtdXAgYnkgaW52b2tpbmcgdGhpcyBtZXRob2QgZHVyaW5nXG5cdCAqIHlvdXIgdGV4dHVyZSdzIG5ldHdvcmsgZmV0Y2ggZm9yIGluY3JlYXNlZCBjb25jdXJyZW5jeS5cblx0ICovXG5cdGNvbXBpbGVFcXVpcmVjdGFuZ3VsYXJTaGFkZXI6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGlmICggX2VxdWlyZWN0U2hhZGVyID09IG51bGwgKSB7XG5cblx0XHRcdF9lcXVpcmVjdFNoYWRlciA9IF9nZXRFcXVpcmVjdFNoYWRlcigpO1xuXHRcdFx0X2NvbXBpbGVNYXRlcmlhbCggX2VxdWlyZWN0U2hhZGVyICk7XG5cblx0XHR9XG5cblx0fSxcblxuXHQvKipcblx0ICogRGlzcG9zZXMgb2YgdGhlIFBNUkVNR2VuZXJhdG9yJ3MgaW50ZXJuYWwgbWVtb3J5LiBOb3RlIHRoYXQgUE1SRU1HZW5lcmF0b3IgaXMgYSBzdGF0aWMgY2xhc3MsXG5cdCAqIHNvIHlvdSBzaG91bGQgbm90IG5lZWQgbW9yZSB0aGFuIG9uZSBQTVJFTUdlbmVyYXRvciBvYmplY3QuIElmIHlvdSBkbywgY2FsbGluZyBkaXNwb3NlKCkgb25cblx0ICogb25lIG9mIHRoZW0gd2lsbCBjYXVzZSBhbnkgb3RoZXJzIHRvIGFsc28gYmVjb21lIHVudXNhYmxlLlxuXHQgKi9cblx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0X2JsdXJNYXRlcmlhbC5kaXNwb3NlKCk7XG5cblx0XHRpZiAoIF9jdWJlbWFwU2hhZGVyICE9IG51bGwgKSBfY3ViZW1hcFNoYWRlci5kaXNwb3NlKCk7XG5cdFx0aWYgKCBfZXF1aXJlY3RTaGFkZXIgIT0gbnVsbCApIF9lcXVpcmVjdFNoYWRlci5kaXNwb3NlKCk7XG5cblx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBfbG9kUGxhbmVzLmxlbmd0aDsgaSArKyApIHtcblxuXHRcdFx0X2xvZFBsYW5lc1sgaSBdLmRpc3Bvc2UoKTtcblxuXHRcdH1cblxuXHR9LFxuXG59O1xuXG5mdW5jdGlvbiBfY3JlYXRlUGxhbmVzKCkge1xuXG5cdHZhciBfbG9kUGxhbmVzID0gW107XG5cdHZhciBfc2l6ZUxvZHMgPSBbXTtcblx0dmFyIF9zaWdtYXMgPSBbXTtcblxuXHR2YXIgbG9kID0gTE9EX01BWDtcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgVE9UQUxfTE9EUzsgaSArKyApIHtcblxuXHRcdHZhciBzaXplTG9kID0gTWF0aC5wb3coIDIsIGxvZCApO1xuXHRcdF9zaXplTG9kcy5wdXNoKCBzaXplTG9kICk7XG5cdFx0dmFyIHNpZ21hID0gMS4wIC8gc2l6ZUxvZDtcblx0XHRpZiAoIGkgPiBMT0RfTUFYIC0gTE9EX01JTiApIHtcblxuXHRcdFx0c2lnbWEgPSBFWFRSQV9MT0RfU0lHTUFbIGkgLSBMT0RfTUFYICsgTE9EX01JTiAtIDEgXTtcblxuXHRcdH0gZWxzZSBpZiAoIGkgPT0gMCApIHtcblxuXHRcdFx0c2lnbWEgPSAwO1xuXG5cdFx0fVxuXHRcdF9zaWdtYXMucHVzaCggc2lnbWEgKTtcblxuXHRcdHZhciB0ZXhlbFNpemUgPSAxLjAgLyAoIHNpemVMb2QgLSAxICk7XG5cdFx0dmFyIG1pbiA9IC0gdGV4ZWxTaXplIC8gMjtcblx0XHR2YXIgbWF4ID0gMSArIHRleGVsU2l6ZSAvIDI7XG5cdFx0dmFyIHV2MSA9IFsgbWluLCBtaW4sIG1heCwgbWluLCBtYXgsIG1heCwgbWluLCBtaW4sIG1heCwgbWF4LCBtaW4sIG1heCBdO1xuXG5cdFx0dmFyIGN1YmVGYWNlcyA9IDY7XG5cdFx0dmFyIHZlcnRpY2VzID0gNjtcblx0XHR2YXIgcG9zaXRpb25TaXplID0gMztcblx0XHR2YXIgdXZTaXplID0gMjtcblx0XHR2YXIgZmFjZUluZGV4U2l6ZSA9IDE7XG5cblx0XHR2YXIgcG9zaXRpb24gPSBuZXcgRmxvYXQzMkFycmF5KCBwb3NpdGlvblNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXHRcdHZhciB1diA9IG5ldyBGbG9hdDMyQXJyYXkoIHV2U2l6ZSAqIHZlcnRpY2VzICogY3ViZUZhY2VzICk7XG5cdFx0dmFyIGZhY2VJbmRleCA9IG5ldyBGbG9hdDMyQXJyYXkoIGZhY2VJbmRleFNpemUgKiB2ZXJ0aWNlcyAqIGN1YmVGYWNlcyApO1xuXG5cdFx0Zm9yICggdmFyIGZhY2UgPSAwOyBmYWNlIDwgY3ViZUZhY2VzOyBmYWNlICsrICkge1xuXG5cdFx0XHR2YXIgeCA9ICggZmFjZSAlIDMgKSAqIDIgLyAzIC0gMTtcblx0XHRcdHZhciB5ID0gZmFjZSA+IDIgPyAwIDogLSAxO1xuXHRcdFx0dmFyIGNvb3JkaW5hdGVzID0gW1xuXHRcdFx0XHR4LCB5LCAwLFxuXHRcdFx0XHR4ICsgMiAvIDMsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHksIDAsXG5cdFx0XHRcdHggKyAyIC8gMywgeSArIDEsIDAsXG5cdFx0XHRcdHgsIHkgKyAxLCAwXG5cdFx0XHRdO1xuXHRcdFx0cG9zaXRpb24uc2V0KCBjb29yZGluYXRlcywgcG9zaXRpb25TaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHR1di5zZXQoIHV2MSwgdXZTaXplICogdmVydGljZXMgKiBmYWNlICk7XG5cdFx0XHR2YXIgZmlsbCA9IFsgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSwgZmFjZSBdO1xuXHRcdFx0ZmFjZUluZGV4LnNldCggZmlsbCwgZmFjZUluZGV4U2l6ZSAqIHZlcnRpY2VzICogZmFjZSApO1xuXG5cdFx0fVxuXHRcdHZhciBwbGFuZXMgPSBuZXcgQnVmZmVyR2VvbWV0cnkoKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAncG9zaXRpb24nLCBuZXcgQnVmZmVyQXR0cmlidXRlKCBwb3NpdGlvbiwgcG9zaXRpb25TaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAndXYnLCBuZXcgQnVmZmVyQXR0cmlidXRlKCB1diwgdXZTaXplICkgKTtcblx0XHRwbGFuZXMuc2V0QXR0cmlidXRlKCAnZmFjZUluZGV4JywgbmV3IEJ1ZmZlckF0dHJpYnV0ZSggZmFjZUluZGV4LCBmYWNlSW5kZXhTaXplICkgKTtcblx0XHRfbG9kUGxhbmVzLnB1c2goIHBsYW5lcyApO1xuXG5cdFx0aWYgKCBsb2QgPiBMT0RfTUlOICkge1xuXG5cdFx0XHRsb2QgLS07XG5cblx0XHR9XG5cblx0fVxuXHRyZXR1cm4geyBfbG9kUGxhbmVzLCBfc2l6ZUxvZHMsIF9zaWdtYXMgfTtcblxufVxuXG5mdW5jdGlvbiBfYWxsb2NhdGVUYXJnZXRzKCBlcXVpcmVjdGFuZ3VsYXIgKSB7XG5cblx0dmFyIHBhcmFtcyA9IHtcblx0XHRtYWdGaWx0ZXI6IE5lYXJlc3RGaWx0ZXIsXG5cdFx0bWluRmlsdGVyOiBOZWFyZXN0RmlsdGVyLFxuXHRcdGdlbmVyYXRlTWlwbWFwczogZmFsc2UsXG5cdFx0dHlwZTogZXF1aXJlY3Rhbmd1bGFyID8gZXF1aXJlY3Rhbmd1bGFyLnR5cGUgOiBVbnNpZ25lZEJ5dGVUeXBlLFxuXHRcdGZvcm1hdDogZXF1aXJlY3Rhbmd1bGFyID8gZXF1aXJlY3Rhbmd1bGFyLmZvcm1hdCA6IFJHQkVGb3JtYXQsXG5cdFx0ZW5jb2Rpbmc6IGVxdWlyZWN0YW5ndWxhciA/IGVxdWlyZWN0YW5ndWxhci5lbmNvZGluZyA6IFJHQkVFbmNvZGluZyxcblx0XHRkZXB0aEJ1ZmZlcjogZmFsc2UsXG5cdFx0c3RlbmNpbEJ1ZmZlcjogZmFsc2Vcblx0fTtcblx0dmFyIGN1YmVVVlJlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHBhcmFtcyApO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIgPSBlcXVpcmVjdGFuZ3VsYXIgPyBmYWxzZSA6IHRydWU7XG5cdF9waW5nUG9uZ1JlbmRlclRhcmdldCA9IF9jcmVhdGVSZW5kZXJUYXJnZXQoIHBhcmFtcyApO1xuXHRyZXR1cm4gY3ViZVVWUmVuZGVyVGFyZ2V0O1xuXG59XG5cbmZ1bmN0aW9uIF9jbGVhbnVwKCBvdXRwdXRUYXJnZXQgKSB7XG5cblx0X3BpbmdQb25nUmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcblx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggX29sZFRhcmdldCApO1xuXHRvdXRwdXRUYXJnZXQuc2Npc3NvclRlc3QgPSBmYWxzZTtcblx0Ly8gcmVzZXQgdmlld3BvcnQgYW5kIHNjaXNzb3Jcblx0b3V0cHV0VGFyZ2V0LnNldFNpemUoIG91dHB1dFRhcmdldC53aWR0aCwgb3V0cHV0VGFyZ2V0LmhlaWdodCApO1xuXG59XG5cbmZ1bmN0aW9uIF9zY2VuZVRvQ3ViZVVWKCBzY2VuZSwgbmVhciwgZmFyLCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0dmFyIGZvdiA9IDkwO1xuXHR2YXIgYXNwZWN0ID0gMTtcblx0dmFyIGN1YmVDYW1lcmEgPSBuZXcgUGVyc3BlY3RpdmVDYW1lcmEoIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIgKTtcblx0dmFyIHVwU2lnbiA9IFsgMSwgMSwgMSwgMSwgLSAxLCAxIF07XG5cdHZhciBmb3J3YXJkU2lnbiA9IFsgMSwgMSwgLSAxLCAtIDEsIC0gMSwgMSBdO1xuXG5cdHZhciBvdXRwdXRFbmNvZGluZyA9IF9yZW5kZXJlci5vdXRwdXRFbmNvZGluZztcblx0dmFyIHRvbmVNYXBwaW5nID0gX3JlbmRlcmVyLnRvbmVNYXBwaW5nO1xuXHR2YXIgdG9uZU1hcHBpbmdFeHBvc3VyZSA9IF9yZW5kZXJlci50b25lTWFwcGluZ0V4cG9zdXJlO1xuXHR2YXIgY2xlYXJDb2xvciA9IF9yZW5kZXJlci5nZXRDbGVhckNvbG9yKCk7XG5cdHZhciBjbGVhckFscGhhID0gX3JlbmRlcmVyLmdldENsZWFyQWxwaGEoKTtcblxuXHRfcmVuZGVyZXIudG9uZU1hcHBpbmcgPSBMaW5lYXJUb25lTWFwcGluZztcblx0X3JlbmRlcmVyLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSAxLjA7XG5cdF9yZW5kZXJlci5vdXRwdXRFbmNvZGluZyA9IExpbmVhckVuY29kaW5nO1xuXHRzY2VuZS5zY2FsZS56ICo9IC0gMTtcblxuXHR2YXIgYmFja2dyb3VuZCA9IHNjZW5lLmJhY2tncm91bmQ7XG5cdGlmICggYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLmlzQ29sb3IgKSB7XG5cblx0XHRiYWNrZ3JvdW5kLmNvbnZlcnRTUkdCVG9MaW5lYXIoKTtcblx0XHQvLyBDb252ZXJ0IGxpbmVhciB0byBSR0JFXG5cdFx0dmFyIG1heENvbXBvbmVudCA9IE1hdGgubWF4KCBiYWNrZ3JvdW5kLnIsIGJhY2tncm91bmQuZywgYmFja2dyb3VuZC5iICk7XG5cdFx0dmFyIGZFeHAgPSBNYXRoLm1pbiggTWF0aC5tYXgoIE1hdGguY2VpbCggTWF0aC5sb2cyKCBtYXhDb21wb25lbnQgKSApLCAtIDEyOC4wICksIDEyNy4wICk7XG5cdFx0YmFja2dyb3VuZCA9IGJhY2tncm91bmQubXVsdGlwbHlTY2FsYXIoIE1hdGgucG93KCAyLjAsIC0gZkV4cCApICk7XG5cdFx0dmFyIGFscGhhID0gKCBmRXhwICsgMTI4LjAgKSAvIDI1NS4wO1xuXHRcdF9yZW5kZXJlci5zZXRDbGVhckNvbG9yKCBiYWNrZ3JvdW5kLCBhbHBoYSApO1xuXHRcdHNjZW5lLmJhY2tncm91bmQgPSBudWxsO1xuXG5cdH1cblxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCA2OyBpICsrICkge1xuXG5cdFx0dmFyIGNvbCA9IGkgJSAzO1xuXHRcdGlmICggY29sID09IDAgKSB7XG5cblx0XHRcdGN1YmVDYW1lcmEudXAuc2V0KCAwLCB1cFNpZ25bIGkgXSwgMCApO1xuXHRcdFx0Y3ViZUNhbWVyYS5sb29rQXQoIGZvcndhcmRTaWduWyBpIF0sIDAsIDAgKTtcblxuXHRcdH0gZWxzZSBpZiAoIGNvbCA9PSAxICkge1xuXG5cdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgMCwgdXBTaWduWyBpIF0gKTtcblx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCAwLCBmb3J3YXJkU2lnblsgaSBdLCAwICk7XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHRjdWJlQ2FtZXJhLnVwLnNldCggMCwgdXBTaWduWyBpIF0sIDAgKTtcblx0XHRcdGN1YmVDYW1lcmEubG9va0F0KCAwLCAwLCBmb3J3YXJkU2lnblsgaSBdICk7XG5cblx0XHR9XG5cdFx0X3NldFZpZXdwb3J0KCBjdWJlVVZSZW5kZXJUYXJnZXQsXG5cdFx0XHRjb2wgKiBTSVpFX01BWCwgaSA+IDIgPyBTSVpFX01BWCA6IDAsIFNJWkVfTUFYLCBTSVpFX01BWCApO1xuXHRcdF9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQoIGN1YmVVVlJlbmRlclRhcmdldCApO1xuXHRcdF9yZW5kZXJlci5yZW5kZXIoIHNjZW5lLCBjdWJlQ2FtZXJhICk7XG5cblx0fVxuXG5cdF9yZW5kZXJlci50b25lTWFwcGluZyA9IHRvbmVNYXBwaW5nO1xuXHRfcmVuZGVyZXIudG9uZU1hcHBpbmdFeHBvc3VyZSA9IHRvbmVNYXBwaW5nRXhwb3N1cmU7XG5cdF9yZW5kZXJlci5vdXRwdXRFbmNvZGluZyA9IG91dHB1dEVuY29kaW5nO1xuXHRfcmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggY2xlYXJDb2xvciwgY2xlYXJBbHBoYSApO1xuXHRzY2VuZS5zY2FsZS56ICo9IC0gMTtcblxufVxuXG5mdW5jdGlvbiBfdGV4dHVyZVRvQ3ViZVVWKCB0ZXh0dXJlLCBjdWJlVVZSZW5kZXJUYXJnZXQgKSB7XG5cblx0dmFyIHNjZW5lID0gbmV3IFNjZW5lKCk7XG5cdGlmICggdGV4dHVyZS5pc0N1YmVUZXh0dXJlICkge1xuXG5cdFx0aWYgKCBfY3ViZW1hcFNoYWRlciA9PSBudWxsICkge1xuXG5cdFx0XHRfY3ViZW1hcFNoYWRlciA9IF9nZXRDdWJlbWFwU2hhZGVyKCk7XG5cblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdGlmICggX2VxdWlyZWN0U2hhZGVyID09IG51bGwgKSB7XG5cblx0XHRcdF9lcXVpcmVjdFNoYWRlciA9IF9nZXRFcXVpcmVjdFNoYWRlcigpO1xuXG5cdFx0fVxuXG5cdH1cblx0dmFyIG1hdGVyaWFsID0gdGV4dHVyZS5pc0N1YmVUZXh0dXJlID8gX2N1YmVtYXBTaGFkZXIgOiBfZXF1aXJlY3RTaGFkZXI7XG5cdHNjZW5lLmFkZCggbmV3IE1lc2goIF9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKSApO1xuXHR2YXIgdW5pZm9ybXMgPSBtYXRlcmlhbC51bmlmb3JtcztcblxuXHR1bmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRleHR1cmU7XG5cdGlmICggISB0ZXh0dXJlLmlzQ3ViZVRleHR1cmUgKSB7XG5cblx0XHR1bmlmb3Jtc1sgJ3RleGVsU2l6ZScgXS52YWx1ZS5zZXQoIDEuMCAvIHRleHR1cmUuaW1hZ2Uud2lkdGgsIDEuMCAvIHRleHR1cmUuaW1hZ2UuaGVpZ2h0ICk7XG5cblx0fVxuXHR1bmlmb3Jtc1sgJ2lucHV0RW5jb2RpbmcnIF0udmFsdWUgPSBFTkNPRElOR1NbIHRleHR1cmUuZW5jb2RpbmcgXTtcblx0dW5pZm9ybXNbICdvdXRwdXRFbmNvZGluZycgXS52YWx1ZSA9IEVOQ09ESU5HU1sgdGV4dHVyZS5lbmNvZGluZyBdO1xuXG5cdF9zZXRWaWV3cG9ydCggY3ViZVVWUmVuZGVyVGFyZ2V0LCAwLCAwLCAzICogU0laRV9NQVgsIDIgKiBTSVpFX01BWCApO1xuXHRfcmVuZGVyZXIuc2V0UmVuZGVyVGFyZ2V0KCBjdWJlVVZSZW5kZXJUYXJnZXQgKTtcblx0X3JlbmRlcmVyLnJlbmRlciggc2NlbmUsIF9mbGF0Q2FtZXJhICk7XG5cbn1cblxuZnVuY3Rpb24gX2NvbXBpbGVNYXRlcmlhbCggbWF0ZXJpYWwgKSB7XG5cblx0dmFyIHRtcFNjZW5lID0gbmV3IFNjZW5lKCk7XG5cdHRtcFNjZW5lLmFkZCggbmV3IE1lc2goIF9sb2RQbGFuZXNbIDAgXSwgbWF0ZXJpYWwgKSApO1xuXHRfcmVuZGVyZXIuY29tcGlsZSggdG1wU2NlbmUsIF9mbGF0Q2FtZXJhICk7XG5cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZVJlbmRlclRhcmdldCggcGFyYW1zICkge1xuXG5cdHZhciBjdWJlVVZSZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQoIDMgKiBTSVpFX01BWCwgMyAqIFNJWkVfTUFYLCBwYXJhbXMgKTtcblx0Y3ViZVVWUmVuZGVyVGFyZ2V0LnRleHR1cmUubWFwcGluZyA9IEN1YmVVVlJlZmxlY3Rpb25NYXBwaW5nO1xuXHRjdWJlVVZSZW5kZXJUYXJnZXQudGV4dHVyZS5uYW1lID0gJ1BNUkVNLmN1YmVVdic7XG5cdGN1YmVVVlJlbmRlclRhcmdldC5zY2lzc29yVGVzdCA9IHRydWU7XG5cdHJldHVybiBjdWJlVVZSZW5kZXJUYXJnZXQ7XG5cbn1cblxuZnVuY3Rpb24gX3NldFZpZXdwb3J0KCB0YXJnZXQsIHgsIHksIHdpZHRoLCBoZWlnaHQgKSB7XG5cblx0dGFyZ2V0LnZpZXdwb3J0LnNldCggeCwgeSwgd2lkdGgsIGhlaWdodCApO1xuXHR0YXJnZXQuc2Npc3Nvci5zZXQoIHgsIHksIHdpZHRoLCBoZWlnaHQgKTtcblxufVxuXG5mdW5jdGlvbiBfYXBwbHlQTVJFTSggY3ViZVVWUmVuZGVyVGFyZ2V0ICkge1xuXG5cdHZhciBhdXRvQ2xlYXIgPSBfcmVuZGVyZXIuYXV0b0NsZWFyO1xuXHRfcmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cblx0Zm9yICggdmFyIGkgPSAxOyBpIDwgVE9UQUxfTE9EUzsgaSArKyApIHtcblxuXHRcdHZhciBzaWdtYSA9IE1hdGguc3FydChcblx0XHRcdF9zaWdtYXNbIGkgXSAqIF9zaWdtYXNbIGkgXSAtXG5cdFx0X3NpZ21hc1sgaSAtIDEgXSAqIF9zaWdtYXNbIGkgLSAxIF0gKTtcblx0XHR2YXIgcG9sZUF4aXMgPVxuXHRcdF9heGlzRGlyZWN0aW9uc1sgKCBpIC0gMSApICUgX2F4aXNEaXJlY3Rpb25zLmxlbmd0aCBdO1xuXHRcdF9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGkgLSAxLCBpLCBzaWdtYSwgcG9sZUF4aXMgKTtcblxuXHR9XG5cblx0X3JlbmRlcmVyLmF1dG9DbGVhciA9IGF1dG9DbGVhcjtcblxufVxuXG4vKipcbiAqIFRoaXMgaXMgYSB0d28tcGFzcyBHYXVzc2lhbiBibHVyIGZvciBhIGN1YmVtYXAuIE5vcm1hbGx5IHRoaXMgaXMgZG9uZVxuICogdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5LCBidXQgdGhpcyBicmVha3MgZG93biBvbiBhIGN1YmUuIEhlcmUgd2UgYXBwbHlcbiAqIHRoZSBibHVyIGxhdGl0dWRpbmFsbHkgKGFyb3VuZCB0aGUgcG9sZXMpLCBhbmQgdGhlbiBsb25naXR1ZGluYWxseSAodG93YXJkc1xuICogdGhlIHBvbGVzKSB0byBhcHByb3hpbWF0ZSB0aGUgb3J0aG9nb25hbGx5LXNlcGFyYWJsZSBibHVyLiBJdCBpcyBsZWFzdFxuICogYWNjdXJhdGUgYXQgdGhlIHBvbGVzLCBidXQgc3RpbGwgZG9lcyBhIGRlY2VudCBqb2IuXG4gKi9cbmZ1bmN0aW9uIF9ibHVyKCBjdWJlVVZSZW5kZXJUYXJnZXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hLCBwb2xlQXhpcyApIHtcblxuXHRfaGFsZkJsdXIoXG5cdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdF9waW5nUG9uZ1JlbmRlclRhcmdldCxcblx0XHRsb2RJbixcblx0XHRsb2RPdXQsXG5cdFx0c2lnbWEsXG5cdFx0J2xhdGl0dWRpbmFsJyxcblx0XHRwb2xlQXhpcyApO1xuXG5cdF9oYWxmQmx1cihcblx0XHRfcGluZ1BvbmdSZW5kZXJUYXJnZXQsXG5cdFx0Y3ViZVVWUmVuZGVyVGFyZ2V0LFxuXHRcdGxvZE91dCxcblx0XHRsb2RPdXQsXG5cdFx0c2lnbWEsXG5cdFx0J2xvbmdpdHVkaW5hbCcsXG5cdFx0cG9sZUF4aXMgKTtcblxufVxuXG5mdW5jdGlvbiBfaGFsZkJsdXIoIHRhcmdldEluLCB0YXJnZXRPdXQsIGxvZEluLCBsb2RPdXQsIHNpZ21hUmFkaWFucywgZGlyZWN0aW9uLCBwb2xlQXhpcyApIHtcblxuXHRpZiAoIGRpcmVjdGlvbiAhPT0gJ2xhdGl0dWRpbmFsJyAmJiBkaXJlY3Rpb24gIT09ICdsb25naXR1ZGluYWwnICkge1xuXG5cdFx0Y29uc29sZS5lcnJvcihcblx0XHRcdCdibHVyIGRpcmVjdGlvbiBtdXN0IGJlIGVpdGhlciBsYXRpdHVkaW5hbCBvciBsb25naXR1ZGluYWwhJyApO1xuXG5cdH1cblxuXHQvLyBOdW1iZXIgb2Ygc3RhbmRhcmQgZGV2aWF0aW9ucyBhdCB3aGljaCB0byBjdXQgb2ZmIHRoZSBkaXNjcmV0ZSBhcHByb3hpbWF0aW9uLlxuXHR2YXIgU1RBTkRBUkRfREVWSUFUSU9OUyA9IDM7XG5cblx0dmFyIGJsdXJTY2VuZSA9IG5ldyBTY2VuZSgpO1xuXHRibHVyU2NlbmUuYWRkKCBuZXcgTWVzaCggX2xvZFBsYW5lc1sgbG9kT3V0IF0sIF9ibHVyTWF0ZXJpYWwgKSApO1xuXHR2YXIgYmx1clVuaWZvcm1zID0gX2JsdXJNYXRlcmlhbC51bmlmb3JtcztcblxuXHR2YXIgcGl4ZWxzID0gX3NpemVMb2RzWyBsb2RJbiBdIC0gMTtcblx0dmFyIHJhZGlhbnNQZXJQaXhlbCA9IGlzRmluaXRlKCBzaWdtYVJhZGlhbnMgKSA/IE1hdGguUEkgLyAoIDIgKiBwaXhlbHMgKSA6IDIgKiBNYXRoLlBJIC8gKCAyICogTUFYX1NBTVBMRVMgLSAxICk7XG5cdHZhciBzaWdtYVBpeGVscyA9IHNpZ21hUmFkaWFucyAvIHJhZGlhbnNQZXJQaXhlbDtcblx0dmFyIHNhbXBsZXMgPSBpc0Zpbml0ZSggc2lnbWFSYWRpYW5zICkgPyAxICsgTWF0aC5mbG9vciggU1RBTkRBUkRfREVWSUFUSU9OUyAqIHNpZ21hUGl4ZWxzICkgOiBNQVhfU0FNUExFUztcblxuXHRpZiAoIHNhbXBsZXMgPiBNQVhfU0FNUExFUyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggYHNpZ21hUmFkaWFucywgJHtcblx0XHRcdHNpZ21hUmFkaWFuc30sIGlzIHRvbyBsYXJnZSBhbmQgd2lsbCBjbGlwLCBhcyBpdCByZXF1ZXN0ZWQgJHtcblx0XHRcdHNhbXBsZXN9IHNhbXBsZXMgd2hlbiB0aGUgbWF4aW11bSBpcyBzZXQgdG8gJHtNQVhfU0FNUExFU31gICk7XG5cblx0fVxuXG5cdHZhciB3ZWlnaHRzID0gW107XG5cdHZhciBzdW0gPSAwO1xuXG5cdGZvciAoIHZhciBpID0gMDsgaSA8IE1BWF9TQU1QTEVTOyArKyBpICkge1xuXG5cdFx0dmFyIHggPSBpIC8gc2lnbWFQaXhlbHM7XG5cdFx0dmFyIHdlaWdodCA9IE1hdGguZXhwKCAtIHggKiB4IC8gMiApO1xuXHRcdHdlaWdodHMucHVzaCggd2VpZ2h0ICk7XG5cblx0XHRpZiAoIGkgPT0gMCApIHtcblxuXHRcdFx0c3VtICs9IHdlaWdodDtcblxuXHRcdH0gZWxzZSBpZiAoIGkgPCBzYW1wbGVzICkge1xuXG5cdFx0XHRzdW0gKz0gMiAqIHdlaWdodDtcblxuXHRcdH1cblxuXHR9XG5cblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgd2VpZ2h0cy5sZW5ndGg7IGkgKysgKSB7XG5cblx0XHR3ZWlnaHRzWyBpIF0gPSB3ZWlnaHRzWyBpIF0gLyBzdW07XG5cblx0fVxuXG5cdGJsdXJVbmlmb3Jtc1sgJ2Vudk1hcCcgXS52YWx1ZSA9IHRhcmdldEluLnRleHR1cmU7XG5cdGJsdXJVbmlmb3Jtc1sgJ3NhbXBsZXMnIF0udmFsdWUgPSBzYW1wbGVzO1xuXHRibHVyVW5pZm9ybXNbICd3ZWlnaHRzJyBdLnZhbHVlID0gd2VpZ2h0cztcblx0Ymx1clVuaWZvcm1zWyAnbGF0aXR1ZGluYWwnIF0udmFsdWUgPSBkaXJlY3Rpb24gPT09ICdsYXRpdHVkaW5hbCc7XG5cdGlmICggcG9sZUF4aXMgKSB7XG5cblx0XHRibHVyVW5pZm9ybXNbICdwb2xlQXhpcycgXS52YWx1ZSA9IHBvbGVBeGlzO1xuXG5cdH1cblx0Ymx1clVuaWZvcm1zWyAnZFRoZXRhJyBdLnZhbHVlID0gcmFkaWFuc1BlclBpeGVsO1xuXHRibHVyVW5pZm9ybXNbICdtaXBJbnQnIF0udmFsdWUgPSBMT0RfTUFYIC0gbG9kSW47XG5cdGJsdXJVbmlmb3Jtc1sgJ2lucHV0RW5jb2RpbmcnIF0udmFsdWUgPSBFTkNPRElOR1NbIHRhcmdldEluLnRleHR1cmUuZW5jb2RpbmcgXTtcblx0Ymx1clVuaWZvcm1zWyAnb3V0cHV0RW5jb2RpbmcnIF0udmFsdWUgPSBFTkNPRElOR1NbIHRhcmdldEluLnRleHR1cmUuZW5jb2RpbmcgXTtcblxuXHR2YXIgb3V0cHV0U2l6ZSA9IF9zaXplTG9kc1sgbG9kT3V0IF07XG5cdHZhciB4ID0gMyAqIE1hdGgubWF4KCAwLCBTSVpFX01BWCAtIDIgKiBvdXRwdXRTaXplICk7XG5cdHZhciB5ID0gKCBsb2RPdXQgPT09IDAgPyAwIDogMiAqIFNJWkVfTUFYICkgK1xuXHQyICogb3V0cHV0U2l6ZSAqXG5cdFx0KCBsb2RPdXQgPiBMT0RfTUFYIC0gTE9EX01JTiA/IGxvZE91dCAtIExPRF9NQVggKyBMT0RfTUlOIDogMCApO1xuXG5cdF9zZXRWaWV3cG9ydCggdGFyZ2V0T3V0LCB4LCB5LCAzICogb3V0cHV0U2l6ZSwgMiAqIG91dHB1dFNpemUgKTtcblx0X3JlbmRlcmVyLnNldFJlbmRlclRhcmdldCggdGFyZ2V0T3V0ICk7XG5cdF9yZW5kZXJlci5yZW5kZXIoIGJsdXJTY2VuZSwgX2ZsYXRDYW1lcmEgKTtcblxufVxuXG5mdW5jdGlvbiBfZ2V0Qmx1clNoYWRlciggbWF4U2FtcGxlcyApIHtcblxuXHR2YXIgd2VpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkoIG1heFNhbXBsZXMgKTtcblx0dmFyIHBvbGVBeGlzID0gbmV3IFZlY3RvcjMoIDAsIDEsIDAgKTtcblx0dmFyIHNoYWRlck1hdGVyaWFsID0gbmV3IFJhd1NoYWRlck1hdGVyaWFsKCB7XG5cblx0XHRkZWZpbmVzOiB7ICduJzogbWF4U2FtcGxlcyB9LFxuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdCdlbnZNYXAnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHQnc2FtcGxlcyc6IHsgdmFsdWU6IDEgfSxcblx0XHRcdCd3ZWlnaHRzJzogeyB2YWx1ZTogd2VpZ2h0cyB9LFxuXHRcdFx0J2xhdGl0dWRpbmFsJzogeyB2YWx1ZTogZmFsc2UgfSxcblx0XHRcdCdkVGhldGEnOiB7IHZhbHVlOiAwIH0sXG5cdFx0XHQnbWlwSW50JzogeyB2YWx1ZTogMCB9LFxuXHRcdFx0J3BvbGVBeGlzJzogeyB2YWx1ZTogcG9sZUF4aXMgfSxcblx0XHRcdCdpbnB1dEVuY29kaW5nJzogeyB2YWx1ZTogRU5DT0RJTkdTWyBMaW5lYXJFbmNvZGluZyBdIH0sXG5cdFx0XHQnb3V0cHV0RW5jb2RpbmcnOiB7IHZhbHVlOiBFTkNPRElOR1NbIExpbmVhckVuY29kaW5nIF0gfVxuXHRcdH0sXG5cblx0XHR2ZXJ0ZXhTaGFkZXI6IF9nZXRDb21tb25WZXJ0ZXhTaGFkZXIoKSxcblxuXHRcdGZyYWdtZW50U2hhZGVyOiBgXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcbnByZWNpc2lvbiBtZWRpdW1wIGludDtcbnZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xudW5pZm9ybSBzYW1wbGVyMkQgZW52TWFwO1xudW5pZm9ybSBpbnQgc2FtcGxlcztcbnVuaWZvcm0gZmxvYXQgd2VpZ2h0c1tuXTtcbnVuaWZvcm0gYm9vbCBsYXRpdHVkaW5hbDtcbnVuaWZvcm0gZmxvYXQgZFRoZXRhO1xudW5pZm9ybSBmbG9hdCBtaXBJbnQ7XG51bmlmb3JtIHZlYzMgcG9sZUF4aXM7XG5cbiR7X2dldEVuY29kaW5ncygpfVxuXG4jZGVmaW5lIEVOVk1BUF9UWVBFX0NVQkVfVVZcbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XG5cbnZlYzMgZ2V0U2FtcGxlKGZsb2F0IHRoZXRhLCB2ZWMzIGF4aXMpIHtcblx0ZmxvYXQgY29zVGhldGEgPSBjb3ModGhldGEpO1xuXHQvLyBSb2RyaWd1ZXMnIGF4aXMtYW5nbGUgcm90YXRpb25cblx0dmVjMyBzYW1wbGVEaXJlY3Rpb24gPSB2T3V0cHV0RGlyZWN0aW9uICogY29zVGhldGFcblx0XHQrIGNyb3NzKGF4aXMsIHZPdXRwdXREaXJlY3Rpb24pICogc2luKHRoZXRhKVxuXHRcdCsgYXhpcyAqIGRvdChheGlzLCB2T3V0cHV0RGlyZWN0aW9uKSAqICgxLjAgLSBjb3NUaGV0YSk7XG5cdHJldHVybiBiaWxpbmVhckN1YmVVVihlbnZNYXAsIHNhbXBsZURpcmVjdGlvbiwgbWlwSW50KTtcbn1cblxudm9pZCBtYWluKCkge1xuXHR2ZWMzIGF4aXMgPSBsYXRpdHVkaW5hbCA/IHBvbGVBeGlzIDogY3Jvc3MocG9sZUF4aXMsIHZPdXRwdXREaXJlY3Rpb24pO1xuXHRpZiAoYWxsKGVxdWFsKGF4aXMsIHZlYzMoMC4wKSkpKVxuXHRcdGF4aXMgPSB2ZWMzKHZPdXRwdXREaXJlY3Rpb24ueiwgMC4wLCAtIHZPdXRwdXREaXJlY3Rpb24ueCk7XG5cdGF4aXMgPSBub3JtYWxpemUoYXhpcyk7XG5cdGdsX0ZyYWdDb2xvciA9IHZlYzQoMC4wKTtcblx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzWzBdICogZ2V0U2FtcGxlKDAuMCwgYXhpcyk7XG5cdGZvciAoaW50IGkgPSAxOyBpIDwgbjsgaSsrKSB7XG5cdFx0aWYgKGkgPj0gc2FtcGxlcylcblx0XHRcdGJyZWFrO1xuXHRcdGZsb2F0IHRoZXRhID0gZFRoZXRhICogZmxvYXQoaSk7XG5cdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzW2ldICogZ2V0U2FtcGxlKC0xLjAgKiB0aGV0YSwgYXhpcyk7XG5cdFx0Z2xfRnJhZ0NvbG9yLnJnYiArPSB3ZWlnaHRzW2ldICogZ2V0U2FtcGxlKHRoZXRhLCBheGlzKTtcblx0fVxuXHRnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKGdsX0ZyYWdDb2xvcik7XG59XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cblx0c2hhZGVyTWF0ZXJpYWwudHlwZSA9ICdTcGhlcmljYWxHYXVzc2lhbkJsdXInO1xuXG5cdHJldHVybiBzaGFkZXJNYXRlcmlhbDtcblxufVxuXG5mdW5jdGlvbiBfZ2V0RXF1aXJlY3RTaGFkZXIoKSB7XG5cblx0dmFyIHRleGVsU2l6ZSA9IG5ldyBWZWN0b3IyKCAxLCAxICk7XG5cdHZhciBzaGFkZXJNYXRlcmlhbCA9IG5ldyBSYXdTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdCdlbnZNYXAnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHQndGV4ZWxTaXplJzogeyB2YWx1ZTogdGV4ZWxTaXplIH0sXG5cdFx0XHQnaW5wdXRFbmNvZGluZyc6IHsgdmFsdWU6IEVOQ09ESU5HU1sgTGluZWFyRW5jb2RpbmcgXSB9LFxuXHRcdFx0J291dHB1dEVuY29kaW5nJzogeyB2YWx1ZTogRU5DT0RJTkdTWyBMaW5lYXJFbmNvZGluZyBdIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksXG5cblx0XHRmcmFnbWVudFNoYWRlcjogYFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5wcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG52YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcbnVuaWZvcm0gc2FtcGxlcjJEIGVudk1hcDtcbnVuaWZvcm0gdmVjMiB0ZXhlbFNpemU7XG5cbiR7X2dldEVuY29kaW5ncygpfVxuXG4jZGVmaW5lIFJFQ0lQUk9DQUxfUEkgMC4zMTgzMDk4ODYxOFxuI2RlZmluZSBSRUNJUFJPQ0FMX1BJMiAwLjE1OTE1NDk0XG5cbnZvaWQgbWFpbigpIHtcblx0Z2xfRnJhZ0NvbG9yID0gdmVjNCgwLjApO1xuXHR2ZWMzIG91dHB1dERpcmVjdGlvbiA9IG5vcm1hbGl6ZSh2T3V0cHV0RGlyZWN0aW9uKTtcblx0dmVjMiB1djtcblx0dXYueSA9IGFzaW4oY2xhbXAob3V0cHV0RGlyZWN0aW9uLnksIC0xLjAsIDEuMCkpICogUkVDSVBST0NBTF9QSSArIDAuNTtcblx0dXYueCA9IGF0YW4ob3V0cHV0RGlyZWN0aW9uLnosIG91dHB1dERpcmVjdGlvbi54KSAqIFJFQ0lQUk9DQUxfUEkyICsgMC41O1xuXHR2ZWMyIGYgPSBmcmFjdCh1diAvIHRleGVsU2l6ZSAtIDAuNSk7XG5cdHV2IC09IGYgKiB0ZXhlbFNpemU7XG5cdHZlYzMgdGwgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2KSkucmdiO1xuXHR1di54ICs9IHRleGVsU2l6ZS54O1xuXHR2ZWMzIHRyID0gZW52TWFwVGV4ZWxUb0xpbmVhcih0ZXh0dXJlMkQoZW52TWFwLCB1dikpLnJnYjtcblx0dXYueSArPSB0ZXhlbFNpemUueTtcblx0dmVjMyBiciA9IGVudk1hcFRleGVsVG9MaW5lYXIodGV4dHVyZTJEKGVudk1hcCwgdXYpKS5yZ2I7XG5cdHV2LnggLT0gdGV4ZWxTaXplLng7XG5cdHZlYzMgYmwgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmUyRChlbnZNYXAsIHV2KSkucmdiO1xuXHR2ZWMzIHRtID0gbWl4KHRsLCB0ciwgZi54KTtcblx0dmVjMyBibSA9IG1peChibCwgYnIsIGYueCk7XG5cdGdsX0ZyYWdDb2xvci5yZ2IgPSBtaXgodG0sIGJtLCBmLnkpO1xuXHRnbF9GcmFnQ29sb3IgPSBsaW5lYXJUb091dHB1dFRleGVsKGdsX0ZyYWdDb2xvcik7XG59XG5cdFx0YCxcblxuXHRcdGJsZW5kaW5nOiBOb0JsZW5kaW5nLFxuXHRcdGRlcHRoVGVzdDogZmFsc2UsXG5cdFx0ZGVwdGhXcml0ZTogZmFsc2VcblxuXHR9ICk7XG5cblx0c2hhZGVyTWF0ZXJpYWwudHlwZSA9ICdFcXVpcmVjdGFuZ3VsYXJUb0N1YmVVVic7XG5cblx0cmV0dXJuIHNoYWRlck1hdGVyaWFsO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRDdWJlbWFwU2hhZGVyKCkge1xuXG5cdHZhciBzaGFkZXJNYXRlcmlhbCA9IG5ldyBSYXdTaGFkZXJNYXRlcmlhbCgge1xuXG5cdFx0dW5pZm9ybXM6IHtcblx0XHRcdCdlbnZNYXAnOiB7IHZhbHVlOiBudWxsIH0sXG5cdFx0XHQnaW5wdXRFbmNvZGluZyc6IHsgdmFsdWU6IEVOQ09ESU5HU1sgTGluZWFyRW5jb2RpbmcgXSB9LFxuXHRcdFx0J291dHB1dEVuY29kaW5nJzogeyB2YWx1ZTogRU5DT0RJTkdTWyBMaW5lYXJFbmNvZGluZyBdIH1cblx0XHR9LFxuXG5cdFx0dmVydGV4U2hhZGVyOiBfZ2V0Q29tbW9uVmVydGV4U2hhZGVyKCksXG5cblx0XHRmcmFnbWVudFNoYWRlcjogYFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5wcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG52YXJ5aW5nIHZlYzMgdk91dHB1dERpcmVjdGlvbjtcbnVuaWZvcm0gc2FtcGxlckN1YmUgZW52TWFwO1xuXG4ke19nZXRFbmNvZGluZ3MoKX1cblxudm9pZCBtYWluKCkge1xuXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KDAuMCk7XG5cdGdsX0ZyYWdDb2xvci5yZ2IgPSBlbnZNYXBUZXhlbFRvTGluZWFyKHRleHR1cmVDdWJlKGVudk1hcCwgdmVjMyggLSB2T3V0cHV0RGlyZWN0aW9uLngsIHZPdXRwdXREaXJlY3Rpb24ueXogKSkpLnJnYjtcblx0Z2xfRnJhZ0NvbG9yID0gbGluZWFyVG9PdXRwdXRUZXhlbChnbF9GcmFnQ29sb3IpO1xufVxuXHRcdGAsXG5cblx0XHRibGVuZGluZzogTm9CbGVuZGluZyxcblx0XHRkZXB0aFRlc3Q6IGZhbHNlLFxuXHRcdGRlcHRoV3JpdGU6IGZhbHNlXG5cblx0fSApO1xuXG5cdHNoYWRlck1hdGVyaWFsLnR5cGUgPSAnQ3ViZW1hcFRvQ3ViZVVWJztcblxuXHRyZXR1cm4gc2hhZGVyTWF0ZXJpYWw7XG5cbn1cblxuZnVuY3Rpb24gX2dldENvbW1vblZlcnRleFNoYWRlcigpIHtcblxuXHRyZXR1cm4gYFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5wcmVjaXNpb24gbWVkaXVtcCBpbnQ7XG5hdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcbmF0dHJpYnV0ZSB2ZWMyIHV2O1xuYXR0cmlidXRlIGZsb2F0IGZhY2VJbmRleDtcbnZhcnlpbmcgdmVjMyB2T3V0cHV0RGlyZWN0aW9uO1xudmVjMyBnZXREaXJlY3Rpb24odmVjMiB1diwgZmxvYXQgZmFjZSkge1xuXHR1diA9IDIuMCAqIHV2IC0gMS4wO1xuXHR2ZWMzIGRpcmVjdGlvbiA9IHZlYzModXYsIDEuMCk7XG5cdGlmIChmYWNlID09IDAuMCkge1xuXHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7XG5cdFx0ZGlyZWN0aW9uLnogKj0gLTEuMDtcblx0fSBlbHNlIGlmIChmYWNlID09IDEuMCkge1xuXHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi54enk7XG5cdFx0ZGlyZWN0aW9uLnogKj0gLTEuMDtcblx0fSBlbHNlIGlmIChmYWNlID09IDMuMCkge1xuXHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi56eXg7XG5cdFx0ZGlyZWN0aW9uLnggKj0gLTEuMDtcblx0fSBlbHNlIGlmIChmYWNlID09IDQuMCkge1xuXHRcdGRpcmVjdGlvbiA9IGRpcmVjdGlvbi54enk7XG5cdFx0ZGlyZWN0aW9uLnkgKj0gLTEuMDtcblx0fSBlbHNlIGlmIChmYWNlID09IDUuMCkge1xuXHRcdGRpcmVjdGlvbi54eiAqPSAtMS4wO1xuXHR9XG5cdHJldHVybiBkaXJlY3Rpb247XG59XG52b2lkIG1haW4oKSB7XG5cdHZPdXRwdXREaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24odXYsIGZhY2VJbmRleCk7XG5cdGdsX1Bvc2l0aW9uID0gdmVjNCggcG9zaXRpb24sIDEuMCApO1xufVxuXHRgO1xuXG59XG5cbmZ1bmN0aW9uIF9nZXRFbmNvZGluZ3MoKSB7XG5cblx0cmV0dXJuIGBcbnVuaWZvcm0gaW50IGlucHV0RW5jb2Rpbmc7XG51bmlmb3JtIGludCBvdXRwdXRFbmNvZGluZztcblxuI2luY2x1ZGUgPGVuY29kaW5nc19wYXJzX2ZyYWdtZW50PlxuXG52ZWM0IGlucHV0VGV4ZWxUb0xpbmVhcih2ZWM0IHZhbHVlKXtcblx0aWYoaW5wdXRFbmNvZGluZyA9PSAwKXtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1lbHNlIGlmKGlucHV0RW5jb2RpbmcgPT0gMSl7XG5cdFx0cmV0dXJuIHNSR0JUb0xpbmVhcih2YWx1ZSk7XG5cdH1lbHNlIGlmKGlucHV0RW5jb2RpbmcgPT0gMil7XG5cdFx0cmV0dXJuIFJHQkVUb0xpbmVhcih2YWx1ZSk7XG5cdH1lbHNlIGlmKGlucHV0RW5jb2RpbmcgPT0gMyl7XG5cdFx0cmV0dXJuIFJHQk1Ub0xpbmVhcih2YWx1ZSwgNy4wKTtcblx0fWVsc2UgaWYoaW5wdXRFbmNvZGluZyA9PSA0KXtcblx0XHRyZXR1cm4gUkdCTVRvTGluZWFyKHZhbHVlLCAxNi4wKTtcblx0fWVsc2UgaWYoaW5wdXRFbmNvZGluZyA9PSA1KXtcblx0XHRyZXR1cm4gUkdCRFRvTGluZWFyKHZhbHVlLCAyNTYuMCk7XG5cdH1lbHNle1xuXHRcdHJldHVybiBHYW1tYVRvTGluZWFyKHZhbHVlLCAyLjIpO1xuXHR9XG59XG5cbnZlYzQgbGluZWFyVG9PdXRwdXRUZXhlbCh2ZWM0IHZhbHVlKXtcblx0aWYob3V0cHV0RW5jb2RpbmcgPT0gMCl7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9ZWxzZSBpZihvdXRwdXRFbmNvZGluZyA9PSAxKXtcblx0XHRyZXR1cm4gTGluZWFyVG9zUkdCKHZhbHVlKTtcblx0fWVsc2UgaWYob3V0cHV0RW5jb2RpbmcgPT0gMil7XG5cdFx0cmV0dXJuIExpbmVhclRvUkdCRSh2YWx1ZSk7XG5cdH1lbHNlIGlmKG91dHB1dEVuY29kaW5nID09IDMpe1xuXHRcdHJldHVybiBMaW5lYXJUb1JHQk0odmFsdWUsIDcuMCk7XG5cdH1lbHNlIGlmKG91dHB1dEVuY29kaW5nID09IDQpe1xuXHRcdHJldHVybiBMaW5lYXJUb1JHQk0odmFsdWUsIDE2LjApO1xuXHR9ZWxzZSBpZihvdXRwdXRFbmNvZGluZyA9PSA1KXtcblx0XHRyZXR1cm4gTGluZWFyVG9SR0JEKHZhbHVlLCAyNTYuMCk7XG5cdH1lbHNle1xuXHRcdHJldHVybiBMaW5lYXJUb0dhbW1hKHZhbHVlLCAyLjIpO1xuXHR9XG59XG5cbnZlYzQgZW52TWFwVGV4ZWxUb0xpbmVhcih2ZWM0IGNvbG9yKSB7XG5cdHJldHVybiBpbnB1dFRleGVsVG9MaW5lYXIoY29sb3IpO1xufVxuXHRgO1xuXG59XG5cbi8qKlxuICogQGF1dGhvciBtcmRvb2IgLyBodHRwOi8vbXJkb29iLmNvbS9cbiAqL1xuXG5mdW5jdGlvbiBGYWNlNCggYSwgYiwgYywgZCwgbm9ybWFsLCBjb2xvciwgbWF0ZXJpYWxJbmRleCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5GYWNlNCBoYXMgYmVlbiByZW1vdmVkLiBBIFRIUkVFLkZhY2UzIHdpbGwgYmUgY3JlYXRlZCBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBGYWNlMyggYSwgYiwgYywgbm9ybWFsLCBjb2xvciwgbWF0ZXJpYWxJbmRleCApO1xuXG59XG5cbnZhciBMaW5lU3RyaXAgPSAwO1xudmFyIExpbmVQaWVjZXMgPSAxO1xudmFyIE5vQ29sb3JzID0gMDtcbnZhciBGYWNlQ29sb3JzID0gMTtcbnZhciBWZXJ0ZXhDb2xvcnMgPSAyO1xuXG5mdW5jdGlvbiBNZXNoRmFjZU1hdGVyaWFsKCBtYXRlcmlhbHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWVzaEZhY2VNYXRlcmlhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYW4gQXJyYXkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBtYXRlcmlhbHM7XG5cbn1cblxuZnVuY3Rpb24gTXVsdGlNYXRlcmlhbCggbWF0ZXJpYWxzICkge1xuXG5cdGlmICggbWF0ZXJpYWxzID09PSB1bmRlZmluZWQgKSBtYXRlcmlhbHMgPSBbXTtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5NdWx0aU1hdGVyaWFsIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBhbiBBcnJheSBpbnN0ZWFkLicgKTtcblx0bWF0ZXJpYWxzLmlzTXVsdGlNYXRlcmlhbCA9IHRydWU7XG5cdG1hdGVyaWFscy5tYXRlcmlhbHMgPSBtYXRlcmlhbHM7XG5cdG1hdGVyaWFscy5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdHJldHVybiBtYXRlcmlhbHMuc2xpY2UoKTtcblxuXHR9O1xuXHRyZXR1cm4gbWF0ZXJpYWxzO1xuXG59XG5cbmZ1bmN0aW9uIFBvaW50Q2xvdWQoIGdlb21ldHJ5LCBtYXRlcmlhbCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Qb2ludENsb3VkIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuUG9pbnRzLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHMoIGdlb21ldHJ5LCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlKCBtYXRlcmlhbCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZSBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlNwcml0ZS4nICk7XG5cdHJldHVybiBuZXcgU3ByaXRlKCBtYXRlcmlhbCApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlU3lzdGVtKCBnZW9tZXRyeSwgbWF0ZXJpYWwgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuUGFydGljbGVTeXN0ZW0gaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHMuJyApO1xuXHRyZXR1cm4gbmV3IFBvaW50cyggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG5cbn1cblxuZnVuY3Rpb24gUG9pbnRDbG91ZE1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBvaW50Q2xvdWRNYXRlcmlhbCBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLlBvaW50c01hdGVyaWFsLicgKTtcblx0cmV0dXJuIG5ldyBQb2ludHNNYXRlcmlhbCggcGFyYW1ldGVycyApO1xuXG59XG5cbmZ1bmN0aW9uIFBhcnRpY2xlQmFzaWNNYXRlcmlhbCggcGFyYW1ldGVycyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXJ0aWNsZUJhc2ljTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBQYXJ0aWNsZVN5c3RlbU1hdGVyaWFsKCBwYXJhbWV0ZXJzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwgaGFzIGJlZW4gcmVuYW1lZCB0byBUSFJFRS5Qb2ludHNNYXRlcmlhbC4nICk7XG5cdHJldHVybiBuZXcgUG9pbnRzTWF0ZXJpYWwoIHBhcmFtZXRlcnMgKTtcblxufVxuXG5mdW5jdGlvbiBWZXJ0ZXgoIHgsIHksIHogKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVydGV4IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5WZWN0b3IzIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFZlY3RvcjMoIHgsIHksIHogKTtcblxufVxuXG4vL1xuXG5mdW5jdGlvbiBEeW5hbWljQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZSgpLnNldFVzYWdlKCBUSFJFRS5EeW5hbWljRHJhd1VzYWdlICkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKS5zZXRVc2FnZSggRHluYW1pY0RyYXdVc2FnZSApO1xuXG59XG5cbmZ1bmN0aW9uIEludDhBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnQ4QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuSW50OEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEludDhCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIFVpbnQ4QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuVWludDhBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IFVpbnQ4QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBVaW50OENsYW1wZWRBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50OENsYW1wZWRBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIEludDE2QXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQxNkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEludDE2QnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBVaW50MTZBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50MTZBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50MTZCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBVaW50MTZCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIEludDMyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5JbnQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEludDMyQnVmZmVyQXR0cmlidXRlKCBhcnJheSwgaXRlbVNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBVaW50MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5VaW50MzJBdHRyaWJ1dGUgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5VaW50MzJCdWZmZXJBdHRyaWJ1dGUoKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBVaW50MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIEZsb2F0MzJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5GbG9hdDMyQXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEZsb2F0MzJCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbmZ1bmN0aW9uIEZsb2F0NjRBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5GbG9hdDY0QXR0cmlidXRlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSgpIGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IEZsb2F0NjRCdWZmZXJBdHRyaWJ1dGUoIGFycmF5LCBpdGVtU2l6ZSApO1xuXG59XG5cbi8vXG5cbkN1cnZlLmNyZWF0ZSA9IGZ1bmN0aW9uICggY29uc3RydWN0LCBnZXRQb2ludCApIHtcblxuXHRjb25zb2xlLmxvZyggJ1RIUkVFLkN1cnZlLmNyZWF0ZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQnICk7XG5cblx0Y29uc3RydWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEN1cnZlLnByb3RvdHlwZSApO1xuXHRjb25zdHJ1Y3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0O1xuXHRjb25zdHJ1Y3QucHJvdG90eXBlLmdldFBvaW50ID0gZ2V0UG9pbnQ7XG5cblx0cmV0dXJuIGNvbnN0cnVjdDtcblxufTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggQ3VydmVQYXRoLnByb3RvdHlwZSwge1xuXG5cdGNyZWF0ZVBvaW50c0dlb21ldHJ5OiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZVBvaW50c0dlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyApO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgZ2VvbWV0cnkgZnJvbSBwYXRoIHBvaW50cyAoZm9yIExpbmUgb3IgUG9pbnRzIG9iamVjdHMpXG5cblx0XHR2YXIgcHRzID0gdGhpcy5nZXRQb2ludHMoIGRpdmlzaW9ucyApO1xuXHRcdHJldHVybiB0aGlzLmNyZWF0ZUdlb21ldHJ5KCBwdHMgKTtcblxuXHR9LFxuXG5cdGNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5OiBmdW5jdGlvbiAoIGRpdmlzaW9ucyApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlUGF0aDogLmNyZWF0ZVNwYWNlZFBvaW50c0dlb21ldHJ5KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG5ldyBUSFJFRS5HZW9tZXRyeSgpLnNldEZyb21Qb2ludHMoIHBvaW50cyApIGluc3RlYWQuJyApO1xuXG5cdFx0Ly8gZ2VuZXJhdGUgZ2VvbWV0cnkgZnJvbSBlcXVpZGlzdGFudCBzYW1wbGluZyBhbG9uZyB0aGUgcGF0aFxuXG5cdFx0dmFyIHB0cyA9IHRoaXMuZ2V0U3BhY2VkUG9pbnRzKCBkaXZpc2lvbnMgKTtcblx0XHRyZXR1cm4gdGhpcy5jcmVhdGVHZW9tZXRyeSggcHRzICk7XG5cblx0fSxcblxuXHRjcmVhdGVHZW9tZXRyeTogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5DdXJ2ZVBhdGg6IC5jcmVhdGVHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBuZXcgVEhSRUUuR2VvbWV0cnkoKS5zZXRGcm9tUG9pbnRzKCBwb2ludHMgKSBpbnN0ZWFkLicgKTtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gcG9pbnRzLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHZhciBwb2ludCA9IHBvaW50c1sgaSBdO1xuXHRcdFx0Z2VvbWV0cnkudmVydGljZXMucHVzaCggbmV3IFZlY3RvcjMoIHBvaW50LngsIHBvaW50LnksIHBvaW50LnogfHwgMCApICk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIFBhdGgucHJvdG90eXBlLCB7XG5cblx0ZnJvbVBvaW50czogZnVuY3Rpb24gKCBwb2ludHMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5QYXRoOiAuZnJvbVBvaW50cygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qb2ludHMoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbVBvaW50cyggcG9pbnRzICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbmZ1bmN0aW9uIENsb3NlZFNwbGluZUN1cnZlMyggcG9pbnRzICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkNsb3NlZFNwbGluZUN1cnZlMyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ2F0bXVsbFJvbUN1cnZlMyBpbnN0ZWFkLicgKTtcblxuXHRDYXRtdWxsUm9tQ3VydmUzLmNhbGwoIHRoaXMsIHBvaW50cyApO1xuXHR0aGlzLnR5cGUgPSAnY2F0bXVsbHJvbSc7XG5cdHRoaXMuY2xvc2VkID0gdHJ1ZTtcblxufVxuXG5DbG9zZWRTcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuLy9cblxuZnVuY3Rpb24gU3BsaW5lQ3VydmUzKCBwb2ludHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BsaW5lQ3VydmUzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyApO1xuXG5cdENhdG11bGxSb21DdXJ2ZTMuY2FsbCggdGhpcywgcG9pbnRzICk7XG5cdHRoaXMudHlwZSA9ICdjYXRtdWxscm9tJztcblxufVxuXG5TcGxpbmVDdXJ2ZTMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuLy9cblxuZnVuY3Rpb24gU3BsaW5lKCBwb2ludHMgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuU3BsaW5lIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5DYXRtdWxsUm9tQ3VydmUzIGluc3RlYWQuJyApO1xuXG5cdENhdG11bGxSb21DdXJ2ZTMuY2FsbCggdGhpcywgcG9pbnRzICk7XG5cdHRoaXMudHlwZSA9ICdjYXRtdWxscm9tJztcblxufVxuXG5TcGxpbmUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ2F0bXVsbFJvbUN1cnZlMy5wcm90b3R5cGUgKTtcblxuT2JqZWN0LmFzc2lnbiggU3BsaW5lLnByb3RvdHlwZSwge1xuXG5cdGluaXRGcm9tQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5TcGxpbmU6IC5pbml0RnJvbUFycmF5KCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0Z2V0Q29udHJvbFBvaW50c0FycmF5OiBmdW5jdGlvbiAoIC8qIG9wdGlvbmFsVGFyZ2V0ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNwbGluZTogLmdldENvbnRyb2xQb2ludHNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJlcGFyYW1ldHJpemVCeUFyY0xlbmd0aDogZnVuY3Rpb24gKCAvKiBzYW1wbGluZ0NvZWYgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU3BsaW5lOiAucmVwYXJhbWV0cml6ZUJ5QXJjTGVuZ3RoKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cbmZ1bmN0aW9uIEF4aXNIZWxwZXIoIHNpemUgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQXhpc0hlbHBlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkF4ZXNIZWxwZXIuJyApO1xuXHRyZXR1cm4gbmV3IEF4ZXNIZWxwZXIoIHNpemUgKTtcblxufVxuXG5mdW5jdGlvbiBCb3VuZGluZ0JveEhlbHBlciggb2JqZWN0LCBjb2xvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3VuZGluZ0JveEhlbHBlciBoYXMgYmVlbiBkZXByZWNhdGVkLiBDcmVhdGluZyBhIFRIUkVFLkJveEhlbHBlciBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIG5ldyBCb3hIZWxwZXIoIG9iamVjdCwgY29sb3IgKTtcblxufVxuXG5mdW5jdGlvbiBFZGdlc0hlbHBlciggb2JqZWN0LCBoZXggKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuRWRnZXNIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLkVkZ2VzR2VvbWV0cnkgaW5zdGVhZC4nICk7XG5cdHJldHVybiBuZXcgTGluZVNlZ21lbnRzKCBuZXcgRWRnZXNHZW9tZXRyeSggb2JqZWN0Lmdlb21ldHJ5ICksIG5ldyBMaW5lQmFzaWNNYXRlcmlhbCggeyBjb2xvcjogaGV4ICE9PSB1bmRlZmluZWQgPyBoZXggOiAweGZmZmZmZiB9ICkgKTtcblxufVxuXG5HcmlkSGVscGVyLnByb3RvdHlwZS5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkdyaWRIZWxwZXI6IHNldENvbG9ycygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQsIHBhc3MgdGhlbSBpbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZC4nICk7XG5cbn07XG5cblNrZWxldG9uSGVscGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNrZWxldG9uSGVscGVyOiB1cGRhdGUoKSBubyBsb25nZXIgbmVlZHMgdG8gYmUgY2FsbGVkLicgKTtcblxufTtcblxuZnVuY3Rpb24gV2lyZWZyYW1lSGVscGVyKCBvYmplY3QsIGhleCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XaXJlZnJhbWVIZWxwZXIgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLldpcmVmcmFtZUdlb21ldHJ5IGluc3RlYWQuJyApO1xuXHRyZXR1cm4gbmV3IExpbmVTZWdtZW50cyggbmV3IFdpcmVmcmFtZUdlb21ldHJ5KCBvYmplY3QuZ2VvbWV0cnkgKSwgbmV3IExpbmVCYXNpY01hdGVyaWFsKCB7IGNvbG9yOiBoZXggIT09IHVuZGVmaW5lZCA/IGhleCA6IDB4ZmZmZmZmIH0gKSApO1xuXG59XG5cbi8vXG5cbk9iamVjdC5hc3NpZ24oIExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRleHRyYWN0VXJsQmFzZTogZnVuY3Rpb24gKCB1cmwgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Mb2FkZXI6IC5leHRyYWN0VXJsQmFzZSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSBUSFJFRS5Mb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBMb2FkZXJVdGlscy5leHRyYWN0VXJsQmFzZSggdXJsICk7XG5cblx0fVxuXG59ICk7XG5cbkxvYWRlci5IYW5kbGVycyA9IHtcblxuXHRhZGQ6IGZ1bmN0aW9uICggLyogcmVnZXgsIGxvYWRlciAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Mb2FkZXI6IEhhbmRsZXJzLmFkZCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBMb2FkaW5nTWFuYWdlci5hZGRIYW5kbGVyKCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uICggLyogZmlsZSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5Mb2FkZXI6IEhhbmRsZXJzLmdldCgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBMb2FkaW5nTWFuYWdlci5nZXRIYW5kbGVyKCkgaW5zdGVhZC4nICk7XG5cblx0fVxuXG59O1xuXG5mdW5jdGlvbiBYSFJMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuWEhSTG9hZGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gVEhSRUUuRmlsZUxvYWRlci4nICk7XG5cdHJldHVybiBuZXcgRmlsZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbmZ1bmN0aW9uIEJpbmFyeVRleHR1cmVMb2FkZXIoIG1hbmFnZXIgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuQmluYXJ5VGV4dHVyZUxvYWRlciBoYXMgYmVlbiByZW5hbWVkIHRvIFRIUkVFLkRhdGFUZXh0dXJlTG9hZGVyLicgKTtcblx0cmV0dXJuIG5ldyBEYXRhVGV4dHVyZUxvYWRlciggbWFuYWdlciApO1xuXG59XG5cbk9iamVjdC5hc3NpZ24oIE9iamVjdExvYWRlci5wcm90b3R5cGUsIHtcblxuXHRzZXRUZXh0dXJlUGF0aDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9iamVjdExvYWRlcjogLnNldFRleHR1cmVQYXRoKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0UmVzb3VyY2VQYXRoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldFJlc291cmNlUGF0aCggdmFsdWUgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmFzc2lnbiggQm94Mi5wcm90b3R5cGUsIHtcblxuXHRjZW50ZXI6IGZ1bmN0aW9uICggb3B0aW9uYWxUYXJnZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gyOiAuY2VudGVyKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Q2VudGVyKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldENlbnRlciggb3B0aW9uYWxUYXJnZXQgKTtcblxuXHR9LFxuXHRlbXB0eTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmVtcHR5KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaXNFbXB0eSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pc0VtcHR5KCk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25Cb3g6IGZ1bmN0aW9uICggYm94ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRzaXplOiBmdW5jdGlvbiAoIG9wdGlvbmFsVGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQm94MjogLnNpemUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRTaXplKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFNpemUoIG9wdGlvbmFsVGFyZ2V0ICk7XG5cblx0fVxufSApO1xuXG5PYmplY3QuYXNzaWduKCBCb3gzLnByb3RvdHlwZSwge1xuXG5cdGNlbnRlcjogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5jZW50ZXIoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRDZW50ZXIoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH0sXG5cdGVtcHR5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuZW1wdHkoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pc0VtcHR5KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmlzRW1wdHkoKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvbkJveDogZnVuY3Rpb24gKCBib3ggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Cb3gzOiAuaXNJbnRlcnNlY3Rpb25Cb3goKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzQm94KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNCb3goIGJveCApO1xuXG5cdH0sXG5cdGlzSW50ZXJzZWN0aW9uU3BoZXJlOiBmdW5jdGlvbiAoIHNwaGVyZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5pc0ludGVyc2VjdGlvblNwaGVyZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNTcGhlcmUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuaW50ZXJzZWN0c1NwaGVyZSggc3BoZXJlICk7XG5cblx0fSxcblx0c2l6ZTogZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJveDM6IC5zaXplKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0U2l6ZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRTaXplKCBvcHRpb25hbFRhcmdldCApO1xuXG5cdH1cbn0gKTtcblxuRnJ1c3R1bS5wcm90b3R5cGUuc2V0RnJvbU1hdHJpeCA9IGZ1bmN0aW9uICggbSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5GcnVzdHVtOiAuc2V0RnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21Qcm9qZWN0aW9uTWF0cml4KCkuJyApO1xuXHRyZXR1cm4gdGhpcy5zZXRGcm9tUHJvamVjdGlvbk1hdHJpeCggbSApO1xuXG59O1xuXG5MaW5lMy5wcm90b3R5cGUuY2VudGVyID0gZnVuY3Rpb24gKCBvcHRpb25hbFRhcmdldCApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5MaW5lMzogLmNlbnRlcigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldENlbnRlcigpLicgKTtcblx0cmV0dXJuIHRoaXMuZ2V0Q2VudGVyKCBvcHRpb25hbFRhcmdldCApO1xuXG59O1xuXG5PYmplY3QuYXNzaWduKCBNYXRoVXRpbHMsIHtcblxuXHRyYW5kb20xNjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLnJhbmRvbTE2KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIE1hdGgucmFuZG9tKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIE1hdGgucmFuZG9tKCk7XG5cblx0fSxcblxuXHRuZWFyZXN0UG93ZXJPZlR3bzogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGg6IC5uZWFyZXN0UG93ZXJPZlR3bygpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZsb29yUG93ZXJPZlR3bygpLicgKTtcblx0XHRyZXR1cm4gTWF0aFV0aWxzLmZsb29yUG93ZXJPZlR3byggdmFsdWUgKTtcblxuXHR9LFxuXG5cdG5leHRQb3dlck9mVHdvOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0aDogLm5leHRQb3dlck9mVHdvKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuY2VpbFBvd2VyT2ZUd28oKS4nICk7XG5cdFx0cmV0dXJuIE1hdGhVdGlscy5jZWlsUG93ZXJPZlR3byggdmFsdWUgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggTWF0cml4My5wcm90b3R5cGUsIHtcblxuXHRmbGF0dGVuVG9BcnJheU9mZnNldDogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdHJpeDM6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIgKTtcblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzOiBmdW5jdGlvbiAoIHZlY3RvciApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDMoIHRoaXMgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjNBcnJheTogZnVuY3Rpb24gKCAvKiBhICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDM6IC5tdWx0aXBseVZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4MzogLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYXR0cmlidXRlLmFwcGx5TWF0cml4MyggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDMoIHRoaXMgKTtcblxuXHR9LFxuXHRhcHBseVRvVmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5LCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXgzOiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBNYXRyaXg0LnByb3RvdHlwZSwge1xuXG5cdGV4dHJhY3RQb3NpdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmV4dHJhY3RQb3NpdGlvbigpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmNvcHlQb3NpdGlvbigpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5jb3B5UG9zaXRpb24oIG0gKTtcblxuXHR9LFxuXHRmbGF0dGVuVG9BcnJheU9mZnNldDogZnVuY3Rpb24gKCBhcnJheSwgb2Zmc2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCBcIlRIUkVFLk1hdHJpeDQ6IC5mbGF0dGVuVG9BcnJheU9mZnNldCgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudG9BcnJheSgpIGluc3RlYWQuXCIgKTtcblx0XHRyZXR1cm4gdGhpcy50b0FycmF5KCBhcnJheSwgb2Zmc2V0ICk7XG5cblx0fSxcblx0Z2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5nZXRQb3NpdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIG5ldyBWZWN0b3IzKCkuc2V0RnJvbU1hdHJpeENvbHVtbiggdGhpcywgMyApO1xuXG5cdH0sXG5cdHNldFJvdGF0aW9uRnJvbVF1YXRlcm5pb246IGZ1bmN0aW9uICggcSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5zZXRSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHEgKTtcblxuXHR9LFxuXHRtdWx0aXBseVRvQXJyYXk6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdHJpeDQ6IC5tdWx0aXBseVRvQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRtdWx0aXBseVZlY3RvcjM6IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm11bHRpcGx5VmVjdG9yMygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB2ZWN0b3IuYXBwbHlNYXRyaXg0KCBtYXRyaXggKSBpbnN0ZWFkLicgKTtcblx0XHRyZXR1cm4gdmVjdG9yLmFwcGx5TWF0cml4NCggdGhpcyApO1xuXG5cdH0sXG5cdG11bHRpcGx5VmVjdG9yNDogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3I0KCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIHZlY3Rvci5hcHBseU1hdHJpeDQoIG1hdHJpeCApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB2ZWN0b3IuYXBwbHlNYXRyaXg0KCB0aGlzICk7XG5cblx0fSxcblx0bXVsdGlwbHlWZWN0b3IzQXJyYXk6IGZ1bmN0aW9uICggLyogYSAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAubXVsdGlwbHlWZWN0b3IzQXJyYXkoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRyb3RhdGVBeGlzOiBmdW5jdGlvbiAoIHYgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAucm90YXRlQXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBWZWN0b3IzLnRyYW5zZm9ybURpcmVjdGlvbiggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0di50cmFuc2Zvcm1EaXJlY3Rpb24oIHRoaXMgKTtcblxuXHR9LFxuXHRjcm9zc1ZlY3RvcjogZnVuY3Rpb24gKCB2ZWN0b3IgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRyaXg0OiAuY3Jvc3NWZWN0b3IoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgdmVjdG9yLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHZlY3Rvci5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAudHJhbnNsYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVYKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVZKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlWjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1hdHJpeDQ6IC5yb3RhdGVaKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0cm90YXRlQnlBeGlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuTWF0cml4NDogLnJvdGF0ZUJ5QXhpcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGFwcGx5VG9CdWZmZXJBdHRyaWJ1dGU6IGZ1bmN0aW9uICggYXR0cmlidXRlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLmFwcGx5VG9CdWZmZXJBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgYXR0cmlidXRlLmFwcGx5TWF0cml4NCggbWF0cml4ICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIGF0dHJpYnV0ZS5hcHBseU1hdHJpeDQoIHRoaXMgKTtcblxuXHR9LFxuXHRhcHBseVRvVmVjdG9yM0FycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5LCBvZmZzZXQsIGxlbmd0aCAqLyApIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NYXRyaXg0OiAuYXBwbHlUb1ZlY3RvcjNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdG1ha2VGcnVzdHVtOiBmdW5jdGlvbiAoIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0cml4NDogLm1ha2VGcnVzdHVtKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5tYWtlUGVyc3BlY3RpdmUoIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgbmVhciwgZmFyICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFrZVBlcnNwZWN0aXZlKCBsZWZ0LCByaWdodCwgdG9wLCBib3R0b20sIG5lYXIsIGZhciApO1xuXG5cdH1cblxufSApO1xuXG5QbGFuZS5wcm90b3R5cGUuaXNJbnRlcnNlY3Rpb25MaW5lID0gZnVuY3Rpb24gKCBsaW5lICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlBsYW5lOiAuaXNJbnRlcnNlY3Rpb25MaW5lKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0xpbmUoKS4nICk7XG5cdHJldHVybiB0aGlzLmludGVyc2VjdHNMaW5lKCBsaW5lICk7XG5cbn07XG5cblF1YXRlcm5pb24ucHJvdG90eXBlLm11bHRpcGx5VmVjdG9yMyA9IGZ1bmN0aW9uICggdmVjdG9yICkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLlF1YXRlcm5pb246IC5tdWx0aXBseVZlY3RvcjMoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgaXMgbm93IHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHF1YXRlcm5pb24gKSBpbnN0ZWFkLicgKTtcblx0cmV0dXJuIHZlY3Rvci5hcHBseVF1YXRlcm5pb24oIHRoaXMgKTtcblxufTtcblxuT2JqZWN0LmFzc2lnbiggUmF5LnByb3RvdHlwZSwge1xuXG5cdGlzSW50ZXJzZWN0aW9uQm94OiBmdW5jdGlvbiAoIGJveCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlJheTogLmlzSW50ZXJzZWN0aW9uQm94KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuaW50ZXJzZWN0c0JveCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzQm94KCBib3ggKTtcblxuXHR9LFxuXHRpc0ludGVyc2VjdGlvblBsYW5lOiBmdW5jdGlvbiAoIHBsYW5lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25QbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmludGVyc2VjdHNQbGFuZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5pbnRlcnNlY3RzUGxhbmUoIHBsYW5lICk7XG5cblx0fSxcblx0aXNJbnRlcnNlY3Rpb25TcGhlcmU6IGZ1bmN0aW9uICggc3BoZXJlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5OiAuaXNJbnRlcnNlY3Rpb25TcGhlcmUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5pbnRlcnNlY3RzU3BoZXJlKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmludGVyc2VjdHNTcGhlcmUoIHNwaGVyZSApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBUcmlhbmdsZS5wcm90b3R5cGUsIHtcblxuXHRhcmVhOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5UcmlhbmdsZTogLmFyZWEoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRBcmVhKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldEFyZWEoKTtcblxuXHR9LFxuXHRiYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldEJhcnljb29yZCggcG9pbnQsIHRhcmdldCApO1xuXG5cdH0sXG5cdG1pZHBvaW50OiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubWlkcG9pbnQoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXRNaWRwb2ludCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRNaWRwb2ludCggdGFyZ2V0ICk7XG5cblx0fSxcblx0bm9ybWFsOiBmdW5jdGlvbiAoIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAubm9ybWFsKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0Tm9ybWFsKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldE5vcm1hbCggdGFyZ2V0ICk7XG5cblx0fSxcblx0cGxhbmU6IGZ1bmN0aW9uICggdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5wbGFuZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldFBsYW5lKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmdldFBsYW5lKCB0YXJnZXQgKTtcblxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggVHJpYW5nbGUsIHtcblxuXHRiYXJ5Y29vcmRGcm9tUG9pbnQ6IGZ1bmN0aW9uICggcG9pbnQsIGEsIGIsIGMsIHRhcmdldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlRyaWFuZ2xlOiAuYmFyeWNvb3JkRnJvbVBvaW50KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuZ2V0QmFyeWNvb3JkKCkuJyApO1xuXHRcdHJldHVybiBUcmlhbmdsZS5nZXRCYXJ5Y29vcmQoIHBvaW50LCBhLCBiLCBjLCB0YXJnZXQgKTtcblxuXHR9LFxuXHRub3JtYWw6IGZ1bmN0aW9uICggYSwgYiwgYywgdGFyZ2V0ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVHJpYW5nbGU6IC5ub3JtYWwoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5nZXROb3JtYWwoKS4nICk7XG5cdFx0cmV0dXJuIFRyaWFuZ2xlLmdldE5vcm1hbCggYSwgYiwgYywgdGFyZ2V0ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFNoYXBlLnByb3RvdHlwZSwge1xuXG5cdGV4dHJhY3RBbGxQb2ludHM6IGZ1bmN0aW9uICggZGl2aXNpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5leHRyYWN0QWxsUG9pbnRzKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5leHRyYWN0UG9pbnRzKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0cmFjdFBvaW50cyggZGl2aXNpb25zICk7XG5cblx0fSxcblx0ZXh0cnVkZTogZnVuY3Rpb24gKCBvcHRpb25zICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2hhcGU6IC5leHRydWRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV4dHJ1ZGVHZW9tZXRyeSgpIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiBuZXcgRXh0cnVkZUdlb21ldHJ5KCB0aGlzLCBvcHRpb25zICk7XG5cblx0fSxcblx0bWFrZUdlb21ldHJ5OiBmdW5jdGlvbiAoIG9wdGlvbnMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFwZTogLm1ha2VHZW9tZXRyeSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBTaGFwZUdlb21ldHJ5KCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIG5ldyBTaGFwZUdlb21ldHJ5KCB0aGlzLCBvcHRpb25zICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjIucHJvdG90eXBlLCB7XG5cblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IyOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0ZGlzdGFuY2VUb01hbmhhdHRhbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMjogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxuXHR9LFxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjI6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjMucHJvdG90eXBlLCB7XG5cblx0c2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5WZWN0b3IzOiAuc2V0RXVsZXJGcm9tUm90YXRpb25NYXRyaXgoKSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgRXVsZXIuc2V0RnJvbVJvdGF0aW9uTWF0cml4KCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0c2V0RXVsZXJGcm9tUXVhdGVybmlvbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlZlY3RvcjM6IC5zZXRFdWxlckZyb21RdWF0ZXJuaW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEV1bGVyLnNldEZyb21RdWF0ZXJuaW9uKCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0Z2V0UG9zaXRpb25Gcm9tTWF0cml4OiBmdW5jdGlvbiAoIG0gKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0UG9zaXRpb25Gcm9tTWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLnNldEZyb21NYXRyaXhQb3NpdGlvbiggbSApO1xuXG5cdH0sXG5cdGdldFNjYWxlRnJvbU1hdHJpeDogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmdldFNjYWxlRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhTY2FsZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zZXRGcm9tTWF0cml4U2NhbGUoIG0gKTtcblxuXHR9LFxuXHRnZXRDb2x1bW5Gcm9tTWF0cml4OiBmdW5jdGlvbiAoIGluZGV4LCBtYXRyaXggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZ2V0Q29sdW1uRnJvbU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnNldEZyb21NYXRyaXhDb2x1bW4oKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuc2V0RnJvbU1hdHJpeENvbHVtbiggbWF0cml4LCBpbmRleCApO1xuXG5cdH0sXG5cdGFwcGx5UHJvamVjdGlvbjogZnVuY3Rpb24gKCBtICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmFwcGx5UHJvamVjdGlvbigpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuYXBwbHlNYXRyaXg0KCBtICkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXBwbHlNYXRyaXg0KCBtICk7XG5cblx0fSxcblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3IzOiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0ZGlzdGFuY2VUb01hbmhhdHRhbjogZnVuY3Rpb24gKCB2ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVmVjdG9yMzogLmRpc3RhbmNlVG9NYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5EaXN0YW5jZVRvKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkRpc3RhbmNlVG8oIHYgKTtcblxuXHR9LFxuXHRsZW5ndGhNYW5oYXR0YW46IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLlZlY3RvcjM6IC5sZW5ndGhNYW5oYXR0YW4oKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5tYW5oYXR0YW5MZW5ndGgoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMubWFuaGF0dGFuTGVuZ3RoKCk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIFZlY3RvcjQucHJvdG90eXBlLCB7XG5cblx0ZnJvbUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBhdHRyaWJ1dGUsIGluZGV4LCBvZmZzZXQgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAuZnJvbUF0dHJpYnV0ZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmZyb21CdWZmZXJBdHRyaWJ1dGUoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZnJvbUJ1ZmZlckF0dHJpYnV0ZSggYXR0cmlidXRlLCBpbmRleCwgb2Zmc2V0ICk7XG5cblx0fSxcblx0bGVuZ3RoTWFuaGF0dGFuOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5WZWN0b3I0OiAubGVuZ3RoTWFuaGF0dGFuKCkgaGFzIGJlZW4gcmVuYW1lZCB0byAubWFuaGF0dGFuTGVuZ3RoKCkuJyApO1xuXHRcdHJldHVybiB0aGlzLm1hbmhhdHRhbkxlbmd0aCgpO1xuXG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRjb21wdXRlVGFuZ2VudHM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5HZW9tZXRyeTogLmNvbXB1dGVUYW5nZW50cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdGNvbXB1dGVMaW5lRGlzdGFuY2VzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuR2VvbWV0cnk6IC5jb21wdXRlTGluZURpc3RhbmNlcygpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5MaW5lLmNvbXB1dGVMaW5lRGlzdGFuY2VzKCkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnk6IC5hcHBseU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmFwcGx5TWF0cml4NCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuYXNzaWduKCBPYmplY3QzRC5wcm90b3R5cGUsIHtcblxuXHRnZXRDaGlsZEJ5TmFtZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRDaGlsZEJ5TmFtZSgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdldE9iamVjdEJ5TmFtZSgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRPYmplY3RCeU5hbWUoIG5hbWUgKTtcblxuXHR9LFxuXHRyZW5kZXJEZXB0aDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5yZW5kZXJEZXB0aCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLnJlbmRlck9yZGVyLCBpbnN0ZWFkLicgKTtcblxuXHR9LFxuXHR0cmFuc2xhdGU6IGZ1bmN0aW9uICggZGlzdGFuY2UsIGF4aXMgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLnRyYW5zbGF0ZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAudHJhbnNsYXRlT25BeGlzKCBheGlzLCBkaXN0YW5jZSApIGluc3RlYWQuJyApO1xuXHRcdHJldHVybiB0aGlzLnRyYW5zbGF0ZU9uQXhpcyggYXhpcywgZGlzdGFuY2UgKTtcblxuXHR9LFxuXHRnZXRXb3JsZFJvdGF0aW9uOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuT2JqZWN0M0Q6IC5nZXRXb3JsZFJvdGF0aW9uKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk9iamVjdDNELmdldFdvcmxkUXVhdGVybmlvbiggdGFyZ2V0ICkgaW5zdGVhZC4nICk7XG5cblx0fSxcblx0YXBwbHlNYXRyaXg6IGZ1bmN0aW9uICggbWF0cml4ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC5hcHBseU1hdHJpeCgpIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmFwcGx5TWF0cml4NCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5hcHBseU1hdHJpeDQoIG1hdHJpeCApO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggT2JqZWN0M0QucHJvdG90eXBlLCB7XG5cblx0ZXVsZXJPcmRlcjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5yb3RhdGlvbi5vcmRlcjtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PYmplY3QzRDogLmV1bGVyT3JkZXIgaXMgbm93IC5yb3RhdGlvbi5vcmRlci4nICk7XG5cdFx0XHR0aGlzLnJvdGF0aW9uLm9yZGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHVzZVF1YXRlcm5pb246IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT2JqZWN0M0Q6IC51c2VRdWF0ZXJuaW9uIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSBsaWJyYXJ5IG5vdyB1c2VzIHF1YXRlcm5pb25zIGJ5IGRlZmF1bHQuJyApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggTWVzaC5wcm90b3R5cGUsIHtcblxuXHRzZXREcmF3TW9kZTogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1lc2g6IC5zZXREcmF3TW9kZSgpIGhhcyBiZWVuIHJlbW92ZWQuIFRoZSByZW5kZXJlciBub3cgYWx3YXlzIGFzc3VtZXMgVEhSRUUuVHJpYW5nbGVzRHJhd01vZGUuIFRyYW5zZm9ybSB5b3VyIGdlb21ldHJ5IHZpYSBCdWZmZXJHZW9tZXRyeVV0aWxzLnRvVHJpYW5nbGVzRHJhd01vZGUoKSBpZiBuZWNlc3NhcnkuJyApO1xuXG5cdH0sXG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1lc2gucHJvdG90eXBlLCB7XG5cblx0ZHJhd01vZGU6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLk1lc2g6IC5kcmF3TW9kZSBoYXMgYmVlbiByZW1vdmVkLiBUaGUgcmVuZGVyZXIgbm93IGFsd2F5cyBhc3N1bWVzIFRIUkVFLlRyaWFuZ2xlc0RyYXdNb2RlLicgKTtcblx0XHRcdHJldHVybiBUcmlhbmdsZXNEcmF3TW9kZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5NZXNoOiAuZHJhd01vZGUgaGFzIGJlZW4gcmVtb3ZlZC4gVGhlIHJlbmRlcmVyIG5vdyBhbHdheXMgYXNzdW1lcyBUSFJFRS5UcmlhbmdsZXNEcmF3TW9kZS4gVHJhbnNmb3JtIHlvdXIgZ2VvbWV0cnkgdmlhIEJ1ZmZlckdlb21ldHJ5VXRpbHMudG9UcmlhbmdsZXNEcmF3TW9kZSgpIGlmIG5lY2Vzc2FyeS4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTE9ELnByb3RvdHlwZSwge1xuXG5cdG9iamVjdHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTE9EOiAub2JqZWN0cyBoYXMgYmVlbiByZW5hbWVkIHRvIC5sZXZlbHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMubGV2ZWxzO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KCBTa2VsZXRvbi5wcm90b3R5cGUsICd1c2VWZXJ0ZXhUZXh0dXJlJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuU2tlbGV0b246IHVzZVZlcnRleFRleHR1cmUgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Ta2VsZXRvbjogdXNlVmVydGV4VGV4dHVyZSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuU2tpbm5lZE1lc2gucHJvdG90eXBlLmluaXRCb25lcyA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuU2tpbm5lZE1lc2g6IGluaXRCb25lcygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoIEN1cnZlLnByb3RvdHlwZSwgJ19fYXJjTGVuZ3RoRGl2aXNpb25zJywge1xuXG5cdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQ3VydmU6IC5fX2FyY0xlbmd0aERpdmlzaW9ucyBpcyBub3cgLmFyY0xlbmd0aERpdmlzaW9ucy4nICk7XG5cdFx0cmV0dXJuIHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zO1xuXG5cdH0sXG5cdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkN1cnZlOiAuX19hcmNMZW5ndGhEaXZpc2lvbnMgaXMgbm93IC5hcmNMZW5ndGhEaXZpc2lvbnMuJyApO1xuXHRcdHRoaXMuYXJjTGVuZ3RoRGl2aXNpb25zID0gdmFsdWU7XG5cblx0fVxuXG59ICk7XG5cbi8vXG5cblBlcnNwZWN0aXZlQ2FtZXJhLnByb3RvdHlwZS5zZXRMZW5zID0gZnVuY3Rpb24gKCBmb2NhbExlbmd0aCwgZmlsbUdhdWdlICkge1xuXG5cdGNvbnNvbGUud2FybiggXCJUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYS5zZXRMZW5zIGlzIGRlcHJlY2F0ZWQuIFwiICtcblx0XHRcdFwiVXNlIC5zZXRGb2NhbExlbmd0aCBhbmQgLmZpbG1HYXVnZSBmb3IgYSBwaG90b2dyYXBoaWMgc2V0dXAuXCIgKTtcblxuXHRpZiAoIGZpbG1HYXVnZSAhPT0gdW5kZWZpbmVkICkgdGhpcy5maWxtR2F1Z2UgPSBmaWxtR2F1Z2U7XG5cdHRoaXMuc2V0Rm9jYWxMZW5ndGgoIGZvY2FsTGVuZ3RoICk7XG5cbn07XG5cbi8vXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBMaWdodC5wcm90b3R5cGUsIHtcblx0b25seVNoYWRvdzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLm9ubHlTaGFkb3cgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUZvdjoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFGb3YgaXMgbm93IC5zaGFkb3cuY2FtZXJhLmZvdi4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuZm92ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUxlZnQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTGVmdCBpcyBub3cgLnNoYWRvdy5jYW1lcmEubGVmdC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubGVmdCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFSaWdodDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFSaWdodCBpcyBub3cgLnNoYWRvdy5jYW1lcmEucmlnaHQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLnJpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYVRvcDoge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFUb3AgaXMgbm93IC5zaGFkb3cuY2FtZXJhLnRvcC4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEudG9wID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYUJvdHRvbToge1xuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTGlnaHQ6IC5zaGFkb3dDYW1lcmFCb3R0b20gaXMgbm93IC5zaGFkb3cuY2FtZXJhLmJvdHRvbS4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEuYm90dG9tID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0NhbWVyYU5lYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhTmVhciBpcyBub3cgLnNoYWRvdy5jYW1lcmEubmVhci4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5jYW1lcmEubmVhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFGYXI6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhRmFyIGlzIG5vdyAuc2hhZG93LmNhbWVyYS5mYXIuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cuY2FtZXJhLmZhciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dDYW1lcmFWaXNpYmxlOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93Q2FtZXJhVmlzaWJsZSBoYXMgYmVlbiByZW1vdmVkLiBVc2UgbmV3IFRIUkVFLkNhbWVyYUhlbHBlciggbGlnaHQuc2hhZG93LmNhbWVyYSApIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dCaWFzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd0JpYXMgaXMgbm93IC5zaGFkb3cuYmlhcy4nICk7XG5cdFx0XHR0aGlzLnNoYWRvdy5iaWFzID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd0RhcmtuZXNzOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93RGFya25lc3MgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHNoYWRvd01hcFdpZHRoOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5MaWdodDogLnNoYWRvd01hcFdpZHRoIGlzIG5vdyAuc2hhZG93Lm1hcFNpemUud2lkdGguJyApO1xuXHRcdFx0dGhpcy5zaGFkb3cubWFwU2l6ZS53aWR0aCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBIZWlnaHQ6IHtcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkxpZ2h0OiAuc2hhZG93TWFwSGVpZ2h0IGlzIG5vdyAuc2hhZG93Lm1hcFNpemUuaGVpZ2h0LicgKTtcblx0XHRcdHRoaXMuc2hhZG93Lm1hcFNpemUuaGVpZ2h0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJ1ZmZlckF0dHJpYnV0ZS5wcm90b3R5cGUsIHtcblxuXHRsZW5ndGg6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuY291bnQgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5hcnJheS5sZW5ndGg7XG5cblx0XHR9XG5cdH0sXG5cdGR5bmFtaWM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudXNhZ2UgPT09IER5bmFtaWNEcmF3VXNhZ2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCAvKiB2YWx1ZSAqLyApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuZHluYW1pYyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zZXRVc2FnZSggRHluYW1pY0RyYXdVc2FnZSApO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQnVmZmVyQXR0cmlidXRlLnByb3RvdHlwZSwge1xuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuc2V0RHluYW1pYygpIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuc2V0VXNhZ2UoKSBpbnN0ZWFkLicgKTtcblx0XHR0aGlzLnNldFVzYWdlKCB2YWx1ZSA9PT0gdHJ1ZSA/IER5bmFtaWNEcmF3VXNhZ2UgOiBTdGF0aWNEcmF3VXNhZ2UgKTtcblx0XHRyZXR1cm4gdGhpcztcblxuXHR9LFxuXHRjb3B5SW5kaWNlc0FycmF5OiBmdW5jdGlvbiAoIC8qIGluZGljZXMgKi8gKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuQnVmZmVyQXR0cmlidXRlOiAuY29weUluZGljZXNBcnJheSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckF0dHJpYnV0ZTogLnNldEFycmF5IGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBCdWZmZXJHZW9tZXRyeSAuc2V0QXR0cmlidXRlIHRvIHJlcGxhY2UvcmVzaXplIGF0dHJpYnV0ZSBidWZmZXJzJyApO1xuXG5cdH1cbn0gKTtcblxuT2JqZWN0LmFzc2lnbiggQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0YWRkSW5kZXg6IGZ1bmN0aW9uICggaW5kZXggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEluZGV4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuc2V0SW5kZXgoKS4nICk7XG5cdFx0dGhpcy5zZXRJbmRleCggaW5kZXggKTtcblxuXHR9LFxuXHRhZGRBdHRyaWJ1dGU6IGZ1bmN0aW9uICggbmFtZSwgYXR0cmlidXRlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5hZGRBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5zZXRBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHRpZiAoICEgKCBhdHRyaWJ1dGUgJiYgYXR0cmlidXRlLmlzQnVmZmVyQXR0cmlidXRlICkgJiYgISAoIGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUuaXNJbnRlcmxlYXZlZEJ1ZmZlckF0dHJpYnV0ZSApICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZEF0dHJpYnV0ZSgpIG5vdyBleHBlY3RzICggbmFtZSwgYXR0cmlidXRlICkuJyApO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5ldyBCdWZmZXJBdHRyaWJ1dGUoIGFyZ3VtZW50c1sgMSBdLCBhcmd1bWVudHNbIDIgXSApICk7XG5cblx0XHR9XG5cblx0XHRpZiAoIG5hbWUgPT09ICdpbmRleCcgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5LmFkZEF0dHJpYnV0ZTogVXNlIC5zZXRJbmRleCgpIGZvciBpbmRleCBhdHRyaWJ1dGUuJyApO1xuXHRcdFx0dGhpcy5zZXRJbmRleCggYXR0cmlidXRlICk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuc2V0QXR0cmlidXRlKCBuYW1lLCBhdHRyaWJ1dGUgKTtcblxuXHR9LFxuXHRhZGREcmF3Q2FsbDogZnVuY3Rpb24gKCBzdGFydCwgY291bnQsIGluZGV4T2Zmc2V0ICkge1xuXG5cdFx0aWYgKCBpbmRleE9mZnNldCAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgbm8gbG9uZ2VyIHN1cHBvcnRzIGluZGV4T2Zmc2V0LicgKTtcblxuXHRcdH1cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFkZERyYXdDYWxsKCkgaXMgbm93IC5hZGRHcm91cCgpLicgKTtcblx0XHR0aGlzLmFkZEdyb3VwKCBzdGFydCwgY291bnQgKTtcblxuXHR9LFxuXHRjbGVhckRyYXdDYWxsczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jbGVhckRyYXdDYWxscygpIGlzIG5vdyAuY2xlYXJHcm91cHMoKS4nICk7XG5cdFx0dGhpcy5jbGVhckdyb3VwcygpO1xuXG5cdH0sXG5cdGNvbXB1dGVUYW5nZW50czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlVGFuZ2VudHMoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRjb21wdXRlT2Zmc2V0czogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5jb21wdXRlT2Zmc2V0cygpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHJlbW92ZUF0dHJpYnV0ZTogZnVuY3Rpb24gKCBuYW1lICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5yZW1vdmVBdHRyaWJ1dGUoKSBoYXMgYmVlbiByZW5hbWVkIHRvIC5kZWxldGVBdHRyaWJ1dGUoKS4nICk7XG5cblx0XHRyZXR1cm4gdGhpcy5kZWxldGVBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHR9LFxuXHRhcHBseU1hdHJpeDogZnVuY3Rpb24gKCBtYXRyaXggKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5CdWZmZXJHZW9tZXRyeTogLmFwcGx5TWF0cml4KCkgaGFzIGJlZW4gcmVuYW1lZCB0byAuYXBwbHlNYXRyaXg0KCkuJyApO1xuXHRcdHJldHVybiB0aGlzLmFwcGx5TWF0cml4NCggbWF0cml4ICk7XG5cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCdWZmZXJHZW9tZXRyeS5wcm90b3R5cGUsIHtcblxuXHRkcmF3Y2FsbHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkJ1ZmZlckdlb21ldHJ5OiAuZHJhd2NhbGxzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldHM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuQnVmZmVyR2VvbWV0cnk6IC5vZmZzZXRzIGhhcyBiZWVuIHJlbmFtZWQgdG8gLmdyb3Vwcy4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5ncm91cHM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUmF5Y2FzdGVyLnByb3RvdHlwZSwge1xuXG5cdGxpbmVQcmVjaXNpb246IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuUmF5Y2FzdGVyOiAubGluZVByZWNpc2lvbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnBhcmFtcy5MaW5lLnRocmVzaG9sZCBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnBhcmFtcy5MaW5lLnRocmVzaG9sZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5SYXljYXN0ZXI6IC5saW5lUHJlY2lzaW9uIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAucGFyYW1zLkxpbmUudGhyZXNob2xkIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5wYXJhbXMuTGluZS50aHJlc2hvbGQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBJbnRlcmxlYXZlZEJ1ZmZlci5wcm90b3R5cGUsIHtcblxuXHRkeW5hbWljOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkludGVybGVhdmVkQnVmZmVyOiAubGVuZ3RoIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAudXNhZ2UgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy51c2FnZSA9PT0gRHluYW1pY0RyYXdVc2FnZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5JbnRlcmxlYXZlZEJ1ZmZlcjogLmxlbmd0aCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLnVzYWdlIGluc3RlYWQuJyApO1xuXHRcdFx0dGhpcy5zZXRVc2FnZSggdmFsdWUgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5hc3NpZ24oIEludGVybGVhdmVkQnVmZmVyLnByb3RvdHlwZSwge1xuXHRzZXREeW5hbWljOiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW50ZXJsZWF2ZWRCdWZmZXI6IC5zZXREeW5hbWljKCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zZXRVc2FnZSgpIGluc3RlYWQuJyApO1xuXHRcdHRoaXMuc2V0VXNhZ2UoIHZhbHVlID09PSB0cnVlID8gRHluYW1pY0RyYXdVc2FnZSA6IFN0YXRpY0RyYXdVc2FnZSApO1xuXHRcdHJldHVybiB0aGlzO1xuXG5cdH0sXG5cdHNldEFycmF5OiBmdW5jdGlvbiAoIC8qIGFycmF5ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkludGVybGVhdmVkQnVmZmVyOiAuc2V0QXJyYXkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIEJ1ZmZlckdlb21ldHJ5IC5zZXRBdHRyaWJ1dGUgdG8gcmVwbGFjZS9yZXNpemUgYXR0cmlidXRlIGJ1ZmZlcnMnICk7XG5cblx0fVxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBFeHRydWRlQnVmZmVyR2VvbWV0cnkucHJvdG90eXBlLCB7XG5cblx0Z2V0QXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuZ2V0QXJyYXlzKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblxuXHRhZGRTaGFwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5FeHRydWRlQnVmZmVyR2VvbWV0cnk6IC5hZGRTaGFwZUxpc3QoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXG5cdGFkZFNoYXBlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuRXh0cnVkZUJ1ZmZlckdlb21ldHJ5OiAuYWRkU2hhcGUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9XG5cbn0gKTtcblxuLy9cblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFVuaWZvcm0ucHJvdG90eXBlLCB7XG5cblx0ZHluYW1pYzoge1xuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5Vbmlmb3JtOiAuZHluYW1pYyBoYXMgYmVlbiByZW1vdmVkLiBVc2Ugb2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCkgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdG9uVXBkYXRlOiB7XG5cdFx0dmFsdWU6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuVW5pZm9ybTogLm9uVXBkYXRlKCkgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIG9iamVjdC5vbkJlZm9yZVJlbmRlcigpIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTWF0ZXJpYWwucHJvdG90eXBlLCB7XG5cblx0d3JhcEFyb3VuZDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBBcm91bmQgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0b3ZlcmRyYXc6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWF0ZXJpYWw6IC5vdmVyZHJhdyBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1hdGVyaWFsOiAub3ZlcmRyYXcgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cblx0d3JhcFJHQjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5NYXRlcmlhbDogLndyYXBSR0IgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cdFx0XHRyZXR1cm4gbmV3IENvbG9yKCk7XG5cblx0XHR9XG5cdH0sXG5cblx0c2hhZGluZzoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLmVycm9yKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuJyArIHRoaXMudHlwZSArICc6IC5zaGFkaW5nIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSB0aGUgYm9vbGVhbiAuZmxhdFNoYWRpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLmZsYXRTaGFkaW5nID0gKCB2YWx1ZSA9PT0gRmxhdFNoYWRpbmcgKTtcblxuXHRcdH1cblx0fSxcblxuXHRzdGVuY2lsTWFzazoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS4nICsgdGhpcy50eXBlICsgJzogLnN0ZW5jaWxNYXNrIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSAuc3RlbmNpbEZ1bmNNYXNrIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMuc3RlbmNpbEZ1bmNNYXNrO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLicgKyB0aGlzLnR5cGUgKyAnOiAuc3RlbmNpbE1hc2sgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIC5zdGVuY2lsRnVuY01hc2sgaW5zdGVhZC4nICk7XG5cdFx0XHR0aGlzLnN0ZW5jaWxGdW5jTWFzayA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9XG5cbn0gKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1lc2hQaG9uZ01hdGVyaWFsLnByb3RvdHlwZSwge1xuXG5cdG1ldGFsOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk1lc2hQaG9uZ01hdGVyaWFsOiAubWV0YWwgaGFzIGJlZW4gcmVtb3ZlZC4gVXNlIFRIUkVFLk1lc2hTdGFuZGFyZE1hdGVyaWFsIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuTWVzaFBob25nTWF0ZXJpYWw6IC5tZXRhbCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwgaW5zdGVhZCcgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBTaGFkZXJNYXRlcmlhbC5wcm90b3R5cGUsIHtcblxuXHRkZXJpdmF0aXZlczoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5TaGFkZXJNYXRlcmlhbDogLmRlcml2YXRpdmVzIGhhcyBiZWVuIG1vdmVkIHRvIC5leHRlbnNpb25zLmRlcml2YXRpdmVzLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXM7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuIFNoYWRlck1hdGVyaWFsOiAuZGVyaXZhdGl2ZXMgaGFzIGJlZW4gbW92ZWQgdG8gLmV4dGVuc2lvbnMuZGVyaXZhdGl2ZXMuJyApO1xuXHRcdFx0dGhpcy5leHRlbnNpb25zLmRlcml2YXRpdmVzID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuYXNzaWduKCBXZWJHTFJlbmRlcmVyLnByb3RvdHlwZSwge1xuXG5cdGNsZWFyVGFyZ2V0OiBmdW5jdGlvbiAoIHJlbmRlclRhcmdldCwgY29sb3IsIGRlcHRoLCBzdGVuY2lsICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmNsZWFyVGFyZ2V0KCkgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5zZXRSZW5kZXJUYXJnZXQoKSBhbmQgLmNsZWFyKCkgaW5zdGVhZC4nICk7XG5cdFx0dGhpcy5zZXRSZW5kZXJUYXJnZXQoIHJlbmRlclRhcmdldCApO1xuXHRcdHRoaXMuY2xlYXIoIGNvbG9yLCBkZXB0aCwgc3RlbmNpbCApO1xuXG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uICggY2FsbGJhY2sgKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYW5pbWF0ZSgpIGlzIG5vdyAuc2V0QW5pbWF0aW9uTG9vcCgpLicgKTtcblx0XHR0aGlzLnNldEFuaW1hdGlvbkxvb3AoIGNhbGxiYWNrICk7XG5cblx0fSxcblx0Z2V0Q3VycmVudFJlbmRlclRhcmdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldEN1cnJlbnRSZW5kZXJUYXJnZXQoKSBpcyBub3cgLmdldFJlbmRlclRhcmdldCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRSZW5kZXJUYXJnZXQoKTtcblxuXHR9LFxuXHRnZXRNYXhBbmlzb3Ryb3B5OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2V0TWF4QW5pc290cm9weSgpIGlzIG5vdyAuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLmdldE1heEFuaXNvdHJvcHkoKTtcblxuXHR9LFxuXHRnZXRQcmVjaXNpb246IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nZXRQcmVjaXNpb24oKSBpcyBub3cgLmNhcGFiaWxpdGllcy5wcmVjaXNpb24uJyApO1xuXHRcdHJldHVybiB0aGlzLmNhcGFiaWxpdGllcy5wcmVjaXNpb247XG5cblx0fSxcblx0cmVzZXRHTFN0YXRlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAucmVzZXRHTFN0YXRlKCkgaXMgbm93IC5zdGF0ZS5yZXNldCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZS5yZXNldCgpO1xuXG5cdH0sXG5cdHN1cHBvcnRzRmxvYXRUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzRmxvYXRUZXh0dXJlcygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ09FU190ZXh0dXJlX2Zsb2F0XFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfZmxvYXQnICk7XG5cblx0fSxcblx0c3VwcG9ydHNIYWxmRmxvYXRUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzSGFsZkZsb2F0VGV4dHVyZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnT0VTX3RleHR1cmVfaGFsZl9mbG9hdCcgKTtcblxuXHR9LFxuXHRzdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c1N0YW5kYXJkRGVyaXZhdGl2ZXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXNcXCcgKS4nICk7XG5cdFx0cmV0dXJuIHRoaXMuZXh0ZW5zaW9ucy5nZXQoICdPRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMnICk7XG5cblx0fSxcblx0c3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVMzVEM6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0NvbXByZXNzZWRUZXh0dXJlUzNUQygpIGlzIG5vdyAuZXh0ZW5zaW9ucy5nZXQoIFxcJ1dFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMnICk7XG5cblx0fSxcblx0c3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNDb21wcmVzc2VkVGV4dHVyZVBWUlRDKCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnV0VCR0xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjJyApO1xuXG5cdH0sXG5cdHN1cHBvcnRzQmxlbmRNaW5NYXg6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zdXBwb3J0c0JsZW5kTWluTWF4KCkgaXMgbm93IC5leHRlbnNpb25zLmdldCggXFwnRVhUX2JsZW5kX21pbm1heFxcJyApLicgKTtcblx0XHRyZXR1cm4gdGhpcy5leHRlbnNpb25zLmdldCggJ0VYVF9ibGVuZF9taW5tYXgnICk7XG5cblx0fSxcblx0c3VwcG9ydHNWZXJ0ZXhUZXh0dXJlczogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnN1cHBvcnRzVmVydGV4VGV4dHVyZXMoKSBpcyBub3cgLmNhcGFiaWxpdGllcy52ZXJ0ZXhUZXh0dXJlcy4nICk7XG5cdFx0cmV0dXJuIHRoaXMuY2FwYWJpbGl0aWVzLnZlcnRleFRleHR1cmVzO1xuXG5cdH0sXG5cdHN1cHBvcnRzSW5zdGFuY2VkQXJyYXlzOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc3VwcG9ydHNJbnN0YW5jZWRBcnJheXMoKSBpcyBub3cgLmV4dGVuc2lvbnMuZ2V0KCBcXCdBTkdMRV9pbnN0YW5jZWRfYXJyYXlzXFwnICkuJyApO1xuXHRcdHJldHVybiB0aGlzLmV4dGVuc2lvbnMuZ2V0KCAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycgKTtcblxuXHR9LFxuXHRlbmFibGVTY2lzc29yVGVzdDogZnVuY3Rpb24gKCBib29sZWFuICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmVuYWJsZVNjaXNzb3JUZXN0KCkgaXMgbm93IC5zZXRTY2lzc29yVGVzdCgpLicgKTtcblx0XHR0aGlzLnNldFNjaXNzb3JUZXN0KCBib29sZWFuICk7XG5cblx0fSxcblx0aW5pdE1hdGVyaWFsOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuaW5pdE1hdGVyaWFsKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YWRkUHJlUGx1Z2luOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuYWRkUHJlUGx1Z2luKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YWRkUG9zdFBsdWdpbjogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFkZFBvc3RQbHVnaW4oKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHR1cGRhdGVTaGFkb3dNYXA6IGZ1bmN0aW9uICgpIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC51cGRhdGVTaGFkb3dNYXAoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXRGYWNlQ3VsbGluZzogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldEZhY2VDdWxsaW5nKCkgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cblx0fSxcblx0YWxsb2NUZXh0dXJlVW5pdDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmFsbG9jVGV4dHVyZVVuaXQoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRzZXRUZXh0dXJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZSgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHNldFRleHR1cmUyRDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNldFRleHR1cmUyRCgpIGhhcyBiZWVuIHJlbW92ZWQuJyApO1xuXG5cdH0sXG5cdHNldFRleHR1cmVDdWJlOiBmdW5jdGlvbiAoKSB7XG5cblx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2V0VGV4dHVyZUN1YmUoKSBoYXMgYmVlbiByZW1vdmVkLicgKTtcblxuXHR9LFxuXHRnZXRBY3RpdmVNaXBNYXBMZXZlbDogZnVuY3Rpb24gKCkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdldEFjdGl2ZU1pcE1hcExldmVsKCkgaXMgbm93IC5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpLicgKTtcblx0XHRyZXR1cm4gdGhpcy5nZXRBY3RpdmVNaXBtYXBMZXZlbCgpO1xuXG5cdH1cblxufSApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJlci5wcm90b3R5cGUsIHtcblxuXHRzaGFkb3dNYXBFbmFibGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC5lbmFibGVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBFbmFibGVkIGlzIG5vdyAuc2hhZG93TWFwLmVuYWJsZWQuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAuZW5hYmxlZCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBUeXBlOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLnNoYWRvd01hcC50eXBlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBUeXBlIGlzIG5vdyAuc2hhZG93TWFwLnR5cGUuJyApO1xuXHRcdFx0dGhpcy5zaGFkb3dNYXAudHlwZSA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRzaGFkb3dNYXBDdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwQ3VsbEZhY2UgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggLyogdmFsdWUgKi8gKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXBDdWxsRmFjZSBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Y29udGV4dDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuY29udGV4dCBoYXMgYmVlbiByZW1vdmVkLiBVc2UgLmdldENvbnRleHQoKSBpbnN0ZWFkLicgKTtcblx0XHRcdHJldHVybiB0aGlzLmdldENvbnRleHQoKTtcblxuXHRcdH1cblx0fSxcblx0dnI6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnZyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnhyJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMueHI7XG5cblx0XHR9XG5cdH0sXG5cdGdhbW1hSW5wdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hSW5wdXQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IHRoZSBlbmNvZGluZyBmb3IgdGV4dHVyZXMgdmlhIFRleHR1cmUuZW5jb2RpbmcgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuZ2FtbWFJbnB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgdGhlIGVuY29kaW5nIGZvciB0ZXh0dXJlcyB2aWEgVGV4dHVyZS5lbmNvZGluZyBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fSxcblx0Z2FtbWFPdXRwdXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLmdhbW1hT3V0cHV0IGhhcyBiZWVuIHJlbW92ZWQuIFNldCBXZWJHTFJlbmRlcmVyLm91dHB1dEVuY29kaW5nIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5nYW1tYU91dHB1dCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgV2ViR0xSZW5kZXJlci5vdXRwdXRFbmNvZGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdHRoaXMub3V0cHV0RW5jb2RpbmcgPSAoIHZhbHVlID09PSB0cnVlICkgPyBzUkdCRW5jb2RpbmcgOiBMaW5lYXJFbmNvZGluZztcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBXZWJHTFNoYWRvd01hcC5wcm90b3R5cGUsIHtcblxuXHRjdWxsRmFjZToge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLmN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIC8qIGN1bGxGYWNlICovICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlcmVyOiAuc2hhZG93TWFwLmN1bGxGYWNlIGhhcyBiZWVuIHJlbW92ZWQuIFNldCBNYXRlcmlhbC5zaGFkb3dTaWRlIGluc3RlYWQuJyApO1xuXG5cdFx0fVxuXHR9LFxuXHRyZW5kZXJSZXZlcnNlU2lkZWQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJSZXZlcnNlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cblx0XHR9XG5cdH0sXG5cdHJlbmRlclNpbmdsZVNpZGVkOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyZXI6IC5zaGFkb3dNYXAucmVuZGVyU2luZ2xlU2lkZWQgaGFzIGJlZW4gcmVtb3ZlZC4gU2V0IE1hdGVyaWFsLnNoYWRvd1NpZGUgaW5zdGVhZC4nICk7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJlcjogLnNoYWRvd01hcC5yZW5kZXJTaW5nbGVTaWRlZCBoYXMgYmVlbiByZW1vdmVkLiBTZXQgTWF0ZXJpYWwuc2hhZG93U2lkZSBpbnN0ZWFkLicgKTtcblxuXHRcdH1cblx0fVxuXG59ICk7XG5cbmZ1bmN0aW9uIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSggd2lkdGgsIGhlaWdodCwgb3B0aW9ucyApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldEN1YmUoIHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMgKSBpcyBub3cgV2ViR0xDdWJlUmVuZGVyVGFyZ2V0KCBzaXplLCBvcHRpb25zICkuJyApO1xuXHRyZXR1cm4gbmV3IFdlYkdMQ3ViZVJlbmRlclRhcmdldCggd2lkdGgsIG9wdGlvbnMgKTtcblxufVxuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggV2ViR0xSZW5kZXJUYXJnZXQucHJvdG90eXBlLCB7XG5cblx0d3JhcFM6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwUyBpcyBub3cgLnRleHR1cmUud3JhcFMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwUztcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBTIGlzIG5vdyAudGV4dHVyZS53cmFwUy4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUud3JhcFMgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0d3JhcFQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC53cmFwVCBpcyBub3cgLnRleHR1cmUud3JhcFQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS53cmFwVDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLndyYXBUIGlzIG5vdyAudGV4dHVyZS53cmFwVC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUud3JhcFQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0bWFnRmlsdGVyOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWFnRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5tYWdGaWx0ZXIuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5tYWdGaWx0ZXI7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5tYWdGaWx0ZXIgaXMgbm93IC50ZXh0dXJlLm1hZ0ZpbHRlci4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUubWFnRmlsdGVyID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdG1pbkZpbHRlcjoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm1pbkZpbHRlciBpcyBub3cgLnRleHR1cmUubWluRmlsdGVyLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUubWluRmlsdGVyO1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAubWluRmlsdGVyIGlzIG5vdyAudGV4dHVyZS5taW5GaWx0ZXIuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm1pbkZpbHRlciA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRhbmlzb3Ryb3B5OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuYW5pc290cm9weSBpcyBub3cgLnRleHR1cmUuYW5pc290cm9weS4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLmFuaXNvdHJvcHk7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5hbmlzb3Ryb3B5IGlzIG5vdyAudGV4dHVyZS5hbmlzb3Ryb3B5LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5hbmlzb3Ryb3B5ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdG9mZnNldDoge1xuXHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLm9mZnNldCBpcyBub3cgLnRleHR1cmUub2Zmc2V0LicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUub2Zmc2V0O1xuXG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAub2Zmc2V0IGlzIG5vdyAudGV4dHVyZS5vZmZzZXQuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm9mZnNldCA9IHZhbHVlO1xuXG5cdFx0fVxuXHR9LFxuXHRyZXBlYXQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5yZXBlYXQgaXMgbm93IC50ZXh0dXJlLnJlcGVhdC4nICk7XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlLnJlcGVhdDtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnJlcGVhdCBpcyBub3cgLnRleHR1cmUucmVwZWF0LicgKTtcblx0XHRcdHRoaXMudGV4dHVyZS5yZXBlYXQgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0Zm9ybWF0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZm9ybWF0IGlzIG5vdyAudGV4dHVyZS5mb3JtYXQuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5mb3JtYXQ7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5mb3JtYXQgaXMgbm93IC50ZXh0dXJlLmZvcm1hdC4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUuZm9ybWF0ID0gdmFsdWU7XG5cblx0XHR9XG5cdH0sXG5cdHR5cGU6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC50eXBlIGlzIG5vdyAudGV4dHVyZS50eXBlLicgKTtcblx0XHRcdHJldHVybiB0aGlzLnRleHR1cmUudHlwZTtcblxuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoIHZhbHVlICkge1xuXG5cdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5XZWJHTFJlbmRlclRhcmdldDogLnR5cGUgaXMgbm93IC50ZXh0dXJlLnR5cGUuJyApO1xuXHRcdFx0dGhpcy50ZXh0dXJlLnR5cGUgPSB2YWx1ZTtcblxuXHRcdH1cblx0fSxcblx0Z2VuZXJhdGVNaXBtYXBzOiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLldlYkdMUmVuZGVyVGFyZ2V0OiAuZ2VuZXJhdGVNaXBtYXBzIGlzIG5vdyAudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHMuJyApO1xuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZS5nZW5lcmF0ZU1pcG1hcHM7XG5cblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuV2ViR0xSZW5kZXJUYXJnZXQ6IC5nZW5lcmF0ZU1pcG1hcHMgaXMgbm93IC50ZXh0dXJlLmdlbmVyYXRlTWlwbWFwcy4nICk7XG5cdFx0XHR0aGlzLnRleHR1cmUuZ2VuZXJhdGVNaXBtYXBzID0gdmFsdWU7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG4vL1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQXVkaW8ucHJvdG90eXBlLCB7XG5cblx0bG9hZDoge1xuXHRcdHZhbHVlOiBmdW5jdGlvbiAoIGZpbGUgKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAubG9hZCBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQXVkaW9Mb2FkZXIgaW5zdGVhZC4nICk7XG5cdFx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXHRcdFx0dmFyIGF1ZGlvTG9hZGVyID0gbmV3IEF1ZGlvTG9hZGVyKCk7XG5cdFx0XHRhdWRpb0xvYWRlci5sb2FkKCBmaWxlLCBmdW5jdGlvbiAoIGJ1ZmZlciApIHtcblxuXHRcdFx0XHRzY29wZS5zZXRCdWZmZXIoIGJ1ZmZlciApO1xuXG5cdFx0XHR9ICk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdH1cblx0fSxcblx0c3RhcnRUaW1lOiB7XG5cdFx0c2V0OiBmdW5jdGlvbiAoKSB7XG5cblx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvOiAuc3RhcnRUaW1lIGlzIG5vdyAucGxheSggZGVsYXkgKS4nICk7XG5cblx0XHR9XG5cdH1cblxufSApO1xuXG5BdWRpb0FuYWx5c2VyLnByb3RvdHlwZS5nZXREYXRhID0gZnVuY3Rpb24gKCkge1xuXG5cdGNvbnNvbGUud2FybiggJ1RIUkVFLkF1ZGlvQW5hbHlzZXI6IC5nZXREYXRhKCkgaXMgbm93IC5nZXRGcmVxdWVuY3lEYXRhKCkuJyApO1xuXHRyZXR1cm4gdGhpcy5nZXRGcmVxdWVuY3lEYXRhKCk7XG5cbn07XG5cbi8vXG5cbkN1YmVDYW1lcmEucHJvdG90eXBlLnVwZGF0ZUN1YmVNYXAgPSBmdW5jdGlvbiAoIHJlbmRlcmVyLCBzY2VuZSApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5DdWJlQ2FtZXJhOiAudXBkYXRlQ3ViZU1hcCgpIGlzIG5vdyAudXBkYXRlKCkuJyApO1xuXHRyZXR1cm4gdGhpcy51cGRhdGUoIHJlbmRlcmVyLCBzY2VuZSApO1xuXG59O1xuXG4vL1xuXG52YXIgR2VvbWV0cnlVdGlscyA9IHtcblxuXHRtZXJnZTogZnVuY3Rpb24gKCBnZW9tZXRyeTEsIGdlb21ldHJ5MiwgbWF0ZXJpYWxJbmRleE9mZnNldCApIHtcblxuXHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLkdlb21ldHJ5VXRpbHM6IC5tZXJnZSgpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkubWVyZ2UoIGdlb21ldHJ5MiwgbWF0cml4LCBtYXRlcmlhbEluZGV4T2Zmc2V0ICkgaW5zdGVhZC4nICk7XG5cdFx0dmFyIG1hdHJpeDtcblxuXHRcdGlmICggZ2VvbWV0cnkyLmlzTWVzaCApIHtcblxuXHRcdFx0Z2VvbWV0cnkyLm1hdHJpeEF1dG9VcGRhdGUgJiYgZ2VvbWV0cnkyLnVwZGF0ZU1hdHJpeCgpO1xuXG5cdFx0XHRtYXRyaXggPSBnZW9tZXRyeTIubWF0cml4O1xuXHRcdFx0Z2VvbWV0cnkyID0gZ2VvbWV0cnkyLmdlb21ldHJ5O1xuXG5cdFx0fVxuXG5cdFx0Z2VvbWV0cnkxLm1lcmdlKCBnZW9tZXRyeTIsIG1hdHJpeCwgbWF0ZXJpYWxJbmRleE9mZnNldCApO1xuXG5cdH0sXG5cblx0Y2VudGVyOiBmdW5jdGlvbiAoIGdlb21ldHJ5ICkge1xuXG5cdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuR2VvbWV0cnlVdGlsczogLmNlbnRlcigpIGhhcyBiZWVuIG1vdmVkIHRvIEdlb21ldHJ5LiBVc2UgZ2VvbWV0cnkuY2VudGVyKCkgaW5zdGVhZC4nICk7XG5cdFx0cmV0dXJuIGdlb21ldHJ5LmNlbnRlcigpO1xuXG5cdH1cblxufTtcblxuSW1hZ2VVdGlscy5jcm9zc09yaWdpbiA9IHVuZGVmaW5lZDtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uICggdXJsLCBtYXBwaW5nLCBvbkxvYWQsIG9uRXJyb3IgKSB7XG5cblx0Y29uc29sZS53YXJuKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuVGV4dHVyZUxvYWRlcigpIGluc3RlYWQuJyApO1xuXG5cdHZhciBsb2FkZXIgPSBuZXcgVGV4dHVyZUxvYWRlcigpO1xuXHRsb2FkZXIuc2V0Q3Jvc3NPcmlnaW4oIHRoaXMuY3Jvc3NPcmlnaW4gKTtcblxuXHR2YXIgdGV4dHVyZSA9IGxvYWRlci5sb2FkKCB1cmwsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkVGV4dHVyZUN1YmUgPSBmdW5jdGlvbiAoIHVybHMsIG1hcHBpbmcsIG9uTG9hZCwgb25FcnJvciApIHtcblxuXHRjb25zb2xlLndhcm4oICdUSFJFRS5JbWFnZVV0aWxzLmxvYWRUZXh0dXJlQ3ViZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgVEhSRUUuQ3ViZVRleHR1cmVMb2FkZXIoKSBpbnN0ZWFkLicgKTtcblxuXHR2YXIgbG9hZGVyID0gbmV3IEN1YmVUZXh0dXJlTG9hZGVyKCk7XG5cdGxvYWRlci5zZXRDcm9zc09yaWdpbiggdGhpcy5jcm9zc09yaWdpbiApO1xuXG5cdHZhciB0ZXh0dXJlID0gbG9hZGVyLmxvYWQoIHVybHMsIG9uTG9hZCwgdW5kZWZpbmVkLCBvbkVycm9yICk7XG5cblx0aWYgKCBtYXBwaW5nICkgdGV4dHVyZS5tYXBwaW5nID0gbWFwcGluZztcblxuXHRyZXR1cm4gdGV4dHVyZTtcblxufTtcblxuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmUgPSBmdW5jdGlvbiAoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cbn07XG5cbkltYWdlVXRpbHMubG9hZENvbXByZXNzZWRUZXh0dXJlQ3ViZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRjb25zb2xlLmVycm9yKCAnVEhSRUUuSW1hZ2VVdGlscy5sb2FkQ29tcHJlc3NlZFRleHR1cmVDdWJlIGhhcyBiZWVuIHJlbW92ZWQuIFVzZSBUSFJFRS5ERFNMb2FkZXIgaW5zdGVhZC4nICk7XG5cbn07XG5cbi8vXG5cbmZ1bmN0aW9uIENhbnZhc1JlbmRlcmVyKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5DYW52YXNSZW5kZXJlciBoYXMgYmVlbiByZW1vdmVkJyApO1xuXG59XG5cbi8vXG5cbmZ1bmN0aW9uIEpTT05Mb2FkZXIoKSB7XG5cblx0Y29uc29sZS5lcnJvciggJ1RIUkVFLkpTT05Mb2FkZXIgaGFzIGJlZW4gcmVtb3ZlZC4nICk7XG5cbn1cblxuLy9cblxudmFyIFNjZW5lVXRpbHMgPSB7XG5cblx0Y3JlYXRlTXVsdGlNYXRlcmlhbE9iamVjdDogZnVuY3Rpb24gKCAvKiBnZW9tZXRyeSwgbWF0ZXJpYWxzICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0ZGV0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBwYXJlbnQsIHNjZW5lICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH0sXG5cblx0YXR0YWNoOiBmdW5jdGlvbiAoIC8qIGNoaWxkLCBzY2VuZSwgcGFyZW50ICovICkge1xuXG5cdFx0Y29uc29sZS5lcnJvciggJ1RIUkVFLlNjZW5lVXRpbHMgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS91dGlscy9TY2VuZVV0aWxzLmpzJyApO1xuXG5cdH1cblxufTtcblxuLy9cblxuZnVuY3Rpb24gTGVuc0ZsYXJlKCkge1xuXG5cdGNvbnNvbGUuZXJyb3IoICdUSFJFRS5MZW5zRmxhcmUgaGFzIGJlZW4gbW92ZWQgdG8gL2V4YW1wbGVzL2pzbS9vYmplY3RzL0xlbnNmbGFyZS5qcycgKTtcblxufVxuXG5pZiAoIHR5cGVvZiBfX1RIUkVFX0RFVlRPT0xTX18gIT09ICd1bmRlZmluZWQnICkge1xuXG5cdC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5cdF9fVEhSRUVfREVWVE9PTFNfXy5kaXNwYXRjaEV2ZW50KCBuZXcgQ3VzdG9tRXZlbnQoICdyZWdpc3RlcicsIHsgZGV0YWlsOiB7XG5cdFx0cmV2aXNpb246IFJFVklTSU9OLFxuXHR9IH0gKSApO1xuXHQvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmICovXG5cbn1cblxuZXhwb3J0IHsgQUNFU0ZpbG1pY1RvbmVNYXBwaW5nLCBBZGRFcXVhdGlvbiwgQWRkT3BlcmF0aW9uLCBBZGRpdGl2ZUJsZW5kaW5nLCBBbHBoYUZvcm1hdCwgQWx3YXlzRGVwdGgsIEFsd2F5c1N0ZW5jaWxGdW5jLCBBbWJpZW50TGlnaHQsIEFtYmllbnRMaWdodFByb2JlLCBBbmltYXRpb25DbGlwLCBBbmltYXRpb25Mb2FkZXIsIEFuaW1hdGlvbk1peGVyLCBBbmltYXRpb25PYmplY3RHcm91cCwgQW5pbWF0aW9uVXRpbHMsIEFyY0N1cnZlLCBBcnJheUNhbWVyYSwgQXJyb3dIZWxwZXIsIEF1ZGlvLCBBdWRpb0FuYWx5c2VyLCBBdWRpb0NvbnRleHQsIEF1ZGlvTGlzdGVuZXIsIEF1ZGlvTG9hZGVyLCBBeGVzSGVscGVyLCBBeGlzSGVscGVyLCBCYWNrU2lkZSwgQmFzaWNEZXB0aFBhY2tpbmcsIEJhc2ljU2hhZG93TWFwLCBCaW5hcnlUZXh0dXJlTG9hZGVyLCBCb25lLCBCb29sZWFuS2V5ZnJhbWVUcmFjaywgQm91bmRpbmdCb3hIZWxwZXIsIEJveDIsIEJveDMsIEJveDNIZWxwZXIsIEJveEJ1ZmZlckdlb21ldHJ5LCBCb3hHZW9tZXRyeSwgQm94SGVscGVyLCBCdWZmZXJBdHRyaWJ1dGUsIEJ1ZmZlckdlb21ldHJ5LCBCdWZmZXJHZW9tZXRyeUxvYWRlciwgQnl0ZVR5cGUsIENhY2hlLCBDYW1lcmEsIENhbWVyYUhlbHBlciwgQ2FudmFzUmVuZGVyZXIsIENhbnZhc1RleHR1cmUsIENhdG11bGxSb21DdXJ2ZTMsIENpbmVvblRvbmVNYXBwaW5nLCBDaXJjbGVCdWZmZXJHZW9tZXRyeSwgQ2lyY2xlR2VvbWV0cnksIENsYW1wVG9FZGdlV3JhcHBpbmcsIENsb2NrLCBDbG9zZWRTcGxpbmVDdXJ2ZTMsIENvbG9yLCBDb2xvcktleWZyYW1lVHJhY2ssIENvbXByZXNzZWRUZXh0dXJlLCBDb21wcmVzc2VkVGV4dHVyZUxvYWRlciwgQ29uZUJ1ZmZlckdlb21ldHJ5LCBDb25lR2VvbWV0cnksIEN1YmVDYW1lcmEsIEJveEdlb21ldHJ5IGFzIEN1YmVHZW9tZXRyeSwgQ3ViZVJlZmxlY3Rpb25NYXBwaW5nLCBDdWJlUmVmcmFjdGlvbk1hcHBpbmcsIEN1YmVUZXh0dXJlLCBDdWJlVGV4dHVyZUxvYWRlciwgQ3ViZVVWUmVmbGVjdGlvbk1hcHBpbmcsIEN1YmVVVlJlZnJhY3Rpb25NYXBwaW5nLCBDdWJpY0JlemllckN1cnZlLCBDdWJpY0JlemllckN1cnZlMywgQ3ViaWNJbnRlcnBvbGFudCwgQ3VsbEZhY2VCYWNrLCBDdWxsRmFjZUZyb250LCBDdWxsRmFjZUZyb250QmFjaywgQ3VsbEZhY2VOb25lLCBDdXJ2ZSwgQ3VydmVQYXRoLCBDdXN0b21CbGVuZGluZywgQ3lsaW5kZXJCdWZmZXJHZW9tZXRyeSwgQ3lsaW5kZXJHZW9tZXRyeSwgQ3lsaW5kcmljYWwsIERhdGFUZXh0dXJlLCBEYXRhVGV4dHVyZTJEQXJyYXksIERhdGFUZXh0dXJlM0QsIERhdGFUZXh0dXJlTG9hZGVyLCBEZWNyZW1lbnRTdGVuY2lsT3AsIERlY3JlbWVudFdyYXBTdGVuY2lsT3AsIERlZmF1bHRMb2FkaW5nTWFuYWdlciwgRGVwdGhGb3JtYXQsIERlcHRoU3RlbmNpbEZvcm1hdCwgRGVwdGhUZXh0dXJlLCBEaXJlY3Rpb25hbExpZ2h0LCBEaXJlY3Rpb25hbExpZ2h0SGVscGVyLCBEaXJlY3Rpb25hbExpZ2h0U2hhZG93LCBEaXNjcmV0ZUludGVycG9sYW50LCBEb2RlY2FoZWRyb25CdWZmZXJHZW9tZXRyeSwgRG9kZWNhaGVkcm9uR2VvbWV0cnksIERvdWJsZVNpZGUsIERzdEFscGhhRmFjdG9yLCBEc3RDb2xvckZhY3RvciwgRHluYW1pY0J1ZmZlckF0dHJpYnV0ZSwgRHluYW1pY0NvcHlVc2FnZSwgRHluYW1pY0RyYXdVc2FnZSwgRHluYW1pY1JlYWRVc2FnZSwgRWRnZXNHZW9tZXRyeSwgRWRnZXNIZWxwZXIsIEVsbGlwc2VDdXJ2ZSwgRXF1YWxEZXB0aCwgRXF1YWxTdGVuY2lsRnVuYywgRXF1aXJlY3Rhbmd1bGFyUmVmbGVjdGlvbk1hcHBpbmcsIEVxdWlyZWN0YW5ndWxhclJlZnJhY3Rpb25NYXBwaW5nLCBFdWxlciwgRXZlbnREaXNwYXRjaGVyLCBFeHRydWRlQnVmZmVyR2VvbWV0cnksIEV4dHJ1ZGVHZW9tZXRyeSwgRmFjZTMsIEZhY2U0LCBGYWNlQ29sb3JzLCBGaWxlTG9hZGVyLCBGbGF0U2hhZGluZywgRmxvYXQzMkF0dHJpYnV0ZSwgRmxvYXQzMkJ1ZmZlckF0dHJpYnV0ZSwgRmxvYXQ2NEF0dHJpYnV0ZSwgRmxvYXQ2NEJ1ZmZlckF0dHJpYnV0ZSwgRmxvYXRUeXBlLCBGb2csIEZvZ0V4cDIsIEZvbnQsIEZvbnRMb2FkZXIsIEZyb250RmFjZURpcmVjdGlvbkNDVywgRnJvbnRGYWNlRGlyZWN0aW9uQ1csIEZyb250U2lkZSwgRnJ1c3R1bSwgR2FtbWFFbmNvZGluZywgR2VvbWV0cnksIEdlb21ldHJ5VXRpbHMsIEdyZWF0ZXJEZXB0aCwgR3JlYXRlckVxdWFsRGVwdGgsIEdyZWF0ZXJFcXVhbFN0ZW5jaWxGdW5jLCBHcmVhdGVyU3RlbmNpbEZ1bmMsIEdyaWRIZWxwZXIsIEdyb3VwLCBIYWxmRmxvYXRUeXBlLCBIZW1pc3BoZXJlTGlnaHQsIEhlbWlzcGhlcmVMaWdodEhlbHBlciwgSGVtaXNwaGVyZUxpZ2h0UHJvYmUsIEljb3NhaGVkcm9uQnVmZmVyR2VvbWV0cnksIEljb3NhaGVkcm9uR2VvbWV0cnksIEltYWdlQml0bWFwTG9hZGVyLCBJbWFnZUxvYWRlciwgSW1hZ2VVdGlscywgSW1tZWRpYXRlUmVuZGVyT2JqZWN0LCBJbmNyZW1lbnRTdGVuY2lsT3AsIEluY3JlbWVudFdyYXBTdGVuY2lsT3AsIEluc3RhbmNlZEJ1ZmZlckF0dHJpYnV0ZSwgSW5zdGFuY2VkQnVmZmVyR2VvbWV0cnksIEluc3RhbmNlZEludGVybGVhdmVkQnVmZmVyLCBJbnN0YW5jZWRNZXNoLCBJbnQxNkF0dHJpYnV0ZSwgSW50MTZCdWZmZXJBdHRyaWJ1dGUsIEludDMyQXR0cmlidXRlLCBJbnQzMkJ1ZmZlckF0dHJpYnV0ZSwgSW50OEF0dHJpYnV0ZSwgSW50OEJ1ZmZlckF0dHJpYnV0ZSwgSW50VHlwZSwgSW50ZXJsZWF2ZWRCdWZmZXIsIEludGVybGVhdmVkQnVmZmVyQXR0cmlidXRlLCBJbnRlcnBvbGFudCwgSW50ZXJwb2xhdGVEaXNjcmV0ZSwgSW50ZXJwb2xhdGVMaW5lYXIsIEludGVycG9sYXRlU21vb3RoLCBJbnZlcnRTdGVuY2lsT3AsIEpTT05Mb2FkZXIsIEtlZXBTdGVuY2lsT3AsIEtleWZyYW1lVHJhY2ssIExPRCwgTGF0aGVCdWZmZXJHZW9tZXRyeSwgTGF0aGVHZW9tZXRyeSwgTGF5ZXJzLCBMZW5zRmxhcmUsIExlc3NEZXB0aCwgTGVzc0VxdWFsRGVwdGgsIExlc3NFcXVhbFN0ZW5jaWxGdW5jLCBMZXNzU3RlbmNpbEZ1bmMsIExpZ2h0LCBMaWdodFByb2JlLCBMaWdodFNoYWRvdywgTGluZSwgTGluZTMsIExpbmVCYXNpY01hdGVyaWFsLCBMaW5lQ3VydmUsIExpbmVDdXJ2ZTMsIExpbmVEYXNoZWRNYXRlcmlhbCwgTGluZUxvb3AsIExpbmVQaWVjZXMsIExpbmVTZWdtZW50cywgTGluZVN0cmlwLCBMaW5lYXJFbmNvZGluZywgTGluZWFyRmlsdGVyLCBMaW5lYXJJbnRlcnBvbGFudCwgTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyLCBMaW5lYXJNaXBNYXBOZWFyZXN0RmlsdGVyLCBMaW5lYXJNaXBtYXBMaW5lYXJGaWx0ZXIsIExpbmVhck1pcG1hcE5lYXJlc3RGaWx0ZXIsIExpbmVhclRvbmVNYXBwaW5nLCBMb2FkZXIsIExvYWRlclV0aWxzLCBMb2FkaW5nTWFuYWdlciwgTG9nTHV2RW5jb2RpbmcsIExvb3BPbmNlLCBMb29wUGluZ1BvbmcsIExvb3BSZXBlYXQsIEx1bWluYW5jZUFscGhhRm9ybWF0LCBMdW1pbmFuY2VGb3JtYXQsIE1PVVNFLCBNYXRlcmlhbCwgTWF0ZXJpYWxMb2FkZXIsIE1hdGhVdGlscyBhcyBNYXRoLCBNYXRoVXRpbHMsIE1hdHJpeDMsIE1hdHJpeDQsIE1heEVxdWF0aW9uLCBNZXNoLCBNZXNoQmFzaWNNYXRlcmlhbCwgTWVzaERlcHRoTWF0ZXJpYWwsIE1lc2hEaXN0YW5jZU1hdGVyaWFsLCBNZXNoRmFjZU1hdGVyaWFsLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBNZXNoTWF0Y2FwTWF0ZXJpYWwsIE1lc2hOb3JtYWxNYXRlcmlhbCwgTWVzaFBob25nTWF0ZXJpYWwsIE1lc2hQaHlzaWNhbE1hdGVyaWFsLCBNZXNoU3RhbmRhcmRNYXRlcmlhbCwgTWVzaFRvb25NYXRlcmlhbCwgTWluRXF1YXRpb24sIE1pcnJvcmVkUmVwZWF0V3JhcHBpbmcsIE1peE9wZXJhdGlvbiwgTXVsdGlNYXRlcmlhbCwgTXVsdGlwbHlCbGVuZGluZywgTXVsdGlwbHlPcGVyYXRpb24sIE5lYXJlc3RGaWx0ZXIsIE5lYXJlc3RNaXBNYXBMaW5lYXJGaWx0ZXIsIE5lYXJlc3RNaXBNYXBOZWFyZXN0RmlsdGVyLCBOZWFyZXN0TWlwbWFwTGluZWFyRmlsdGVyLCBOZWFyZXN0TWlwbWFwTmVhcmVzdEZpbHRlciwgTmV2ZXJEZXB0aCwgTmV2ZXJTdGVuY2lsRnVuYywgTm9CbGVuZGluZywgTm9Db2xvcnMsIE5vVG9uZU1hcHBpbmcsIE5vcm1hbEJsZW5kaW5nLCBOb3RFcXVhbERlcHRoLCBOb3RFcXVhbFN0ZW5jaWxGdW5jLCBOdW1iZXJLZXlmcmFtZVRyYWNrLCBPYmplY3QzRCwgT2JqZWN0TG9hZGVyLCBPYmplY3RTcGFjZU5vcm1hbE1hcCwgT2N0YWhlZHJvbkJ1ZmZlckdlb21ldHJ5LCBPY3RhaGVkcm9uR2VvbWV0cnksIE9uZUZhY3RvciwgT25lTWludXNEc3RBbHBoYUZhY3RvciwgT25lTWludXNEc3RDb2xvckZhY3RvciwgT25lTWludXNTcmNBbHBoYUZhY3RvciwgT25lTWludXNTcmNDb2xvckZhY3RvciwgT3J0aG9ncmFwaGljQ2FtZXJhLCBQQ0ZTaGFkb3dNYXAsIFBDRlNvZnRTaGFkb3dNYXAsIFBNUkVNR2VuZXJhdG9yLCBQYXJhbWV0cmljQnVmZmVyR2VvbWV0cnksIFBhcmFtZXRyaWNHZW9tZXRyeSwgUGFydGljbGUsIFBhcnRpY2xlQmFzaWNNYXRlcmlhbCwgUGFydGljbGVTeXN0ZW0sIFBhcnRpY2xlU3lzdGVtTWF0ZXJpYWwsIFBhdGgsIFBlcnNwZWN0aXZlQ2FtZXJhLCBQbGFuZSwgUGxhbmVCdWZmZXJHZW9tZXRyeSwgUGxhbmVHZW9tZXRyeSwgUGxhbmVIZWxwZXIsIFBvaW50Q2xvdWQsIFBvaW50Q2xvdWRNYXRlcmlhbCwgUG9pbnRMaWdodCwgUG9pbnRMaWdodEhlbHBlciwgUG9pbnRzLCBQb2ludHNNYXRlcmlhbCwgUG9sYXJHcmlkSGVscGVyLCBQb2x5aGVkcm9uQnVmZmVyR2VvbWV0cnksIFBvbHloZWRyb25HZW9tZXRyeSwgUG9zaXRpb25hbEF1ZGlvLCBQcm9wZXJ0eUJpbmRpbmcsIFByb3BlcnR5TWl4ZXIsIFF1YWRyYXRpY0JlemllckN1cnZlLCBRdWFkcmF0aWNCZXppZXJDdXJ2ZTMsIFF1YXRlcm5pb24sIFF1YXRlcm5pb25LZXlmcmFtZVRyYWNrLCBRdWF0ZXJuaW9uTGluZWFySW50ZXJwb2xhbnQsIFJFVklTSU9OLCBSR0JBRGVwdGhQYWNraW5nLCBSR0JBRm9ybWF0LCBSR0JBSW50ZWdlckZvcm1hdCwgUkdCQV9BU1RDXzEweDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEweDVfRm9ybWF0LCBSR0JBX0FTVENfMTB4Nl9Gb3JtYXQsIFJHQkFfQVNUQ18xMHg4X0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEwX0Zvcm1hdCwgUkdCQV9BU1RDXzEyeDEyX0Zvcm1hdCwgUkdCQV9BU1RDXzR4NF9Gb3JtYXQsIFJHQkFfQVNUQ181eDRfRm9ybWF0LCBSR0JBX0FTVENfNXg1X0Zvcm1hdCwgUkdCQV9BU1RDXzZ4NV9Gb3JtYXQsIFJHQkFfQVNUQ182eDZfRm9ybWF0LCBSR0JBX0FTVENfOHg1X0Zvcm1hdCwgUkdCQV9BU1RDXzh4Nl9Gb3JtYXQsIFJHQkFfQVNUQ184eDhfRm9ybWF0LCBSR0JBX0JQVENfRm9ybWF0LCBSR0JBX0VUQzJfRUFDX0Zvcm1hdCwgUkdCQV9QVlJUQ18yQlBQVjFfRm9ybWF0LCBSR0JBX1BWUlRDXzRCUFBWMV9Gb3JtYXQsIFJHQkFfUzNUQ19EWFQxX0Zvcm1hdCwgUkdCQV9TM1RDX0RYVDNfRm9ybWF0LCBSR0JBX1MzVENfRFhUNV9Gb3JtYXQsIFJHQkRFbmNvZGluZywgUkdCRUVuY29kaW5nLCBSR0JFRm9ybWF0LCBSR0JGb3JtYXQsIFJHQkludGVnZXJGb3JtYXQsIFJHQk0xNkVuY29kaW5nLCBSR0JNN0VuY29kaW5nLCBSR0JfRVRDMV9Gb3JtYXQsIFJHQl9FVEMyX0Zvcm1hdCwgUkdCX1BWUlRDXzJCUFBWMV9Gb3JtYXQsIFJHQl9QVlJUQ180QlBQVjFfRm9ybWF0LCBSR0JfUzNUQ19EWFQxX0Zvcm1hdCwgUkdGb3JtYXQsIFJHSW50ZWdlckZvcm1hdCwgUmF3U2hhZGVyTWF0ZXJpYWwsIFJheSwgUmF5Y2FzdGVyLCBSZWN0QXJlYUxpZ2h0LCBSZWRGb3JtYXQsIFJlZEludGVnZXJGb3JtYXQsIFJlaW5oYXJkVG9uZU1hcHBpbmcsIFJlcGVhdFdyYXBwaW5nLCBSZXBsYWNlU3RlbmNpbE9wLCBSZXZlcnNlU3VidHJhY3RFcXVhdGlvbiwgUmluZ0J1ZmZlckdlb21ldHJ5LCBSaW5nR2VvbWV0cnksIFNSR0I4X0FMUEhBOF9BU1RDXzEweDEwX0Zvcm1hdCwgU1JHQjhfQUxQSEE4X0FTVENfMTB4NV9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzEweDZfRm9ybWF0LCBTUkdCOF9BTFBIQThfQVNUQ18xMHg4X0Zvcm1hdCwgU1JHQjhfQUxQSEE4X0FTVENfMTJ4MTBfRm9ybWF0LCBTUkdCOF9BTFBIQThfQVNUQ18xMngxMl9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzR4NF9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzV4NF9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzV4NV9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzZ4NV9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzZ4Nl9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzh4NV9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzh4Nl9Gb3JtYXQsIFNSR0I4X0FMUEhBOF9BU1RDXzh4OF9Gb3JtYXQsIFNjZW5lLCBTY2VuZVV0aWxzLCBTaGFkZXJDaHVuaywgU2hhZGVyTGliLCBTaGFkZXJNYXRlcmlhbCwgU2hhZG93TWF0ZXJpYWwsIFNoYXBlLCBTaGFwZUJ1ZmZlckdlb21ldHJ5LCBTaGFwZUdlb21ldHJ5LCBTaGFwZVBhdGgsIFNoYXBlVXRpbHMsIFNob3J0VHlwZSwgU2tlbGV0b24sIFNrZWxldG9uSGVscGVyLCBTa2lubmVkTWVzaCwgU21vb3RoU2hhZGluZywgU3BoZXJlLCBTcGhlcmVCdWZmZXJHZW9tZXRyeSwgU3BoZXJlR2VvbWV0cnksIFNwaGVyaWNhbCwgU3BoZXJpY2FsSGFybW9uaWNzMywgU3BoZXJpY2FsUmVmbGVjdGlvbk1hcHBpbmcsIFNwbGluZSwgU3BsaW5lQ3VydmUsIFNwbGluZUN1cnZlMywgU3BvdExpZ2h0LCBTcG90TGlnaHRIZWxwZXIsIFNwb3RMaWdodFNoYWRvdywgU3ByaXRlLCBTcHJpdGVNYXRlcmlhbCwgU3JjQWxwaGFGYWN0b3IsIFNyY0FscGhhU2F0dXJhdGVGYWN0b3IsIFNyY0NvbG9yRmFjdG9yLCBTdGF0aWNDb3B5VXNhZ2UsIFN0YXRpY0RyYXdVc2FnZSwgU3RhdGljUmVhZFVzYWdlLCBTdGVyZW9DYW1lcmEsIFN0cmVhbUNvcHlVc2FnZSwgU3RyZWFtRHJhd1VzYWdlLCBTdHJlYW1SZWFkVXNhZ2UsIFN0cmluZ0tleWZyYW1lVHJhY2ssIFN1YnRyYWN0RXF1YXRpb24sIFN1YnRyYWN0aXZlQmxlbmRpbmcsIFRPVUNILCBUYW5nZW50U3BhY2VOb3JtYWxNYXAsIFRldHJhaGVkcm9uQnVmZmVyR2VvbWV0cnksIFRldHJhaGVkcm9uR2VvbWV0cnksIFRleHRCdWZmZXJHZW9tZXRyeSwgVGV4dEdlb21ldHJ5LCBUZXh0dXJlLCBUZXh0dXJlTG9hZGVyLCBUb3J1c0J1ZmZlckdlb21ldHJ5LCBUb3J1c0dlb21ldHJ5LCBUb3J1c0tub3RCdWZmZXJHZW9tZXRyeSwgVG9ydXNLbm90R2VvbWV0cnksIFRyaWFuZ2xlLCBUcmlhbmdsZUZhbkRyYXdNb2RlLCBUcmlhbmdsZVN0cmlwRHJhd01vZGUsIFRyaWFuZ2xlc0RyYXdNb2RlLCBUdWJlQnVmZmVyR2VvbWV0cnksIFR1YmVHZW9tZXRyeSwgVVZNYXBwaW5nLCBVaW50MTZBdHRyaWJ1dGUsIFVpbnQxNkJ1ZmZlckF0dHJpYnV0ZSwgVWludDMyQXR0cmlidXRlLCBVaW50MzJCdWZmZXJBdHRyaWJ1dGUsIFVpbnQ4QXR0cmlidXRlLCBVaW50OEJ1ZmZlckF0dHJpYnV0ZSwgVWludDhDbGFtcGVkQXR0cmlidXRlLCBVaW50OENsYW1wZWRCdWZmZXJBdHRyaWJ1dGUsIFVuY2hhcnRlZDJUb25lTWFwcGluZywgVW5pZm9ybSwgVW5pZm9ybXNMaWIsIFVuaWZvcm1zVXRpbHMsIFVuc2lnbmVkQnl0ZVR5cGUsIFVuc2lnbmVkSW50MjQ4VHlwZSwgVW5zaWduZWRJbnRUeXBlLCBVbnNpZ25lZFNob3J0NDQ0NFR5cGUsIFVuc2lnbmVkU2hvcnQ1NTUxVHlwZSwgVW5zaWduZWRTaG9ydDU2NVR5cGUsIFVuc2lnbmVkU2hvcnRUeXBlLCBWU01TaGFkb3dNYXAsIFZlY3RvcjIsIFZlY3RvcjMsIFZlY3RvcjQsIFZlY3RvcktleWZyYW1lVHJhY2ssIFZlcnRleCwgVmVydGV4Q29sb3JzLCBWaWRlb1RleHR1cmUsIFdlYkdMQ3ViZVJlbmRlclRhcmdldCwgV2ViR0xNdWx0aXNhbXBsZVJlbmRlclRhcmdldCwgV2ViR0xSZW5kZXJUYXJnZXQsIFdlYkdMUmVuZGVyVGFyZ2V0Q3ViZSwgV2ViR0xSZW5kZXJlciwgV2ViR0xVdGlscywgV2lyZWZyYW1lR2VvbWV0cnksIFdpcmVmcmFtZUhlbHBlciwgV3JhcEFyb3VuZEVuZGluZywgWEhSTG9hZGVyLCBaZXJvQ3VydmF0dXJlRW5kaW5nLCBaZXJvRmFjdG9yLCBaZXJvU2xvcGVFbmRpbmcsIFplcm9TdGVuY2lsT3AsIHNSR0JFbmNvZGluZyB9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgaWYgKE5BVElWRV9TWU1CT0wgJiYgaGFzKFN5bWJvbCwgbmFtZSkpIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IFN5bWJvbFtuYW1lXTtcbiAgICBlbHNlIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgfSByZXR1cm4gV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBBUlJBWV9JVEVSQVRPUiA9ICdBcnJheSBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUudmFsdWVzXG4vLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uICgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDtcbiAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleCsrO1xuICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7XG4gICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBpbmRleCwgZG9uZTogZmFsc2UgfTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiB7IHZhbHVlOiB0YXJnZXRbaW5kZXhdLCBkb25lOiBmYWxzZSB9O1xuICByZXR1cm4geyB2YWx1ZTogW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZG9uZTogZmFsc2UgfTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGV1bm1hcHBlZGFyZ3VtZW50c29iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuIiwiJ3VzZSBzdHJpY3QnXG4vKipcbiAqIEJhc2VkIG9uIGh0dHA6Ly93d3cuZW1hZ2l4Lm5ldC9hY2FkZW1pYy9tc2NzLXByb2plY3QvaXRlbS9jYW1lcmEtc3luYy13aXRoLWNzczMtYW5kLXdlYmdsLXRocmVlanNcbiAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb20vXG4gKiBAYXV0aG9yIHlvbW90c3UgLyBodHRwczovL3lvbW90c3UubmV0L1xuICovXG5cbmltcG9ydCB7XG5cdE1hdHJpeDQsXG5cdE9iamVjdDNELFxuXHRWZWN0b3IzXG59IGZyb20gJ3RocmVlJ1xuXG52YXIgQ1NTM0RPYmplY3QgPSBmdW5jdGlvbiAoIGVsZW1lbnQgKSB7XG5cblx0T2JqZWN0M0QuY2FsbCggdGhpcyApO1xuXG5cdHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG5cdHRoaXMuZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG5cdHRoaXMuZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nO1xuXHR0aGlzLmN1c3RvbSA9IHtcblx0XHRhbmltYXRpb246IHVuZGVmaW5lZFxuXHR9XG5cblx0dGhpcy5hZGRFdmVudExpc3RlbmVyKCAncmVtb3ZlZCcsIGZ1bmN0aW9uICgpIHtcblxuXHRcdHRoaXMudHJhdmVyc2UoIGZ1bmN0aW9uICggb2JqZWN0ICkge1xuXG5cdFx0XHRpZiAoIG9iamVjdC5lbGVtZW50IGluc3RhbmNlb2YgRWxlbWVudCAmJiBvYmplY3QuZWxlbWVudC5wYXJlbnROb2RlICE9PSBudWxsICkge1xuXG5cdFx0XHRcdG9iamVjdC5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG9iamVjdC5lbGVtZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH0gKTtcblxuXHR9ICk7XG5cbn07XG5cbkNTUzNET2JqZWN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIE9iamVjdDNELnByb3RvdHlwZSApO1xuQ1NTM0RPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTM0RPYmplY3Q7XG5cbnZhciBDU1MzRFNwcml0ZSA9IGZ1bmN0aW9uICggZWxlbWVudCApIHtcblxuXHRDU1MzRE9iamVjdC5jYWxsKCB0aGlzLCBlbGVtZW50ICk7XG5cbn07XG5cbkNTUzNEU3ByaXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENTUzNET2JqZWN0LnByb3RvdHlwZSApO1xuQ1NTM0RTcHJpdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ1NTM0RTcHJpdGU7XG5cbi8vXG5cbnZhciBDU1MzRFJlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuXG5cdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0dmFyIF93aWR0aCwgX2hlaWdodDtcblx0dmFyIF93aWR0aEhhbGYsIF9oZWlnaHRIYWxmO1xuXG5cdHZhciBtYXRyaXggPSBuZXcgTWF0cml4NCgpO1xuXG5cdHZhciBjYWNoZSA9IHtcblx0XHRjYW1lcmE6IHsgZm92OiAwLCBzdHlsZTogJycgfSxcblx0XHRvYmplY3RzOiBuZXcgV2Vha01hcCgpXG5cdH07XG5cblx0dmFyIGRvbUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xuXHRkb21FbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG5cblx0dGhpcy5kb21FbGVtZW50ID0gZG9tRWxlbWVudDtcblxuXHR2YXIgY2FtZXJhRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICk7XG5cblx0Y2FtZXJhRWxlbWVudC5zdHlsZS5XZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG5cdGNhbWVyYUVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuXHRjYW1lcmFFbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cblx0ZG9tRWxlbWVudC5hcHBlbmRDaGlsZCggY2FtZXJhRWxlbWVudCApO1xuXG5cdHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KCBuYXZpZ2F0b3IudXNlckFnZW50ICk7XG5cblx0dGhpcy5nZXRTaXplID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiBfd2lkdGgsXG5cdFx0XHRoZWlnaHQ6IF9oZWlnaHRcblx0XHR9O1xuXG5cdH07XG5cblx0dGhpcy5zZXRTaXplID0gZnVuY3Rpb24gKCB3aWR0aCwgaGVpZ2h0ICkge1xuXG5cdFx0X3dpZHRoID0gd2lkdGg7XG5cdFx0X2hlaWdodCA9IGhlaWdodDtcblx0XHRfd2lkdGhIYWxmID0gX3dpZHRoIC8gMjtcblx0XHRfaGVpZ2h0SGFsZiA9IF9oZWlnaHQgLyAyO1xuXG5cdFx0ZG9tRWxlbWVudC5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4Jztcblx0XHRkb21FbGVtZW50LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG5cblx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdGNhbWVyYUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcblxuXHR9O1xuXG5cdGZ1bmN0aW9uIGVwc2lsb24oIHZhbHVlICkge1xuXG5cdFx0cmV0dXJuIE1hdGguYWJzKCB2YWx1ZSApIDwgMWUtMTAgPyAwIDogdmFsdWU7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldENhbWVyYUNTU01hdHJpeCggbWF0cml4ICkge1xuXG5cdFx0dmFyIGVsZW1lbnRzID0gbWF0cml4LmVsZW1lbnRzO1xuXG5cdFx0cmV0dXJuICdtYXRyaXgzZCgnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAwIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMiBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA0IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA1IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgNiBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDcgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA4IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyA5IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTAgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMSBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEyIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCAtIGVsZW1lbnRzWyAxMyBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDE0IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTUgXSApICtcblx0XHQnKSc7XG5cblx0fVxuXG5cdGZ1bmN0aW9uIGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXggKSB7XG5cblx0XHR2YXIgZWxlbWVudHMgPSBtYXRyaXguZWxlbWVudHM7XG5cdFx0dmFyIG1hdHJpeDNkID0gJ21hdHJpeDNkKCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDAgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMiBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDMgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDQgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDUgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDYgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIC0gZWxlbWVudHNbIDcgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyA4IF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgOSBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEwIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTEgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxMiBdICkgKyAnLCcgK1xuXHRcdFx0ZXBzaWxvbiggZWxlbWVudHNbIDEzIF0gKSArICcsJyArXG5cdFx0XHRlcHNpbG9uKCBlbGVtZW50c1sgMTQgXSApICsgJywnICtcblx0XHRcdGVwc2lsb24oIGVsZW1lbnRzWyAxNSBdICkgK1xuXHRcdCcpJztcblxuXHRcdGlmICggaXNJRSApIHtcblxuXHRcdFx0cmV0dXJuICd0cmFuc2xhdGUoLTUwJSwtNTAlKScgK1xuXHRcdFx0XHQndHJhbnNsYXRlKCcgKyBfd2lkdGhIYWxmICsgJ3B4LCcgKyBfaGVpZ2h0SGFsZiArICdweCknICtcblx0XHRcdFx0Y2FtZXJhQ1NTTWF0cml4ICtcblx0XHRcdFx0bWF0cml4M2Q7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gJ3RyYW5zbGF0ZSgtNTAlLC01MCUpJyArIG1hdHJpeDNkO1xuXG5cdH1cblxuXHRmdW5jdGlvbiByZW5kZXJPYmplY3QoIG9iamVjdCwgc2NlbmUsIGNhbWVyYSwgY2FtZXJhQ1NTTWF0cml4ICkge1xuXG5cdFx0aWYgKCBvYmplY3QgaW5zdGFuY2VvZiBDU1MzRE9iamVjdCApIHtcblxuXHRcdFx0b2JqZWN0Lm9uQmVmb3JlUmVuZGVyKCBfdGhpcywgc2NlbmUsIGNhbWVyYSApO1xuXG5cdFx0XHR2YXIgc3R5bGU7XG5cblx0XHRcdGlmICggb2JqZWN0IGluc3RhbmNlb2YgQ1NTM0RTcHJpdGUgKSB7XG5cblx0XHRcdFx0Ly8gaHR0cDovL3N3aWZ0Y29kZXIud29yZHByZXNzLmNvbS8yMDA4LzExLzI1L2NvbnN0cnVjdGluZy1hLWJpbGxib2FyZC1tYXRyaXgvXG5cblx0XHRcdFx0bWF0cml4LmNvcHkoIGNhbWVyYS5tYXRyaXhXb3JsZEludmVyc2UgKTtcblx0XHRcdFx0bWF0cml4LnRyYW5zcG9zZSgpO1xuXHRcdFx0XHRtYXRyaXguY29weVBvc2l0aW9uKCBvYmplY3QubWF0cml4V29ybGQgKTtcblx0XHRcdFx0bWF0cml4LnNjYWxlKCBvYmplY3Quc2NhbGUgKTtcblxuXHRcdFx0XHRtYXRyaXguZWxlbWVudHNbIDMgXSA9IDA7XG5cdFx0XHRcdG1hdHJpeC5lbGVtZW50c1sgNyBdID0gMDtcblx0XHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxMSBdID0gMDtcblx0XHRcdFx0bWF0cml4LmVsZW1lbnRzWyAxNSBdID0gMTtcblxuXHRcdFx0XHRzdHlsZSA9IGdldE9iamVjdENTU01hdHJpeCggbWF0cml4LCBjYW1lcmFDU1NNYXRyaXggKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRzdHlsZSA9IGdldE9iamVjdENTU01hdHJpeCggb2JqZWN0Lm1hdHJpeFdvcmxkLCBjYW1lcmFDU1NNYXRyaXggKTtcblxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZWxlbWVudCA9IG9iamVjdC5lbGVtZW50O1xuXHRcdFx0dmFyIGNhY2hlZE9iamVjdCA9IGNhY2hlLm9iamVjdHMuZ2V0KCBvYmplY3QgKTtcblxuXHRcdFx0aWYgKCBjYWNoZWRPYmplY3QgPT09IHVuZGVmaW5lZCB8fCBjYWNoZWRPYmplY3Quc3R5bGUgIT09IHN0eWxlICkge1xuXG5cdFx0XHRcdGVsZW1lbnQuc3R5bGUuV2Via2l0VHJhbnNmb3JtID0gc3R5bGU7XG5cdFx0XHRcdGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gc3R5bGU7XG5cblx0XHRcdFx0dmFyIG9iamVjdERhdGEgPSB7IHN0eWxlOiBzdHlsZSB9O1xuXG5cdFx0XHRcdGlmICggaXNJRSApIHtcblxuXHRcdFx0XHRcdG9iamVjdERhdGEuZGlzdGFuY2VUb0NhbWVyYVNxdWFyZWQgPSBnZXREaXN0YW5jZVRvU3F1YXJlZCggY2FtZXJhLCBvYmplY3QgKTtcblxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FjaGUub2JqZWN0cy5zZXQoIG9iamVjdCwgb2JqZWN0RGF0YSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IG9iamVjdC52aXNpYmxlID8gJycgOiAnbm9uZSc7XG5cblx0XHRcdGlmICggZWxlbWVudC5wYXJlbnROb2RlICE9PSBjYW1lcmFFbGVtZW50ICkge1xuXG5cdFx0XHRcdGNhbWVyYUVsZW1lbnQuYXBwZW5kQ2hpbGQoIGVsZW1lbnQgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRvYmplY3Qub25BZnRlclJlbmRlciggX3RoaXMsIHNjZW5lLCBjYW1lcmEgKTtcblxuXHRcdH1cblxuXHRcdGZvciAoIHZhciBpID0gMCwgbCA9IG9iamVjdC5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpICsrICkge1xuXG5cdFx0XHRyZW5kZXJPYmplY3QoIG9iamVjdC5jaGlsZHJlblsgaSBdLCBzY2VuZSwgY2FtZXJhLCBjYW1lcmFDU1NNYXRyaXggKTtcblxuXHRcdH1cblxuXHR9XG5cblx0dmFyIGdldERpc3RhbmNlVG9TcXVhcmVkID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0dmFyIGEgPSBuZXcgVmVjdG9yMygpO1xuXHRcdHZhciBiID0gbmV3IFZlY3RvcjMoKTtcblxuXHRcdHJldHVybiBmdW5jdGlvbiAoIG9iamVjdDEsIG9iamVjdDIgKSB7XG5cblx0XHRcdGEuc2V0RnJvbU1hdHJpeFBvc2l0aW9uKCBvYmplY3QxLm1hdHJpeFdvcmxkICk7XG5cdFx0XHRiLnNldEZyb21NYXRyaXhQb3NpdGlvbiggb2JqZWN0Mi5tYXRyaXhXb3JsZCApO1xuXG5cdFx0XHRyZXR1cm4gYS5kaXN0YW5jZVRvU3F1YXJlZCggYiApO1xuXG5cdFx0fTtcblxuXHR9KCk7XG5cblx0ZnVuY3Rpb24gZmlsdGVyQW5kRmxhdHRlbiggc2NlbmUgKSB7XG5cblx0XHR2YXIgcmVzdWx0ID0gW107XG5cblx0XHRzY2VuZS50cmF2ZXJzZSggZnVuY3Rpb24gKCBvYmplY3QgKSB7XG5cblx0XHRcdGlmICggb2JqZWN0IGluc3RhbmNlb2YgQ1NTM0RPYmplY3QgKSByZXN1bHQucHVzaCggb2JqZWN0ICk7XG5cblx0XHR9ICk7XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXG5cdH1cblxuXHRmdW5jdGlvbiB6T3JkZXIoIHNjZW5lICkge1xuXG5cdFx0dmFyIHNvcnRlZCA9IGZpbHRlckFuZEZsYXR0ZW4oIHNjZW5lICkuc29ydCggZnVuY3Rpb24gKCBhLCBiICkge1xuXG5cdFx0XHR2YXIgZGlzdGFuY2VBID0gY2FjaGUub2JqZWN0cy5nZXQoIGEgKS5kaXN0YW5jZVRvQ2FtZXJhU3F1YXJlZDtcblx0XHRcdHZhciBkaXN0YW5jZUIgPSBjYWNoZS5vYmplY3RzLmdldCggYiApLmRpc3RhbmNlVG9DYW1lcmFTcXVhcmVkO1xuXG5cdFx0XHRyZXR1cm4gZGlzdGFuY2VBIC0gZGlzdGFuY2VCO1xuXG5cdFx0fSApO1xuXG5cdFx0dmFyIHpNYXggPSBzb3J0ZWQubGVuZ3RoO1xuXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBsID0gc29ydGVkLmxlbmd0aDsgaSA8IGw7IGkgKysgKSB7XG5cblx0XHRcdHNvcnRlZFsgaSBdLmVsZW1lbnQuc3R5bGUuekluZGV4ID0gek1heCAtIGk7XG5cblx0XHR9XG5cblx0fVxuXG5cdHRoaXMucmVuZGVyID0gZnVuY3Rpb24gKCBzY2VuZSwgY2FtZXJhICkge1xuXG5cdFx0dmFyIGZvdiA9IGNhbWVyYS5wcm9qZWN0aW9uTWF0cml4LmVsZW1lbnRzWyA1IF0gKiBfaGVpZ2h0SGFsZjtcblxuXHRcdGlmICggY2FjaGUuY2FtZXJhLmZvdiAhPT0gZm92ICkge1xuXG5cdFx0XHRpZiAoIGNhbWVyYS5pc1BlcnNwZWN0aXZlQ2FtZXJhICkge1xuXG5cdFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUuV2Via2l0UGVyc3BlY3RpdmUgPSBmb3YgKyAncHgnO1xuXHRcdFx0XHRkb21FbGVtZW50LnN0eWxlLnBlcnNwZWN0aXZlID0gZm92ICsgJ3B4JztcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRkb21FbGVtZW50LnN0eWxlLldlYmtpdFBlcnNwZWN0aXZlID0gJyc7XG5cdFx0XHRcdGRvbUVsZW1lbnQuc3R5bGUucGVyc3BlY3RpdmUgPSAnJztcblxuXHRcdFx0fVxuXG5cdFx0XHRjYWNoZS5jYW1lcmEuZm92ID0gZm92O1xuXG5cdFx0fVxuXG5cdFx0aWYgKCBzY2VuZS5hdXRvVXBkYXRlID09PSB0cnVlICkgc2NlbmUudXBkYXRlTWF0cml4V29ybGQoKTtcblx0XHRpZiAoIGNhbWVyYS5wYXJlbnQgPT09IG51bGwgKSBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcblxuXHRcdGlmICggY2FtZXJhLmlzT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHR2YXIgdHggPSAtICggY2FtZXJhLnJpZ2h0ICsgY2FtZXJhLmxlZnQgKSAvIDI7XG5cdFx0XHR2YXIgdHkgPSAoIGNhbWVyYS50b3AgKyBjYW1lcmEuYm90dG9tICkgLyAyO1xuXG5cdFx0fVxuXG5cdFx0dmFyIGNhbWVyYUNTU01hdHJpeCA9IGNhbWVyYS5pc09ydGhvZ3JhcGhpY0NhbWVyYSA/XG5cdFx0XHQnc2NhbGUoJyArIGZvdiArICcpJyArICd0cmFuc2xhdGUoJyArIGVwc2lsb24oIHR4ICkgKyAncHgsJyArIGVwc2lsb24oIHR5ICkgKyAncHgpJyArIGdldENhbWVyYUNTU01hdHJpeCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApIDpcblx0XHRcdCd0cmFuc2xhdGVaKCcgKyBmb3YgKyAncHgpJyArIGdldENhbWVyYUNTU01hdHJpeCggY2FtZXJhLm1hdHJpeFdvcmxkSW52ZXJzZSApO1xuXG5cdFx0dmFyIHN0eWxlID0gY2FtZXJhQ1NTTWF0cml4ICtcblx0XHRcdCd0cmFuc2xhdGUoJyArIF93aWR0aEhhbGYgKyAncHgsJyArIF9oZWlnaHRIYWxmICsgJ3B4KSc7XG5cblx0XHRpZiAoIGNhY2hlLmNhbWVyYS5zdHlsZSAhPT0gc3R5bGUgJiYgISBpc0lFICkge1xuXG5cdFx0XHRjYW1lcmFFbGVtZW50LnN0eWxlLldlYmtpdFRyYW5zZm9ybSA9IHN0eWxlO1xuXHRcdFx0Y2FtZXJhRWxlbWVudC5zdHlsZS50cmFuc2Zvcm0gPSBzdHlsZTtcblxuXHRcdFx0Y2FjaGUuY2FtZXJhLnN0eWxlID0gc3R5bGU7XG5cblx0XHR9XG5cblx0XHRyZW5kZXJPYmplY3QoIHNjZW5lLCBzY2VuZSwgY2FtZXJhLCBjYW1lcmFDU1NNYXRyaXggKTtcblxuXHRcdGlmICggaXNJRSApIHtcblxuXHRcdFx0Ly8gSUUxMCBhbmQgMTEgZG9lcyBub3Qgc3VwcG9ydCAncHJlc2VydmUtM2QnLlxuXHRcdFx0Ly8gVGh1cywgei1vcmRlciBpbiAzRCB3aWxsIG5vdCB3b3JrLlxuXHRcdFx0Ly8gV2UgaGF2ZSB0byBjYWxjIHotb3JkZXIgbWFudWFsbHkgYW5kIHNldCBDU1Mgei1pbmRleCBmb3IgSUUuXG5cdFx0XHQvLyBGWUk6IHotaW5kZXggY2FuJ3QgaGFuZGxlIG9iamVjdCBpbnRlcnNlY3Rpb25cblx0XHRcdHpPcmRlciggc2NlbmUgKTtcblxuXHRcdH1cblxuXHR9O1xuXG59O1xuXG5leHBvcnQgeyBDU1MzRE9iamVjdCwgQ1NTM0RTcHJpdGUsIENTUzNEUmVuZGVyZXIgfTsiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBwYXRoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BhdGgnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YXJpYWJsZSA9PSAnZnVuY3Rpb24nID8gdmFyaWFibGUgOiB1bmRlZmluZWQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pXG4gICAgOiBwYXRoW25hbWVzcGFjZV0gJiYgcGF0aFtuYW1lc3BhY2VdW21ldGhvZF0gfHwgZ2xvYmFsW25hbWVzcGFjZV0gJiYgZ2xvYmFsW25hbWVzcGFjZV1bbWV0aG9kXTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWwsIGtleSwgdmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGdsb2JhbFtrZXldID0gdmFsdWU7XG4gIH0gcmV0dXJuIHZhbHVlO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCIvLyBJRTgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gW1xuICAnY29uc3RydWN0b3InLFxuICAnaGFzT3duUHJvcGVydHknLFxuICAnaXNQcm90b3R5cGVPZicsXG4gICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsXG4gICd0b0xvY2FsZVN0cmluZycsXG4gICd0b1N0cmluZycsXG4gICd2YWx1ZU9mJ1xuXTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsIi8qIVxuICAqICRzY3JpcHQuanMgSlMgbG9hZGVyICYgZGVwZW5kZW5jeSBtYW5hZ2VyXG4gICogaHR0cHM6Ly9naXRodWIuY29tL2RlZC9zY3JpcHQuanNcbiAgKiAoYykgRHVzdGluIERpYXogMjAxNCB8IExpY2Vuc2UgTUlUXG4gICovXG5cbihmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikge1xuICBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKClcbiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIGRlZmluZShkZWZpbml0aW9uKVxuICBlbHNlIHRoaXNbbmFtZV0gPSBkZWZpbml0aW9uKClcbn0pKCckc2NyaXB0JywgZnVuY3Rpb24gKCkge1xuICB2YXIgZG9jID0gZG9jdW1lbnRcbiAgICAsIGhlYWQgPSBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXVxuICAgICwgcyA9ICdzdHJpbmcnXG4gICAgLCBmID0gZmFsc2VcbiAgICAsIHB1c2ggPSAncHVzaCdcbiAgICAsIHJlYWR5U3RhdGUgPSAncmVhZHlTdGF0ZSdcbiAgICAsIG9ucmVhZHlzdGF0ZWNoYW5nZSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnXG4gICAgLCBsaXN0ID0ge31cbiAgICAsIGlkcyA9IHt9XG4gICAgLCBkZWxheSA9IHt9XG4gICAgLCBzY3JpcHRzID0ge31cbiAgICAsIHNjcmlwdHBhdGhcbiAgICAsIHVybEFyZ3NcblxuICBmdW5jdGlvbiBldmVyeShhciwgZm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFyLmxlbmd0aDsgaSA8IGo7ICsraSkgaWYgKCFmbihhcltpXSkpIHJldHVybiBmXG4gICAgcmV0dXJuIDFcbiAgfVxuICBmdW5jdGlvbiBlYWNoKGFyLCBmbikge1xuICAgIGV2ZXJ5KGFyLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgIGZuKGVsKVxuICAgICAgcmV0dXJuIDFcbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gJHNjcmlwdChwYXRocywgaWRPckRvbmUsIG9wdERvbmUpIHtcbiAgICBwYXRocyA9IHBhdGhzW3B1c2hdID8gcGF0aHMgOiBbcGF0aHNdXG4gICAgdmFyIGlkT3JEb25lSXNEb25lID0gaWRPckRvbmUgJiYgaWRPckRvbmUuY2FsbFxuICAgICAgLCBkb25lID0gaWRPckRvbmVJc0RvbmUgPyBpZE9yRG9uZSA6IG9wdERvbmVcbiAgICAgICwgaWQgPSBpZE9yRG9uZUlzRG9uZSA/IHBhdGhzLmpvaW4oJycpIDogaWRPckRvbmVcbiAgICAgICwgcXVldWUgPSBwYXRocy5sZW5ndGhcbiAgICBmdW5jdGlvbiBsb29wRm4oaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uY2FsbCA/IGl0ZW0oKSA6IGxpc3RbaXRlbV1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICBpZiAoIS0tcXVldWUpIHtcbiAgICAgICAgbGlzdFtpZF0gPSAxXG4gICAgICAgIGRvbmUgJiYgZG9uZSgpXG4gICAgICAgIGZvciAodmFyIGRzZXQgaW4gZGVsYXkpIHtcbiAgICAgICAgICBldmVyeShkc2V0LnNwbGl0KCd8JyksIGxvb3BGbikgJiYgIWVhY2goZGVsYXlbZHNldF0sIGxvb3BGbikgJiYgKGRlbGF5W2RzZXRdID0gW10pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBlYWNoKHBhdGhzLCBmdW5jdGlvbiBsb2FkaW5nKHBhdGgsIGZvcmNlKSB7XG4gICAgICAgIGlmIChwYXRoID09PSBudWxsKSByZXR1cm4gY2FsbGJhY2soKVxuICAgICAgICBcbiAgICAgICAgaWYgKCFmb3JjZSAmJiAhL15odHRwcz86XFwvXFwvLy50ZXN0KHBhdGgpICYmIHNjcmlwdHBhdGgpIHtcbiAgICAgICAgICBwYXRoID0gKHBhdGguaW5kZXhPZignLmpzJykgPT09IC0xKSA/IHNjcmlwdHBhdGggKyBwYXRoICsgJy5qcycgOiBzY3JpcHRwYXRoICsgcGF0aDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHNjcmlwdHNbcGF0aF0pIHtcbiAgICAgICAgICBpZiAoaWQpIGlkc1tpZF0gPSAxXG4gICAgICAgICAgcmV0dXJuIChzY3JpcHRzW3BhdGhdID09IDIpID8gY2FsbGJhY2soKSA6IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBsb2FkaW5nKHBhdGgsIHRydWUpIH0sIDApXG4gICAgICAgIH1cblxuICAgICAgICBzY3JpcHRzW3BhdGhdID0gMVxuICAgICAgICBpZiAoaWQpIGlkc1tpZF0gPSAxXG4gICAgICAgIGNyZWF0ZShwYXRoLCBjYWxsYmFjaylcbiAgICAgIH0pXG4gICAgfSwgMClcbiAgICByZXR1cm4gJHNjcmlwdFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlKHBhdGgsIGZuKSB7XG4gICAgdmFyIGVsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpLCBsb2FkZWRcbiAgICBlbC5vbmxvYWQgPSBlbC5vbmVycm9yID0gZWxbb25yZWFkeXN0YXRlY2hhbmdlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgoZWxbcmVhZHlTdGF0ZV0gJiYgISgvXmN8bG9hZGUvLnRlc3QoZWxbcmVhZHlTdGF0ZV0pKSkgfHwgbG9hZGVkKSByZXR1cm47XG4gICAgICBlbC5vbmxvYWQgPSBlbFtvbnJlYWR5c3RhdGVjaGFuZ2VdID0gbnVsbFxuICAgICAgbG9hZGVkID0gMVxuICAgICAgc2NyaXB0c1twYXRoXSA9IDJcbiAgICAgIGZuKClcbiAgICB9XG4gICAgZWwuYXN5bmMgPSAxXG4gICAgZWwuc3JjID0gdXJsQXJncyA/IHBhdGggKyAocGF0aC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHVybEFyZ3MgOiBwYXRoO1xuICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGVsLCBoZWFkLmxhc3RDaGlsZClcbiAgfVxuXG4gICRzY3JpcHQuZ2V0ID0gY3JlYXRlXG5cbiAgJHNjcmlwdC5vcmRlciA9IGZ1bmN0aW9uIChzY3JpcHRzLCBpZCwgZG9uZSkge1xuICAgIChmdW5jdGlvbiBjYWxsYmFjayhzKSB7XG4gICAgICBzID0gc2NyaXB0cy5zaGlmdCgpXG4gICAgICAhc2NyaXB0cy5sZW5ndGggPyAkc2NyaXB0KHMsIGlkLCBkb25lKSA6ICRzY3JpcHQocywgY2FsbGJhY2spXG4gICAgfSgpKVxuICB9XG5cbiAgJHNjcmlwdC5wYXRoID0gZnVuY3Rpb24gKHApIHtcbiAgICBzY3JpcHRwYXRoID0gcFxuICB9XG4gICRzY3JpcHQudXJsQXJncyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB1cmxBcmdzID0gc3RyO1xuICB9XG4gICRzY3JpcHQucmVhZHkgPSBmdW5jdGlvbiAoZGVwcywgcmVhZHksIHJlcSkge1xuICAgIGRlcHMgPSBkZXBzW3B1c2hdID8gZGVwcyA6IFtkZXBzXVxuICAgIHZhciBtaXNzaW5nID0gW107XG4gICAgIWVhY2goZGVwcywgZnVuY3Rpb24gKGRlcCkge1xuICAgICAgbGlzdFtkZXBdIHx8IG1pc3NpbmdbcHVzaF0oZGVwKTtcbiAgICB9KSAmJiBldmVyeShkZXBzLCBmdW5jdGlvbiAoZGVwKSB7cmV0dXJuIGxpc3RbZGVwXX0pID9cbiAgICAgIHJlYWR5KCkgOiAhZnVuY3Rpb24gKGtleSkge1xuICAgICAgZGVsYXlba2V5XSA9IGRlbGF5W2tleV0gfHwgW11cbiAgICAgIGRlbGF5W2tleV1bcHVzaF0ocmVhZHkpXG4gICAgICByZXEgJiYgcmVxKG1pc3NpbmcpXG4gICAgfShkZXBzLmpvaW4oJ3wnKSlcbiAgICByZXR1cm4gJHNjcmlwdFxuICB9XG5cbiAgJHNjcmlwdC5kb25lID0gZnVuY3Rpb24gKGlkT3JEb25lKSB7XG4gICAgJHNjcmlwdChbbnVsbF0sIGlkT3JEb25lKVxuICB9XG5cbiAgcmV0dXJuICRzY3JpcHRcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xufSkoJ3ZlcnNpb25zJywgW10pLnB1c2goe1xuICB2ZXJzaW9uOiAnMy42LjUnLFxuICBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMjAgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxuLy8gYFRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0LCBQUkVGRVJSRURfU1RSSU5HKSB7XG4gIGlmICghaXNPYmplY3QoaW5wdXQpKSByZXR1cm4gaW5wdXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgKi9cbiAgICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IGFjdGl2ZVhEb2N1bWVudCA/IE51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgoYWN0aXZlWERvY3VtZW50KSA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpO1xuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpO1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkZWZpbmVQcm9wZXJ0aWVzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxuLy8gYCVJdGVyYXRvclByb3RvdHlwZSVgIG9iamVjdFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbmlmIChJdGVyYXRvclByb3RvdHlwZSA9PSB1bmRlZmluZWQpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoIUlTX1BVUkUgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7XG4gIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxudmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8vIGBPYmplY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKFxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmXG4gICAgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiZcbiAgICAhZ2xvYmFsLmltcG9ydFNjcmlwdHMgJiZcbiAgICAhZmFpbHMocG9zdCkgJiZcbiAgICBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6J1xuICApIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKGlwaG9uZXxpcG9kfGlwYWQpLiphcHBsZXdlYmtpdC9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIi8qKlxyXG4gKiBBIGNvbGxlY3Rpb24gb2Ygc2hpbXMgdGhhdCBwcm92aWRlIG1pbmltYWwgZnVuY3Rpb25hbGl0eSBvZiB0aGUgRVM2IGNvbGxlY3Rpb25zLlxyXG4gKlxyXG4gKiBUaGVzZSBpbXBsZW1lbnRhdGlvbnMgYXJlIG5vdCBtZWFudCB0byBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIFJlc2l6ZU9ic2VydmVyXHJcbiAqIG1vZHVsZXMgYXMgdGhleSBjb3ZlciBvbmx5IGEgbGltaXRlZCByYW5nZSBvZiB1c2UgY2FzZXMuXHJcbiAqL1xyXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWpzZG9jLCB2YWxpZC1qc2RvYyAqL1xyXG52YXIgTWFwU2hpbSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIE1hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gTWFwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGluZGV4IGluIHByb3ZpZGVkIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGUgc3BlY2lmaWVkIGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5PEFycmF5Pn0gYXJyXHJcbiAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICogQHJldHVybnMge251bWJlcn1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0SW5kZXgoYXJyLCBrZXkpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gLTE7XHJcbiAgICAgICAgYXJyLnNvbWUoZnVuY3Rpb24gKGVudHJ5LCBpbmRleCkge1xyXG4gICAgICAgICAgICBpZiAoZW50cnlbMF0gPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gaW5kZXg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIHJldHVybiAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gY2xhc3NfMSgpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xhc3NfMS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19lbnRyaWVzX18ubGVuZ3RoO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgodGhpcy5fX2VudHJpZXNfXywga2V5KTtcclxuICAgICAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy5fX2VudHJpZXNfX1tpbmRleF07XHJcbiAgICAgICAgICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeVsxXTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0ga2V5XHJcbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX19lbnRyaWVzX19baW5kZXhdWzFdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fZW50cmllc19fLnB1c2goW2tleSwgdmFsdWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHBhcmFtIHsqfSBrZXlcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyaWVzID0gdGhpcy5fX2VudHJpZXNfXztcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXgoZW50cmllcywga2V5KTtcclxuICAgICAgICAgICAgaWYgKH5pbmRleCkge1xyXG4gICAgICAgICAgICAgICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0geyp9IGtleVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhfmdldEluZGV4KHRoaXMuX19lbnRyaWVzX18sIGtleSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjbGFzc18xLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2VudHJpZXNfXy5zcGxpY2UoMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW2N0eD1udWxsXVxyXG4gICAgICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNsYXNzXzEucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGN0eCkge1xyXG4gICAgICAgICAgICBpZiAoY3R4ID09PSB2b2lkIDApIHsgY3R4ID0gbnVsbDsgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5fX2VudHJpZXNfXzsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoY3R4LCBlbnRyeVsxXSwgZW50cnlbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gY2xhc3NfMTtcclxuICAgIH0oKSk7XHJcbn0pKCk7XG5cbi8qKlxyXG4gKiBEZXRlY3RzIHdoZXRoZXIgd2luZG93IGFuZCBkb2N1bWVudCBvYmplY3RzIGFyZSBhdmFpbGFibGUgaW4gY3VycmVudCBlbnZpcm9ubWVudC5cclxuICovXHJcbnZhciBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCA9PT0gZG9jdW1lbnQ7XG5cbi8vIFJldHVybnMgZ2xvYmFsIG9iamVjdCBvZiBhIGN1cnJlbnQgZW52aXJvbm1lbnQuXHJcbnZhciBnbG9iYWwkMSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsLk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT09IE1hdGgpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCkge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcclxuICAgIHJldHVybiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xyXG59KSgpO1xuXG4vKipcclxuICogQSBzaGltIGZvciB0aGUgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdoaWNoIGZhbGxzIGJhY2sgdG8gdGhlIHNldFRpbWVvdXQgaWZcclxuICogZmlyc3Qgb25lIGlzIG5vdCBzdXBwb3J0ZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJlcXVlc3RzJyBpZGVudGlmaWVyLlxyXG4gKi9cclxudmFyIHJlcXVlc3RBbmltYXRpb25GcmFtZSQxID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gSXQncyByZXF1aXJlZCB0byB1c2UgYSBib3VuZGVkIGZ1bmN0aW9uIGJlY2F1c2UgSUUgc29tZXRpbWVzIHRocm93c1xyXG4gICAgICAgIC8vIGFuIFwiSW52YWxpZCBjYWxsaW5nIG9iamVjdFwiIGVycm9yIGlmIHJBRiBpcyBpbnZva2VkIHdpdGhvdXQgdGhlIGdsb2JhbFxyXG4gICAgICAgIC8vIG9iamVjdCBvbiB0aGUgbGVmdCBoYW5kIHNpZGUuXHJcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKGdsb2JhbCQxKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2spIHsgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsbGJhY2soRGF0ZS5ub3coKSk7IH0sIDEwMDAgLyA2MCk7IH07XHJcbn0pKCk7XG5cbi8vIERlZmluZXMgbWluaW11bSB0aW1lb3V0IGJlZm9yZSBhZGRpbmcgYSB0cmFpbGluZyBjYWxsLlxyXG52YXIgdHJhaWxpbmdUaW1lb3V0ID0gMjtcclxuLyoqXHJcbiAqIENyZWF0ZXMgYSB3cmFwcGVyIGZ1bmN0aW9uIHdoaWNoIGVuc3VyZXMgdGhhdCBwcm92aWRlZCBjYWxsYmFjayB3aWxsIGJlXHJcbiAqIGludm9rZWQgb25seSBvbmNlIGR1cmluZyB0aGUgc3BlY2lmaWVkIGRlbGF5IHBlcmlvZC5cclxuICpcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBiZSBpbnZva2VkIGFmdGVyIHRoZSBkZWxheSBwZXJpb2QuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSAtIERlbGF5IGFmdGVyIHdoaWNoIHRvIGludm9rZSBjYWxsYmFjay5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufVxyXG4gKi9cclxuZnVuY3Rpb24gdGhyb3R0bGUgKGNhbGxiYWNrLCBkZWxheSkge1xyXG4gICAgdmFyIGxlYWRpbmdDYWxsID0gZmFsc2UsIHRyYWlsaW5nQ2FsbCA9IGZhbHNlLCBsYXN0Q2FsbFRpbWUgPSAwO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSBvcmlnaW5hbCBjYWxsYmFjayBmdW5jdGlvbiBhbmQgc2NoZWR1bGVzIG5ldyBpbnZvY2F0aW9uIGlmXHJcbiAgICAgKiB0aGUgXCJwcm94eVwiIHdhcyBjYWxsZWQgZHVyaW5nIGN1cnJlbnQgcmVxdWVzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVBlbmRpbmcoKSB7XHJcbiAgICAgICAgaWYgKGxlYWRpbmdDYWxsKSB7XHJcbiAgICAgICAgICAgIGxlYWRpbmdDYWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0cmFpbGluZ0NhbGwpIHtcclxuICAgICAgICAgICAgcHJveHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIGludm9rZWQgYWZ0ZXIgdGhlIHNwZWNpZmllZCBkZWxheS4gSXQgd2lsbCBmdXJ0aGVyIHBvc3Rwb25lXHJcbiAgICAgKiBpbnZvY2F0aW9uIG9mIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBkZWxlZ2F0aW5nIGl0IHRvIHRoZVxyXG4gICAgICogcmVxdWVzdEFuaW1hdGlvbkZyYW1lLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiB0aW1lb3V0Q2FsbGJhY2soKSB7XHJcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lJDEocmVzb2x2ZVBlbmRpbmcpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTY2hlZHVsZXMgaW52b2NhdGlvbiBvZiB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHByb3h5KCkge1xyXG4gICAgICAgIHZhciB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGlmIChsZWFkaW5nQ2FsbCkge1xyXG4gICAgICAgICAgICAvLyBSZWplY3QgaW1tZWRpYXRlbHkgZm9sbG93aW5nIGNhbGxzLlxyXG4gICAgICAgICAgICBpZiAodGltZVN0YW1wIC0gbGFzdENhbGxUaW1lIDwgdHJhaWxpbmdUaW1lb3V0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gU2NoZWR1bGUgbmV3IGNhbGwgdG8gYmUgaW4gaW52b2tlZCB3aGVuIHRoZSBwZW5kaW5nIG9uZSBpcyByZXNvbHZlZC5cclxuICAgICAgICAgICAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgZm9yIFwidHJhbnNpdGlvbnNcIiB3aGljaCBuZXZlciBhY3R1YWxseSBzdGFydFxyXG4gICAgICAgICAgICAvLyBpbW1lZGlhdGVseSBzbyB0aGVyZSBpcyBhIGNoYW5jZSB0aGF0IHdlIG1pZ2h0IG1pc3Mgb25lIGlmIGNoYW5nZVxyXG4gICAgICAgICAgICAvLyBoYXBwZW5zIGFtaWRzIHRoZSBwZW5kaW5nIGludm9jYXRpb24uXHJcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBsZWFkaW5nQ2FsbCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRyYWlsaW5nQ2FsbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRpbWVvdXRDYWxsYmFjaywgZGVsYXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0Q2FsbFRpbWUgPSB0aW1lU3RhbXA7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJveHk7XHJcbn1cblxuLy8gTWluaW11bSBkZWxheSBiZWZvcmUgaW52b2tpbmcgdGhlIHVwZGF0ZSBvZiBvYnNlcnZlcnMuXHJcbnZhciBSRUZSRVNIX0RFTEFZID0gMjA7XHJcbi8vIEEgbGlzdCBvZiBzdWJzdHJpbmdzIG9mIENTUyBwcm9wZXJ0aWVzIHVzZWQgdG8gZmluZCB0cmFuc2l0aW9uIGV2ZW50cyB0aGF0XHJcbi8vIG1pZ2h0IGFmZmVjdCBkaW1lbnNpb25zIG9mIG9ic2VydmVkIGVsZW1lbnRzLlxyXG52YXIgdHJhbnNpdGlvbktleXMgPSBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCcsICd3aWR0aCcsICdoZWlnaHQnLCAnc2l6ZScsICd3ZWlnaHQnXTtcclxuLy8gQ2hlY2sgaWYgTXV0YXRpb25PYnNlcnZlciBpcyBhdmFpbGFibGUuXHJcbnZhciBtdXRhdGlvbk9ic2VydmVyU3VwcG9ydGVkID0gdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnO1xyXG4vKipcclxuICogU2luZ2xldG9uIGNvbnRyb2xsZXIgY2xhc3Mgd2hpY2ggaGFuZGxlcyB1cGRhdGVzIG9mIFJlc2l6ZU9ic2VydmVyIGluc3RhbmNlcy5cclxuICovXHJcbnZhciBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciBET00gbGlzdGVuZXJzIGhhdmUgYmVlbiBhZGRlZC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtib29sZWFufVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRlbGxzIHRoYXQgY29udHJvbGxlciBoYXMgc3Vic2NyaWJlZCBmb3IgTXV0YXRpb24gRXZlbnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge2Jvb2xlYW59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IGZhbHNlO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEtlZXBzIHJlZmVyZW5jZSB0byB0aGUgaW5zdGFuY2Ugb2YgTXV0YXRpb25PYnNlcnZlci5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtNdXRhdGlvbk9ic2VydmVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGxpc3Qgb2YgY29ubmVjdGVkIG9ic2VydmVycy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtBcnJheTxSZXNpemVPYnNlcnZlclNQST59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnNfID0gW107XHJcbiAgICAgICAgdGhpcy5vblRyYW5zaXRpb25FbmRfID0gdGhpcy5vblRyYW5zaXRpb25FbmRfLmJpbmQodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoID0gdGhyb3R0bGUodGhpcy5yZWZyZXNoLmJpbmQodGhpcyksIFJFRlJFU0hfREVMQVkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIG9ic2VydmVyIHRvIG9ic2VydmVycyBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJTUEl9IG9ic2VydmVyIC0gT2JzZXJ2ZXIgdG8gYmUgYWRkZWQuXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5hZGRPYnNlcnZlciA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIGlmICghfnRoaXMub2JzZXJ2ZXJzXy5pbmRleE9mKG9ic2VydmVyKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVyc18ucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIEFkZCBsaXN0ZW5lcnMgaWYgdGhleSBoYXZlbid0IGJlZW4gYWRkZWQgeWV0LlxyXG4gICAgICAgIGlmICghdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdF8oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIG9ic2VydmVyIGZyb20gb2JzZXJ2ZXJzIGxpc3QuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlclNQSX0gb2JzZXJ2ZXIgLSBPYnNlcnZlciB0byBiZSByZW1vdmVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlT2JzZXJ2ZXIgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnNfO1xyXG4gICAgICAgIHZhciBpbmRleCA9IG9ic2VydmVycy5pbmRleE9mKG9ic2VydmVyKTtcclxuICAgICAgICAvLyBSZW1vdmUgb2JzZXJ2ZXIgaWYgaXQncyBwcmVzZW50IGluIHJlZ2lzdHJ5LlxyXG4gICAgICAgIGlmICh+aW5kZXgpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXJzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFJlbW92ZSBsaXN0ZW5lcnMgaWYgY29udHJvbGxlciBoYXMgbm8gY29ubmVjdGVkIG9ic2VydmVycy5cclxuICAgICAgICBpZiAoIW9ic2VydmVycy5sZW5ndGggJiYgdGhpcy5jb25uZWN0ZWRfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdF8oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2VzIHRoZSB1cGRhdGUgb2Ygb2JzZXJ2ZXJzLiBJdCB3aWxsIGNvbnRpbnVlIHJ1bm5pbmcgdXBkYXRlcyBpbnNvZmFyXHJcbiAgICAgKiBpdCBkZXRlY3RzIGNoYW5nZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hhbmdlc0RldGVjdGVkID0gdGhpcy51cGRhdGVPYnNlcnZlcnNfKCk7XHJcbiAgICAgICAgLy8gQ29udGludWUgcnVubmluZyB1cGRhdGVzIGlmIGNoYW5nZXMgaGF2ZSBiZWVuIGRldGVjdGVkIGFzIHRoZXJlIG1pZ2h0XHJcbiAgICAgICAgLy8gYmUgZnV0dXJlIG9uZXMgY2F1c2VkIGJ5IENTUyB0cmFuc2l0aW9ucy5cclxuICAgICAgICBpZiAoY2hhbmdlc0RldGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgZXZlcnkgb2JzZXJ2ZXIgZnJvbSBvYnNlcnZlcnMgbGlzdCBhbmQgbm90aWZpZXMgdGhlbSBvZiBxdWV1ZWRcclxuICAgICAqIGVudHJpZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIFwidHJ1ZVwiIGlmIGFueSBvYnNlcnZlciBoYXMgZGV0ZWN0ZWQgY2hhbmdlcyBpblxyXG4gICAgICogICAgICBkaW1lbnNpb25zIG9mIGl0J3MgZWxlbWVudHMuXHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlT2JzZXJ2ZXJzXyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBDb2xsZWN0IG9ic2VydmVycyB0aGF0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cclxuICAgICAgICB2YXIgYWN0aXZlT2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnNfLmZpbHRlcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmdhdGhlckFjdGl2ZSgpLCBvYnNlcnZlci5oYXNBY3RpdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBEZWxpdmVyIG5vdGlmaWNhdGlvbnMgaW4gYSBzZXBhcmF0ZSBjeWNsZSBpbiBvcmRlciB0byBhdm9pZCBhbnlcclxuICAgICAgICAvLyBjb2xsaXNpb25zIGJldHdlZW4gb2JzZXJ2ZXJzLCBlLmcuIHdoZW4gbXVsdGlwbGUgaW5zdGFuY2VzIG9mXHJcbiAgICAgICAgLy8gUmVzaXplT2JzZXJ2ZXIgYXJlIHRyYWNraW5nIHRoZSBzYW1lIGVsZW1lbnQgYW5kIHRoZSBjYWxsYmFjayBvZiBvbmVcclxuICAgICAgICAvLyBvZiB0aGVtIGNoYW5nZXMgY29udGVudCBkaW1lbnNpb25zIG9mIHRoZSBvYnNlcnZlZCB0YXJnZXQuIFNvbWV0aW1lc1xyXG4gICAgICAgIC8vIHRoaXMgbWF5IHJlc3VsdCBpbiBub3RpZmljYXRpb25zIGJlaW5nIGJsb2NrZWQgZm9yIHRoZSByZXN0IG9mIG9ic2VydmVycy5cclxuICAgICAgICBhY3RpdmVPYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIG9ic2VydmVyLmJyb2FkY2FzdEFjdGl2ZSgpOyB9KTtcclxuICAgICAgICByZXR1cm4gYWN0aXZlT2JzZXJ2ZXJzLmxlbmd0aCA+IDA7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplcyBET00gbGlzdGVuZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLnByb3RvdHlwZS5jb25uZWN0XyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBEbyBub3RoaW5nIGlmIHJ1bm5pbmcgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCBvciBpZiBsaXN0ZW5lcnNcclxuICAgICAgICAvLyBoYXZlIGJlZW4gYWxyZWFkeSBhZGRlZC5cclxuICAgICAgICBpZiAoIWlzQnJvd3NlciB8fCB0aGlzLmNvbm5lY3RlZF8pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTdWJzY3JpcHRpb24gdG8gdGhlIFwiVHJhbnNpdGlvbmVuZFwiIGV2ZW50IGlzIHVzZWQgYXMgYSB3b3JrYXJvdW5kIGZvclxyXG4gICAgICAgIC8vIGRlbGF5ZWQgdHJhbnNpdGlvbnMuIFRoaXMgd2F5IGl0J3MgcG9zc2libGUgdG8gY2FwdHVyZSBhdCBsZWFzdCB0aGVcclxuICAgICAgICAvLyBmaW5hbCBzdGF0ZSBvZiBhbiBlbGVtZW50LlxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uVHJhbnNpdGlvbkVuZF8pO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIGlmIChtdXRhdGlvbk9ic2VydmVyU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5yZWZyZXNoKTtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbnNPYnNlcnZlcl8ub2JzZXJ2ZShkb2N1bWVudCwge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNoYXJhY3RlckRhdGE6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NU3VidHJlZU1vZGlmaWVkJywgdGhpcy5yZWZyZXNoKTtcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvbkV2ZW50c0FkZGVkXyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29ubmVjdGVkXyA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmVzIERPTSBsaXN0ZW5lcnMuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLmRpc2Nvbm5lY3RfID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgcnVubmluZyBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50IG9yIGlmIGxpc3RlbmVyc1xyXG4gICAgICAgIC8vIGhhdmUgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXHJcbiAgICAgICAgaWYgKCFpc0Jyb3dzZXIgfHwgIXRoaXMuY29ubmVjdGVkXykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCB0aGlzLm9uVHJhbnNpdGlvbkVuZF8pO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlZnJlc2gpO1xyXG4gICAgICAgIGlmICh0aGlzLm11dGF0aW9uc09ic2VydmVyXykge1xyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uc09ic2VydmVyXy5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTVN1YnRyZWVNb2RpZmllZCcsIHRoaXMucmVmcmVzaCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubXV0YXRpb25zT2JzZXJ2ZXJfID0gbnVsbDtcclxuICAgICAgICB0aGlzLm11dGF0aW9uRXZlbnRzQWRkZWRfID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0ZWRfID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBcIlRyYW5zaXRpb25lbmRcIiBldmVudCBoYW5kbGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKiBAcGFyYW0ge1RyYW5zaXRpb25FdmVudH0gZXZlbnRcclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZF8gPSBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICB2YXIgX2IgPSBfYS5wcm9wZXJ0eU5hbWUsIHByb3BlcnR5TmFtZSA9IF9iID09PSB2b2lkIDAgPyAnJyA6IF9iO1xyXG4gICAgICAgIC8vIERldGVjdCB3aGV0aGVyIHRyYW5zaXRpb24gbWF5IGFmZmVjdCBkaW1lbnNpb25zIG9mIGFuIGVsZW1lbnQuXHJcbiAgICAgICAgdmFyIGlzUmVmbG93UHJvcGVydHkgPSB0cmFuc2l0aW9uS2V5cy5zb21lKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhfnByb3BlcnR5TmFtZS5pbmRleE9mKGtleSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGlzUmVmbG93UHJvcGVydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBpbnN0YW5jZSBvZiB0aGUgUmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtSZXNpemVPYnNlcnZlckNvbnRyb2xsZXJ9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlci5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VfKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VfID0gbmV3IFJlc2l6ZU9ic2VydmVyQ29udHJvbGxlcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZV87XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBIb2xkcyByZWZlcmVuY2UgdG8gdGhlIGNvbnRyb2xsZXIncyBpbnN0YW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZSB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuaW5zdGFuY2VfID0gbnVsbDtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXI7XHJcbn0oKSk7XG5cbi8qKlxyXG4gKiBEZWZpbmVzIG5vbi13cml0YWJsZS9lbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgdGhlIHByb3ZpZGVkIHRhcmdldCBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBPYmplY3QgZm9yIHdoaWNoIHRvIGRlZmluZSBwcm9wZXJ0aWVzLlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHMgLSBQcm9wZXJ0aWVzIHRvIGJlIGRlZmluZWQuXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRhcmdldCBvYmplY3QuXHJcbiAqL1xyXG52YXIgZGVmaW5lQ29uZmlndXJhYmxlID0gKGZ1bmN0aW9uICh0YXJnZXQsIHByb3BzKSB7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMocHJvcHMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBfYVtfaV07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBwcm9wc1trZXldLFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn0pO1xuXG4vKipcclxuICogUmV0dXJucyB0aGUgZ2xvYmFsIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggcHJvdmlkZWQgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cclxudmFyIGdldFdpbmRvd09mID0gKGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgIC8vIEFzc3VtZSB0aGF0IHRoZSBlbGVtZW50IGlzIGFuIGluc3RhbmNlIG9mIE5vZGUsIHdoaWNoIG1lYW5zIHRoYXQgaXRcclxuICAgIC8vIGhhcyB0aGUgXCJvd25lckRvY3VtZW50XCIgcHJvcGVydHkgZnJvbSB3aGljaCB3ZSBjYW4gcmV0cmlldmUgYVxyXG4gICAgLy8gY29ycmVzcG9uZGluZyBnbG9iYWwgb2JqZWN0LlxyXG4gICAgdmFyIG93bmVyR2xvYmFsID0gdGFyZ2V0ICYmIHRhcmdldC5vd25lckRvY3VtZW50ICYmIHRhcmdldC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xyXG4gICAgLy8gUmV0dXJuIHRoZSBsb2NhbCBnbG9iYWwgb2JqZWN0IGlmIGl0J3Mgbm90IHBvc3NpYmxlIGV4dHJhY3Qgb25lIGZyb21cclxuICAgIC8vIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAgICByZXR1cm4gb3duZXJHbG9iYWwgfHwgZ2xvYmFsJDE7XHJcbn0pO1xuXG4vLyBQbGFjZWhvbGRlciBvZiBhbiBlbXB0eSBjb250ZW50IHJlY3RhbmdsZS5cclxudmFyIGVtcHR5UmVjdCA9IGNyZWF0ZVJlY3RJbml0KDAsIDAsIDAsIDApO1xyXG4vKipcclxuICogQ29udmVydHMgcHJvdmlkZWQgc3RyaW5nIHRvIGEgbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IHZhbHVlXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5mdW5jdGlvbiB0b0Zsb2F0KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcclxufVxyXG4vKipcclxuICogRXh0cmFjdHMgYm9yZGVycyBzaXplIGZyb20gcHJvdmlkZWQgc3R5bGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlc1xyXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gcG9zaXRpb25zIC0gQm9yZGVycyBwb3NpdGlvbnMgKHRvcCwgcmlnaHQsIC4uLilcclxuICogQHJldHVybnMge251bWJlcn1cclxuICovXHJcbmZ1bmN0aW9uIGdldEJvcmRlcnNTaXplKHN0eWxlcykge1xyXG4gICAgdmFyIHBvc2l0aW9ucyA9IFtdO1xyXG4gICAgZm9yICh2YXIgX2kgPSAxOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICBwb3NpdGlvbnNbX2kgLSAxXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcG9zaXRpb25zLnJlZHVjZShmdW5jdGlvbiAoc2l6ZSwgcG9zaXRpb24pIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBzdHlsZXNbJ2JvcmRlci0nICsgcG9zaXRpb24gKyAnLXdpZHRoJ107XHJcbiAgICAgICAgcmV0dXJuIHNpemUgKyB0b0Zsb2F0KHZhbHVlKTtcclxuICAgIH0sIDApO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0cyBwYWRkaW5ncyBzaXplcyBmcm9tIHByb3ZpZGVkIHN0eWxlcy5cclxuICpcclxuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcclxuICogQHJldHVybnMge09iamVjdH0gUGFkZGluZ3MgYm94LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UGFkZGluZ3Moc3R5bGVzKSB7XHJcbiAgICB2YXIgcG9zaXRpb25zID0gWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXTtcclxuICAgIHZhciBwYWRkaW5ncyA9IHt9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBwb3NpdGlvbnNfMSA9IHBvc2l0aW9uczsgX2kgPCBwb3NpdGlvbnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3NpdGlvbnNfMVtfaV07XHJcbiAgICAgICAgdmFyIHZhbHVlID0gc3R5bGVzWydwYWRkaW5nLScgKyBwb3NpdGlvbl07XHJcbiAgICAgICAgcGFkZGluZ3NbcG9zaXRpb25dID0gdG9GbG9hdCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFkZGluZ3M7XHJcbn1cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgY29udGVudCByZWN0YW5nbGUgb2YgcHJvdmlkZWQgU1ZHIGVsZW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U1ZHR3JhcGhpY3NFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHdoaWNoIG5lZWRzXHJcbiAqICAgICAgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0U1ZHQ29udGVudFJlY3QodGFyZ2V0KSB7XHJcbiAgICB2YXIgYmJveCA9IHRhcmdldC5nZXRCQm94KCk7XHJcbiAgICByZXR1cm4gY3JlYXRlUmVjdEluaXQoMCwgMCwgYmJveC53aWR0aCwgYmJveC5oZWlnaHQpO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGNvbnRlbnQgcmVjdGFuZ2xlIG9mIHByb3ZpZGVkIEhUTUxFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IGZvciB3aGljaCB0byBjYWxjdWxhdGUgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gKiBAcmV0dXJucyB7RE9NUmVjdEluaXR9XHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRIVE1MRWxlbWVudENvbnRlbnRSZWN0KHRhcmdldCkge1xyXG4gICAgLy8gQ2xpZW50IHdpZHRoICYgaGVpZ2h0IHByb3BlcnRpZXMgY2FuJ3QgYmVcclxuICAgIC8vIHVzZWQgZXhjbHVzaXZlbHkgYXMgdGhleSBwcm92aWRlIHJvdW5kZWQgdmFsdWVzLlxyXG4gICAgdmFyIGNsaWVudFdpZHRoID0gdGFyZ2V0LmNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQgPSB0YXJnZXQuY2xpZW50SGVpZ2h0O1xyXG4gICAgLy8gQnkgdGhpcyBjb25kaXRpb24gd2UgY2FuIGNhdGNoIGFsbCBub24tcmVwbGFjZWQgaW5saW5lLCBoaWRkZW4gYW5kXHJcbiAgICAvLyBkZXRhY2hlZCBlbGVtZW50cy4gVGhvdWdoIGVsZW1lbnRzIHdpdGggd2lkdGggJiBoZWlnaHQgcHJvcGVydGllcyBsZXNzXHJcbiAgICAvLyB0aGFuIDAuNSB3aWxsIGJlIGRpc2NhcmRlZCBhcyB3ZWxsLlxyXG4gICAgLy9cclxuICAgIC8vIFdpdGhvdXQgaXQgd2Ugd291bGQgbmVlZCB0byBpbXBsZW1lbnQgc2VwYXJhdGUgbWV0aG9kcyBmb3IgZWFjaCBvZlxyXG4gICAgLy8gdGhvc2UgY2FzZXMgYW5kIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHBlcmZvcm0gYSBwcmVjaXNlIGFuZCBwZXJmb3JtYW5jZVxyXG4gICAgLy8gZWZmZWN0aXZlIHRlc3QgZm9yIGhpZGRlbiBlbGVtZW50cy4gRS5nLiBldmVuIGpRdWVyeSdzICc6dmlzaWJsZScgZmlsdGVyXHJcbiAgICAvLyBnaXZlcyB3cm9uZyByZXN1bHRzIGZvciBlbGVtZW50cyB3aXRoIHdpZHRoICYgaGVpZ2h0IGxlc3MgdGhhbiAwLjUuXHJcbiAgICBpZiAoIWNsaWVudFdpZHRoICYmICFjbGllbnRIZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gZW1wdHlSZWN0O1xyXG4gICAgfVxyXG4gICAgdmFyIHN0eWxlcyA9IGdldFdpbmRvd09mKHRhcmdldCkuZ2V0Q29tcHV0ZWRTdHlsZSh0YXJnZXQpO1xyXG4gICAgdmFyIHBhZGRpbmdzID0gZ2V0UGFkZGluZ3Moc3R5bGVzKTtcclxuICAgIHZhciBob3JpelBhZCA9IHBhZGRpbmdzLmxlZnQgKyBwYWRkaW5ncy5yaWdodDtcclxuICAgIHZhciB2ZXJ0UGFkID0gcGFkZGluZ3MudG9wICsgcGFkZGluZ3MuYm90dG9tO1xyXG4gICAgLy8gQ29tcHV0ZWQgc3R5bGVzIG9mIHdpZHRoICYgaGVpZ2h0IGFyZSBiZWluZyB1c2VkIGJlY2F1c2UgdGhleSBhcmUgdGhlXHJcbiAgICAvLyBvbmx5IGRpbWVuc2lvbnMgYXZhaWxhYmxlIHRvIEpTIHRoYXQgY29udGFpbiBub24tcm91bmRlZCB2YWx1ZXMuIEl0IGNvdWxkXHJcbiAgICAvLyBiZSBwb3NzaWJsZSB0byB1dGlsaXplIHRoZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaWYgb25seSBpdCdzIGRhdGEgd2Fzbid0XHJcbiAgICAvLyBhZmZlY3RlZCBieSBDU1MgdHJhbnNmb3JtYXRpb25zIGxldCBhbG9uZSBwYWRkaW5ncywgYm9yZGVycyBhbmQgc2Nyb2xsIGJhcnMuXHJcbiAgICB2YXIgd2lkdGggPSB0b0Zsb2F0KHN0eWxlcy53aWR0aCksIGhlaWdodCA9IHRvRmxvYXQoc3R5bGVzLmhlaWdodCk7XHJcbiAgICAvLyBXaWR0aCAmIGhlaWdodCBpbmNsdWRlIHBhZGRpbmdzIGFuZCBib3JkZXJzIHdoZW4gdGhlICdib3JkZXItYm94JyBib3hcclxuICAgIC8vIG1vZGVsIGlzIGFwcGxpZWQgKGV4Y2VwdCBmb3IgSUUpLlxyXG4gICAgaWYgKHN0eWxlcy5ib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xyXG4gICAgICAgIC8vIEZvbGxvd2luZyBjb25kaXRpb25zIGFyZSByZXF1aXJlZCB0byBoYW5kbGUgSW50ZXJuZXQgRXhwbG9yZXIgd2hpY2hcclxuICAgICAgICAvLyBkb2Vzbid0IGluY2x1ZGUgcGFkZGluZ3MgYW5kIGJvcmRlcnMgdG8gY29tcHV0ZWQgQ1NTIGRpbWVuc2lvbnMuXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBXZSBjYW4gc2F5IHRoYXQgaWYgQ1NTIGRpbWVuc2lvbnMgKyBwYWRkaW5ncyBhcmUgZXF1YWwgdG8gdGhlIFwiY2xpZW50XCJcclxuICAgICAgICAvLyBwcm9wZXJ0aWVzIHRoZW4gaXQncyBlaXRoZXIgSUUsIGFuZCB0aHVzIHdlIGRvbid0IG5lZWQgdG8gc3VidHJhY3RcclxuICAgICAgICAvLyBhbnl0aGluZywgb3IgYW4gZWxlbWVudCBtZXJlbHkgZG9lc24ndCBoYXZlIHBhZGRpbmdzL2JvcmRlcnMgc3R5bGVzLlxyXG4gICAgICAgIGlmIChNYXRoLnJvdW5kKHdpZHRoICsgaG9yaXpQYWQpICE9PSBjbGllbnRXaWR0aCkge1xyXG4gICAgICAgICAgICB3aWR0aCAtPSBnZXRCb3JkZXJzU2l6ZShzdHlsZXMsICdsZWZ0JywgJ3JpZ2h0JykgKyBob3JpelBhZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgIT09IGNsaWVudEhlaWdodCkge1xyXG4gICAgICAgICAgICBoZWlnaHQgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAndG9wJywgJ2JvdHRvbScpICsgdmVydFBhZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBGb2xsb3dpbmcgc3RlcHMgY2FuJ3QgYmUgYXBwbGllZCB0byB0aGUgZG9jdW1lbnQncyByb290IGVsZW1lbnQgYXMgaXRzXHJcbiAgICAvLyBjbGllbnRbV2lkdGgvSGVpZ2h0XSBwcm9wZXJ0aWVzIHJlcHJlc2VudCB2aWV3cG9ydCBhcmVhIG9mIHRoZSB3aW5kb3cuXHJcbiAgICAvLyBCZXNpZGVzLCBpdCdzIGFzIHdlbGwgbm90IG5lY2Vzc2FyeSBhcyB0aGUgPGh0bWw+IGl0c2VsZiBuZWl0aGVyIGhhc1xyXG4gICAgLy8gcmVuZGVyZWQgc2Nyb2xsIGJhcnMgbm9yIGl0IGNhbiBiZSBjbGlwcGVkLlxyXG4gICAgaWYgKCFpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgLy8gSW4gc29tZSBicm93c2VycyAob25seSBpbiBGaXJlZm94LCBhY3R1YWxseSkgQ1NTIHdpZHRoICYgaGVpZ2h0XHJcbiAgICAgICAgLy8gaW5jbHVkZSBzY3JvbGwgYmFycyBzaXplIHdoaWNoIGNhbiBiZSByZW1vdmVkIGF0IHRoaXMgc3RlcCBhcyBzY3JvbGxcclxuICAgICAgICAvLyBiYXJzIGFyZSB0aGUgb25seSBkaWZmZXJlbmNlIGJldHdlZW4gcm91bmRlZCBkaW1lbnNpb25zICsgcGFkZGluZ3NcclxuICAgICAgICAvLyBhbmQgXCJjbGllbnRcIiBwcm9wZXJ0aWVzLCB0aG91Z2ggdGhhdCBpcyBub3QgYWx3YXlzIHRydWUgaW4gQ2hyb21lLlxyXG4gICAgICAgIHZhciB2ZXJ0U2Nyb2xsYmFyID0gTWF0aC5yb3VuZCh3aWR0aCArIGhvcml6UGFkKSAtIGNsaWVudFdpZHRoO1xyXG4gICAgICAgIHZhciBob3JpelNjcm9sbGJhciA9IE1hdGgucm91bmQoaGVpZ2h0ICsgdmVydFBhZCkgLSBjbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgLy8gQ2hyb21lIGhhcyBhIHJhdGhlciB3ZWlyZCByb3VuZGluZyBvZiBcImNsaWVudFwiIHByb3BlcnRpZXMuXHJcbiAgICAgICAgLy8gRS5nLiBmb3IgYW4gZWxlbWVudCB3aXRoIGNvbnRlbnQgd2lkdGggb2YgMzE0LjJweCBpdCBzb21ldGltZXMgZ2l2ZXNcclxuICAgICAgICAvLyB0aGUgY2xpZW50IHdpZHRoIG9mIDMxNXB4IGFuZCBmb3IgdGhlIHdpZHRoIG9mIDMxNC43cHggaXQgbWF5IGdpdmVcclxuICAgICAgICAvLyAzMTRweC4gQW5kIGl0IGRvZXNuJ3QgaGFwcGVuIGFsbCB0aGUgdGltZS4gU28ganVzdCBpZ25vcmUgdGhpcyBkZWx0YVxyXG4gICAgICAgIC8vIGFzIGEgbm9uLXJlbGV2YW50LlxyXG4gICAgICAgIGlmIChNYXRoLmFicyh2ZXJ0U2Nyb2xsYmFyKSAhPT0gMSkge1xyXG4gICAgICAgICAgICB3aWR0aCAtPSB2ZXJ0U2Nyb2xsYmFyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5hYnMoaG9yaXpTY3JvbGxiYXIpICE9PSAxKSB7XHJcbiAgICAgICAgICAgIGhlaWdodCAtPSBob3JpelNjcm9sbGJhcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY3JlYXRlUmVjdEluaXQocGFkZGluZ3MubGVmdCwgcGFkZGluZ3MudG9wLCB3aWR0aCwgaGVpZ2h0KTtcclxufVxyXG4vKipcclxuICogQ2hlY2tzIHdoZXRoZXIgcHJvdmlkZWQgZWxlbWVudCBpcyBhbiBpbnN0YW5jZSBvZiB0aGUgU1ZHR3JhcGhpY3NFbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgY2hlY2tlZC5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG52YXIgaXNTVkdHcmFwaGljc0VsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU29tZSBicm93c2VycywgbmFtZWx5IElFIGFuZCBFZGdlLCBkb24ndCBoYXZlIHRoZSBTVkdHcmFwaGljc0VsZW1lbnRcclxuICAgIC8vIGludGVyZmFjZS5cclxuICAgIGlmICh0eXBlb2YgU1ZHR3JhcGhpY3NFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiB0YXJnZXQgaW5zdGFuY2VvZiBnZXRXaW5kb3dPZih0YXJnZXQpLlNWR0dyYXBoaWNzRWxlbWVudDsgfTtcclxuICAgIH1cclxuICAgIC8vIElmIGl0J3Mgc28sIHRoZW4gY2hlY2sgdGhhdCBlbGVtZW50IGlzIGF0IGxlYXN0IGFuIGluc3RhbmNlIG9mIHRoZVxyXG4gICAgLy8gU1ZHRWxlbWVudCBhbmQgdGhhdCBpdCBoYXMgdGhlIFwiZ2V0QkJveFwiIG1ldGhvZC5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRyYS1wYXJlbnNcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0KSB7IHJldHVybiAodGFyZ2V0IGluc3RhbmNlb2YgZ2V0V2luZG93T2YodGFyZ2V0KS5TVkdFbGVtZW50ICYmXHJcbiAgICAgICAgdHlwZW9mIHRhcmdldC5nZXRCQm94ID09PSAnZnVuY3Rpb24nKTsgfTtcclxufSkoKTtcclxuLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHByb3ZpZGVkIGVsZW1lbnQgaXMgYSBkb2N1bWVudCBlbGVtZW50ICg8aHRtbD4pLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdG8gYmUgY2hlY2tlZC5cclxuICogQHJldHVybnMge2Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0RvY3VtZW50RWxlbWVudCh0YXJnZXQpIHtcclxuICAgIHJldHVybiB0YXJnZXQgPT09IGdldFdpbmRvd09mKHRhcmdldCkuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGFuIGFwcHJvcHJpYXRlIGNvbnRlbnQgcmVjdGFuZ2xlIGZvciBwcm92aWRlZCBodG1sIG9yIHN2ZyBlbGVtZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgY29udGVudCByZWN0YW5nbGUgb2Ygd2hpY2ggbmVlZHMgdG8gYmUgY2FsY3VsYXRlZC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0Q29udGVudFJlY3QodGFyZ2V0KSB7XHJcbiAgICBpZiAoIWlzQnJvd3Nlcikge1xyXG4gICAgICAgIHJldHVybiBlbXB0eVJlY3Q7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNTVkdHcmFwaGljc0VsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgIHJldHVybiBnZXRTVkdDb250ZW50UmVjdCh0YXJnZXQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50Q29udGVudFJlY3QodGFyZ2V0KTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyByZWN0YW5nbGUgd2l0aCBhbiBpbnRlcmZhY2Ugb2YgdGhlIERPTVJlY3RSZWFkT25seS5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RvbXJlY3RyZWFkb25seVxyXG4gKlxyXG4gKiBAcGFyYW0ge0RPTVJlY3RJbml0fSByZWN0SW5pdCAtIE9iamVjdCB3aXRoIHJlY3RhbmdsZSdzIHgveSBjb29yZGluYXRlcyBhbmQgZGltZW5zaW9ucy5cclxuICogQHJldHVybnMge0RPTVJlY3RSZWFkT25seX1cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVJlYWRPbmx5UmVjdChfYSkge1xyXG4gICAgdmFyIHggPSBfYS54LCB5ID0gX2EueSwgd2lkdGggPSBfYS53aWR0aCwgaGVpZ2h0ID0gX2EuaGVpZ2h0O1xyXG4gICAgLy8gSWYgRE9NUmVjdFJlYWRPbmx5IGlzIGF2YWlsYWJsZSB1c2UgaXQgYXMgYSBwcm90b3R5cGUgZm9yIHRoZSByZWN0YW5nbGUuXHJcbiAgICB2YXIgQ29uc3RyID0gdHlwZW9mIERPTVJlY3RSZWFkT25seSAhPT0gJ3VuZGVmaW5lZCcgPyBET01SZWN0UmVhZE9ubHkgOiBPYmplY3Q7XHJcbiAgICB2YXIgcmVjdCA9IE9iamVjdC5jcmVhdGUoQ29uc3RyLnByb3RvdHlwZSk7XHJcbiAgICAvLyBSZWN0YW5nbGUncyBwcm9wZXJ0aWVzIGFyZSBub3Qgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlLlxyXG4gICAgZGVmaW5lQ29uZmlndXJhYmxlKHJlY3QsIHtcclxuICAgICAgICB4OiB4LCB5OiB5LCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LFxyXG4gICAgICAgIHRvcDogeSxcclxuICAgICAgICByaWdodDogeCArIHdpZHRoLFxyXG4gICAgICAgIGJvdHRvbTogaGVpZ2h0ICsgeSxcclxuICAgICAgICBsZWZ0OiB4XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZWN0O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIERPTVJlY3RJbml0IG9iamVjdCBiYXNlZCBvbiB0aGUgcHJvdmlkZWQgZGltZW5zaW9ucyBhbmQgdGhlIHgveSBjb29yZGluYXRlcy5cclxuICogU3BlYzogaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvZ2VvbWV0cnkvI2RpY3RkZWYtZG9tcmVjdGluaXRcclxuICpcclxuICogQHBhcmFtIHtudW1iZXJ9IHggLSBYIGNvb3JkaW5hdGUuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gWSBjb29yZGluYXRlLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBSZWN0YW5nbGUncyB3aWR0aC5cclxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFJlY3RhbmdsZSdzIGhlaWdodC5cclxuICogQHJldHVybnMge0RPTVJlY3RJbml0fVxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlUmVjdEluaXQoeCwgeSwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgcmV0dXJuIHsgeDogeCwgeTogeSwgd2lkdGg6IHdpZHRoLCBoZWlnaHQ6IGhlaWdodCB9O1xyXG59XG5cbi8qKlxyXG4gKiBDbGFzcyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciBjb21wdXRhdGlvbnMgb2YgdGhlIGNvbnRlbnQgcmVjdGFuZ2xlIG9mXHJcbiAqIHByb3ZpZGVkIERPTSBlbGVtZW50IGFuZCBmb3Iga2VlcGluZyB0cmFjayBvZiBpdCdzIGNoYW5nZXMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2YXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgUmVzaXplT2JzZXJ2YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIG9ic2VydmVkLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZhdGlvbih0YXJnZXQpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBCcm9hZGNhc3RlZCB3aWR0aCBvZiBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5icm9hZGNhc3RXaWR0aCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQnJvYWRjYXN0ZWQgaGVpZ2h0IG9mIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBsYXN0IG9ic2VydmVkIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge0RPTVJlY3RJbml0fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY29udGVudFJlY3RfID0gY3JlYXRlUmVjdEluaXQoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgY29udGVudCByZWN0YW5nbGUgYW5kIHRlbGxzIHdoZXRoZXIgaXQncyB3aWR0aCBvciBoZWlnaHQgcHJvcGVydGllc1xyXG4gICAgICogaGF2ZSBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGJyb2FkY2FzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmlzQWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZWN0ID0gZ2V0Q29udGVudFJlY3QodGhpcy50YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY29udGVudFJlY3RfID0gcmVjdDtcclxuICAgICAgICByZXR1cm4gKHJlY3Qud2lkdGggIT09IHRoaXMuYnJvYWRjYXN0V2lkdGggfHxcclxuICAgICAgICAgICAgcmVjdC5oZWlnaHQgIT09IHRoaXMuYnJvYWRjYXN0SGVpZ2h0KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZXMgJ2Jyb2FkY2FzdFdpZHRoJyBhbmQgJ2Jyb2FkY2FzdEhlaWdodCcgcHJvcGVydGllcyB3aXRoIGEgZGF0YVxyXG4gICAgICogZnJvbSB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0aWVzIG9mIHRoZSBsYXN0IG9ic2VydmVkIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtET01SZWN0SW5pdH0gTGFzdCBvYnNlcnZlZCBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2YXRpb24ucHJvdG90eXBlLmJyb2FkY2FzdFJlY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlY3QgPSB0aGlzLmNvbnRlbnRSZWN0XztcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdFdpZHRoID0gcmVjdC53aWR0aDtcclxuICAgICAgICB0aGlzLmJyb2FkY2FzdEhlaWdodCA9IHJlY3QuaGVpZ2h0O1xyXG4gICAgICAgIHJldHVybiByZWN0O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZhdGlvbjtcclxufSgpKTtcblxudmFyIFJlc2l6ZU9ic2VydmVyRW50cnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgUmVzaXplT2JzZXJ2ZXJFbnRyeS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IHRhcmdldCAtIEVsZW1lbnQgdGhhdCBpcyBiZWluZyBvYnNlcnZlZC5cclxuICAgICAqIEBwYXJhbSB7RE9NUmVjdEluaXR9IHJlY3RJbml0IC0gRGF0YSBvZiB0aGUgZWxlbWVudCdzIGNvbnRlbnQgcmVjdGFuZ2xlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlckVudHJ5KHRhcmdldCwgcmVjdEluaXQpIHtcclxuICAgICAgICB2YXIgY29udGVudFJlY3QgPSBjcmVhdGVSZWFkT25seVJlY3QocmVjdEluaXQpO1xyXG4gICAgICAgIC8vIEFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiBmb2xsb3dpbmcgcHJvcGVydGllcyBhcmUgbm90IHdyaXRhYmxlXHJcbiAgICAgICAgLy8gYW5kIGFyZSBhbHNvIG5vdCBlbnVtZXJhYmxlIGluIHRoZSBuYXRpdmUgaW1wbGVtZW50YXRpb24uXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBQcm9wZXJ0eSBhY2Nlc3NvcnMgYXJlIG5vdCBiZWluZyB1c2VkIGFzIHRoZXknZCByZXF1aXJlIHRvIGRlZmluZSBhXHJcbiAgICAgICAgLy8gcHJpdmF0ZSBXZWFrTWFwIHN0b3JhZ2Ugd2hpY2ggbWF5IGNhdXNlIG1lbW9yeSBsZWFrcyBpbiBicm93c2VycyB0aGF0XHJcbiAgICAgICAgLy8gZG9uJ3Qgc3VwcG9ydCB0aGlzIHR5cGUgb2YgY29sbGVjdGlvbnMuXHJcbiAgICAgICAgZGVmaW5lQ29uZmlndXJhYmxlKHRoaXMsIHsgdGFyZ2V0OiB0YXJnZXQsIGNvbnRlbnRSZWN0OiBjb250ZW50UmVjdCB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlckVudHJ5O1xyXG59KCkpO1xuXG52YXIgUmVzaXplT2JzZXJ2ZXJTUEkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmVzaXplT2JzZXJ2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlckNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZFxyXG4gICAgICogICAgICB3aGVuIG9uZSBvZiB0aGUgb2JzZXJ2ZWQgZWxlbWVudHMgY2hhbmdlcyBpdCdzIGNvbnRlbnQgZGltZW5zaW9ucy5cclxuICAgICAqIEBwYXJhbSB7UmVzaXplT2JzZXJ2ZXJDb250cm9sbGVyfSBjb250cm9sbGVyIC0gQ29udHJvbGxlciBpbnN0YW5jZSB3aGljaFxyXG4gICAgICogICAgICBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHVwZGF0ZXMgb2Ygb2JzZXJ2ZXIuXHJcbiAgICAgKiBAcGFyYW0ge1Jlc2l6ZU9ic2VydmVyfSBjYWxsYmFja0N0eCAtIFJlZmVyZW5jZSB0byB0aGUgcHVibGljXHJcbiAgICAgKiAgICAgIFJlc2l6ZU9ic2VydmVyIGluc3RhbmNlIHdoaWNoIHdpbGwgYmUgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBSZXNpemVPYnNlcnZlclNQSShjYWxsYmFjaywgY29udHJvbGxlciwgY2FsbGJhY2tDdHgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb2xsZWN0aW9uIG9mIHJlc2l6ZSBvYnNlcnZhdGlvbnMgdGhhdCBoYXZlIGRldGVjdGVkIGNoYW5nZXMgaW4gZGltZW5zaW9uc1xyXG4gICAgICAgICAqIG9mIGVsZW1lbnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge0FycmF5PFJlc2l6ZU9ic2VydmF0aW9uPn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBSZWdpc3RyeSBvZiB0aGUgUmVzaXplT2JzZXJ2YXRpb24gaW5zdGFuY2VzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHByaXZhdGUge01hcDxFbGVtZW50LCBSZXNpemVPYnNlcnZhdGlvbj59XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5vYnNlcnZhdGlvbnNfID0gbmV3IE1hcFNoaW0oKTtcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjYWxsYmFjayBwcm92aWRlZCBhcyBwYXJhbWV0ZXIgMSBpcyBub3QgYSBmdW5jdGlvbi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja18gPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfID0gY29udHJvbGxlcjtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrQ3R4XyA9IGNhbGxiYWNrQ3R4O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydHMgb2JzZXJ2aW5nIHByb3ZpZGVkIGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSB0YXJnZXQgLSBFbGVtZW50IHRvIGJlIG9ic2VydmVkLlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxyXG4gICAgICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvYnNlcnZhdGlvbnMgPSB0aGlzLm9ic2VydmF0aW9uc187XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIGFscmVhZHkgYmVpbmcgb2JzZXJ2ZWQuXHJcbiAgICAgICAgaWYgKG9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ic2VydmF0aW9ucy5zZXQodGFyZ2V0LCBuZXcgUmVzaXplT2JzZXJ2YXRpb24odGFyZ2V0KSk7XHJcbiAgICAgICAgdGhpcy5jb250cm9sbGVyXy5hZGRPYnNlcnZlcih0aGlzKTtcclxuICAgICAgICAvLyBGb3JjZSB0aGUgdXBkYXRlIG9mIG9ic2VydmF0aW9ucy5cclxuICAgICAgICB0aGlzLmNvbnRyb2xsZXJfLnJlZnJlc2goKTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIFN0b3BzIG9ic2VydmluZyBwcm92aWRlZCBlbGVtZW50LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gdGFyZ2V0IC0gRWxlbWVudCB0byBzdG9wIG9ic2VydmluZy5cclxuICAgICAqIEByZXR1cm5zIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBSZXNpemVPYnNlcnZlclNQSS5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcxIGFyZ3VtZW50IHJlcXVpcmVkLCBidXQgb25seSAwIHByZXNlbnQuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgY3VycmVudCBlbnZpcm9ubWVudCBkb2Vzbid0IGhhdmUgdGhlIEVsZW1lbnQgaW50ZXJmYWNlLlxyXG4gICAgICAgIGlmICh0eXBlb2YgRWxlbWVudCA9PT0gJ3VuZGVmaW5lZCcgfHwgIShFbGVtZW50IGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIGdldFdpbmRvd09mKHRhcmdldCkuRWxlbWVudCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyYW1ldGVyIDEgaXMgbm90IG9mIHR5cGUgXCJFbGVtZW50XCIuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvYnNlcnZhdGlvbnMgPSB0aGlzLm9ic2VydmF0aW9uc187XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBlbGVtZW50IGlzIG5vdCBiZWluZyBvYnNlcnZlZC5cclxuICAgICAgICBpZiAoIW9ic2VydmF0aW9ucy5oYXModGFyZ2V0KSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG9ic2VydmF0aW9ucy5kZWxldGUodGFyZ2V0KTtcclxuICAgICAgICBpZiAoIW9ic2VydmF0aW9ucy5zaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlcl8ucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogU3RvcHMgb2JzZXJ2aW5nIGFsbCBlbGVtZW50cy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2YXRpb25zXy5jbGVhcigpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbGxlcl8ucmVtb3ZlT2JzZXJ2ZXIodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb2xsZWN0cyBvYnNlcnZhdGlvbiBpbnN0YW5jZXMgdGhlIGFzc29jaWF0ZWQgZWxlbWVudCBvZiB3aGljaCBoYXMgY2hhbmdlZFxyXG4gICAgICogaXQncyBjb250ZW50IHJlY3RhbmdsZS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmdhdGhlckFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuY2xlYXJBY3RpdmUoKTtcclxuICAgICAgICB0aGlzLm9ic2VydmF0aW9uc18uZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2YXRpb24pIHtcclxuICAgICAgICAgICAgaWYgKG9ic2VydmF0aW9uLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18ucHVzaChvYnNlcnZhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZXMgaW5pdGlhbCBjYWxsYmFjayBmdW5jdGlvbiB3aXRoIGEgbGlzdCBvZiBSZXNpemVPYnNlcnZlckVudHJ5XHJcbiAgICAgKiBpbnN0YW5jZXMgY29sbGVjdGVkIGZyb20gYWN0aXZlIHJlc2l6ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5icm9hZGNhc3RBY3RpdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gRG8gbm90aGluZyBpZiBvYnNlcnZlciBkb2Vzbid0IGhhdmUgYWN0aXZlIG9ic2VydmF0aW9ucy5cclxuICAgICAgICBpZiAoIXRoaXMuaGFzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY3R4ID0gdGhpcy5jYWxsYmFja0N0eF87XHJcbiAgICAgICAgLy8gQ3JlYXRlIFJlc2l6ZU9ic2VydmVyRW50cnkgaW5zdGFuY2UgZm9yIGV2ZXJ5IGFjdGl2ZSBvYnNlcnZhdGlvbi5cclxuICAgICAgICB2YXIgZW50cmllcyA9IHRoaXMuYWN0aXZlT2JzZXJ2YXRpb25zXy5tYXAoZnVuY3Rpb24gKG9ic2VydmF0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVzaXplT2JzZXJ2ZXJFbnRyeShvYnNlcnZhdGlvbi50YXJnZXQsIG9ic2VydmF0aW9uLmJyb2FkY2FzdFJlY3QoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja18uY2FsbChjdHgsIGVudHJpZXMsIGN0eCk7XHJcbiAgICAgICAgdGhpcy5jbGVhckFjdGl2ZSgpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQ2xlYXJzIHRoZSBjb2xsZWN0aW9uIG9mIGFjdGl2ZSBvYnNlcnZhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybnMge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJlc2l6ZU9ic2VydmVyU1BJLnByb3RvdHlwZS5jbGVhckFjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZU9ic2VydmF0aW9uc18uc3BsaWNlKDApO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogVGVsbHMgd2hldGhlciBvYnNlcnZlciBoYXMgYWN0aXZlIG9ic2VydmF0aW9ucy5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgUmVzaXplT2JzZXJ2ZXJTUEkucHJvdG90eXBlLmhhc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3RpdmVPYnNlcnZhdGlvbnNfLmxlbmd0aCA+IDA7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyU1BJO1xyXG59KCkpO1xuXG4vLyBSZWdpc3RyeSBvZiBpbnRlcm5hbCBvYnNlcnZlcnMuIElmIFdlYWtNYXAgaXMgbm90IGF2YWlsYWJsZSB1c2UgY3VycmVudCBzaGltXHJcbi8vIGZvciB0aGUgTWFwIGNvbGxlY3Rpb24gYXMgaXQgaGFzIGFsbCByZXF1aXJlZCBtZXRob2RzIGFuZCBiZWNhdXNlIFdlYWtNYXBcclxuLy8gY2FuJ3QgYmUgZnVsbHkgcG9seWZpbGxlZCBhbnl3YXkuXHJcbnZhciBvYnNlcnZlcnMgPSB0eXBlb2YgV2Vha01hcCAhPT0gJ3VuZGVmaW5lZCcgPyBuZXcgV2Vha01hcCgpIDogbmV3IE1hcFNoaW0oKTtcclxuLyoqXHJcbiAqIFJlc2l6ZU9ic2VydmVyIEFQSS4gRW5jYXBzdWxhdGVzIHRoZSBSZXNpemVPYnNlcnZlciBTUEkgaW1wbGVtZW50YXRpb25cclxuICogZXhwb3Npbmcgb25seSB0aG9zZSBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhlIHNwZWMuXHJcbiAqL1xyXG52YXIgUmVzaXplT2JzZXJ2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgUmVzaXplT2JzZXJ2ZXIuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtSZXNpemVPYnNlcnZlckNhbGxiYWNrfSBjYWxsYmFjayAtIENhbGxiYWNrIHRoYXQgaXMgaW52b2tlZCB3aGVuXHJcbiAgICAgKiAgICAgIGRpbWVuc2lvbnMgb2YgdGhlIG9ic2VydmVkIGVsZW1lbnRzIGNoYW5nZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gUmVzaXplT2JzZXJ2ZXIoY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVzaXplT2JzZXJ2ZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbi4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJzEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudC4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBSZXNpemVPYnNlcnZlckNvbnRyb2xsZXIuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXJTUEkoY2FsbGJhY2ssIGNvbnRyb2xsZXIsIHRoaXMpO1xyXG4gICAgICAgIG9ic2VydmVycy5zZXQodGhpcywgb2JzZXJ2ZXIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFJlc2l6ZU9ic2VydmVyO1xyXG59KCkpO1xyXG4vLyBFeHBvc2UgcHVibGljIG1ldGhvZHMgb2YgUmVzaXplT2JzZXJ2ZXIuXHJcbltcclxuICAgICdvYnNlcnZlJyxcclxuICAgICd1bm9ic2VydmUnLFxyXG4gICAgJ2Rpc2Nvbm5lY3QnXHJcbl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XHJcbiAgICBSZXNpemVPYnNlcnZlci5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgcmV0dXJuIChfYSA9IG9ic2VydmVycy5nZXQodGhpcykpW21ldGhvZF0uYXBwbHkoX2EsIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG59KTtcblxudmFyIGluZGV4ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIEV4cG9ydCBleGlzdGluZyBpbXBsZW1lbnRhdGlvbiBpZiBhdmFpbGFibGUuXHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCQxLlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWwkMS5SZXNpemVPYnNlcnZlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBSZXNpemVPYnNlcnZlcjtcclxufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIEhlbHBlciBmb3IgYSBwb3B1bGFyIHJlcGVhdGluZyBjYXNlIG9mIHRoZSBzcGVjOlxuLy8gTGV0IGludGVnZXIgYmUgPyBUb0ludGVnZXIoaW5kZXgpLlxuLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluZGV4LCBsZW5ndGgpIHtcbiAgdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XG4gIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDtcbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7XG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHtcbiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGZuLCB0aGF0LCBBU19FTlRSSUVTID8gMiA6IDEpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gQVNfRU5UUklFU1xuICAgICAgICAgID8gYm91bmRGdW5jdGlvbihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSlcbiAgICAgICAgICA6IGJvdW5kRnVuY3Rpb24oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gICAgICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbiAgICB9XG4gICAgaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7XG4gIH1cblxuICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgd2hpbGUgKCEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmUpIHtcbiAgICByZXN1bHQgPSBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBib3VuZEZ1bmN0aW9uLCBzdGVwLnZhbHVlLCBBU19FTlRSSUVTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnb2JqZWN0JyAmJiByZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9IHJldHVybiBuZXcgUmVzdWx0KGZhbHNlKTtcbn07XG5cbml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgcmVzdWx0KTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG90eXBlW0lURVJBVE9SXSA9PT0gaXQpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZlJhdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWdcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0O1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgdGVzdCA9IHt9O1xuXG50ZXN0W1RPX1NUUklOR19UQUddID0gJ3onO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0cmluZyh0ZXN0KSA9PT0gJ1tvYmplY3Qgel0nO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBFTlRSSUVTKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXR1cm5NZXRob2QgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3BlY2llc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBkZWZhdWx0Q29uc3RydWN0b3IpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgSVNfTk9ERSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuLy8gTm9kZS5qcyAxMSBzaG93cyBFeHBlcmltZW50YWxXYXJuaW5nIG9uIGdldHRpbmcgYHF1ZXVlTWljcm90YXNrYFxudmFyIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWwsICdxdWV1ZU1pY3JvdGFzaycpO1xudmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcblxudmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghcXVldWVNaWNyb3Rhc2spIHtcbiAgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcbiAgICB3aGlsZSAoaGVhZCkge1xuICAgICAgZm4gPSBoZWFkLmZuO1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKCk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoTXV0YXRpb25PYnNlcnZlciAmJiAhSVNfSU9TKSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICB0aGVuID0gcHJvbWlzZS50aGVuO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4uY2FsbChwcm9taXNlLCBmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdGVzdCA9IFtdO1xudmFyIG5hdGl2ZVNvcnQgPSB0ZXN0LnNvcnQ7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgRk9SQ0VEID0gRkFJTFNfT05fVU5ERUZJTkVEIHx8ICFGQUlMU19PTl9OVUxMIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvcnRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/IG5hdGl2ZVNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpLCBhRnVuY3Rpb24oY29tcGFyZWZuKSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FLCBhcmd1bWVudCkge1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICByZXR1cm4gISFtZXRob2QgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGwsbm8tdGhyb3ctbGl0ZXJhbFxuICAgIG1ldGhvZC5jYWxsKG51bGwsIGFyZ3VtZW50IHx8IGZ1bmN0aW9uICgpIHsgdGhyb3cgMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIGNvbGxlY3Rpb25EZWxldGVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1kZWxldGUtYWxsJyk7XG5cbi8vIGBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGVBbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtY29sbGVjdGlvbi1tZXRob2RzXG4kKHsgdGFyZ2V0OiAnV2Vha01hcCcsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfSwge1xuICBkZWxldGVBbGw6IGZ1bmN0aW9uIGRlbGV0ZUFsbCgvKiAuLi5lbGVtZW50cyAqLykge1xuICAgIHJldHVybiBjb2xsZWN0aW9uRGVsZXRlQWxsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2NvbGxlY3Rpb24tbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoLyogLi4uZWxlbWVudHMgKi8pIHtcbiAgdmFyIGNvbGxlY3Rpb24gPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlbW92ZXIgPSBhRnVuY3Rpb24oY29sbGVjdGlvblsnZGVsZXRlJ10pO1xuICB2YXIgYWxsRGVsZXRlZCA9IHRydWU7XG4gIHZhciB3YXNEZWxldGVkO1xuICBmb3IgKHZhciBrID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgayA8IGxlbjsgaysrKSB7XG4gICAgd2FzRGVsZXRlZCA9IHJlbW92ZXIuY2FsbChjb2xsZWN0aW9uLCBhcmd1bWVudHNba10pO1xuICAgIGFsbERlbGV0ZWQgPSBhbGxEZWxldGVkICYmIHdhc0RlbGV0ZWQ7XG4gIH1cbiAgcmV0dXJuICEhYWxsRGVsZXRlZDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxuZnVuY3Rpb24gbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYjtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3N0b3JlKHN0b3JlLCBuYW1lKSB7XG4gICAgaWYgKHN0b3JlICE9IG51bGwgJiYgdHlwZW9mIHN0b3JlLnN1YnNjcmliZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke25hbWV9JyBpcyBub3QgYSBzdG9yZSB3aXRoIGEgJ3N1YnNjcmliZScgbWV0aG9kYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3Vic2NyaWJlKHN0b3JlLCAuLi5jYWxsYmFja3MpIHtcbiAgICBpZiAoc3RvcmUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICB9XG4gICAgY29uc3QgdW5zdWIgPSBzdG9yZS5zdWJzY3JpYmUoLi4uY2FsbGJhY2tzKTtcbiAgICByZXR1cm4gdW5zdWIudW5zdWJzY3JpYmUgPyAoKSA9PiB1bnN1Yi51bnN1YnNjcmliZSgpIDogdW5zdWI7XG59XG5mdW5jdGlvbiBnZXRfc3RvcmVfdmFsdWUoc3RvcmUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgc3Vic2NyaWJlKHN0b3JlLCBfID0+IHZhbHVlID0gXykoKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjb21wb25lbnRfc3Vic2NyaWJlKGNvbXBvbmVudCwgc3RvcmUsIGNhbGxiYWNrKSB7XG4gICAgY29tcG9uZW50LiQkLm9uX2Rlc3Ryb3kucHVzaChzdWJzY3JpYmUoc3RvcmUsIGNhbGxiYWNrKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVfc2xvdChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb24pIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jdHggPSBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pO1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvblswXShzbG90X2N0eCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKSB7XG4gICAgcmV0dXJuIGRlZmluaXRpb25bMV0gJiYgZm5cbiAgICAgICAgPyBhc3NpZ24oJCRzY29wZS5jdHguc2xpY2UoKSwgZGVmaW5pdGlvblsxXShmbihjdHgpKSlcbiAgICAgICAgOiAkJHNjb3BlLmN0eDtcbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NoYW5nZXMoZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGZuKSB7XG4gICAgaWYgKGRlZmluaXRpb25bMl0gJiYgZm4pIHtcbiAgICAgICAgY29uc3QgbGV0cyA9IGRlZmluaXRpb25bMl0oZm4oZGlydHkpKTtcbiAgICAgICAgaWYgKCQkc2NvcGUuZGlydHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGxldHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBsZXRzID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3QgbWVyZ2VkID0gW107XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBNYXRoLm1heCgkJHNjb3BlLmRpcnR5Lmxlbmd0aCwgbGV0cy5sZW5ndGgpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIG1lcmdlZFtpXSA9ICQkc2NvcGUuZGlydHlbaV0gfCBsZXRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJCRzY29wZS5kaXJ0eSB8IGxldHM7XG4gICAgfVxuICAgIHJldHVybiAkJHNjb3BlLmRpcnR5O1xufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuICAgICAgICBzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMocHJvcHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmIChrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN1bHRba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9yZXN0X3Byb3BzKHByb3BzLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdCA9IHt9O1xuICAgIGtleXMgPSBuZXcgU2V0KGtleXMpO1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKCFrZXlzLmhhcyhrKSAmJiBrWzBdICE9PSAnJCcpXG4gICAgICAgICAgICByZXN0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3Q7XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAocmFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlID0gcmV0KSB7XG4gICAgc3RvcmUuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmV0O1xufVxuY29uc3QgaGFzX3Byb3AgPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbmZ1bmN0aW9uIGFjdGlvbl9kZXN0cm95ZXIoYWN0aW9uX3Jlc3VsdCkge1xuICAgIHJldHVybiBhY3Rpb25fcmVzdWx0ICYmIGlzX2Z1bmN0aW9uKGFjdGlvbl9yZXN1bHQuZGVzdHJveSkgPyBhY3Rpb25fcmVzdWx0LmRlc3Ryb3kgOiBub29wO1xufVxuXG5jb25zdCBpc19jbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbmxldCBub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmxldCByYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIG5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIHJhZiA9IGZuO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHJ1bl90YXNrcyhub3cpIHtcbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBpZiAoIXRhc2suYyhub3cpKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgICAgICB0YXNrLmYoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0YXNrcy5zaXplICE9PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kKHRhcmdldCwgbm9kZSkge1xuICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gZGV0YWNoKG5vZGUpIHtcbiAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBkZXN0cm95X2VhY2goaXRlcmF0aW9ucywgZGV0YWNoaW5nKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVyYXRpb25zW2ldKVxuICAgICAgICAgICAgaXRlcmF0aW9uc1tpXS5kKGRldGFjaGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBlbGVtZW50X2lzKG5hbWUsIGlzKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSwgeyBpcyB9KTtcbn1cbmZ1bmN0aW9uIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMob2JqLCBleGNsdWRlKSB7XG4gICAgY29uc3QgdGFyZ2V0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIG9iaikge1xuICAgICAgICBpZiAoaGFzX3Byb3Aob2JqLCBrKVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgJiYgZXhjbHVkZS5pbmRleE9mKGspID09PSAtMSkge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgdGFyZ2V0W2tdID0gb2JqW2tdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBzdmdfZWxlbWVudChuYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCBuYW1lKTtcbn1cbmZ1bmN0aW9uIHRleHQoZGF0YSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkYXRhKTtcbn1cbmZ1bmN0aW9uIHNwYWNlKCkge1xuICAgIHJldHVybiB0ZXh0KCcgJyk7XG59XG5mdW5jdGlvbiBlbXB0eSgpIHtcbiAgICByZXR1cm4gdGV4dCgnJyk7XG59XG5mdW5jdGlvbiBsaXN0ZW4obm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIHJldHVybiAoKSA9PiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gcHJldmVudF9kZWZhdWx0KGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc3RvcF9wcm9wYWdhdGlvbihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzZWxmKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gdW5kZWZpbmVkIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Zykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgbGV0IGogPSAwO1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgICAgICB3aGlsZSAoaiA8IG5vZGUuYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbaisrXTtcbiAgICAgICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZS5wdXNoKGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHJlbW92ZS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHJlbW92ZVtrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdmcgPyBzdmdfZWxlbWVudChuYW1lKSA6IGVsZW1lbnQobmFtZSk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSAnJyArIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMuc3BsaWNlKGksIDEpWzBdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXh0KGRhdGEpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhKHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0LmRhdGEgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShrZXksIHZhbHVlLCBpbXBvcnRhbnQgPyAnaW1wb3J0YW50JyA6ICcnKTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gfnZhbHVlLmluZGV4T2Yob3B0aW9uLl9fdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcbiAgICBjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSB8fCBzZWxlY3Qub3B0aW9uc1swXTtcbiAgICByZXR1cm4gc2VsZWN0ZWRfb3B0aW9uICYmIHNlbGVjdGVkX29wdGlvbi5fX3ZhbHVlO1xufVxuZnVuY3Rpb24gc2VsZWN0X211bHRpcGxlX3ZhbHVlKHNlbGVjdCkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgb3B0aW9uID0+IG9wdGlvbi5fX3ZhbHVlKTtcbn1cbi8vIHVuZm9ydHVuYXRlbHkgdGhpcyBjYW4ndCBiZSBhIGNvbnN0YW50IGFzIHRoYXQgd291bGRuJ3QgYmUgdHJlZS1zaGFrZWFibGVcbi8vIHNvIHdlIGNhY2hlIHRoZSByZXN1bHQgaW5zdGVhZFxubGV0IGNyb3Nzb3JpZ2luO1xuZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG4gICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Jvc3NvcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY3Jvc3NvcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcm9zc29yaWdpbjtcbn1cbmZ1bmN0aW9uIGFkZF9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3Qgel9pbmRleCA9IChwYXJzZUludChjb21wdXRlZF9zdHlsZS56SW5kZXgpIHx8IDApIC0gMTtcbiAgICBpZiAoY29tcHV0ZWRfc3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuICAgIH1cbiAgICBjb25zdCBpZnJhbWUgPSBlbGVtZW50KCdpZnJhbWUnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5OiBibG9jazsgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGxlZnQ6IDA7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7IGAgK1xuICAgICAgICBgb3ZlcmZsb3c6IGhpZGRlbjsgYm9yZGVyOiAwOyBvcGFjaXR5OiAwOyBwb2ludGVyLWV2ZW50czogbm9uZTsgei1pbmRleDogJHt6X2luZGV4fTtgKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IGBkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5gO1xuICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3Rlbih3aW5kb3csICdtZXNzYWdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBpZnJhbWUuY29udGVudFdpbmRvdylcbiAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgICBpZnJhbWUub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4oaWZyYW1lLmNvbnRlbnRXaW5kb3csICdyZXNpemUnLCBmbik7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGFwcGVuZChub2RlLCBpZnJhbWUpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1bnN1YnNjcmliZSAmJiBpZnJhbWUuY29udGVudFdpbmRvdykge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgICAgICBkZXRhY2goaWZyYW1lKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdG9nZ2xlX2NsYXNzKGVsZW1lbnQsIG5hbWUsIHRvZ2dsZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0W3RvZ2dsZSA/ICdhZGQnIDogJ3JlbW92ZSddKG5hbWUpO1xufVxuZnVuY3Rpb24gY3VzdG9tX2V2ZW50KHR5cGUsIGRldGFpbCkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuY2xhc3MgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoYW5jaG9yID0gbnVsbCkge1xuICAgICAgICB0aGlzLmEgPSBhbmNob3I7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pKGFuY2hvcik7XG4gICAgfVxuICAgIGgoaHRtbCkge1xuICAgICAgICB0aGlzLmUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgdGhpcy5uID0gQXJyYXkuZnJvbSh0aGlzLmUuY2hpbGROb2Rlcyk7XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnQodGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcChodG1sKSB7XG4gICAgICAgIHRoaXMuZCgpO1xuICAgICAgICB0aGlzLmgoaHRtbCk7XG4gICAgICAgIHRoaXMuaSh0aGlzLmEpO1xuICAgIH1cbiAgICBkKCkge1xuICAgICAgICB0aGlzLm4uZm9yRWFjaChkZXRhY2gpO1xuICAgIH1cbn1cblxuY29uc3QgYWN0aXZlX2RvY3MgPSBuZXcgU2V0KCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICBhY3RpdmVfZG9jcy5hZGQoZG9jKTtcbiAgICBjb25zdCBzdHlsZXNoZWV0ID0gZG9jLl9fc3ZlbHRlX3N0eWxlc2hlZXQgfHwgKGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0ID0gZG9jLmhlYWQuYXBwZW5kQ2hpbGQoZWxlbWVudCgnc3R5bGUnKSkuc2hlZXQpO1xuICAgIGNvbnN0IGN1cnJlbnRfcnVsZXMgPSBkb2MuX19zdmVsdGVfcnVsZXMgfHwgKGRvYy5fX3N2ZWx0ZV9ydWxlcyA9IHt9KTtcbiAgICBpZiAoIWN1cnJlbnRfcnVsZXNbbmFtZV0pIHtcbiAgICAgICAgY3VycmVudF9ydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6IGBgfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgYWN0aXZlX2RvY3MuZm9yRWFjaChkb2MgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0O1xuICAgICAgICAgICAgbGV0IGkgPSBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHdoaWxlIChpLS0pXG4gICAgICAgICAgICAgICAgc3R5bGVzaGVldC5kZWxldGVSdWxlKGkpO1xuICAgICAgICAgICAgZG9jLl9fc3ZlbHRlX3J1bGVzID0ge307XG4gICAgICAgIH0pO1xuICAgICAgICBhY3RpdmVfZG9jcy5jbGVhcigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVfYW5pbWF0aW9uKG5vZGUsIGZyb20sIGZuLCBwYXJhbXMpIHtcbiAgICBpZiAoIWZyb20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHRvID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoZnJvbS5sZWZ0ID09PSB0by5sZWZ0ICYmIGZyb20ucmlnaHQgPT09IHRvLnJpZ2h0ICYmIGZyb20udG9wID09PSB0by50b3AgJiYgZnJvbS5ib3R0b20gPT09IHRvLmJvdHRvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBzaG91bGQgdGhpcyBiZSBzZXBhcmF0ZWQgZnJvbSBkZXN0cnVjdHVyaW5nPyBPciBzdGFydC9lbmQgYWRkZWQgdG8gcHVibGljIGFwaSBhbmQgZG9jdW1lbnRhdGlvbj9cbiAgICBzdGFydDogc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzpcbiAgICBlbmQgPSBzdGFydF90aW1lICsgZHVyYXRpb24sIHRpY2sgPSBub29wLCBjc3MgfSA9IGZuKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICBsZXQgbmFtZTtcbiAgICBmdW5jdGlvbiBzdGFydCgpIHtcbiAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZGVsYXkpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBuYW1lKTtcbiAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgIGlmICghc3RhcnRlZCAmJiBub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQgJiYgbm93ID49IGVuZCkge1xuICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgIHN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHN0YXJ0X3RpbWU7XG4gICAgICAgICAgICBjb25zdCB0ID0gMCArIDEgKiBlYXNpbmcocCAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0KCk7XG4gICAgdGljaygwLCAxKTtcbiAgICByZXR1cm4gc3RvcDtcbn1cbmZ1bmN0aW9uIGZpeF9wb3NpdGlvbihub2RlKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2Fic29sdXRlJyAmJiBzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHN0eWxlO1xuICAgICAgICBjb25zdCBhID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAgIG5vZGUuc3R5bGUud2lkdGggPSB3aWR0aDtcbiAgICAgICAgbm9kZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGFkZF90cmFuc2Zvcm0obm9kZSwgYSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYWRkX3RyYW5zZm9ybShub2RlLCBhKSB7XG4gICAgY29uc3QgYiA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGEubGVmdCAhPT0gYi5sZWZ0IHx8IGEudG9wICE9PSBiLnRvcCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gYCR7dHJhbnNmb3JtfSB0cmFuc2xhdGUoJHthLmxlZnQgLSBiLmxlZnR9cHgsICR7YS50b3AgLSBiLnRvcH1weClgO1xuICAgIH1cbn1cblxubGV0IGN1cnJlbnRfY29tcG9uZW50O1xuZnVuY3Rpb24gc2V0X2N1cnJlbnRfY29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIGN1cnJlbnRfY29tcG9uZW50ID0gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkge1xuICAgIGlmICghY3VycmVudF9jb21wb25lbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gY2FsbGVkIG91dHNpZGUgY29tcG9uZW50IGluaXRpYWxpemF0aW9uYCk7XG4gICAgcmV0dXJuIGN1cnJlbnRfY29tcG9uZW50O1xufVxuZnVuY3Rpb24gYmVmb3JlVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYmVmb3JlX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFmdGVyVXBkYXRlKGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuYWZ0ZXJfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpIHtcbiAgICBjb25zdCBjb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICByZXR1cm4gKHR5cGUsIGRldGFpbCkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICAgICAgZm4uY2FsbChjb21wb25lbnQsIGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgY2FsbGJhY2tzLnNsaWNlKCkuZm9yRWFjaChmbiA9PiBmbihldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxubGV0IGZsdXNoaW5nID0gZmFsc2U7XG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChmbHVzaGluZylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICB3aGlsZSAoYmluZGluZ19jYWxsYmFja3MubGVuZ3RoKVxuICAgICAgICAgICAgYmluZGluZ19jYWxsYmFja3MucG9wKCkoKTtcbiAgICAgICAgLy8gdGhlbiwgb25jZSBjb21wb25lbnRzIGFyZSB1cGRhdGVkLCBjYWxsXG4gICAgICAgIC8vIGFmdGVyVXBkYXRlIGZ1bmN0aW9ucy4gVGhpcyBtYXkgY2F1c2VcbiAgICAgICAgLy8gc3Vic2VxdWVudCB1cGRhdGVzLi4uXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSByZW5kZXJfY2FsbGJhY2tzW2ldO1xuICAgICAgICAgICAgaWYgKCFzZWVuX2NhbGxiYWNrcy5oYXMoY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgLy8gLi4uc28gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBsb29wc1xuICAgICAgICAgICAgICAgIHNlZW5fY2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgfSB3aGlsZSAoZGlydHlfY29tcG9uZW50cy5sZW5ndGgpO1xuICAgIHdoaWxlIChmbHVzaF9jYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgIGZsdXNoX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgIH1cbiAgICB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG4gICAgZmx1c2hpbmcgPSBmYWxzZTtcbiAgICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUpO1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbihnbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBpbnZhbGlkYXRlKCkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX291dF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMpIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgcnVubmluZyA9IHRydWU7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGNvbnN0IGdyb3VwID0gb3V0cm9zO1xuICAgIGdyb3VwLnIgKz0gMTtcbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMSwgMCwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIGNvbnN0IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5O1xuICAgICAgICBjb25zdCBlbmRfdGltZSA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbjtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ3N0YXJ0JykpO1xuICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEtLWdyb3VwLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXN1bHQgaW4gYGVuZCgpYCBiZWluZyBjYWxsZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCBuZWVkIHRvIGNsZWFuIHVwIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwoZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSAtIHQsIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICBnbygpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdvKCk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGVuZChyZXNldCkge1xuICAgICAgICAgICAgaWYgKHJlc2V0ICYmIGNvbmZpZy50aWNrKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLnRpY2soMSwgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uKG5vZGUsIGZuLCBwYXJhbXMsIGludHJvKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHQgPSBpbnRybyA/IDAgOiAxO1xuICAgIGxldCBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgIGxldCBhbmltYXRpb25fbmFtZSA9IG51bGw7XG4gICAgZnVuY3Rpb24gY2xlYXJfYW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGluaXQocHJvZ3JhbSwgZHVyYXRpb24pIHtcbiAgICAgICAgY29uc3QgZCA9IHByb2dyYW0uYiAtIHQ7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyDigJQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyDigJQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cblxuY29uc3QgZ2xvYmFscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgIDogZ2xvYmFsKTtcblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCBkeW5hbWljLCBjdHgsIGxpc3QsIGxvb2t1cCwgbm9kZSwgZGVzdHJveSwgY3JlYXRlX2VhY2hfYmxvY2ssIG5leHQsIGdldF9jb250ZXh0KSB7XG4gICAgbGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcbiAgICBsZXQgbiA9IGxpc3QubGVuZ3RoO1xuICAgIGxldCBpID0gbztcbiAgICBjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG4gICAgY29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuICAgIGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuICAgIGkgPSBuO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgYmxvY2sgPSBsb29rdXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgICAgIGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgICAgIGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgICAgICBpZiAoa2V5IGluIG9sZF9pbmRleGVzKVxuICAgICAgICAgICAgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG4gICAgfVxuICAgIGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgIGJsb2NrLm0obm9kZSwgbmV4dCk7XG4gICAgICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgICAgIG5leHQgPSBibG9jay5maXJzdDtcbiAgICAgICAgbi0tO1xuICAgIH1cbiAgICB3aGlsZSAobyAmJiBuKSB7XG4gICAgICAgIGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcbiAgICAgICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgICAgIGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuICAgICAgICBpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGJsb2NrXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuICAgICAgICAgICAgZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChvLS0pIHtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcbiAgICAgICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgIH1cbiAgICB3aGlsZSAobilcbiAgICAgICAgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcbiAgICByZXR1cm4gbmV3X2Jsb2Nrcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfa2V5cyhjdHgsIGxpc3QsIGdldF9jb250ZXh0LCBnZXRfa2V5KSB7XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcbiAgICAgICAgaWYgKGtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGhhdmUgZHVwbGljYXRlIGtleXMgaW4gYSBrZXllZCBlYWNoYCk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF9zcHJlYWRfdXBkYXRlKGxldmVscywgdXBkYXRlcykge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHt9O1xuICAgIGNvbnN0IHRvX251bGxfb3V0ID0ge307XG4gICAgY29uc3QgYWNjb3VudGVkX2ZvciA9IHsgJCRzY29wZTogMSB9O1xuICAgIGxldCBpID0gbGV2ZWxzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IG8gPSBsZXZlbHNbaV07XG4gICAgICAgIGNvbnN0IG4gPSB1cGRhdGVzW2ldO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBuKSlcbiAgICAgICAgICAgICAgICAgICAgdG9fbnVsbF9vdXRba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50ZWRfZm9yW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlW2tleV0gPSBuW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV2ZWxzW2ldID0gbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRvX251bGxfb3V0KSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUpKVxuICAgICAgICAgICAgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBnZXRfc3ByZWFkX29iamVjdChzcHJlYWRfcHJvcHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG5jb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICAnYWxsb3dmdWxsc2NyZWVuJyxcbiAgICAnYWxsb3dwYXltZW50cmVxdWVzdCcsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXV0b2ZvY3VzJyxcbiAgICAnYXV0b3BsYXknLFxuICAgICdjaGVja2VkJyxcbiAgICAnY29udHJvbHMnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZGVmZXInLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Zvcm1ub3ZhbGlkYXRlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaXNtYXAnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gXCIgXCIgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gXCIgXCIgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke1N0cmluZyh2YWx1ZSkucmVwbGFjZSgvXCIvZywgJyYjMzQ7JykucmVwbGFjZSgvJy9nLCAnJiMzOTsnKX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgZXNjYXBlZCA9IHtcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7JyxcbiAgICAnJic6ICcmYW1wOycsXG4gICAgJzwnOiAnJmx0OycsXG4gICAgJz4nOiAnJmd0Oydcbn07XG5mdW5jdGlvbiBlc2NhcGUoaHRtbCkge1xuICAgIHJldHVybiBTdHJpbmcoaHRtbCkucmVwbGFjZSgvW1wiJyY8Pl0vZywgbWF0Y2ggPT4gZXNjYXBlZFttYXRjaF0pO1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlc2ApO1xuICAgIH1cbiAgICByZXR1cm4gY29tcG9uZW50O1xufVxuZnVuY3Rpb24gZGVidWcoZmlsZSwgbGluZSwgY29sdW1uLCB2YWx1ZXMpIHtcbiAgICBjb25zb2xlLmxvZyhge0BkZWJ1Z30gJHtmaWxlID8gZmlsZSArICcgJyA6ICcnfSgke2xpbmV9OiR7Y29sdW1ufSlgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgY29uc29sZS5sb2codmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgcmV0dXJuICcnO1xufVxubGV0IG9uX2Rlc3Ryb3k7XG5mdW5jdGlvbiBjcmVhdGVfc3NyX2NvbXBvbmVudChmbikge1xuICAgIGZ1bmN0aW9uICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cykge1xuICAgICAgICBjb25zdCBwYXJlbnRfY29tcG9uZW50ID0gY3VycmVudF9jb21wb25lbnQ7XG4gICAgICAgIGNvbnN0ICQkID0ge1xuICAgICAgICAgICAgb25fZGVzdHJveSxcbiAgICAgICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sIG9wdGlvbnMpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIHJldHVybiBgICR7bmFtZX0ke3ZhbHVlID09PSB0cnVlID8gJycgOiBgPSR7dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IEpTT04uc3RyaW5naWZ5KGVzY2FwZSh2YWx1ZSkpIDogYFwiJHt2YWx1ZX1cImB9YH1gO1xufVxuZnVuY3Rpb24gYWRkX2NsYXNzZXMoY2xhc3Nlcykge1xuICAgIHJldHVybiBjbGFzc2VzID8gYCBjbGFzcz1cIiR7Y2xhc3Nlc31cImAgOiBgYDtcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgIGlmIChvbl9kZXN0cm95KSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICBydW5fYWxsKG5ld19vbl9kZXN0cm95KTtcbiAgICAgICAgfVxuICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICB9KTtcbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgICQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgICQkLmN0eCA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgICAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgICB9XG4gICAgY29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gKDEgPDwgKGkgJSAzMSkpO1xufVxuZnVuY3Rpb24gaW5pdChjb21wb25lbnQsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIG5vdF9lcXVhbCwgcHJvcHMsIGRpcnR5ID0gWy0xXSkge1xuICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCBwcm9wX3ZhbHVlcyA9IG9wdGlvbnMucHJvcHMgfHwge307XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQgPSB7XG4gICAgICAgIGZyYWdtZW50OiBudWxsLFxuICAgICAgICBjdHg6IG51bGwsXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSxcbiAgICAgICAgLy8gZXZlcnl0aGluZyBlbHNlXG4gICAgICAgIGNhbGxiYWNrczogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIGRpcnR5XG4gICAgfTtcbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICAkJC5jdHggPSBpbnN0YW5jZVxuICAgICAgICA/IGluc3RhbmNlKGNvbXBvbmVudCwgcHJvcF92YWx1ZXMsIChpLCByZXQsIC4uLnJlc3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcmVzdC5sZW5ndGggPyByZXN0WzBdIDogcmV0O1xuICAgICAgICAgICAgaWYgKCQkLmN0eCAmJiBub3RfZXF1YWwoJCQuY3R4W2ldLCAkJC5jdHhbaV0gPSB2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoJCQuYm91bmRbaV0pXG4gICAgICAgICAgICAgICAgICAgICQkLmJvdW5kW2ldKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZHkpXG4gICAgICAgICAgICAgICAgICAgIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH0pXG4gICAgICAgIDogW107XG4gICAgJCQudXBkYXRlKCk7XG4gICAgcmVhZHkgPSB0cnVlO1xuICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgLy8gYGZhbHNlYCBhcyBhIHNwZWNpYWwgY2FzZSBvZiBubyBET00gY29tcG9uZW50XG4gICAgJCQuZnJhZ21lbnQgPSBjcmVhdGVfZnJhZ21lbnQgPyBjcmVhdGVfZnJhZ21lbnQoJCQuY3R4KSA6IGZhbHNlO1xuICAgIGlmIChvcHRpb25zLnRhcmdldCkge1xuICAgICAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvcik7XG4gICAgICAgIGZsdXNoKCk7XG4gICAgfVxuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbn1cbmxldCBTdmVsdGVFbGVtZW50O1xuaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFN2ZWx0ZUVsZW1lbnQgPSBjbGFzcyBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBzdXBlcigpO1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgpIHtcbiAgICAgICAgICAgIC8vIG92ZXJyaWRkZW4gYnkgaW5zdGFuY2UsIGlmIGl0IGhhcyBwcm9wc1xuICAgICAgICB9XG4gICAgfTtcbn1cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoKSB7XG4gICAgICAgIC8vIG92ZXJyaWRkZW4gYnkgaW5zdGFuY2UsIGlmIGl0IGhhcyBwcm9wc1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy4yMy4yJyB9LCBkZXRhaWwpKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTUluc2VydFwiLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoXCJTdmVsdGVET01JbnNlcnRcIiwgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlXCIsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFtcImNhcHR1cmVcIl0gOiBvcHRpb25zID8gQXJyYXkuZnJvbShPYmplY3Qua2V5cyhvcHRpb25zKSkgOiBbXTtcbiAgICBpZiAoaGFzX3ByZXZlbnRfZGVmYXVsdClcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3ByZXZlbnREZWZhdWx0Jyk7XG4gICAgaWYgKGhhc19zdG9wX3Byb3BhZ2F0aW9uKVxuICAgICAgICBtb2RpZmllcnMucHVzaCgnc3RvcFByb3BhZ2F0aW9uJyk7XG4gICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KFwiU3ZlbHRlRE9NUmVtb3ZlRXZlbnRMaXN0ZW5lclwiLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSB9KTtcbiAgICBlbHNlXG4gICAgICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldEF0dHJpYnV0ZVwiLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldFByb3BlcnR5XCIsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFzZXRcIiwgeyBub2RlLCBwcm9wZXJ0eSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YV9kZXYodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQuZGF0YSA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldihcIlN2ZWx0ZURPTVNldERhdGFcIiwgeyBub2RlOiB0ZXh0LCBkYXRhIH0pO1xuICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2FyZ3VtZW50KGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSAnc3RyaW5nJyAmJiAhKGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBhcmcpKSB7XG4gICAgICAgIGxldCBtc2cgPSAneyNlYWNofSBvbmx5IGl0ZXJhdGVzIG92ZXIgYXJyYXktbGlrZSBvYmplY3RzLic7XG4gICAgICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGFyZyAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gYXJnKSB7XG4gICAgICAgICAgICBtc2cgKz0gJyBZb3UgY2FuIHVzZSBhIHNwcmVhZCB0byBjb252ZXJ0IHRoaXMgaXRlcmFibGUgaW50byBhbiBhcnJheS4nO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3Nsb3RzKG5hbWUsIHNsb3QsIGtleXMpIHtcbiAgICBmb3IgKGNvbnN0IHNsb3Rfa2V5IG9mIE9iamVjdC5rZXlzKHNsb3QpKSB7XG4gICAgICAgIGlmICghfmtleXMuaW5kZXhPZihzbG90X2tleSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgPCR7bmFtZX0+IHJlY2VpdmVkIGFuIHVuZXhwZWN0ZWQgc2xvdCBcIiR7c2xvdF9rZXl9XCIuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCd0YXJnZXQnIGlzIGEgcmVxdWlyZWQgb3B0aW9uYCk7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWRgKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEluZmluaXRlIGxvb3AgZGV0ZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IEh0bWxUYWcsIFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50RGV2LCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfbG9jYXRpb24sIGFkZF9yZW5kZXJfY2FsbGJhY2ssIGFkZF9yZXNpemVfbGlzdGVuZXIsIGFkZF90cmFuc2Zvcm0sIGFmdGVyVXBkYXRlLCBhcHBlbmQsIGFwcGVuZF9kZXYsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX3NwYWNlLCBjbGFpbV90ZXh0LCBjbGVhcl9sb29wcywgY29tcG9uZW50X3N1YnNjcmliZSwgY29tcHV0ZV9yZXN0X3Byb3BzLCBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGNyZWF0ZV9hbmltYXRpb24sIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24sIGNyZWF0ZV9jb21wb25lbnQsIGNyZWF0ZV9pbl90cmFuc2l0aW9uLCBjcmVhdGVfb3V0X3RyYW5zaXRpb24sIGNyZWF0ZV9zbG90LCBjcmVhdGVfc3NyX2NvbXBvbmVudCwgY3VycmVudF9jb21wb25lbnQsIGN1c3RvbV9ldmVudCwgZGF0YXNldF9kZXYsIGRlYnVnLCBkZXN0cm95X2Jsb2NrLCBkZXN0cm95X2NvbXBvbmVudCwgZGVzdHJveV9lYWNoLCBkZXRhY2gsIGRldGFjaF9hZnRlcl9kZXYsIGRldGFjaF9iZWZvcmVfZGV2LCBkZXRhY2hfYmV0d2Vlbl9kZXYsIGRldGFjaF9kZXYsIGRpcnR5X2NvbXBvbmVudHMsIGRpc3BhdGNoX2RldiwgZWFjaCwgZWxlbWVudCwgZWxlbWVudF9pcywgZW1wdHksIGVzY2FwZSwgZXNjYXBlZCwgZXhjbHVkZV9pbnRlcm5hbF9wcm9wcywgZml4X2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBmaXhfcG9zaXRpb24sIGZsdXNoLCBnZXRDb250ZXh0LCBnZXRfYmluZGluZ19ncm91cF92YWx1ZSwgZ2V0X2N1cnJlbnRfY29tcG9uZW50LCBnZXRfc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0LCBnZXRfc3ByZWFkX29iamVjdCwgZ2V0X3NwcmVhZF91cGRhdGUsIGdldF9zdG9yZV92YWx1ZSwgZ2xvYmFscywgZ3JvdXBfb3V0cm9zLCBoYW5kbGVfcHJvbWlzZSwgaGFzX3Byb3AsIGlkZW50aXR5LCBpbml0LCBpbnNlcnQsIGluc2VydF9kZXYsIGludHJvcywgaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIsIGlzX2NsaWVudCwgaXNfY3Jvc3NvcmlnaW4sIGlzX2Z1bmN0aW9uLCBpc19wcm9taXNlLCBsaXN0ZW4sIGxpc3Rlbl9kZXYsIGxvb3AsIGxvb3BfZ3VhcmQsIG1pc3NpbmdfY29tcG9uZW50LCBtb3VudF9jb21wb25lbnQsIG5vb3AsIG5vdF9lcXVhbCwgbm93LCBudWxsX3RvX2VtcHR5LCBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzLCBvbkRlc3Ryb3ksIG9uTW91bnQsIG9uY2UsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBwcmV2ZW50X2RlZmF1bHQsIHByb3BfZGV2LCBxdWVyeV9zZWxlY3Rvcl9hbGwsIHJhZiwgcnVuLCBydW5fYWxsLCBzYWZlX25vdF9lcXVhbCwgc2NoZWR1bGVfdXBkYXRlLCBzZWxlY3RfbXVsdGlwbGVfdmFsdWUsIHNlbGVjdF9vcHRpb24sIHNlbGVjdF9vcHRpb25zLCBzZWxlY3RfdmFsdWUsIHNlbGYsIHNldENvbnRleHQsIHNldF9hdHRyaWJ1dGVzLCBzZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXN0b21fZWxlbWVudF9kYXRhLCBzZXRfZGF0YSwgc2V0X2RhdGFfZGV2LCBzZXRfaW5wdXRfdHlwZSwgc2V0X2lucHV0X3ZhbHVlLCBzZXRfbm93LCBzZXRfcmFmLCBzZXRfc3RvcmVfdmFsdWUsIHNldF9zdHlsZSwgc2V0X3N2Z19hdHRyaWJ1dGVzLCBzcGFjZSwgc3ByZWFkLCBzdG9wX3Byb3BhZ2F0aW9uLCBzdWJzY3JpYmUsIHN2Z19lbGVtZW50LCB0ZXh0LCB0aWNrLCB0aW1lX3Jhbmdlc190b19hcnJheSwgdG9fbnVtYmVyLCB0b2dnbGVfY2xhc3MsIHRyYW5zaXRpb25faW4sIHRyYW5zaXRpb25fb3V0LCB1cGRhdGVfa2V5ZWRfZWFjaCwgdXBkYXRlX3Nsb3QsIHZhbGlkYXRlX2NvbXBvbmVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHhsaW5rX2F0dHIgfTtcbiIsIi8qKlxyXG4gKiBDb21tb24gdXRpbGl0aWVzXHJcbiAqIEBtb2R1bGUgZ2xNYXRyaXhcclxuICovXG4vLyBDb25maWd1cmF0aW9uIENvbnN0YW50c1xuZXhwb3J0IHZhciBFUFNJTE9OID0gMC4wMDAwMDE7XG5leHBvcnQgdmFyIEFSUkFZX1RZUEUgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xuZXhwb3J0IHZhciBSQU5ET00gPSBNYXRoLnJhbmRvbTtcbi8qKlxyXG4gKiBTZXRzIHRoZSB0eXBlIG9mIGFycmF5IHVzZWQgd2hlbiBjcmVhdGluZyBuZXcgdmVjdG9ycyBhbmQgbWF0cmljZXNcclxuICpcclxuICogQHBhcmFtIHtGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvciB8IEFycmF5Q29uc3RydWN0b3J9IHR5cGUgQXJyYXkgdHlwZSwgc3VjaCBhcyBGbG9hdDMyQXJyYXkgb3IgQXJyYXlcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xuICBBUlJBWV9UWVBFID0gdHlwZTtcbn1cbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xuLyoqXHJcbiAqIENvbnZlcnQgRGVncmVlIFRvIFJhZGlhblxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdG9SYWRpYW4oYSkge1xuICByZXR1cm4gYSAqIGRlZ3JlZTtcbn1cbi8qKlxyXG4gKiBUZXN0cyB3aGV0aGVyIG9yIG5vdCB0aGUgYXJndW1lbnRzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSB2YWx1ZSwgd2l0aGluIGFuIGFic29sdXRlXHJcbiAqIG9yIHJlbGF0aXZlIHRvbGVyYW5jZSBvZiBnbE1hdHJpeC5FUFNJTE9OIChhbiBhYnNvbHV0ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgdmFsdWVzIGxlc3NcclxuICogdGhhbiBvciBlcXVhbCB0byAxLjAsIGFuZCBhIHJlbGF0aXZlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciBsYXJnZXIgdmFsdWVzKVxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBUaGUgZmlyc3QgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIFRoZSBzZWNvbmQgbnVtYmVyIHRvIHRlc3QuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBudW1iZXJzIGFyZSBhcHByb3hpbWF0ZWx5IGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuaWYgKCFNYXRoLmh5cG90KSBNYXRoLmh5cG90ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgeSA9IDAsXG4gICAgICBpID0gYXJndW1lbnRzLmxlbmd0aDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgeSArPSBhcmd1bWVudHNbaV0gKiBhcmd1bWVudHNbaV07XG4gIH1cblxuICByZXR1cm4gTWF0aC5zcXJ0KHkpO1xufTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxyXG4gKiA0eDQgTWF0cml4PGJyPkZvcm1hdDogY29sdW1uLW1ham9yLCB3aGVuIHR5cGVkIG91dCBpdCBsb29rcyBsaWtlIHJvdy1tYWpvcjxicj5UaGUgbWF0cmljZXMgYXJlIGJlaW5nIHBvc3QgbXVsdGlwbGllZC5cclxuICogQG1vZHVsZSBtYXQ0XHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQ0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICAgIG91dFs0XSA9IDA7XG4gICAgb3V0WzZdID0gMDtcbiAgICBvdXRbN10gPSAwO1xuICAgIG91dFs4XSA9IDA7XG4gICAgb3V0WzldID0gMDtcbiAgICBvdXRbMTFdID0gMDtcbiAgICBvdXRbMTJdID0gMDtcbiAgICBvdXRbMTNdID0gMDtcbiAgICBvdXRbMTRdID0gMDtcbiAgfVxuXG4gIG91dFswXSA9IDE7XG4gIG91dFs1XSA9IDE7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICBvdXRbOV0gPSBhWzldO1xuICBvdXRbMTBdID0gYVsxMF07XG4gIG91dFsxMV0gPSBhWzExXTtcbiAgb3V0WzEyXSA9IGFbMTJdO1xuICBvdXRbMTNdID0gYVsxM107XG4gIG91dFsxNF0gPSBhWzE0XTtcbiAgb3V0WzE1XSA9IGFbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQ0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIG91dFs5XSA9IGFbOV07XG4gIG91dFsxMF0gPSBhWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdO1xuICBvdXRbMTJdID0gYVsxMl07XG4gIG91dFsxM10gPSBhWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdO1xuICBvdXRbMTVdID0gYVsxNV07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlIGEgbmV3IG1hdDQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMyBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMiBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcclxuICogQHJldHVybnMge21hdDR9IEEgbmV3IG1hdDRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMTYpO1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTAyO1xuICBvdXRbM10gPSBtMDM7XG4gIG91dFs0XSA9IG0xMDtcbiAgb3V0WzVdID0gbTExO1xuICBvdXRbNl0gPSBtMTI7XG4gIG91dFs3XSA9IG0xMztcbiAgb3V0WzhdID0gbTIwO1xuICBvdXRbOV0gPSBtMjE7XG4gIG91dFsxMF0gPSBtMjI7XG4gIG91dFsxMV0gPSBtMjM7XG4gIG91dFsxMl0gPSBtMzA7XG4gIG91dFsxM10gPSBtMzE7XG4gIG91dFsxNF0gPSBtMzI7XG4gIG91dFsxNV0gPSBtMzM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0NCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMyBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMiBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xuICBvdXRbMF0gPSBtMDA7XG4gIG91dFsxXSA9IG0wMTtcbiAgb3V0WzJdID0gbTAyO1xuICBvdXRbM10gPSBtMDM7XG4gIG91dFs0XSA9IG0xMDtcbiAgb3V0WzVdID0gbTExO1xuICBvdXRbNl0gPSBtMTI7XG4gIG91dFs3XSA9IG0xMztcbiAgb3V0WzhdID0gbTIwO1xuICBvdXRbOV0gPSBtMjE7XG4gIG91dFsxMF0gPSBtMjI7XG4gIG91dFsxMV0gPSBtMjM7XG4gIG91dFsxMl0gPSBtMzA7XG4gIG91dFsxM10gPSBtMzE7XG4gIG91dFsxNF0gPSBtMzI7XG4gIG91dFsxNV0gPSBtMzM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IGEgbWF0NCB0byB0aGUgaWRlbnRpdHkgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMTtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gMDtcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IDE7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcbiAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICBpZiAob3V0ID09PSBhKSB7XG4gICAgdmFyIGEwMSA9IGFbMV0sXG4gICAgICAgIGEwMiA9IGFbMl0sXG4gICAgICAgIGEwMyA9IGFbM107XG4gICAgdmFyIGExMiA9IGFbNl0sXG4gICAgICAgIGExMyA9IGFbN107XG4gICAgdmFyIGEyMyA9IGFbMTFdO1xuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhMDE7XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhMDI7XG4gICAgb3V0WzldID0gYTEyO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYTAzO1xuICAgIG91dFsxM10gPSBhMTM7XG4gICAgb3V0WzE0XSA9IGEyMztcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbNF07XG4gICAgb3V0WzJdID0gYVs4XTtcbiAgICBvdXRbM10gPSBhWzEyXTtcbiAgICBvdXRbNF0gPSBhWzFdO1xuICAgIG91dFs1XSA9IGFbNV07XG4gICAgb3V0WzZdID0gYVs5XTtcbiAgICBvdXRbN10gPSBhWzEzXTtcbiAgICBvdXRbOF0gPSBhWzJdO1xuICAgIG91dFs5XSA9IGFbNl07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzE0XTtcbiAgICBvdXRbMTJdID0gYVszXTtcbiAgICBvdXRbMTNdID0gYVs3XTtcbiAgICBvdXRbMTRdID0gYVsxMV07XG4gICAgb3V0WzE1XSA9IGFbMTVdO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBJbnZlcnRzIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG5cbiAgaWYgKCFkZXQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRldCA9IDEuMCAvIGRldDtcbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XG4gIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcbiAgb3V0WzNdID0gKGEyMiAqIGIwNCAtIGEyMSAqIGIwNSAtIGEyMyAqIGIwMykgKiBkZXQ7XG4gIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xuICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgb3V0WzZdID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XG4gIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0O1xuICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcbiAgb3V0WzldID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcbiAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xuICBvdXRbMTJdID0gKGExMSAqIGIwNyAtIGExMCAqIGIwOSAtIGExMiAqIGIwNikgKiBkZXQ7XG4gIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDtcbiAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xuICBvdXRbMTVdID0gKGEyMCAqIGIwMyAtIGEyMSAqIGIwMSArIGEyMiAqIGIwMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgb3V0WzBdID0gYTExICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSArIGEzMSAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpO1xuICBvdXRbMV0gPSAtKGEwMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSk7XG4gIG91dFsyXSA9IGEwMSAqIChhMTIgKiBhMzMgLSBhMTMgKiBhMzIpIC0gYTExICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTEzIC0gYTAzICogYTEyKTtcbiAgb3V0WzNdID0gLShhMDEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbNF0gPSAtKGExMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSk7XG4gIG91dFs1XSA9IGEwMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzAgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKTtcbiAgb3V0WzZdID0gLShhMDAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xuICBvdXRbN10gPSBhMDAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XG4gIG91dFs4XSA9IGExMCAqIChhMjEgKiBhMzMgLSBhMjMgKiBhMzEpIC0gYTIwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgKyBhMzAgKiAoYTExICogYTIzIC0gYTEzICogYTIxKTtcbiAgb3V0WzldID0gLShhMDAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkpO1xuICBvdXRbMTBdID0gYTAwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpO1xuICBvdXRbMTFdID0gLShhMDAgKiAoYTExICogYTIzIC0gYTEzICogYTIxKSAtIGExMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpICsgYTIwICogKGEwMSAqIGExMyAtIGEwMyAqIGExMSkpO1xuICBvdXRbMTJdID0gLShhMTAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkpO1xuICBvdXRbMTNdID0gYTAwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpO1xuICBvdXRbMTRdID0gLShhMDAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSAtIGExMCAqIChhMDEgKiBhMzIgLSBhMDIgKiBhMzEpICsgYTMwICogKGEwMSAqIGExMiAtIGEwMiAqIGExMSkpO1xuICBvdXRbMTVdID0gYTAwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTAzID0gYVszXTtcbiAgdmFyIGExMCA9IGFbNF0sXG4gICAgICBhMTEgPSBhWzVdLFxuICAgICAgYTEyID0gYVs2XSxcbiAgICAgIGExMyA9IGFbN107XG4gIHZhciBhMjAgPSBhWzhdLFxuICAgICAgYTIxID0gYVs5XSxcbiAgICAgIGEyMiA9IGFbMTBdLFxuICAgICAgYTIzID0gYVsxMV07XG4gIHZhciBhMzAgPSBhWzEyXSxcbiAgICAgIGEzMSA9IGFbMTNdLFxuICAgICAgYTMyID0gYVsxNF0sXG4gICAgICBhMzMgPSBhWzE1XTtcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjsgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxuXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gbWF0NHNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07IC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxuXG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIG91dFswXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzJdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFszXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICBiMCA9IGJbNF07XG4gIGIxID0gYls1XTtcbiAgYjIgPSBiWzZdO1xuICBiMyA9IGJbN107XG4gIG91dFs0XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcbiAgb3V0WzZdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFs3XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICBiMCA9IGJbOF07XG4gIGIxID0gYls5XTtcbiAgYjIgPSBiWzEwXTtcbiAgYjMgPSBiWzExXTtcbiAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XG4gIG91dFs5XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xuICBvdXRbMTBdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XG4gIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcbiAgYjAgPSBiWzEyXTtcbiAgYjEgPSBiWzEzXTtcbiAgYjIgPSBiWzE0XTtcbiAgYjMgPSBiWzE1XTtcbiAgb3V0WzEyXSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xuICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XG4gIG91dFsxNF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcbiAgb3V0WzE1XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zbGF0ZSBhIG1hdDQgYnkgdGhlIGdpdmVuIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiB2ZWN0b3IgdG8gdHJhbnNsYXRlIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XG4gIHZhciB4ID0gdlswXSxcbiAgICAgIHkgPSB2WzFdLFxuICAgICAgeiA9IHZbMl07XG4gIHZhciBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gIHZhciBhMTAsIGExMSwgYTEyLCBhMTM7XG4gIHZhciBhMjAsIGEyMSwgYTIyLCBhMjM7XG5cbiAgaWYgKGEgPT09IG91dCkge1xuICAgIG91dFsxMl0gPSBhWzBdICogeCArIGFbNF0gKiB5ICsgYVs4XSAqIHogKyBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMl0gKiB4ICsgYVs2XSAqIHkgKyBhWzEwXSAqIHogKyBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVszXSAqIHggKyBhWzddICogeSArIGFbMTFdICogeiArIGFbMTVdO1xuICB9IGVsc2Uge1xuICAgIGEwMCA9IGFbMF07XG4gICAgYTAxID0gYVsxXTtcbiAgICBhMDIgPSBhWzJdO1xuICAgIGEwMyA9IGFbM107XG4gICAgYTEwID0gYVs0XTtcbiAgICBhMTEgPSBhWzVdO1xuICAgIGExMiA9IGFbNl07XG4gICAgYTEzID0gYVs3XTtcbiAgICBhMjAgPSBhWzhdO1xuICAgIGEyMSA9IGFbOV07XG4gICAgYTIyID0gYVsxMF07XG4gICAgYTIzID0gYVsxMV07XG4gICAgb3V0WzBdID0gYTAwO1xuICAgIG91dFsxXSA9IGEwMTtcbiAgICBvdXRbMl0gPSBhMDI7XG4gICAgb3V0WzNdID0gYTAzO1xuICAgIG91dFs0XSA9IGExMDtcbiAgICBvdXRbNV0gPSBhMTE7XG4gICAgb3V0WzZdID0gYTEyO1xuICAgIG91dFs3XSA9IGExMztcbiAgICBvdXRbOF0gPSBhMjA7XG4gICAgb3V0WzldID0gYTIxO1xuICAgIG91dFsxMF0gPSBhMjI7XG4gICAgb3V0WzExXSA9IGEyMztcbiAgICBvdXRbMTJdID0gYTAwICogeCArIGExMCAqIHkgKyBhMjAgKiB6ICsgYVsxMl07XG4gICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdO1xuICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcbiAgICBvdXRbMTVdID0gYTAzICogeCArIGExMyAqIHkgKyBhMjMgKiB6ICsgYVsxNV07XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IHRoZSB2ZWMzIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcbiAgdmFyIHggPSB2WzBdLFxuICAgICAgeSA9IHZbMV0sXG4gICAgICB6ID0gdlsyXTtcbiAgb3V0WzBdID0gYVswXSAqIHg7XG4gIG91dFsxXSA9IGFbMV0gKiB4O1xuICBvdXRbMl0gPSBhWzJdICogeDtcbiAgb3V0WzNdID0gYVszXSAqIHg7XG4gIG91dFs0XSA9IGFbNF0gKiB5O1xuICBvdXRbNV0gPSBhWzVdICogeTtcbiAgb3V0WzZdID0gYVs2XSAqIHk7XG4gIG91dFs3XSA9IGFbN10gKiB5O1xuICBvdXRbOF0gPSBhWzhdICogejtcbiAgb3V0WzldID0gYVs5XSAqIHo7XG4gIG91dFsxMF0gPSBhWzEwXSAqIHo7XG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XG4gIG91dFsxMl0gPSBhWzEyXTtcbiAgb3V0WzEzXSA9IGFbMTNdO1xuICBvdXRbMTRdID0gYVsxNF07XG4gIG91dFsxNV0gPSBhWzE1XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCwgYXhpcykge1xuICB2YXIgeCA9IGF4aXNbMF0sXG4gICAgICB5ID0gYXhpc1sxXSxcbiAgICAgIHogPSBheGlzWzJdO1xuICB2YXIgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgdmFyIHMsIGMsIHQ7XG4gIHZhciBhMDAsIGEwMSwgYTAyLCBhMDM7XG4gIHZhciBhMTAsIGExMSwgYTEyLCBhMTM7XG4gIHZhciBhMjAsIGEyMSwgYTIyLCBhMjM7XG4gIHZhciBiMDAsIGIwMSwgYjAyO1xuICB2YXIgYjEwLCBiMTEsIGIxMjtcbiAgdmFyIGIyMCwgYjIxLCBiMjI7XG5cbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxlbiA9IDEgLyBsZW47XG4gIHggKj0gbGVuO1xuICB5ICo9IGxlbjtcbiAgeiAqPSBsZW47XG4gIHMgPSBNYXRoLnNpbihyYWQpO1xuICBjID0gTWF0aC5jb3MocmFkKTtcbiAgdCA9IDEgLSBjO1xuICBhMDAgPSBhWzBdO1xuICBhMDEgPSBhWzFdO1xuICBhMDIgPSBhWzJdO1xuICBhMDMgPSBhWzNdO1xuICBhMTAgPSBhWzRdO1xuICBhMTEgPSBhWzVdO1xuICBhMTIgPSBhWzZdO1xuICBhMTMgPSBhWzddO1xuICBhMjAgPSBhWzhdO1xuICBhMjEgPSBhWzldO1xuICBhMjIgPSBhWzEwXTtcbiAgYTIzID0gYVsxMV07IC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudHMgb2YgdGhlIHJvdGF0aW9uIG1hdHJpeFxuXG4gIGIwMCA9IHggKiB4ICogdCArIGM7XG4gIGIwMSA9IHkgKiB4ICogdCArIHogKiBzO1xuICBiMDIgPSB6ICogeCAqIHQgLSB5ICogcztcbiAgYjEwID0geCAqIHkgKiB0IC0geiAqIHM7XG4gIGIxMSA9IHkgKiB5ICogdCArIGM7XG4gIGIxMiA9IHogKiB5ICogdCArIHggKiBzO1xuICBiMjAgPSB4ICogeiAqIHQgKyB5ICogcztcbiAgYjIxID0geSAqIHogKiB0IC0geCAqIHM7XG4gIGIyMiA9IHogKiB6ICogdCArIGM7IC8vIFBlcmZvcm0gcm90YXRpb24tc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYTAwICogYjAwICsgYTEwICogYjAxICsgYTIwICogYjAyO1xuICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XG4gIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcbiAgb3V0WzNdID0gYTAzICogYjAwICsgYTEzICogYjAxICsgYTIzICogYjAyO1xuICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XG4gIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcbiAgb3V0WzZdID0gYTAyICogYjEwICsgYTEyICogYjExICsgYTIyICogYjEyO1xuICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XG4gIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcbiAgb3V0WzldID0gYTAxICogYjIwICsgYTExICogYjIxICsgYTIxICogYjIyO1xuICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xuICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xuICAgIG91dFsxMl0gPSBhWzEyXTtcbiAgICBvdXRbMTNdID0gYVsxM107XG4gICAgb3V0WzE0XSA9IGFbMTRdO1xuICAgIG91dFsxNV0gPSBhWzE1XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMTAgPSBhWzRdO1xuICB2YXIgYTExID0gYVs1XTtcbiAgdmFyIGExMiA9IGFbNl07XG4gIHZhciBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgb3V0WzNdID0gYVszXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XG4gIG91dFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xuICBvdXRbNl0gPSBhMTIgKiBjICsgYTIyICogcztcbiAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEyMCAqIGMgLSBhMTAgKiBzO1xuICBvdXRbOV0gPSBhMjEgKiBjIC0gYTExICogcztcbiAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xuICBvdXRbMTFdID0gYTIzICogYyAtIGExMyAqIHM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMDAgPSBhWzBdO1xuICB2YXIgYTAxID0gYVsxXTtcbiAgdmFyIGEwMiA9IGFbMl07XG4gIHZhciBhMDMgPSBhWzNdO1xuICB2YXIgYTIwID0gYVs4XTtcbiAgdmFyIGEyMSA9IGFbOV07XG4gIHZhciBhMjIgPSBhWzEwXTtcbiAgdmFyIGEyMyA9IGFbMTFdO1xuXG4gIGlmIChhICE9PSBvdXQpIHtcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXG4gICAgb3V0WzRdID0gYVs0XTtcbiAgICBvdXRbNV0gPSBhWzVdO1xuICAgIG91dFs2XSA9IGFbNl07XG4gICAgb3V0WzddID0gYVs3XTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzBdID0gYTAwICogYyAtIGEyMCAqIHM7XG4gIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xuICBvdXRbMl0gPSBhMDIgKiBjIC0gYTIyICogcztcbiAgb3V0WzNdID0gYTAzICogYyAtIGEyMyAqIHM7XG4gIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xuICBvdXRbOV0gPSBhMDEgKiBzICsgYTIxICogYztcbiAgb3V0WzEwXSA9IGEwMiAqIHMgKyBhMjIgKiBjO1xuICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XG4gIHZhciBhMDAgPSBhWzBdO1xuICB2YXIgYTAxID0gYVsxXTtcbiAgdmFyIGEwMiA9IGFbMl07XG4gIHZhciBhMDMgPSBhWzNdO1xuICB2YXIgYTEwID0gYVs0XTtcbiAgdmFyIGExMSA9IGFbNV07XG4gIHZhciBhMTIgPSBhWzZdO1xuICB2YXIgYTEzID0gYVs3XTtcblxuICBpZiAoYSAhPT0gb3V0KSB7XG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgbGFzdCByb3dcbiAgICBvdXRbOF0gPSBhWzhdO1xuICAgIG91dFs5XSA9IGFbOV07XG4gICAgb3V0WzEwXSA9IGFbMTBdO1xuICAgIG91dFsxMV0gPSBhWzExXTtcbiAgICBvdXRbMTJdID0gYVsxMl07XG4gICAgb3V0WzEzXSA9IGFbMTNdO1xuICAgIG91dFsxNF0gPSBhWzE0XTtcbiAgICBvdXRbMTVdID0gYVsxNV07XG4gIH0gLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG5cbiAgb3V0WzBdID0gYTAwICogYyArIGExMCAqIHM7XG4gIG91dFsxXSA9IGEwMSAqIGMgKyBhMTEgKiBzO1xuICBvdXRbMl0gPSBhMDIgKiBjICsgYTEyICogcztcbiAgb3V0WzNdID0gYTAzICogYyArIGExMyAqIHM7XG4gIG91dFs0XSA9IGExMCAqIGMgLSBhMDAgKiBzO1xuICBvdXRbNV0gPSBhMTEgKiBjIC0gYTAxICogcztcbiAgb3V0WzZdID0gYTEyICogYyAtIGEwMiAqIHM7XG4gIG91dFs3XSA9IGExMyAqIGMgLSBhMDMgKiBzO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAxO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IHZbMV07XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSB2WzJdO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGUgYXJvdW5kIGEgZ2l2ZW4gYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZShkZXN0LCBkZXN0LCByYWQsIGF4aXMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCwgYXhpcykge1xuICB2YXIgeCA9IGF4aXNbMF0sXG4gICAgICB5ID0gYXhpc1sxXSxcbiAgICAgIHogPSBheGlzWzJdO1xuICB2YXIgbGVuID0gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbiAgdmFyIHMsIGMsIHQ7XG5cbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGxlbiA9IDEgLyBsZW47XG4gIHggKj0gbGVuO1xuICB5ICo9IGxlbjtcbiAgeiAqPSBsZW47XG4gIHMgPSBNYXRoLnNpbihyYWQpO1xuICBjID0gTWF0aC5jb3MocmFkKTtcbiAgdCA9IDEgLSBjOyAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IHggKiB4ICogdCArIGM7XG4gIG91dFsxXSA9IHkgKiB4ICogdCArIHogKiBzO1xuICBvdXRbMl0gPSB6ICogeCAqIHQgLSB5ICogcztcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geCAqIHkgKiB0IC0geiAqIHM7XG4gIG91dFs1XSA9IHkgKiB5ICogdCArIGM7XG4gIG91dFs2XSA9IHogKiB5ICogdCArIHggKiBzO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4ICogeiAqIHQgKyB5ICogcztcbiAgb3V0WzldID0geSAqIHogKiB0IC0geCAqIHM7XG4gIG91dFsxMF0gPSB6ICogeiAqIHQgKyBjO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZVgoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVhSb3RhdGlvbihvdXQsIHJhZCkge1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTsgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxuXG4gIG91dFswXSA9IDE7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IHM7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IC1zO1xuICBvdXRbMTBdID0gYztcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGVZKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21ZUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7IC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cblxuICBvdXRbMF0gPSBjO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAtcztcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gMTtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gcztcbiAgb3V0WzldID0gMDtcbiAgb3V0WzEwXSA9IGM7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gMDtcbiAgb3V0WzEzXSA9IDA7XG4gIG91dFsxNF0gPSAwO1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQucm90YXRlWihkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tWlJvdGF0aW9uKG91dCwgcmFkKSB7XG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpOyAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXG5cbiAgb3V0WzBdID0gYztcbiAgb3V0WzFdID0gcztcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gLXM7XG4gIG91dFs1XSA9IGM7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMF0gPSAxO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTRdID0gMDtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XHJcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgcSwgdikge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB4eSA9IHggKiB5MjtcbiAgdmFyIHh6ID0geCAqIHoyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB5eiA9IHkgKiB6MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0gKHl5ICsgenopO1xuICBvdXRbMV0gPSB4eSArIHd6O1xuICBvdXRbMl0gPSB4eiAtIHd5O1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSB4eSAtIHd6O1xuICBvdXRbNV0gPSAxIC0gKHh4ICsgenopO1xuICBvdXRbNl0gPSB5eiArIHd4O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSB4eiArIHd5O1xuICBvdXRbOV0gPSB5eiAtIHd4O1xuICBvdXRbMTBdID0gMSAtICh4eCArIHl5KTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBmcm9tIGEgZHVhbCBxdWF0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBNYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7bWF0NH0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0MihvdXQsIGEpIHtcbiAgdmFyIHRyYW5zbGF0aW9uID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG4gIHZhciBieCA9IC1hWzBdLFxuICAgICAgYnkgPSAtYVsxXSxcbiAgICAgIGJ6ID0gLWFbMl0sXG4gICAgICBidyA9IGFbM10sXG4gICAgICBheCA9IGFbNF0sXG4gICAgICBheSA9IGFbNV0sXG4gICAgICBheiA9IGFbNl0sXG4gICAgICBhdyA9IGFbN107XG4gIHZhciBtYWduaXR1ZGUgPSBieCAqIGJ4ICsgYnkgKiBieSArIGJ6ICogYnogKyBidyAqIGJ3OyAvL09ubHkgc2NhbGUgaWYgaXQgbWFrZXMgc2Vuc2VcblxuICBpZiAobWFnbml0dWRlID4gMCkge1xuICAgIHRyYW5zbGF0aW9uWzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMiAvIG1hZ25pdHVkZTtcbiAgICB0cmFuc2xhdGlvblsxXSA9IChheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6KSAqIDIgLyBtYWduaXR1ZGU7XG4gICAgdHJhbnNsYXRpb25bMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyIC8gbWFnbml0dWRlO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zbGF0aW9uWzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMjtcbiAgICB0cmFuc2xhdGlvblsxXSA9IChheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6KSAqIDI7XG4gICAgdHJhbnNsYXRpb25bMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyO1xuICB9XG5cbiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBhLCB0cmFuc2xhdGlvbik7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXHJcbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sXHJcbiAqICB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cclxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHRyYW5zbGF0aW9uIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKG91dCwgbWF0KSB7XG4gIG91dFswXSA9IG1hdFsxMl07XG4gIG91dFsxXSA9IG1hdFsxM107XG4gIG91dFsyXSA9IG1hdFsxNF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cclxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlXHJcbiAqICB3aXRoIGEgbm9ybWFsaXplZCBRdWF0ZXJuaW9uIHBhcmFtdGVyLCB0aGUgcmV0dXJuZWQgdmVjdG9yIHdpbGwgYmVcclxuICogIHRoZSBzYW1lIGFzIHRoZSBzY2FsaW5nIHZlY3RvclxyXG4gKiAgb3JpZ2luYWxseSBzdXBwbGllZC5cclxuICogQHBhcmFtICB7dmVjM30gb3V0IFZlY3RvciB0byByZWNlaXZlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0gIHtSZWFkb25seU1hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxpbmcob3V0LCBtYXQpIHtcbiAgdmFyIG0xMSA9IG1hdFswXTtcbiAgdmFyIG0xMiA9IG1hdFsxXTtcbiAgdmFyIG0xMyA9IG1hdFsyXTtcbiAgdmFyIG0yMSA9IG1hdFs0XTtcbiAgdmFyIG0yMiA9IG1hdFs1XTtcbiAgdmFyIG0yMyA9IG1hdFs2XTtcbiAgdmFyIG0zMSA9IG1hdFs4XTtcbiAgdmFyIG0zMiA9IG1hdFs5XTtcbiAgdmFyIG0zMyA9IG1hdFsxMF07XG4gIG91dFswXSA9IE1hdGguaHlwb3QobTExLCBtMTIsIG0xMyk7XG4gIG91dFsxXSA9IE1hdGguaHlwb3QobTIxLCBtMjIsIG0yMyk7XG4gIG91dFsyXSA9IE1hdGguaHlwb3QobTMxLCBtMzIsIG0zMyk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbmFsIGNvbXBvbmVudFxyXG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcclxuICogIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLCB0aGUgcmV0dXJuZWQgcXVhdGVybmlvbiB3aWxsIGJlIHRoZVxyXG4gKiAgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBvcmlnaW5hbGx5IHN1cHBsaWVkLlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcclxuICogQHJldHVybiB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcbiAgdmFyIHNjYWxpbmcgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcbiAgZ2V0U2NhbGluZyhzY2FsaW5nLCBtYXQpO1xuICB2YXIgaXMxID0gMSAvIHNjYWxpbmdbMF07XG4gIHZhciBpczIgPSAxIC8gc2NhbGluZ1sxXTtcbiAgdmFyIGlzMyA9IDEgLyBzY2FsaW5nWzJdO1xuICB2YXIgc20xMSA9IG1hdFswXSAqIGlzMTtcbiAgdmFyIHNtMTIgPSBtYXRbMV0gKiBpczI7XG4gIHZhciBzbTEzID0gbWF0WzJdICogaXMzO1xuICB2YXIgc20yMSA9IG1hdFs0XSAqIGlzMTtcbiAgdmFyIHNtMjIgPSBtYXRbNV0gKiBpczI7XG4gIHZhciBzbTIzID0gbWF0WzZdICogaXMzO1xuICB2YXIgc20zMSA9IG1hdFs4XSAqIGlzMTtcbiAgdmFyIHNtMzIgPSBtYXRbOV0gKiBpczI7XG4gIHZhciBzbTMzID0gbWF0WzEwXSAqIGlzMztcbiAgdmFyIHRyYWNlID0gc20xMSArIHNtMjIgKyBzbTMzO1xuICB2YXIgUyA9IDA7XG5cbiAgaWYgKHRyYWNlID4gMCkge1xuICAgIFMgPSBNYXRoLnNxcnQodHJhY2UgKyAxLjApICogMjtcbiAgICBvdXRbM10gPSAwLjI1ICogUztcbiAgICBvdXRbMF0gPSAoc20yMyAtIHNtMzIpIC8gUztcbiAgICBvdXRbMV0gPSAoc20zMSAtIHNtMTMpIC8gUztcbiAgICBvdXRbMl0gPSAoc20xMiAtIHNtMjEpIC8gUztcbiAgfSBlbHNlIGlmIChzbTExID4gc20yMiAmJiBzbTExID4gc20zMykge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20xMSAtIHNtMjIgLSBzbTMzKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMjMgLSBzbTMyKSAvIFM7XG4gICAgb3V0WzBdID0gMC4yNSAqIFM7XG4gICAgb3V0WzFdID0gKHNtMTIgKyBzbTIxKSAvIFM7XG4gICAgb3V0WzJdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gIH0gZWxzZSBpZiAoc20yMiA+IHNtMzMpIHtcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIHNtMjIgLSBzbTExIC0gc20zMykgKiAyO1xuICAgIG91dFszXSA9IChzbTMxIC0gc20xMykgLyBTO1xuICAgIG91dFswXSA9IChzbTEyICsgc20yMSkgLyBTO1xuICAgIG91dFsxXSA9IDAuMjUgKiBTO1xuICAgIG91dFsyXSA9IChzbTIzICsgc20zMikgLyBTO1xuICB9IGVsc2Uge1xuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgc20zMyAtIHNtMTEgLSBzbTIyKSAqIDI7XG4gICAgb3V0WzNdID0gKHNtMTIgLSBzbTIxKSAvIFM7XG4gICAgb3V0WzBdID0gKHNtMzEgKyBzbTEzKSAvIFM7XG4gICAgb3V0WzFdID0gKHNtMjMgKyBzbTMyKSAvIFM7XG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XHJcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBzIFNjYWxpbmcgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xuICAvLyBRdWF0ZXJuaW9uIG1hdGhcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB4eSA9IHggKiB5MjtcbiAgdmFyIHh6ID0geCAqIHoyO1xuICB2YXIgeXkgPSB5ICogeTI7XG4gIHZhciB5eiA9IHkgKiB6MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICB2YXIgc3ggPSBzWzBdO1xuICB2YXIgc3kgPSBzWzFdO1xuICB2YXIgc3ogPSBzWzJdO1xuICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcbiAgb3V0WzFdID0gKHh5ICsgd3opICogc3g7XG4gIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAoeHkgLSB3eikgKiBzeTtcbiAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcbiAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XG4gIG91dFsxMF0gPSAoMSAtICh4eCArIHl5KSkgKiBzejtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSB2WzBdO1xuICBvdXRbMTNdID0gdlsxXTtcbiAgb3V0WzE0XSA9IHZbMl07XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24sIHZlY3RvciB0cmFuc2xhdGlvbiBhbmQgdmVjdG9yIHNjYWxlLCByb3RhdGluZyBhbmQgc2NhbGluZyBhcm91bmQgdGhlIGdpdmVuIG9yaWdpblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgb3JpZ2luKTtcclxuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcclxuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcclxuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgbmVnYXRpdmVPcmlnaW4pO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IG8gVGhlIG9yaWdpbiB2ZWN0b3IgYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVPcmlnaW4ob3V0LCBxLCB2LCBzLCBvKSB7XG4gIC8vIFF1YXRlcm5pb24gbWF0aFxuICB2YXIgeCA9IHFbMF0sXG4gICAgICB5ID0gcVsxXSxcbiAgICAgIHogPSBxWzJdLFxuICAgICAgdyA9IHFbM107XG4gIHZhciB4MiA9IHggKyB4O1xuICB2YXIgeTIgPSB5ICsgeTtcbiAgdmFyIHoyID0geiArIHo7XG4gIHZhciB4eCA9IHggKiB4MjtcbiAgdmFyIHh5ID0geCAqIHkyO1xuICB2YXIgeHogPSB4ICogejI7XG4gIHZhciB5eSA9IHkgKiB5MjtcbiAgdmFyIHl6ID0geSAqIHoyO1xuICB2YXIgenogPSB6ICogejI7XG4gIHZhciB3eCA9IHcgKiB4MjtcbiAgdmFyIHd5ID0gdyAqIHkyO1xuICB2YXIgd3ogPSB3ICogejI7XG4gIHZhciBzeCA9IHNbMF07XG4gIHZhciBzeSA9IHNbMV07XG4gIHZhciBzeiA9IHNbMl07XG4gIHZhciBveCA9IG9bMF07XG4gIHZhciBveSA9IG9bMV07XG4gIHZhciBveiA9IG9bMl07XG4gIHZhciBvdXQwID0gKDEgLSAoeXkgKyB6eikpICogc3g7XG4gIHZhciBvdXQxID0gKHh5ICsgd3opICogc3g7XG4gIHZhciBvdXQyID0gKHh6IC0gd3kpICogc3g7XG4gIHZhciBvdXQ0ID0gKHh5IC0gd3opICogc3k7XG4gIHZhciBvdXQ1ID0gKDEgLSAoeHggKyB6eikpICogc3k7XG4gIHZhciBvdXQ2ID0gKHl6ICsgd3gpICogc3k7XG4gIHZhciBvdXQ4ID0gKHh6ICsgd3kpICogc3o7XG4gIHZhciBvdXQ5ID0gKHl6IC0gd3gpICogc3o7XG4gIHZhciBvdXQxMCA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xuICBvdXRbMF0gPSBvdXQwO1xuICBvdXRbMV0gPSBvdXQxO1xuICBvdXRbMl0gPSBvdXQyO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSBvdXQ0O1xuICBvdXRbNV0gPSBvdXQ1O1xuICBvdXRbNl0gPSBvdXQ2O1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSBvdXQ4O1xuICBvdXRbOV0gPSBvdXQ5O1xuICBvdXRbMTBdID0gb3V0MTA7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gdlswXSArIG94IC0gKG91dDAgKiBveCArIG91dDQgKiBveSArIG91dDggKiBveik7XG4gIG91dFsxM10gPSB2WzFdICsgb3kgLSAob3V0MSAqIG94ICsgb3V0NSAqIG95ICsgb3V0OSAqIG96KTtcbiAgb3V0WzE0XSA9IHZbMl0gKyBveiAtIChvdXQyICogb3ggKyBvdXQ2ICogb3kgKyBvdXQxMCAqIG96KTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzJdID0genggLSB3eTtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0geXggLSB3ejtcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XG4gIG91dFs2XSA9IHp5ICsgd3g7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHp4ICsgd3k7XG4gIG91dFs5XSA9IHp5IC0gd3g7XG4gIG91dFsxMF0gPSAxIC0geHggLSB5eTtcbiAgb3V0WzExXSA9IDA7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IDA7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIGZydXN0dW0gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZydXN0dW0ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xuICB2YXIgcmwgPSAxIC8gKHJpZ2h0IC0gbGVmdCk7XG4gIHZhciB0YiA9IDEgLyAodG9wIC0gYm90dG9tKTtcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgb3V0WzBdID0gbmVhciAqIDIgKiBybDtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMDtcbiAgb3V0WzVdID0gbmVhciAqIDIgKiB0YjtcbiAgb3V0WzZdID0gMDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gKHJpZ2h0ICsgbGVmdCkgKiBybDtcbiAgb3V0WzldID0gKHRvcCArIGJvdHRvbSkgKiB0YjtcbiAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xuICBvdXRbMTFdID0gLTE7XG4gIG91dFsxMl0gPSAwO1xuICBvdXRbMTNdID0gMDtcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgKiAyICogbmY7XG4gIG91dFsxNV0gPSAwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cclxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZShvdXQsIGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XG4gIHZhciBmID0gMS4wIC8gTWF0aC50YW4oZm92eSAvIDIpLFxuICAgICAgbmY7XG4gIG91dFswXSA9IGYgLyBhc3BlY3Q7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IDA7XG4gIG91dFs1XSA9IGY7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDA7XG4gIG91dFs5XSA9IDA7XG4gIG91dFsxMV0gPSAtMTtcbiAgb3V0WzEyXSA9IDA7XG4gIG91dFsxM10gPSAwO1xuICBvdXRbMTVdID0gMDtcblxuICBpZiAoZmFyICE9IG51bGwgJiYgZmFyICE9PSBJbmZpbml0eSkge1xuICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcbiAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XG4gICAgb3V0WzE0XSA9IDIgKiBmYXIgKiBuZWFyICogbmY7XG4gIH0gZWxzZSB7XG4gICAgb3V0WzEwXSA9IC0xO1xuICAgIG91dFsxNF0gPSAtMiAqIG5lYXI7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXHJcbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWZ1bCBmb3IgZ2VuZXJhdGluZyBwcm9qZWN0aW9uIG1hdHJpY2VzIHRvIGJlIHVzZWRcclxuICogd2l0aCB0aGUgc3RpbGwgZXhwZXJpZW1lbnRhbCBXZWJWUiBBUEkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtPYmplY3R9IGZvdiBPYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHZhbHVlczogdXBEZWdyZWVzLCBkb3duRGVncmVlcywgbGVmdERlZ3JlZXMsIHJpZ2h0RGVncmVlc1xyXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7XG4gIHZhciB1cFRhbiA9IE1hdGgudGFuKGZvdi51cERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xuICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcbiAgdmFyIHJpZ2h0VGFuID0gTWF0aC50YW4oZm92LnJpZ2h0RGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XG4gIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcbiAgdmFyIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xuICBvdXRbMF0gPSB4U2NhbGU7XG4gIG91dFsxXSA9IDAuMDtcbiAgb3V0WzJdID0gMC4wO1xuICBvdXRbM10gPSAwLjA7XG4gIG91dFs0XSA9IDAuMDtcbiAgb3V0WzVdID0geVNjYWxlO1xuICBvdXRbNl0gPSAwLjA7XG4gIG91dFs3XSA9IDAuMDtcbiAgb3V0WzhdID0gLSgobGVmdFRhbiAtIHJpZ2h0VGFuKSAqIHhTY2FsZSAqIDAuNSk7XG4gIG91dFs5XSA9ICh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41O1xuICBvdXRbMTBdID0gZmFyIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMTFdID0gLTEuMDtcbiAgb3V0WzEyXSA9IDAuMDtcbiAgb3V0WzEzXSA9IDAuMDtcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7XG4gIG91dFsxNV0gPSAwLjA7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XG4gIHZhciBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcbiAgdmFyIGJ0ID0gMSAvIChib3R0b20gLSB0b3ApO1xuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xuICBvdXRbMF0gPSAtMiAqIGxyO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAwO1xuICBvdXRbNV0gPSAtMiAqIGJ0O1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAwO1xuICBvdXRbOV0gPSAwO1xuICBvdXRbMTBdID0gMiAqIG5mO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XG4gIG91dFsxM10gPSAodG9wICsgYm90dG9tKSAqIGJ0O1xuICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XG4gIG91dFsxNV0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzLlxyXG4gKiBJZiB5b3Ugd2FudCBhIG1hdHJpeCB0aGF0IGFjdHVhbGx5IG1ha2VzIGFuIG9iamVjdCBsb29rIGF0IGFub3RoZXIgb2JqZWN0LCB5b3Ugc2hvdWxkIHVzZSB0YXJnZXRUbyBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbG9va0F0KG91dCwgZXllLCBjZW50ZXIsIHVwKSB7XG4gIHZhciB4MCwgeDEsIHgyLCB5MCwgeTEsIHkyLCB6MCwgejEsIHoyLCBsZW47XG4gIHZhciBleWV4ID0gZXllWzBdO1xuICB2YXIgZXlleSA9IGV5ZVsxXTtcbiAgdmFyIGV5ZXogPSBleWVbMl07XG4gIHZhciB1cHggPSB1cFswXTtcbiAgdmFyIHVweSA9IHVwWzFdO1xuICB2YXIgdXB6ID0gdXBbMl07XG4gIHZhciBjZW50ZXJ4ID0gY2VudGVyWzBdO1xuICB2YXIgY2VudGVyeSA9IGNlbnRlclsxXTtcbiAgdmFyIGNlbnRlcnogPSBjZW50ZXJbMl07XG5cbiAgaWYgKE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IGdsTWF0cml4LkVQU0lMT04gJiYgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJiBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5KG91dCk7XG4gIH1cblxuICB6MCA9IGV5ZXggLSBjZW50ZXJ4O1xuICB6MSA9IGV5ZXkgLSBjZW50ZXJ5O1xuICB6MiA9IGV5ZXogLSBjZW50ZXJ6O1xuICBsZW4gPSAxIC8gTWF0aC5oeXBvdCh6MCwgejEsIHoyKTtcbiAgejAgKj0gbGVuO1xuICB6MSAqPSBsZW47XG4gIHoyICo9IGxlbjtcbiAgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxO1xuICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XG4gIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgbGVuID0gTWF0aC5oeXBvdCh4MCwgeDEsIHgyKTtcblxuICBpZiAoIWxlbikge1xuICAgIHgwID0gMDtcbiAgICB4MSA9IDA7XG4gICAgeDIgPSAwO1xuICB9IGVsc2Uge1xuICAgIGxlbiA9IDEgLyBsZW47XG4gICAgeDAgKj0gbGVuO1xuICAgIHgxICo9IGxlbjtcbiAgICB4MiAqPSBsZW47XG4gIH1cblxuICB5MCA9IHoxICogeDIgLSB6MiAqIHgxO1xuICB5MSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICB5MiA9IHowICogeDEgLSB6MSAqIHgwO1xuICBsZW4gPSBNYXRoLmh5cG90KHkwLCB5MSwgeTIpO1xuXG4gIGlmICghbGVuKSB7XG4gICAgeTAgPSAwO1xuICAgIHkxID0gMDtcbiAgICB5MiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbGVuID0gMSAvIGxlbjtcbiAgICB5MCAqPSBsZW47XG4gICAgeTEgKj0gbGVuO1xuICAgIHkyICo9IGxlbjtcbiAgfVxuXG4gIG91dFswXSA9IHgwO1xuICBvdXRbMV0gPSB5MDtcbiAgb3V0WzJdID0gejA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHgxO1xuICBvdXRbNV0gPSB5MTtcbiAgb3V0WzZdID0gejE7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IHgyO1xuICBvdXRbOV0gPSB5MjtcbiAgb3V0WzEwXSA9IHoyO1xuICBvdXRbMTFdID0gMDtcbiAgb3V0WzEyXSA9IC0oeDAgKiBleWV4ICsgeDEgKiBleWV5ICsgeDIgKiBleWV6KTtcbiAgb3V0WzEzXSA9IC0oeTAgKiBleWV4ICsgeTEgKiBleWV5ICsgeTIgKiBleWV6KTtcbiAgb3V0WzE0XSA9IC0oejAgKiBleWV4ICsgejEgKiBleWV5ICsgejIgKiBleWV6KTtcbiAgb3V0WzE1XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xuICB2YXIgZXlleCA9IGV5ZVswXSxcbiAgICAgIGV5ZXkgPSBleWVbMV0sXG4gICAgICBleWV6ID0gZXllWzJdLFxuICAgICAgdXB4ID0gdXBbMF0sXG4gICAgICB1cHkgPSB1cFsxXSxcbiAgICAgIHVweiA9IHVwWzJdO1xuICB2YXIgejAgPSBleWV4IC0gdGFyZ2V0WzBdLFxuICAgICAgejEgPSBleWV5IC0gdGFyZ2V0WzFdLFxuICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xuICB2YXIgbGVuID0gejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyO1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIHowICo9IGxlbjtcbiAgICB6MSAqPSBsZW47XG4gICAgejIgKj0gbGVuO1xuICB9XG5cbiAgdmFyIHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcbiAgICAgIHgxID0gdXB6ICogejAgLSB1cHggKiB6MixcbiAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcbiAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICAgIHgwICo9IGxlbjtcbiAgICB4MSAqPSBsZW47XG4gICAgeDIgKj0gbGVuO1xuICB9XG5cbiAgb3V0WzBdID0geDA7XG4gIG91dFsxXSA9IHgxO1xuICBvdXRbMl0gPSB4MjtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gejEgKiB4MiAtIHoyICogeDE7XG4gIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xuICBvdXRbNl0gPSB6MCAqIHgxIC0gejEgKiB4MDtcbiAgb3V0WzddID0gMDtcbiAgb3V0WzhdID0gejA7XG4gIG91dFs5XSA9IHoxO1xuICBvdXRbMTBdID0gejI7XG4gIG91dFsxMV0gPSAwO1xuICBvdXRbMTJdID0gZXlleDtcbiAgb3V0WzEzXSA9IGV5ZXk7XG4gIG91dFsxNF0gPSBleWV6O1xuICBvdXRbMTVdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0NChcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIsIFwiICsgYVs4XSArIFwiLCBcIiArIGFbOV0gKyBcIiwgXCIgKyBhWzEwXSArIFwiLCBcIiArIGFbMTFdICsgXCIsIFwiICsgYVsxMl0gKyBcIiwgXCIgKyBhWzEzXSArIFwiLCBcIiArIGFbMTRdICsgXCIsIFwiICsgYVsxNV0gKyBcIilcIjtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xuICByZXR1cm4gTWF0aC5oeXBvdChhWzBdLCBhWzFdLCBhWzJdLCBhWzNdLCBhWzRdLCBhWzVdLCBhWzZdLCBhWzddLCBhWzhdLCBhWzldLCBhWzEwXSwgYVsxMV0sIGFbMTJdLCBhWzEzXSwgYVsxNF0sIGFbMTVdKTtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQ0J3NcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xuICBvdXRbN10gPSBhWzddICsgYls3XTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XG4gIG91dFs2XSA9IGFbNl0gLSBiWzZdO1xuICBvdXRbN10gPSBhWzddIC0gYls3XTtcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XG4gIG91dFs5XSA9IGFbOV0gLSBiWzldO1xuICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcbiAgb3V0WzExXSA9IGFbMTFdIC0gYlsxMV07XG4gIG91dFsxMl0gPSBhWzEyXSAtIGJbMTJdO1xuICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcbiAgb3V0WzE0XSA9IGFbMTRdIC0gYlsxNF07XG4gIG91dFsxNV0gPSBhWzE1XSAtIGJbMTVdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgb3V0WzRdID0gYVs0XSAqIGI7XG4gIG91dFs1XSA9IGFbNV0gKiBiO1xuICBvdXRbNl0gPSBhWzZdICogYjtcbiAgb3V0WzddID0gYVs3XSAqIGI7XG4gIG91dFs4XSA9IGFbOF0gKiBiO1xuICBvdXRbOV0gPSBhWzldICogYjtcbiAgb3V0WzEwXSA9IGFbMTBdICogYjtcbiAgb3V0WzExXSA9IGFbMTFdICogYjtcbiAgb3V0WzEyXSA9IGFbMTJdICogYjtcbiAgb3V0WzEzXSA9IGFbMTNdICogYjtcbiAgb3V0WzE0XSA9IGFbMTRdICogYjtcbiAgb3V0WzE1XSA9IGFbMTVdICogYjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQ0J3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdICogc2NhbGU7XG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdICogc2NhbGU7XG4gIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdICogc2NhbGU7XG4gIG91dFs5XSA9IGFbOV0gKyBiWzldICogc2NhbGU7XG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdICogc2NhbGU7XG4gIG91dFsxMV0gPSBhWzExXSArIGJbMTFdICogc2NhbGU7XG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdICogc2NhbGU7XG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdICogc2NhbGU7XG4gIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdICogc2NhbGU7XG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdICogc2NhbGU7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdICYmIGFbOV0gPT09IGJbOV0gJiYgYVsxMF0gPT09IGJbMTBdICYmIGFbMTFdID09PSBiWzExXSAmJiBhWzEyXSA9PT0gYlsxMl0gJiYgYVsxM10gPT09IGJbMTNdICYmIGFbMTRdID09PSBiWzE0XSAmJiBhWzE1XSA9PT0gYlsxNV07XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM107XG4gIHZhciBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN107XG4gIHZhciBhOCA9IGFbOF0sXG4gICAgICBhOSA9IGFbOV0sXG4gICAgICBhMTAgPSBhWzEwXSxcbiAgICAgIGExMSA9IGFbMTFdO1xuICB2YXIgYTEyID0gYVsxMl0sXG4gICAgICBhMTMgPSBhWzEzXSxcbiAgICAgIGExNCA9IGFbMTRdLFxuICAgICAgYTE1ID0gYVsxNV07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM107XG4gIHZhciBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN107XG4gIHZhciBiOCA9IGJbOF0sXG4gICAgICBiOSA9IGJbOV0sXG4gICAgICBiMTAgPSBiWzEwXSxcbiAgICAgIGIxMSA9IGJbMTFdO1xuICB2YXIgYjEyID0gYlsxMl0sXG4gICAgICBiMTMgPSBiWzEzXSxcbiAgICAgIGIxNCA9IGJbMTRdLFxuICAgICAgYjE1ID0gYlsxNV07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKSAmJiBNYXRoLmFicyhhOSAtIGI5KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOSksIE1hdGguYWJzKGI5KSkgJiYgTWF0aC5hYnMoYTEwIC0gYjEwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTApLCBNYXRoLmFicyhiMTApKSAmJiBNYXRoLmFicyhhMTEgLSBiMTEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMSksIE1hdGguYWJzKGIxMSkpICYmIE1hdGguYWJzKGExMiAtIGIxMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEyKSwgTWF0aC5hYnMoYjEyKSkgJiYgTWF0aC5hYnMoYTEzIC0gYjEzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTMpLCBNYXRoLmFicyhiMTMpKSAmJiBNYXRoLmFicyhhMTQgLSBiMTQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNCksIE1hdGguYWJzKGIxNCkpICYmIE1hdGguYWJzKGExNSAtIGIxNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE1KSwgTWF0aC5hYnMoYjE1KSk7XG59XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0LnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcclxuICogMyBEaW1lbnNpb25hbCBWZWN0b3JcclxuICogQG1vZHVsZSB2ZWMzXHJcbiAqL1xuXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjM1xyXG4gKlxyXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XG5cbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XG4gICAgb3V0WzBdID0gMDtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2xvbmVcclxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICByZXR1cm4gTWF0aC5oeXBvdCh4LCB5LCB6KTtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHopIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMzIHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFN1YnRyYWN0cyB2ZWN0b3IgYiBmcm9tIHZlY3RvciBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xuICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogRGl2aWRlcyB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGguY2VpbCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGguY2VpbChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGZsb29yXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbWF4KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XG4gIG91dFsyXSA9IE1hdGgubWF4KGFbMl0sIGJbMl0pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byByb3VuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XG4gIG91dFsxXSA9IE1hdGgucm91bmQoYVsxXSk7XG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2NhbGVzIGEgdmVjMyBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IGFbMF0gKiBiO1xuICBvdXRbMV0gPSBhWzFdICogYjtcbiAgb3V0WzJdID0gYVsyXSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gdmVjMydzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF07XG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHopO1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogejtcbn1cbi8qKlxyXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBOb3JtYWxpemUgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcbiAgdmFyIHggPSBhWzBdO1xuICB2YXIgeSA9IGFbMV07XG4gIHZhciB6ID0gYVsyXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcblxuICBpZiAobGVuID4gMCkge1xuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICB9XG5cbiAgb3V0WzBdID0gYVswXSAqIGxlbjtcbiAgb3V0WzFdID0gYVsxXSAqIGxlbjtcbiAgb3V0WzJdID0gYVsyXSAqIGxlbjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl07XG4gIHZhciBieCA9IGJbMF0sXG4gICAgICBieSA9IGJbMV0sXG4gICAgICBieiA9IGJbMl07XG4gIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheiAqIGJ4IC0gYXggKiBiejtcbiAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XG4gIHZhciBheCA9IGFbMF07XG4gIHZhciBheSA9IGFbMV07XG4gIHZhciBheiA9IGFbMl07XG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBoZXJtaXRlIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXJtaXRlKG91dCwgYSwgYiwgYywgZCwgdCkge1xuICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQ7XG4gIHZhciBmYWN0b3IxID0gZmFjdG9yVGltZXMyICogKDIgKiB0IC0gMykgKyAxO1xuICB2YXIgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0O1xuICB2YXIgZmFjdG9yMyA9IGZhY3RvclRpbWVzMiAqICh0IC0gMSk7XG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogKDMgLSAyICogdCk7XG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBiZXppZXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJlemllcihvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgdmFyIGludmVyc2VGYWN0b3IgPSAxIC0gdDtcbiAgdmFyIGludmVyc2VGYWN0b3JUaW1lc1R3byA9IGludmVyc2VGYWN0b3IgKiBpbnZlcnNlRmFjdG9yO1xuICB2YXIgZmFjdG9yVGltZXMyID0gdCAqIHQ7XG4gIHZhciBmYWN0b3IxID0gaW52ZXJzZUZhY3RvclRpbWVzVHdvICogaW52ZXJzZUZhY3RvcjtcbiAgdmFyIGZhY3RvcjIgPSAzICogdCAqIGludmVyc2VGYWN0b3JUaW1lc1R3bztcbiAgdmFyIGZhY3RvcjMgPSAzICogZmFjdG9yVGltZXMyICogaW52ZXJzZUZhY3RvcjtcbiAgdmFyIGZhY3RvcjQgPSBmYWN0b3JUaW1lczIgKiB0O1xuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xuICBzY2FsZSA9IHNjYWxlIHx8IDEuMDtcbiAgdmFyIHIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XG4gIHZhciB6ID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgLSAxLjA7XG4gIHZhciB6U2NhbGUgPSBNYXRoLnNxcnQoMS4wIC0geiAqIHopICogc2NhbGU7XG4gIG91dFswXSA9IE1hdGguY29zKHIpICogelNjYWxlO1xuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHpTY2FsZTtcbiAgb3V0WzJdID0geiAqIHNjYWxlO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXHJcbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0NChvdXQsIGEsIG0pIHtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTtcbiAgdmFyIHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gIHcgPSB3IHx8IDEuMDtcbiAgb3V0WzBdID0gKG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdKSAvIHc7XG4gIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0My5cclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIG91dFswXSA9IHggKiBtWzBdICsgeSAqIG1bM10gKyB6ICogbVs2XTtcbiAgb3V0WzFdID0geCAqIG1bMV0gKyB5ICogbVs0XSArIHogKiBtWzddO1xuICBvdXRbMl0gPSB4ICogbVsyXSArIHkgKiBtWzVdICsgeiAqIG1bOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxyXG4gKiBDYW4gYWxzbyBiZSB1c2VkIGZvciBkdWFsIHF1YXRlcm5pb25zLiAoTXVsdGlwbHkgaXQgd2l0aCB0aGUgcmVhbCBwYXJ0KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICAvLyBiZW5jaG1hcmtzOiBodHRwczovL2pzcGVyZi5jb20vcXVhdGVybmlvbi10cmFuc2Zvcm0tdmVjMy1pbXBsZW1lbnRhdGlvbnMtZml4ZWRcbiAgdmFyIHF4ID0gcVswXSxcbiAgICAgIHF5ID0gcVsxXSxcbiAgICAgIHF6ID0gcVsyXSxcbiAgICAgIHF3ID0gcVszXTtcbiAgdmFyIHggPSBhWzBdLFxuICAgICAgeSA9IGFbMV0sXG4gICAgICB6ID0gYVsyXTsgLy8gdmFyIHF2ZWMgPSBbcXgsIHF5LCBxel07XG4gIC8vIHZhciB1diA9IHZlYzMuY3Jvc3MoW10sIHF2ZWMsIGEpO1xuXG4gIHZhciB1dnggPSBxeSAqIHogLSBxeiAqIHksXG4gICAgICB1dnkgPSBxeiAqIHggLSBxeCAqIHosXG4gICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7IC8vIHZhciB1dXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCB1dik7XG5cbiAgdmFyIHV1dnggPSBxeSAqIHV2eiAtIHF6ICogdXZ5LFxuICAgICAgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dnosXG4gICAgICB1dXZ6ID0gcXggKiB1dnkgLSBxeSAqIHV2eDsgLy8gdmVjMy5zY2FsZSh1diwgdXYsIDIgKiB3KTtcblxuICB2YXIgdzIgPSBxdyAqIDI7XG4gIHV2eCAqPSB3MjtcbiAgdXZ5ICo9IHcyO1xuICB1dnogKj0gdzI7IC8vIHZlYzMuc2NhbGUodXV2LCB1dXYsIDIpO1xuXG4gIHV1dnggKj0gMjtcbiAgdXV2eSAqPSAyO1xuICB1dXZ6ICo9IDI7IC8vIHJldHVybiB2ZWMzLmFkZChvdXQsIGEsIHZlYzMuYWRkKG91dCwgdXYsIHV1dikpO1xuXG4gIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xuICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcbiAgb3V0WzJdID0geiArIHV2eiArIHV1dno7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeC1heGlzXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMF07XG4gIHJbMV0gPSBwWzFdICogTWF0aC5jb3MocmFkKSAtIHBbMl0gKiBNYXRoLnNpbihyYWQpO1xuICByWzJdID0gcFsxXSAqIE1hdGguc2luKHJhZCkgKyBwWzJdICogTWF0aC5jb3MocmFkKTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeS1heGlzXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMl0gKiBNYXRoLnNpbihyYWQpICsgcFswXSAqIE1hdGguY29zKHJhZCk7XG4gIHJbMV0gPSBwWzFdO1xuICByWzJdID0gcFsyXSAqIE1hdGguY29zKHJhZCkgLSBwWzBdICogTWF0aC5zaW4ocmFkKTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBUaGUgYW5nbGUgb2Ygcm90YXRpb24gaW4gcmFkaWFuc1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIGIsIHJhZCkge1xuICB2YXIgcCA9IFtdLFxuICAgICAgciA9IFtdOyAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG5cbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xuICBwWzFdID0gYVsxXSAtIGJbMV07XG4gIHBbMl0gPSBhWzJdIC0gYlsyXTsgLy9wZXJmb3JtIHJvdGF0aW9uXG5cbiAgclswXSA9IHBbMF0gKiBNYXRoLmNvcyhyYWQpIC0gcFsxXSAqIE1hdGguc2luKHJhZCk7XG4gIHJbMV0gPSBwWzBdICogTWF0aC5zaW4ocmFkKSArIHBbMV0gKiBNYXRoLmNvcyhyYWQpO1xuICByWzJdID0gcFsyXTsgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAzRCB2ZWN0b3JzXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgYW5nbGUgaW4gcmFkaWFuc1xyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKGEsIGIpIHtcbiAgdmFyIGF4ID0gYVswXSxcbiAgICAgIGF5ID0gYVsxXSxcbiAgICAgIGF6ID0gYVsyXSxcbiAgICAgIGJ4ID0gYlswXSxcbiAgICAgIGJ5ID0gYlsxXSxcbiAgICAgIGJ6ID0gYlsyXSxcbiAgICAgIG1hZzEgPSBNYXRoLnNxcnQoYXggKiBheCArIGF5ICogYXkgKyBheiAqIGF6KSxcbiAgICAgIG1hZzIgPSBNYXRoLnNxcnQoYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6KSxcbiAgICAgIG1hZyA9IG1hZzEgKiBtYWcyLFxuICAgICAgY29zaW5lID0gbWFnICYmIGRvdChhLCBiKSAvIG1hZztcbiAgcmV0dXJuIE1hdGguYWNvcyhNYXRoLm1pbihNYXRoLm1heChjb3NpbmUsIC0xKSwgMSkpO1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gemVyb1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gemVybyhvdXQpIHtcbiAgb3V0WzBdID0gMC4wO1xuICBvdXRbMV0gPSAwLjA7XG4gIG91dFsyXSA9IDAuMDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xuICByZXR1cm4gXCJ2ZWMzKFwiICsgYVswXSArIFwiLCBcIiArIGFbMV0gKyBcIiwgXCIgKyBhWzJdICsgXCIpXCI7XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKTtcbn1cbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjM3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjMy4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWMzcyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICogQHJldHVybnMge0FycmF5fSBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gMztcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIHZlY1syXSA9IGFbaSArIDJdO1xuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICBhW2ldID0gdmVjWzBdO1xuICAgICAgYVtpICsgMV0gPSB2ZWNbMV07XG4gICAgICBhW2kgKyAyXSA9IHZlY1syXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfTtcbn0oKTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcbi8qKlxyXG4gKiA0IERpbWVuc2lvbmFsIFZlY3RvclxyXG4gKiBAbW9kdWxlIHZlYzRcclxuICovXG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICBvdXRbM10gPSAwO1xuICB9XG5cbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHosIHcpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xuICBvdXRbMF0gPSB4O1xuICBvdXRbMV0gPSB5O1xuICBvdXRbMl0gPSB6O1xuICBvdXRbM10gPSB3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWM0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6LCB3KSB7XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIG91dFszXSA9IHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xuICBvdXRbM10gPSBhWzNdICsgYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICogYlsyXTtcbiAgb3V0WzNdID0gYVszXSAqIGJbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogRGl2aWRlcyB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC8gYlszXTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjZWlsXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICBvdXRbM10gPSBNYXRoLmNlaWwoYVszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5mbG9vcihhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4ob3V0LCBhLCBiKSB7XG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5taW4oYVsyXSwgYlsyXSk7XG4gIG91dFszXSA9IE1hdGgubWluKGFbM10sIGJbM10pO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1heGltdW0gb2YgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XG4gIG91dFsxXSA9IE1hdGgubWF4KGFbMV0sIGJbMV0pO1xuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIHJvdW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3VuZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5yb3VuZChhWzJdKTtcbiAgb3V0WzNdID0gTWF0aC5yb3VuZChhWzNdKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTY2FsZXMgYSB2ZWM0IGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSAqIGI7XG4gIG91dFsxXSA9IGFbMV0gKiBiO1xuICBvdXRbMl0gPSBhWzJdICogYjtcbiAgb3V0WzNdID0gYVszXSAqIGI7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQWRkcyB0d28gdmVjNCdzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHZhciB4ID0gYlswXSAtIGFbMF07XG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XG4gIHZhciB3ID0gYlszXSAtIGFbM107XG4gIHJldHVybiBNYXRoLmh5cG90KHgsIHksIHosIHcpO1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xuICB2YXIgdyA9IGJbM10gLSBhWzNdO1xuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgcmV0dXJuIE1hdGguaHlwb3QoeCwgeSwgeiwgdyk7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xuICB2YXIgeCA9IGFbMF07XG4gIHZhciB5ID0gYVsxXTtcbiAgdmFyIHogPSBhWzJdO1xuICB2YXIgdyA9IGFbM107XG4gIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcbn1cbi8qKlxyXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IC1hWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHZlY3RvciB0byBpbnZlcnRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XG4gIG91dFswXSA9IDEuMCAvIGFbMF07XG4gIG91dFsxXSA9IDEuMCAvIGFbMV07XG4gIG91dFsyXSA9IDEuMCAvIGFbMl07XG4gIG91dFszXSA9IDEuMCAvIGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB2ZWN0b3IgdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXTtcbiAgdmFyIHkgPSBhWzFdO1xuICB2YXIgeiA9IGFbMl07XG4gIHZhciB3ID0gYVszXTtcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xuXG4gIGlmIChsZW4gPiAwKSB7XG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xuICB9XG5cbiAgb3V0WzBdID0geCAqIGxlbjtcbiAgb3V0WzFdID0geSAqIGxlbjtcbiAgb3V0WzJdID0geiAqIGxlbjtcbiAgb3V0WzNdID0gdyAqIGxlbjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXSArIGFbM10gKiBiWzNdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGNyb3NzLXByb2R1Y3Qgb2YgdGhyZWUgdmVjdG9ycyBpbiBhIDQtZGltZW5zaW9uYWwgc3BhY2VcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IHJlc3VsdCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gVSB0aGUgZmlyc3QgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBWIHRoZSBzZWNvbmQgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBXIHRoZSB0aGlyZCB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzR9IHJlc3VsdFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyb3NzKG91dCwgdSwgdiwgdykge1xuICB2YXIgQSA9IHZbMF0gKiB3WzFdIC0gdlsxXSAqIHdbMF0sXG4gICAgICBCID0gdlswXSAqIHdbMl0gLSB2WzJdICogd1swXSxcbiAgICAgIEMgPSB2WzBdICogd1szXSAtIHZbM10gKiB3WzBdLFxuICAgICAgRCA9IHZbMV0gKiB3WzJdIC0gdlsyXSAqIHdbMV0sXG4gICAgICBFID0gdlsxXSAqIHdbM10gLSB2WzNdICogd1sxXSxcbiAgICAgIEYgPSB2WzJdICogd1szXSAtIHZbM10gKiB3WzJdO1xuICB2YXIgRyA9IHVbMF07XG4gIHZhciBIID0gdVsxXTtcbiAgdmFyIEkgPSB1WzJdO1xuICB2YXIgSiA9IHVbM107XG4gIG91dFswXSA9IEggKiBGIC0gSSAqIEUgKyBKICogRDtcbiAgb3V0WzFdID0gLShHICogRikgKyBJICogQyAtIEogKiBCO1xuICBvdXRbMl0gPSBHICogRSAtIEggKiBDICsgSiAqIEE7XG4gIG91dFszXSA9IC0oRyAqIEQpICsgSCAqIEIgLSBJICogQTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgdmFyIGF4ID0gYVswXTtcbiAgdmFyIGF5ID0gYVsxXTtcbiAgdmFyIGF6ID0gYVsyXTtcbiAgdmFyIGF3ID0gYVszXTtcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wOyAvLyBNYXJzYWdsaWEsIEdlb3JnZS4gQ2hvb3NpbmcgYSBQb2ludCBmcm9tIHRoZSBTdXJmYWNlIG9mIGFcbiAgLy8gU3BoZXJlLiBBbm4uIE1hdGguIFN0YXRpc3QuIDQzICgxOTcyKSwgbm8uIDIsIDY0NS0tNjQ2LlxuICAvLyBodHRwOi8vcHJvamVjdGV1Y2xpZC5vcmcvZXVjbGlkLmFvbXMvMTE3NzY5MjY0NDtcblxuICB2YXIgdjEsIHYyLCB2MywgdjQ7XG4gIHZhciBzMSwgczI7XG5cbiAgZG8ge1xuICAgIHYxID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2MiA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczEgPSB2MSAqIHYxICsgdjIgKiB2MjtcbiAgfSB3aGlsZSAoczEgPj0gMSk7XG5cbiAgZG8ge1xuICAgIHYzID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcbiAgICB2NCA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XG4gICAgczIgPSB2MyAqIHYzICsgdjQgKiB2NDtcbiAgfSB3aGlsZSAoczIgPj0gMSk7XG5cbiAgdmFyIGQgPSBNYXRoLnNxcnQoKDEgLSBzMSkgLyBzMik7XG4gIG91dFswXSA9IHNjYWxlICogdjE7XG4gIG91dFsxXSA9IHNjYWxlICogdjI7XG4gIG91dFsyXSA9IHNjYWxlICogdjMgKiBkO1xuICBvdXRbM10gPSBzY2FsZSAqIHY0ICogZDtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBtYXQ0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl0sXG4gICAgICB3ID0gYVszXTtcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0gKiB3O1xuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSAqIHc7XG4gIG91dFsyXSA9IG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSAqIHc7XG4gIG91dFszXSA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzExXSAqIHogKyBtWzE1XSAqIHc7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xuICB2YXIgeCA9IGFbMF0sXG4gICAgICB5ID0gYVsxXSxcbiAgICAgIHogPSBhWzJdO1xuICB2YXIgcXggPSBxWzBdLFxuICAgICAgcXkgPSBxWzFdLFxuICAgICAgcXogPSBxWzJdLFxuICAgICAgcXcgPSBxWzNdOyAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuXG4gIHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcbiAgdmFyIGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xuICB2YXIgaXogPSBxdyAqIHogKyBxeCAqIHkgLSBxeSAqIHg7XG4gIHZhciBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7IC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcblxuICBvdXRbMF0gPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xuICBvdXRbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xuICBvdXRbMl0gPSBpeiAqIHF3ICsgaXcgKiAtcXogKyBpeCAqIC1xeSAtIGl5ICogLXF4O1xuICBvdXRbM10gPSBhWzNdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gemVyb1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gemVybyhvdXQpIHtcbiAgb3V0WzBdID0gMC4wO1xuICBvdXRbMV0gPSAwLjA7XG4gIG91dFsyXSA9IDAuMDtcbiAgb3V0WzNdID0gMC4wO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzR9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInZlYzQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIpXCI7XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWM0fSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xufVxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcbiAgdmFyIGEwID0gYVswXSxcbiAgICAgIGExID0gYVsxXSxcbiAgICAgIGEyID0gYVsyXSxcbiAgICAgIGEzID0gYVszXTtcbiAgdmFyIGIwID0gYlswXSxcbiAgICAgIGIxID0gYlsxXSxcbiAgICAgIGIyID0gYlsyXSxcbiAgICAgIGIzID0gYlszXTtcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKTtcbn1cbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjNHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjNC4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWM0cyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICogQHJldHVybnMge0FycmF5fSBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmVjID0gY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XG4gICAgdmFyIGksIGw7XG5cbiAgICBpZiAoIXN0cmlkZSkge1xuICAgICAgc3RyaWRlID0gNDtcbiAgICB9XG5cbiAgICBpZiAoIW9mZnNldCkge1xuICAgICAgb2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gYS5sZW5ndGg7XG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcbiAgICAgIHZlY1swXSA9IGFbaV07XG4gICAgICB2ZWNbMV0gPSBhW2kgKyAxXTtcbiAgICAgIHZlY1syXSA9IGFbaSArIDJdO1xuICAgICAgdmVjWzNdID0gYVtpICsgM107XG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcbiAgICAgIGFbaV0gPSB2ZWNbMF07XG4gICAgICBhW2kgKyAxXSA9IHZlY1sxXTtcbiAgICAgIGFbaSArIDJdID0gdmVjWzJdO1xuICAgICAgYVtpICsgM10gPSB2ZWNbM107XG4gICAgfVxuXG4gICAgcmV0dXJuIGE7XG4gIH07XG59KCk7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG5pbXBvcnQgKiBhcyBtYXQzIGZyb20gXCIuL21hdDMuanNcIjtcbmltcG9ydCAqIGFzIHZlYzMgZnJvbSBcIi4vdmVjMy5qc1wiO1xuaW1wb3J0ICogYXMgdmVjNCBmcm9tIFwiLi92ZWM0LmpzXCI7XG4vKipcclxuICogUXVhdGVybmlvblxyXG4gKiBAbW9kdWxlIHF1YXRcclxuICovXG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IHF1YXRcclxuICpcclxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgfVxuXG4gIG91dFszXSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAwO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxyXG4gKiB0aGVuIHJldHVybnMgaXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYXhpcyB0aGUgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRBeGlzQW5nbGUob3V0LCBheGlzLCByYWQpIHtcbiAgcmFkID0gcmFkICogMC41O1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XG4gIG91dFswXSA9IHMgKiBheGlzWzBdO1xuICBvdXRbMV0gPSBzICogYXhpc1sxXTtcbiAgb3V0WzJdID0gcyAqIGF4aXNbMl07XG4gIG91dFszXSA9IE1hdGguY29zKHJhZCk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2V0cyB0aGUgcm90YXRpb24gYXhpcyBhbmQgYW5nbGUgZm9yIGEgZ2l2ZW5cclxuICogIHF1YXRlcm5pb24uIElmIGEgcXVhdGVybmlvbiBpcyBjcmVhdGVkIHdpdGhcclxuICogIHNldEF4aXNBbmdsZSwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gdGhlIHNhbWVcclxuICogIHZhbHVlcyBhcyBwcm92aWRpZWQgaW4gdGhlIG9yaWdpbmFsIHBhcmFtZXRlciBsaXN0XHJcbiAqICBPUiBmdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB2YWx1ZXMuXHJcbiAqIEV4YW1wbGU6IFRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieSBheGlzIFswLCAwLCAxXSBhbmRcclxuICogIGFuZ2xlIC05MCBpcyB0aGUgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBmb3JtZWQgYnlcclxuICogIFswLCAwLCAxXSBhbmQgMjcwLiBUaGlzIG1ldGhvZCBmYXZvcnMgdGhlIGxhdHRlci5cclxuICogQHBhcmFtICB7dmVjM30gb3V0X2F4aXMgIFZlY3RvciByZWNlaXZpbmcgdGhlIGF4aXMgb2Ygcm90YXRpb25cclxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0fSBxICAgICBRdWF0ZXJuaW9uIHRvIGJlIGRlY29tcG9zZWRcclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSByb3RhdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF4aXNBbmdsZShvdXRfYXhpcywgcSkge1xuICB2YXIgcmFkID0gTWF0aC5hY29zKHFbM10pICogMi4wO1xuICB2YXIgcyA9IE1hdGguc2luKHJhZCAvIDIuMCk7XG5cbiAgaWYgKHMgPiBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgb3V0X2F4aXNbMF0gPSBxWzBdIC8gcztcbiAgICBvdXRfYXhpc1sxXSA9IHFbMV0gLyBzO1xuICAgIG91dF9heGlzWzJdID0gcVsyXSAvIHM7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgcyBpcyB6ZXJvLCByZXR1cm4gYW55IGF4aXMgKG5vIHJvdGF0aW9uIC0gYXhpcyBkb2VzIG5vdCBtYXR0ZXIpXG4gICAgb3V0X2F4aXNbMF0gPSAxO1xuICAgIG91dF9heGlzWzFdID0gMDtcbiAgICBvdXRfYXhpc1syXSA9IDA7XG4gIH1cblxuICByZXR1cm4gcmFkO1xufVxuLyoqXHJcbiAqIEdldHMgdGhlIGFuZ3VsYXIgZGlzdGFuY2UgYmV0d2VlbiB0d28gdW5pdCBxdWF0ZXJuaW9uc1xyXG4gKlxyXG4gKiBAcGFyYW0gIHtSZWFkb25seVF1YXR9IGEgICAgIE9yaWdpbiB1bml0IHF1YXRlcm5pb25cclxuICogQHBhcmFtICB7UmVhZG9ubHlRdWF0fSBiICAgICBEZXN0aW5hdGlvbiB1bml0IHF1YXRlcm5pb25cclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIGJldHdlZW4gdGhlIHR3byBxdWF0ZXJuaW9uc1xyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuZ2xlKGEsIGIpIHtcbiAgdmFyIGRvdHByb2R1Y3QgPSBkb3QoYSwgYik7XG4gIHJldHVybiBNYXRoLmFjb3MoMiAqIGRvdHByb2R1Y3QgKiBkb3Rwcm9kdWN0IC0gMSk7XG59XG4vKipcclxuICogTXVsdGlwbGllcyB0d28gcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdLFxuICAgICAgYncgPSBiWzNdO1xuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4O1xuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWCBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieCA9IE1hdGguc2luKHJhZCksXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXogKiBieDtcbiAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWSBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieSA9IE1hdGguc2luKHJhZCksXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGF4ICogYncgLSBheiAqIGJ5O1xuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieTtcbiAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XG4gIG91dFszXSA9IGF3ICogYncgLSBheSAqIGJ5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XG4gIHJhZCAqPSAwLjU7XG4gIHZhciBheCA9IGFbMF0sXG4gICAgICBheSA9IGFbMV0sXG4gICAgICBheiA9IGFbMl0sXG4gICAgICBhdyA9IGFbM107XG4gIHZhciBieiA9IE1hdGguc2luKHJhZCksXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGF4ICogYncgKyBheSAqIGJ6O1xuICBvdXRbMV0gPSBheSAqIGJ3IC0gYXggKiBiejtcbiAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYno7XG4gIG91dFszXSA9IGF3ICogYncgLSBheiAqIGJ6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIFcgY29tcG9uZW50IG9mIGEgcXVhdCBmcm9tIHRoZSBYLCBZLCBhbmQgWiBjb21wb25lbnRzLlxyXG4gKiBBc3N1bWVzIHRoYXQgcXVhdGVybmlvbiBpcyAxIHVuaXQgaW4gbGVuZ3RoLlxyXG4gKiBBbnkgZXhpc3RpbmcgVyBjb21wb25lbnQgd2lsbCBiZSBpZ25vcmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgVyBjb21wb25lbnQgb2ZcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVcob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl07XG4gIG91dFswXSA9IHg7XG4gIG91dFsxXSA9IHk7XG4gIG91dFsyXSA9IHo7XG4gIG91dFszXSA9IE1hdGguc3FydChNYXRoLmFicygxLjAgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIG9mIGEgdW5pdCBxdWF0ZXJuaW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleHAob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl0sXG4gICAgICB3ID0gYVszXTtcbiAgdmFyIHIgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgdmFyIGV0ID0gTWF0aC5leHAodyk7XG4gIHZhciBzID0gciA+IDAgPyBldCAqIE1hdGguc2luKHIpIC8gciA6IDA7XG4gIG91dFswXSA9IHggKiBzO1xuICBvdXRbMV0gPSB5ICogcztcbiAgb3V0WzJdID0geiAqIHM7XG4gIG91dFszXSA9IGV0ICogTWF0aC5jb3Mocik7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiBhIHVuaXQgcXVhdGVybmlvbi5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHF1YXQgdG8gY2FsY3VsYXRlIHRoZSBleHBvbmVudGlhbCBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbG4ob3V0LCBhKSB7XG4gIHZhciB4ID0gYVswXSxcbiAgICAgIHkgPSBhWzFdLFxuICAgICAgeiA9IGFbMl0sXG4gICAgICB3ID0gYVszXTtcbiAgdmFyIHIgPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcbiAgdmFyIHQgPSByID4gMCA/IE1hdGguYXRhbjIociwgdykgLyByIDogMDtcbiAgb3V0WzBdID0geCAqIHQ7XG4gIG91dFsxXSA9IHkgKiB0O1xuICBvdXRbMl0gPSB6ICogdDtcbiAgb3V0WzNdID0gMC41ICogTWF0aC5sb2coeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZSB0aGUgc2NhbGFyIHBvd2VyIG9mIGEgdW5pdCBxdWF0ZXJuaW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgdGhlIGV4cG9uZW50aWFsIG9mXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgcXVhdGVybmlvbiBieVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcG93KG91dCwgYSwgYikge1xuICBsbihvdXQsIGEpO1xuICBzY2FsZShvdXQsIG91dCwgYik7XG4gIGV4cChvdXQsIG91dCk7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNsZXJwKG91dCwgYSwgYiwgdCkge1xuICAvLyBiZW5jaG1hcmtzOlxuICAvLyAgICBodHRwOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXNsZXJwLWltcGxlbWVudGF0aW9uc1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYXogPSBhWzJdLFxuICAgICAgYXcgPSBhWzNdO1xuICB2YXIgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgYnogPSBiWzJdLFxuICAgICAgYncgPSBiWzNdO1xuICB2YXIgb21lZ2EsIGNvc29tLCBzaW5vbSwgc2NhbGUwLCBzY2FsZTE7IC8vIGNhbGMgY29zaW5lXG5cbiAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3OyAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcblxuICBpZiAoY29zb20gPCAwLjApIHtcbiAgICBjb3NvbSA9IC1jb3NvbTtcbiAgICBieCA9IC1ieDtcbiAgICBieSA9IC1ieTtcbiAgICBieiA9IC1iejtcbiAgICBidyA9IC1idztcbiAgfSAvLyBjYWxjdWxhdGUgY29lZmZpY2llbnRzXG5cblxuICBpZiAoMS4wIC0gY29zb20gPiBnbE1hdHJpeC5FUFNJTE9OKSB7XG4gICAgLy8gc3RhbmRhcmQgY2FzZSAoc2xlcnApXG4gICAgb21lZ2EgPSBNYXRoLmFjb3MoY29zb20pO1xuICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xuICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTtcbiAgfSBlbHNlIHtcbiAgICAvLyBcImZyb21cIiBhbmQgXCJ0b1wiIHF1YXRlcm5pb25zIGFyZSB2ZXJ5IGNsb3NlXG4gICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgIHNjYWxlMCA9IDEuMCAtIHQ7XG4gICAgc2NhbGUxID0gdDtcbiAgfSAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXG5cblxuICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICBvdXRbMl0gPSBzY2FsZTAgKiBheiArIHNjYWxlMSAqIGJ6O1xuICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB1bml0IHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0KSB7XG4gIC8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly9wbGFubmluZy5jcy51aXVjLmVkdS9ub2RlMTk4Lmh0bWxcbiAgLy8gVE9ETzogQ2FsbGluZyByYW5kb20gMyB0aW1lcyBpcyBwcm9iYWJseSBub3QgdGhlIGZhc3Rlc3Qgc29sdXRpb25cbiAgdmFyIHUxID0gZ2xNYXRyaXguUkFORE9NKCk7XG4gIHZhciB1MiA9IGdsTWF0cml4LlJBTkRPTSgpO1xuICB2YXIgdTMgPSBnbE1hdHJpeC5SQU5ET00oKTtcbiAgdmFyIHNxcnQxTWludXNVMSA9IE1hdGguc3FydCgxIC0gdTEpO1xuICB2YXIgc3FydFUxID0gTWF0aC5zcXJ0KHUxKTtcbiAgb3V0WzBdID0gc3FydDFNaW51c1UxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzFdID0gc3FydDFNaW51c1UxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUyKTtcbiAgb3V0WzJdID0gc3FydFUxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgb3V0WzNdID0gc3FydFUxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUzKTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBpbnZlcnNlIG9mIGEgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xuICB2YXIgYTAgPSBhWzBdLFxuICAgICAgYTEgPSBhWzFdLFxuICAgICAgYTIgPSBhWzJdLFxuICAgICAgYTMgPSBhWzNdO1xuICB2YXIgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcbiAgdmFyIGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7IC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXG5cbiAgb3V0WzBdID0gLWEwICogaW52RG90O1xuICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XG4gIG91dFsyXSA9IC1hMiAqIGludkRvdDtcbiAgb3V0WzNdID0gYTMgKiBpbnZEb3Q7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgY29uanVnYXRlIG9mIGEgcXVhdFxyXG4gKiBJZiB0aGUgcXVhdGVybmlvbiBpcyBub3JtYWxpemVkLCB0aGlzIGZ1bmN0aW9uIGlzIGZhc3RlciB0aGFuIHF1YXQuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XG4gIG91dFswXSA9IC1hWzBdO1xuICBvdXRbMV0gPSAtYVsxXTtcbiAgb3V0WzJdID0gLWFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cclxuICpcclxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcclxuICogdG8gcmVub3JtYWxpemUgdGhlIHF1YXRlcm5pb24geW91cnNlbGYgd2hlcmUgbmVjZXNzYXJ5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IG0gcm90YXRpb24gbWF0cml4XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XG4gIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXG4gIC8vIGFydGljbGUgXCJRdWF0ZXJuaW9uIENhbGN1bHVzIGFuZCBGYXN0IEFuaW1hdGlvblwiLlxuICB2YXIgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xuICB2YXIgZlJvb3Q7XG5cbiAgaWYgKGZUcmFjZSA+IDAuMCkge1xuICAgIC8vIHx3fCA+IDEvMiwgbWF5IGFzIHdlbGwgY2hvb3NlIHcgPiAxLzJcbiAgICBmUm9vdCA9IE1hdGguc3FydChmVHJhY2UgKyAxLjApOyAvLyAyd1xuXG4gICAgb3V0WzNdID0gMC41ICogZlJvb3Q7XG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDsgLy8gMS8oNHcpXG5cbiAgICBvdXRbMF0gPSAobVs1XSAtIG1bN10pICogZlJvb3Q7XG4gICAgb3V0WzFdID0gKG1bNl0gLSBtWzJdKSAqIGZSb290O1xuICAgIG91dFsyXSA9IChtWzFdIC0gbVszXSkgKiBmUm9vdDtcbiAgfSBlbHNlIHtcbiAgICAvLyB8d3wgPD0gMS8yXG4gICAgdmFyIGkgPSAwO1xuICAgIGlmIChtWzRdID4gbVswXSkgaSA9IDE7XG4gICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xuICAgIHZhciBqID0gKGkgKyAxKSAlIDM7XG4gICAgdmFyIGsgPSAoaSArIDIpICUgMztcbiAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xuICAgIG91dFtpXSA9IDAuNSAqIGZSb290O1xuICAgIGZSb290ID0gMC41IC8gZlJvb3Q7XG4gICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcbiAgICBvdXRbal0gPSAobVtqICogMyArIGldICsgbVtpICogMyArIGpdKSAqIGZSb290O1xuICAgIG91dFtrXSA9IChtW2sgKiAzICsgaV0gKyBtW2kgKiAzICsga10pICogZlJvb3Q7XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3h9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWCBheGlzIGluIGRlZ3JlZXMuXHJcbiAqIEBwYXJhbSB7eX0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBZIGF4aXMgaW4gZGVncmVlcy5cclxuICogQHBhcmFtIHt6fSBBbmdsZSB0byByb3RhdGUgYXJvdW5kIFogYXhpcyBpbiBkZWdyZWVzLlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIHgsIHksIHopIHtcbiAgdmFyIGhhbGZUb1JhZCA9IDAuNSAqIE1hdGguUEkgLyAxODAuMDtcbiAgeCAqPSBoYWxmVG9SYWQ7XG4gIHkgKj0gaGFsZlRvUmFkO1xuICB6ICo9IGhhbGZUb1JhZDtcbiAgdmFyIHN4ID0gTWF0aC5zaW4oeCk7XG4gIHZhciBjeCA9IE1hdGguY29zKHgpO1xuICB2YXIgc3kgPSBNYXRoLnNpbih5KTtcbiAgdmFyIGN5ID0gTWF0aC5jb3MoeSk7XG4gIHZhciBzeiA9IE1hdGguc2luKHopO1xuICB2YXIgY3ogPSBNYXRoLmNvcyh6KTtcbiAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xuICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XG4gIG91dFsyXSA9IGN4ICogY3kgKiBzeiAtIHN4ICogc3kgKiBjejtcbiAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBxdWF0ZW5pb25cclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XG4gIHJldHVybiBcInF1YXQoXCIgKyBhWzBdICsgXCIsIFwiICsgYVsxXSArIFwiLCBcIiArIGFbMl0gKyBcIiwgXCIgKyBhWzNdICsgXCIpXCI7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0ZXJuaW9uIHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBjbG9uZSA9IHZlYzQuY2xvbmU7XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgZnJvbVZhbHVlcyA9IHZlYzQuZnJvbVZhbHVlcztcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgcXVhdCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgc291cmNlIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgY29weSA9IHZlYzQuY29weTtcbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIHNldCA9IHZlYzQuc2V0O1xuLyoqXHJcbiAqIEFkZHMgdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGFkZCA9IHZlYzQuYWRkO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xuLyoqXHJcbiAqIFNjYWxlcyBhIHF1YXQgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc2NhbGUgPSB2ZWM0LnNjYWxlO1xuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGRvdCA9IHZlYzQuZG90O1xuLyoqXHJcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBsZXJwID0gdmVjNC5sZXJwO1xuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXG5cbmV4cG9ydCB2YXIgbGVuZ3RoID0gdmVjNC5sZW5ndGg7XG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Lmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xuXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzcXVhcmVkTGVuZ3RoID0gdmVjNC5zcXVhcmVkTGVuZ3RoO1xuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXG5cbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcbi8qKlxyXG4gKiBOb3JtYWxpemUgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBhIFRoZSBmaXJzdCBxdWF0ZXJuaW9uLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHF1YXRlcm5pb24uXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IHZhciBleGFjdEVxdWFscyA9IHZlYzQuZXhhY3RFcXVhbHM7XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgdmFyIGVxdWFscyA9IHZlYzQuZXF1YWxzO1xuLyoqXHJcbiAqIFNldHMgYSBxdWF0ZXJuaW9uIHRvIHJlcHJlc2VudCB0aGUgc2hvcnRlc3Qgcm90YXRpb24gZnJvbSBvbmVcclxuICogdmVjdG9yIHRvIGFub3RoZXIuXHJcbiAqXHJcbiAqIEJvdGggdmVjdG9ycyBhcmUgYXNzdW1lZCB0byBiZSB1bml0IGxlbmd0aC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uLlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzN9IGIgdGhlIGRlc3RpbmF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xuXG5leHBvcnQgdmFyIHJvdGF0aW9uVG8gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0bXB2ZWMzID0gdmVjMy5jcmVhdGUoKTtcbiAgdmFyIHhVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygxLCAwLCAwKTtcbiAgdmFyIHlVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcbiAgICB2YXIgZG90ID0gdmVjMy5kb3QoYSwgYik7XG5cbiAgICBpZiAoZG90IDwgLTAuOTk5OTk5KSB7XG4gICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIHhVbml0VmVjMywgYSk7XG4gICAgICBpZiAodmVjMy5sZW4odG1wdmVjMykgPCAwLjAwMDAwMSkgdmVjMy5jcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xuICAgICAgdmVjMy5ub3JtYWxpemUodG1wdmVjMywgdG1wdmVjMyk7XG4gICAgICBzZXRBeGlzQW5nbGUob3V0LCB0bXB2ZWMzLCBNYXRoLlBJKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIGlmIChkb3QgPiAwLjk5OTk5OSkge1xuICAgICAgb3V0WzBdID0gMDtcbiAgICAgIG91dFsxXSA9IDA7XG4gICAgICBvdXRbMl0gPSAwO1xuICAgICAgb3V0WzNdID0gMTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZlYzMuY3Jvc3ModG1wdmVjMywgYSwgYik7XG4gICAgICBvdXRbMF0gPSB0bXB2ZWMzWzBdO1xuICAgICAgb3V0WzFdID0gdG1wdmVjM1sxXTtcbiAgICAgIG91dFsyXSA9IHRtcHZlYzNbMl07XG4gICAgICBvdXRbM10gPSAxICsgZG90O1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIG91dCk7XG4gICAgfVxuICB9O1xufSgpO1xuLyoqXHJcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5UXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seVF1YXR9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IHZhciBzcWxlcnAgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZW1wMSA9IGNyZWF0ZSgpO1xuICB2YXIgdGVtcDIgPSBjcmVhdGUoKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIsIGMsIGQsIHQpIHtcbiAgICBzbGVycCh0ZW1wMSwgYSwgZCwgdCk7XG4gICAgc2xlcnAodGVtcDIsIGIsIGMsIHQpO1xuICAgIHNsZXJwKG91dCwgdGVtcDEsIHRlbXAyLCAyICogdCAqICgxIC0gdCkpO1xuICAgIHJldHVybiBvdXQ7XG4gIH07XG59KCk7XG4vKipcclxuICogU2V0cyB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24gd2l0aCB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW5cclxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXHJcbiAqIHBlcnBlbmRpY3VsYXIgdG8gYWxsIG90aGVyIHNwZWNpZmllZCBheGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdmlldyAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlWZWMzfSByaWdodCB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJyaWdodFwiIGRpcmVjdGlvblxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjM30gdXAgICAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwidXBcIiBkaXJlY3Rpb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cblxuZXhwb3J0IHZhciBzZXRBeGVzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgbWF0ciA9IG1hdDMuY3JlYXRlKCk7XG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCB2aWV3LCByaWdodCwgdXApIHtcbiAgICBtYXRyWzBdID0gcmlnaHRbMF07XG4gICAgbWF0clszXSA9IHJpZ2h0WzFdO1xuICAgIG1hdHJbNl0gPSByaWdodFsyXTtcbiAgICBtYXRyWzFdID0gdXBbMF07XG4gICAgbWF0cls0XSA9IHVwWzFdO1xuICAgIG1hdHJbN10gPSB1cFsyXTtcbiAgICBtYXRyWzJdID0gLXZpZXdbMF07XG4gICAgbWF0cls1XSA9IC12aWV3WzFdO1xuICAgIG1hdHJbOF0gPSAtdmlld1syXTtcbiAgICByZXR1cm4gbm9ybWFsaXplKG91dCwgZnJvbU1hdDMob3V0LCBtYXRyKSk7XG4gIH07XG59KCk7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XG4vKipcclxuICogM3gzIE1hdHJpeFxyXG4gKiBAbW9kdWxlIG1hdDNcclxuICovXG5cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDNcclxuICpcclxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcblxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcbiAgICBvdXRbMV0gPSAwO1xuICAgIG91dFsyXSA9IDA7XG4gICAgb3V0WzNdID0gMDtcbiAgICBvdXRbNV0gPSAwO1xuICAgIG91dFs2XSA9IDA7XG4gICAgb3V0WzddID0gMDtcbiAgfVxuXG4gIG91dFswXSA9IDE7XG4gIG91dFs0XSA9IDE7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcbiAgb3V0WzBdID0gYVswXTtcbiAgb3V0WzFdID0gYVsxXTtcbiAgb3V0WzJdID0gYVsyXTtcbiAgb3V0WzNdID0gYVs0XTtcbiAgb3V0WzRdID0gYVs1XTtcbiAgb3V0WzVdID0gYVs2XTtcbiAgb3V0WzZdID0gYVs4XTtcbiAgb3V0WzddID0gYVs5XTtcbiAgb3V0WzhdID0gYVsxMF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xuICBvdXRbMF0gPSBhWzBdO1xuICBvdXRbMV0gPSBhWzFdO1xuICBvdXRbMl0gPSBhWzJdO1xuICBvdXRbM10gPSBhWzNdO1xuICBvdXRbNF0gPSBhWzRdO1xuICBvdXRbNV0gPSBhWzVdO1xuICBvdXRbNl0gPSBhWzZdO1xuICBvdXRbN10gPSBhWzddO1xuICBvdXRbOF0gPSBhWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQzIHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IGFbMl07XG4gIG91dFszXSA9IGFbM107XG4gIG91dFs0XSA9IGFbNF07XG4gIG91dFs1XSA9IGFbNV07XG4gIG91dFs2XSA9IGFbNl07XG4gIG91dFs3XSA9IGFbN107XG4gIG91dFs4XSA9IGFbOF07XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ3JlYXRlIGEgbmV3IG1hdDMgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEByZXR1cm5zIHttYXQzfSBBIG5ldyBtYXQzXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyhtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTEwO1xuICBvdXRbNF0gPSBtMTE7XG4gIG91dFs1XSA9IG0xMjtcbiAgb3V0WzZdID0gbTIwO1xuICBvdXRbN10gPSBtMjE7XG4gIG91dFs4XSA9IG0yMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDcpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggOClcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcbiAgb3V0WzBdID0gbTAwO1xuICBvdXRbMV0gPSBtMDE7XG4gIG91dFsyXSA9IG0wMjtcbiAgb3V0WzNdID0gbTEwO1xuICBvdXRbNF0gPSBtMTE7XG4gIG91dFs1XSA9IG0xMjtcbiAgb3V0WzZdID0gbTIwO1xuICBvdXRbN10gPSBtMjE7XG4gIG91dFs4XSA9IG0yMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTZXQgYSBtYXQzIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICBvdXRbMF0gPSAxO1xuICBvdXRbMV0gPSAwO1xuICBvdXRbMl0gPSAwO1xuICBvdXRbM10gPSAwO1xuICBvdXRbNF0gPSAxO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXG4gIGlmIChvdXQgPT09IGEpIHtcbiAgICB2YXIgYTAxID0gYVsxXSxcbiAgICAgICAgYTAyID0gYVsyXSxcbiAgICAgICAgYTEyID0gYVs1XTtcbiAgICBvdXRbMV0gPSBhWzNdO1xuICAgIG91dFsyXSA9IGFbNl07XG4gICAgb3V0WzNdID0gYTAxO1xuICAgIG91dFs1XSA9IGFbN107XG4gICAgb3V0WzZdID0gYTAyO1xuICAgIG91dFs3XSA9IGExMjtcbiAgfSBlbHNlIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbM107XG4gICAgb3V0WzJdID0gYVs2XTtcbiAgICBvdXRbM10gPSBhWzFdO1xuICAgIG91dFs0XSA9IGFbNF07XG4gICAgb3V0WzVdID0gYVs3XTtcbiAgICBvdXRbNl0gPSBhWzJdO1xuICAgIG91dFs3XSA9IGFbNV07XG4gICAgb3V0WzhdID0gYVs4XTtcbiAgfVxuXG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMSA9IGEyMiAqIGExMSAtIGExMiAqIGEyMTtcbiAgdmFyIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XG4gIHZhciBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IGIwMSAqIGRldDtcbiAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xuICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcbiAgb3V0WzNdID0gYjExICogZGV0O1xuICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcbiAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xuICBvdXRbNl0gPSBiMjEgKiBkZXQ7XG4gIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcbiAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICBvdXRbMF0gPSBhMTEgKiBhMjIgLSBhMTIgKiBhMjE7XG4gIG91dFsxXSA9IGEwMiAqIGEyMSAtIGEwMSAqIGEyMjtcbiAgb3V0WzJdID0gYTAxICogYTEyIC0gYTAyICogYTExO1xuICBvdXRbM10gPSBhMTIgKiBhMjAgLSBhMTAgKiBhMjI7XG4gIG91dFs0XSA9IGEwMCAqIGEyMiAtIGEwMiAqIGEyMDtcbiAgb3V0WzVdID0gYTAyICogYTEwIC0gYTAwICogYTEyO1xuICBvdXRbNl0gPSBhMTAgKiBhMjEgLSBhMTEgKiBhMjA7XG4gIG91dFs3XSA9IGEwMSAqIGEyMCAtIGEwMCAqIGEyMTtcbiAgb3V0WzhdID0gYTAwICogYTExIC0gYTAxICogYTEwO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdO1xuICB2YXIgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdO1xuICB2YXIgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdO1xuICByZXR1cm4gYTAwICogKGEyMiAqIGExMSAtIGExMiAqIGEyMSkgKyBhMDEgKiAoLWEyMiAqIGExMCArIGExMiAqIGEyMCkgKyBhMDIgKiAoYTIxICogYTEwIC0gYTExICogYTIwKTtcbn1cbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQzJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXTtcbiAgdmFyIGExMCA9IGFbM10sXG4gICAgICBhMTEgPSBhWzRdLFxuICAgICAgYTEyID0gYVs1XTtcbiAgdmFyIGEyMCA9IGFbNl0sXG4gICAgICBhMjEgPSBhWzddLFxuICAgICAgYTIyID0gYVs4XTtcbiAgdmFyIGIwMCA9IGJbMF0sXG4gICAgICBiMDEgPSBiWzFdLFxuICAgICAgYjAyID0gYlsyXTtcbiAgdmFyIGIxMCA9IGJbM10sXG4gICAgICBiMTEgPSBiWzRdLFxuICAgICAgYjEyID0gYls1XTtcbiAgdmFyIGIyMCA9IGJbNl0sXG4gICAgICBiMjEgPSBiWzddLFxuICAgICAgYjIyID0gYls4XTtcbiAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xuICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XG4gIG91dFsyXSA9IGIwMCAqIGEwMiArIGIwMSAqIGExMiArIGIwMiAqIGEyMjtcbiAgb3V0WzNdID0gYjEwICogYTAwICsgYjExICogYTEwICsgYjEyICogYTIwO1xuICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XG4gIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcbiAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xuICBvdXRbN10gPSBiMjAgKiBhMDEgKyBiMjEgKiBhMTEgKyBiMjIgKiBhMjE7XG4gIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBUcmFuc2xhdGUgYSBtYXQzIGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdLFxuICAgICAgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdLFxuICAgICAgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXTtcbiAgb3V0WzBdID0gYTAwO1xuICBvdXRbMV0gPSBhMDE7XG4gIG91dFsyXSA9IGEwMjtcbiAgb3V0WzNdID0gYTEwO1xuICBvdXRbNF0gPSBhMTE7XG4gIG91dFs1XSA9IGExMjtcbiAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XG4gIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xuICBvdXRbOF0gPSB4ICogYTAyICsgeSAqIGExMiArIGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xuICB2YXIgYTAwID0gYVswXSxcbiAgICAgIGEwMSA9IGFbMV0sXG4gICAgICBhMDIgPSBhWzJdLFxuICAgICAgYTEwID0gYVszXSxcbiAgICAgIGExMSA9IGFbNF0sXG4gICAgICBhMTIgPSBhWzVdLFxuICAgICAgYTIwID0gYVs2XSxcbiAgICAgIGEyMSA9IGFbN10sXG4gICAgICBhMjIgPSBhWzhdLFxuICAgICAgcyA9IE1hdGguc2luKHJhZCksXG4gICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgb3V0WzBdID0gYyAqIGEwMCArIHMgKiBhMTA7XG4gIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xuICBvdXRbMl0gPSBjICogYTAyICsgcyAqIGExMjtcbiAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XG4gIG91dFs0XSA9IGMgKiBhMTEgLSBzICogYTAxO1xuICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcbiAgb3V0WzZdID0gYTIwO1xuICBvdXRbN10gPSBhMjE7XG4gIG91dFs4XSA9IGEyMjtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtSZWFkb25seU1hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtSZWFkb25seVZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICB2YXIgeCA9IHZbMF0sXG4gICAgICB5ID0gdlsxXTtcbiAgb3V0WzBdID0geCAqIGFbMF07XG4gIG91dFsxXSA9IHggKiBhWzFdO1xuICBvdXRbMl0gPSB4ICogYVsyXTtcbiAgb3V0WzNdID0geSAqIGFbM107XG4gIG91dFs0XSA9IHkgKiBhWzRdO1xuICBvdXRbNV0gPSB5ICogYVs1XTtcbiAgb3V0WzZdID0gYVs2XTtcbiAgb3V0WzddID0gYVs3XTtcbiAgb3V0WzhdID0gYVs4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3IgdHJhbnNsYXRpb25cclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0My50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHYpIHtcbiAgb3V0WzBdID0gMTtcbiAgb3V0WzFdID0gMDtcbiAgb3V0WzJdID0gMDtcbiAgb3V0WzNdID0gMDtcbiAgb3V0WzRdID0gMTtcbiAgb3V0WzVdID0gMDtcbiAgb3V0WzZdID0gdlswXTtcbiAgb3V0WzddID0gdlsxXTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQzLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XG4gIG91dFswXSA9IGM7XG4gIG91dFsxXSA9IHM7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IC1zO1xuICBvdXRbNF0gPSBjO1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAwO1xuICBvdXRbN10gPSAwO1xuICBvdXRbOF0gPSAxO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDMuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5VmVjMn0gdiBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XG4gIG91dFswXSA9IHZbMF07XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IHZbMV07XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IDA7XG4gIG91dFs3XSA9IDA7XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ29waWVzIHRoZSB2YWx1ZXMgZnJvbSBhIG1hdDJkIGludG8gYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQyZH0gYSB0aGUgbWF0cml4IHRvIGNvcHlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKiovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0MmQob3V0LCBhKSB7XG4gIG91dFswXSA9IGFbMF07XG4gIG91dFsxXSA9IGFbMV07XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IGFbMl07XG4gIG91dFs0XSA9IGFbM107XG4gIG91dFs1XSA9IDA7XG4gIG91dFs2XSA9IGFbNF07XG4gIG91dFs3XSA9IGFbNV07XG4gIG91dFs4XSA9IDE7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlRdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcbiAgdmFyIHggPSBxWzBdLFxuICAgICAgeSA9IHFbMV0sXG4gICAgICB6ID0gcVsyXSxcbiAgICAgIHcgPSBxWzNdO1xuICB2YXIgeDIgPSB4ICsgeDtcbiAgdmFyIHkyID0geSArIHk7XG4gIHZhciB6MiA9IHogKyB6O1xuICB2YXIgeHggPSB4ICogeDI7XG4gIHZhciB5eCA9IHkgKiB4MjtcbiAgdmFyIHl5ID0geSAqIHkyO1xuICB2YXIgenggPSB6ICogeDI7XG4gIHZhciB6eSA9IHogKiB5MjtcbiAgdmFyIHp6ID0geiAqIHoyO1xuICB2YXIgd3ggPSB3ICogeDI7XG4gIHZhciB3eSA9IHcgKiB5MjtcbiAgdmFyIHd6ID0gdyAqIHoyO1xuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcbiAgb3V0WzNdID0geXggLSB3ejtcbiAgb3V0WzZdID0genggKyB3eTtcbiAgb3V0WzFdID0geXggKyB3ejtcbiAgb3V0WzRdID0gMSAtIHh4IC0geno7XG4gIG91dFs3XSA9IHp5IC0gd3g7XG4gIG91dFsyXSA9IHp4IC0gd3k7XG4gIG91dFs1XSA9IHp5ICsgd3g7XG4gIG91dFs4XSA9IDEgLSB4eCAtIHl5O1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0NH0gYSBNYXQ0IHRvIGRlcml2ZSB0aGUgbm9ybWFsIG1hdHJpeCBmcm9tXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxGcm9tTWF0NChvdXQsIGEpIHtcbiAgdmFyIGEwMCA9IGFbMF0sXG4gICAgICBhMDEgPSBhWzFdLFxuICAgICAgYTAyID0gYVsyXSxcbiAgICAgIGEwMyA9IGFbM107XG4gIHZhciBhMTAgPSBhWzRdLFxuICAgICAgYTExID0gYVs1XSxcbiAgICAgIGExMiA9IGFbNl0sXG4gICAgICBhMTMgPSBhWzddO1xuICB2YXIgYTIwID0gYVs4XSxcbiAgICAgIGEyMSA9IGFbOV0sXG4gICAgICBhMjIgPSBhWzEwXSxcbiAgICAgIGEyMyA9IGFbMTFdO1xuICB2YXIgYTMwID0gYVsxMl0sXG4gICAgICBhMzEgPSBhWzEzXSxcbiAgICAgIGEzMiA9IGFbMTRdLFxuICAgICAgYTMzID0gYVsxNV07XG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7IC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcblxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xuXG4gIGlmICghZGV0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBkZXQgPSAxLjAgLyBkZXQ7XG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xuICBvdXRbMV0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcbiAgb3V0WzJdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XG4gIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xuICBvdXRbNF0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcbiAgb3V0WzVdID0gKGEwMSAqIGIwOCAtIGEwMCAqIGIxMCAtIGEwMyAqIGIwNikgKiBkZXQ7XG4gIG91dFs2XSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xuICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcbiAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XG4gIHJldHVybiBvdXQ7XG59XG4vKipcclxuICogR2VuZXJhdGVzIGEgMkQgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoIFdpZHRoIG9mIHlvdXIgZ2wgY29udGV4dFxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IEhlaWdodCBvZiBnbCBjb250ZXh0XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uKG91dCwgd2lkdGgsIGhlaWdodCkge1xuICBvdXRbMF0gPSAyIC8gd2lkdGg7XG4gIG91dFsxXSA9IDA7XG4gIG91dFsyXSA9IDA7XG4gIG91dFszXSA9IDA7XG4gIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xuICBvdXRbNV0gPSAwO1xuICBvdXRbNl0gPSAtMTtcbiAgb3V0WzddID0gMTtcbiAgb3V0WzhdID0gMTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcbiAgcmV0dXJuIFwibWF0MyhcIiArIGFbMF0gKyBcIiwgXCIgKyBhWzFdICsgXCIsIFwiICsgYVsyXSArIFwiLCBcIiArIGFbM10gKyBcIiwgXCIgKyBhWzRdICsgXCIsIFwiICsgYVs1XSArIFwiLCBcIiArIGFbNl0gKyBcIiwgXCIgKyBhWzddICsgXCIsIFwiICsgYVs4XSArIFwiKVwiO1xufVxuLyoqXHJcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XG4gIHJldHVybiBNYXRoLmh5cG90KGFbMF0sIGFbMV0sIGFbMl0sIGFbM10sIGFbNF0sIGFbNV0sIGFbNl0sIGFbN10sIGFbOF0pO1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgb3V0WzNdID0gYVszXSArIGJbM107XG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl07XG4gIG91dFs3XSA9IGFbN10gKyBiWzddO1xuICBvdXRbOF0gPSBhWzhdICsgYls4XTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XG4gIG91dFs1XSA9IGFbNV0gLSBiWzVdO1xuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XG4gIG91dFs4XSA9IGFbOF0gLSBiWzhdO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICBvdXRbMF0gPSBhWzBdICogYjtcbiAgb3V0WzFdID0gYVsxXSAqIGI7XG4gIG91dFsyXSA9IGFbMl0gKiBiO1xuICBvdXRbM10gPSBhWzNdICogYjtcbiAgb3V0WzRdID0gYVs0XSAqIGI7XG4gIG91dFs1XSA9IGFbNV0gKiBiO1xuICBvdXRbNl0gPSBhWzZdICogYjtcbiAgb3V0WzddID0gYVs3XSAqIGI7XG4gIG91dFs4XSA9IGFbOF0gKiBiO1xuICByZXR1cm4gb3V0O1xufVxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDMncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcbiAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcbiAgb3V0WzZdID0gYVs2XSArIGJbNl0gKiBzY2FsZTtcbiAgb3V0WzddID0gYVs3XSArIGJbN10gKiBzY2FsZTtcbiAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcbiAgcmV0dXJuIG91dDtcbn1cbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7UmVhZG9ubHlNYXQzfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiYgYVs2XSA9PT0gYls2XSAmJiBhWzddID09PSBiWzddICYmIGFbOF0gPT09IGJbOF07XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge1JlYWRvbmx5TWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF0sXG4gICAgICBhMSA9IGFbMV0sXG4gICAgICBhMiA9IGFbMl0sXG4gICAgICBhMyA9IGFbM10sXG4gICAgICBhNCA9IGFbNF0sXG4gICAgICBhNSA9IGFbNV0sXG4gICAgICBhNiA9IGFbNl0sXG4gICAgICBhNyA9IGFbN10sXG4gICAgICBhOCA9IGFbOF07XG4gIHZhciBiMCA9IGJbMF0sXG4gICAgICBiMSA9IGJbMV0sXG4gICAgICBiMiA9IGJbMl0sXG4gICAgICBiMyA9IGJbM10sXG4gICAgICBiNCA9IGJbNF0sXG4gICAgICBiNSA9IGJbNV0sXG4gICAgICBiNiA9IGJbNl0sXG4gICAgICBiNyA9IGJbN10sXG4gICAgICBiOCA9IGJbOF07XG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKTtcbn1cbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDMubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDMuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cblxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLCI8c2NyaXB0PlxyXG4gICAgaW1wb3J0IHsgb25Nb3VudCwgZ2V0Q29udGV4dCwgc2V0Q29udGV4dCB9IGZyb20gJ3N2ZWx0ZSdcclxuICAgIGltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnXHJcblxyXG4gICAgZXhwb3J0IGxldCB2aXNpYmxlID0gZmFsc2VcclxuICAgIGV4cG9ydCBsZXQgZW5hYmxlZCA9IGZhbHNlXHJcbiAgICBleHBvcnQgbGV0IGNyZWF0ZVNjZW5lID0gbnVsbFxyXG4gICAgZXhwb3J0IGxldCBjcmVhdGVFbmdpbmUgPSBudWxsXHJcblxyXG4gICAgY29uc3QgYXIgPSBnZXRDb250ZXh0KCdhcicpXHJcbiAgICBjb25zdCBtYXJrZXIgPSBnZXRDb250ZXh0KCdtYXJrZXInKVxyXG5cclxuICAgIGNvbnN0IGNvbnRleHQgPSB7XHJcbiAgICAgICAgc2NlbmU6IG51bGwsXHJcbiAgICAgICAgb2JqZWN0czogW11cclxuICAgIH1cclxuXHJcbiAgICBzZXRDb250ZXh0KCdnbCcsIGNvbnRleHQpXHJcblxyXG4gICAgbGV0IG1hcmtlclJvb3RWaXNpYmxlQWN0aW9uID0gbnVsbFxyXG5cclxuICAgIGxldCBjb250YWluZXJcclxuXHJcbiAgICAkOiBpZiAobWFya2VyUm9vdFZpc2libGVBY3Rpb24gIT0gbnVsbCkgbWFya2VyUm9vdFZpc2libGVBY3Rpb24odmlzaWJsZSlcclxuXHJcbiAgICBvbk1vdW50KCgpID0+IHtcclxuICAgICAgY29uc3QgX3NjcmlwdF8gPSByZXF1aXJlKCdzY3JpcHRqcycpXHJcbiAgICAgIF9zY3JpcHRfKCdodHRwczovL2Nkbi5iYWJ5bG9uanMuY29tL2JhYnlsb24uanMnLCAoKSA9PiB7XHJcbiAgICAgICAgX3NjcmlwdF8oW1xyXG4gICAgICAgICAgJ2h0dHBzOi8vY2RuLmJhYnlsb25qcy5jb20vbG9hZGVycy9iYWJ5bG9uanMubG9hZGVycy5taW4uanMnLFxyXG4gICAgICAgICAgJ2h0dHBzOi8vY2RuLmJhYnlsb25qcy5jb20vbWF0ZXJpYWxzTGlicmFyeS9iYWJ5bG9uanMubWF0ZXJpYWxzLm1pbi5qcycsXHJcbiAgICAgICAgICAnaHR0cHM6Ly9jZG4uYmFieWxvbmpzLmNvbS9wb3N0UHJvY2Vzc2VzTGlicmFyeS9iYWJ5bG9uanMucG9zdFByb2Nlc3MubWluLmpzJyxcclxuICAgICAgICAgICdodHRwczovL2Nkbi5iYWJ5bG9uanMuY29tL2d1aS9iYWJ5bG9uLmd1aS5taW4uanMnLFxyXG4gICAgICAgICAgJ2h0dHBzOi8vY2RuLmJhYnlsb25qcy5jb20vcHJvY2VkdXJhbFRleHR1cmVzTGlicmFyeS9iYWJ5bG9uanMucHJvY2VkdXJhbFRleHR1cmVzLm1pbi5qcyddLCdleHRlbnNpb25zJylcclxuXHJcbiAgICAgICAgX3NjcmlwdF8ucmVhZHkoJ2V4dGVuc2lvbnMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBlbmdpbmVDcmVhdG9yID0gKGNyZWF0ZUVuZ2luZSAhPSBudWxsKSA/IGNyZWF0ZUVuZ2luZSA6IChjbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY252ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgICAgIGNudi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCAoZSkgPT4ge2UucHJldmVudERlZmF1bHQoKTsgfSwgZmFsc2UpXHJcbiAgICAgICAgICAgIGNudC5hcHBlbmRDaGlsZChjbnYpXHJcbiAgICAgICAgICAgIGNvbnN0IGVuZ2luZSA9IG5ldyBCQUJZTE9OLkVuZ2luZShjbnYsIHRydWUpXHJcbiAgICAgICAgICAgIHJldHVybiBlbmdpbmVcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBlbmdpbmUgPSBlbmdpbmVDcmVhdG9yKGNvbnRhaW5lcilcclxuXHJcbiAgICAgICAgICBjb25zdCBjcmVhdG9yID0gKGNyZWF0ZVNjZW5lICE9IG51bGwpID8gY3JlYXRlU2NlbmUgOiBhc3luYyAoZW5naW5lKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBEZWZhdWx0IHNjZW5lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBsZXQgc2NlbmUgPSBuZXcgQkFCWUxPTi5TY2VuZShlbmdpbmUpXHJcbiAgICAgICAgICAgIHNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gdHJ1ZVxyXG4gICAgICAgICAgICAvLyBzY2VuZS5hdXRvQ2xlYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgc2NlbmUuY2xlYXJDb2xvciA9IG5ldyBCQUJZTE9OLkNvbG9yNCgwLCAwLCAwLCAwKVxyXG4gICAgICAgICAgICBsZXQgY2FtZXJhID0gbmV3IEJBQllMT04uQ2FtZXJhKCdjYW1lcmExJywgbmV3IEJBQllMT04uVmVjdG9yMy5aZXJvKCksIHNjZW5lKVxyXG4gICAgICAgICAgICBjYW1lcmEuYXR0YWNoQ29udHJvbChlbmdpbmUuZ2V0UmVuZGVyaW5nQ2FudmFzKCksIHRydWUpXHJcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXHJcbiAgICAgICAgICAgIGxldCBsaWdodDEgPSBuZXcgQkFCWUxPTi5IZW1pc3BoZXJpY0xpZ2h0KCdsaWdodDEnLCBuZXcgQkFCWUxPTi5WZWN0b3IzKDEsIDEsIDApLCBzY2VuZSlcclxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cclxuICAgICAgICAgICAgbGV0IGxpZ2h0MiA9IG5ldyBCQUJZTE9OLlBvaW50TGlnaHQoJ2xpZ2h0MicsIG5ldyBCQUJZTE9OLlZlY3RvcjMoMCwgMSwgLTEpLCBzY2VuZSlcclxuICAgICAgICAgICAgbGV0IGJveCA9IEJBQllMT04uTWVzaEJ1aWxkZXIuQ3JlYXRlQm94KCdib3gnLCB7IHdpZHRoOiAxLCBoZWlnaHQ6IDEsIHNpemU6IDEgfSwgc2NlbmUpXHJcbiAgICAgICAgICAgIGxldCBtYXJrZXJSb290ID0gbmV3IEJBQllMT04uVHJhbnNmb3JtTm9kZSgnbWFya2VyUm9vdCcpXHJcbiAgICAgICAgICAgIGJveC5wYXJlbnQgPSBtYXJrZXJSb290XHJcbiAgICAgICAgICAgIHJldHVybiBbc2NlbmUsIGNhbWVyYSwgbWFya2VyUm9vdF1cclxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgY3JlYXRvcihlbmdpbmUpLnRoZW4oKFtzY2VuZSwgY2FtZXJhLCBtYXJrZXJSb290XSkgPT4ge1xyXG4gICAgICAgICAgICBtYXJrZXJSb290LnNldEVuYWJsZWQoZmFsc2UpXHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gY29udGV4dC5vYmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgY29udGV4dC5vYmplY3RzW2ldLnBhcmVudCA9IG1hcmtlclJvb3RcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFya2VyUm9vdFZpc2libGVBY3Rpb24gPSAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICBtYXJrZXJSb290LnNldEVuYWJsZWQoZW5hYmxlZCA9PT0gJ3RydWUnICYmIHZhbHVlKVxyXG4gICAgICAgICAgICAgIHNjZW5lLnJlbmRlcigpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtlci53YXRjaCgobWF0KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKG1hdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0XyA9IG1hdDQuY3JlYXRlKClcclxuICAgICAgICAgICAgICAgIGlmIChhci5vcmllbnRhdGlvbiA9PT0gJ3BvcnRyYWl0Jykge1xyXG4gICAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVoobWF0XywgbWF0LCAtMSAqIE1hdGguUEkgLyAyKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgbWF0NC5jb3B5KG1hdF8sIG1hdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1hcmtlclJvb3Quc2V0UHJlVHJhbnNmb3JtTWF0cml4KEJBQllMT04uTWF0cml4LkZyb21BcnJheShtYXRfKSlcclxuICAgICAgICAgICAgICAgIHZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZpc2libGUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHNldFNpemUgPSAoZW5naW5lLCB3aWR0aCwgaGVpZ2h0LCBvcmllbnRhdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgIGlmIChlbmdpbmUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAncG9ydHJhaXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVuZ2luZS5zZXRTaXplKGhlaWdodCwgd2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgIGVuZ2luZS5yZXNpemUoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgZW5naW5lLnNldFNpemUod2lkdGgsIGhlaWdodClcclxuICAgICAgICAgICAgICAgICAgZW5naW5lLnJlc2l6ZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNldFNpemUoZW5naW5lLCBhci5zaXplLm9mZnNldFdpZHRoLCBhci5zaXplLm9mZnNldEhlaWdodCwgYXIub3JpZW50YXRpb24pXHJcblxyXG4gICAgICAgICAgICBhci5yZXNpemVkLndhdGNoKCgpID0+IHtcclxuICAgICAgICAgICAgICBzZXRTaXplKGVuZ2luZSwgYXIuc2l6ZS5vZmZzZXRXaWR0aCwgYXIuc2l6ZS5vZmZzZXRIZWlnaHQsIGFyLm9yaWVudGF0aW9uKVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgYXIucmVuZGVyLndhdGNoKCh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKCAhKGVuYWJsZWQgPT09ICd0cnVlJykgKSByZXR1cm5cclxuICAgICAgICAgICAgICBpZiAoIHZpc2libGUgJiYgc2NlbmUgIT0gbnVsbCApIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBjb250ZXh0Lm9iamVjdHMpIHtcclxuICAgICAgICAgICAgICAgICAgaWYgKGNvbnRleHQub2JqZWN0c1tpXS5jdXN0b20uYW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vYmplY3RzW2ldLmN1c3RvbS5hbmltYXRpb24udGljayh0KVxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzY2VuZS5yZW5kZXIoKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGFyLnNldHVwLndhdGNoKChtYXQpID0+IHtcclxuICAgICAgICAgICAgICBpZiAoY2FtZXJhICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNhbWVyYS5mcmVlemVQcm9qZWN0aW9uTWF0cml4KEJBQllMT04uTWF0cml4LkZyb21BcnJheShtYXQpKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NhbWVyYSBwcm9qZWN0aW9uIHNldDogJyArIG1hdClcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU2NlbmUgY3JlYXRlZCcpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9J2dsJyBiaW5kOnRoaXM9e2NvbnRhaW5lcn0+XHJcbiAgICA8c2xvdD48L3Nsb3Q+XHJcbjwvZGl2PlxyXG5cclxuIiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IG9uTW91bnQsIHNldENvbnRleHQsIGdldENvbnRleHQgfSBmcm9tICdzdmVsdGUnXHJcbiAgICBpbXBvcnQgeyBtYXQ0LCB2ZWMzLCBxdWF0IH0gZnJvbSAnZ2wtbWF0cml4J1xyXG4gICAgaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnXHJcblxyXG4gICAgZXhwb3J0IGxldCBlbmFibGVkID0gJ3RydWUnXHJcbiAgICBleHBvcnQgbGV0IHZpc2libGUgPSAndHJ1ZSdcclxuICAgIGV4cG9ydCBsZXQgZGlyZWN0VXBkYXRlID0gJ2ZhbHNlJ1xyXG4gICAgZXhwb3J0IGxldCBzY2FsZSA9ICcxJ1xyXG4gICAgZXhwb3J0IGxldCBjcmVhdGVTY2VuZSA9IG51bGxcclxuICAgIGV4cG9ydCBsZXQgY3JlYXRlRW5naW5lID0gbnVsbFxyXG5cclxuICAgIGNvbnN0IGFyID0gZ2V0Q29udGV4dCgnYXInKVxyXG4gICAgY29uc3QgbWFya2VyID0gZ2V0Q29udGV4dCgnbWFya2VyJylcclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgIHNjZW5lOiBudWxsLFxyXG4gICAgICAgIG9iamVjdHM6IFtdXHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29udGV4dCgnZ2wnLCBjb250ZXh0KVxyXG5cclxuICAgIGxldCBtYXJrZXJSb290VmlzaWJsZUFjdGlvbiA9IG51bGxcclxuXHJcbiAgICBsZXQgY29udGFpbmVyXHJcbiAgICBsZXQgbWF0X1xyXG5cclxuICAgICQ6IGlmIChtYXJrZXJSb290VmlzaWJsZUFjdGlvbiAhPSBudWxsKSBtYXJrZXJSb290VmlzaWJsZUFjdGlvbih2aXNpYmxlKVxyXG5cclxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2xjYW52YXMnKTtcclxuICAgIFxyXG5cclxuICAgIG9uTW91bnQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGVuZ2luZUNyZWF0b3IgPSAoY3JlYXRlRW5naW5lICE9IG51bGwpID8gY3JlYXRlRW5naW5lIDogKGNudCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjbnYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgY252LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIChlKSA9PiB7ZS5wcmV2ZW50RGVmYXVsdCgpOyB9LCBmYWxzZSlcclxuICAgICAgICAgICAgY250LmFwcGVuZENoaWxkKGNudilcclxuICAgICAgICAgICAgY29uc3QgZW5naW5lID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe1xyXG4gICAgICAgICAgICAgICAgY2FudmFzOiBjbnYsXHJcbiAgICAgICAgICAgICAgICBhbHBoYTogdHJ1ZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBlbmdpbmUuYXV0b0NsZWFyID0gZmFsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGVuZ2luZVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBlbmdpbmVDcmVhdG9yKGNvbnRhaW5lcilcclxuXHJcbiAgICAgICAgY29uc3Qgc2NlbmVDcmVhdG9yID0gKGNyZWF0ZVNjZW5lICE9IG51bGwpID8gY3JlYXRlU2NlbmUgOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBEZWZhdWx0IHNjZW5lIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBjb25zdCBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpXHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgYSBjYW1lcmEgYW5kIGEgbWFya2VyIHJvb3Qgb2JqZWN0IGZvciB5b3VyIFRocmVlLmpzIHNjZW5lLlxyXG4gICAgICAgICAgICBjb25zdCBjYW1lcmEgPSBuZXcgVEhSRUUuQ2FtZXJhKClcclxuICAgICAgICAgICAgY2FtZXJhLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZVxyXG4gICAgICAgICAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDApXHJcbiAgICAgICAgICAgIGNhbWVyYS51cGRhdGVNYXRyaXgoKVxyXG4gICAgICAgICAgICBzY2VuZS5hZGQoY2FtZXJhKVxyXG5cclxuICAgICAgICAgICAgY29uc3QgbGlnaHQxID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYpXHJcbiAgICAgICAgICAgIGxpZ2h0MS5wb3NpdGlvbi5zZXQoNDAwLCA1MDAsIDEwMClcclxuICAgICAgICAgICAgc2NlbmUuYWRkKGxpZ2h0MSlcclxuICAgICAgICAgICAgY29uc3QgbGlnaHQyID0gbmV3IFRIUkVFLlBvaW50TGlnaHQoMHhmZmZmZmYpXHJcbiAgICAgICAgICAgIGxpZ2h0Mi5wb3NpdGlvbi5zZXQoLTQwMCwgLTUwMCwgLTEwMClcclxuICAgICAgICAgICAgc2NlbmUuYWRkKGxpZ2h0MilcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlclJvb3QgPSBuZXcgVEhSRUUuR3JvdXAoKVxyXG4gICAgICAgICAgICBtYXJrZXJSb290Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZVxyXG5cclxuICAgICAgICAgICAgY29uc3QgY3ViZSA9IG5ldyBUSFJFRS5NZXNoKFxyXG4gICAgICAgICAgICAgICAgbmV3IFRIUkVFLkJveEdlb21ldHJ5KDEsMSwxKSxcclxuICAgICAgICAgICAgICAgIG5ldyBUSFJFRS5NZXNoTGFtYmVydE1hdGVyaWFsKHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogMHhmZmZmZmYsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lyZWZyYW1lOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjUsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIG1hcmtlclJvb3QuYWRkKGN1YmUpXHJcbiAgICAgICAgICAgIHNjZW5lLmFkZChtYXJrZXJSb290KVxyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coc2NlbmUpXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gW3NjZW5lLCBjYW1lcmEsIG1hcmtlclJvb3RdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzY2VuZUNyZWF0b3IoZW5naW5lLCBjb250YWluZXIpLnRoZW4oKFtzY2VuZSwgY2FtZXJhLCBtYXJrZXJSb290XSkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LnNjZW5lID0gc2NlbmVcclxuXHJcbiAgICAgICAgICAgIG1hcmtlclJvb3RWaXNpYmxlQWN0aW9uID0gKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXJSb290LnZpc2libGUgPSAoZW5hYmxlZCA9PT0gJ3RydWUnKSAmJiAodmFsdWUgPT09ICd0cnVlJylcclxuICAgICAgICAgICAgICAgIGlmIChlbmdpbmUuY2xlYXIpIGVuZ2luZS5jbGVhcigpXHJcbiAgICAgICAgICAgICAgICBlbmdpbmUucmVuZGVyKHNjZW5lLCBjYW1lcmEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtlci53YXRjaCgobWF0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0XyA9IG1hdDQuY3JlYXRlKClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5vcmllbnRhdGlvbiA9PT0gJ3BvcnRyYWl0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVoobWF0XywgbWF0LCAtMSAqIE1hdGguUEkgLyAyKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdDQuY29weShtYXRfLCBtYXQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3RVcGRhdGUgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJSb290Lm1hdHJpeC5mcm9tQXJyYXkobWF0XylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNjYWxlICE9ICcxJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyUm9vdC5zY2FsZS5zZXQoc2NhbGUsc2NhbGUsc2NhbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJSb290LnVwZGF0ZU1hdHJpeCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKi8gXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IG1hdDQuZ2V0VHJhbnNsYXRpb24odmVjMy5jcmVhdGUoKSwgbWF0XylcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBtYXQ0LmdldFJvdGF0aW9uKHF1YXQuY3JlYXRlKCksIG1hdF8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJSb290LnF1YXRlcm5pb24uZnJvbUFycmF5KHJvdGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJSb290LnBvc2l0aW9uLmZyb21BcnJheSh0cmFuc2xhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyUm9vdC5zY2FsZS5zZXQoc2NhbGUsc2NhbGUsc2NhbGUpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJSb290LnVwZGF0ZU1hdHJpeCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlclJvb3QudXBkYXRlV29ybGRNYXRyaXgoZmFsc2UsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAndHJ1ZSdcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZSA9ICdmYWxzZSdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiBjb250ZXh0Lm9iamVjdHMpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtlclJvb3QuYWRkKGNvbnRleHQub2JqZWN0c1tpXSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXIuc2V0dXAud2F0Y2goKG1hdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbWVyYSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FtZXJhLnByb2plY3Rpb25NYXRyaXguZnJvbUFycmF5KG1hdClcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ2FtZXJhIHByb2plY3Rpb24gc2V0OiAnICsgbWF0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2V0U2l6ZSA9IChlbmdpbmUsIHdpZHRoLCBoZWlnaHQsIG9yaWVudGF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW5naW5lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3JpZW50YXRpb24gPT09ICdwb3J0cmFpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5naW5lLnNldFNpemUoaGVpZ2h0LCB3aWR0aClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmdpbmUuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRTaXplKGVuZ2luZSwgYXIuc2l6ZS5vZmZzZXRXaWR0aCwgYXIuc2l6ZS5vZmZzZXRIZWlnaHQsIGFyLm9yaWVudGF0aW9uKVxyXG5cclxuICAgICAgICAgICAgYXIucmVzaXplZC53YXRjaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRTaXplKGVuZ2luZSwgYXIuc2l6ZS5vZmZzZXRXaWR0aCwgYXIuc2l6ZS5vZmZzZXRIZWlnaHQsIGFyLm9yaWVudGF0aW9uKVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgYXIucmVuZGVyLndhdGNoKCh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoICEoZW5hYmxlZCA9PT0gJ3RydWUnKSApIHJldHVyblxyXG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lICYmIHZpc2libGUgPT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmdpbmUuY2xlYXIpIGVuZ2luZS5jbGVhcigpXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIGluIGNvbnRleHQub2JqZWN0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGV4dC5vYmplY3RzW2ldLmN1c3RvbS5hbmltYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQub2JqZWN0c1tpXS5jdXN0b20uYW5pbWF0aW9uLnRpY2sodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbmdpbmUucmVuZGVyKHNjZW5lLCBjYW1lcmEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNjZW5lIGNyZWF0ZWRcIilcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiNkZWJ1Z2luZm8ge1xyXG4gICAgei1pbmRleDogMTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGxlZnQ6IDVweDtcclxuICAgIGJvdHRvbTogMTAwcHg7XHJcbiAgICBjb2xvcjogZGFya2dyZWVuO1xyXG59XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2IGJpbmQ6dGhpcz17Y29udGFpbmVyfSBjbGFzcz0nZ2wnPlxyXG4gICAgPHNsb3Q+PC9zbG90PlxyXG48L2Rpdj5cclxuXHJcbjxkaXYgaWQ9J2RlYnVnaW5mbycgPlxyXG4gICAgeyNpZiBtYXRffVxyXG4gICAgPGRpdj57bWF0X308L2Rpdj5cclxuICAgIHsvaWZ9XHJcbjwvZGl2PiIsImZ1bmN0aW9uIGUoZSx0PVwiY29tYmluZVwiKXtsZXQgcj10KycoJyxhPScnLG49MDtmb3IobGV0IHQgaW4gZSl7bGV0IG89ZVt0XTtpZihudWxsIT1vJiYocis9YSxyKz13KG8pP28uY29tcG9zaXRlTmFtZS5mdWxsTmFtZTpvLnRvU3RyaW5nKCkpLG4rPTEsMjU9PT1uKWJyZWFrO2E9JywgJ31yZXR1cm4gcis9JyknLHJ9ZnVuY3Rpb24gdChlLHQpe2xldCBhPXIodCxIKGUpKTtpZihlLnNob3J0TmFtZT10LCFlLmNvbXBvc2l0ZU5hbWUpcmV0dXJuIHZvaWQoZS5jb21wb3NpdGVOYW1lPWEpO2xldCBuPWUuY29tcG9zaXRlTmFtZTtuLnBhdGg9YS5wYXRoLG4uc2hvcnROYW1lPWEuc2hvcnROYW1lLG4uZnVsbE5hbWU9YS5mdWxsTmFtZX1mdW5jdGlvbiByKGUsdCl7bGV0IHIsYSxuLG89ZTtyZXR1cm4gdD8obj10LmNvbXBvc2l0ZU5hbWUsMD09PWUubGVuZ3RoPyhyPW4ucGF0aCxhPW4uZnVsbE5hbWUpOihyPW4ucGF0aC5jb25jYXQoW2VdKSxhPTA9PT1uLmZ1bGxOYW1lLmxlbmd0aD9lOm4uZnVsbE5hbWUrJy8nK2UpKToocj0wPT09ZS5sZW5ndGg/W106W2VdLGE9ZSkse3Nob3J0TmFtZTpvLGZ1bGxOYW1lOmEscGF0aDpyfX1mdW5jdGlvbiBhKHtub2RlOmU9W10sZnJvbTp0LHNvdXJjZTpyLHBhcmVudDphPXR8fHIsdG86bix0YXJnZXQ6byxjaGlsZDpsPW58fG8sc2NvcGU6cz17fSxtZXRhOmk9e30sZmFtaWx5OmY9e3R5cGU6J3JlZ3VsYXInfX09e30pe2xldCBjPWNlKGEpLHU9Y2UoZi5saW5rcykscD1jZShmLm93bmVycyksbT1bXSxkPXt9O2ZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKXtsZXQgcj1lW3RdO3ImJihtLnB1c2gociksdWUocixkKSl9bGV0IGg9e3NlcTptLG5leHQ6Y2UobCksbWV0YTppLHNjb3BlOnMsZmFtaWx5Ont0eXBlOmYudHlwZXx8J2Nyb3NzbGluaycsbGlua3M6dSxvd25lcnM6cH0scmVnOmR9O2ZvcihsZXQgZT0wO2U8dS5sZW5ndGg7ZSsrKVQodVtlXSkucHVzaChoKTtmb3IobGV0IGU9MDtlPHAubGVuZ3RoO2UrKylQKHBbZV0pLnB1c2goaCk7Zm9yKGxldCBlPTA7ZTxjLmxlbmd0aDtlKyspY1tlXS5uZXh0LnB1c2goaCk7cmV0dXJuIGh9ZnVuY3Rpb24gbihlLHQpe1BlPXtwYXJlbnQ6UGUsdmFsdWU6ZSx0ZW1wbGF0ZTp6KGUpLm1ldGEudGVtcGxhdGV8fFBlJiZQZS50ZW1wbGF0ZX07dHJ5e3JldHVybiB0KCl9ZmluYWxseXtQZT1IKFBlKX19ZnVuY3Rpb24gbyhlLHQpe2xldCByPShlLC4uLnQpPT5yLmNyZWF0ZShlLHQsdCk7ci5ncmFwaGl0ZT1hKHttZXRhOktlKCdldmVudCcscix0LGUpfSksci5jcmVhdGU9ZT0+KE5lKHIsZSksZSksci53YXRjaD1MKEllLHIpLHIubWFwPWU9PntsZXQgdCxhO0QoZSkmJih0PWUsYT1lLm5hbWUsZT1lLmZuKTtsZXQgbj1vKEsocixhKSx0KTtyZXR1cm4gR2UocixuLCdtYXAnLGUpLG59LHIuZmlsdGVyPWU9PkUoZSk/KGNvbnNvbGUuZXJyb3IoJy5maWx0ZXIoZm4pIGlzIGRlcHJlY2F0ZWQsIHVzZSAuZmlsdGVyTWFwIGluc3RlYWQnKSxsKHIsZSkpOkplKHIsJ2ZpbHRlcicsZS5mbixbZWUoe2ZuOmllfSldKSxyLmZpbHRlck1hcD1MKGwsciksci5wcmVwZW5kPWU9PntsZXQgdD1vKCcqIOKGkiAnK3Iuc2hvcnROYW1lLHtwYXJlbnQ6SChyKX0pLGE9TWUoKTtyZXR1cm4gYSYmeih0KS5zZXEucHVzaChhLnVwd2FyZCksR2UodCxyLCdwcmVwZW5kJyxlKSwkZShyLHQpLHR9O2xldCBuPU1lKCk7cmV0dXJuIG4mJih6KHIpLm1ldGEubmF0aXZlVGVtcGxhdGU9biksVGUocil9ZnVuY3Rpb24gbChlLHQpe3JldHVybiBKZShlLCdmaWx0ZXJNYXAnLHQsW1ooe2ZuOmllfSksWS5kZWZpbmVkKCldKX1mdW5jdGlvbiBzKGUsdCl7ZnVuY3Rpb24gcihlLHQpe2Yub2ZmKGUpLEYoZikuc2V0KGUsemUoTGUoZSxmLCdvbicsMSx0KSkpfWxldCBuPW5lKGUpLG89bmUoZSksbD1CZSgndXBkYXRlcycpLGk9TWUoKTtuLmFmdGVyPVt7dHlwZTonY29weScsdG86b31dLGkmJmkucGxhaW4ucHVzaChuKTtsZXQgZj17c3Vic2NyaWJlcnM6bmV3IE1hcCx1cGRhdGVzOmwsZGVmYXVsdFN0YXRlOmUsc3RhdGVSZWY6bixnZXRTdGF0ZSgpe2xldCBlPXFlKCk7cmV0dXJuIG9lKGUmJmUucmVnW24uaWRdP2UucmVnW24uaWRdOm4pfSxzZXRTdGF0ZShlKXtOZSh7dGFyZ2V0OmYscGFyYW1zOmUsZGVmZXI6MX0pfSxyZXNldCguLi5lKXtmb3IobGV0IHQgb2YgZSlmLm9uKHQsKCk9PmYuZGVmYXVsdFN0YXRlKTtyZXR1cm4gZn0sb24oZSx0KXtpZihBcnJheS5pc0FycmF5KGUpKWZvcihsZXQgYSBvZiBlKXIoYSx0KTtlbHNlIHIoZSx0KTtyZXR1cm4gZn0sb2ZmKGUpe2xldCB0PUYoZikuZ2V0KGUpO3JldHVybiB0JiYodCgpLEYoZikuZGVsZXRlKGUpKSxmfSxtYXAoZSx0KXtsZXQgcixhLG87RChlKSYmKHI9ZSxhPWUubmFtZSx0PWUuZmlyc3RTdGF0ZSxlPWUuZm4pO2xldCBsPWYuZ2V0U3RhdGUoKSxpPU1lKCk7aT9vPW51bGw6dm9pZCAwIT09bCYmKG89ZShsLHQpKTtsZXQgYz1zKG8se25hbWU6SyhmLGEpLGNvbmZpZzpyLHN0cmljdDowfSksdT1MZShmLGMsJ21hcCcsMCxlKTtyZXR1cm4gTShjKS5iZWZvcmU9W3t0eXBlOidtYXAnLGZuOmUsZnJvbTpufV0saSYmKGkucGxhaW4uaW5jbHVkZXMobil8fHUuc2VxLmluY2x1ZGVzKGkubG9hZGVyKXx8dS5zZXEudW5zaGlmdChpLmxvYWRlcikpLGN9LHdhdGNoKGUsdCl7aWYoIXR8fCF3KGUpKXtFKGUpfHxBKCd3YXRjaCByZXF1aXJlcyBmdW5jdGlvbiBoYW5kbGVyJyk7bGV0IHQ9TWUoKTtyZXR1cm4gdD90LndhdGNoLnB1c2goe29mOm4sZm46ZX0pOmUoZi5nZXRTdGF0ZSgpKSxJZShmLGUpfXJldHVybiBFKHQpfHxBKCdzZWNvbmQgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24nKSxlLndhdGNoKGU9PnQoZi5nZXRTdGF0ZSgpLGUpKX19O3JldHVybiBmLmdyYXBoaXRlPWEoe3Njb3BlOntzdGF0ZTpufSxub2RlOltZLmRlZmluZWQoKSxyZSh7c3RvcmU6bn0pLFkuY2hhbmdlZCh7c3RvcmU6b30pLHJlKHtzdG9yZTpvfSldLGNoaWxkOmwsbWV0YTpLZSgnc3RvcmUnLGYsdCl9KSxIZSYmdm9pZCAwPT09ZSYmQShcImN1cnJlbnQgc3RhdGUgY2FuJ3QgYmUgdW5kZWZpbmVkLCB1c2UgbnVsbCBpbnN0ZWFkXCIpLGkmJih6KGYpLm1ldGEubmF0aXZlVGVtcGxhdGU9aSksZmUoZixbbF0pLFRlKGYpfWZ1bmN0aW9uIGkoLi4uZSl7bGV0IHQscixhOzA9PT1lLmxlbmd0aCYmQSgnYXQgbGVhc3Qgb25lIGFyZ3VtZW50IHJlcXVpcmVkJyksX2UoZVswXSwodCxyKT0+e2E9dCxlPXJ9KTtsZXQgbixvLGw9ZVtlLmxlbmd0aC0xXTtpZihFKGwpPyhyPWUuc2xpY2UoMCwtMSksdD1sKTpyPWUsMT09PXIubGVuZ3RoKXtsZXQgZT1yWzBdO3EoZSl8fChuPWUsbz0xKX1yZXR1cm4gb3x8KG49cix0JiYodD1VZSh0KSkpLFZlKEFycmF5LmlzQXJyYXkobiksbixhLHQpfWZ1bmN0aW9uIGYoZSx0KXtsZXQgcj1vKGUsdCksbj1yLmRlZmF1bHRDb25maWcuaGFuZGxlcnx8KCgpPT4oY29uc29sZS5lcnJvcihcIm5vIGhhbmRsZXIgdXNlZCBpbiBcIityLmdldFR5cGUoKSksUHJvbWlzZS5yZXNvbHZlKCkpKTt6KHIpLm1ldGEub25Db3B5PVsncnVubmVyJ10seihyKS5tZXRhLnVuaXQ9ci5raW5kPSdlZmZlY3QnLHIudXNlPWU9PihFKGUpfHxBKCcudXNlIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uJyksbj1lLHIpO2xldCBpPXIuZmluYWxseT1CZSgnZmluYWxseScpLGY9ci5kb25lPWwoaSx7bmFtZWQ6J2RvbmUnLGZuKHtzdGF0dXM6ZSxwYXJhbXM6dCxyZXN1bHQ6cn0pe2lmKCdkb25lJz09PWUpcmV0dXJue3BhcmFtczp0LHJlc3VsdDpyfX19KSxjPXIuZmFpbD1sKGkse25hbWVkOidmYWlsJyxmbih7c3RhdHVzOmUscGFyYW1zOnQsZXJyb3I6cn0pe2lmKCdmYWlsJz09PWUpcmV0dXJue3BhcmFtczp0LGVycm9yOnJ9fX0pLHU9ci5kb25lRGF0YT1mLm1hcCh7bmFtZWQ6J2RvbmVEYXRhJyxmbjooe3Jlc3VsdDplfSk9PmV9KSxwPXIuZmFpbERhdGE9Yy5tYXAoe25hbWVkOidmYWlsRGF0YScsZm46KHtlcnJvcjplfSk9PmV9KSxtPWEoe3Njb3BlOntnZXRIYW5kbGVyOnIudXNlLmdldEN1cnJlbnQ9KCk9Pm4sZmluYWxseTppfSxub2RlOlt0ZSh7Zm4oe3BhcmFtczplLHJlcTp0fSx7ZmluYWxseTpyLGdldEhhbmRsZXI6YX0se3BhZ2U6bn0pe2xldCBvLGw9V2Uoe3BhcmFtczplLHJlcTp0LG9rOjEsYW55d2F5OnIscGFnZTpufSkscz1XZSh7cGFyYW1zOmUscmVxOnQsb2s6MCxhbnl3YXk6cixwYWdlOm59KTt0cnl7bz1hKCkoZSl9Y2F0Y2goZSl7cmV0dXJuIHZvaWQgcyhlKX1EKG8pJiZFKG8udGhlbik/by50aGVuKGwscyk6bChvKX19KV0sbWV0YTp7b3A6J2Z4JyxmeDoncnVubmVyJyxvbkNvcHk6WydmaW5hbGx5J119fSk7eihyKS5zY29wZS5ydW5uZXI9bSx6KHIpLnNlcS5wdXNoKFooe2ZuOihlLHQscik9Pkgocik/e3BhcmFtczplLHJlcTp7cnMoZSl7fSxyaihlKXt9fX06ZX0pLHRlKHtmbjooZSx7cnVubmVyOnR9KT0+KE5lKHt0YXJnZXQ6dCxwYXJhbXM6ZSxkZWZlcjoxfSksZS5wYXJhbXMpfSkpLHIuY3JlYXRlPWU9PntsZXQgdD0oKCk9PntsZXQgZT17fTtyZXR1cm4gZS5yZXE9bmV3IFByb21pc2UoKHQscik9PntlLnJzPXQsZS5yaj1yfSksZS5yZXEuY2F0Y2goKCk9Pnt9KSxlfSkoKTtyZXR1cm4gTmUocix7cGFyYW1zOmUscmVxOnR9KSx0LnJlcX07bGV0IGQ9ci5pbkZsaWdodD1zKDAse25hbWVkOidpbkZsaWdodCd9KS5vbihyLGU9PmUrMSkub24oaSxlPT5lLTEpLGg9ci5wZW5kaW5nPWQubWFwKHtmbjplPT5lPjAsbmFtZWQ6J3BlbmRpbmcnfSk7cmV0dXJuIGZlKHIsW2ksZixjLHUscCxoLGQsbV0pLHJ9ZnVuY3Rpb24gYyhlKXtsZXQgdDtfZShlLChyLGEpPT57dD1yLGU9YX0pO2xldCByLHtzb3VyY2U6YSxlZmZlY3Q6bixtYXBQYXJhbXM6b309ZSxsPWYoZSx0KSx7cnVubmVyOnN9PXoobCkuc2NvcGUsYz0oe3BhcmFtczplLHJlcTp0fSx7ZmluYWxseTpyLGVmZmVjdDphfSx7YTpuLHBhZ2U6bH0pPT5OZSh7dGFyZ2V0OmEscGFyYW1zOntwYXJhbXM6byhlLG4pLHJlcTp7cnM6V2Uoe3BhcmFtczplLHJlcTp0LG9rOjEsYW55d2F5OnIscGFnZTpsfSkscmo6V2Uoe3BhcmFtczplLHJlcTp0LG9rOjAsYW55d2F5OnIscGFnZTpsfSl9fSxwYWdlOmwsZGVmZXI6MX0pO2lmKGEpe2xldCBlO3EoYSk/ZT1hOihlPWkoYSksZmUobCxbZV0pKTtsZXQgdD1YKHtmcm9tOidzdG9yZScsc3RvcmU6TShlKSx0bzonYSd9KTtyPVt0ZSh7Zm46ZT0+ZX0pLHQsWih7Zm46Y30pXSx1ZSh0LHMucmVnKX1lbHNlIHI9W3RlKHtmbjpjfSldO3JldHVybiBzLnNjb3BlLmVmZmVjdD1uLHMubWV0YS5vbkNvcHkucHVzaCgnZWZmZWN0Jykscy5zZXEuc3BsaWNlKDAsMSwuLi5yKSwkZShuLGwpLGx9ZnVuY3Rpb24gdShlLHQpe2xldCByPXt9O3JldHVybiBRZSh0LCh0LGEpPT57bGV0IG49clthXT1vKGEse3BhcmVudDpIKGUpfSk7ZS5vbihuLHQpLCRlKGUsbil9KSxyfWZ1bmN0aW9uIHAoZSx0KXtsZXQgcj1uZXcgU2V0LG49bmV3IFNldCxsPW5ldyBTZXQsaT1uZXcgU2V0LGM9YSh7ZmFtaWx5Ont0eXBlOidkb21haW4nfX0pLHU9e2hpc3Rvcnk6e2RvbWFpbnM6cixzdG9yZXM6bixlZmZlY3RzOmwsZXZlbnRzOml9LGdyYXBoaXRlOmN9O2MubWV0YT1LZSgnZG9tYWluJyx1LHQsZSk7bGV0W20sZCxoLGddPVsnb25FdmVudCcsJ29uRWZmZWN0Jywnb25TdG9yZScsJ29uRG9tYWluJ10ubWFwKEJlKTt1Lmhvb2tzPXtldmVudDptLGVmZmVjdDpkLHN0b3JlOmgsZG9tYWluOmd9LHUub25DcmVhdGVFdmVudD1ZZShtLGksdSksdS5vbkNyZWF0ZUVmZmVjdD1ZZShkLGwsdSksdS5vbkNyZWF0ZVN0b3JlPVllKGgsbix1KSx1Lm9uQ3JlYXRlRG9tYWluPVllKGcscix1KSx1LmNyZWF0ZUV2ZW50PXUuZXZlbnQ9KGUsdCk9Pm0obyhlLHtwYXJlbnQ6dSxjb25maWc6dH0pKSx1LmNyZWF0ZUVmZmVjdD11LmVmZmVjdD0oZSx0KT0+ZChmKGUse3BhcmVudDp1LGNvbmZpZzp0fSkpLHUuY3JlYXRlRG9tYWluPXUuZG9tYWluPShlLHQpPT5wKHtuYW1lOmUscGFyZW50OnUsY29uZmlnOnR9KSx1LmNyZWF0ZVN0b3JlPXUuc3RvcmU9KGUsdCk9PmgocyhlLHtwYXJlbnQ6dSxjb25maWc6dH0pKSxUZSh1KTtsZXQgeT1IKHUpO3JldHVybiB5JiYoUWUodS5ob29rcywoZSx0KT0+e1JlKHtmcm9tOmUsdG86eS5ob29rc1t0XX0pfSkseS5ob29rcy5kb21haW4odSkpLHV9ZnVuY3Rpb24gbShlKXtqKGUpO2xldCB0PWsgaW4gZT9lW2tdKCk6ZTt0LnN1YnNjcmliZXx8QSgnZXhwZWN0IG9ic2VydmFibGUgdG8gaGF2ZSAuc3Vic2NyaWJlJyk7bGV0IHI9bygpLGE9UShqZSxyLHZvaWQgMCk7cmV0dXJuIHQuc3Vic2NyaWJlKHtuZXh0OnIsZXJyb3I6YSxjb21wbGV0ZTphfSkscn1mdW5jdGlvbiBkKC4uLmUpe2xldCB0LHIsbjtfZShlWzBdLCh0LHIpPT57bj10LGU9cn0pO2xldCBsLFtpLGYsYyx1PTBdPWU7dm9pZCAwPT09ZiYmJ3NvdXJjZSdpbiBpJiYoJ2Nsb2NrJ2luIGkmJm51bGw9PWkuY2xvY2smJkEoJ2NvbmZpZy5jbG9jayBzaG91bGQgYmUgZGVmaW5lZCcpLGY9aS5jbG9jayxjPWkuZm4sdT1pLmdyZWVkeSx0PWkudGFyZ2V0LHI9aS5uYW1lLGw9aS5zaWQsaT1pLnNvdXJjZSksdm9pZCAwPT09ZiYmKGY9aSkscj1ufHxyfHxpLnNob3J0TmFtZSxpPVplKGkpLGY9WmUoZiksJ2Jvb2xlYW4nPT10eXBlb2YgYyYmKHU9YyxjPW51bGwpO2xldCBwPU1lKCksbT0hIXQ7dHx8KHEoaSkmJnEoZik/dD1zKGM/YyhvZShNKGkpKSxvZShNKGYpKSk6b2UoTShpKSkse25hbWU6cixzaWQ6bH0pOih0PW8ocikscCYmeih0KS5zZXEucHVzaChwLmxvYWRlcikpKTtsZXQgZD1tJiZ3KHQpJiZ6KHQpLm1ldGEubmF0aXZlVGVtcGxhdGU7aWYocShpKSlmZShpLFtPZShmLHQse3Njb3BlOntmbjpjLHRhcmdldFRlbXBsYXRlOmR9LG5vZGU6W3AmJnAubG9hZGVyLCF1JiZXKHtwcmlvcml0eTonc2FtcGxlcid9KSxYKHtzdG9yZTpNKGkpLHRvOmM/J2EnOidzdGFjayd9KSxjJiZaKHtmbjpzZX0pLHAmJm0mJnAudXB3YXJkXSxtZXRhOntvcDonc2FtcGxlJyxzYW1wbGU6J3N0b3JlJ319KV0pO2Vsc2V7bGV0IGU9bmUoMCkscj1uZSgpLG49bmUoKTtwJiZwLnBsYWluLnB1c2goZSxyLG4pLFRlKGEoe3BhcmVudDppLG5vZGU6W3JlKHtzdG9yZTpyfSksWCh7ZnJvbTondmFsdWUnLHN0b3JlOjEsdGFyZ2V0OmV9KV0sZmFtaWx5Ontvd25lcnM6W2ksdCxmXSxsaW5rczp0fSxtZXRhOntvcDonc2FtcGxlJyxzYW1wbGU6J3NvdXJjZSd9fSkpLGZlKGksW09lKGYsdCx7c2NvcGU6e2ZuOmMsdGFyZ2V0VGVtcGxhdGU6ZH0sbm9kZTpbcCYmcC5sb2FkZXIscmUoe3N0b3JlOm59KSxYKHtzdG9yZTplfSksZWUoe2ZuOmU9PmV9KSwhdSYmVyh7cHJpb3JpdHk6J3NhbXBsZXInfSksWCh7c3RvcmU6cn0pLFgoe3N0b3JlOm4sdG86J2EnfSksYyYmWih7Zm46bGV9KSxwJiZtJiZwLnVwd2FyZF0sbWV0YTp7b3A6J3NhbXBsZScsc2FtcGxlOidjbG9jayd9fSldKX1yZXR1cm4gdH1mdW5jdGlvbiBoKGUsdCl7bGV0IHI9e29wOidndWFyZCd9LG49J2d1YXJkJztfZShlLChhLG8pPT57YS5uYW1lJiYobj1hLm5hbWUpLHIuY29uZmlnPWEsW2UsdF09b30pLHR8fChlPSh0PWUpLnNvdXJjZSk7bGV0e2ZpbHRlcjpsLGdyZWVkeTpzLG5hbWU6Zj1ufT10LGM9dC50YXJnZXR8fG8oZixyLmNvbmZpZyk7cmV0dXJuIHcoZSl8fChlPWkoZSkpLHcobCk/ZCh7c291cmNlOmwsY2xvY2s6ZSx0YXJnZXQ6VGUoYSh7bm9kZTpbZWUoe2ZuOih7Z3VhcmQ6ZX0pPT5lfSksWih7Zm46KHtkYXRhOmV9KT0+ZX0pXSxjaGlsZDpjLG1ldGE6cixmYW1pbHk6e293bmVyczpbZSxsLGNdLGxpbmtzOmN9fSkpLGZuOihlLHQpPT4oe2d1YXJkOmUsZGF0YTp0fSksZ3JlZWR5OnMsbmFtZTpmfSk6KEUobCl8fEEoJ2BmaWx0ZXJgIHNob3VsZCBiZSBmdW5jdGlvbiBvciB1bml0JyksT2UoZSxjLHtzY29wZTp7Zm46bH0sbm9kZTpbZWUoe2ZuOmllfSldLG1ldGE6cn0pKSxjfWZ1bmN0aW9uIGcodCl7bGV0IHI9byhlKHQsJ21lcmdlJykpO3JldHVybiBSZSh7ZnJvbTp0LHRvOnIsbWV0YTp7b3A6J21lcmdlJ319KSxyfWZ1bmN0aW9uIHkoZSx0LHIpe2lmKHEoZSkpcmV0dXJuIGU7aWYodyhlKSl7bGV0IGEsbj1IKGUpO3JldHVybiBOKGUpJiYoYT1zKHQse3BhcmVudDpuLG5hbWU6ZS5zaG9ydE5hbWUsyZQ6cn0pLm9uKGUsKGUsdCk9PnQpKSx4KGUpJiYoYT1zKHQse3BhcmVudDpuLG5hbWU6ZS5zaG9ydE5hbWUsyZQ6cn0pLm9uKGUuZG9uZSwoZSx7cmVzdWx0OnR9KT0+dCkpLG4mJm4uaG9va3Muc3RvcmUoYSksYX1sZXQgYT17fTtyZXR1cm4gUWUoZSwoZSx0KT0+e2FbdF09cShlKT9lOnMoZSx7bmFtZTp0fSl9KSxhfWZ1bmN0aW9uIGIoZSx0KXtsZXQgcj17fSxhPXEoZSk/ZS51cGRhdGVzOmU7cmV0dXJuIFFlKHQsKGUsdCk9PntyW3RdPWEuZmlsdGVyKHtmbjplfSksYT1hLmZpbHRlcih7Zm46dD0+IWUodCl9KX0pLHIuX189YSxyfWltcG9ydCBrIGZyb20nc3ltYm9sLW9ic2VydmFibGUnO3ZhciB2PXtfX3Byb3RvX186bnVsbCxzdG9yZTpcInN0b3JlXCIsZXZlbnQ6XCJldmVudFwiLGVmZmVjdDpcImVmZmVjdFwiLGRvbWFpbjpcImRvbWFpblwifTtsZXQgdz1lPT4oRShlKXx8RChlKSkmJidraW5kJ2luIGU7Y29uc3QgUz1lPT50PT53KHQpJiZ0LmtpbmQ9PT1lO2xldCBxPVMoXCJzdG9yZVwiKSxOPVMoXCJldmVudFwiKSx4PVMoXCJlZmZlY3RcIiksXz1TKFwiZG9tYWluXCIpO3ZhciBDPXtfX3Byb3RvX186bnVsbCx1bml0Oncsc3RvcmU6cSxldmVudDpOLGVmZmVjdDp4LGRvbWFpbjpffTtsZXQgQT1lPT57dGhyb3cgRXJyb3IoZSl9LEQ9ZT0+J29iamVjdCc9PXR5cGVvZiBlJiZudWxsIT09ZSxFPWU9PidmdW5jdGlvbic9PXR5cGVvZiBlLGo9ZT0+e0QoZSl8fEUoZSl8fEEoJ2V4cGVjdCB2YWx1ZSB0byBiZSBhbiBvYmplY3QnKX0sej1lPT5lLmdyYXBoaXRlfHxlLFQ9ZT0+ZS5mYW1pbHkub3duZXJzLFA9ZT0+ZS5mYW1pbHkubGlua3MsTT1lPT5lLnN0YXRlUmVmLE89ZT0+ZS5jb25maWcsUj1lPT5lLsmULEk9ZT0+ZS52YWx1ZSxGPWU9PmUuc3Vic2NyaWJlcnMsSD1lPT5lLnBhcmVudCwkPShlLHQpPT4nJytlLnNob3J0TmFtZSt0LEs9KGUsdCk9Pm51bGw9PXQ/JChlLCcg4oaSIConKTp0O2NvbnN0IEI9KCk9PntsZXQgZT0wO3JldHVybigpPT4oKytlKS50b1N0cmluZygzNil9O2xldCBHPUIoKSxKPUIoKSxMPShlLHQpPT5lLmJpbmQobnVsbCx0KSxRPShlLHQscik9PmUuYmluZChudWxsLHQscik7Y29uc3QgVT0oZSx0LHIpPT4oe2lkOkooKSx0eXBlOmUsZGF0YTpyLGhhc1JlZjp0fSk7bGV0IFY9MCxXPSh7cHJpb3JpdHk6ZT1cImJhcnJpZXJcIn0pPT5VKCdiYXJyaWVyJywwLHtiYXJyaWVySUQ6KytWLHByaW9yaXR5OmV9KSxYPSh7ZnJvbTplPVwic3RvcmVcIixzdG9yZTp0LHRhcmdldDpyLHRvOmE9KHI/J3N0b3JlJzonc3RhY2snKX0pPT5VKCdtb3YnLCdzdG9yZSc9PT1lLHtmcm9tOmUsc3RvcmU6dCx0bzphLHRhcmdldDpyfSksWT17ZGVmaW5lZDooKT0+VSgnY2hlY2snLDAse3R5cGU6J2RlZmluZWQnfSksY2hhbmdlZDooe3N0b3JlOmV9KT0+VSgnY2hlY2snLDEse3R5cGU6J2NoYW5nZWQnLHN0b3JlOmV9KX0sWj1RKFUsJ2NvbXB1dGUnLDApLGVlPVEoVSwnZmlsdGVyJywwKSx0ZT1RKFUsJ3J1bicsMCkscmU9KHtzdG9yZTplfSk9Plgoe2Zyb206J3N0YWNrJyx0YXJnZXQ6ZX0pO3ZhciBhZT17X19wcm90b19fOm51bGwsYmFycmllcjpXLG1vdjpYLGNoZWNrOlksY29tcHV0ZTpaLGZpbHRlcjplZSxydW46dGUsdXBkYXRlOnJlfTtsZXQgbmU9ZT0+KHtpZDpKKCksY3VycmVudDplfSksb2U9KHtjdXJyZW50OmV9KT0+ZSxsZT0oZSx7Zm46dH0se2E6cn0pPT50KGUsciksc2U9KGUse2ZuOnR9LHthOnJ9KT0+dChyLGUpLGllPShlLHtmbjp0fSk9PnQoZSksZmU9KGUsdCk9PntsZXQgcj16KGUpO2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKXtsZXQgYT16KHRbZV0pOydkb21haW4nIT09ci5mYW1pbHkudHlwZSYmKGEuZmFtaWx5LnR5cGU9J2Nyb3NzbGluaycpLFQoYSkucHVzaChyKSxQKHIpLnB1c2goYSl9fTtjb25zdCBjZT0oZT1bXSk9PntsZXQgdD1bXTtpZihBcnJheS5pc0FycmF5KGUpKWZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKUFycmF5LmlzQXJyYXkoZVtyXSk/dC5wdXNoKC4uLmVbcl0pOnQucHVzaChlW3JdKTtlbHNlIHQucHVzaChlKTtyZXR1cm4gdC5tYXAoeil9O2xldCB1ZT0oe2hhc1JlZjplLHR5cGU6dCxkYXRhOnJ9LGEpPT57bGV0IG47ZSYmKG49ci5zdG9yZSxhW24uaWRdPW4pLCdtb3YnPT09dCYmJ3N0b3JlJz09PXIudG8mJihuPXIudGFyZ2V0LGFbbi5pZF09bil9LHBlPW51bGw7Y29uc3QgbWU9KGUsdCk9PntpZighZSlyZXR1cm4gdDtpZighdClyZXR1cm4gZTtsZXQgcixhPWUudi50eXBlPT09dC52LnR5cGU7cmV0dXJuKGEmJmUudi5pZD50LnYuaWR8fCFhJiYnc2FtcGxlcic9PT1lLnYudHlwZSkmJihyPWUsZT10LHQ9cikscj1tZShlLnIsdCksZS5yPWUubCxlLmw9cixlfSxkZT1bXTtsZXQgaGU9MDtmb3IoO2hlPDU7KWRlLnB1c2goe2ZpcnN0Om51bGwsbGFzdDpudWxsLHNpemU6MH0pLGhlKz0xO2NvbnN0IGdlPSgpPT57Zm9yKGxldCBlPTA7ZTw1O2UrKyl7bGV0IHQ9ZGVbZV07aWYodC5zaXplPjApe2lmKDI9PT1lfHwzPT09ZSl7dC5zaXplLT0xO2xldCBlPXBlLnY7cmV0dXJuIHBlPW1lKHBlLmwscGUuciksZX0xPT09dC5zaXplJiYodC5sYXN0PW51bGwpO2xldCByPXQuZmlyc3Q7cmV0dXJuIHQuZmlyc3Q9ci5yLHQuc2l6ZS09MSxyLnZ9fX0seWU9KGUsdCxyLGEsbik9PmJlKDAse2E6bnVsbCxiOm51bGwsbm9kZTpyLHBhcmVudDphLHZhbHVlOm4scGFnZTp0fSxlKSxiZT0oZSx0LHIsYT0wKT0+e2xldCBuPWtlKHIpLG89ZGVbbl0sbD17djp7aWR4OmUsc3RhY2s6dCx0eXBlOnIsaWQ6YX0sbDowLHI6MH07Mj09PW58fDM9PT1uP3BlPW1lKHBlLGwpOigwPT09by5zaXplP28uZmlyc3Q9bDpvLmxhc3Qucj1sLG8ubGFzdD1sKSxvLnNpemUrPTF9LGtlPWU9Pntzd2l0Y2goZSl7Y2FzZSdjaGlsZCc6cmV0dXJuIDA7Y2FzZSdwdXJlJzpyZXR1cm4gMTtjYXNlJ2JhcnJpZXInOnJldHVybiAyO2Nhc2Unc2FtcGxlcic6cmV0dXJuIDM7Y2FzZSdlZmZlY3QnOnJldHVybiA0O2RlZmF1bHQ6cmV0dXJuLTF9fSx2ZT1uZXcgU2V0O2xldCB3ZT0wLFNlPW51bGwscWU9KCk9PlNlLE5lPShlLHQscik9PntsZXQgYT1TZSxuPW51bGw7aWYoZS50YXJnZXQmJih0PWUucGFyYW1zLHI9ZS5kZWZlcixhPSdwYWdlJ2luIGU/ZS5wYWdlOmEsZS5zdGFjayYmKG49ZS5zdGFjayksZT1lLnRhcmdldCksQXJyYXkuaXNBcnJheShlKSlmb3IobGV0IHI9MDtyPGUubGVuZ3RoO3IrKyl5ZSgncHVyZScsYSx6KGVbcl0pLG4sdFtyXSk7ZWxzZSB5ZSgncHVyZScsYSx6KGUpLG4sdCk7ciYmd2V8fCgoKT0+e2xldCBlLHQscixhLG4sbyxsPXthbHJlYWR5U3RhcnRlZDp3ZSxjdXJyZW50UGFnZTpTZX07d2U9MTtlOmZvcig7YT1nZSgpOyl7bGV0e2lkeDpsLHN0YWNrOnMsdHlwZTppfT1hO3I9cy5ub2RlLFNlPW49cy5wYWdlLG89KG58fHIpLnJlZztsZXQgZj17ZmFpbDowLHNjb3BlOnIuc2NvcGV9O2U9dD0wO2ZvcihsZXQgYT1sO2E8ci5zZXEubGVuZ3RoJiYhZTthKyspe2xldCBjPXIuc2VxW2FdLHU9Yy5kYXRhO3N3aXRjaChjLnR5cGUpe2Nhc2UnYmFycmllcic6e2xldCBlPXUuYmFycmllcklEO24mJihlPWAke24uZnVsbElEfV8ke2V9YCk7bGV0IHQ9dS5wcmlvcml0eTtpZihhIT09bHx8aSE9PXQpe3ZlLmhhcyhlKXx8KHZlLmFkZChlKSxiZShhLHMsdCxlKSk7Y29udGludWUgZX12ZS5kZWxldGUoZSk7YnJlYWt9Y2FzZSdtb3YnOntsZXQgZTtzd2l0Y2godS5mcm9tKXtjYXNlJ3N0YWNrJzplPUkocyk7YnJlYWs7Y2FzZSdhJzplPXMuYTticmVhaztjYXNlJ2InOmU9cy5iO2JyZWFrO2Nhc2UndmFsdWUnOmU9dS5zdG9yZTticmVhaztjYXNlJ3N0b3JlJzpvW3Uuc3RvcmUuaWRdfHwocy5wYWdlPW49bnVsbCxvPXIucmVnKSxlPW9lKG9bdS5zdG9yZS5pZF0pfXN3aXRjaCh1LnRvKXtjYXNlJ3N0YWNrJzpzLnZhbHVlPWU7YnJlYWs7Y2FzZSdhJzpzLmE9ZTticmVhaztjYXNlJ2InOnMuYj1lO2JyZWFrO2Nhc2Unc3RvcmUnOm9bdS50YXJnZXQuaWRdLmN1cnJlbnQ9ZX1icmVha31jYXNlJ2NoZWNrJzpzd2l0Y2godS50eXBlKXtjYXNlJ2RlZmluZWQnOnQ9dm9pZCAwPT09SShzKTticmVhaztjYXNlJ2NoYW5nZWQnOnQ9SShzKT09PW9lKG9bdS5zdG9yZS5pZF0pfWJyZWFrO2Nhc2UnZmlsdGVyJzp0PSF4ZShmLHUscyk7YnJlYWs7Y2FzZSdydW4nOmlmKGEhPT1sfHwnZWZmZWN0JyE9PWkpe2JlKGEscywnZWZmZWN0Jyk7Y29udGludWUgZX1jYXNlJ2NvbXB1dGUnOnMudmFsdWU9eGUoZix1LHMpfWU9Zi5mYWlsfHx0fWlmKCFlKWZvcihsZXQgZT0wO2U8ci5uZXh0Lmxlbmd0aDtlKyspeWUoJ2NoaWxkJyxuLHIubmV4dFtlXSxzLEkocykpfXdlPWwuYWxyZWFkeVN0YXJ0ZWQsU2U9bC5jdXJyZW50UGFnZX0pKCl9O2NvbnN0IHhlPShlLHtmbjp0fSxyKT0+e3RyeXtyZXR1cm4gdChJKHIpLGUuc2NvcGUscil9Y2F0Y2godCl7Y29uc29sZS5lcnJvcih0KSxlLmZhaWw9MX19O2xldCBfZT0oZSx0KT0+e1IoZSkmJnQoTyhlKSxSKGUpKX07Y29uc3QgQ2U9KGUsdCk9PntsZXQgcj1lLmluZGV4T2YodCk7LTEhPT1yJiZlLnNwbGljZShyLDEpfSxBZT0oZSx0KT0+e0NlKGUubmV4dCx0KSxDZShUKGUpLHQpLENlKFAoZSksdCl9LERlPShlLHQscik9PntsZXQgYTtlLm5leHQubGVuZ3RoPTAsZS5zZXEubGVuZ3RoPTAsZS5zY29wZT1udWxsO2xldCBuPVAoZSk7Zm9yKDthPW4ucG9wKCk7KUFlKGEsZSksKHR8fHImJiFlLm1ldGEuc2FtcGxlfHwnY3Jvc3NsaW5rJz09PWEuZmFtaWx5LnR5cGUpJiZEZShhLHQscik7Zm9yKG49VChlKTthPW4ucG9wKCk7KUFlKGEsZSksciYmJ2Nyb3NzbGluayc9PT1hLmZhbWlseS50eXBlJiZEZShhLHQscil9LEVlPWU9PmUuY2xlYXIoKTtsZXQgamU9KGUse2RlZXA6dH09e30pPT57bGV0IHI9MDtpZihlLm93bmVyU2V0JiZlLm93bmVyU2V0LmRlbGV0ZShlKSxxKGUpKUVlKEYoZSkpO2Vsc2UgaWYoXyhlKSl7cj0xO2xldCB0PWUuaGlzdG9yeTtFZSh0LmV2ZW50cyksRWUodC5lZmZlY3RzKSxFZSh0LnN0b3JlcyksRWUodC5kb21haW5zKX1EZSh6KGUpLCEhdCxyKX0semU9ZT0+e2xldCB0PVEoamUsZSx2b2lkIDApO3JldHVybiB0LnVuc3Vic2NyaWJlPXQsdH0sVGU9ZT0+KFBlJiZmZShJKFBlKSxbZV0pLGUpLFBlPW51bGwsTWU9KCk9PlBlJiZQZS50ZW1wbGF0ZSxPZT0oZSx0LHtub2RlOnIsc2NvcGU6bixtZXRhOm99KT0+VGUoYSh7bm9kZTpyLHBhcmVudDplLGNoaWxkOnQsc2NvcGU6bixtZXRhOm8sZmFtaWx5Ontvd25lcnM6W2UsdF0sbGlua3M6dH19KSksUmU9ZT0+e2xldCB0O19lKGUsKHIsYSk9Pnt0PXIsZT1hfSk7bGV0e2Zyb206cix0bzpuLG1ldGE6bz17b3A6J2ZvcndhcmQnfX09ZTtyZXR1cm4gciYmbnx8QSgnZnJvbSBhbmQgdG8gZmllbGRzIHNob3VsZCBiZSBkZWZpbmVkJyksdCYmKG8uY29uZmlnPXQpLHplKFRlKGEoe3BhcmVudDpyLGNoaWxkOm4sbWV0YTpvLGZhbWlseTp7fX0pKSl9LEllPShlLHQpPT56ZShUZShhKHtzY29wZTp7Zm46dH0sbm9kZTpbdGUoe2ZuOmllfSldLHBhcmVudDplLG1ldGE6e29wOid3YXRjaCd9LGZhbWlseTp7b3duZXJzOmV9fSkpKTtjb25zdCBGZT0oZSx0KT0+KEQoZSkmJihGZShPKGUpLHQpLG51bGwhPWUubmFtZSYmKEQoZS5uYW1lKT9GZShlLm5hbWUsdCk6dC5uYW1lPWUubmFtZSksZS5sb2MmJih0LmxvYz1lLmxvYyksKGUuc2lkfHxudWxsPT09ZS5zaWQpJiYodC5zaWQ9ZS5zaWQpLGUuaGFuZGxlciYmKHQuaGFuZGxlcj1lLmhhbmRsZXIpLEgoZSkmJih0LnBhcmVudD1IKGUpKSwnc3RyaWN0J2luIGUmJih0LnN0cmljdD1lLnN0cmljdCksZS5uYW1lZCYmKHQubmFtZWQ9ZS5uYW1lZCksRmUoUihlKSx0KSksdCk7bGV0IEhlLCRlPShlLHQpPT57SChlKSYmSChlKS5ob29rcy5ldmVudCh0KX0sS2U9KGUsdCxhLG4pPT57bGV0IG89RmUoe25hbWU6bixjb25maWc6YX0se30pLGw9RygpLHtwYXJlbnQ6cz1udWxsLHNpZDppPW51bGwsc3RyaWN0OmY9MSxuYW1lZDpjPW51bGx9PW8sdT1jfHxvLm5hbWV8fCgnZG9tYWluJz09PWU/Jyc6bCkscD1yKHUscyk7cmV0dXJuIHQua2luZD1lLHQuaWQ9bCx0LnNpZD1pLHQuc2hvcnROYW1lPXUsdC5wYXJlbnQ9cyx0LmNvbXBvc2l0ZU5hbWU9cCx0LmRlZmF1bHRDb25maWc9byx0LnRocnU9ZT0+ZSh0KSx0LmdldFR5cGU9KCk9PnAuZnVsbE5hbWUsJ2RvbWFpbichPT1lJiYodC5zdWJzY3JpYmU9ZT0+KGooZSksdC53YXRjaChFKGUpP2U6dD0+e2UubmV4dCYmZS5uZXh0KHQpfSkpLHRba109KCk9PnQpLEhlPWYse3VuaXQ6ZSxuYW1lOnUsc2lkOmksbmFtZWQ6Y319LEJlPWU9Pm8oe25hbWVkOmV9KTtjb25zdCBHZT0oZSx0LHIsYSk9Pk9lKGUsdCx7c2NvcGU6e2ZuOmF9LG5vZGU6W1ooe2ZuOmllfSldLG1ldGE6e29wOnJ9fSksSmU9KGUsdCxyLGEpPT57bGV0IG47RChyKSYmKG49cixyPXIuZm4pO2xldCBsPW8oJChlLCcg4oaSPyAqJyksbik7cmV0dXJuIE9lKGUsbCx7c2NvcGU6e2ZuOnJ9LG5vZGU6YSxtZXRhOntvcDp0fX0pLGx9LExlPShlLHQscixhLG4pPT57bGV0IG89TSh0KSxsPVtYKHtzdG9yZTpvLHRvOidhJ30pLFooe2ZuOmE/c2U6bGV9KSxZLmRlZmluZWQoKSxZLmNoYW5nZWQoe3N0b3JlOm99KSxyZSh7c3RvcmU6b30pXSxzPU1lKCk7aWYocyYmKGwudW5zaGlmdChzLmxvYWRlciksbC5wdXNoKHMudXB3YXJkKSxxKGUpKSl7bGV0IHQ9TShlKTtzLnBsYWluLmluY2x1ZGVzKHQpfHwocy5jbG9zdXJlLmluY2x1ZGVzKHQpfHxzLmNsb3N1cmUucHVzaCh0KSxvLmJlZm9yZXx8KG8uYmVmb3JlPVtdKSxvLmJlZm9yZS5wdXNoKHt0eXBlOidjbG9zdXJlJyxvZjp0fSkpfXJldHVybiBPZShlLHQse3Njb3BlOntmbjpufSxub2RlOmwsbWV0YTp7b3A6cn19KX07bGV0IFFlPShlLHQpPT57Zm9yKGxldCByIGluIGUpdChlW3JdLHIpfTtjb25zdCBVZT1lPT50PT5lKC4uLnQpLFZlPSh0LHIsYSxuKT0+e2xldCBvPXQ/ZT0+ZS5zbGljZSgpOmU9Pk9iamVjdC5hc3NpZ24oe30sZSksbD10P1tdOnt9LGk9TWUoKSxmPW8obCksYz1uZShmKSx1PW5lKDEpO2MudHlwZT10PydsaXN0Jzonc2hhcGUnLGkmJmkucGxhaW4ucHVzaChjLHUpO2xldCBwPXMoZix7bmFtZTphfHxlKHIpfSksbT1bWS5kZWZpbmVkKCksWCh7c3RvcmU6Yyx0bzonYSd9KSxlZSh7Zm46KGUse2tleTp0fSx7YTpyfSk9PmUhPT1yW3RdfSksWCh7c3RvcmU6dSx0bzonYid9KSxaKHtmbihlLHtjbG9uZTp0LGtleTpyfSxhKXthLmImJihhLmE9dChhLmEpKSxhLmFbcl09ZX19KSxYKHtmcm9tOidhJyx0YXJnZXQ6Y30pLFgoe2Zyb206J3ZhbHVlJyxzdG9yZTowLHRhcmdldDp1fSksVyh7cHJpb3JpdHk6J2JhcnJpZXInfSksWCh7ZnJvbTondmFsdWUnLHN0b3JlOjEsdGFyZ2V0OnV9KSxYKHtzdG9yZTpjfSksbiYmWih7Zm46bn0pLFkuY2hhbmdlZCh7c3RvcmU6TShwKX0pXSxkPWMuYmVmb3JlPVtdO3JldHVybiBRZShyLChlLHQpPT57aWYoIXEoZSkpcmV0dXJuIHZvaWQoZlt0XT1sW3RdPWUpO2xbdF09ZS5kZWZhdWx0U3RhdGUsZlt0XT1lLmdldFN0YXRlKCk7bGV0IHI9T2UoZSxwLHtzY29wZTp7a2V5OnQsY2xvbmU6b30sbm9kZTptLG1ldGE6e29wOidjb21iaW5lJ319KSxhPU0oZSk7ZC5wdXNoKHt0eXBlOidmaWVsZCcsZmllbGQ6dCxmcm9tOmF9KSxpJiYoaS5wbGFpbi5pbmNsdWRlcyhhKXx8ci5zZXEudW5zaGlmdChpLmxvYWRlcikpfSkscC5kZWZhdWx0U2hhcGU9cixjLmFmdGVyPVtuP3t0eXBlOidtYXAnLHRvOk0ocCksZm46bn06e3R5cGU6J2NvcHknLHRvOk0ocCl9XSxpfHwocC5kZWZhdWx0U3RhdGU9bj9NKHApLmN1cnJlbnQ9bihmKTpsKSxwfTtsZXQgV2U9KHtwYXJhbXM6ZSxyZXE6dCxvazpyLGFueXdheTphLHBhZ2U6bn0pPT5vPT5OZSh7dGFyZ2V0OlthLFhlXSxwYXJhbXM6W3I/e3N0YXR1czonZG9uZScscGFyYW1zOmUscmVzdWx0Om99OntzdGF0dXM6J2ZhaWwnLHBhcmFtczplLGVycm9yOm99LHtmbjpyP3QucnM6dC5yaix2YWx1ZTpvfV0sZGVmZXI6MSxwYWdlOm59KTtjb25zdCBYZT1hKHtub2RlOlt0ZSh7Zm4oe2ZuOmUsdmFsdWU6dH0pe2UodCl9fSldLG1ldGE6e29wOidmeCcsZng6J3NpZGVjaGFpbid9fSksWWU9KGUsdCxyKT0+KGUud2F0Y2goZT0+e2ZlKHIsW2VdKSx0LmFkZChlKSxlLm93bmVyU2V0fHwoZS5vd25lclNldD10KSxIKGUpfHwoZS5wYXJlbnQ9cil9KSxmZShyLFtlXSkscj0+KHQuZm9yRWFjaChyKSxlLndhdGNoKHIpKSk7bGV0IFplPWU9PncoZSk/ZTppKGUpO2NvbnN0IGV0PVwiMjAuMTYuMlwiO3ZhciB0dD17X19wcm90b19fOm51bGwsZmlsdGVyQ2hhbmdlZDplZSh7Zm46KGUse3N0YXRlOnR9KT0+dm9pZCAwIT09ZSYmZSE9PW9lKHQpfSksbm9vcDpaKHtmbjplPT5lfSl9O2V4cG9ydHt2IGFzIEtpbmQsYyBhcyBhdHRhY2gsdHQgYXMgYmxvY2tzLGplIGFzIGNsZWFyTm9kZSxpIGFzIGNvbWJpbmUsdSBhcyBjcmVhdGVBcGkscCBhcyBjcmVhdGVEb21haW4sZiBhcyBjcmVhdGVFZmZlY3QsbyBhcyBjcmVhdGVFdmVudCxhIGFzIGNyZWF0ZU5vZGUscyBhcyBjcmVhdGVTdG9yZSxpIGFzIGNyZWF0ZVN0b3JlT2JqZWN0LFJlIGFzIGZvcndhcmQsbSBhcyBmcm9tT2JzZXJ2YWJsZSxoIGFzIGd1YXJkLEMgYXMgaXMsTmUgYXMgbGF1bmNoLGcgYXMgbWVyZ2UseSBhcyByZXN0b3JlLHkgYXMgcmVzdG9yZUVmZmVjdCx5IGFzIHJlc3RvcmVFdmVudCx5IGFzIHJlc3RvcmVPYmplY3QsZCBhcyBzYW1wbGUsdCBhcyBzZXRTdG9yZU5hbWUsYiBhcyBzcGxpdCxhZSBhcyBzdGVwLGV0IGFzIHZlcnNpb24sbiBhcyB3aXRoUmVnaW9ufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVmZmVjdG9yLmVzLmpzLm1hcFxuIiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHNldENvbnRleHQsIG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXHJcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudCwgY3JlYXRlU3RvcmUsIGNyZWF0ZUFwaSB9IGZyb20gJ2VmZmVjdG9yJ1xyXG4gICAgaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCdcclxuXHJcbiAgICBleHBvcnQgbGV0IHNtb290aGluZ0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgLypcclxuICAgICAgICAwOiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9NQU5VQUxcclxuICAgICAgICAxOiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX01FRElBTlxyXG4gICAgICAgIDI6IEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVVxyXG4gICAgICAgIDM6IEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fQURBUFRJVkVcclxuICAgICAgICA0OiBBUl9MQUJFTElOR19USFJFU0hfTU9ERV9BVVRPX0JSQUNLRVRJTkdcclxuICAgICovXHJcbiAgICBleHBvcnQgbGV0IHRocmVzaG9sZE1vZGUgPSAyXHJcbiAgICBleHBvcnQgbGV0IHRocmVzaG9sZCA9IDE2MFxyXG4gICAgZXhwb3J0IGxldCBkZWJ1ZyA9IGZhbHNlXHJcbiAgICBleHBvcnQgbGV0IGRlYnVnX2luZm8gPSBmYWxzZVxyXG4gICAgZXhwb3J0IGxldCBtYXhBUlZpZGVvU2l6ZSA9IDY0MFxyXG4gICAgZXhwb3J0IGxldCBtYXJrZXJMb3NzRGVsYXkgPSAxMDBcclxuICAgIGV4cG9ydCBsZXQgcGF0dFJhdGlvID0gMC45XHJcblxyXG5cdGV4cG9ydCBjb25zdCBhcnRvb2xraXRfd2FzbV91cmwgPSAnL2pzL2FydG9vbGtpdC9hcnRvb2xraXRfd2FzbS53YXNtJ1xyXG5cclxuICAgIGNvbnN0IHdhcm5pbmdWaXNpYmxlID0gY3JlYXRlU3RvcmUodHJ1ZSlcclxuICAgIGNvbnN0IG1hcmtlcldhcm5pbmcgPSBjcmVhdGVBcGkod2FybmluZ1Zpc2libGUsIHtzaG93OiAoc3RhdGUsIHZhbHVlKSA9PiB2YWx1ZX0pXHJcblxyXG4gICAgY29uc3QgdmlzaWJsZU1hcmtlcnNDb3VudCA9IGNyZWF0ZVN0b3JlKDApXHJcbiAgICBjb25zdCB2aXNpYmxlTWFya2Vyc0FwaSA9IGNyZWF0ZUFwaSh2aXNpYmxlTWFya2Vyc0NvdW50LCB7XHJcbiAgICAgICAgaW5jOiAoc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgbWFya2VyV2FybmluZy5zaG93KGZhbHNlKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmtlciBjb3VudDogXCIsc3RhdGUrMSlcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlICsgMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVjOiAoc3RhdGUpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNYXJrZXIgY291bnQ6IFwiLHN0YXRlLTEpXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gMSkgbWFya2VyV2FybmluZy5zaG93KHRydWUpXHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSAtIDFcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGxldCBtZXNzYWdlID0gJydcclxuICAgIGxldCBlcnIgPSAnJ1xyXG5cclxuICAgIGxldCBwYXR0ZXJucyA9IFtdXHJcblxyXG4gICAgbGV0IG1hcmtlcmNvbnRhaW5lciBcclxuXHJcbiAgICBjb25zdCBjb250ZXh0ID0ge1xyXG4gICAgICAgIHNpemU6e1xyXG4gICAgICAgICAgICB2aWRlb1dpZHRoOiBudWxsLFxyXG4gICAgICAgICAgICB2aWRlb0hlaWdodDogbnVsbCxcclxuICAgICAgICAgICAgb2Zmc2V0V2lkdGg6IDMyMCxcclxuICAgICAgICAgICAgb2Zmc2V0SGVpZ2h0OiAyNDAsXHJcbiAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDAsXHJcbiAgICAgICAgICAgIG1hcmdpblRvcDogMCxcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yaWVudGF0aW9uOiBudWxsLFxyXG4gICAgICAgIGNhbWVyYW1hdDogbnVsbCxcclxuICAgICAgICBtYXJrZXI6IHtcclxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgIG1hdDogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0dXA6IGNyZWF0ZUV2ZW50KCksXHJcbiAgICAgICAgcmVzaXplZDogY3JlYXRlRXZlbnQoKSxcclxuICAgICAgICByZW5kZXI6IGNyZWF0ZUV2ZW50KCksXHJcbiAgICAgICAgbWFya2VyRm91bmQ6IGNyZWF0ZUV2ZW50KCksXHJcbiAgICAgICAgbWFya2VyTG9zdDogY3JlYXRlRXZlbnQoKSxcclxuICAgICAgICBsb2FkUGF0dGVybjogKHBhdHQsIGxvYWRlZCkgPT4ge1xyXG4gICAgICAgICAgICBwYXR0ZXJucy5wdXNoKFtwYXR0LCBsb2FkZWRdKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlzaWJsZU1hcmtlcnM6IHZpc2libGVNYXJrZXJzQXBpXHJcbiAgICB9XHJcblxyXG4gICAgc2V0Q29udGV4dCgnYXInLCBjb250ZXh0KVxyXG5cclxuICAgIGxldCBtYXJrZXJMb3N0Q291bnRkb3duID0gbWFya2VyTG9zc0RlbGF5XHJcblxyXG4gICAgbGV0IGFyY3RybExvYWRlZCA9IGZhbHNlXHJcblx0bGV0IGFyQ2FtZXJhUGFyYW1Mb2FkZWQgPSBmYWxzZVxyXG5cclxuXHRmdW5jdGlvbiBjcmVhdGVjdHJsKHNvdXJjZSwgYXJDYW1lcmFQYXJhbSkge1xyXG5cdFx0Y29uc3Qgb25HZXRNYXJrZXIgPSBhc3luYyAoZXYpID0+IHtcclxuXHRcdFx0aWYgKGRlYnVnID09PSAndHJ1ZScpIHtcclxuXHRcdFx0ICAgIGNvbnNvbGUubG9nKFwiRGV0ZWN0ZWQgbWFya2VyIHdpdGggaWRzOlwiLCBldi5kYXRhLm1hcmtlci5pZCwgZXYuZGF0YS5tYXJrZXIuaWRQYXR0LCBldi5kYXRhLm1hcmtlci5pZE1hdHJpeClcclxuXHRcdFx0ICAgIGNvbnNvbGUubG9nKFwiTWFya2VyIGRhdGFcIiwgZXYuZGF0YS5tYXJrZXIpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk1hcmtlciB0cmFuc2Zvcm0gbWF0cml4OlwiLCBbXS5qb2luLmNhbGwoZXYuZGF0YS5tYXRyaXgsICcsICcpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG5cdFx0XHQvLyBVbmtub3duIG1hcmtlciBpZCBtdXN0IGJlIC0xXHJcblx0XHRcdC8qXHJcblx0XHRcdGlmICgoZXYuZGF0YS5tYXJrZXIuaWRQYXR0ID49IDApfHwoZXYuZGF0YS5tYXJrZXIuaWRNYXRyaXggPj0gMCkpIHtcclxuXHRcdFx0XHRjb250ZXh0Lm1hcmtlciA9IHt2aXNpYmxlOiB0cnVlLCBtYXQ6IGV2LmRhdGEubWF0cml4R0xfUkh9XHJcblx0XHRcdFx0Y29udGV4dC5tYXJrZXJGb3VuZChjb250ZXh0Lm1hcmtlcilcclxuXHRcdFx0fVxyXG5cdFx0XHQqL1xyXG5cdFx0XHRjb250ZXh0Lm1hcmtlckZvdW5kKHtjYW52YXM6IGV2LnRhcmdldC5jYW52YXMsIGRhdGE6IGV2LmRhdGF9KVxyXG5cdFx0fVxyXG5cclxuXHRcdGNvbnN0IG1heFNpemUgPSBtYXhBUlZpZGVvU2l6ZSB8fCBNYXRoLm1heChzb3VyY2UudmlkZW9XaWR0aCwgc291cmNlLnZpZGVvSGVpZ2h0KVxyXG5cdFx0Y29uc3QgZiA9IG1heFNpemUgLyBNYXRoLm1heChzb3VyY2UudmlkZW9XaWR0aCwgc291cmNlLnZpZGVvSGVpZ2h0KVxyXG5cdFx0bGV0IHcgPSBkZWJ1Zz9zb3VyY2UudmlkZW9XaWR0aDpmICogc291cmNlLnZpZGVvV2lkdGhcclxuXHRcdGxldCBoID0gZGVidWc/c291cmNlLnZpZGVvSGVpZ2h0OmYgKiBzb3VyY2UudmlkZW9IZWlnaHRcclxuXHJcblx0XHRpZiAoKCFkZWJ1ZykmJihzb3VyY2UudmlkZW9XaWR0aCA8IHNvdXJjZS52aWRlb0hlaWdodCkpIHtcclxuXHRcdFx0W2gsIHddID0gW3csIGhdXHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IGNvbnRyb2xsZXIgPSBuZXcgQVJDb250cm9sbGVyKHcsIGgsIGFyQ2FtZXJhUGFyYW0pXHJcblx0XHRjb250cm9sbGVyLm9ubG9hZCA9IGFzeW5jICgpID0+IHtcclxuXHRcdFx0Ly9hcmN0cmwub25sb2FkID0gbnVsbFxyXG5cdFx0XHRhcmN0cmxMb2FkZWQgPSB0cnVlXHJcblx0XHRcdGNvbnNvbGUubG9nKCdhcmN0cmwgbG9hZGVkJylcclxuXHRcdFx0bWVzc2FnZSA9ICdhcmN0cmwgbG9hZGVkJ1xyXG5cclxuXHRcdFx0Ly8gYXJjdHJsLm9yaWVudGF0aW9uID0gJ3BvcnRyYWl0JyAgICAgLy8gZGVmYXVsdDogbGFuZHNjYXBlXHJcblx0XHRcdGNvbnRyb2xsZXIuc2V0UGF0dGVybkRldGVjdGlvbk1vZGUoYXJ0b29sa2l0LkFSX1RFTVBMQVRFX01BVENISU5HX01PTk9fQU5EX01BVFJJWClcclxuXHRcdFx0Y29udHJvbGxlci5zZXRNYXRyaXhDb2RlVHlwZShhcnRvb2xraXQuQVJfTUFUUklYX0NPREVfNHg0X0JDSF8xM181XzUpXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuc2V0UGF0dFJhdGlvKHBhdHRSYXRpbyk7XHJcblxyXG5cdFx0XHRjb250cm9sbGVyLnNldFRocmVzaG9sZE1vZGUodGhyZXNob2xkTW9kZSlcclxuXHRcdFx0Y29udHJvbGxlci5zZXRUaHJlc2hvbGQodGhyZXNob2xkKVxyXG5cclxuXHRcdFx0Y29udHJvbGxlci5jdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc21vb3RoaW5nRW5hYmxlZFxyXG5cdFx0XHRjb250cm9sbGVyLmN0eC53ZWJraXRJbWFnZVNtb290aGluZ0VuYWJsZWQgPSBzbW9vdGhpbmdFbmFibGVkXHJcblx0XHRcdGNvbnRyb2xsZXIuY3R4Lm1zSW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gc21vb3RoaW5nRW5hYmxlZFxyXG5cdFx0XHRjb250cm9sbGVyLmN0eC5pbWFnZVNtb290aGluZ0VuYWJsZWQgPSBzbW9vdGhpbmdFbmFibGVkXHJcblxyXG5cdFx0XHRjb250cm9sbGVyLmltYWdlID0gc291cmNlXHJcblx0XHRcdG1lc3NhZ2UgPSAnYXJjdHJsIHZpZGVvIGFzc2lnbmVkJ1xyXG5cclxuXHRcdFx0Y29udGV4dC5zZXR1cChjb250cm9sbGVyLmdldENhbWVyYU1hdHJpeCgpKVxyXG5cdFx0XHRtZXNzYWdlID0gJ2FyY3RybCBjYW1lcmEgbWF0cml4IHNldCdcclxuXHJcblx0XHRcdGNvbnRleHQubG9hZFBhdHRlcm4gPSAocGF0dCwgbG9hZGVkKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbnRyb2xsZXIubG9hZE1hcmtlcihwYXR0LCBhc3luYyAobWFya2VySWQpID0+IHtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiTWFya2VyIGxvYWRlZCwgaWQ6XCIsbWFya2VySWQpXHJcblx0XHRcdFx0XHRsb2FkZWQobWFya2VySWQpXHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cGF0dGVybnMuZm9yRWFjaCgocGF0dF9ycSk9PntcclxuXHRcdFx0XHRjb25zdCBbcGF0dGVybiwgbG9hZGVkXSA9IHBhdHRfcnFcclxuXHRcdFx0XHRjb250ZXh0LmxvYWRQYXR0ZXJuKHBhdHRlcm4sIGxvYWRlZClcclxuXHRcdFx0fSlcclxuXHRcdFx0bWVzc2FnZSA9ICdhcmN0cmwgY2FtZXJhIG1hcmtlcnMgc2V0J1xyXG5cclxuXHRcdFx0Y29udHJvbGxlci5hZGRFdmVudExpc3RlbmVyKCdnZXRNYXJrZXInLCBvbkdldE1hcmtlcilcclxuXHRcdFx0bWVzc2FnZSA9ICdhcmN0cmwgbG9vcCBzdGFydGVkJ1xyXG5cclxuXHRcdFx0aWYgKChkZWJ1ZyA9PT0gJ3RydWUnKXx8KGRlYnVnID09PSB0cnVlKSkge1xyXG5cdFx0XHRcdGRlYnVnID0gZmFsc2UgICAgIC8vIEl0IGlzIG5lZWRlZCBvbmx5IG9uY2UgcGVyIHNlc3Npb25cclxuXHRcdFx0XHRjb250cm9sbGVyLmRlYnVnU2V0dXAoKVxyXG4gICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJ1xyXG5cdFx0XHRcdGNvbnRyb2xsZXIuY2FudmFzLnN0eWxlLnRvcCA9ICcwcHgnXHJcblx0XHRcdFx0Y29udHJvbGxlci5jYW52YXMuc3R5bGUub3BhY2l0eSA9ICcwLjYnXHJcblx0XHRcdFx0Y29udHJvbGxlci5jYW52YXMuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5jYW52YXMuc3R5bGUuekluZGV4ID0gJzEnXHJcbiAgICAgICAgICAgICAgICAqL1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY29udHJvbGxlclxyXG5cdH1cclxuXHJcbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcclxuICAgICAgICBsZXQgX3NjcmlwdF8gPSByZXF1aXJlKCdzY3JpcHRqcycpXHJcbiAgICAgICAgaWYgKCBkZWJ1ZyApIHtcclxuICAgICAgICAgICAgX3NjcmlwdF8oWycvanMvYXJ0b29sa2l0L2FydG9vbGtpdC5hcGkuanMnLCAnL2pzL2FydG9vbGtpdC9hcnRvb2xraXQuZGVidWcuanMnXSwgJ2J1bmRsZScpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX3NjcmlwdF8oWycvanMvYXJ0b29sa2l0L2FydG9vbGtpdF93YXNtLmpzJ10sICdidW5kbGUnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBfc2NyaXB0Xy5yZWFkeSgnYnVuZGxlJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBfc2NyaXB0XyAoJycsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhckNhbWVyYVBhcmFtID0gbmV3IEFSQ2FtZXJhUGFyYW0oKVxyXG4gICAgICAgICAgICAgICAgYXJDYW1lcmFQYXJhbS5vbmxvYWQgPSAgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhckNhbWVyYVBhcmFtTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBhckNhbWVyYVBhcmFtTG9hZGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXJDYW1lcmFQYXJhbS5vbmxvYWQgPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvY2FudmFzJylcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kaXNwYXRjaCgnbG9hZGVkJywge3NvdXJjZTp2aWRlb30pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB8fCBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmY3ROYW1lID0gJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMgPT09IHVuZGVmaW5lZCkgZmN0TmFtZSA9ICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPT09IHVuZGVmaW5lZCkgZmN0TmFtZSA9ICduYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID09PSB1bmRlZmluZWQpIGZjdE5hbWUgPSAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgY29uc29sZS5hc3NlcnQoZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnV2ViUlRDIGlzc3VlLSEgJyArIGZjdE5hbWUgKyAnIG5vdCBwcmVzZW50IGluIHlvdXIgYnJvd3NlcidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB1c2VyTWVkaWFDb25zdHJhaW50cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW86IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB7IGV4YWM6IGNvbnRleHQuc2l6ZS52aWRlb1dpZHRoIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHsgZXhhYzogY29udGV4dC5zaXplLnZpZGVvSGVpZ2h0IH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFjaW5nTW9kZTogJ2Vudmlyb25tZW50J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXJjdHJsID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGdldCBhIGRldmljZSB3aGljaCBzYXRpc2Z5IHRoZSBjb25zdHJhaW50c1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NhbnBsYXknLCBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZpZGVvID0gZXZlbnQudGFyZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc2l6ZUJ5ID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcmNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnMCAwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyY29udGFpbmVyLnN0eWxlLnRvcCA9IGVsZW1lbnQudG9wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJjb250YWluZXIuc3R5bGUubGVmdCA9IGVsZW1lbnQubGVmdFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQuc2l6ZS52aWRlb1dpZHRoID0gZWxlbWVudC52aWRlb1dpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNpemUudmlkZW9IZWlnaHQgPSBlbGVtZW50LnZpZGVvSGVpZ2h0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNpemUub2Zmc2V0V2lkdGggPSBlbGVtZW50Lm9mZnNldFdpZHRoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnNpemUub2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0Lm9yaWVudGF0aW9uID0gJ3BvcnRyYWl0J1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlcmNvbnRhaW5lci5zdHlsZS53aWR0aCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0KydweCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRXaWR0aCsncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9ICdyb3RhdGUoLTkwZGVnKSB0cmFuc2xhdGVYKC0xMDAlKSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5vcmllbnRhdGlvbiA9ICdsYW5kc2NhcGUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyY29udGFpbmVyLnN0eWxlLndpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aCsncHgnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0KydweCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJjb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmN0cmwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBbdyxoXSA9IGNvbnRleHQub3JpZW50YXRpb24gPT09ICdsYW5kc2NhcGUnP1t2aWRlby52aWRlb1dpZHRoLCB2aWRlby52aWRlb0hlaWdodF06W3ZpZGVvLnZpZGVvSGVpZ2h0LHZpZGVvLnZpZGVvV2lkdGhdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjdHJsLm9yaWVudGF0aW9uID0gY29udGV4dC5vcmllbnRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY3RybC52aWRlb1dpZHRoID0gd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY3RybC52aWRlb0hlaWdodCA9IGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAncmVzaXplZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQucmVzaXplZCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlc2l6ZU9ic2VydmVyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoY29udGV4dCAhPSBudWxsKSAmJiAodmlkZW8gIT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJjdHJsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJjdHJsID0gY3JlYXRlY3RybCh2aWRlbywgYXJDYW1lcmFQYXJhbSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzaXplQnkodmlkZW8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLm9ic2VydmUodmlkZW8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2l6ZUJ5KHZpZGVvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0aWNrZXIgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGlja2VyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyY3RybCA9PSBudWxsKSByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY3RybC5wcm9jZXNzKHZpZGVvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyTnVtID0gYXJjdHJsLmdldE1hcmtlck51bSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFya2VyTnVtID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ01hcmtlck51bSA9ICcrbWFya2VyTnVtKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlckxvc3RDb3VudGRvd24gPSBtYXJrZXJMb3NzRGVsYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlckxvc3RDb3VudGRvd24gPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5tYXJrZXJMb3N0KClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyTG9zdENvdW50ZG93bi0tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnJlbmRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGlja2VyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGxheSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEodXNlck1lZGlhQ29uc3RyYWludHMpLnRoZW4oKHN0cmVhbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnR290IGNhbWVyYSBvYmplY3QnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlby5tdXRlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8ucGxheXNpbmxpbmUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLmxvb3AgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmlkZW8uYXV0b3BsYXkgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvLnNyY09iamVjdCA9IHN0cmVhbVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3I6IFwiK2Vycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWRlby5zcmMgPSAnL2Fzc2V0cy9PdXRwdXRfNC0xLndlYm0nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmlkZW8uc3JjID0gJ2Fzc2V0cy9vdXRwdXRfNC5vZ20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgYWNjZXNzIHRvIHRoZSBjYW1lcmEhXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJhcnRvb2xraXQgbG9hZGVkXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhckNhbWVyYVBhcmFtLmxvYWQoJy9hc3NldHMvY2FtZXJhX3BhcmEuZGF0JylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiN2aWRlb0NvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG59XHJcbiN2aWRlb2NhbnZhcyB7XHJcbiAgICBwb3NpdGlvbjogaW5oZXJpdDtcclxuICAgIHotaW5kZXg6IC0xMDA7XHJcbiAgICBtaW4td2lkdGg6IDEwMCU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuI2RlYnVnaW5mbyB7XHJcbiAgICB6LWluZGV4OiAxO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogNXB4O1xyXG4gICAgYm90dG9tOiAxMDBweDtcclxuICAgIGNvbG9yOiBkYXJrZ3JlZW47XHJcbn1cclxuI21hcmtlcmNvbnRhaW5lciB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxufVxyXG4jbWFya2VyV2FybmluZyB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6NTAlO1xyXG4gICAgbGVmdDo1MCU7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XHJcbn1cclxuOmdsb2JhbCgubWFya2VyKSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuOmdsb2JhbCguZ2wpIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbn1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgaWQ9XCJ2aWRlb0NvbnRhaW5lclwiPlxyXG4gICAgPHZpZGVvIGlkPVwidmlkZW9jYW52YXNcIiBjb250cm9scz1cIlwiIGF1dG9wbGF5PVwidHJ1ZVwiIG11dGVkPVwidHJ1ZVwiIGxvb3A9XCJ0cnVlXCIgcGxheXNpbmxpbmU9XCJ0cnVlXCI+PC92aWRlbz5cclxuICAgIDxkaXYgaWQ9XCJtYXJrZXJjb250YWluZXJcIiBiaW5kOnRoaXM9e21hcmtlcmNvbnRhaW5lcn0gPlxyXG4gICAgICAgIDxzbG90Pjwvc2xvdD5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuXHJcbnsjaWYgJHdhcm5pbmdWaXNpYmxlfVxyXG48ZGl2IGlkPVwibWFya2VyV2FybmluZ1wiIGNsYXNzPVwibWF4LXctc20gcm91bmRlZCBvdmVyZmxvdy1oaWRkZW4gc2hhZG93LWxnIGJnLWNvdmVyXCIgPlxyXG4gICAgPGRpdiBjbGFzcz1cInB4LTYgcHktNFwiPlxyXG4gICAgICAgIDxwIGNsYXNzPSd0ZXh0LWdyYXktNTAwIHRleHQtYmFzZSc+0J3QsNCy0LXQtNC40YLQtSDQutCw0LzQtdGA0YMg0L3QsCDQvNCw0YDQutC10YA8L3A+XHJcbiAgICA8L2Rpdj5cclxuPC9kaXY+XHJcbnsvaWZ9XHJcblxyXG57I2lmIChkZWJ1Z19pbmZvID09PSAndHJ1ZScpfHwoZGVidWdfaW5mbyA9PT0gdHJ1ZSl9XHJcbjxkaXYgaWQ9J2RlYnVnaW5mbycgPlxyXG4gICAgPGRpdj5WaWRlbyBzaXplOiB7Y29udGV4dC5zaXplLnZpZGVvV2lkdGh9LCB7Y29udGV4dC5zaXplLnZpZGVvSGVpZ2h0fTwvZGl2PlxyXG4gICAgPGRpdj5PcmllbnRhdGlvbjoge2NvbnRleHQub3JpZW50YXRpb259IDwvZGl2PlxyXG4gICAgeyNpZiBtZXNzYWdlICE9ICcnfVxyXG4gICAgPGRpdj5Nc2c6IHttZXNzYWdlfSA8L2Rpdj5cclxuICAgIHsvaWZ9XHJcbiAgICB7I2lmIGVyciAhPSAnJ31cclxuICAgIDxkaXY+RXJyb3I6IHtlcnJ9IDwvZGl2PlxyXG4gICAgey9pZn1cclxuPC9kaXY+XHJcbnsvaWZ9XHJcbiIsIid1c2Ugc3RyaWN0J1xyXG5cclxuaW1wb3J0IHsgY3JlYXRlRXZlbnQsIGNyZWF0ZVN0b3JlIH0gZnJvbSAnZWZmZWN0b3InXHJcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnXHJcblxyXG5jbGFzcyBNYXJrZXIge1xyXG4gICAgY29uc3RydWN0b3IgKGFyLCBwcmVkLCBtYXJrZXJMb3NzRGVsYXkpIHtcclxuICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlXHJcbiAgICB0aGlzLm1hcmtlckxvc3RDb3VudGRvd24gPSBtYXJrZXJMb3NzRGVsYXlcclxuICAgIHRoaXMudXBkYXRlID0gY3JlYXRlRXZlbnQoKVxyXG4gICAgdGhpcy5tYXJrZXIgPSBjcmVhdGVTdG9yZShtYXQ0KVxyXG4gICAgdGhpcy5tYXJrZXIub24odGhpcy51cGRhdGUsIChfLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgYXIudmlzaWJsZU1hcmtlcnMuaW5jKClcclxuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICBhci52aXNpYmxlTWFya2Vycy5kZWMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgfSlcclxuICAgIGlmIChwcmVkID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhci5tYXJrZXJGb3VuZC53YXRjaCgoZXYpID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoZXYuZGF0YS5tYXRyaXhHTF9SSClcclxuICAgICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBhci5tYXJrZXJGb3VuZC53YXRjaCgoZXYpID0+IHtcclxuICAgICAgICAgICAgaWYgKHByZWQoZXYpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZShldi5kYXRhLm1hdHJpeEdMX1JIKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJMb3N0Q291bnRkb3duID0gbWFya2VyTG9zc0RlbGF5XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXJrZXJMb3N0Q291bnRkb3duID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGUobnVsbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2VyTG9zdENvdW50ZG93bi0tXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgYXIubWFya2VyTG9zdC53YXRjaCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGUobnVsbClcclxuICAgIH0pfVxyXG5cclxuICAgIHdhdGNoIChmdW5jKSB7XHJcbiAgICAgICAgdGhpcy5tYXJrZXIud2F0Y2goZnVuYylcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgTWFya2VyIH1cclxuIiwiPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IGdldENvbnRleHQsIHNldENvbnRleHQgfSBmcm9tICdzdmVsdGUnXHJcbiAgICBpbXBvcnQgeyBNYXJrZXIgfSBmcm9tICcuL21hcmtlci5qcydcclxuXHJcbiAgICBleHBvcnQgbGV0IHBhdHRlcm4gPSAnYXNzZXRzL2hpcm8ucGF0dCdcclxuICAgIGV4cG9ydCBsZXQgbWFya2VyTG9zc0RlbGF5ID0gMTBcclxuXHJcbiAgICBjb25zdCBhciA9IGdldENvbnRleHQoJ2FyJylcclxuICAgIGxldCBtYXJrZXJJZCA9IC0xXHJcblxyXG4gICAgYXIubG9hZFBhdHRlcm4ocGF0dGVybiwgKGlkKSA9PiB7IG1hcmtlcklkID0gaWQgfSlcclxuXHJcbiAgICBjb25zdCBtYXJrZXIgPSBuZXcgTWFya2VyKGFyLCBldiA9PiAobWFya2VySWQgPj0gMCkgJiYgKGV2LmRhdGEubWFya2VyLmlkUGF0dCA9PT0gbWFya2VySWQpLCBtYXJrZXJMb3NzRGVsYXkpXHJcbiAgICBzZXRDb250ZXh0KCdtYXJrZXInLCBtYXJrZXIpXHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG48L3N0eWxlPlxyXG5cclxuPGRpdiBjbGFzcz0nbWFya2VyJz5cclxuICAgIDxzbG90Pjwvc2xvdD5cclxuPC9kaXY+XHJcblxyXG4iLCI8IS0tXHJcbjxzY3JpcHQgbGFuZz1cInR5cGVzY3JpcHRcIj5cclxuPC9zY3JpcHQ+XHJcbi0tPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCAnLi90aGVtZS5jc3MnXHJcbiAgICBpbXBvcnQgQmFieWxvbkpzUmVuZGVyZXIgZnJvbSAnLi9CYWJ5bG9uSlNSZW5kZXJlci5zdmVsdGUnXHJcbiAgICBpbXBvcnQgVGhyZWVKc1JlbmRlcmVyIGZyb20gJy4vVGhyZWVKU1JlbmRlcmVyLnN2ZWx0ZSdcclxuICAgIGltcG9ydCBDYWJsZXNSZW5kZXJlciBmcm9tICcuL0NhYmxlc1JlbmRlcmVyLnN2ZWx0ZSdcclxuICAgIGltcG9ydCBDYXJkIGZyb20gJy4vQ2FyZC5zdmVsdGUnXHJcbiAgICBpbXBvcnQgQ2FyZEJ1dHRvbiBmcm9tICcuL0NhcmRCdXR0b24uc3ZlbHRlJ1xyXG4gICAgaW1wb3J0IEVsZW1lbnQgZnJvbSAnLi9Zb3VUdWJlRWxlbWVudC5zdmVsdGUnXHJcblxyXG4gICAgaW1wb3J0IHsgQ1NTM0RSZW5kZXJlciB9IGZyb20gJy4vQ1NTM0RSZW5kZXJlci5qcydcclxuXHJcbiAgICBpbXBvcnQgQVJDb250ZXh0IGZyb20gJy4vQVJDb250ZXh0LnN2ZWx0ZSdcclxuICAgIC8vIGltcG9ydCBBUk1hdHJpeCBmcm9tICcuL0FSTWFya2VyTWF0cml4LnN2ZWx0ZSdcclxuICAgIGltcG9ydCBBUlBhdHRlcm4gZnJvbSAnLi9BUk1hcmtlclBhdHRlcm4uc3ZlbHRlJ1xyXG4gICAgLy8gaW1wb3J0IEFSVW5rbm93biBmcm9tICcuL0FSTWFya2VyVW5rbm93bi5zdmVsdGUnXHJcbiAgICAvLyBpbXBvcnQgQVJRUiBmcm9tICcuL0FSTWFya2VyUVIuc3ZlbHRlJ1xyXG5cclxuICAgIGNvbnN0IGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRcclxuICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgndGV4dC1ncmF5LTkwMCcpXHJcbiAgICBodG1sLmNsYXNzTGlzdC5hZGQoJ2FudGlhbGlhc2VkJylcclxuICAgIGh0bWwuY2xhc3NMaXN0LmFkZCgnbGVhZGluZy10aWdodCcpXHJcblxyXG4gICAgbGV0IGNhcmRcclxuICAgIGxldCBwaG9uZVxyXG4gICBcclxuICAgIGV4cG9ydCBsZXQgU0NFTkVfU0NBTEUgPSAwLjE7XHJcblxyXG4gICAgY29uc3QgZW5naW5lQ3JlYXRvciA9IChjbnQpID0+IHtcclxuICAgICAgICBjb25zdCBlbmdpbmUgPSBuZXcgQ1NTM0RSZW5kZXJlcigpXHJcbiAgICAgICAgY250LmFwcGVuZENoaWxkKCBlbmdpbmUuZG9tRWxlbWVudCApXHJcbiAgICAgICAgcmV0dXJuIGVuZ2luZVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGN1YmVTY2VuZSA9IGFzeW5jIChlbmdpbmUpID0+IHtcclxuICAgICAgICBjb25zdCBzY2VuZSA9IGF3YWl0IEJBQllMT04uU2NlbmVMb2FkZXIuTG9hZEFzeW5jKCcnLCAnaHR0cHM6Ly9kaWdpdGFscmF0cy5ydS9hc3NldHMvYmFieWxvbkpTX2xvZ29fdjMuYmFieWxvbicsIGVuZ2luZSlcclxuICAgICAvLyBzY2VuZS5hdXRvQ2xlYXIgPSBmYWxzZVxyXG4gICAgICAgIHNjZW5lLnVzZVJpZ2h0SGFuZGVkU3lzdGVtID0gdHJ1ZVxyXG4gICAgICAgIHNjZW5lLmNsZWFyQ29sb3IgPSBuZXcgQkFCWUxPTi5Db2xvcjQoMCwgMCwgMCwgMClcclxuICAgICAgICBjb25zdCBjYW1lcmEgPSBuZXcgQkFCWUxPTi5DYW1lcmEoJ2NhbWVyYTEnLCBuZXcgQkFCWUxPTi5WZWN0b3IzLlplcm8oKSwgc2NlbmUpXHJcbiAgICAgICAgY29uc3QgbWFya2VyUm9vdCA9IHNjZW5lLnJvb3ROb2Rlc1sxXVxyXG4gICAgICAgIHJldHVybiBbc2NlbmUsIGNhbWVyYSwgbWFya2VyUm9vdF1cclxuICAgIH1cclxuXHJcbiAgICAvKlxyXG4gICAgY29uc3Qgc2hvd0NvbnRleHRNZW51ID0gKGVsKSA9PiB7XHJcbiAgICAgICAgdmFyIGV2dCA9IGVsLm93bmVyRG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpXHJcbiAgICAgICAgZXZ0LmluaXRFdmVudCgnY29udGV4dG1lbnUnLCB0cnVlLCB0cnVlKSAvLyBidWJibGVzID0gdHJ1ZSwgY2FuY2VsYWJsZSA9IHRydWVcclxuICAgICAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsLmZpcmVFdmVudCgnb25jb250ZXh0bWVudScsIGV2dClcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhZWwuZGlzcGF0Y2hFdmVudChldnQpXHJcbiAgICAgICAgfSAgICBcclxuICAgIH1cclxuICAgICovXHJcblxyXG4gICAgY29uc3Qgc2hvd0NvbnRleHRNZW51ID0gKGVsZW1lbnQpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50KVxyXG4gICAgICAgIHZhciBldnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJylcclxuICAgICAgICBldnQuaW5pdE1vdXNlRXZlbnQoXHJcbiAgICAgICAgICAgICdjbGljaycgLy8gZXZlbnQgdHlwZVxyXG4gICAgICAgICAgICAsdHJ1ZSAgIC8vIGNhbiBidWJibGU/XHJcbiAgICAgICAgICAgICx0cnVlICAgLy8gY2FuY2VsYWJsZT9cclxuICAgICAgICAgICAgLHdpbmRvdyAvLyB0aGUgZXZlbnQncyBhYnN0cmFjdCB2aWV3IChzaG91bGQgYWx3YXlzIGJlIHdpbmRvdylcclxuICAgICAgICAgICAgLDEgICAgICAvLyBtb3VzZSBjbGljayBjb3VudCAob3IgZXZlbnQgXCJkZXRhaWxcIilcclxuICAgICAgICAgICAgLDEwMCAgICAvLyBldmVudCdzIHNjcmVlbiB4IGNvb3JkaW5hdGVcclxuICAgICAgICAgICAgLDIwMCAgICAvLyBldmVudCdzIHNjcmVlbiB5IGNvb3JkaW5hdGVcclxuICAgICAgICAgICAgLDEwMCAgICAvLyBldmVudCdzIGNsaWVudCB4IGNvb3JkaW5hdGVcclxuICAgICAgICAgICAgLDIwMCAgICAvLyBldmVudCdzIGNsaWVudCB5IGNvb3JkaW5hdGVcclxuICAgICAgICAgICAgLGZhbHNlICAvLyB3aGV0aGVyIG9yIG5vdCBDVFJMIHdhcyBwcmVzc2VkIGR1cmluZyBldmVudFxyXG4gICAgICAgICAgICAsZmFsc2UgIC8vIHdoZXRoZXIgb3Igbm90IEFMVCB3YXMgcHJlc3NlZCBkdXJpbmcgZXZlbnRcclxuICAgICAgICAgICAgLGZhbHNlICAvLyB3aGV0aGVyIG9yIG5vdCBTSElGVCB3YXMgcHJlc3NlZCBkdXJpbmcgZXZlbnRcclxuICAgICAgICAgICAgLGZhbHNlICAvLyB3aGV0aGVyIG9yIG5vdCB0aGUgbWV0YSBrZXkgd2FzIHByZXNzZWQgZHVyaW5nIGV2ZW50XHJcbiAgICAgICAgICAgICwyICAgICAgLy8gaW5kaWNhdGVzIHdoaWNoIGJ1dHRvbiAoaWYgYW55KSBjYXVzZWQgdGhlIG1vdXNlIGV2ZW50ICgxID0gcHJpbWFyeSBidXR0b24pXHJcbiAgICAgICAgICAgICxudWxsICAgLy8gcmVsYXRlZFRhcmdldCAob25seSBhcHBsaWNhYmxlIGZvciBtb3VzZW92ZXIvbW91c2VvdXQgZXZlbnRzKVxyXG4gICAgICAgIClcclxuICAgICAgICBpZiAoZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3Qpe1xyXG4gICAgICAgICAgICAvLyBkaXNwYXRjaCBmb3IgSUVcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZmlyZUV2ZW50KCdvbmNsaWNrJywgZXZ0KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGRpc3BhdGNoIGZvciBmaXJlZm94ICsgb3RoZXJzXHJcbiAgICAgICAgICAgIHJldHVybiAhZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2dCk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2FyZFNjZW5lID0gYXN5bmMgKGVuZ2luZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IFRIUkVFID0gcmVxdWlyZSgndGhyZWUnKVxyXG4gICAgICAgIGNvbnN0IENTUzNEID0gcmVxdWlyZSgnLi9DU1MzRFJlbmRlcmVyLmpzJylcclxuXHJcbiAgICAgICAgY29uc3Qgc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgYSBjYW1lcmEgYW5kIGEgbWFya2VyIHJvb3Qgb2JqZWN0IGZvciB5b3VyIFRocmVlLmpzIHNjZW5lLlxyXG4gICAgICAgIGNvbnN0IGNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSgpXHJcbiAgICAgICAgY2FtZXJhLm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZVxyXG4gICAgICAgIGNhbWVyYS5wb3NpdGlvbi5zZXQoMCwgMCwgMClcclxuICAgICAgICBjYW1lcmEudXBkYXRlTWF0cml4KClcclxuICAgICAgICBzY2VuZS5hZGQoY2FtZXJhKVxyXG5cclxuICAgICAgICBjb25zdCBsaWdodDEgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGZmZmZmZilcclxuICAgICAgICBsaWdodDEucG9zaXRpb24uc2V0KDQwMCwgNTAwLCAxMDApXHJcbiAgICAgICAgc2NlbmUuYWRkKGxpZ2h0MSlcclxuICAgICAgICBjb25zdCBsaWdodDIgPSBuZXcgVEhSRUUuUG9pbnRMaWdodCgweGZmZmZmZilcclxuICAgICAgICBsaWdodDIucG9zaXRpb24uc2V0KC00MDAsIC01MDAsIC0xMDApXHJcbiAgICAgICAgc2NlbmUuYWRkKGxpZ2h0MilcclxuXHJcbiAgICAgICAgLypcclxuICAgICAgICBlbGVtZW50LnN0eWxlLndpZHRoID0gJzEwMHB4JztcclxuICAgICAgICBlbGVtZW50LnN0eWxlLmhlaWdodCA9ICcxMDBweCc7XHJcbiAgICAgICAgZWxlbWVudC5zdHlsZS5vcGFjaXR5ID0gMS4wO1xyXG4gICAgICAgIGVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvciggTWF0aC5yYW5kb20oKSAqIDB4ZmZmZmZmICkuZ2V0U3R5bGUoKTtcclxuICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdCBtYXJrZXJSb290ID0gIG5ldyBDU1MzRC5DU1MzRE9iamVjdChjYXJkKTtcclxuICAgICAgICBtYXJrZXJSb290Lm1hdHJpeEF1dG9VcGRhdGUgPSBmYWxzZVxyXG5cclxuICAgICAgICBzY2VuZS5hZGQobWFya2VyUm9vdClcclxuICAgICAgICBzY2VuZS5zY2FsZS5zZXQoU0NFTkVfU0NBTEUsU0NFTkVfU0NBTEUsU0NFTkVfU0NBTEUpO1xyXG5cclxuICAgICAgICByZXR1cm4gW3NjZW5lLCBjYW1lcmEsIG1hcmtlclJvb3RdXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGdsb2JhbD5cclxuOmdsb2JhbChib2R5KSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG59XHJcbjpnbG9iYWwoLmNhcmQpIHtcclxuICAgIHotaW5kZXg6IDEwMDtcclxufVxyXG46Z2xvYmFsKCN0ZWwpIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogMTAlO1xyXG4gICAgbGVmdDogMTAlO1xyXG59XHJcbjpnbG9iYWwoI2FkZCkge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm90dG9tOiAxMCU7XHJcbiAgICBsZWZ0OiAyMSU7ICAgXHJcbn1cclxuPC9zdHlsZT5cclxuXHJcbjxtYWluPlxyXG4gICAgPEFSQ29udGV4dD5cclxuICAgICAgICA8IS0tXHJcbiAgICAgICAgPEFSUGF0dGVybiBwYXR0ZXJuPVwiYXNzZXRzL2hpcm8ucGF0dFwiPlxyXG4gICAgICAgICAgICA8QmFieWxvbkpzUmVuZGVyZXIgY3JlYXRlU2NlbmU9e2N1YmVTY2VuZX0gZW5hYmxlZD1cInRydWVcIiAvPlxyXG4gICAgICAgICAgICA8VGhyZWVKc1JlbmRlcmVyLz5cclxuICAgICAgICAgICAgPFRocmVlSnNSZW5kZXJlciBjcmVhdGVFbmdpbmU9e2VuZ2luZUNyZWF0b3J9IGNyZWF0ZVNjZW5lPXtjYXJkU2NlbmV9PlxyXG4gICAgICAgICAgICAgICAgPENhcmQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPENhcmRCdXR0b24vPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDYXJkQnV0dG9uLz5cclxuICAgICAgICAgICAgICAgIDwvQ2FyZD5cclxuICAgICAgICAgICAgICAgIDxFbGVtZW50IGlkPSdTSk96M3FqZlFYVScgeD0wIHk9MCB6PTI0MCByeT0wLz5cclxuICAgICAgICAgICAgICAgIDxFbGVtZW50IGlkPSdZMi14Wi0xSEUtUScgeD0yNDAgeT0wIHo9MCByeT17TWF0aC5QSS8yfS8+XHJcbiAgICAgICAgICAgICAgICA8RWxlbWVudCBpZD0nSXJ5ZGtsTnBjRkknIHg9MCB5PTAgej0tMjQwIHJ5PXtNYXRoLlBJfS8+XHJcbiAgICAgICAgICAgICAgICA8RWxlbWVudCBpZD0nOXVieXRFc0NhUzAnIHg9LTI0MCB5PTAgej0wIHJ5PXstTWF0aC5QSS8yfS8+XHJcbiAgICAgICAgICAgIDwvVGhyZWVKc1JlbmRlcmVyPlxyXG4gICAgICAgIDwvQVJQYXR0ZXJuPlxyXG4gICAgICAgIC0tPlxyXG4gICAgICAgIDxBUlBhdHRlcm4gcGF0dGVybj1cIi9hc3NldHMvcGF0dGVybi1xci1tYXJrZXIucGF0dFwiPlxyXG4gICAgICAgICAgICA8VGhyZWVKc1JlbmRlcmVyIGRpcmVjdFVwZGF0ZT0nZmFsc2UnIHNjYWxlPScwLjAwNScgY3JlYXRlRW5naW5lPXtlbmdpbmVDcmVhdG9yfSBjcmVhdGVTY2VuZT17Y2FyZFNjZW5lfT5cclxuICAgICAgICAgICAgPC9UaHJlZUpzUmVuZGVyZXI+XHJcbiAgICAgICAgICAgIDxUaHJlZUpzUmVuZGVyZXIgZW5hYmxlZD1cInRydWVcIiAvPlxyXG4gICAgICAgICAgICA8QmFieWxvbkpzUmVuZGVyZXIgY3JlYXRlU2NlbmU9e2N1YmVTY2VuZX0gZW5hYmxlZD1cInRydWVcIiAvPlxyXG4gICAgICAgICAgICA8IS0tXHJcbiAgICAgICAgICAgIDxCYWJ5bG9uSnNSZW5kZXJlciBjcmVhdGVTY2VuZT17Y3ViZVNjZW5lfSBlbmFibGVkPVwidHJ1ZVwiIC8+XHJcbiAgICAgICAgICAgIDxUaHJlZUpzUmVuZGVyZXIvPlxyXG4gICAgICAgICAgICA8Q2FibGVzUmVuZGVyZXI+PC9DYWJsZXNSZW5kZXJlcj5cclxuICAgICAgICAgICAgLS0+XHJcbiAgICAgICAgPC9BUlBhdHRlcm4+XHJcbiAgICA8L0FSQ29udGV4dD5cclxuICAgIFxyXG4gICAgPGRpdiBpZD0ndGVsJyBjbGFzcz1cImJnLWJsdWUtNTAwIGhvdmVyOmJnLWJsdWUtNDAwIHRleHQtd2hpdGUgZm9udC1ib2xkIHB5LTIgcHgtNCBib3JkZXItYi00IGJvcmRlci1ibHVlLTcwMCBob3Zlcjpib3JkZXItYmx1ZS01MDAgcm91bmRlZFwiPlxyXG4gICAgICAgIDxhZGRyZXNzPlxyXG4gICAgICAgICAgICA8YSBiaW5kOnRoaXM9e3Bob25lfSBocmVmPVwidGVsOjEyMy00NTYtNzg5MFwiPtCf0L7Qt9Cy0L7QvdC4INC80L3QtTwvYT5cclxuICAgICAgICA8L2FkZHJlc3M+XHJcbiAgICA8L2Rpdj5cclxuPC9tYWluPlxyXG5cclxuPGRpdiBiaW5kOnRoaXM9e2NhcmR9IGNsYXNzPSdjYXJkJz5cclxuICAgIDxkaXYgY2xhc3M9XCJtYXgtdy1zbSB3LWZ1bGwgbGc6bWF4LXctZnVsbCBsZzpmbGV4XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImgtNDggbGc6aC1hdXRvIGxnOnctNDggZmxleC1ub25lIGJnLWNvdmVyIHJvdW5kZWQtdCBsZzpyb3VuZGVkLXQtbm9uZSBsZzpyb3VuZGVkLWwgdGV4dC1jZW50ZXIgb3ZlcmZsb3ctaGlkZGVuXCIgc3R5bGU9XCJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9hc3NldHMvaW1nL2NhcmQtbGVmdC5qcGcnKVwiIHRpdGxlPVwiV29tYW4gaG9sZGluZyBhIG11Z1wiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJib3JkZXItciBib3JkZXItYiBib3JkZXItbCBib3JkZXItZ3JheS00MDAgbGc6Ym9yZGVyLWwtMCBsZzpib3JkZXItdCBsZzpib3JkZXItZ3JheS00MDAgYmctdHJhbnNwYXJlbnQgcm91bmRlZC1iIGxnOnJvdW5kZWQtYi1ub25lIGxnOnJvdW5kZWQtciBwLTQgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWJldHdlZW4gbGVhZGluZy1ub3JtYWxcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLThcIj5cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC1zbSB0ZXh0LWdyYXktNjAwIGZsZXggaXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN2ZyBjbGFzcz1cImZpbGwtY3VycmVudCB0ZXh0LWdyYXktNTAwIHctMyBoLTMgbXItMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDIwIDIwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNNCA4VjZhNiA2IDAgMSAxIDEyIDB2MmgxYTIgMiAwIDAgMSAyIDJ2OGEyIDIgMCAwIDEtMiAySDNhMiAyIDAgMCAxLTItMnYtOGMwLTEuMS45LTIgMi0yaDF6bTUgNi43M1YxN2gydi0yLjI3YTIgMiAwIDEgMC0yIDB6TTcgNnYyaDZWNmEzIDMgMCAwIDAtNiAwelwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICAgICAgICAgTWVtYmVycyBvbmx5XHJcbiAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1ncmF5LTkwMCBmb250LWJvbGQgdGV4dC14bCBtYi0yXCI+Q2FuIGNvZmZlZSBtYWtlIHlvdSBhIGJldHRlciBkZXZlbG9wZXI/PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInRleHQtZ3JheS03MDAgdGV4dC1iYXNlXCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFZvbHVwdGF0aWJ1cyBxdWlhLCBudWxsYSEgTWFpb3JlcyBldCBwZXJmZXJlbmRpcyBlYXF1ZSwgZXhlcmNpdGF0aW9uZW0gcHJhZXNlbnRpdW0gbmloaWwuPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsZXggaXRlbXMtY2VudGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPVwidy0xMCBoLTEwIHJvdW5kZWQtZnVsbCBtci00XCIgc3JjPVwiL2Fzc2V0cy9pbWcvam9uYXRoYW4uanBnXCIgYWx0PVwiQXZhdGFyIG9mIEpvbmF0aGFuIFJlaW5pbmtcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXNtXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LWdyYXktOTAwIGxlYWRpbmctbm9uZVwiPkpvbmF0aGFuIFJlaW5pbms8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LWdyYXktNjAwXCI+QXVnIDE4PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJ0ZWw6KzEyMzQ1Njc4OTBcIj5DYWxsIG1lIHRvZGF5IGZvciBmcmVlITwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnN2ZWx0ZSdcclxuY29uc3QgYXBwID0gbmV3IEFwcCh7XHJcbiAgdGFyZ2V0OiBkb2N1bWVudC5ib2R5LFxyXG4gIHByb3BzOiB7XHJcbiAgICBuYW1lOiAnd29ybGQnXHJcbiAgfVxyXG59KVxyXG5cclxud2luZG93LmFwcCA9IGFwcFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=