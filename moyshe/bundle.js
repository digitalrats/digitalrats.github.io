!function(e){function t(t){for(var n,i,s=t[0],c=t[1],l=t[2],u=0,b=[];u<s.length;u++)i=s[u],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&b.push(a[i][0]),a[i]=0;for(n in c)Object.prototype.hasOwnProperty.call(c,n)&&(e[n]=c[n]);for(d&&d(t);b.length;)b.shift()();return o.push.apply(o,l||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,s=1;s<r.length;s++){var c=r[s];0!==a[c]&&(n=!1)}n&&(o.splice(t--,1),e=i(i.s=r[0]))}return e}var n={},a={0:0},o=[];function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var l=0;l<s.length;l++)t(s[l]);var d=c;o.push([62,1]),r()}({101:function(e,t,r){},102:function(e,t,r){},107:function(e,t,r){},108:function(e,t,r){},109:function(e,t,r){},110:function(e,t,r){},111:function(e,t,r){"use strict";r.r(t);r(7),r(22),r(9);var n=r(0),a=(r(101),r(1)),o=r(2);function i(e){var t,r,a=e[6].default,o=Object(n.g)(a,e,e[5],null);return{c(){t=Object(n.j)("div"),o&&o.c(),Object(n.c)(t,"class","gl")},m(a,i){Object(n.n)(a,t,i),o&&o.m(t,null),e[7](t),r=!0},p(e,t){var[r]=t;o&&o.p&&32&r&&Object(n.y)(o,a,e,e[5],r,null,null)},i(e){r||(Object(n.w)(o,e),r=!0)},o(e){Object(n.x)(o,e),r=!1},d(r){r&&Object(n.i)(t),o&&o.d(r),e[7](null)}}}function s(e,t,i){var{visible:s=!1}=t,{enabled:c=!1}=t,{createScene:l=null}=t,{createEngine:d=null}=t,u=Object(a.a)("ar"),b=Object(a.a)("marker"),m={scene:null,objects:[]};Object(a.c)("gl",m);var v,p=null;Object(a.b)(()=>{var e=r(36);e("https://cdn.babylonjs.com/babylon.js",()=>{e(["https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js","https://cdn.babylonjs.com/materialsLibrary/babylonjs.materials.min.js","https://cdn.babylonjs.com/postProcessesLibrary/babylonjs.postProcess.min.js","https://cdn.babylonjs.com/gui/babylon.gui.min.js","https://cdn.babylonjs.com/proceduralTexturesLibrary/babylonjs.proceduralTextures.min.js"],"extensions"),e.ready("extensions",()=>new Promise((function(e,t){var r=(null!=d?d:e=>{var t=document.createElement("canvas");return t.addEventListener("touchmove",e=>{e.preventDefault()},!1),e.appendChild(t),new BABYLON.Engine(t,!0)})(v);return(null!=l?l:e=>new Promise((function(t,r){var n=new BABYLON.Scene(e);n.useRightHandedSystem=!0,n.clearColor=new BABYLON.Color4(0,0,0,0);var a=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,n);a.attachControl(e.getRenderingCanvas(),!0);new BABYLON.HemisphericLight("light1",new BABYLON.Vector3(1,1,0),n),new BABYLON.PointLight("light2",new BABYLON.Vector3(0,1,-1),n);var o=BABYLON.MeshBuilder.CreateBox("box",{width:1,height:1,size:1},n),i=new BABYLON.TransformNode("markerRoot");return o.parent=i,t([n,a,i])})))(r).then(e=>{var[t,n,a]=e;for(var l in a.setEnabled(!1),m.objects)m.objects[l].parent=a;i(9,p=e=>{a.setEnabled("true"===c&&e),t.render()}),b.watch(e=>{if(e){var t=o.a.create();"portrait"===u.orientation?o.a.rotateZ(t,e,-1*Math.PI/2):o.a.copy(t,e),a.setPreTransformMatrix(BABYLON.Matrix.FromArray(t)),i(1,s=!0)}else i(1,s=!1)});var d=(e,t,r,n)=>{null!=e&&("portrait"===n?(e.setSize(r,t),e.resize()):(e.setSize(t,r),e.resize()))};d(r,u.size.videoWidth,u.size.videoHeight,u.orientation),u.resized.watch(()=>{d(r,u.size.offsetWidth,u.size.offsetHeight,u.orientation)}),u.render.watch(e=>{if("true"===c&&s&&null!=t){for(var r in m.objects)m.objects[r].custom.animation&&m.objects[r].custom.animation.tick(e);t.render()}}),u.setup.watch(e=>{null!=n&&(n.freezeProjectionMatrix(BABYLON.Matrix.FromArray(e)),console.log("Camera projection set: "+e))}),console.log("Scene created")}),e()})))})});var{$$slots:j={},$$scope:f}=t;return e.$set=e=>{"visible"in e&&i(1,s=e.visible),"enabled"in e&&i(2,c=e.enabled),"createScene"in e&&i(3,l=e.createScene),"createEngine"in e&&i(4,d=e.createEngine),"$$scope"in e&&i(5,f=e.$$scope)},e.$$.update=()=>{514&e.$$.dirty&&null!=p&&p(s)},[v,s,c,l,d,f,j,function(e){n.d[e?"unshift":"push"](()=>{i(0,v=e)})}]}class c extends n.a{constructor(e){super(),Object(n.m)(this,e,s,i,n.r,{visible:1,enabled:2,createScene:3,createEngine:4})}}var l=c,d=r(4);r(102);function u(e){var t,r,a,o,i=e[9].default,s=Object(n.g)(i,e,e[8],null),c=e[1]&&function(e){var t;return{c(){(t=Object(n.j)("div")).textContent="".concat(e[1])},m(e,r){Object(n.n)(e,t,r)},p:n.p,d(e){e&&Object(n.i)(t)}}}(e);return{c(){t=Object(n.j)("div"),s&&s.c(),r=Object(n.u)(),a=Object(n.j)("div"),c&&c.c(),Object(n.c)(t,"class","gl"),Object(n.c)(a,"id","debuginfo"),Object(n.c)(a,"class","svelte-199l4wg")},m(i,l){Object(n.n)(i,t,l),s&&s.m(t,null),e[10](t),Object(n.n)(i,r,l),Object(n.n)(i,a,l),c&&c.m(a,null),o=!0},p(e,t){var[r]=t;s&&s.p&&256&r&&Object(n.y)(s,i,e,e[8],r,null,null),e[1]&&c.p(e,r)},i(e){o||(Object(n.w)(s,e),o=!0)},o(e){Object(n.x)(s,e),o=!1},d(o){o&&Object(n.i)(t),s&&s.d(o),e[10](null),o&&Object(n.i)(r),o&&Object(n.i)(a),c&&c.d()}}}function b(e,t,r){var{enabled:i="true"}=t,{visible:s="true"}=t,{directUpdate:c="false"}=t,{scale:l="1"}=t,{createScene:u=null}=t,{createEngine:b=null}=t,m=Object(a.a)("ar"),v=Object(a.a)("marker"),p={scene:null,objects:[]};Object(a.c)("gl",p);var j,f=null;document.getElementById("glcanvas");Object(a.b)(()=>{var e=(null!=b?b:e=>{var t=document.createElement("canvas");t.addEventListener("touchmove",e=>{e.preventDefault()},!1),e.appendChild(t);var r=new d.WebGLRenderer({canvas:t,alpha:!0});return r.autoClear=!1,r})(j);(null!=u?u:()=>new Promise((function(e,t){var r=new d.Scene,n=new d.Camera;n.matrixAutoUpdate=!1,n.position.set(0,0,0),n.updateMatrix(),r.add(n);var a=new d.PointLight(16777215);a.position.set(400,500,100),r.add(a);var o=new d.PointLight(16777215);o.position.set(-400,-500,-100),r.add(o);var i=new d.Group;i.matrixAutoUpdate=!1;var s=new d.Mesh(new d.BoxGeometry(1,1,1),new d.MeshLambertMaterial({color:16777215,wireframe:!1,opacity:.5,transparent:!0}));return i.add(s),r.add(i),console.log(r),e([r,n,i])})))(e,j).then(t=>{var[n,a,d]=t;for(var u in p.scene=n,r(12,f=t=>{d.visible="true"===i&&"true"===t,e.clear&&e.clear(),e.render(n,a)}),v.watch(e=>{if(e){var t=o.a.create();if("portrait"===p.orientation?o.a.rotateZ(t,e,-1*Math.PI/2):o.a.copy(t,e),"true"===c)d.matrix.fromArray(t);else{var n=o.a.getTranslation(o.c.create(),t),a=o.a.getRotation(o.b.create(),t);d.quaternion.fromArray(a),d.position.fromArray(n),d.scale.set(l,l,l),d.updateMatrix(),d.updateWorldMatrix(!1,!0)}r(2,s="true")}else r(2,s="false")}),p.objects)d.add(p.objects[u]);m.setup.watch(e=>{null!=a&&(a.projectionMatrix.fromArray(e),console.log("Camera projection set: "+e))});var b=(e,t,r,n)=>{null!=e&&("portrait"===n?e.setSize(r,t):e.setSize(t,r))};b(e,m.size.offsetWidth,m.size.offsetHeight,m.orientation),m.resized.watch(()=>{b(e,m.size.offsetWidth,m.size.offsetHeight,m.orientation)}),m.render.watch(t=>{if("true"===i&&n&&"true"===s){for(var r in e.clear&&e.clear(),p.objects)p.objects[r].custom.animation&&p.objects[r].custom.animation.tick(t);e.render(n,a)}}),console.log("Scene created")})});var{$$slots:h={},$$scope:O}=t;return e.$set=e=>{"enabled"in e&&r(3,i=e.enabled),"visible"in e&&r(2,s=e.visible),"directUpdate"in e&&r(4,c=e.directUpdate),"scale"in e&&r(5,l=e.scale),"createScene"in e&&r(6,u=e.createScene),"createEngine"in e&&r(7,b=e.createEngine),"$$scope"in e&&r(8,O=e.$$scope)},e.$$.update=()=>{4100&e.$$.dirty&&null!=f&&f(s)},[j,void 0,s,i,c,l,u,b,O,h,function(e){n.d[e?"unshift":"push"](()=>{r(0,j=e)})}]}class m extends n.a{constructor(e){super(),Object(n.m)(this,e,b,u,n.r,{enabled:3,visible:2,directUpdate:4,scale:5,createScene:6,createEngine:7})}}var v=m;n.a;var p=r(14);n.a;r(107);n.a;r(108);n.a;var j=r(6);r(109);function f(e){var t;return{c(){(t=Object(n.j)("div")).innerHTML='<div class="px-6 py-4"><p class="text-gray-500 text-base">Наведите камеру на маркер</p></div>',Object(n.c)(t,"id","markerWarning"),Object(n.c)(t,"class","max-w-sm rounded overflow-hidden shadow-lg bg-cover svelte-1xatyo3")},m(e,r){Object(n.n)(e,t,r)},d(e){e&&Object(n.i)(t)}}}function h(e){var t,r,a,o,i,s,c,l,d,u,b,m,v,p,j,f,h,g,x,w=e[5].size.videoWidth+"",$=e[5].size.videoHeight+"",k=e[5].size.offsetWidth+"",M=e[5].size.offsetHeight+"",L=e[5].orientation+"",S=""!=e[4]&&O(e),C=""!=y&&{c(){(x=Object(n.j)("div")).textContent="Error: ".concat(y)},m(e,t){Object(n.n)(e,x,t)},p:n.p,d(e){e&&Object(n.i)(x)}};return{c(){t=Object(n.j)("div"),r=Object(n.j)("div"),a=Object(n.v)("Video size: "),o=Object(n.v)(w),i=Object(n.v)(", "),s=Object(n.v)($),c=Object(n.u)(),l=Object(n.j)("div"),d=Object(n.v)("Video offset: "),u=Object(n.v)(k),b=Object(n.v)(", "),m=Object(n.v)(M),v=Object(n.u)(),p=Object(n.j)("div"),j=Object(n.v)("Orientation: "),f=Object(n.v)(L),h=Object(n.u)(),S&&S.c(),g=Object(n.u)(),C&&C.c(),Object(n.c)(t,"id","debuginfo"),Object(n.c)(t,"class","svelte-1xatyo3")},m(e,O){Object(n.n)(e,t,O),Object(n.b)(t,r),Object(n.b)(r,a),Object(n.b)(r,o),Object(n.b)(r,i),Object(n.b)(r,s),Object(n.b)(t,c),Object(n.b)(t,l),Object(n.b)(l,d),Object(n.b)(l,u),Object(n.b)(l,b),Object(n.b)(l,m),Object(n.b)(t,v),Object(n.b)(t,p),Object(n.b)(p,j),Object(n.b)(p,f),Object(n.b)(t,h),S&&S.m(t,null),Object(n.b)(t,g),C&&C.m(t,null)},p(e,r){32&r&&w!==(w=e[5].size.videoWidth+"")&&Object(n.t)(o,w),32&r&&$!==($=e[5].size.videoHeight+"")&&Object(n.t)(s,$),32&r&&k!==(k=e[5].size.offsetWidth+"")&&Object(n.t)(u,k),32&r&&M!==(M=e[5].size.offsetHeight+"")&&Object(n.t)(m,M),32&r&&L!==(L=e[5].orientation+"")&&Object(n.t)(f,L),""!=e[4]?S?S.p(e,r):((S=O(e)).c(),S.m(t,g)):S&&(S.d(1),S=null),""!=y&&C.p(e,r)},d(e){e&&Object(n.i)(t),S&&S.d(),C&&C.d()}}}function O(e){var t,r,a;return{c(){t=Object(n.j)("div"),r=Object(n.v)("Msg: "),a=Object(n.v)(e[4])},m(e,o){Object(n.n)(e,t,o),Object(n.b)(t,r),Object(n.b)(t,a)},p(e,t){16&t&&Object(n.t)(a,e[4])},d(e){e&&Object(n.i)(t)}}}function g(e){var t,r,a,o,i,s,c,l,d=e[17].default,u=Object(n.g)(d,e,e[16],null),b=e[6]&&f(),m=("true"===e[0]||!0===e[0])&&h(e);return{c(){t=Object(n.j)("div"),r=Object(n.j)("video"),a=Object(n.u)(),o=Object(n.j)("div"),u&&u.c(),i=Object(n.u)(),b&&b.c(),s=Object(n.u)(),m&&m.c(),c=Object(n.k)(),Object(n.c)(r,"id","videocanvas"),r.controls="",r.autoplay="true",r.muted="true",r.loop="true",r.playsInline="true",Object(n.c)(r,"class","svelte-1xatyo3"),Object(n.c)(o,"id","markercontainer"),Object(n.c)(o,"class","svelte-1xatyo3"),Object(n.c)(t,"class","videoContainer svelte-1xatyo3")},m(d,v){Object(n.n)(d,t,v),Object(n.b)(t,r),e[18](r),Object(n.b)(t,a),Object(n.b)(t,o),u&&u.m(o,null),e[19](o),e[20](t),Object(n.n)(d,i,v),b&&b.m(d,v),Object(n.n)(d,s,v),m&&m.m(d,v),Object(n.n)(d,c,v),l=!0},p(e,t){var[r]=t;u&&u.p&&65536&r&&Object(n.y)(u,d,e,e[16],r,null,null),e[6]?b||((b=f()).c(),b.m(s.parentNode,s)):b&&(b.d(1),b=null),"true"===e[0]||!0===e[0]?m?m.p(e,r):((m=h(e)).c(),m.m(c.parentNode,c)):m&&(m.d(1),m=null)},i(e){l||(Object(n.w)(u,e),l=!0)},o(e){Object(n.x)(u,e),l=!1},d(r){r&&Object(n.i)(t),e[18](null),u&&u.d(r),e[19](null),e[20](null),r&&Object(n.i)(i),b&&b.d(r),r&&Object(n.i)(s),m&&m.d(r),r&&Object(n.i)(c)}}}var y="";function x(e,t,o){var i,s,c,l,{smoothingEnabled:d=!1}=t,{thresholdMode:u=2}=t,{threshold:b=160}=t,{debug:m=!1}=t,{debug_info:v=!0}=t,{maxARVideoSize:p=640}=t,{markerLossDelay:f=100}=t,{pattRatio:h=.9}=t,O=Object(j.c)(!0);Object(n.e)(e,O,e=>o(6,i=e));var g=Object(j.a)(O,{show:(e,t)=>t}),y=Object(j.c)(0),x=Object(j.a)(y,{inc:e=>(g.show(!1),console.log("Marker count: ",e+1),e+1),dec:e=>(console.log("Marker count: ",e-1),1===e&&g.show(!0),e-1)}),w="",$=[],k={size:{videoWidth:null,videoHeight:null,offsetWidth:320,offsetHeight:240,marginLeft:0,marginTop:0},orientation:null,cameramat:null,marker:{visible:!1,mat:null},setup:Object(j.b)(),resized:Object(j.b)(),render:Object(j.b)(),markerFound:Object(j.b)(),markerLost:Object(j.b)(),loadPattern:(e,t)=>{$.push([e,t])},visibleMarkers:x};Object(a.c)("ar",k);var M=f,L=!1;Object(a.b)(()=>new Promise((function(e,t){var n=r(36);return n(m?["/js/artoolkit/artoolkit.api.js","/js/artoolkit/artoolkit.debug.js"]:["/js/artoolkit/artoolkit_wasm.js"],"bundle"),n.ready("bundle",()=>new Promise((function(e,t){var r=new ARCameraParam;return r.onload=()=>new Promise((function(e,t){if(L)return e();if(L=!0,void 0===navigator.mediaDevices||void 0===navigator.mediaDevices.enumerateDevices||void 0===navigator.mediaDevices.getUserMedia){var n="";void 0===navigator.mediaDevices?n="navigator.mediaDevices":void 0===navigator.mediaDevices.enumerateDevices?n="navigator.mediaDevices.enumerateDevices":void 0===navigator.mediaDevices.getUserMedia?n="navigator.mediaDevices.getUserMedia":console.assert(!1),onError({name:"",message:"WebRTC issue-! "+n+" not present in your browser"})}var a=null;return c.addEventListener("canplay",e=>new Promise((function(t,n){var i=e.target,s=e=>{if(o(3,l.style.top=e.top,l),o(3,l.style.left=e.left,l),o(5,k.size.videoWidth=e.videoWidth,k),o(5,k.size.videoHeight=e.videoHeight,k),o(5,k.size.offsetWidth=e.offsetWidth,k),o(5,k.size.offsetHeight=e.offsetHeight,k),window.innerWidth<window.innerHeight?(o(5,k.orientation="portrait",k),o(3,l.style.width=e.offsetHeight+"px",l),o(3,l.style.height=e.offsetWidth+"px",l),o(3,l.style.transform="rotate(-90deg) translateX(-100%)",l)):(o(5,k.orientation="landscape",k),o(3,l.style.width=e.offsetWidth+"px",l),o(3,l.style.height=e.offsetHeight+"px",l),o(3,l.style.transform="",l)),null!=a){var[t,r]="landscape"===k.orientation?[i.videoWidth,i.videoHeight]:[i.videoHeight,i.videoWidth];a.orientation=k.orientation,a.videoWidth=t,a.videoHeight=r,k.setup(a.getCameraMatrix())}o(4,w="resized"),k.resized()};new ResizeObserver(()=>{null!=k&&null!=i&&(null==a&&(a=function(e,t){var r=e=>new Promise((function(t,r){return"true"===m&&(console.log("Detected marker with ids:",e.data.marker.id,e.data.marker.idPatt,e.data.marker.idMatrix),console.log("Marker data",e.data.marker),console.log("Marker transform matrix:",[].join.call(e.data.matrix,", "))),k.markerFound({canvas:e.target.canvas,data:e.data}),t()})),n=(p||Math.max(e.videoWidth,e.videoHeight))/Math.max(e.videoWidth,e.videoHeight),a=m?e.videoWidth:n*e.videoWidth,i=m?e.videoHeight:n*e.videoHeight;!m&&e.videoWidth<e.videoHeight&&([i,a]=[a,i]);var s=new ARController(a,i,t);return s.onload=()=>new Promise((function(t,n){return!0,console.log("arctrl loaded"),o(4,w="arctrl loaded"),s.setPatternDetectionMode(artoolkit.AR_TEMPLATE_MATCHING_MONO_AND_MATRIX),s.setMatrixCodeType(artoolkit.AR_MATRIX_CODE_4x4_BCH_13_5_5),s.setPattRatio(h),s.setThresholdMode(u),s.setThreshold(b),s.ctx.mozImageSmoothingEnabled=d,s.ctx.webkitImageSmoothingEnabled=d,s.ctx.msImageSmoothingEnabled=d,s.ctx.imageSmoothingEnabled=d,s.image=e,o(4,w="arctrl video assigned"),k.setup(s.getCameraMatrix()),o(4,w="arctrl camera matrix set"),o(5,k.loadPattern=(e,t)=>s.loadMarker(e,e=>new Promise((function(r,n){return console.log("Marker loaded, id:",e),t(e),r()}))),k),$.forEach(e=>{var[t,r]=e;k.loadPattern(t,r)}),o(4,w="arctrl camera markers set"),s.addEventListener("getMarker",r),o(4,w="arctrl loop started"),"true"!==m&&!0!==m||(o(8,m=!1),s.debugSetup()),t()})),s}(i,r)),s(i))}).observe(i),s(i);var c=()=>new Promise((function(e,t){return requestAnimationFrame(c),null==a||(a.process(i),a.getMarkerNum()>0?M=f:(0===M&&k.markerLost(),M--),k.render()),e()}));return c(),i.play(),t()}))),navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:"environment"}}).then(e=>{console.log("Got camera object"),o(2,c.srcObject=e,c)},e=>{console.error("Error: "+e),o(2,c.src="/assets/Output_4-1.webm",c)}),console.log("artoolkit loaded"),e()})),r.load("/assets/camera_para.dat"),e()}))),e()})));var{$$slots:S={},$$scope:C}=t;return e.$set=e=>{"smoothingEnabled"in e&&o(9,d=e.smoothingEnabled),"thresholdMode"in e&&o(10,u=e.thresholdMode),"threshold"in e&&o(11,b=e.threshold),"debug"in e&&o(8,m=e.debug),"debug_info"in e&&o(0,v=e.debug_info),"maxARVideoSize"in e&&o(12,p=e.maxARVideoSize),"markerLossDelay"in e&&o(13,f=e.markerLossDelay),"pattRatio"in e&&o(14,h=e.pattRatio),"$$scope"in e&&o(16,C=e.$$scope)},[v,s,c,l,w,k,i,O,m,d,u,b,p,f,h,"/js/artoolkit/artoolkit_wasm.wasm",C,S,function(e){n.d[e?"unshift":"push"](()=>{o(2,c=e)})},function(e){n.d[e?"unshift":"push"](()=>{o(3,l=e)})},function(e){n.d[e?"unshift":"push"](()=>{o(1,s=e)})}]}class w extends n.a{constructor(e){super(),Object(n.m)(this,e,x,g,n.r,{smoothingEnabled:9,thresholdMode:10,threshold:11,debug:8,debug_info:0,maxARVideoSize:12,markerLossDelay:13,pattRatio:14,artoolkit_wasm_url:15})}get artoolkit_wasm_url(){return this.$$.ctx[15]}}var $=w;class k{constructor(e,t,r){this.visible=!1,this.markerLostCountdown=r,this.update=Object(j.b)(),this.marker=Object(j.c)(o.a),this.marker.on(this.update,(t,r)=>(null!==r?this.visible||(e.visibleMarkers.inc(),this.visible=!0):this.visible&&(this.visible=!1,e.visibleMarkers.dec()),r)),void 0===t?e.markerFound.watch(e=>{this.update(e.data.matrixGL_RH)}):e.markerFound.watch(e=>{t(e)?(this.update(e.data.matrixGL_RH),this.markerLostCountdown=r):(0===this.markerLostCountdown&&this.update(null),this.markerLostCountdown--)}),e.markerLost.watch(()=>{this.update(null)})}watch(e){this.marker.watch(e)}}function M(e){var t,r,a=e[3].default,o=Object(n.g)(a,e,e[2],null);return{c(){t=Object(n.j)("div"),o&&o.c(),Object(n.c)(t,"class","marker")},m(e,a){Object(n.n)(e,t,a),o&&o.m(t,null),r=!0},p(e,t){var[r]=t;o&&o.p&&4&r&&Object(n.y)(o,a,e,e[2],r,null,null)},i(e){r||(Object(n.w)(o,e),r=!0)},o(e){Object(n.x)(o,e),r=!1},d(e){e&&Object(n.i)(t),o&&o.d(e)}}}function L(e,t,r){var{pattern:n="assets/hiro.patt"}=t,{markerLossDelay:o=10}=t,i=Object(a.a)("ar"),s=-1;i.loadPattern(n,e=>{s=e});var c=new k(i,e=>s>=0&&e.data.marker.idPatt===s,o);Object(a.c)("marker",c);var{$$slots:l={},$$scope:d}=t;return e.$set=e=>{"pattern"in e&&r(0,n=e.pattern),"markerLossDelay"in e&&r(1,o=e.markerLossDelay),"$$scope"in e&&r(2,d=e.$$scope)},[n,o,d,l]}class S extends n.a{constructor(e){super(),Object(n.m)(this,e,L,M,n.r,{pattern:0,markerLossDelay:1})}}var C=S;r(110);function E(e){var t,r,a,o,i,s;return t=new v({props:{directUpdate:"false",scale:"0.005",createEngine:e[3],createScene:e[5]}}),a=new v({props:{enabled:"true"}}),i=new l({props:{createScene:e[4],enabled:"true"}}),{c(){Object(n.f)(t.$$.fragment),r=Object(n.u)(),Object(n.f)(a.$$.fragment),o=Object(n.u)(),Object(n.f)(i.$$.fragment)},m(e,c){Object(n.o)(t,e,c),Object(n.n)(e,r,c),Object(n.o)(a,e,c),Object(n.n)(e,o,c),Object(n.o)(i,e,c),s=!0},p(e,r){var n={};4096&r&&(n.$$scope={dirty:r,ctx:e}),t.$set(n)},i(e){s||(Object(n.w)(t.$$.fragment,e),Object(n.w)(a.$$.fragment,e),Object(n.w)(i.$$.fragment,e),s=!0)},o(e){Object(n.x)(t.$$.fragment,e),Object(n.x)(a.$$.fragment,e),Object(n.x)(i.$$.fragment,e),s=!1},d(e){Object(n.h)(t,e),e&&Object(n.i)(r),Object(n.h)(a,e),e&&Object(n.i)(o),Object(n.h)(i,e)}}}function A(e){var t,r;return t=new C({props:{pattern:"/assets/pattern-qr-marker.patt",$$slots:{default:[E]},$$scope:{ctx:e}}}),{c(){Object(n.f)(t.$$.fragment)},m(e,a){Object(n.o)(t,e,a),r=!0},p(e,r){var n={};4096&r&&(n.$$scope={dirty:r,ctx:e}),t.$set(n)},i(e){r||(Object(n.w)(t.$$.fragment,e),r=!0)},o(e){Object(n.x)(t.$$.fragment,e),r=!1},d(e){Object(n.h)(t,e)}}}function P(e){var t,r,a,o,i,s,c,l,d;return r=new $({props:{$$slots:{default:[A]},$$scope:{ctx:e}}}),{c(){t=Object(n.j)("main"),Object(n.f)(r.$$.fragment),a=Object(n.u)(),o=Object(n.j)("div"),i=Object(n.j)("address"),(s=Object(n.j)("a")).textContent="Позвони мне",c=Object(n.u)(),(l=Object(n.j)("div")).innerHTML='<div class="max-w-sm w-full lg:max-w-full lg:flex"><div class="h-48 lg:h-auto lg:w-48 flex-none bg-cover rounded-t lg:rounded-t-none lg:rounded-l text-center overflow-hidden" style="background-image: url(&#39;/assets/img/card-left.jpg&#39;)" title="Woman holding a mug"></div> \n        <div class="border-r border-b border-l border-gray-400 lg:border-l-0 lg:border-t lg:border-gray-400 bg-transparent rounded-b lg:rounded-b-none lg:rounded-r p-4 flex flex-col justify-between leading-normal"><div class="mb-8"><p class="text-sm text-gray-600 flex items-center"><svg class="fill-current text-gray-500 w-3 h-3 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M4 8V6a6 6 0 1 1 12 0v2h1a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-8c0-1.1.9-2 2-2h1zm5 6.73V17h2v-2.27a2 2 0 1 0-2 0zM7 6v2h6V6a3 3 0 0 0-6 0z"></path></svg>\n                    Members only\n                </p> \n                <div class="text-gray-900 font-bold text-xl mb-2">Can coffee make you a better developer?</div> \n                <p class="text-gray-700 text-base">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatibus quia, nulla! Maiores et perferendis eaque, exercitationem praesentium nihil.</p></div> \n            <div class="flex items-center"><img class="w-10 h-10 rounded-full mr-4" src="/assets/img/jonathan.jpg" alt="Avatar of Jonathan Reinink"> \n                <div class="text-sm"><p class="text-gray-900 leading-none">Jonathan Reinink</p> \n                    <p class="text-gray-600">Aug 18</p> \n                    <a href="tel:+1234567890">Call me today for free!</a></div></div></div></div>',Object(n.c)(s,"href","tel:123-456-7890"),Object(n.c)(o,"id","tel"),Object(n.c)(o,"class","bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded"),Object(n.c)(l,"class","card")},m(u,b){Object(n.n)(u,t,b),Object(n.o)(r,t,null),Object(n.b)(t,a),Object(n.b)(t,o),Object(n.b)(o,i),Object(n.b)(i,s),e[7](s),e[8](t),Object(n.n)(u,c,b),Object(n.n)(u,l,b),e[9](l),d=!0},p(e,t){var[n]=t,a={};4096&n&&(a.$$scope={dirty:n,ctx:e}),r.$set(a)},i(e){d||(Object(n.w)(r.$$.fragment,e),d=!0)},o(e){Object(n.x)(r.$$.fragment,e),d=!1},d(a){a&&Object(n.i)(t),Object(n.h)(r),e[7](null),e[8](null),a&&Object(n.i)(c),a&&Object(n.i)(l),e[9](null)}}}function z(e,t,o){var i,s,c,l=document.documentElement;l.classList.add("text-gray-900"),l.classList.add("antialiased"),l.classList.add("leading-tight");var{SCENE_SCALE:d=.1}=t;return Object(a.b)(()=>new Promise((function(e,t){return e()}))),e.$set=e=>{"SCENE_SCALE"in e&&o(6,d=e.SCENE_SCALE)},[i,s,c,e=>{var t=new p.CSS3DRenderer;return e.appendChild(t.domElement),t},e=>new Promise((function(t,r){var n,a,o,i;return Promise.resolve(BABYLON.SceneLoader.LoadAsync("","https://digitalrats.ru/assets/babylonJS_logo_v3.babylon",e)).then((function(s){try{return(n=s).clearColor=new BABYLON.Color4(0,0,0,0),(a=new BABYLON.Camera("camera1",new BABYLON.Vector3.Zero,n)).attachControl(e.getRenderingCanvas(),!0),o=[n.rootNodes[0],n.rootNodes[1]],i=new BABYLON.TransformNode("markerRoot"),o[0].parent=i,o[1].parent=i,t([n,a,i])}catch(e){return r(e)}}),r)})),e=>new Promise((function(e,t){var n=r(4),a=r(14),o=new n.Scene,i=new n.PerspectiveCamera;i.matrixAutoUpdate=!1,i.position.set(0,0,0),i.updateMatrix(),o.add(i);var c=new n.PointLight(16777215);c.position.set(400,500,100),o.add(c);var l=new n.PointLight(16777215);l.position.set(-400,-500,-100),o.add(l);var u=new a.CSS3DObject(s);return u.matrixAutoUpdate=!1,o.add(u),o.scale.set(d,d,d),e([o,i,u])})),d,function(e){n.d[e?"unshift":"push"](()=>{o(2,c=e)})},function(e){n.d[e?"unshift":"push"](()=>{o(0,i=e)})},function(e){n.d[e?"unshift":"push"](()=>{o(1,s=e)})}]}class W extends n.a{constructor(e){super(),Object(n.m)(this,e,z,P,n.r,{SCENE_SCALE:6})}}var B=new W({target:document.body,props:{name:"world"}});window.app=B;t.default=B},14:function(e,t,r){"use strict";r.r(t),r.d(t,"CSS3DObject",(function(){return a})),r.d(t,"CSS3DSprite",(function(){return o})),r.d(t,"CSS3DRenderer",(function(){return i}));r(7),r(103),r(105),r(9);var n=r(4),a=function(e){n.Object3D.call(this),this.element=e,this.element.style.position="absolute",this.element.style.pointerEvents="auto",this.custom={animation:void 0},this.addEventListener("removed",(function(){this.traverse((function(e){e.element instanceof Element&&null!==e.element.parentNode&&e.element.parentNode.removeChild(e.element)}))}))};a.prototype=Object.create(n.Object3D.prototype),a.prototype.constructor=a;var o=function(e){a.call(this,e)};o.prototype=Object.create(a.prototype),o.prototype.constructor=o;var i=function(){var e,t,r,i,s=this,c=new n.Matrix4,l={camera:{fov:0,style:""},objects:new WeakMap},d=document.createElement("div");d.style.overflow="hidden",this.domElement=d;var u=document.createElement("div");u.style.WebkitTransformStyle="preserve-3d",u.style.transformStyle="preserve-3d",u.style.pointerEvents="none",d.appendChild(u);var b=/Trident/i.test(navigator.userAgent);function m(e){return Math.abs(e)<1e-10?0:e}function v(e){var t=e.elements;return"matrix3d("+m(t[0])+","+m(-t[1])+","+m(t[2])+","+m(t[3])+","+m(t[4])+","+m(-t[5])+","+m(t[6])+","+m(t[7])+","+m(t[8])+","+m(-t[9])+","+m(t[10])+","+m(t[11])+","+m(t[12])+","+m(-t[13])+","+m(t[14])+","+m(t[15])+")"}function p(e,t){var n=e.elements,a="matrix3d("+m(n[0])+","+m(n[1])+","+m(n[2])+","+m(n[3])+","+m(-n[4])+","+m(-n[5])+","+m(-n[6])+","+m(-n[7])+","+m(n[8])+","+m(n[9])+","+m(n[10])+","+m(n[11])+","+m(n[12])+","+m(n[13])+","+m(n[14])+","+m(n[15])+")";return b?"translate(-50%,-50%)translate("+r+"px,"+i+"px)"+t+a:"translate(-50%,-50%)"+a}this.getSize=function(){return{width:e,height:t}},this.setSize=function(n,a){r=(e=n)/2,i=(t=a)/2,d.style.width=n+"px",d.style.height=a+"px",u.style.width=n+"px",u.style.height=a+"px"};var j,f,h=(j=new n.Vector3,f=new n.Vector3,function(e,t){return j.setFromMatrixPosition(e.matrixWorld),f.setFromMatrixPosition(t.matrixWorld),j.distanceToSquared(f)});function O(e){for(var t=function(e){var t=[];return e.traverse((function(e){e instanceof a&&t.push(e)})),t}(e).sort((function(e,t){return l.objects.get(e).distanceToCameraSquared-l.objects.get(t).distanceToCameraSquared})),r=t.length,n=0,o=t.length;n<o;n++)t[n].element.style.zIndex=r-n}this.render=function(e,t){var n=t.projectionMatrix.elements[5]*i;if(l.camera.fov!==n&&(t.isPerspectiveCamera?(d.style.WebkitPerspective=n+"px",d.style.perspective=n+"px"):(d.style.WebkitPerspective="",d.style.perspective=""),l.camera.fov=n),!0===e.autoUpdate&&e.updateMatrixWorld(),null===t.parent&&t.updateMatrixWorld(),t.isOrthographicCamera)var j=-(t.right+t.left)/2,f=(t.top+t.bottom)/2;var g=t.isOrthographicCamera?"scale("+n+")translate("+m(j)+"px,"+m(f)+"px)"+v(t.matrixWorldInverse):"translateZ("+n+"px)"+v(t.matrixWorldInverse),y=g+"translate("+r+"px,"+i+"px)";l.camera.style===y||b||(u.style.WebkitTransform=y,u.style.transform=y,l.camera.style=y),function e(t,r,n,i){if(t instanceof a){var d;t.onBeforeRender(s,r,n),t instanceof o?(c.copy(n.matrixWorldInverse),c.transpose(),c.copyPosition(t.matrixWorld),c.scale(t.scale),c.elements[3]=0,c.elements[7]=0,c.elements[11]=0,c.elements[15]=1,d=p(c,i)):d=p(t.matrixWorld,i);var m=t.element,v=l.objects.get(t);if(void 0===v||v.style!==d){m.style.WebkitTransform=d,m.style.transform=d;var j={style:d};b&&(j.distanceToCameraSquared=h(n,t)),l.objects.set(t,j)}m.style.display=t.visible?"":"none",m.parentNode!==u&&u.appendChild(m),t.onAfterRender(s,r,n)}for(var f=0,O=t.children.length;f<O;f++)e(t.children[f],r,n,i)}(e,e,t,g),b&&O(e)}}},62:function(e,t,r){e.exports=r(111)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,